// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9961028838192053	WITHOUT_CLASSIFICATION	0.003897116180794746	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9961028838192053	WITHOUT_CLASSIFICATION	0.003897116180794746	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.999602472924581	WITHOUT_CLASSIFICATION	3.975270754189614E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.7521604404895739	WITHOUT_CLASSIFICATION	0.2478395595104261	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.983350735068327	WITHOUT_CLASSIFICATION	0.01664926493167293	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.8201276935407967	IMPLEMENTATION	0.17987230645920319	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9738002563888102	WITHOUT_CLASSIFICATION	0.026199743611189895	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.8955642261678031	WITHOUT_CLASSIFICATION	0.10443577383219693	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9689250911887974	WITHOUT_CLASSIFICATION	0.031074908811202617	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9181626608888673	WITHOUT_CLASSIFICATION	0.08183733911113274	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.996965344057077	WITHOUT_CLASSIFICATION	0.0030346559429229535	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.6095567327955679	WITHOUT_CLASSIFICATION	0.3904432672044322	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9736255710165095	WITHOUT_CLASSIFICATION	0.02637442898349052	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9736255710165095	WITHOUT_CLASSIFICATION	0.02637442898349052	IMPLEMENTATION
/**	IMPLEMENTATION	0.7313539609549891	IMPLEMENTATION	0.268646039045011	WITHOUT_CLASSIFICATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.8184526463232702	IMPLEMENTATION	0.18154735367672992	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.996269574929297	IMPLEMENTATION	0.00373042507070295	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9884284002646098	WITHOUT_CLASSIFICATION	0.01157159973539031	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.999999994655841	WITHOUT_CLASSIFICATION	5.344158952097918E-9	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9748009996948801	WITHOUT_CLASSIFICATION	0.025199000305119915	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.6395926096344765	WITHOUT_CLASSIFICATION	0.3604073903655235	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9999609644439877	WITHOUT_CLASSIFICATION	3.9035556012196945E-5	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9427766436735276	WITHOUT_CLASSIFICATION	0.05722335632647244	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9938990855985956	IMPLEMENTATION	0.006100914401404301	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9938990855985956	IMPLEMENTATION	0.006100914401404301	WITHOUT_CLASSIFICATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9987510358921234	IMPLEMENTATION	0.0012489641078764781	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9920088086352112	WITHOUT_CLASSIFICATION	0.007991191364788708	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9966908755901714	IMPLEMENTATION	0.0033091244098286156	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.503399515271909	IMPLEMENTATION	0.496600484728091	WITHOUT_CLASSIFICATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.717543467589518	IMPLEMENTATION	0.28245653241048196	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9890292661504136	WITHOUT_CLASSIFICATION	0.010970733849586392	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.609091469672457	IMPLEMENTATION	0.390908530327543	WITHOUT_CLASSIFICATION
// todo : look at optimizing these...	IMPLEMENTATION	0.999463036712846	WITHOUT_CLASSIFICATION	5.3696328715399E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.6326871857452421	WITHOUT_CLASSIFICATION	0.36731281425475787	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.560311497716215	WITHOUT_CLASSIFICATION	0.43968850228378514	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9957631047210436	WITHOUT_CLASSIFICATION	0.004236895278956395	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.8220495233302768	IMPLEMENTATION	0.1779504766697231	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.8501728613644398	WITHOUT_CLASSIFICATION	0.14982713863556016	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9941285940438588	WITHOUT_CLASSIFICATION	0.005871405956141209	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9946982727585748	IMPLEMENTATION	0.005301727241425217	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9946982727585748	IMPLEMENTATION	0.005301727241425217	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.969668313938375	IMPLEMENTATION	0.03033168606162501	WITHOUT_CLASSIFICATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999456771814993	WITHOUT_CLASSIFICATION	5.4322818500694765E-5	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9963283559744339	WITHOUT_CLASSIFICATION	0.0036716440255660024	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9998387969843324	IMPLEMENTATION	1.612030156675667E-4	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9066210105216119	WITHOUT_CLASSIFICATION	0.09337898947838806	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9988632777176624	WITHOUT_CLASSIFICATION	0.0011367222823376734	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9247759474448514	WITHOUT_CLASSIFICATION	0.0752240525551487	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9999877060404787	WITHOUT_CLASSIFICATION	1.2293959521322844E-5	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.6742747412845094	IMPLEMENTATION	0.3257252587154906	WITHOUT_CLASSIFICATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9984376107959214	WITHOUT_CLASSIFICATION	0.0015623892040785687	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.869752576203284	IMPLEMENTATION	0.13024742379671603	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.8071598609558662	IMPLEMENTATION	0.19284013904413377	WITHOUT_CLASSIFICATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9714762210318528	WITHOUT_CLASSIFICATION	0.02852377896814713	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.8296520781894056	WITHOUT_CLASSIFICATION	0.17034792181059447	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.995082394263306	IMPLEMENTATION	0.004917605736694062	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.8296520781894056	WITHOUT_CLASSIFICATION	0.17034792181059447	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9999965653288135	IMPLEMENTATION	3.4346711865075347E-6	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9990814436292919	IMPLEMENTATION	9.185563707080922E-4	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.8296520781894056	WITHOUT_CLASSIFICATION	0.17034792181059447	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999996520364287	WITHOUT_CLASSIFICATION	3.4796357127113094E-7	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999998204128231	WITHOUT_CLASSIFICATION	1.7958717691006658E-7	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.5516306032301557	WITHOUT_CLASSIFICATION	0.4483693967698444	IMPLEMENTATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9999605749633144	WITHOUT_CLASSIFICATION	3.942503668560567E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9995621439975495	WITHOUT_CLASSIFICATION	4.378560024505688E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999995568787973	WITHOUT_CLASSIFICATION	4.431212027586679E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999995568787973	WITHOUT_CLASSIFICATION	4.431212027586679E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999995568787973	WITHOUT_CLASSIFICATION	4.431212027586679E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999995568787973	WITHOUT_CLASSIFICATION	4.431212027586679E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999995568787973	WITHOUT_CLASSIFICATION	4.431212027586679E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999995568787973	WITHOUT_CLASSIFICATION	4.431212027586679E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999995568787973	WITHOUT_CLASSIFICATION	4.431212027586679E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999996738965311	WITHOUT_CLASSIFICATION	3.261034689193844E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999996738965311	WITHOUT_CLASSIFICATION	3.261034689193844E-7	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999995763243654	WITHOUT_CLASSIFICATION	4.2367563453582763E-7	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999357431041	WITHOUT_CLASSIFICATION	6.425689592988618E-8	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999997210505348	WITHOUT_CLASSIFICATION	2.7894946518504643E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999993710672826	WITHOUT_CLASSIFICATION	6.289327173790461E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999993710672826	WITHOUT_CLASSIFICATION	6.289327173790461E-7	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999083064689	WITHOUT_CLASSIFICATION	9.169353113904961E-8	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999467444484	WITHOUT_CLASSIFICATION	5.32555517118587E-8	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.999999864221639	WITHOUT_CLASSIFICATION	1.3577836103030083E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999953966575792	WITHOUT_CLASSIFICATION	4.603342420831637E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999932169323	WITHOUT_CLASSIFICATION	6.783067603911872E-9	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999932169323	WITHOUT_CLASSIFICATION	6.783067603911872E-9	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999996479924161	WITHOUT_CLASSIFICATION	3.520075838093207E-7	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9981372884821389	WITHOUT_CLASSIFICATION	0.0018627115178610836	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999936921953774	WITHOUT_CLASSIFICATION	6.307804622590077E-6	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999998639405434	WITHOUT_CLASSIFICATION	1.3605945647714862E-7	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999999998234255	WITHOUT_CLASSIFICATION	1.7657449102743447E-9	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999817571583	WITHOUT_CLASSIFICATION	1.8242841613617E-8	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999969201656045	WITHOUT_CLASSIFICATION	3.0798343955854227E-6	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999986780211529	WITHOUT_CLASSIFICATION	1.3219788470083842E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999704087940698	WITHOUT_CLASSIFICATION	2.9591205930210382E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.998139361996978	WITHOUT_CLASSIFICATION	0.0018606380030220613	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999886478674181	WITHOUT_CLASSIFICATION	1.135213258179068E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999962036062967	WITHOUT_CLASSIFICATION	3.7963937032440796E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999999800064	WITHOUT_CLASSIFICATION	1.999353035779521E-11	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999942685457436	WITHOUT_CLASSIFICATION	5.731454256403835E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999942685457436	WITHOUT_CLASSIFICATION	5.731454256403835E-6	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999993722954411	WITHOUT_CLASSIFICATION	6.277045588732474E-7	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.999998402028358	WITHOUT_CLASSIFICATION	1.597971642003249E-6	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999998668395867	WITHOUT_CLASSIFICATION	1.3316041314758225E-7	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999932148725797	WITHOUT_CLASSIFICATION	6.785127420184791E-6	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999946009997747	WITHOUT_CLASSIFICATION	5.399000225281076E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7313539609549891	IMPLEMENTATION	0.268646039045011	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7313539609549891	IMPLEMENTATION	0.268646039045011	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999995049359314	WITHOUT_CLASSIFICATION	4.950640685559946E-7	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999841181666	WITHOUT_CLASSIFICATION	1.5881833343617542E-8	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999967712672	WITHOUT_CLASSIFICATION	3.228732863113968E-9	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999440193069176	WITHOUT_CLASSIFICATION	5.5980693082449054E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999984173324148	WITHOUT_CLASSIFICATION	1.5826675851955036E-6	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929422496557	WITHOUT_CLASSIFICATION	7.057750344251588E-6	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985619233009	WITHOUT_CLASSIFICATION	1.438076699005004E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999997848433805	WITHOUT_CLASSIFICATION	2.151566194353868E-7	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999909682940731	WITHOUT_CLASSIFICATION	9.031705926847856E-6	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999105299090886	WITHOUT_CLASSIFICATION	8.947009091142208E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999917692266421	WITHOUT_CLASSIFICATION	8.230773357883518E-6	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999909682940731	WITHOUT_CLASSIFICATION	9.031705926847856E-6	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999917692266421	WITHOUT_CLASSIFICATION	8.230773357883518E-6	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998443919786	WITHOUT_CLASSIFICATION	1.5560802138982184E-7	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999463099288858	WITHOUT_CLASSIFICATION	5.3690071114291575E-5	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999673491394642	WITHOUT_CLASSIFICATION	3.26508605359277E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9987275389741529	WITHOUT_CLASSIFICATION	0.001272461025847172	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999964580097	WITHOUT_CLASSIFICATION	3.5419902209161053E-9	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999986343554	WITHOUT_CLASSIFICATION	1.3656445792021382E-9	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9102950510576688	WITHOUT_CLASSIFICATION	0.08970494894233116	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9985793841370373	WITHOUT_CLASSIFICATION	0.0014206158629626836	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9995841464854411	WITHOUT_CLASSIFICATION	4.1585351455885775E-4	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999170323405763	WITHOUT_CLASSIFICATION	8.296765942369366E-5	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999619782244087	WITHOUT_CLASSIFICATION	3.802177559122608E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999988265606534	WITHOUT_CLASSIFICATION	1.1734393466335369E-6	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999652210052	WITHOUT_CLASSIFICATION	3.477899477409007E-8	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9948866009118095	WITHOUT_CLASSIFICATION	0.0051133990881905705	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999977423086825	WITHOUT_CLASSIFICATION	2.257691317440284E-6	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999998167486	WITHOUT_CLASSIFICATION	1.832514489582429E-10	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999219073905	WITHOUT_CLASSIFICATION	7.8092609586647E-8	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.999985881542344	WITHOUT_CLASSIFICATION	1.4118457655968079E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999139750118147	WITHOUT_CLASSIFICATION	8.60249881852579E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999990046949478	WITHOUT_CLASSIFICATION	9.953050522171567E-7	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999937889933347	WITHOUT_CLASSIFICATION	6.211006665404759E-6	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999846025744	WITHOUT_CLASSIFICATION	1.5397425570798105E-8	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999996047398352	WITHOUT_CLASSIFICATION	3.952601647956003E-7	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999987748826611	WITHOUT_CLASSIFICATION	1.2251173388754057E-6	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9832972340413354	WITHOUT_CLASSIFICATION	0.016702765958664507	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999986355883008	WITHOUT_CLASSIFICATION	1.3644116991744437E-6	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999999998506644	WITHOUT_CLASSIFICATION	1.4933560179440967E-9	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9814828788864459	WITHOUT_CLASSIFICATION	0.01851712111355411	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999784145979	WITHOUT_CLASSIFICATION	2.1585402054309708E-8	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999995527042502	WITHOUT_CLASSIFICATION	4.4729574979609824E-7	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999997295776502	WITHOUT_CLASSIFICATION	2.704223498007075E-6	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999987570209652	WITHOUT_CLASSIFICATION	1.2429790348534416E-6	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999999971532828	WITHOUT_CLASSIFICATION	2.846717165788385E-9	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999480110635	WITHOUT_CLASSIFICATION	5.1988936445111317E-8	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.999999782647668	WITHOUT_CLASSIFICATION	2.173523320050538E-7	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999953963892	WITHOUT_CLASSIFICATION	4.6036107399386385E-9	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999480110635	WITHOUT_CLASSIFICATION	5.1988936445111317E-8	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999632125344	WITHOUT_CLASSIFICATION	3.6787465652893614E-8	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999996822300399	WITHOUT_CLASSIFICATION	3.1776996013467907E-7	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999995864154956	WITHOUT_CLASSIFICATION	4.135845044787717E-7	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999989573258917	WITHOUT_CLASSIFICATION	1.0426741082666389E-6	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999985856567805	WITHOUT_CLASSIFICATION	1.4143432195751535E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998803263881	WITHOUT_CLASSIFICATION	1.1967361187928297E-7	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998803263881	WITHOUT_CLASSIFICATION	1.1967361187928297E-7	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999959221758676	WITHOUT_CLASSIFICATION	4.077824132308593E-6	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999987605955956	WITHOUT_CLASSIFICATION	1.2394044044199719E-6	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9998968602103686	WITHOUT_CLASSIFICATION	1.0313978963138314E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999985270556	WITHOUT_CLASSIFICATION	1.472944462319949E-9	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999992354663271	WITHOUT_CLASSIFICATION	7.645336730345456E-7	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999238977528733	WITHOUT_CLASSIFICATION	7.61022471267608E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999986561335323	WITHOUT_CLASSIFICATION	1.3438664676785485E-6	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999804260207419	WITHOUT_CLASSIFICATION	1.9573979258069765E-5	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999996252385723	WITHOUT_CLASSIFICATION	3.7476142766345067E-7	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999856814595	WITHOUT_CLASSIFICATION	1.431854044376612E-8	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999971663105145	WITHOUT_CLASSIFICATION	2.8336894853829266E-6	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999971663105145	WITHOUT_CLASSIFICATION	2.8336894853829266E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999791168880056	WITHOUT_CLASSIFICATION	2.088311199440358E-4	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999984757140402	WITHOUT_CLASSIFICATION	1.5242859597604784E-6	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999998923385183	WITHOUT_CLASSIFICATION	1.0766148169908686E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999971663105145	WITHOUT_CLASSIFICATION	2.8336894853829266E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999791168880056	WITHOUT_CLASSIFICATION	2.088311199440358E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999791168880056	WITHOUT_CLASSIFICATION	2.088311199440358E-4	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999517798388	WITHOUT_CLASSIFICATION	4.822016119882949E-8	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999159209113666	WITHOUT_CLASSIFICATION	8.407908863337056E-5	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999570104534	WITHOUT_CLASSIFICATION	4.298954653533906E-8	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999994832578493	WITHOUT_CLASSIFICATION	5.167421507041363E-6	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999989935793156	WITHOUT_CLASSIFICATION	1.0064206844026596E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999989935793156	WITHOUT_CLASSIFICATION	1.0064206844026596E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999964565925408	WITHOUT_CLASSIFICATION	3.5434074593883937E-6	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999999030635335	WITHOUT_CLASSIFICATION	9.693646648035831E-8	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.999999890416905	WITHOUT_CLASSIFICATION	1.0958309497570406E-7	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999973503714	WITHOUT_CLASSIFICATION	2.6496285158027728E-9	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999973503714	WITHOUT_CLASSIFICATION	2.6496285158027728E-9	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999982557069987	WITHOUT_CLASSIFICATION	1.744293001158495E-6	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999706599405109	WITHOUT_CLASSIFICATION	2.9340059489059783E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999437569996631	WITHOUT_CLASSIFICATION	5.624300033692746E-5	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999870989522	WITHOUT_CLASSIFICATION	1.2901047821759335E-8	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999999997971534	WITHOUT_CLASSIFICATION	2.0284656037972096E-10	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999768090697	WITHOUT_CLASSIFICATION	2.3190930311317722E-8	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9997341516024678	WITHOUT_CLASSIFICATION	2.6584839753213374E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998643043021037	WITHOUT_CLASSIFICATION	1.356956978962281E-4	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999895344127601	WITHOUT_CLASSIFICATION	1.0465587239909766E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999437569996631	WITHOUT_CLASSIFICATION	5.624300033692746E-5	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9999485560474853	WITHOUT_CLASSIFICATION	5.144395251459655E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999244282247141	WITHOUT_CLASSIFICATION	7.557177528597718E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999244282247141	WITHOUT_CLASSIFICATION	7.557177528597718E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999736966436981	WITHOUT_CLASSIFICATION	2.6303356301931744E-5	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999874165362262	WITHOUT_CLASSIFICATION	1.2583463773739511E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9988444480937066	WITHOUT_CLASSIFICATION	0.0011555519062933445	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999988662700819	WITHOUT_CLASSIFICATION	1.1337299180879916E-6	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9998419687850859	WITHOUT_CLASSIFICATION	1.580312149141225E-4	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9994220515320532	WITHOUT_CLASSIFICATION	5.779484679468667E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.999999149701494	WITHOUT_CLASSIFICATION	8.502985060183457E-7	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999817362302297	WITHOUT_CLASSIFICATION	1.8263769770352784E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999999241237	WITHOUT_CLASSIFICATION	7.587631197715294E-11	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999999241237	WITHOUT_CLASSIFICATION	7.587631197715294E-11	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997088994554	WITHOUT_CLASSIFICATION	2.9110054447228293E-7	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9995621439975495	WITHOUT_CLASSIFICATION	4.378560024505688E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999999953030069	WITHOUT_CLASSIFICATION	4.6969930733472465E-9	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999995568787973	WITHOUT_CLASSIFICATION	4.431212027586679E-7	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999998791785046	WITHOUT_CLASSIFICATION	1.2082149533544965E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999996738965311	WITHOUT_CLASSIFICATION	3.261034689193844E-7	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999991156536602	WITHOUT_CLASSIFICATION	8.843463397252693E-7	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999998060602602	WITHOUT_CLASSIFICATION	1.9393973977334514E-7	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999999122771515	WITHOUT_CLASSIFICATION	8.772284855454603E-8	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.999999454908948	WITHOUT_CLASSIFICATION	5.450910519174306E-7	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999991455203125	WITHOUT_CLASSIFICATION	8.544796873789901E-7	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999975240213849	WITHOUT_CLASSIFICATION	2.4759786151486853E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999997953461636	WITHOUT_CLASSIFICATION	2.046538363879153E-7	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999981248165349	WITHOUT_CLASSIFICATION	1.8751834649736241E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999357431041	WITHOUT_CLASSIFICATION	6.425689592988618E-8	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999993383385041	WITHOUT_CLASSIFICATION	6.616614958902592E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999993383385041	WITHOUT_CLASSIFICATION	6.616614958902592E-7	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999999079400334	WITHOUT_CLASSIFICATION	9.205996661599819E-8	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999996016886551	WITHOUT_CLASSIFICATION	3.983113448776421E-7	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999999197270574	WITHOUT_CLASSIFICATION	8.027294262951349E-8	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999998801219743	WITHOUT_CLASSIFICATION	1.1987802565557126E-7	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999973532485453	WITHOUT_CLASSIFICATION	2.6467514546175053E-6	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999987990868371	WITHOUT_CLASSIFICATION	1.2009131629066227E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999993710672826	WITHOUT_CLASSIFICATION	6.289327173790461E-7	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999985256240745	WITHOUT_CLASSIFICATION	1.4743759253897718E-6	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999993833683902	WITHOUT_CLASSIFICATION	6.166316096997295E-7	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999977530003681	WITHOUT_CLASSIFICATION	2.246999631896129E-6	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999998156500436	WITHOUT_CLASSIFICATION	1.8434995647009694E-7	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999969513947988	WITHOUT_CLASSIFICATION	3.048605201242113E-6	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999977504533145	WITHOUT_CLASSIFICATION	2.249546685425136E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995619637602	WITHOUT_CLASSIFICATION	4.380362397887988E-7	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999030305412	WITHOUT_CLASSIFICATION	9.69694588301923E-8	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999980766186264	WITHOUT_CLASSIFICATION	1.9233813736549743E-6	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.999997663803229	WITHOUT_CLASSIFICATION	2.336196770969889E-6	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999961679730578	WITHOUT_CLASSIFICATION	3.832026942261507E-6	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999999553138271	WITHOUT_CLASSIFICATION	4.4686172801146865E-8	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999995568787973	WITHOUT_CLASSIFICATION	4.431212027586679E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999995568787973	WITHOUT_CLASSIFICATION	4.431212027586679E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999996738965311	WITHOUT_CLASSIFICATION	3.261034689193844E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999996738965311	WITHOUT_CLASSIFICATION	3.261034689193844E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999997953461636	WITHOUT_CLASSIFICATION	2.046538363879153E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999993383385041	WITHOUT_CLASSIFICATION	6.616614958902592E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995619637602	WITHOUT_CLASSIFICATION	4.380362397887988E-7	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999083064689	WITHOUT_CLASSIFICATION	9.169353113904961E-8	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999999966294176	WITHOUT_CLASSIFICATION	3.3705823448111164E-9	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999997914436074	WITHOUT_CLASSIFICATION	2.085563926857682E-7	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999999237385789	WITHOUT_CLASSIFICATION	7.626142104326106E-8	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999989816676349	WITHOUT_CLASSIFICATION	1.018332365101419E-6	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999228440553	WITHOUT_CLASSIFICATION	7.715594483131461E-8	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.999999529325513	WITHOUT_CLASSIFICATION	4.706744870475844E-7	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999996415749791	WITHOUT_CLASSIFICATION	3.5842502093848964E-7	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.999961599315263	WITHOUT_CLASSIFICATION	3.840068473703128E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999995204821704	WITHOUT_CLASSIFICATION	4.795178294963221E-7	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999982028288281	WITHOUT_CLASSIFICATION	1.7971711718840678E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999982028288281	WITHOUT_CLASSIFICATION	1.7971711718840678E-6	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999983529144	WITHOUT_CLASSIFICATION	1.6470855978237215E-9	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999999039366099	WITHOUT_CLASSIFICATION	9.606339007646769E-8	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999793032083336	WITHOUT_CLASSIFICATION	2.069679166638845E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999910231537438	WITHOUT_CLASSIFICATION	8.976846256242597E-6	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999999994228852	WITHOUT_CLASSIFICATION	5.771147958541352E-9	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.999999955247724	WITHOUT_CLASSIFICATION	4.475227609843427E-8	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999999791898451	WITHOUT_CLASSIFICATION	2.0810154894320393E-8	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999467444484	WITHOUT_CLASSIFICATION	5.32555517118587E-8	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999995094335905	WITHOUT_CLASSIFICATION	4.905664095386543E-7	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999234549741	WITHOUT_CLASSIFICATION	7.654502591096881E-8	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999234549741	WITHOUT_CLASSIFICATION	7.654502591096881E-8	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999998490603863	WITHOUT_CLASSIFICATION	1.5093961361073905E-7	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999999337203839	WITHOUT_CLASSIFICATION	6.627961614856853E-8	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999993374679556	WITHOUT_CLASSIFICATION	6.625320444945068E-7	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.999999910795525	WITHOUT_CLASSIFICATION	8.920447508352303E-8	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.99999989988923	WITHOUT_CLASSIFICATION	1.0011077001806831E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999996738965311	WITHOUT_CLASSIFICATION	3.261034689193844E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999997953461636	WITHOUT_CLASSIFICATION	2.046538363879153E-7	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999357431041	WITHOUT_CLASSIFICATION	6.425689592988618E-8	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995619637602	WITHOUT_CLASSIFICATION	4.380362397887988E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995619637602	WITHOUT_CLASSIFICATION	4.380362397887988E-7	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999559992001	WITHOUT_CLASSIFICATION	4.4000799838397476E-8	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999559992001	WITHOUT_CLASSIFICATION	4.4000799838397476E-8	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999996424557718	WITHOUT_CLASSIFICATION	3.5754422830521905E-7	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999993602692302	WITHOUT_CLASSIFICATION	6.397307698756075E-7	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999993602692302	WITHOUT_CLASSIFICATION	6.397307698756075E-7	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999984643449537	WITHOUT_CLASSIFICATION	1.5356550464601572E-6	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999990982593832	WITHOUT_CLASSIFICATION	9.017406168193136E-7	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999999570986838	WITHOUT_CLASSIFICATION	4.2901316234697976E-8	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999999903833224	WITHOUT_CLASSIFICATION	9.616677534410051E-9	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999999117763598	WITHOUT_CLASSIFICATION	8.822364018361095E-8	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999953966575792	WITHOUT_CLASSIFICATION	4.603342420831637E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999953966575792	WITHOUT_CLASSIFICATION	4.603342420831637E-6	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9997412066845559	WITHOUT_CLASSIFICATION	2.5879331544408074E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999989770392748	WITHOUT_CLASSIFICATION	1.0229607251852443E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999999457493135	WITHOUT_CLASSIFICATION	5.42506864992055E-8	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.999998683616518	WITHOUT_CLASSIFICATION	1.3163834820839325E-6	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999999919356396	WITHOUT_CLASSIFICATION	8.064360418632747E-9	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999989266225224	WITHOUT_CLASSIFICATION	1.0733774775478977E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999932169323	WITHOUT_CLASSIFICATION	6.783067603911872E-9	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.999999928823267	WITHOUT_CLASSIFICATION	7.117673293908856E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.999999928823267	WITHOUT_CLASSIFICATION	7.117673293908856E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999996479924161	WITHOUT_CLASSIFICATION	3.520075838093207E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999996479924161	WITHOUT_CLASSIFICATION	3.520075838093207E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999909833205648	WITHOUT_CLASSIFICATION	9.016679435252283E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999909833205648	WITHOUT_CLASSIFICATION	9.016679435252283E-6	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999296414057	WITHOUT_CLASSIFICATION	7.035859425856718E-8	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999296414057	WITHOUT_CLASSIFICATION	7.035859425856718E-8	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999953966575792	WITHOUT_CLASSIFICATION	4.603342420831637E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999932169323	WITHOUT_CLASSIFICATION	6.783067603911872E-9	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.999999928823267	WITHOUT_CLASSIFICATION	7.117673293908856E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.999999928823267	WITHOUT_CLASSIFICATION	7.117673293908856E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999996479924161	WITHOUT_CLASSIFICATION	3.520075838093207E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999909833205648	WITHOUT_CLASSIFICATION	9.016679435252283E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999909833205648	WITHOUT_CLASSIFICATION	9.016679435252283E-6	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999296414057	WITHOUT_CLASSIFICATION	7.035859425856718E-8	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999939696806253	WITHOUT_CLASSIFICATION	6.030319374790672E-6	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999979963337582	WITHOUT_CLASSIFICATION	2.003666241823009E-6	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9996610170004622	WITHOUT_CLASSIFICATION	3.3898299953782825E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999702916330317	WITHOUT_CLASSIFICATION	2.9708366968165545E-5	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999971334817258	WITHOUT_CLASSIFICATION	2.866518274091476E-6	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.999997189147681	WITHOUT_CLASSIFICATION	2.810852319039946E-6	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999891344654871	WITHOUT_CLASSIFICATION	1.086553451295553E-5	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.999999783064166	WITHOUT_CLASSIFICATION	2.1693583402233233E-7	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999920042036753	WITHOUT_CLASSIFICATION	7.995796324679685E-6	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999728776777	WITHOUT_CLASSIFICATION	2.712232226730116E-8	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999967146481126	WITHOUT_CLASSIFICATION	3.2853518873501143E-6	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999487607119	WITHOUT_CLASSIFICATION	5.123928819948837E-8	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999959221758676	WITHOUT_CLASSIFICATION	4.077824132308593E-6	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.999997189147681	WITHOUT_CLASSIFICATION	2.810852319039946E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999819354648082	WITHOUT_CLASSIFICATION	1.8064535191837616E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999819354648082	WITHOUT_CLASSIFICATION	1.8064535191837616E-5	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999999679285831	WITHOUT_CLASSIFICATION	3.207141680712306E-8	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999901894085	WITHOUT_CLASSIFICATION	9.810591423687675E-9	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999901894085	WITHOUT_CLASSIFICATION	9.810591423687675E-9	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999467516423	WITHOUT_CLASSIFICATION	5.324835778724791E-8	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999812152738	WITHOUT_CLASSIFICATION	1.8784726193266993E-8	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999989476972654	WITHOUT_CLASSIFICATION	1.0523027346212352E-6	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999934898051563	WITHOUT_CLASSIFICATION	6.510194843636373E-6	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999934898051563	WITHOUT_CLASSIFICATION	6.510194843636373E-6	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999999998234255	WITHOUT_CLASSIFICATION	1.7657449102743447E-9	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999996947274968	WITHOUT_CLASSIFICATION	3.0527250320573727E-7	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999996947274968	WITHOUT_CLASSIFICATION	3.0527250320573727E-7	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999998527892746	WITHOUT_CLASSIFICATION	1.4721072539075085E-7	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999819016785	WITHOUT_CLASSIFICATION	1.8098321467901828E-8	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999999252233	WITHOUT_CLASSIFICATION	7.477674109684196E-11	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999949151549737	WITHOUT_CLASSIFICATION	5.0848450262988905E-6	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999999035509518	WITHOUT_CLASSIFICATION	9.64490481576922E-8	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999998797250274	WITHOUT_CLASSIFICATION	1.202749725820438E-7	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999817571583	WITHOUT_CLASSIFICATION	1.8242841613617E-8	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999948781329004	WITHOUT_CLASSIFICATION	5.121867099525296E-6	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9878880745350185	WITHOUT_CLASSIFICATION	0.012111925464981566	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999978279541132	WITHOUT_CLASSIFICATION	2.172045886829764E-6	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999980333882013	WITHOUT_CLASSIFICATION	1.966611798816703E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999704087940698	WITHOUT_CLASSIFICATION	2.9591205930210382E-5	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999030975087	WITHOUT_CLASSIFICATION	9.690249122279255E-8	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999642046463598	WITHOUT_CLASSIFICATION	3.579535364017777E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999823235904	WITHOUT_CLASSIFICATION	1.7676409603516415E-8	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999704087940698	WITHOUT_CLASSIFICATION	2.9591205930210382E-5	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999193539032	WITHOUT_CLASSIFICATION	8.064609677884412E-8	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999891894371087	WITHOUT_CLASSIFICATION	1.0810562891373462E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999926845218772	WITHOUT_CLASSIFICATION	7.315478122808533E-6	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999988217135494	WITHOUT_CLASSIFICATION	1.1782864506724402E-6	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.999998011569745	WITHOUT_CLASSIFICATION	1.988430254961911E-6	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999992225382955	WITHOUT_CLASSIFICATION	7.774617044903167E-7	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999999358456587	WITHOUT_CLASSIFICATION	6.415434129304851E-7	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999962036062967	WITHOUT_CLASSIFICATION	3.7963937032440796E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999997690995763	WITHOUT_CLASSIFICATION	2.3090042366718692E-7	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999999800064	WITHOUT_CLASSIFICATION	1.999353035779521E-11	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999945500784733	WITHOUT_CLASSIFICATION	5.4499215266952096E-6	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999974110053	WITHOUT_CLASSIFICATION	2.5889947938747318E-9	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999997118446013	WITHOUT_CLASSIFICATION	2.881553987346949E-7	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999817571583	WITHOUT_CLASSIFICATION	1.8242841613617E-8	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999997690995763	WITHOUT_CLASSIFICATION	2.3090042366718692E-7	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999945500784733	WITHOUT_CLASSIFICATION	5.4499215266952096E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999997118446013	WITHOUT_CLASSIFICATION	2.881553987346949E-7	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999984000187966	WITHOUT_CLASSIFICATION	1.5999812034264356E-6	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999845754501205	WITHOUT_CLASSIFICATION	1.542454987950193E-5	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999980866783104	WITHOUT_CLASSIFICATION	1.913321689682243E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999942685457436	WITHOUT_CLASSIFICATION	5.731454256403835E-6	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999994153847186	WITHOUT_CLASSIFICATION	5.84615281452289E-7	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999962535937789	WITHOUT_CLASSIFICATION	3.7464062212428734E-6	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.99999772381104	WITHOUT_CLASSIFICATION	2.2761889600224753E-6	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999912970460846	WITHOUT_CLASSIFICATION	8.70295391552078E-6	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999998117820518	WITHOUT_CLASSIFICATION	1.8821794820962816E-7	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.99999998809429	WITHOUT_CLASSIFICATION	1.1905709964336135E-8	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998051537776	WITHOUT_CLASSIFICATION	1.948462224058507E-7	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999934491583486	WITHOUT_CLASSIFICATION	6.550841651377667E-6	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999502432694	WITHOUT_CLASSIFICATION	4.975673064741191E-8	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999992030682469	WITHOUT_CLASSIFICATION	7.969317531676294E-7	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999972267915798	WITHOUT_CLASSIFICATION	2.7732084202868905E-6	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999977198019822	WITHOUT_CLASSIFICATION	2.280198017837029E-6	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.999998402028358	WITHOUT_CLASSIFICATION	1.597971642003249E-6	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999872930287	WITHOUT_CLASSIFICATION	1.2706971255027548E-8	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999995033513195	WITHOUT_CLASSIFICATION	4.966486805561308E-7	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999997690995763	WITHOUT_CLASSIFICATION	2.3090042366718692E-7	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999999596130158	WITHOUT_CLASSIFICATION	4.038698415319471E-8	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999938864808511	WITHOUT_CLASSIFICATION	6.113519148908629E-6	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999995181639688	WITHOUT_CLASSIFICATION	4.818360312143576E-7	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999975030051329	WITHOUT_CLASSIFICATION	2.4969948671027753E-6	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999997713878642	WITHOUT_CLASSIFICATION	2.2861213568731755E-7	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999996903759922	WITHOUT_CLASSIFICATION	3.096240077330267E-7	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999931028849258	WITHOUT_CLASSIFICATION	6.897115074224212E-6	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999770894528	WITHOUT_CLASSIFICATION	2.2910547325073206E-8	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999960335008359	WITHOUT_CLASSIFICATION	3.966499164134116E-6	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999969509542188	WITHOUT_CLASSIFICATION	3.0490457812387272E-6	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999919245165406	WITHOUT_CLASSIFICATION	8.075483459412088E-6	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999985541787391	WITHOUT_CLASSIFICATION	1.44582126091769E-6	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9984981623996929	WITHOUT_CLASSIFICATION	0.001501837600306975	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999932148725797	WITHOUT_CLASSIFICATION	6.785127420184791E-6	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999998806852762	WITHOUT_CLASSIFICATION	1.1931472377064297E-7	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999937392928361	WITHOUT_CLASSIFICATION	6.260707163905951E-6	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9999178651139069	WITHOUT_CLASSIFICATION	8.213488609304628E-5	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999617248608333	WITHOUT_CLASSIFICATION	3.827513916672657E-5	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999799226523586	WITHOUT_CLASSIFICATION	2.0077347641373002E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999950226125457	WITHOUT_CLASSIFICATION	4.9773874543059665E-6	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999999977599238	WITHOUT_CLASSIFICATION	2.240076206116037E-8	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999739000260854	WITHOUT_CLASSIFICATION	2.6099973914556585E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999998849217955	WITHOUT_CLASSIFICATION	1.1507820450176876E-6	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999990230788561	WITHOUT_CLASSIFICATION	9.76921143856452E-7	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999577753386175	WITHOUT_CLASSIFICATION	4.222466138238663E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999577753386175	WITHOUT_CLASSIFICATION	4.222466138238663E-5	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999596149282525	WITHOUT_CLASSIFICATION	4.038507174742146E-5	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999372944762607	WITHOUT_CLASSIFICATION	6.270552373931968E-5	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999797635400527	WITHOUT_CLASSIFICATION	2.0236459947306134E-5	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999990592373701	WITHOUT_CLASSIFICATION	9.40762629954975E-7	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999998025350068	WITHOUT_CLASSIFICATION	1.9746499330689298E-7	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999997928646092	WITHOUT_CLASSIFICATION	2.0713539090997077E-7	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999965106773054	WITHOUT_CLASSIFICATION	3.489322694562579E-6	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999473881155199	WITHOUT_CLASSIFICATION	5.261188448010993E-5	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999993563314298	WITHOUT_CLASSIFICATION	6.436685702163696E-7	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999994501906818	WITHOUT_CLASSIFICATION	5.498093181886135E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.999979783486818	WITHOUT_CLASSIFICATION	2.021651318196493E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.999996620322005	WITHOUT_CLASSIFICATION	3.3796779950895868E-6	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999999682132518	WITHOUT_CLASSIFICATION	3.178674829822733E-8	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9995552721295576	WITHOUT_CLASSIFICATION	4.447278704424772E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999841880955	WITHOUT_CLASSIFICATION	1.5811904454101823E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939107103354	WITHOUT_CLASSIFICATION	6.089289664595832E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999981030051128	WITHOUT_CLASSIFICATION	1.8969948870773828E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999999993387061	WITHOUT_CLASSIFICATION	6.612938937445241E-9	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999862983788261	WITHOUT_CLASSIFICATION	1.3701621173852125E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9998281143355037	WITHOUT_CLASSIFICATION	1.7188566449627524E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999997826065165	WITHOUT_CLASSIFICATION	2.1739348347570275E-7	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999997826065165	WITHOUT_CLASSIFICATION	2.1739348347570275E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999948216187877	WITHOUT_CLASSIFICATION	5.17838121226913E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999948216187877	WITHOUT_CLASSIFICATION	5.17838121226913E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999998849217955	WITHOUT_CLASSIFICATION	1.1507820450176876E-6	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999980012091059	WITHOUT_CLASSIFICATION	1.9987908940428607E-6	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998441117190707	WITHOUT_CLASSIFICATION	1.5588828092921587E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999964605778139	WITHOUT_CLASSIFICATION	3.539422186117553E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997088994554	WITHOUT_CLASSIFICATION	2.9110054447228293E-7	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998441117190707	WITHOUT_CLASSIFICATION	1.5588828092921587E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999964605778139	WITHOUT_CLASSIFICATION	3.539422186117553E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997815088117747	WITHOUT_CLASSIFICATION	2.184911882252903E-4	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999998227895471	WITHOUT_CLASSIFICATION	1.7721045298560572E-7	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.99999994452085	WITHOUT_CLASSIFICATION	5.5479149995756754E-8	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999998791591255	WITHOUT_CLASSIFICATION	1.2084087458031033E-7	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9889364084222869	WITHOUT_CLASSIFICATION	0.011063591577713054	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9984345586109524	WITHOUT_CLASSIFICATION	0.001565441389047626	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999961939562	WITHOUT_CLASSIFICATION	3.8060439002263756E-9	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999491200241	WITHOUT_CLASSIFICATION	5.0879975905911324E-8	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999986770400471	WITHOUT_CLASSIFICATION	1.3229599529555627E-6	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999997902405974	WITHOUT_CLASSIFICATION	2.0975940255172385E-7	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999925867920944	WITHOUT_CLASSIFICATION	7.41320790566528E-6	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999968293105	WITHOUT_CLASSIFICATION	3.1706894326374816E-9	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999077075397	WITHOUT_CLASSIFICATION	9.229246037247737E-8	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999155424818256	WITHOUT_CLASSIFICATION	8.445751817443748E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997088994554	WITHOUT_CLASSIFICATION	2.9110054447228293E-7	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999791227596404	WITHOUT_CLASSIFICATION	2.0877240359587516E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999998615415778	WITHOUT_CLASSIFICATION	1.3845842220238474E-7	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999998615415778	WITHOUT_CLASSIFICATION	1.3845842220238474E-7	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999990937279934	WITHOUT_CLASSIFICATION	9.06272006634291E-7	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997815088117747	WITHOUT_CLASSIFICATION	2.184911882252903E-4	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999911321575923	WITHOUT_CLASSIFICATION	8.867842407684149E-6	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999509855752101	WITHOUT_CLASSIFICATION	4.901442478985537E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.998643287856282	WITHOUT_CLASSIFICATION	0.0013567121437180279	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999985491273259	WITHOUT_CLASSIFICATION	1.4508726740356564E-6	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9986630039418418	WITHOUT_CLASSIFICATION	0.001336996058158194	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997815088117747	WITHOUT_CLASSIFICATION	2.184911882252903E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999985491273259	WITHOUT_CLASSIFICATION	1.4508726740356564E-6	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9986630039418418	WITHOUT_CLASSIFICATION	0.001336996058158194	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.993786176539747	WITHOUT_CLASSIFICATION	0.0062138234602530295	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999953881855861	WITHOUT_CLASSIFICATION	4.611814413880748E-6	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999971433772228	WITHOUT_CLASSIFICATION	2.8566227771018945E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997815088117747	WITHOUT_CLASSIFICATION	2.184911882252903E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997815088117747	WITHOUT_CLASSIFICATION	2.184911882252903E-4	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.999999832180011	WITHOUT_CLASSIFICATION	1.6781998900877165E-7	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.999999338974948	WITHOUT_CLASSIFICATION	6.610250518948946E-7	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999867368131623	WITHOUT_CLASSIFICATION	1.3263186837730418E-5	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999946458971664	WITHOUT_CLASSIFICATION	5.354102833679737E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999985423694423	WITHOUT_CLASSIFICATION	1.4576305576640853E-6	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999989281476	WITHOUT_CLASSIFICATION	1.0718524379061727E-9	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999871864967379	WITHOUT_CLASSIFICATION	1.2813503262206244E-5	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999997800218811	WITHOUT_CLASSIFICATION	2.1997811892300478E-7	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999974404428751	WITHOUT_CLASSIFICATION	2.559557124836901E-6	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.999997060284805	WITHOUT_CLASSIFICATION	2.939715195102128E-6	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999975905048034	WITHOUT_CLASSIFICATION	2.409495196592822E-6	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999526500100936	WITHOUT_CLASSIFICATION	4.7349989906306994E-5	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999998461277219	WITHOUT_CLASSIFICATION	1.5387227805132704E-7	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999866973312534	WITHOUT_CLASSIFICATION	1.3302668746551988E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996338454942	WITHOUT_CLASSIFICATION	3.6615450585767276E-7	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.999999904291404	WITHOUT_CLASSIFICATION	9.57085960821895E-8	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999440193069176	WITHOUT_CLASSIFICATION	5.5980693082449054E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999951720885588	WITHOUT_CLASSIFICATION	4.827911441125859E-6	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9979020999519558	WITHOUT_CLASSIFICATION	0.002097900048044223	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999903309749486	WITHOUT_CLASSIFICATION	9.669025051293956E-6	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999248760658465	WITHOUT_CLASSIFICATION	7.512393415346397E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9962357901518023	WITHOUT_CLASSIFICATION	0.003764209848197826	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9962357901518023	WITHOUT_CLASSIFICATION	0.003764209848197826	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999440193069176	WITHOUT_CLASSIFICATION	5.5980693082449054E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9998957350751703	WITHOUT_CLASSIFICATION	1.0426492482978874E-4	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999951580507274	WITHOUT_CLASSIFICATION	4.841949272559231E-6	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9749278002351784	WITHOUT_CLASSIFICATION	0.025072199764821678	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999998450046036	WITHOUT_CLASSIFICATION	1.5499539645088257E-7	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999692458993298	WITHOUT_CLASSIFICATION	3.07541006702252E-5	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999997226021692	WITHOUT_CLASSIFICATION	2.7739783081243493E-7	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999990494775282	WITHOUT_CLASSIFICATION	9.505224718473264E-7	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999863146153648	WITHOUT_CLASSIFICATION	1.3685384635260945E-5	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999998265327528	WITHOUT_CLASSIFICATION	1.7346724721990568E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998327920431247	WITHOUT_CLASSIFICATION	1.6720795687538272E-4	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999996919658929	WITHOUT_CLASSIFICATION	3.0803410707867285E-7	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999970618160611	WITHOUT_CLASSIFICATION	2.9381839388318868E-6	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.999998020910306	WITHOUT_CLASSIFICATION	1.9790896940667304E-6	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999100832996155	WITHOUT_CLASSIFICATION	8.991670038452532E-5	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999998874953144	WITHOUT_CLASSIFICATION	1.1250468564311189E-7	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995063183155	WITHOUT_CLASSIFICATION	4.936816846191033E-7	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999999898121301	WITHOUT_CLASSIFICATION	1.018786994469053E-8	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999995931107694	WITHOUT_CLASSIFICATION	4.068892305677038E-7	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999978449139675	WITHOUT_CLASSIFICATION	2.1550860324445056E-6	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999252392346	WITHOUT_CLASSIFICATION	7.476076540140253E-8	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999342069213	WITHOUT_CLASSIFICATION	6.579307865236277E-8	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9998867856055228	WITHOUT_CLASSIFICATION	1.1321439447721456E-4	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999912846591853	WITHOUT_CLASSIFICATION	8.715340814709918E-6	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999934488862564	WITHOUT_CLASSIFICATION	6.551113743598256E-5	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995310829751572	WITHOUT_CLASSIFICATION	4.6891702484271573E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999731174558155	WITHOUT_CLASSIFICATION	2.688254418447648E-5	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999600272487286	WITHOUT_CLASSIFICATION	3.997275127140083E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996929777106269	WITHOUT_CLASSIFICATION	3.0702228937304815E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999600494946634	WITHOUT_CLASSIFICATION	3.995050533665155E-5	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998160561356394	WITHOUT_CLASSIFICATION	1.8394386436060089E-4	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991774220788	WITHOUT_CLASSIFICATION	8.225779211972896E-6	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999871938280542	WITHOUT_CLASSIFICATION	1.2806171945802215E-5	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999734862164711	WITHOUT_CLASSIFICATION	2.6513783528958096E-5	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995549358536	WITHOUT_CLASSIFICATION	4.450641464019906E-6	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998109642541	WITHOUT_CLASSIFICATION	1.8903574591134343E-6	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999716838589106	WITHOUT_CLASSIFICATION	2.8316141089362352E-5	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996497791812359	WITHOUT_CLASSIFICATION	3.5022081876410344E-4	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957109454729	WITHOUT_CLASSIFICATION	4.289054527074112E-6	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983097431063	WITHOUT_CLASSIFICATION	1.690256893748801E-6	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998316269849719	WITHOUT_CLASSIFICATION	1.6837301502802628E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998785852300075	WITHOUT_CLASSIFICATION	1.2141476999260504E-4	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999986346661146	WITHOUT_CLASSIFICATION	1.3653338854965645E-6	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999905418635903	WITHOUT_CLASSIFICATION	9.458136409695547E-5	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9973313215769335	WITHOUT_CLASSIFICATION	0.002668678423066529	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999985106631102	WITHOUT_CLASSIFICATION	1.4893368898274357E-6	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999686613583	WITHOUT_CLASSIFICATION	3.1338641774634475E-8	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999960400283482	WITHOUT_CLASSIFICATION	3.9599716517782725E-6	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999941096494706	WITHOUT_CLASSIFICATION	5.890350529467239E-6	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999965615530919	WITHOUT_CLASSIFICATION	3.438446908021392E-6	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.999996187854846	WITHOUT_CLASSIFICATION	3.8121451539694132E-6	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999998779429707	WITHOUT_CLASSIFICATION	1.220570293165281E-7	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999946634451141	WITHOUT_CLASSIFICATION	5.336554885876482E-6	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999927401523079	WITHOUT_CLASSIFICATION	7.259847692192191E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998327920431247	WITHOUT_CLASSIFICATION	1.6720795687538272E-4	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999975560386308	WITHOUT_CLASSIFICATION	2.4439613691668716E-6	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999989945936305	WITHOUT_CLASSIFICATION	1.0054063695715372E-6	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999688231506	WITHOUT_CLASSIFICATION	3.117684944058219E-8	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999999860669935	WITHOUT_CLASSIFICATION	1.393300642656962E-8	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999961300336118	WITHOUT_CLASSIFICATION	3.869966388341259E-6	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999998552384795	WITHOUT_CLASSIFICATION	1.4476152056159993E-7	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999999137744423	WITHOUT_CLASSIFICATION	8.622555760995765E-8	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998590247944811	WITHOUT_CLASSIFICATION	1.409752055189301E-4	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999843050520474	WITHOUT_CLASSIFICATION	1.569494795267334E-5	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999781244691945	WITHOUT_CLASSIFICATION	2.1875530805421728E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999774947535602	WITHOUT_CLASSIFICATION	2.250524643985323E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999007688480038	WITHOUT_CLASSIFICATION	9.923115199614905E-5	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999958874148921	WITHOUT_CLASSIFICATION	4.112585107938083E-6	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.991488060810288	WITHOUT_CLASSIFICATION	0.008511939189712147	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9996691070842225	WITHOUT_CLASSIFICATION	3.3089291577753736E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999663131511077	WITHOUT_CLASSIFICATION	3.368684889226001E-5	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999671095084	WITHOUT_CLASSIFICATION	3.289049155320238E-8	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999999833555036	WITHOUT_CLASSIFICATION	1.6644496551319368E-8	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999999841913604	WITHOUT_CLASSIFICATION	1.5808639590527687E-7	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999869149685	WITHOUT_CLASSIFICATION	1.3085031470917401E-8	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9996058693104493	WITHOUT_CLASSIFICATION	3.9413068955065174E-4	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999687404083566	WITHOUT_CLASSIFICATION	3.1259591643365525E-5	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999983199083	WITHOUT_CLASSIFICATION	1.680091757539937E-9	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999959058632332	WITHOUT_CLASSIFICATION	4.094136766941472E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998327920431247	WITHOUT_CLASSIFICATION	1.6720795687538272E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999960400283482	WITHOUT_CLASSIFICATION	3.9599716517782725E-6	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999781189799	WITHOUT_CLASSIFICATION	2.188102004889315E-8	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999841496438234	WITHOUT_CLASSIFICATION	1.585035617657219E-5	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999942956387144	WITHOUT_CLASSIFICATION	5.704361285453882E-6	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999945662592906	WITHOUT_CLASSIFICATION	5.433740709408605E-6	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999996708036945	WITHOUT_CLASSIFICATION	3.291963054672196E-7	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999994229795052	WITHOUT_CLASSIFICATION	5.770204947678895E-7	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999654645279628	WITHOUT_CLASSIFICATION	3.453547203729618E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999993201059572	WITHOUT_CLASSIFICATION	6.798940428237173E-7	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999985807782069	WITHOUT_CLASSIFICATION	1.4192217931099528E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998410640357	WITHOUT_CLASSIFICATION	1.5893596428716263E-7	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999975544214841	WITHOUT_CLASSIFICATION	2.445578516024944E-6	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999998493195595	WITHOUT_CLASSIFICATION	1.5068044050143136E-7	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999491137154	WITHOUT_CLASSIFICATION	5.088628459088732E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998327920431247	WITHOUT_CLASSIFICATION	1.6720795687538272E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998327920431247	WITHOUT_CLASSIFICATION	1.6720795687538272E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999977204256909	WITHOUT_CLASSIFICATION	2.27957430913544E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999993915765631	WITHOUT_CLASSIFICATION	6.084234369145969E-7	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.999997185152411	WITHOUT_CLASSIFICATION	2.814847589081029E-6	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999077327018338	WITHOUT_CLASSIFICATION	9.226729816616043E-5	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998893040261888	WITHOUT_CLASSIFICATION	1.1069597381125315E-4	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999969391846738	WITHOUT_CLASSIFICATION	3.060815326254871E-6	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.999991427294887	WITHOUT_CLASSIFICATION	8.572705113068287E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998327920431247	WITHOUT_CLASSIFICATION	1.6720795687538272E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999979739748358	WITHOUT_CLASSIFICATION	2.0260251641222438E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999910300890467	WITHOUT_CLASSIFICATION	8.969910953342453E-6	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999992004018525	WITHOUT_CLASSIFICATION	7.995981475132025E-7	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999483041053406	WITHOUT_CLASSIFICATION	5.1695894659374625E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999985549741474	WITHOUT_CLASSIFICATION	1.4450258525614125E-6	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999998109357349	WITHOUT_CLASSIFICATION	1.8906426512208202E-7	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.998139361996978	WITHOUT_CLASSIFICATION	0.0018606380030220613	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999960832479906	WITHOUT_CLASSIFICATION	3.916752009347438E-6	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999985016586125	WITHOUT_CLASSIFICATION	1.498341387581168E-6	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999985984807671	WITHOUT_CLASSIFICATION	1.4015192328855286E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999960400283482	WITHOUT_CLASSIFICATION	3.9599716517782725E-6	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999848881062691	WITHOUT_CLASSIFICATION	1.5111893731070336E-5	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.999999934450338	WITHOUT_CLASSIFICATION	6.55496620269102E-8	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999999484023803	WITHOUT_CLASSIFICATION	5.159761975424142E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999960400283482	WITHOUT_CLASSIFICATION	3.9599716517782725E-6	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999997945673659	WITHOUT_CLASSIFICATION	2.0543263414183522E-7	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999979739748358	WITHOUT_CLASSIFICATION	2.0260251641222438E-6	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999768781468843	WITHOUT_CLASSIFICATION	2.31218531156241E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998327920431247	WITHOUT_CLASSIFICATION	1.6720795687538272E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.999737718113789	WITHOUT_CLASSIFICATION	2.6228188621108656E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998327920431247	WITHOUT_CLASSIFICATION	1.6720795687538272E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999999130007915	WITHOUT_CLASSIFICATION	8.699920849626973E-7	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998410640357	WITHOUT_CLASSIFICATION	1.5893596428716263E-7	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999975544214841	WITHOUT_CLASSIFICATION	2.445578516024944E-6	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999998493195595	WITHOUT_CLASSIFICATION	1.5068044050143136E-7	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999967236888	WITHOUT_CLASSIFICATION	3.2763112273550666E-9	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999984250700772	WITHOUT_CLASSIFICATION	1.5749299228569192E-6	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999923125412021	WITHOUT_CLASSIFICATION	7.687458797897996E-6	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999999927585714	WITHOUT_CLASSIFICATION	7.2414285096517976E-9	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999999742041	WITHOUT_CLASSIFICATION	2.579595063426433E-11	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998327920431247	WITHOUT_CLASSIFICATION	1.6720795687538272E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999960400283482	WITHOUT_CLASSIFICATION	3.9599716517782725E-6	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999491137154	WITHOUT_CLASSIFICATION	5.088628459088732E-8	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999977204256909	WITHOUT_CLASSIFICATION	2.27957430913544E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999300799151	WITHOUT_CLASSIFICATION	6.992008496217589E-8	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996850742467	WITHOUT_CLASSIFICATION	3.149257532720558E-7	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999965154471	WITHOUT_CLASSIFICATION	3.4845527923904053E-9	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999552361591	WITHOUT_CLASSIFICATION	4.476384086562893E-8	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999999350246007	WITHOUT_CLASSIFICATION	6.497539928791676E-8	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999995840728717	WITHOUT_CLASSIFICATION	4.1592712834394504E-7	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998785852300075	WITHOUT_CLASSIFICATION	1.2141476999260504E-4	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999999749700111	WITHOUT_CLASSIFICATION	2.5029988776625556E-8	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9991110039614574	WITHOUT_CLASSIFICATION	8.889960385426198E-4	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999996657239139	WITHOUT_CLASSIFICATION	3.3427608606219164E-7	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999993515828431	WITHOUT_CLASSIFICATION	6.484171567964372E-7	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998768894502	WITHOUT_CLASSIFICATION	1.2311054979836164E-7	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996929777106269	WITHOUT_CLASSIFICATION	3.0702228937304815E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999600494946634	WITHOUT_CLASSIFICATION	3.995050533665155E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998109642541	WITHOUT_CLASSIFICATION	1.8903574591134343E-6	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998768894502	WITHOUT_CLASSIFICATION	1.2311054979836164E-7	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999985157454	WITHOUT_CLASSIFICATION	1.4842546000473174E-6	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999990380680062	WITHOUT_CLASSIFICATION	9.619319938291607E-7	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998372769277908	WITHOUT_CLASSIFICATION	1.6272307220919883E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997468052498687	WITHOUT_CLASSIFICATION	2.53194750131283E-4	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.999963276085839	WITHOUT_CLASSIFICATION	3.67239141609375E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998327920431247	WITHOUT_CLASSIFICATION	1.6720795687538272E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998327920431247	WITHOUT_CLASSIFICATION	1.6720795687538272E-4	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9995254007274168	WITHOUT_CLASSIFICATION	4.7459927258315876E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999716838589106	WITHOUT_CLASSIFICATION	2.8316141089362352E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983097431063	WITHOUT_CLASSIFICATION	1.690256893748801E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999869149685	WITHOUT_CLASSIFICATION	1.3085031470917401E-8	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999999845770768	WITHOUT_CLASSIFICATION	1.542292307397507E-8	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999997252737517	WITHOUT_CLASSIFICATION	2.747262482324793E-7	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999259048883	WITHOUT_CLASSIFICATION	7.409511172419535E-8	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999998015040897	WITHOUT_CLASSIFICATION	1.9849591020792438E-7	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999977884124652	WITHOUT_CLASSIFICATION	2.2115875348010653E-6	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999986484572093	WITHOUT_CLASSIFICATION	1.3515427906133293E-6	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999805622635495	WITHOUT_CLASSIFICATION	1.9437736450518336E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998576161496626	WITHOUT_CLASSIFICATION	1.423838503374083E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999998265327528	WITHOUT_CLASSIFICATION	1.7346724721990568E-7	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9998640022882829	WITHOUT_CLASSIFICATION	1.3599771171716223E-4	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999985714743365	WITHOUT_CLASSIFICATION	1.428525663586457E-6	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999448918976346	WITHOUT_CLASSIFICATION	5.51081023653375E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999976083679673	WITHOUT_CLASSIFICATION	2.3916320328141014E-6	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999998540154493	WITHOUT_CLASSIFICATION	1.4598455064762946E-7	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999674869958246	WITHOUT_CLASSIFICATION	3.2513004175321945E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999582128544044	WITHOUT_CLASSIFICATION	4.178714559563435E-5	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9960414073240242	WITHOUT_CLASSIFICATION	0.003958592675975781	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999982760101258	WITHOUT_CLASSIFICATION	1.7239898741404885E-6	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999991637756658	WITHOUT_CLASSIFICATION	8.362243342548072E-7	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999899683161441	WITHOUT_CLASSIFICATION	1.0031683855971997E-5	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999914879654426	WITHOUT_CLASSIFICATION	8.512034557387377E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999671400121769	WITHOUT_CLASSIFICATION	3.285998782319007E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999949399411768	WITHOUT_CLASSIFICATION	5.0600588231502055E-6	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999933897237234	WITHOUT_CLASSIFICATION	6.61027627647774E-6	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999999804200604	WITHOUT_CLASSIFICATION	1.9579939591239456E-7	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999996335525376	WITHOUT_CLASSIFICATION	3.664474622731917E-7	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999980578842592	WITHOUT_CLASSIFICATION	1.9421157408493347E-6	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998944719100097	WITHOUT_CLASSIFICATION	1.0552808999029093E-4	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999933658195793	WITHOUT_CLASSIFICATION	6.634180420691214E-6	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992707738471	WITHOUT_CLASSIFICATION	7.292261528841382E-7	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999944488166733	WITHOUT_CLASSIFICATION	5.5511833265830595E-6	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999991137792981	WITHOUT_CLASSIFICATION	8.862207018005187E-7	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999979201682504	WITHOUT_CLASSIFICATION	2.079831749543317E-6	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999996703792707	WITHOUT_CLASSIFICATION	3.296207292720838E-7	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998141562414415	WITHOUT_CLASSIFICATION	1.8584375855844036E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9997652913349601	WITHOUT_CLASSIFICATION	2.3470866504001118E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999991102615633	WITHOUT_CLASSIFICATION	8.897384366472517E-7	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999980126040179	WITHOUT_CLASSIFICATION	1.9873959821343003E-6	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999992645859131	WITHOUT_CLASSIFICATION	7.354140869093109E-6	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999145784864594	WITHOUT_CLASSIFICATION	8.542151354066946E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.999999847700499	WITHOUT_CLASSIFICATION	1.5229950104483027E-7	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9950528836031057	WITHOUT_CLASSIFICATION	0.004947116396894316	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999824827408	WITHOUT_CLASSIFICATION	1.7517259193907365E-8	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999987385126111	WITHOUT_CLASSIFICATION	1.2614873888857543E-6	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999972716083544	WITHOUT_CLASSIFICATION	2.7283916455610675E-6	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999889006576	WITHOUT_CLASSIFICATION	1.109934255158125E-8	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999938537146542	WITHOUT_CLASSIFICATION	6.146285345837854E-6	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999999456608427	WITHOUT_CLASSIFICATION	5.433915735226701E-8	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999996660723579	WITHOUT_CLASSIFICATION	3.3392764209451897E-7	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9942836995365312	WITHOUT_CLASSIFICATION	0.005716300463468852	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9994756285611546	WITHOUT_CLASSIFICATION	5.243714388454689E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999940799615855	WITHOUT_CLASSIFICATION	5.920038414548412E-6	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999201332382	WITHOUT_CLASSIFICATION	7.986676172775368E-8	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.998878680635205	WITHOUT_CLASSIFICATION	0.001121319364794971	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.99998650397804	WITHOUT_CLASSIFICATION	1.3496021959882932E-5	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.999999379454085	WITHOUT_CLASSIFICATION	6.205459149947175E-7	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999691561410347	WITHOUT_CLASSIFICATION	3.084385896528839E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999997253637973	WITHOUT_CLASSIFICATION	2.746362027038843E-6	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9997700690030704	WITHOUT_CLASSIFICATION	2.2993099692961163E-4	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999808639793267	WITHOUT_CLASSIFICATION	1.91360206733029E-5	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999712785822	WITHOUT_CLASSIFICATION	2.8721417845113806E-8	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999999869516122	WITHOUT_CLASSIFICATION	1.3048387801445014E-7	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999994373490596	WITHOUT_CLASSIFICATION	5.626509403802509E-7	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999838455137787	WITHOUT_CLASSIFICATION	1.6154486221313535E-5	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9912705205214143	WITHOUT_CLASSIFICATION	0.008729479478585805	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999723295482124	WITHOUT_CLASSIFICATION	2.767045178759526E-5	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999936738442845	WITHOUT_CLASSIFICATION	6.326155715510584E-6	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999952511253849	WITHOUT_CLASSIFICATION	4.748874615152067E-6	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999972497520607	WITHOUT_CLASSIFICATION	2.7502479392176628E-6	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999573735784522	WITHOUT_CLASSIFICATION	4.262642154778762E-5	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999963761502391	WITHOUT_CLASSIFICATION	3.623849761044425E-6	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999990037681274	WITHOUT_CLASSIFICATION	9.962318725158398E-7	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9988924807827646	WITHOUT_CLASSIFICATION	0.0011075192172354136	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9996063423400635	WITHOUT_CLASSIFICATION	3.936576599364687E-4	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999988275052124	WITHOUT_CLASSIFICATION	1.1724947876062681E-6	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999888399394165	WITHOUT_CLASSIFICATION	1.1160060583502814E-5	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999547552411782	WITHOUT_CLASSIFICATION	4.5244758821914655E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999956601199175	WITHOUT_CLASSIFICATION	4.3398800825431905E-6	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.999990402652436	WITHOUT_CLASSIFICATION	9.597347564038422E-6	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999785296414191	WITHOUT_CLASSIFICATION	2.1470358580939192E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999640174431	WITHOUT_CLASSIFICATION	3.598255692905675E-8	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999245343692801	WITHOUT_CLASSIFICATION	7.546563071994488E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999741591508	WITHOUT_CLASSIFICATION	2.5840849279752405E-8	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999822096020132	WITHOUT_CLASSIFICATION	1.7790397986803623E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999984850013834	WITHOUT_CLASSIFICATION	1.5149986165537643E-6	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999999874758376	WITHOUT_CLASSIFICATION	1.2524162414895434E-8	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999982778918856	WITHOUT_CLASSIFICATION	1.722108114443728E-6	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999954441	WITHOUT_CLASSIFICATION	4.5559180029363925E-12	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999922337665255	WITHOUT_CLASSIFICATION	7.766233474420512E-6	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.999914667016686	WITHOUT_CLASSIFICATION	8.533298331407715E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999981711364135	WITHOUT_CLASSIFICATION	1.8288635865339596E-6	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999959183807945	WITHOUT_CLASSIFICATION	4.0816192054882485E-6	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999794979326958	WITHOUT_CLASSIFICATION	2.050206730419878E-5	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999991271583982	WITHOUT_CLASSIFICATION	8.728416017213899E-7	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9996079218627585	WITHOUT_CLASSIFICATION	3.9207813724150643E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999720685263435	WITHOUT_CLASSIFICATION	2.7931473656518434E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999602669421052	WITHOUT_CLASSIFICATION	3.973305789491481E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999946732235456	WITHOUT_CLASSIFICATION	5.3267764543485014E-6	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999996525426456	WITHOUT_CLASSIFICATION	3.474573544422821E-7	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999746002621204	WITHOUT_CLASSIFICATION	2.5399737879688203E-5	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9999951466153002	WITHOUT_CLASSIFICATION	4.853384699837096E-6	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999998790881477	WITHOUT_CLASSIFICATION	1.2091185227539385E-7	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999746002621204	WITHOUT_CLASSIFICATION	2.5399737879688203E-5	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999920949909	WITHOUT_CLASSIFICATION	7.905009140185246E-9	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999999241127776	WITHOUT_CLASSIFICATION	7.588722239767355E-8	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998874605416886	WITHOUT_CLASSIFICATION	1.1253945831142453E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9875781952070987	WITHOUT_CLASSIFICATION	0.01242180479290144	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999998558941325	WITHOUT_CLASSIFICATION	1.4410586750334007E-7	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999442337238	WITHOUT_CLASSIFICATION	5.5766276156077745E-8	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999684154257515	WITHOUT_CLASSIFICATION	3.158457424846864E-5	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999999617721179	WITHOUT_CLASSIFICATION	3.8227882097275287E-7	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9978182024970264	WITHOUT_CLASSIFICATION	0.002181797502973634	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999903383998578	WITHOUT_CLASSIFICATION	9.66160014214973E-6	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999972874544	WITHOUT_CLASSIFICATION	2.712545651986545E-9	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999906328051357	WITHOUT_CLASSIFICATION	9.36719486431129E-6	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999825469839299	WITHOUT_CLASSIFICATION	1.745301607014626E-5	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999957009794	WITHOUT_CLASSIFICATION	4.299020586218978E-9	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999765015504198	WITHOUT_CLASSIFICATION	2.3498449580148288E-5	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999821541510486	WITHOUT_CLASSIFICATION	1.784584895137287E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9932833659659724	WITHOUT_CLASSIFICATION	0.006716634034027453	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9932833659659724	WITHOUT_CLASSIFICATION	0.006716634034027453	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999983267056582	WITHOUT_CLASSIFICATION	1.673294341799347E-5	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9999855725904374	WITHOUT_CLASSIFICATION	1.4427409562455894E-5	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999994288402708	WITHOUT_CLASSIFICATION	5.71159729248607E-7	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.999874584378071	WITHOUT_CLASSIFICATION	1.2541562192910086E-4	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999995519541152	WITHOUT_CLASSIFICATION	4.4804588479974293E-7	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999841790851336	WITHOUT_CLASSIFICATION	1.582091486644113E-5	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999970925308357	WITHOUT_CLASSIFICATION	2.90746916437964E-6	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999948269941	WITHOUT_CLASSIFICATION	5.173005958833487E-9	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999999301379189	WITHOUT_CLASSIFICATION	6.986208118974226E-8	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999937227001884	WITHOUT_CLASSIFICATION	6.27729981160327E-6	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999999876431098	WITHOUT_CLASSIFICATION	1.2356890185615161E-8	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999588878317	WITHOUT_CLASSIFICATION	4.1112168399554525E-8	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999970448032336	WITHOUT_CLASSIFICATION	2.9551967664840764E-6	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999956599440633	WITHOUT_CLASSIFICATION	4.340055936768851E-6	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999778562327	WITHOUT_CLASSIFICATION	2.2143767340282372E-8	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999674869958246	WITHOUT_CLASSIFICATION	3.2513004175321945E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999572701519348	WITHOUT_CLASSIFICATION	4.2729848065128075E-5	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999987439509729	WITHOUT_CLASSIFICATION	1.2560490271394229E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9993632518260434	WITHOUT_CLASSIFICATION	6.367481739567604E-4	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999769552165069	WITHOUT_CLASSIFICATION	2.3044783493068707E-5	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999636947108	WITHOUT_CLASSIFICATION	3.63052890950197E-8	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999907460330815	WITHOUT_CLASSIFICATION	9.253966918431054E-6	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999992643286	WITHOUT_CLASSIFICATION	7.356713398330839E-10	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999999851732064	WITHOUT_CLASSIFICATION	1.482679359597703E-7	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999958124866586	WITHOUT_CLASSIFICATION	4.187513341437333E-6	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999907169812635	WITHOUT_CLASSIFICATION	9.283018736513338E-6	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999998282958	WITHOUT_CLASSIFICATION	1.7170426009208254E-10	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999375418012436	WITHOUT_CLASSIFICATION	6.245819875641965E-5	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999880875138325	WITHOUT_CLASSIFICATION	1.1912486167557254E-5	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.99999916938382	WITHOUT_CLASSIFICATION	8.306161799771932E-7	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999894848889278	WITHOUT_CLASSIFICATION	1.051511107224102E-5	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999977312151735	WITHOUT_CLASSIFICATION	2.268784826443651E-6	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999955207635798	WITHOUT_CLASSIFICATION	4.4792364202148565E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999703174317932	WITHOUT_CLASSIFICATION	2.968256820688117E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999986756460116	WITHOUT_CLASSIFICATION	1.3243539883303201E-6	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999674898998772	WITHOUT_CLASSIFICATION	3.25101001228638E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999055188526699	WITHOUT_CLASSIFICATION	9.448114733015524E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999790217206778	WITHOUT_CLASSIFICATION	2.0978279322200594E-5	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999967773089838	WITHOUT_CLASSIFICATION	3.222691016214205E-6	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999999124154284	WITHOUT_CLASSIFICATION	8.758457170378862E-8	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999987941251857	WITHOUT_CLASSIFICATION	1.2058748143573783E-6	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999990097594915	WITHOUT_CLASSIFICATION	9.902405085023901E-7	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999990993566452	WITHOUT_CLASSIFICATION	9.006433549180765E-7	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999997286764273	WITHOUT_CLASSIFICATION	2.713235727208331E-7	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999999563034537	WITHOUT_CLASSIFICATION	4.3696546276655564E-8	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.999997955404994	WITHOUT_CLASSIFICATION	2.0445950060351732E-6	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987468040118	WITHOUT_CLASSIFICATION	1.253195988240101E-6	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948984401509	WITHOUT_CLASSIFICATION	5.101559849159402E-6	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999915197307122	WITHOUT_CLASSIFICATION	8.480269287845908E-6	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999993551929037	WITHOUT_CLASSIFICATION	6.44807096204403E-7	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999990285301913	WITHOUT_CLASSIFICATION	9.714698087072713E-7	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998576161496626	WITHOUT_CLASSIFICATION	1.423838503374083E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998576161496626	WITHOUT_CLASSIFICATION	1.423838503374083E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994391385777	WITHOUT_CLASSIFICATION	5.60861422245013E-7	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999983697023138	WITHOUT_CLASSIFICATION	1.6302976861820316E-6	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999927264824527	WITHOUT_CLASSIFICATION	7.273517547269503E-6	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999699357958889	WITHOUT_CLASSIFICATION	3.0064204111102635E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999927264824527	WITHOUT_CLASSIFICATION	7.273517547269503E-6	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999258920918455	WITHOUT_CLASSIFICATION	7.41079081545961E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999997172614197	WITHOUT_CLASSIFICATION	2.8273858036513736E-7	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999936261958617	WITHOUT_CLASSIFICATION	6.373804138241164E-6	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999999596582797	WITHOUT_CLASSIFICATION	4.034172029833231E-7	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999997621136366	WITHOUT_CLASSIFICATION	2.378863634703213E-7	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.999999998402693	WITHOUT_CLASSIFICATION	1.597306924172299E-9	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999996139449046	WITHOUT_CLASSIFICATION	3.860550955409178E-7	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999999630311397	WITHOUT_CLASSIFICATION	3.6968860297879306E-8	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999320241995	WITHOUT_CLASSIFICATION	6.797580056719436E-8	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999606952274466	WITHOUT_CLASSIFICATION	3.930477255338087E-5	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999997671213212	WITHOUT_CLASSIFICATION	2.3287867888718194E-7	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999977247003753	WITHOUT_CLASSIFICATION	2.2752996247332213E-6	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999995113922063	WITHOUT_CLASSIFICATION	4.886077936205222E-7	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999997656622076	WITHOUT_CLASSIFICATION	2.3433779239607433E-7	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9970616219473154	WITHOUT_CLASSIFICATION	0.002938378052684555	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999999388996831	WITHOUT_CLASSIFICATION	6.110031690094155E-7	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999982494943113	WITHOUT_CLASSIFICATION	1.750505688838804E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999982494943113	WITHOUT_CLASSIFICATION	1.750505688838804E-6	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.999998484745123	WITHOUT_CLASSIFICATION	1.5152548769863556E-6	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999023552268	WITHOUT_CLASSIFICATION	9.76447731682617E-8	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999890353032	WITHOUT_CLASSIFICATION	1.0964696757464332E-8	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999937553356161	WITHOUT_CLASSIFICATION	6.244664383927321E-6	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999991997182	WITHOUT_CLASSIFICATION	8.002818819677843E-10	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999997028211972	WITHOUT_CLASSIFICATION	2.9717880276550895E-7	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9633097666294769	WITHOUT_CLASSIFICATION	0.03669023337052314	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999978552383285	WITHOUT_CLASSIFICATION	2.144761671442446E-6	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999999512759616	WITHOUT_CLASSIFICATION	4.872403838041729E-8	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999967492265457	WITHOUT_CLASSIFICATION	3.2507734542831592E-6	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999999974797238	WITHOUT_CLASSIFICATION	2.520276190245266E-8	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999896698738	WITHOUT_CLASSIFICATION	1.0330126266624526E-8	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999986965913875	WITHOUT_CLASSIFICATION	1.303408612447968E-6	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999985122384029	WITHOUT_CLASSIFICATION	1.4877615971180646E-6	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999845588032659	WITHOUT_CLASSIFICATION	1.544119673405031E-5	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999999005708	WITHOUT_CLASSIFICATION	9.942930438558012E-11	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999992839952421	WITHOUT_CLASSIFICATION	7.160047578072937E-7	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9983042694837976	WITHOUT_CLASSIFICATION	0.0016957305162023971	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9999869675376041	WITHOUT_CLASSIFICATION	1.303246239584145E-5	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999991901402544	WITHOUT_CLASSIFICATION	8.098597457053055E-7	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999993000703591	WITHOUT_CLASSIFICATION	6.99929640949965E-7	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9995565004271703	WITHOUT_CLASSIFICATION	4.4349957282976667E-4	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999008178418968	WITHOUT_CLASSIFICATION	9.918215810325004E-5	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.999961775324289	WITHOUT_CLASSIFICATION	3.822467571111778E-5	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999948029588192	WITHOUT_CLASSIFICATION	5.197041180849238E-6	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999999660542457	WITHOUT_CLASSIFICATION	3.394575428130706E-8	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999998871238516	WITHOUT_CLASSIFICATION	1.1287614845329792E-7	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9996396637869657	WITHOUT_CLASSIFICATION	3.6033621303436267E-4	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999996053725337	WITHOUT_CLASSIFICATION	3.9462746629811113E-7	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999999835684703	WITHOUT_CLASSIFICATION	1.643152971544703E-7	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999997919201646	WITHOUT_CLASSIFICATION	2.080798354027915E-7	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999925990061519	WITHOUT_CLASSIFICATION	7.400993848135573E-6	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996449931766537	WITHOUT_CLASSIFICATION	3.550068233462963E-4	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999977377751167	WITHOUT_CLASSIFICATION	2.2622248833214226E-6	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9991196104087158	WITHOUT_CLASSIFICATION	8.80389591284318E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999974395485342	WITHOUT_CLASSIFICATION	2.5604514659333353E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999988759280402	WITHOUT_CLASSIFICATION	1.12407195993145E-6	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999755555218892	WITHOUT_CLASSIFICATION	2.4444478110768744E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999998720918598	WITHOUT_CLASSIFICATION	1.2790814013487606E-7	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999973961728104	WITHOUT_CLASSIFICATION	2.603827189587192E-6	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999985819297	WITHOUT_CLASSIFICATION	1.4180702390803889E-9	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997593552753	WITHOUT_CLASSIFICATION	2.40644724730284E-7	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9999938161639661	WITHOUT_CLASSIFICATION	6.183836033894552E-6	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9686707350004771	WITHOUT_CLASSIFICATION	0.031329264999522974	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999682775199318	WITHOUT_CLASSIFICATION	3.172248006818725E-5	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9991040115196101	WITHOUT_CLASSIFICATION	8.959884803899476E-4	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.8743590375621022	WITHOUT_CLASSIFICATION	0.12564096243789785	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999977506585	WITHOUT_CLASSIFICATION	2.249341567691094E-9	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999886373024157	WITHOUT_CLASSIFICATION	1.1362697584226764E-5	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999850093699065	WITHOUT_CLASSIFICATION	1.4990630093447928E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997325574803	WITHOUT_CLASSIFICATION	2.6744251968788673E-7	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999998245988037	WITHOUT_CLASSIFICATION	1.7540119629468146E-7	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999998822569003	WITHOUT_CLASSIFICATION	1.1774309968679136E-7	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998834681445355	WITHOUT_CLASSIFICATION	1.1653185546442995E-4	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999871215373646	WITHOUT_CLASSIFICATION	1.2878462635541382E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999997945673659	WITHOUT_CLASSIFICATION	2.0543263414183522E-7	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999997945673659	WITHOUT_CLASSIFICATION	2.0543263414183522E-7	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999997106113737	WITHOUT_CLASSIFICATION	2.8938862628468536E-7	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999916873338888	WITHOUT_CLASSIFICATION	8.312666111232261E-6	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999998788832683	WITHOUT_CLASSIFICATION	1.211167316911329E-6	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999998122028169	WITHOUT_CLASSIFICATION	1.8779718312895166E-7	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999991981794332	WITHOUT_CLASSIFICATION	8.018205667348493E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9978988983028181	WITHOUT_CLASSIFICATION	0.0021011016971818606	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999434714221708	WITHOUT_CLASSIFICATION	5.6528577829309755E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.999997966492583	WITHOUT_CLASSIFICATION	2.0335074170544106E-6	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999452773061	WITHOUT_CLASSIFICATION	5.4722693846563676E-8	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999913809242211	WITHOUT_CLASSIFICATION	8.619075778812724E-6	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999832270209126	WITHOUT_CLASSIFICATION	1.677297908741594E-5	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999712366192502	WITHOUT_CLASSIFICATION	2.8763380749796572E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999972827087479	WITHOUT_CLASSIFICATION	2.717291252127313E-6	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999750316366	WITHOUT_CLASSIFICATION	2.4968363319027206E-8	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999990506460299	WITHOUT_CLASSIFICATION	9.493539701661949E-7	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999964892622903	WITHOUT_CLASSIFICATION	3.5107377095449107E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999959896528632	WITHOUT_CLASSIFICATION	4.010347136765396E-6	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9999639817240601	WITHOUT_CLASSIFICATION	3.60182759398069E-5	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999290900687	WITHOUT_CLASSIFICATION	7.09099312929853E-8	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998998362531875	WITHOUT_CLASSIFICATION	1.0016374681251983E-4	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999957633707	WITHOUT_CLASSIFICATION	4.236629303371462E-9	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.999997611067957	WITHOUT_CLASSIFICATION	2.3889320428459937E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999654214399127	WITHOUT_CLASSIFICATION	3.457856008719002E-5	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998701332209198	WITHOUT_CLASSIFICATION	1.2986677908027864E-4	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999687043211366	WITHOUT_CLASSIFICATION	3.129567886337654E-5	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9959564421410176	WITHOUT_CLASSIFICATION	0.004043557858982287	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9878815457319831	WITHOUT_CLASSIFICATION	0.01211845426801687	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996219550927786	WITHOUT_CLASSIFICATION	3.7804490722140744E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.999967474366666	WITHOUT_CLASSIFICATION	3.25256333339826E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999654214399127	WITHOUT_CLASSIFICATION	3.457856008719002E-5	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.999999748119958	WITHOUT_CLASSIFICATION	2.518800420528816E-7	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999992912973	WITHOUT_CLASSIFICATION	7.087025465957553E-10	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9999894473312296	WITHOUT_CLASSIFICATION	1.0552668770351275E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999925479153419	WITHOUT_CLASSIFICATION	7.452084658125855E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999997149216421	WITHOUT_CLASSIFICATION	2.850783579148897E-7	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999960138173476	WITHOUT_CLASSIFICATION	3.9861826523279875E-6	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999885057102985	WITHOUT_CLASSIFICATION	1.1494289701405047E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998405778683	WITHOUT_CLASSIFICATION	1.5942213181885026E-7	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9924327637349616	WITHOUT_CLASSIFICATION	0.007567236265038466	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999925479153419	WITHOUT_CLASSIFICATION	7.452084658125855E-6	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.999999995021863	WITHOUT_CLASSIFICATION	4.978137047341365E-9	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998611385548	WITHOUT_CLASSIFICATION	1.3886144529042059E-7	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9997559554112775	WITHOUT_CLASSIFICATION	2.4404458872239861E-4	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999423329155068	WITHOUT_CLASSIFICATION	5.766708449324066E-5	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.999973057256219	WITHOUT_CLASSIFICATION	2.6942743781039038E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999999974797238	WITHOUT_CLASSIFICATION	2.520276190245266E-8	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999999318734118	WITHOUT_CLASSIFICATION	6.812658820031385E-7	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999945241503254	WITHOUT_CLASSIFICATION	5.475849674585918E-6	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999995111746668	WITHOUT_CLASSIFICATION	4.888253331315229E-7	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9970104328453778	WITHOUT_CLASSIFICATION	0.002989567154622042	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999954084997	WITHOUT_CLASSIFICATION	4.591500239415533E-9	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999994181154448	WITHOUT_CLASSIFICATION	5.818845552059614E-7	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999986826468463	WITHOUT_CLASSIFICATION	1.3173531537063014E-5	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999999720126238	WITHOUT_CLASSIFICATION	2.7987376296963414E-8	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999997428774801	WITHOUT_CLASSIFICATION	2.571225199521049E-7	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.999959077517989	WITHOUT_CLASSIFICATION	4.0922482011036566E-5	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999655263666858	WITHOUT_CLASSIFICATION	3.44736333142834E-5	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999451011817	WITHOUT_CLASSIFICATION	5.489881838659399E-8	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999985843638153	WITHOUT_CLASSIFICATION	1.415636184697875E-6	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999822764640571	WITHOUT_CLASSIFICATION	1.772353594279444E-5	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999981677253511	WITHOUT_CLASSIFICATION	1.8322746488960568E-6	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999942582789082	WITHOUT_CLASSIFICATION	5.741721091741969E-6	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999972309549672	WITHOUT_CLASSIFICATION	2.769045032808871E-6	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999987308785324	WITHOUT_CLASSIFICATION	1.269121467615618E-6	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999966429704973	WITHOUT_CLASSIFICATION	3.357029502695342E-6	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999985445661163	WITHOUT_CLASSIFICATION	1.4554338836672558E-6	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999945133116261	WITHOUT_CLASSIFICATION	5.486688373858618E-6	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999070476156531	WITHOUT_CLASSIFICATION	9.295238434695697E-5	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.99999957986819	WITHOUT_CLASSIFICATION	4.201318099645508E-7	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999998925243	WITHOUT_CLASSIFICATION	1.0747564412517322E-10	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9998644476324663	WITHOUT_CLASSIFICATION	1.3555236753373865E-4	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9999098985039502	WITHOUT_CLASSIFICATION	9.010149604989988E-5	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999995689006358	WITHOUT_CLASSIFICATION	4.310993641849316E-7	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999890447657003	WITHOUT_CLASSIFICATION	1.0955234299641515E-5	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970547739652	WITHOUT_CLASSIFICATION	2.9452260348405476E-6	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9998497940418449	WITHOUT_CLASSIFICATION	1.5020595815508177E-4	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999239812636466	WITHOUT_CLASSIFICATION	7.601873635345033E-5	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999474544341197	WITHOUT_CLASSIFICATION	5.254556588031666E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995929482953	WITHOUT_CLASSIFICATION	4.0705170456397515E-7	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995929482953	WITHOUT_CLASSIFICATION	4.0705170456397515E-7	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999999979024241	WITHOUT_CLASSIFICATION	2.0975758956172607E-8	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9996004293896696	WITHOUT_CLASSIFICATION	3.995706103303877E-4	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999752976351136	WITHOUT_CLASSIFICATION	2.4702364886350005E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999816692389223	WITHOUT_CLASSIFICATION	1.8330761077625952E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999998094528438	WITHOUT_CLASSIFICATION	1.9054715618964532E-6	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999990540236114	WITHOUT_CLASSIFICATION	9.459763885266922E-7	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999992125939918	WITHOUT_CLASSIFICATION	7.874060080777455E-7	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999995210058851	WITHOUT_CLASSIFICATION	4.789941149344027E-7	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999998517989522	WITHOUT_CLASSIFICATION	1.4820104779702513E-7	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999248964938	WITHOUT_CLASSIFICATION	7.510350611140219E-8	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999999916742997	WITHOUT_CLASSIFICATION	8.325700291642873E-8	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999997058358947	WITHOUT_CLASSIFICATION	2.9416410529137885E-7	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999862445140645	WITHOUT_CLASSIFICATION	1.3755485935389718E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995929482953	WITHOUT_CLASSIFICATION	4.0705170456397515E-7	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999991749765922	WITHOUT_CLASSIFICATION	8.250234078735028E-7	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999798411198706	WITHOUT_CLASSIFICATION	2.01588801293572E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9964141919669758	WITHOUT_CLASSIFICATION	0.00358580803302415	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999983315489295	WITHOUT_CLASSIFICATION	1.6684510705565338E-6	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999941397434152	WITHOUT_CLASSIFICATION	5.860256584817586E-6	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999999572876729	WITHOUT_CLASSIFICATION	4.2712327092644655E-7	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9983618243941725	WITHOUT_CLASSIFICATION	0.0016381756058275012	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999783349149071	WITHOUT_CLASSIFICATION	2.1665085092966903E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999999292214039	WITHOUT_CLASSIFICATION	7.077859609669406E-8	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998859445841733	WITHOUT_CLASSIFICATION	1.1405541582660276E-4	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.99991255148949	WITHOUT_CLASSIFICATION	8.744851050991401E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999890447657003	WITHOUT_CLASSIFICATION	1.0955234299641515E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995929482953	WITHOUT_CLASSIFICATION	4.0705170456397515E-7	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999986845188483	WITHOUT_CLASSIFICATION	1.315481151729954E-6	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999776149706	WITHOUT_CLASSIFICATION	2.2385029413432627E-8	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999998776162161	WITHOUT_CLASSIFICATION	1.2238378390784965E-7	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.999998715017039	WITHOUT_CLASSIFICATION	1.2849829610112479E-6	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999946288401573	WITHOUT_CLASSIFICATION	5.3711598426000036E-6	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999961926393988	WITHOUT_CLASSIFICATION	3.807360601355144E-6	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999010023308	WITHOUT_CLASSIFICATION	9.899766920620786E-8	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999945838881	WITHOUT_CLASSIFICATION	5.416111846652785E-9	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999961337243	WITHOUT_CLASSIFICATION	3.866275788583613E-9	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999999707359936	WITHOUT_CLASSIFICATION	2.926400649326484E-8	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999433068519	WITHOUT_CLASSIFICATION	5.669314814757254E-8	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999809077663318	WITHOUT_CLASSIFICATION	1.9092233668319756E-5	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999997799518856	WITHOUT_CLASSIFICATION	2.2004811428513474E-7	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999993055362508	WITHOUT_CLASSIFICATION	6.944637492424077E-7	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999258920918455	WITHOUT_CLASSIFICATION	7.41079081545961E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999966526656	WITHOUT_CLASSIFICATION	3.347334436139736E-9	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999963082643	WITHOUT_CLASSIFICATION	3.6917357435620957E-9	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999954152334	WITHOUT_CLASSIFICATION	4.5847665538043825E-9	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999993916875448	WITHOUT_CLASSIFICATION	6.083124553155412E-7	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999984395345	WITHOUT_CLASSIFICATION	1.5604655201715287E-9	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998520541801154	WITHOUT_CLASSIFICATION	1.4794581988465924E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998520541801154	WITHOUT_CLASSIFICATION	1.4794581988465924E-4	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9998976402048334	WITHOUT_CLASSIFICATION	1.023597951665585E-4	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999761686348	WITHOUT_CLASSIFICATION	2.3831365173810625E-8	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9989771199757219	WITHOUT_CLASSIFICATION	0.001022880024278066	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9994204819693632	WITHOUT_CLASSIFICATION	5.795180306369068E-4	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999972138972109	WITHOUT_CLASSIFICATION	2.786102789139805E-6	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999993160753862	WITHOUT_CLASSIFICATION	6.839246138810791E-7	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999839327678073	WITHOUT_CLASSIFICATION	1.6067232192789386E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999833225186	WITHOUT_CLASSIFICATION	1.6677481372056412E-8	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999833225186	WITHOUT_CLASSIFICATION	1.6677481372056412E-8	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999848277332591	WITHOUT_CLASSIFICATION	1.5172266740765213E-5	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999980042865929	WITHOUT_CLASSIFICATION	1.9957134071070834E-6	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999996923039925	WITHOUT_CLASSIFICATION	3.076960074368998E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999993923517417	WITHOUT_CLASSIFICATION	6.076482582552907E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999993923517417	WITHOUT_CLASSIFICATION	6.076482582552907E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999993923517417	WITHOUT_CLASSIFICATION	6.076482582552907E-7	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999895101866464	WITHOUT_CLASSIFICATION	1.048981335363659E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999318630444	WITHOUT_CLASSIFICATION	6.813695560162725E-8	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.5082343106453809	WITHOUT_CLASSIFICATION	0.4917656893546191	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998257289908419	WITHOUT_CLASSIFICATION	1.742710091581263E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999999843248172	WITHOUT_CLASSIFICATION	1.5675182795454457E-7	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995929482953	WITHOUT_CLASSIFICATION	4.0705170456397515E-7	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995929482953	WITHOUT_CLASSIFICATION	4.0705170456397515E-7	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999285476861693	WITHOUT_CLASSIFICATION	7.145231383062138E-5	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9987567216569384	WITHOUT_CLASSIFICATION	0.0012432783430616065	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9988368688368348	WITHOUT_CLASSIFICATION	0.0011631311631651975	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999650840511	WITHOUT_CLASSIFICATION	3.491594883903188E-8	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.999992322456203	WITHOUT_CLASSIFICATION	7.677543797093147E-6	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999997279480414	WITHOUT_CLASSIFICATION	2.72051958548804E-7	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999939183858583	WITHOUT_CLASSIFICATION	6.081614141721193E-6	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999998624173222	WITHOUT_CLASSIFICATION	1.3758267789056733E-7	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999378125145	WITHOUT_CLASSIFICATION	6.218748545337561E-8	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999443068518	WITHOUT_CLASSIFICATION	5.5693148081727134E-8	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999985725693792	WITHOUT_CLASSIFICATION	1.4274306208008792E-6	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999999278867936	WITHOUT_CLASSIFICATION	7.21132063981994E-8	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999999278867936	WITHOUT_CLASSIFICATION	7.21132063981994E-8	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999999243872213	WITHOUT_CLASSIFICATION	7.561277877505109E-8	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999999243872213	WITHOUT_CLASSIFICATION	7.561277877505109E-8	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999999218866135	WITHOUT_CLASSIFICATION	7.811338646125743E-8	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999997509565229	WITHOUT_CLASSIFICATION	2.49043477055057E-7	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999997509565229	WITHOUT_CLASSIFICATION	2.49043477055057E-7	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999997497935158	WITHOUT_CLASSIFICATION	2.5020648420157925E-7	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999998055129122	WITHOUT_CLASSIFICATION	1.9448708777927382E-7	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999570817630113	WITHOUT_CLASSIFICATION	4.2918236988695105E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998520541801154	WITHOUT_CLASSIFICATION	1.4794581988465924E-4	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999812663271442	WITHOUT_CLASSIFICATION	1.8733672855801195E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999998055129122	WITHOUT_CLASSIFICATION	1.9448708777927382E-7	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9998848679094074	WITHOUT_CLASSIFICATION	1.1513209059259271E-4	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999380142511677	WITHOUT_CLASSIFICATION	6.198574883232324E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999998806044191	WITHOUT_CLASSIFICATION	1.1939558097635937E-7	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.999999847757384	WITHOUT_CLASSIFICATION	1.5224261596565626E-7	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999998745474724	WITHOUT_CLASSIFICATION	1.2545252760629528E-6	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999718579088606	WITHOUT_CLASSIFICATION	2.8142091139455777E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999963559899194	WITHOUT_CLASSIFICATION	3.6440100805023938E-6	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999938968206258	WITHOUT_CLASSIFICATION	6.103179374229059E-6	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999993018472635	WITHOUT_CLASSIFICATION	6.981527365615506E-7	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999826098545	WITHOUT_CLASSIFICATION	1.739014565216143E-8	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.999999998773037	WITHOUT_CLASSIFICATION	1.226962962606914E-9	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.999999311329449	WITHOUT_CLASSIFICATION	6.88670550994434E-7	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999995568641866	WITHOUT_CLASSIFICATION	4.431358133777898E-7	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999995180015807	WITHOUT_CLASSIFICATION	4.819984191867343E-7	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999559481211636	WITHOUT_CLASSIFICATION	4.405187883625693E-5	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999938323416775	WITHOUT_CLASSIFICATION	6.167658322594967E-6	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999996614088824	WITHOUT_CLASSIFICATION	3.3859111755934847E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999999716508431	WITHOUT_CLASSIFICATION	2.834915690647387E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999999716508431	WITHOUT_CLASSIFICATION	2.834915690647387E-7	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999995404614505	WITHOUT_CLASSIFICATION	4.5953854963817937E-7	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.99999989081629	WITHOUT_CLASSIFICATION	1.0918371005291841E-7	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.999999386015677	WITHOUT_CLASSIFICATION	6.139843231249875E-7	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998526326493299	WITHOUT_CLASSIFICATION	1.4736735067010485E-4	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999980874688379	WITHOUT_CLASSIFICATION	1.912531162173956E-6	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999301959372078	WITHOUT_CLASSIFICATION	6.980406279228179E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999797736818578	WITHOUT_CLASSIFICATION	2.022631814223827E-5	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999981213336379	WITHOUT_CLASSIFICATION	1.8786663622439604E-6	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999878116600498	WITHOUT_CLASSIFICATION	1.2188339950257525E-5	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999894226308	WITHOUT_CLASSIFICATION	1.0577369086848579E-8	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999999885966946	WITHOUT_CLASSIFICATION	1.1403305493697313E-8	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999809077663318	WITHOUT_CLASSIFICATION	1.9092233668319756E-5	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999998663784602	WITHOUT_CLASSIFICATION	1.336215398135655E-7	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999800425249707	WITHOUT_CLASSIFICATION	1.9957475029263235E-5	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999919683909729	WITHOUT_CLASSIFICATION	8.031609027048107E-6	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999529713796463	WITHOUT_CLASSIFICATION	4.7028620353760234E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997985935993	WITHOUT_CLASSIFICATION	2.014064006537179E-7	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997985935993	WITHOUT_CLASSIFICATION	2.014064006537179E-7	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999755271229083	WITHOUT_CLASSIFICATION	2.4472877091806596E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999969482083462	WITHOUT_CLASSIFICATION	3.0517916538915774E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9996122355694456	WITHOUT_CLASSIFICATION	3.877644305543969E-4	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999786982543131	WITHOUT_CLASSIFICATION	2.1301745686965976E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999995919688117	WITHOUT_CLASSIFICATION	4.08031188332158E-7	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999961192430826	WITHOUT_CLASSIFICATION	3.880756917374104E-6	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999243933384534	WITHOUT_CLASSIFICATION	7.56066615466279E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999998717053599	WITHOUT_CLASSIFICATION	1.2829464001906477E-7	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9996805928986836	WITHOUT_CLASSIFICATION	3.194071013163878E-4	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999928906531	WITHOUT_CLASSIFICATION	7.1093469136098374E-9	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999879727756	WITHOUT_CLASSIFICATION	1.2027224440371092E-8	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999998717053599	WITHOUT_CLASSIFICATION	1.2829464001906477E-7	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999984564774368	WITHOUT_CLASSIFICATION	1.543522563263261E-6	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.999987629037385	WITHOUT_CLASSIFICATION	1.2370962615030045E-5	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999957366184	WITHOUT_CLASSIFICATION	4.263381705480161E-9	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.999999947851001	WITHOUT_CLASSIFICATION	5.2148999047407086E-8	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999216174139	WITHOUT_CLASSIFICATION	7.838258600784525E-8	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999947930738	WITHOUT_CLASSIFICATION	5.206926261832002E-9	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999855640062095	WITHOUT_CLASSIFICATION	1.4435993790419917E-5	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999923267221518	WITHOUT_CLASSIFICATION	7.673277848340543E-6	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999575780485	WITHOUT_CLASSIFICATION	4.2421951448874796E-8	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999630984423225	WITHOUT_CLASSIFICATION	3.690155767759025E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9994877989022314	WITHOUT_CLASSIFICATION	5.122010977686147E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999998038540677	WITHOUT_CLASSIFICATION	1.961459322655348E-7	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999993155333059	WITHOUT_CLASSIFICATION	6.844666941511711E-7	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999915770181462	WITHOUT_CLASSIFICATION	8.422981853743466E-6	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998523772982243	WITHOUT_CLASSIFICATION	1.4762270177559806E-4	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999996722609102	WITHOUT_CLASSIFICATION	3.2773908982359547E-7	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999998898159469	WITHOUT_CLASSIFICATION	1.1018405304322748E-7	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999068398505183	WITHOUT_CLASSIFICATION	9.316014948165849E-5	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999669931792862	WITHOUT_CLASSIFICATION	3.300682071390712E-5	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999843354129431	WITHOUT_CLASSIFICATION	1.5664587056909284E-5	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999993674253854	WITHOUT_CLASSIFICATION	6.325746146206116E-7	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999995744158627	WITHOUT_CLASSIFICATION	4.2558413738143053E-7	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.99998616056533	WITHOUT_CLASSIFICATION	1.383943466998748E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999998574544685	WITHOUT_CLASSIFICATION	1.4254553155077698E-7	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999998792097775	WITHOUT_CLASSIFICATION	1.207902224866869E-7	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999244282247141	WITHOUT_CLASSIFICATION	7.557177528597718E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999981672241964	WITHOUT_CLASSIFICATION	1.8327758035381959E-6	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999020722899772	WITHOUT_CLASSIFICATION	9.792771002282377E-5	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999971027685888	WITHOUT_CLASSIFICATION	2.897231411196406E-6	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999677494751443	WITHOUT_CLASSIFICATION	3.2250524855735924E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999998174269858	WITHOUT_CLASSIFICATION	1.825730142384975E-7	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999934137917753	WITHOUT_CLASSIFICATION	6.586208224720937E-6	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999789991992261	WITHOUT_CLASSIFICATION	2.1000800773964183E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999990323043	WITHOUT_CLASSIFICATION	9.67695630505497E-10	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999990419815252	WITHOUT_CLASSIFICATION	9.580184748650094E-7	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999982613634847	WITHOUT_CLASSIFICATION	1.7386365153010048E-6	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999642750113	WITHOUT_CLASSIFICATION	3.572498869635702E-8	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999965840984	WITHOUT_CLASSIFICATION	3.415901604382226E-9	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999999562252323	WITHOUT_CLASSIFICATION	4.377476769188655E-7	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999920723970467	WITHOUT_CLASSIFICATION	7.927602953368188E-6	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999314380887968	WITHOUT_CLASSIFICATION	6.85619112032015E-5	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999608019551	WITHOUT_CLASSIFICATION	3.919804486679147E-8	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999776117079944	WITHOUT_CLASSIFICATION	2.2388292005720513E-5	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999958744062	WITHOUT_CLASSIFICATION	4.125593790092611E-9	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999999744183923	WITHOUT_CLASSIFICATION	2.5581607789792377E-8	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999999508602245	WITHOUT_CLASSIFICATION	4.9139775418367334E-8	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.999999813010699	WITHOUT_CLASSIFICATION	1.8698930108205435E-7	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999972761093202	WITHOUT_CLASSIFICATION	2.72389067988932E-6	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999994640230563	WITHOUT_CLASSIFICATION	5.359769437448268E-7	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999974232525812	WITHOUT_CLASSIFICATION	2.5767474186755504E-6	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999286380648943	WITHOUT_CLASSIFICATION	7.136193510570487E-5	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.999997128920699	WITHOUT_CLASSIFICATION	2.8710793008837347E-6	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999919581221	WITHOUT_CLASSIFICATION	8.04187791110134E-9	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999992833112	WITHOUT_CLASSIFICATION	7.166888653325563E-10	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999997324486377	WITHOUT_CLASSIFICATION	2.6755136229839033E-7	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999990099276478	WITHOUT_CLASSIFICATION	9.900723522035754E-6	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9995615041321493	WITHOUT_CLASSIFICATION	4.384958678507933E-4	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9998940845969324	WITHOUT_CLASSIFICATION	1.0591540306761624E-4	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999996748694852	WITHOUT_CLASSIFICATION	3.2513051486678995E-7	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999999987307624	WITHOUT_CLASSIFICATION	1.269237614082604E-9	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999997989440947	WITHOUT_CLASSIFICATION	2.0105590518301226E-7	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999647462198853	WITHOUT_CLASSIFICATION	3.525378011461744E-5	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999837660172578	WITHOUT_CLASSIFICATION	1.623398274221087E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.999999999517445	WITHOUT_CLASSIFICATION	4.825549455112046E-10	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999999501168684	WITHOUT_CLASSIFICATION	4.988313174176439E-8	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999932903826205	WITHOUT_CLASSIFICATION	6.709617379505182E-6	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999286380648943	WITHOUT_CLASSIFICATION	7.136193510570487E-5	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999658259641514	WITHOUT_CLASSIFICATION	3.417403584854584E-5	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999891759621924	WITHOUT_CLASSIFICATION	1.0824037807489891E-5	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999823257407	WITHOUT_CLASSIFICATION	1.7674259339622625E-8	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999998544971012	WITHOUT_CLASSIFICATION	1.4550289877908016E-7	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998882435900672	WITHOUT_CLASSIFICATION	1.117564099328263E-4	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999999140621042	WITHOUT_CLASSIFICATION	8.593789584752206E-8	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9996805928986836	WITHOUT_CLASSIFICATION	3.194071013163878E-4	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9998609830451243	WITHOUT_CLASSIFICATION	1.390169548756594E-4	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999990419815252	WITHOUT_CLASSIFICATION	9.580184748650094E-7	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999759258113811	WITHOUT_CLASSIFICATION	2.4074188619014935E-5	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999357765282	WITHOUT_CLASSIFICATION	6.422347180106712E-8	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999996277126	WITHOUT_CLASSIFICATION	3.7228740238099597E-9	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999847469884	WITHOUT_CLASSIFICATION	1.525301159533327E-8	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999995505981268	WITHOUT_CLASSIFICATION	4.494018732110283E-6	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999926941326516	WITHOUT_CLASSIFICATION	7.305867348507509E-6	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998830881958	WITHOUT_CLASSIFICATION	1.1691180423767203E-7	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999999881099163	WITHOUT_CLASSIFICATION	1.189008368438902E-7	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999924335357211	WITHOUT_CLASSIFICATION	7.566464278891845E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.999999998744642	WITHOUT_CLASSIFICATION	1.2553580915446565E-9	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999991751842144	WITHOUT_CLASSIFICATION	8.248157856345431E-7	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999712270976294	WITHOUT_CLASSIFICATION	2.877290237064256E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999485919158	WITHOUT_CLASSIFICATION	5.140808422917711E-8	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999485919158	WITHOUT_CLASSIFICATION	5.140808422917711E-8	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999994638346663	WITHOUT_CLASSIFICATION	5.361653337199656E-7	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999989510172751	WITHOUT_CLASSIFICATION	1.0489827249397657E-6	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999946996296	WITHOUT_CLASSIFICATION	5.300370398141284E-9	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.999999983639163	WITHOUT_CLASSIFICATION	1.6360837091095063E-8	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999999993944205	WITHOUT_CLASSIFICATION	6.0557950106224026E-9	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999986921554165	WITHOUT_CLASSIFICATION	1.3078445834298453E-6	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999988499273	WITHOUT_CLASSIFICATION	1.1500726772962562E-9	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999997944831314	WITHOUT_CLASSIFICATION	2.0551686853931824E-7	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999995465175963	WITHOUT_CLASSIFICATION	4.534824037004428E-7	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999998794149276	WITHOUT_CLASSIFICATION	1.2058507228072934E-7	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999617973957085	WITHOUT_CLASSIFICATION	3.820260429156802E-5	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999845111793205	WITHOUT_CLASSIFICATION	1.5488820679494046E-5	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999873684886129	WITHOUT_CLASSIFICATION	1.2631511387000954E-5	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999985089111204	WITHOUT_CLASSIFICATION	1.491088879544879E-6	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999034788983415	WITHOUT_CLASSIFICATION	9.652110165847766E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999251189788	WITHOUT_CLASSIFICATION	7.488102121643556E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999997035534963	WITHOUT_CLASSIFICATION	2.9644650372438274E-7	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999861735005	WITHOUT_CLASSIFICATION	1.382649963786477E-8	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999997641798465	WITHOUT_CLASSIFICATION	2.358201536244168E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998327920431247	WITHOUT_CLASSIFICATION	1.6720795687538272E-4	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999986237326267	WITHOUT_CLASSIFICATION	1.37626737332728E-6	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999989974066945	WITHOUT_CLASSIFICATION	1.0025933054322779E-6	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999982477995	WITHOUT_CLASSIFICATION	1.7522005205034296E-9	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999991709578899	WITHOUT_CLASSIFICATION	8.290421100900674E-7	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9981187232555354	WITHOUT_CLASSIFICATION	0.0018812767444645602	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9974326289663376	WITHOUT_CLASSIFICATION	0.0025673710336624063	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998327920431247	WITHOUT_CLASSIFICATION	1.6720795687538272E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998327920431247	WITHOUT_CLASSIFICATION	1.6720795687538272E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999970618160611	WITHOUT_CLASSIFICATION	2.9381839388318868E-6	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999869201678	WITHOUT_CLASSIFICATION	1.3079832208168893E-8	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999998082117997	WITHOUT_CLASSIFICATION	1.9178820038080188E-7	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999961893977982	WITHOUT_CLASSIFICATION	3.8106022018042284E-6	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.998139361996978	WITHOUT_CLASSIFICATION	0.0018606380030220613	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999975417605781	WITHOUT_CLASSIFICATION	2.4582394218056916E-6	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.999999881325609	WITHOUT_CLASSIFICATION	1.186743909397059E-7	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9990588831075334	WITHOUT_CLASSIFICATION	9.411168924666839E-4	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999963547378892	WITHOUT_CLASSIFICATION	3.645262110815418E-6	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999996394169895	WITHOUT_CLASSIFICATION	3.6058301040020526E-7	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999964440626252	WITHOUT_CLASSIFICATION	3.5559373747182665E-6	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.999939086866842	WITHOUT_CLASSIFICATION	6.0913133158112836E-5	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999994103564215	WITHOUT_CLASSIFICATION	5.896435786036104E-7	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999982672831231	WITHOUT_CLASSIFICATION	1.7327168768244578E-6	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998978097941531	WITHOUT_CLASSIFICATION	1.021902058468595E-4	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999956389214675	WITHOUT_CLASSIFICATION	4.361078532617747E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999937598616506	WITHOUT_CLASSIFICATION	6.240138349350061E-6	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999957962215188	WITHOUT_CLASSIFICATION	4.203778481244329E-6	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999986089302327	WITHOUT_CLASSIFICATION	1.3910697672564952E-6	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998372769277908	WITHOUT_CLASSIFICATION	1.6272307220919883E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9991329286009345	WITHOUT_CLASSIFICATION	8.670713990655524E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999995221521586	WITHOUT_CLASSIFICATION	4.778478414269403E-7	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999983346080327	WITHOUT_CLASSIFICATION	1.6653919673695723E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999963547237586	WITHOUT_CLASSIFICATION	3.6452762414023186E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992331328976	WITHOUT_CLASSIFICATION	7.668671024915608E-7	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9998045888907834	WITHOUT_CLASSIFICATION	1.9541110921652088E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999218062585	WITHOUT_CLASSIFICATION	7.819374148513417E-8	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999966460366743	WITHOUT_CLASSIFICATION	3.3539633256774534E-6	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999945917948914	WITHOUT_CLASSIFICATION	5.408205108637625E-6	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999942425122483	WITHOUT_CLASSIFICATION	5.757487751701273E-6	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999998831981977	WITHOUT_CLASSIFICATION	1.1680180229787381E-7	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999547870586365	WITHOUT_CLASSIFICATION	4.5212941363500274E-5	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999993113905746	WITHOUT_CLASSIFICATION	6.886094253312309E-7	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999971180382503	WITHOUT_CLASSIFICATION	2.881961749720058E-6	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999998957493357	WITHOUT_CLASSIFICATION	1.0425066430826207E-6	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999861713115	WITHOUT_CLASSIFICATION	1.3828688458362677E-8	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999805185223082	WITHOUT_CLASSIFICATION	1.948147769184403E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999836357324988	WITHOUT_CLASSIFICATION	1.6364267501198297E-5	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999999876115766	WITHOUT_CLASSIFICATION	1.2388423513691792E-8	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.999999998405387	WITHOUT_CLASSIFICATION	1.594613053433094E-9	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999994625302743	WITHOUT_CLASSIFICATION	5.374697257550437E-7	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999904163348406	WITHOUT_CLASSIFICATION	9.583665159401084E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999952132150275	WITHOUT_CLASSIFICATION	4.786784972502385E-6	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999986054151241	WITHOUT_CLASSIFICATION	1.3945848759385759E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999952132150275	WITHOUT_CLASSIFICATION	4.786784972502385E-6	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999888358045	WITHOUT_CLASSIFICATION	1.1164195470305722E-8	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999940056993142	WITHOUT_CLASSIFICATION	5.994300685758611E-6	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999163794773439	WITHOUT_CLASSIFICATION	8.362052265610289E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999596031355754	WITHOUT_CLASSIFICATION	4.039686442454368E-5	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999926020058476	WITHOUT_CLASSIFICATION	7.397994152415121E-6	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999801256539509	WITHOUT_CLASSIFICATION	1.987434604915315E-5	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999999850735714	WITHOUT_CLASSIFICATION	1.4926428695802485E-8	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999944170249	WITHOUT_CLASSIFICATION	5.58297509920434E-9	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999994211983073	WITHOUT_CLASSIFICATION	5.788016925714589E-7	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999997432415971	WITHOUT_CLASSIFICATION	2.567584029058655E-6	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999985024906545	WITHOUT_CLASSIFICATION	1.4975093455337936E-6	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999156605995	WITHOUT_CLASSIFICATION	8.433940045616228E-8	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999995523910242	WITHOUT_CLASSIFICATION	4.476089758549735E-7	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.999901406042242	WITHOUT_CLASSIFICATION	9.859395775801955E-5	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9998212639307088	WITHOUT_CLASSIFICATION	1.7873606929109888E-4	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999998296572781	WITHOUT_CLASSIFICATION	1.703427219039629E-7	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999996744207049	WITHOUT_CLASSIFICATION	3.2557929504726906E-7	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999693462901	WITHOUT_CLASSIFICATION	3.0653709930525535E-8	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999624630594	WITHOUT_CLASSIFICATION	3.7536940579237394E-8	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999999056573189	WITHOUT_CLASSIFICATION	9.434268111994421E-8	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999999746443935	WITHOUT_CLASSIFICATION	2.5355606498241774E-7	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.99989967971197	WITHOUT_CLASSIFICATION	1.0032028802999622E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9991949841194238	WITHOUT_CLASSIFICATION	8.050158805762057E-4	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.99998984115201	WITHOUT_CLASSIFICATION	1.015884799015339E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999863417458236	WITHOUT_CLASSIFICATION	1.3658254176479427E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999883503639	WITHOUT_CLASSIFICATION	1.164963611783907E-8	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999947621077421	WITHOUT_CLASSIFICATION	5.237892257853519E-6	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999932730982056	WITHOUT_CLASSIFICATION	6.726901794413838E-6	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999985636189945	WITHOUT_CLASSIFICATION	1.4363810054765252E-6	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999971744736925	WITHOUT_CLASSIFICATION	2.8255263074756917E-6	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999943138983169	WITHOUT_CLASSIFICATION	5.686101683092343E-6	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999941566732156	WITHOUT_CLASSIFICATION	5.8433267843960525E-6	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999977713389	WITHOUT_CLASSIFICATION	2.2286611227072687E-9	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999998506916036	WITHOUT_CLASSIFICATION	1.4930839644973292E-7	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9998620297961276	WITHOUT_CLASSIFICATION	1.379702038723833E-4	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999973889969593	WITHOUT_CLASSIFICATION	2.6110030405784135E-6	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999936885617313	WITHOUT_CLASSIFICATION	6.311438268691474E-6	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999999207146134	WITHOUT_CLASSIFICATION	7.928538660058782E-7	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9999122783487984	WITHOUT_CLASSIFICATION	8.772165120161426E-5	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999995259728206	WITHOUT_CLASSIFICATION	4.740271793452781E-7	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999999940205486	WITHOUT_CLASSIFICATION	5.979451391466975E-9	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999432000181095	WITHOUT_CLASSIFICATION	5.6799981890525256E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999999484023803	WITHOUT_CLASSIFICATION	5.159761975424142E-8	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999883503639	WITHOUT_CLASSIFICATION	1.164963611783907E-8	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999134850111536	WITHOUT_CLASSIFICATION	8.651498884631796E-5	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999999285174467	WITHOUT_CLASSIFICATION	7.148255331828421E-8	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9998725774196254	WITHOUT_CLASSIFICATION	1.2742258037462507E-4	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999999864952882	WITHOUT_CLASSIFICATION	1.3504711797289248E-8	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999813498410287	WITHOUT_CLASSIFICATION	1.8650158971234637E-5	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999972500698	WITHOUT_CLASSIFICATION	2.7499302176577926E-9	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999998506873489	WITHOUT_CLASSIFICATION	1.493126511574579E-7	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9997576114698333	WITHOUT_CLASSIFICATION	2.4238853016660366E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999889933405218	WITHOUT_CLASSIFICATION	1.1006659478142637E-5	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999770549893	WITHOUT_CLASSIFICATION	2.2945010727357066E-8	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9995166373606564	WITHOUT_CLASSIFICATION	4.8336263934365445E-4	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999998573913789	WITHOUT_CLASSIFICATION	1.4260862106420394E-7	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999520442379422	WITHOUT_CLASSIFICATION	4.795576205787935E-5	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999930981328632	WITHOUT_CLASSIFICATION	6.901867136865158E-6	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999974042337	WITHOUT_CLASSIFICATION	2.595766280223667E-9	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999719699454	WITHOUT_CLASSIFICATION	2.8030054596085614E-8	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999656646887	WITHOUT_CLASSIFICATION	3.433531120802091E-8	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999102346107	WITHOUT_CLASSIFICATION	8.97653893558729E-8	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999908532523202	WITHOUT_CLASSIFICATION	9.146747679748877E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999134850111536	WITHOUT_CLASSIFICATION	8.651498884631796E-5	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999720841298376	WITHOUT_CLASSIFICATION	2.7915870162426495E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.999999946435925	WITHOUT_CLASSIFICATION	5.3564074893592826E-8	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999997507225752	WITHOUT_CLASSIFICATION	2.492774247426954E-7	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999501900445	WITHOUT_CLASSIFICATION	4.980995550397815E-8	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999311452291	WITHOUT_CLASSIFICATION	6.885477089973014E-8	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9908773980270181	WITHOUT_CLASSIFICATION	0.009122601972981769	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9908773980270181	WITHOUT_CLASSIFICATION	0.009122601972981769	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999990934428468	WITHOUT_CLASSIFICATION	9.065571532901091E-7	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9908773980270181	WITHOUT_CLASSIFICATION	0.009122601972981769	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9908773980270181	WITHOUT_CLASSIFICATION	0.009122601972981769	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999318039625485	WITHOUT_CLASSIFICATION	6.819603745144113E-5	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999989598178275	WITHOUT_CLASSIFICATION	1.040182172431391E-6	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999992738029532	WITHOUT_CLASSIFICATION	7.261970468737348E-7	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999877662800892	WITHOUT_CLASSIFICATION	1.2233719910670326E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999977982208526	WITHOUT_CLASSIFICATION	2.2017791474912305E-6	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9994465352779964	WITHOUT_CLASSIFICATION	5.534647220035988E-4	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.999615186894285	WITHOUT_CLASSIFICATION	3.848131057150156E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999964742982306	WITHOUT_CLASSIFICATION	3.525701769369649E-6	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999908687216247	WITHOUT_CLASSIFICATION	9.131278375320506E-6	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998972893715423	WITHOUT_CLASSIFICATION	1.0271062845767518E-4	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999778412391044	WITHOUT_CLASSIFICATION	2.215876089560961E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999820042618178	WITHOUT_CLASSIFICATION	1.7995738182227753E-5	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999995053739175	WITHOUT_CLASSIFICATION	4.946260826326905E-7	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999556845521436	WITHOUT_CLASSIFICATION	4.431544785655125E-5	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999996792895711	WITHOUT_CLASSIFICATION	3.207104288571552E-7	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999766544490869	WITHOUT_CLASSIFICATION	2.3345550913031524E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994391385777	WITHOUT_CLASSIFICATION	5.60861422245013E-7	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999991370332524	WITHOUT_CLASSIFICATION	8.629667476783654E-7	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9998528733631542	WITHOUT_CLASSIFICATION	1.4712663684582445E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.999951861354667	WITHOUT_CLASSIFICATION	4.813864533302431E-5	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999559554317036	WITHOUT_CLASSIFICATION	4.404456829642282E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999979388902485	WITHOUT_CLASSIFICATION	2.0611097515771318E-6	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994391385777	WITHOUT_CLASSIFICATION	5.60861422245013E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999947621077421	WITHOUT_CLASSIFICATION	5.237892257853519E-6	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9999707233786317	WITHOUT_CLASSIFICATION	2.9276621368232003E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999933897237234	WITHOUT_CLASSIFICATION	6.61027627647774E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999980578842592	WITHOUT_CLASSIFICATION	1.9421157408493347E-6	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999755905302812	WITHOUT_CLASSIFICATION	2.4409469718867456E-5	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999982965330277	WITHOUT_CLASSIFICATION	1.7034669722464981E-6	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9999997416899122	WITHOUT_CLASSIFICATION	2.5831008769039616E-7	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9975320601874101	WITHOUT_CLASSIFICATION	0.0024679398125898636	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999832888870956	WITHOUT_CLASSIFICATION	1.6711112904388018E-5	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999939637250361	WITHOUT_CLASSIFICATION	6.036274963840147E-6	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9997284223687394	WITHOUT_CLASSIFICATION	2.715776312607242E-4	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999935814907	WITHOUT_CLASSIFICATION	6.418509323258407E-9	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999997408577245	WITHOUT_CLASSIFICATION	2.5914227551812637E-7	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999984577725854	WITHOUT_CLASSIFICATION	1.54222741453018E-6	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999173434806218	WITHOUT_CLASSIFICATION	8.26565193781621E-5	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999989457682	WITHOUT_CLASSIFICATION	1.0542317825069045E-9	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999999709335914	WITHOUT_CLASSIFICATION	2.9066408490890978E-8	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999625676377246	WITHOUT_CLASSIFICATION	3.7432362275355585E-5	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999999997976328	WITHOUT_CLASSIFICATION	2.023672030727907E-9	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999988014212629	WITHOUT_CLASSIFICATION	1.1985787370756797E-6	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999236015057618	WITHOUT_CLASSIFICATION	7.639849423823566E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999957051325975	WITHOUT_CLASSIFICATION	4.294867402477454E-6	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999998989010537	WITHOUT_CLASSIFICATION	1.0109894626792882E-7	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999832888870956	WITHOUT_CLASSIFICATION	1.6711112904388018E-5	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999976387258682	WITHOUT_CLASSIFICATION	2.361274131700872E-6	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.999989276542503	WITHOUT_CLASSIFICATION	1.0723457496986413E-5	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9993755454544923	WITHOUT_CLASSIFICATION	6.244545455076312E-4	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999994380589564	WITHOUT_CLASSIFICATION	5.619410436229788E-7	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988480243819	WITHOUT_CLASSIFICATION	1.1519756181139926E-6	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9999942822657794	WITHOUT_CLASSIFICATION	5.717734220632749E-6	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.999995538492402	WITHOUT_CLASSIFICATION	4.461507598037511E-6	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999998134261597	WITHOUT_CLASSIFICATION	1.8657384021280876E-7	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.999998557787839	WITHOUT_CLASSIFICATION	1.4422121609624113E-6	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9999802089545959	WITHOUT_CLASSIFICATION	1.9791045404039433E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999993617171082	WITHOUT_CLASSIFICATION	6.382828917263307E-7	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999481479157	WITHOUT_CLASSIFICATION	5.185208418599815E-8	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9984797005468276	WITHOUT_CLASSIFICATION	0.0015202994531724808	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999998969578987	WITHOUT_CLASSIFICATION	1.0304210123573459E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997088994554	WITHOUT_CLASSIFICATION	2.9110054447228293E-7	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999997977126651	WITHOUT_CLASSIFICATION	2.022873347393715E-7	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999668654006297	WITHOUT_CLASSIFICATION	3.313459937024054E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999993617171082	WITHOUT_CLASSIFICATION	6.382828917263307E-7	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999974689311	WITHOUT_CLASSIFICATION	2.531068921852452E-9	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.999992401494576	WITHOUT_CLASSIFICATION	7.598505423996996E-6	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999993948610766	WITHOUT_CLASSIFICATION	6.051389234241413E-7	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998449486189275	WITHOUT_CLASSIFICATION	1.5505138107250197E-4	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999990433297881	WITHOUT_CLASSIFICATION	9.56670211937984E-7	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999994042738217	WITHOUT_CLASSIFICATION	5.957261782263397E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997088994554	WITHOUT_CLASSIFICATION	2.9110054447228293E-7	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999734222038479	WITHOUT_CLASSIFICATION	2.6577796152050733E-5	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993589685623	WITHOUT_CLASSIFICATION	6.410314377403217E-7	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998665130699	WITHOUT_CLASSIFICATION	1.3348693011257748E-7	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996162238959855	WITHOUT_CLASSIFICATION	3.8377610401448556E-4	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.8644721166433642	WITHOUT_CLASSIFICATION	0.13552788335663582	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.8860685061676375	WITHOUT_CLASSIFICATION	0.11393149383236255	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999623046613	WITHOUT_CLASSIFICATION	3.769533869005609E-7	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999623046613	WITHOUT_CLASSIFICATION	3.769533869005609E-7	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.999999762006365	WITHOUT_CLASSIFICATION	2.379936350760151E-7	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999995377930146	WITHOUT_CLASSIFICATION	4.6220698538343E-7	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999994463364857	WITHOUT_CLASSIFICATION	5.536635142552541E-7	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999994793352137	WITHOUT_CLASSIFICATION	5.206647862260132E-7	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999981785234419	WITHOUT_CLASSIFICATION	1.821476558159925E-6	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998263267568	WITHOUT_CLASSIFICATION	1.7367324328002515E-7	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988433943251	WITHOUT_CLASSIFICATION	1.1566056748361656E-6	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928107628826	WITHOUT_CLASSIFICATION	7.189237117482473E-6	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999951187820609	WITHOUT_CLASSIFICATION	4.8812179390685986E-6	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999512459581	WITHOUT_CLASSIFICATION	4.875404189244068E-8	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998263267568	WITHOUT_CLASSIFICATION	1.7367324328002515E-7	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988433943251	WITHOUT_CLASSIFICATION	1.1566056748361656E-6	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928107628826	WITHOUT_CLASSIFICATION	7.189237117482473E-6	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999999872690382	WITHOUT_CLASSIFICATION	1.2730961889342408E-8	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9997942534567583	WITHOUT_CLASSIFICATION	2.0574654324161354E-4	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999981695887	WITHOUT_CLASSIFICATION	1.8304112165000743E-9	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999845911480019	WITHOUT_CLASSIFICATION	1.5408851998128877E-5	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999998466472085	WITHOUT_CLASSIFICATION	1.5335279144444504E-7	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999998840666652	WITHOUT_CLASSIFICATION	1.1593333477857711E-7	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999930871323732	WITHOUT_CLASSIFICATION	6.912867626784721E-6	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999909051555882	WITHOUT_CLASSIFICATION	9.094844411891426E-6	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999954915635155	WITHOUT_CLASSIFICATION	4.508436484431943E-6	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999985702127074	WITHOUT_CLASSIFICATION	1.4297872925519128E-6	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999998587508563	WITHOUT_CLASSIFICATION	1.4124914368626462E-7	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999935387326998	WITHOUT_CLASSIFICATION	6.461267300266084E-6	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999995631382101	WITHOUT_CLASSIFICATION	4.368617898886187E-7	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999814195234	WITHOUT_CLASSIFICATION	1.8580476576800328E-8	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999929568202526	WITHOUT_CLASSIFICATION	7.043179747424227E-6	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999999658161777	WITHOUT_CLASSIFICATION	3.418382239912222E-8	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999947928881067	WITHOUT_CLASSIFICATION	5.207111893310511E-6	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999425078991319	WITHOUT_CLASSIFICATION	5.749210086818172E-5	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999998270176067	WITHOUT_CLASSIFICATION	1.729823932320392E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999996094307575	WITHOUT_CLASSIFICATION	3.9056924243789887E-7	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999269496802	WITHOUT_CLASSIFICATION	7.305031983771642E-8	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9940941180285404	WITHOUT_CLASSIFICATION	0.005905881971459531	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999994393242946	WITHOUT_CLASSIFICATION	5.606757053773969E-7	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999965471772634	WITHOUT_CLASSIFICATION	3.452822736546536E-6	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999991173951	WITHOUT_CLASSIFICATION	8.826049386370309E-10	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9982906417148176	WITHOUT_CLASSIFICATION	0.0017093582851823207	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997442108448	WITHOUT_CLASSIFICATION	2.557891552114251E-7	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981414876349	WITHOUT_CLASSIFICATION	1.8585123650551164E-6	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999986041876	WITHOUT_CLASSIFICATION	1.3958123019456788E-9	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995995991056	WITHOUT_CLASSIFICATION	4.004008943915123E-7	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987530598938	WITHOUT_CLASSIFICATION	1.246940106154365E-6	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999981711364135	WITHOUT_CLASSIFICATION	1.8288635865339596E-6	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999981711364135	WITHOUT_CLASSIFICATION	1.8288635865339596E-6	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999996168872	WITHOUT_CLASSIFICATION	3.8311281729653453E-10	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999995757714447	WITHOUT_CLASSIFICATION	4.2422855526087125E-7	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999215489362777	WITHOUT_CLASSIFICATION	7.845106372228865E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999809077663318	WITHOUT_CLASSIFICATION	1.9092233668319756E-5	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999741756590577	WITHOUT_CLASSIFICATION	2.582434094232355E-5	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999998014382333	WITHOUT_CLASSIFICATION	1.9856176660316276E-7	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999964983793421	WITHOUT_CLASSIFICATION	3.5016206578228996E-6	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999983657026595	WITHOUT_CLASSIFICATION	1.634297340385373E-6	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999946732235456	WITHOUT_CLASSIFICATION	5.3267764543485014E-6	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997855592129	WITHOUT_CLASSIFICATION	2.1444078716399633E-7	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999968326839	WITHOUT_CLASSIFICATION	3.167316100584084E-7	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997760983386	WITHOUT_CLASSIFICATION	2.2390166140828026E-7	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997883425013	WITHOUT_CLASSIFICATION	2.116574987448908E-7	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999475435153	WITHOUT_CLASSIFICATION	5.2456484832062195E-8	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999888116629	WITHOUT_CLASSIFICATION	1.1188337099557978E-7	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997462001629	WITHOUT_CLASSIFICATION	2.5379983705511294E-7	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994559624479	WITHOUT_CLASSIFICATION	5.440375521214945E-7	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994656288261	WITHOUT_CLASSIFICATION	5.343711738632991E-7	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985755799309	WITHOUT_CLASSIFICATION	1.4244200690457026E-6	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996656665726	WITHOUT_CLASSIFICATION	3.3433342741664507E-7	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999966027942515	WITHOUT_CLASSIFICATION	3.397205748468455E-6	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999990202368418	WITHOUT_CLASSIFICATION	9.797631581008622E-7	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999953257426427	WITHOUT_CLASSIFICATION	4.674257357211085E-6	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999744778402746	WITHOUT_CLASSIFICATION	2.5522159725376755E-5	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999981891315041	WITHOUT_CLASSIFICATION	1.8108684959085405E-6	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999759562461936	WITHOUT_CLASSIFICATION	2.404375380637605E-5	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999987990103641	WITHOUT_CLASSIFICATION	1.2009896359096238E-6	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9990057365290944	WITHOUT_CLASSIFICATION	9.942634709055203E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999953257426427	WITHOUT_CLASSIFICATION	4.674257357211085E-6	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999953257426427	WITHOUT_CLASSIFICATION	4.674257357211085E-6	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9997089307757158	WITHOUT_CLASSIFICATION	2.910692242841584E-4	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999957339092193	WITHOUT_CLASSIFICATION	4.266090780701807E-6	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999698627945	WITHOUT_CLASSIFICATION	3.013720558191078E-8	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999971130554703	WITHOUT_CLASSIFICATION	2.886944529624716E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999995568641866	WITHOUT_CLASSIFICATION	4.431358133777898E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999996094307575	WITHOUT_CLASSIFICATION	3.9056924243789887E-7	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999999453367365	WITHOUT_CLASSIFICATION	5.466326350056556E-7	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999944787590281	WITHOUT_CLASSIFICATION	5.521240971833426E-6	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999999725475537	WITHOUT_CLASSIFICATION	2.745244625372126E-8	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902916147545	WITHOUT_CLASSIFICATION	9.708385245527578E-6	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9989129513695453	WITHOUT_CLASSIFICATION	0.0010870486304547136	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880297974492	WITHOUT_CLASSIFICATION	1.1970202550843627E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999966340076537	WITHOUT_CLASSIFICATION	3.3659923462737424E-6	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999966340076537	WITHOUT_CLASSIFICATION	3.3659923462737424E-6	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999995017490433	WITHOUT_CLASSIFICATION	4.982509566284863E-7	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999995017490433	WITHOUT_CLASSIFICATION	4.982509566284863E-7	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997379843686145	WITHOUT_CLASSIFICATION	2.62015631385509E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999977751473	WITHOUT_CLASSIFICATION	2.2248527690653855E-9	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999998617799484	WITHOUT_CLASSIFICATION	1.382200516387948E-7	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999070814984533	WITHOUT_CLASSIFICATION	9.291850154662706E-5	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999984554812763	WITHOUT_CLASSIFICATION	1.5445187236126454E-6	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.999986603815526	WITHOUT_CLASSIFICATION	1.3396184474031938E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859407376703	WITHOUT_CLASSIFICATION	1.4059262329780693E-5	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999555533032	WITHOUT_CLASSIFICATION	4.4446696792554863E-7	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999999493764624	WITHOUT_CLASSIFICATION	5.0623537530017346E-8	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999999720592601	WITHOUT_CLASSIFICATION	2.7940739918280328E-8	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999995454674	WITHOUT_CLASSIFICATION	4.545327321377903E-10	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998576161496626	WITHOUT_CLASSIFICATION	1.423838503374083E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999552134003533	WITHOUT_CLASSIFICATION	4.478659964662532E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9992296027041505	WITHOUT_CLASSIFICATION	7.703972958494878E-4	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999997300857308	WITHOUT_CLASSIFICATION	2.69914269178229E-7	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999920354099496	WITHOUT_CLASSIFICATION	7.964590050350626E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999921809233462	WITHOUT_CLASSIFICATION	7.819076653780624E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999921809233462	WITHOUT_CLASSIFICATION	7.819076653780624E-6	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999973649247468	WITHOUT_CLASSIFICATION	2.6350752532076055E-6	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999999770337319	WITHOUT_CLASSIFICATION	2.2966268076374663E-8	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999999060125	WITHOUT_CLASSIFICATION	9.398750802769274E-11	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999991687772754	WITHOUT_CLASSIFICATION	8.312227246078862E-6	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999834140098713	WITHOUT_CLASSIFICATION	1.6585990128715736E-5	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968334390497	WITHOUT_CLASSIFICATION	3.1665609501995465E-6	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999929800071504	WITHOUT_CLASSIFICATION	7.019992849605836E-6	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.8466593368929427	WITHOUT_CLASSIFICATION	0.15334066310705727	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.999971442750537	WITHOUT_CLASSIFICATION	2.8557249463001865E-5	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999960599000001	WITHOUT_CLASSIFICATION	3.940099999885423E-6	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.999997925345279	WITHOUT_CLASSIFICATION	2.0746547210919126E-6	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999704573213178	WITHOUT_CLASSIFICATION	2.954267868211389E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996338454942	WITHOUT_CLASSIFICATION	3.6615450585767276E-7	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999993645345515	WITHOUT_CLASSIFICATION	6.354654485679974E-7	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999960691348538	WITHOUT_CLASSIFICATION	3.930865146210943E-6	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999941140092543	WITHOUT_CLASSIFICATION	5.885990745706954E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999994807380514	WITHOUT_CLASSIFICATION	5.192619485318508E-7	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999646611547539	WITHOUT_CLASSIFICATION	3.533884524603925E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999701046059253	WITHOUT_CLASSIFICATION	2.9895394074806364E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999988903560536	WITHOUT_CLASSIFICATION	1.1096439464123842E-6	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999999280121	WITHOUT_CLASSIFICATION	7.198782595512917E-11	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999987374973647	WITHOUT_CLASSIFICATION	1.26250263534922E-6	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999829405116369	WITHOUT_CLASSIFICATION	1.7059488363066946E-5	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999995576716606	WITHOUT_CLASSIFICATION	4.4232833935528763E-7	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999974048646759	WITHOUT_CLASSIFICATION	2.5951353240248394E-6	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999954178535166	WITHOUT_CLASSIFICATION	4.582146483317412E-6	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999994393222569	WITHOUT_CLASSIFICATION	5.606777430812879E-7	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999988604778692	WITHOUT_CLASSIFICATION	1.1395221307798089E-6	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999999883276	WITHOUT_CLASSIFICATION	1.167233775441545E-11	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999703174317932	WITHOUT_CLASSIFICATION	2.968256820688117E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999625297749	WITHOUT_CLASSIFICATION	3.747022517532149E-8	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999978152827455	WITHOUT_CLASSIFICATION	2.184717254551538E-6	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999991167540145	WITHOUT_CLASSIFICATION	8.832459855900668E-7	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9991486598614084	WITHOUT_CLASSIFICATION	8.513401385915508E-4	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999999189816776	WITHOUT_CLASSIFICATION	8.101832230227633E-8	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999943166740386	WITHOUT_CLASSIFICATION	5.683325961391369E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999959896528632	WITHOUT_CLASSIFICATION	4.010347136765396E-6	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999554525986942	WITHOUT_CLASSIFICATION	4.454740130573298E-5	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999992452715433	WITHOUT_CLASSIFICATION	7.547284568396687E-7	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9998251790912291	WITHOUT_CLASSIFICATION	1.748209087708334E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999986236074365	WITHOUT_CLASSIFICATION	1.3763925634699289E-6	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999999195019729	WITHOUT_CLASSIFICATION	8.049802719200726E-8	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9996254411658047	WITHOUT_CLASSIFICATION	3.7455883419539255E-4	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999882676589671	WITHOUT_CLASSIFICATION	1.173234103290004E-4	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999735938612	WITHOUT_CLASSIFICATION	2.6406138786085505E-8	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999975749083274	WITHOUT_CLASSIFICATION	2.4250916726864717E-6	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999995772916925	WITHOUT_CLASSIFICATION	4.2270830754220284E-7	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999982494943113	WITHOUT_CLASSIFICATION	1.750505688838804E-6	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999964862148101	WITHOUT_CLASSIFICATION	3.513785190047791E-6	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999871095658157	WITHOUT_CLASSIFICATION	1.2890434184233402E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999867531401534	WITHOUT_CLASSIFICATION	1.3246859846606743E-4	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9996523533032102	WITHOUT_CLASSIFICATION	3.4764669678973763E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999544463284755	WITHOUT_CLASSIFICATION	4.555367152448608E-5	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9991006277460285	WITHOUT_CLASSIFICATION	8.993722539714868E-4	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9994939365693915	WITHOUT_CLASSIFICATION	5.060634306085603E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999981453006046	WITHOUT_CLASSIFICATION	1.8546993953344864E-6	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9625660836882546	WITHOUT_CLASSIFICATION	0.03743391631174539	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999890348478812	WITHOUT_CLASSIFICATION	1.0965152118788222E-5	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999877319191	WITHOUT_CLASSIFICATION	1.2268080941715832E-8	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9995706238611727	WITHOUT_CLASSIFICATION	4.2937613882729626E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.999999797133405	WITHOUT_CLASSIFICATION	2.0286659487094942E-7	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999978934126814	WITHOUT_CLASSIFICATION	2.1065873185657136E-6	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.999999992694268	WITHOUT_CLASSIFICATION	7.305732088854093E-9	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999992527349428	WITHOUT_CLASSIFICATION	7.472650570753111E-7	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999943997341	WITHOUT_CLASSIFICATION	5.600265945493276E-9	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999992358056321	WITHOUT_CLASSIFICATION	7.64194367861917E-7	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999873794964805	WITHOUT_CLASSIFICATION	1.2620503519515888E-5	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999996660986459	WITHOUT_CLASSIFICATION	3.3390135410291964E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999654214399127	WITHOUT_CLASSIFICATION	3.457856008719002E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999654214399127	WITHOUT_CLASSIFICATION	3.457856008719002E-5	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999988979182185	WITHOUT_CLASSIFICATION	1.1020817815333812E-6	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999996195396955	WITHOUT_CLASSIFICATION	3.8046030455022974E-7	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999985925262	WITHOUT_CLASSIFICATION	1.407473731743228E-9	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999998285543736	WITHOUT_CLASSIFICATION	1.7144562633828125E-7	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999993641464523	WITHOUT_CLASSIFICATION	6.358535477733593E-7	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9998628627303868	WITHOUT_CLASSIFICATION	1.371372696132651E-4	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999999955669515	WITHOUT_CLASSIFICATION	4.433048501899344E-8	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999894333543	WITHOUT_CLASSIFICATION	1.0566645660505996E-8	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999653729339448	WITHOUT_CLASSIFICATION	3.462706605514323E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999990641660502	WITHOUT_CLASSIFICATION	9.358339497175835E-7	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999502496869757	WITHOUT_CLASSIFICATION	4.975031302443849E-5	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999837689630152	WITHOUT_CLASSIFICATION	1.6231036984748706E-5	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999995370287726	WITHOUT_CLASSIFICATION	4.6297122738738843E-7	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999965203258	WITHOUT_CLASSIFICATION	3.479674234360509E-9	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999979310708762	WITHOUT_CLASSIFICATION	2.0689291238039635E-6	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9861721949708384	WITHOUT_CLASSIFICATION	0.013827805029161493	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999614866349316	WITHOUT_CLASSIFICATION	3.851336506840852E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9658742879904837	WITHOUT_CLASSIFICATION	0.03412571200951639	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9989797346473057	WITHOUT_CLASSIFICATION	0.0010202653526942813	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999978678257093	WITHOUT_CLASSIFICATION	2.132174290577785E-6	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999997626555325	WITHOUT_CLASSIFICATION	2.373444674312302E-7	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999869347614058	WITHOUT_CLASSIFICATION	1.3065238594300258E-5	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999985911894079	WITHOUT_CLASSIFICATION	1.4088105921452497E-6	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9993926126927177	WITHOUT_CLASSIFICATION	6.073873072821428E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999997894833916	WITHOUT_CLASSIFICATION	2.1051660833965668E-7	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999803803079711	WITHOUT_CLASSIFICATION	1.961969202890216E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999922390301467	WITHOUT_CLASSIFICATION	7.760969853370659E-6	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999998693938706	WITHOUT_CLASSIFICATION	1.30606129395043E-7	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999999161876022	WITHOUT_CLASSIFICATION	8.381239777427886E-8	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999722416463488	WITHOUT_CLASSIFICATION	2.775835365117833E-5	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999987935965393	WITHOUT_CLASSIFICATION	1.2064034606846543E-6	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999816587156488	WITHOUT_CLASSIFICATION	1.8341284351197407E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999969999804976	WITHOUT_CLASSIFICATION	3.000019502385971E-6	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999898127244315	WITHOUT_CLASSIFICATION	1.0187275568354528E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998945002472845	WITHOUT_CLASSIFICATION	1.0549975271543276E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998945002472845	WITHOUT_CLASSIFICATION	1.0549975271543276E-4	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999983592529416	WITHOUT_CLASSIFICATION	1.6407470583628148E-6	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9998353111543279	WITHOUT_CLASSIFICATION	1.6468884567201784E-4	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999999307406661	WITHOUT_CLASSIFICATION	6.925933396208655E-8	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999841136210275	WITHOUT_CLASSIFICATION	1.588637897257666E-5	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999949506332	WITHOUT_CLASSIFICATION	5.0493668803491646E-9	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999964839949209	WITHOUT_CLASSIFICATION	3.5160050789318157E-6	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999995426750022	WITHOUT_CLASSIFICATION	4.573249977678471E-7	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999742681022	WITHOUT_CLASSIFICATION	2.5731897905379302E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999991706653529	WITHOUT_CLASSIFICATION	8.293346470250701E-7	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999996533662479	WITHOUT_CLASSIFICATION	3.4663375211217335E-7	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999270925675332	WITHOUT_CLASSIFICATION	7.290743246682399E-5	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9995786888618525	WITHOUT_CLASSIFICATION	4.2131113814742845E-4	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999868858606	WITHOUT_CLASSIFICATION	1.3114139500913092E-8	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999455010161783	WITHOUT_CLASSIFICATION	5.449898382161262E-5	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999992059505681	WITHOUT_CLASSIFICATION	7.94049431986778E-7	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9982588308018229	WITHOUT_CLASSIFICATION	0.0017411691981771436	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9982588308018229	WITHOUT_CLASSIFICATION	0.0017411691981771436	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999673578740214	WITHOUT_CLASSIFICATION	3.264212597861356E-5	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999999663748409	WITHOUT_CLASSIFICATION	3.3625159105161306E-7	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999916486200207	WITHOUT_CLASSIFICATION	8.351379979354363E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999997387740294	WITHOUT_CLASSIFICATION	2.6122597065896967E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998576161496626	WITHOUT_CLASSIFICATION	1.423838503374083E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996219550927786	WITHOUT_CLASSIFICATION	3.7804490722140744E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999998130051712	WITHOUT_CLASSIFICATION	1.8699482897070026E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999998190989929	WITHOUT_CLASSIFICATION	1.8090100703855388E-7	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999998190989929	WITHOUT_CLASSIFICATION	1.8090100703855388E-7	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999772359408523	WITHOUT_CLASSIFICATION	2.2764059147691374E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999981173469259	WITHOUT_CLASSIFICATION	1.8826530741056634E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999994128465944	WITHOUT_CLASSIFICATION	5.87153405563097E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999696378841	WITHOUT_CLASSIFICATION	3.0362115983621005E-8	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999975396830738	WITHOUT_CLASSIFICATION	2.460316926147558E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999423329155068	WITHOUT_CLASSIFICATION	5.766708449324066E-5	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.998937167554351	WITHOUT_CLASSIFICATION	0.001062832445649002	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999570817630113	WITHOUT_CLASSIFICATION	4.2918236988695105E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995929482953	WITHOUT_CLASSIFICATION	4.0705170456397515E-7	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999348149744269	WITHOUT_CLASSIFICATION	6.518502557311953E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9964141919669758	WITHOUT_CLASSIFICATION	0.00358580803302415	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.999998715017039	WITHOUT_CLASSIFICATION	1.2849829610112479E-6	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999988075917919	WITHOUT_CLASSIFICATION	1.1924082080854802E-6	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999999218866135	WITHOUT_CLASSIFICATION	7.811338646125743E-8	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999998082117997	WITHOUT_CLASSIFICATION	1.9178820038080188E-7	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999889096233	WITHOUT_CLASSIFICATION	1.1090376605984681E-8	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999992938685	WITHOUT_CLASSIFICATION	7.061315079070516E-10	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999954833038982	WITHOUT_CLASSIFICATION	4.5166961017983544E-6	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999988585843553	WITHOUT_CLASSIFICATION	1.1414156446968184E-6	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997319187307886	WITHOUT_CLASSIFICATION	2.6808126921144896E-4	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999999638227662	WITHOUT_CLASSIFICATION	3.6177233711161E-8	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999997497935158	WITHOUT_CLASSIFICATION	2.5020648420157925E-7	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999844802775998	WITHOUT_CLASSIFICATION	1.5519722400208163E-5	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999865747434247	WITHOUT_CLASSIFICATION	1.3425256575269932E-5	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999994903016426	WITHOUT_CLASSIFICATION	5.096983573017531E-7	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9996451421892094	WITHOUT_CLASSIFICATION	3.5485781079057984E-4	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9915381120290571	WITHOUT_CLASSIFICATION	0.008461887970942859	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999367161623145	WITHOUT_CLASSIFICATION	6.328383768540903E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9987036508140285	WITHOUT_CLASSIFICATION	0.0012963491859715446	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997985935993	WITHOUT_CLASSIFICATION	2.014064006537179E-7	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999898992714506	WITHOUT_CLASSIFICATION	1.0100728549407043E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999998930792621	WITHOUT_CLASSIFICATION	1.0692073791537859E-7	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999975006860649	WITHOUT_CLASSIFICATION	2.4993139351398072E-6	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999977905467169	WITHOUT_CLASSIFICATION	2.2094532831532785E-6	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.999990905045906	WITHOUT_CLASSIFICATION	9.094954094073742E-6	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999997524769197	WITHOUT_CLASSIFICATION	2.4752308031002865E-7	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9999996919776484	WITHOUT_CLASSIFICATION	3.0802235158924104E-7	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999999525082487	WITHOUT_CLASSIFICATION	4.7491751266596615E-8	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999846951811	WITHOUT_CLASSIFICATION	1.5304818785757934E-8	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997426297799	WITHOUT_CLASSIFICATION	2.5737022008989384E-7	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999368451469	WITHOUT_CLASSIFICATION	6.315485310141788E-8	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999973309215231	WITHOUT_CLASSIFICATION	2.6690784769471313E-6	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999947339416997	WITHOUT_CLASSIFICATION	5.266058300379333E-6	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999955004346088	WITHOUT_CLASSIFICATION	4.499565391270405E-6	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999166701	WITHOUT_CLASSIFICATION	8.332997214854855E-11	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.999314324836345	WITHOUT_CLASSIFICATION	6.856751636550403E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999846951811	WITHOUT_CLASSIFICATION	1.5304818785757934E-8	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997426297799	WITHOUT_CLASSIFICATION	2.5737022008989384E-7	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999691615037177	WITHOUT_CLASSIFICATION	3.083849628232609E-5	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9997697765901018	WITHOUT_CLASSIFICATION	2.3022340989813295E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999771543964	WITHOUT_CLASSIFICATION	2.2845603651611482E-8	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9997895413045016	WITHOUT_CLASSIFICATION	2.1045869549836388E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999969233090367	WITHOUT_CLASSIFICATION	3.076690963294676E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999990981286053	WITHOUT_CLASSIFICATION	9.0187139460233E-7	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9948058722392307	WITHOUT_CLASSIFICATION	0.005194127760769381	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999995809601547	WITHOUT_CLASSIFICATION	4.190398452813067E-7	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999851542720253	WITHOUT_CLASSIFICATION	1.4845727974734587E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9848264923640441	WITHOUT_CLASSIFICATION	0.015173507635956016	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999999456985	WITHOUT_CLASSIFICATION	5.4301477519116195E-11	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9848264923640441	WITHOUT_CLASSIFICATION	0.015173507635956016	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999062707452	WITHOUT_CLASSIFICATION	9.372925470650077E-8	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999976720764793	WITHOUT_CLASSIFICATION	2.3279235207257107E-6	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999999135362969	WITHOUT_CLASSIFICATION	8.646370303189963E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999424165401	WITHOUT_CLASSIFICATION	5.75834599024062E-7	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999961697460625	WITHOUT_CLASSIFICATION	3.830253937513223E-6	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999796105779513	WITHOUT_CLASSIFICATION	2.0389422048732677E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999796105779513	WITHOUT_CLASSIFICATION	2.0389422048732677E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999999537757289	WITHOUT_CLASSIFICATION	4.6224271087736067E-7	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999985797726262	WITHOUT_CLASSIFICATION	1.4202273738386732E-6	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999974770973108	WITHOUT_CLASSIFICATION	2.5229026892185666E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999666863875986	WITHOUT_CLASSIFICATION	3.3313612401426754E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999996537960145	WITHOUT_CLASSIFICATION	3.462039855502318E-7	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9989590684229934	WITHOUT_CLASSIFICATION	0.00104093157700653	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999949597067008	WITHOUT_CLASSIFICATION	5.040293299099183E-6	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999999139632824	WITHOUT_CLASSIFICATION	8.603671773538148E-8	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999997118446013	WITHOUT_CLASSIFICATION	2.881553987346949E-7	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.999997293056943	WITHOUT_CLASSIFICATION	2.706943057044295E-6	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9999996161949332	WITHOUT_CLASSIFICATION	3.838050668849471E-7	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999676686282585	WITHOUT_CLASSIFICATION	3.233137174145314E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999632422602143	WITHOUT_CLASSIFICATION	3.67577397857081E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9999999608977247	WITHOUT_CLASSIFICATION	3.910227538391357E-8	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9998687606022361	WITHOUT_CLASSIFICATION	1.3123939776397113E-4	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999915069043145	WITHOUT_CLASSIFICATION	8.493095685597061E-6	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999934407252667	WITHOUT_CLASSIFICATION	6.559274733345586E-6	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999430744914245	WITHOUT_CLASSIFICATION	5.692550857564104E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999996542342305	WITHOUT_CLASSIFICATION	3.457657694193607E-7	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999887906788072	WITHOUT_CLASSIFICATION	1.1209321192834506E-5	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998267710169029	WITHOUT_CLASSIFICATION	1.7322898309714746E-4	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.999987796420185	WITHOUT_CLASSIFICATION	1.220357981498573E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9983914401556999	WITHOUT_CLASSIFICATION	0.0016085598442999707	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999268308466209	WITHOUT_CLASSIFICATION	7.316915337912382E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999733153075978	WITHOUT_CLASSIFICATION	2.6684692402190803E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999967897546446	WITHOUT_CLASSIFICATION	3.210245355532547E-6	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999996013436055	WITHOUT_CLASSIFICATION	3.986563944551887E-7	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9973267675349489	WITHOUT_CLASSIFICATION	0.0026732324650511415	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999237044203699	WITHOUT_CLASSIFICATION	7.629557963005626E-5	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9995092886110338	WITHOUT_CLASSIFICATION	4.90711388966129E-4	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.996794990038412	WITHOUT_CLASSIFICATION	0.0032050099615879707	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999484560428072	WITHOUT_CLASSIFICATION	5.154395719278195E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999949597067008	WITHOUT_CLASSIFICATION	5.040293299099183E-6	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999987735196936	WITHOUT_CLASSIFICATION	1.2264803063826875E-6	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9997226138859756	WITHOUT_CLASSIFICATION	2.773861140244866E-4	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.995053044221295	WITHOUT_CLASSIFICATION	0.004946955778705032	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999994874523204	WITHOUT_CLASSIFICATION	5.125476795970172E-7	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9998629858541958	WITHOUT_CLASSIFICATION	1.3701414580421004E-4	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999918012522772	WITHOUT_CLASSIFICATION	8.198747722785052E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999666863875986	WITHOUT_CLASSIFICATION	3.3313612401426754E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999666863875986	WITHOUT_CLASSIFICATION	3.3313612401426754E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999862360908706	WITHOUT_CLASSIFICATION	1.3763909129402852E-4	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999646202167224	WITHOUT_CLASSIFICATION	3.53797832776021E-5	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.999993852961165	WITHOUT_CLASSIFICATION	6.1470388349528975E-6	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999544399170123	WITHOUT_CLASSIFICATION	4.5560082987832654E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9956999331255261	WITHOUT_CLASSIFICATION	0.004300066874473981	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999998500378131	WITHOUT_CLASSIFICATION	1.4996218683732808E-7	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999997614350643	WITHOUT_CLASSIFICATION	2.38564935616884E-7	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999281169656	WITHOUT_CLASSIFICATION	7.188303440500805E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999786696634767	WITHOUT_CLASSIFICATION	2.1330336523372042E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999952910201	WITHOUT_CLASSIFICATION	4.70897982812362E-9	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999918051887967	WITHOUT_CLASSIFICATION	8.19481120321199E-6	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9996794675127462	WITHOUT_CLASSIFICATION	3.2053248725373736E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999997335423829	WITHOUT_CLASSIFICATION	2.6645761715085604E-7	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999952910201	WITHOUT_CLASSIFICATION	4.70897982812362E-9	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999999324783953	WITHOUT_CLASSIFICATION	6.752160469142086E-7	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999822263434471	WITHOUT_CLASSIFICATION	1.7773656552793653E-5	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999949695443067	WITHOUT_CLASSIFICATION	5.030455693306487E-6	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.7185080905300346	WITHOUT_CLASSIFICATION	0.2814919094699652	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9996794675127462	WITHOUT_CLASSIFICATION	3.2053248725373736E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999955278649	WITHOUT_CLASSIFICATION	4.472135048116186E-9	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999997966422	WITHOUT_CLASSIFICATION	2.033577923782644E-10	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999991786533	WITHOUT_CLASSIFICATION	8.213466858697051E-10	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999999996051	WITHOUT_CLASSIFICATION	3.949381179518294E-13	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998962147835706	WITHOUT_CLASSIFICATION	1.037852164293367E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999687510482	WITHOUT_CLASSIFICATION	3.124895172663559E-8	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999984015984	WITHOUT_CLASSIFICATION	1.5984016512508361E-9	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999991563244163	WITHOUT_CLASSIFICATION	8.436755837737899E-7	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999271122610559	WITHOUT_CLASSIFICATION	7.288773894412312E-5	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999942811553287	WITHOUT_CLASSIFICATION	5.718844671196646E-6	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999800582254	WITHOUT_CLASSIFICATION	1.9941774545011794E-8	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999965493983627	WITHOUT_CLASSIFICATION	3.4506016372919447E-6	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999952910201	WITHOUT_CLASSIFICATION	4.70897982812362E-9	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999955278649	WITHOUT_CLASSIFICATION	4.472135048116186E-9	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999991786533	WITHOUT_CLASSIFICATION	8.213466858697051E-10	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.99999909164012	WITHOUT_CLASSIFICATION	9.083598799051266E-7	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999984929510674	WITHOUT_CLASSIFICATION	1.5070489326123449E-6	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999844124978	WITHOUT_CLASSIFICATION	1.5587502129661984E-8	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9996794675127462	WITHOUT_CLASSIFICATION	3.2053248725373736E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999691924110091	WITHOUT_CLASSIFICATION	3.080758899088367E-5	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999994886211412	WITHOUT_CLASSIFICATION	5.113788587832848E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999704087940698	WITHOUT_CLASSIFICATION	2.9591205930210382E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999942685457436	WITHOUT_CLASSIFICATION	5.731454256403835E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999991563244163	WITHOUT_CLASSIFICATION	8.436755837737899E-7	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999999324783953	WITHOUT_CLASSIFICATION	6.752160469142086E-7	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999988908675235	WITHOUT_CLASSIFICATION	1.109132476482094E-6	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999968745347096	WITHOUT_CLASSIFICATION	3.125465290415042E-6	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999992571743255	WITHOUT_CLASSIFICATION	7.428256744763494E-7	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999848984421531	WITHOUT_CLASSIFICATION	1.5101557846904088E-5	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.8863962123527547	WITHOUT_CLASSIFICATION	0.11360378764724528	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9958956896126566	WITHOUT_CLASSIFICATION	0.0041043103873434255	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9998605079988335	WITHOUT_CLASSIFICATION	1.3949200116649118E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999424165401	WITHOUT_CLASSIFICATION	5.75834599024062E-7	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998767489023	WITHOUT_CLASSIFICATION	1.2325109762738249E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978441197859	WITHOUT_CLASSIFICATION	2.1558802141393776E-6	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999982933752265	WITHOUT_CLASSIFICATION	1.7066247734806934E-6	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999999866019292	WITHOUT_CLASSIFICATION	1.3398070796980805E-8	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999828568891	WITHOUT_CLASSIFICATION	1.7143110941280936E-8	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.999999981002597	WITHOUT_CLASSIFICATION	1.8997403012211473E-8	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999941104885	WITHOUT_CLASSIFICATION	5.8895115030568235E-9	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999998851868513	WITHOUT_CLASSIFICATION	1.1481314870235311E-7	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999994682350104	WITHOUT_CLASSIFICATION	5.317649897227542E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999942685457436	WITHOUT_CLASSIFICATION	5.731454256403835E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978441197859	WITHOUT_CLASSIFICATION	2.1558802141393776E-6	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999862533882219	WITHOUT_CLASSIFICATION	1.3746611778062581E-5	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999993272637617	WITHOUT_CLASSIFICATION	6.727362382647156E-7	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999892712859527	WITHOUT_CLASSIFICATION	1.072871404730866E-5	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999991392914594	WITHOUT_CLASSIFICATION	8.607085405586004E-7	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.999989738174268	WITHOUT_CLASSIFICATION	1.0261825732043514E-5	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999996211350728	WITHOUT_CLASSIFICATION	3.788649271702473E-7	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999992423444725	WITHOUT_CLASSIFICATION	7.576555274603713E-7	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9996924168582594	WITHOUT_CLASSIFICATION	3.075831417405711E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999960232186164	WITHOUT_CLASSIFICATION	3.976781383679297E-6	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999935968329255	WITHOUT_CLASSIFICATION	6.403167074430193E-6	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999983599199981	WITHOUT_CLASSIFICATION	1.6400800018882214E-6	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999364723993	WITHOUT_CLASSIFICATION	6.352760067154314E-8	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999368581521915	WITHOUT_CLASSIFICATION	6.314184780856955E-5	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999944657613797	WITHOUT_CLASSIFICATION	5.5342386202496615E-6	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999968143200757	WITHOUT_CLASSIFICATION	3.1856799243454063E-6	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999032330197	WITHOUT_CLASSIFICATION	9.676698029042387E-8	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999999717224009	WITHOUT_CLASSIFICATION	2.8277599096960196E-7	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999324548889	WITHOUT_CLASSIFICATION	6.754511101611818E-8	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999994353626589	WITHOUT_CLASSIFICATION	5.646373410708791E-7	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999892379925874	WITHOUT_CLASSIFICATION	1.0762007412504084E-5	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999991772499326	WITHOUT_CLASSIFICATION	8.22750067480665E-7	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999993258907613	WITHOUT_CLASSIFICATION	6.741092387506116E-7	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999998742345663	WITHOUT_CLASSIFICATION	1.2576543375231102E-7	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999613101951	WITHOUT_CLASSIFICATION	3.8689804966038676E-8	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999681116204	WITHOUT_CLASSIFICATION	3.188837958249746E-8	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7223737936304097	WITHOUT_CLASSIFICATION	0.27762620636959034	IMPLEMENTATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9974931377690291	WITHOUT_CLASSIFICATION	0.0025068622309708066	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998765233847512	WITHOUT_CLASSIFICATION	1.2347661524884953E-4	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999756338614253	WITHOUT_CLASSIFICATION	2.4366138574706126E-5	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9511079460263099	IMPLEMENTATION	0.04889205397369021	WITHOUT_CLASSIFICATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999879331454	WITHOUT_CLASSIFICATION	1.2066854567208368E-8	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999630984423225	WITHOUT_CLASSIFICATION	3.690155767759025E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999989364123704	WITHOUT_CLASSIFICATION	1.0635876295699407E-6	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9998609830451243	WITHOUT_CLASSIFICATION	1.390169548756594E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999903788405	WITHOUT_CLASSIFICATION	9.621159549352476E-9	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999966309174252	WITHOUT_CLASSIFICATION	3.3690825747906427E-6	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999810822655	WITHOUT_CLASSIFICATION	1.8917734520098647E-8	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999934284572672	WITHOUT_CLASSIFICATION	6.571542732769946E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999966309174252	WITHOUT_CLASSIFICATION	3.3690825747906427E-6	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999903788405	WITHOUT_CLASSIFICATION	9.621159549352476E-9	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999810822655	WITHOUT_CLASSIFICATION	1.8917734520098647E-8	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999964113943977	WITHOUT_CLASSIFICATION	3.588605602459978E-6	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.999999907902688	WITHOUT_CLASSIFICATION	9.209731200611759E-8	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.999932357913288	WITHOUT_CLASSIFICATION	6.764208671199239E-5	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999912358019605	WITHOUT_CLASSIFICATION	8.764198039520446E-6	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999993302581	WITHOUT_CLASSIFICATION	6.697419003168803E-10	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9599676808115479	IMPLEMENTATION	0.040032319188452015	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9993804450385451	WITHOUT_CLASSIFICATION	6.19554961454915E-4	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999176202427306	WITHOUT_CLASSIFICATION	8.237975726935228E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999969041720086	WITHOUT_CLASSIFICATION	3.095827991478197E-6	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999954524654574	WITHOUT_CLASSIFICATION	4.5475345426101215E-6	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.999998208934617	WITHOUT_CLASSIFICATION	1.7910653829883971E-6	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999970049726574	WITHOUT_CLASSIFICATION	2.995027342630837E-6	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999441385428832	WITHOUT_CLASSIFICATION	5.586145711687154E-5	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999433879751413	WITHOUT_CLASSIFICATION	5.66120248586931E-5	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9998767617571905	WITHOUT_CLASSIFICATION	1.232382428094646E-4	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999082259811	WITHOUT_CLASSIFICATION	9.177401891658036E-8	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999928254105	WITHOUT_CLASSIFICATION	7.174589369090891E-9	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.999999986509198	WITHOUT_CLASSIFICATION	1.3490802147034925E-8	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999973599168466	WITHOUT_CLASSIFICATION	2.6400831533019415E-6	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999993912454532	WITHOUT_CLASSIFICATION	6.087545468444418E-7	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9897947889511948	WITHOUT_CLASSIFICATION	0.010205211048805316	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999580737816	WITHOUT_CLASSIFICATION	4.192621840222383E-8	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999988817507519	WITHOUT_CLASSIFICATION	1.1182492480657682E-6	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999609104171994	WITHOUT_CLASSIFICATION	3.9089582800703244E-5	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999995029804412	WITHOUT_CLASSIFICATION	4.970195588193292E-7	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999995029804412	WITHOUT_CLASSIFICATION	4.970195588193292E-7	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999908562162	WITHOUT_CLASSIFICATION	9.143783792555194E-9	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999908562162	WITHOUT_CLASSIFICATION	9.143783792555194E-9	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9957660308168743	WITHOUT_CLASSIFICATION	0.004233969183125746	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999928254105	WITHOUT_CLASSIFICATION	7.174589369090891E-9	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999984399171762	WITHOUT_CLASSIFICATION	1.5600828238178164E-6	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999993658527899	WITHOUT_CLASSIFICATION	6.341472101093926E-6	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999999692753775	WITHOUT_CLASSIFICATION	3.072462249654944E-7	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999999692753775	WITHOUT_CLASSIFICATION	3.072462249654944E-7	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999946706280841	WITHOUT_CLASSIFICATION	5.329371915916705E-6	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999976282598344	WITHOUT_CLASSIFICATION	2.3717401656930983E-6	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999414600208	WITHOUT_CLASSIFICATION	5.853997921526635E-8	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999935690097296	WITHOUT_CLASSIFICATION	6.430990270386655E-6	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9992890659038183	WITHOUT_CLASSIFICATION	7.109340961816558E-4	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999989005416712	WITHOUT_CLASSIFICATION	1.0994583287845334E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999951819894471	WITHOUT_CLASSIFICATION	4.818010552851131E-6	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999942475047546	WITHOUT_CLASSIFICATION	5.752495245364195E-6	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9996510143677282	WITHOUT_CLASSIFICATION	3.4898563227189435E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999968458239	WITHOUT_CLASSIFICATION	3.154176099899284E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.999996961687684	WITHOUT_CLASSIFICATION	3.0383123159126544E-6	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9995023114731985	WITHOUT_CLASSIFICATION	4.976885268016242E-4	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999999279968957	WITHOUT_CLASSIFICATION	7.200310424618344E-8	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999990898569383	WITHOUT_CLASSIFICATION	9.101430616577478E-7	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9998594672092747	WITHOUT_CLASSIFICATION	1.4053279072535516E-4	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999248880070484	WITHOUT_CLASSIFICATION	7.51119929516856E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975397755722	WITHOUT_CLASSIFICATION	2.460224427778486E-6	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.999874786659997	WITHOUT_CLASSIFICATION	1.252133400030887E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999327011722331	WITHOUT_CLASSIFICATION	6.729882776693912E-5	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999036647388	WITHOUT_CLASSIFICATION	9.633526123257848E-8	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9995809118070513	WITHOUT_CLASSIFICATION	4.190881929486953E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999999547123508	WITHOUT_CLASSIFICATION	4.528764911749068E-8	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999972353033494	WITHOUT_CLASSIFICATION	2.7646966506786287E-6	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999992376378586	WITHOUT_CLASSIFICATION	7.623621413830158E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999809077663318	WITHOUT_CLASSIFICATION	1.9092233668319756E-5	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999945850263785	WITHOUT_CLASSIFICATION	5.414973621616338E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978441197859	WITHOUT_CLASSIFICATION	2.1558802141393776E-6	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999364723993	WITHOUT_CLASSIFICATION	6.352760067154314E-8	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999981116690291	WITHOUT_CLASSIFICATION	1.8883309709585824E-6	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999983736149757	WITHOUT_CLASSIFICATION	1.6263850242514598E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981381131438	WITHOUT_CLASSIFICATION	1.8618868562731384E-6	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999807336925333	WITHOUT_CLASSIFICATION	1.926630746675711E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999902219061451	WITHOUT_CLASSIFICATION	9.778093854906637E-6	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999902219061451	WITHOUT_CLASSIFICATION	9.778093854906637E-6	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999994854374167	WITHOUT_CLASSIFICATION	5.1456258329572E-7	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999992882272155	WITHOUT_CLASSIFICATION	7.117727845396334E-7	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999998726509907	WITHOUT_CLASSIFICATION	1.273490094345577E-7	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999998726509907	WITHOUT_CLASSIFICATION	1.273490094345577E-7	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9995615041321493	WITHOUT_CLASSIFICATION	4.384958678507933E-4	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999992076846077	WITHOUT_CLASSIFICATION	7.923153922928353E-6	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999971478851627	WITHOUT_CLASSIFICATION	2.8521148372799314E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999995568641866	WITHOUT_CLASSIFICATION	4.431358133777898E-7	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999827467978791	WITHOUT_CLASSIFICATION	1.725320212085756E-5	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999995157084136	WITHOUT_CLASSIFICATION	4.842915863942022E-7	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.99973597181647	WITHOUT_CLASSIFICATION	2.6402818353005994E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999939696806253	WITHOUT_CLASSIFICATION	6.030319374790672E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999622006721	WITHOUT_CLASSIFICATION	3.7799327834599855E-8	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999622006721	WITHOUT_CLASSIFICATION	3.7799327834599855E-8	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999922366811325	WITHOUT_CLASSIFICATION	7.763318867613424E-6	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998436134687	WITHOUT_CLASSIFICATION	1.5638653136222197E-7	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998436134687	WITHOUT_CLASSIFICATION	1.5638653136222197E-7	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999800951808	WITHOUT_CLASSIFICATION	1.990481922703784E-8	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999999478889	WITHOUT_CLASSIFICATION	5.211106864570331E-11	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9991253124774496	WITHOUT_CLASSIFICATION	8.746875225504532E-4	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999966384946302	WITHOUT_CLASSIFICATION	3.3615053698880753E-6	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999974822448298	WITHOUT_CLASSIFICATION	2.51775517014986E-6	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999856845718	WITHOUT_CLASSIFICATION	1.4315428146725263E-8	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9998278641903461	WITHOUT_CLASSIFICATION	1.721358096538406E-4	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998716955897358	WITHOUT_CLASSIFICATION	1.2830441026430748E-4	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999998001896469	WITHOUT_CLASSIFICATION	1.9981035309444755E-6	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999659129952929	WITHOUT_CLASSIFICATION	3.408700470714164E-5	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999961977474786	WITHOUT_CLASSIFICATION	3.8022525214125445E-6	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999906395344279	WITHOUT_CLASSIFICATION	9.360465572063068E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999692458993298	WITHOUT_CLASSIFICATION	3.07541006702252E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999692458993298	WITHOUT_CLASSIFICATION	3.07541006702252E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999692458993298	WITHOUT_CLASSIFICATION	3.07541006702252E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999692458993298	WITHOUT_CLASSIFICATION	3.07541006702252E-5	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999983195903793	WITHOUT_CLASSIFICATION	1.680409620614109E-6	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999851616897162	WITHOUT_CLASSIFICATION	1.4838310283836537E-5	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999822266262084	WITHOUT_CLASSIFICATION	1.77733737916031E-5	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999905305937188	WITHOUT_CLASSIFICATION	9.46940628125173E-6	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999874602312129	WITHOUT_CLASSIFICATION	1.2539768787018138E-5	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999916037811089	WITHOUT_CLASSIFICATION	8.396218891145526E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998576161496626	WITHOUT_CLASSIFICATION	1.423838503374083E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999997766847557	WITHOUT_CLASSIFICATION	2.233152443018815E-7	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999189029867701	WITHOUT_CLASSIFICATION	8.109701322988453E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998576161496626	WITHOUT_CLASSIFICATION	1.423838503374083E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998576161496626	WITHOUT_CLASSIFICATION	1.423838503374083E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999621850883079	WITHOUT_CLASSIFICATION	3.7814911692144705E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999992964153316	WITHOUT_CLASSIFICATION	7.035846683893126E-7	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999835380285165	WITHOUT_CLASSIFICATION	1.646197148348533E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999911520182817	WITHOUT_CLASSIFICATION	8.847981718327359E-6	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.999999096710416	WITHOUT_CLASSIFICATION	9.032895841158856E-7	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999857978669037	WITHOUT_CLASSIFICATION	1.420213309631932E-5	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999836959885721	WITHOUT_CLASSIFICATION	1.6304011427855375E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999911520182817	WITHOUT_CLASSIFICATION	8.847981718327359E-6	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9993224974973235	WITHOUT_CLASSIFICATION	6.77502502676486E-4	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999955237697992	WITHOUT_CLASSIFICATION	4.4762302008712385E-6	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999998154931158	WITHOUT_CLASSIFICATION	1.8450688420830556E-6	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999999712883678	WITHOUT_CLASSIFICATION	2.8711632154393702E-8	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999998300761255	WITHOUT_CLASSIFICATION	1.6992387456239997E-7	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999988343156113	WITHOUT_CLASSIFICATION	1.1656843887665792E-6	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999998882243095	WITHOUT_CLASSIFICATION	1.1177569049660141E-7	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9987967991016942	WITHOUT_CLASSIFICATION	0.0012032008983058375	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876157492954	WITHOUT_CLASSIFICATION	1.2384250704679807E-5	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999998775250383	WITHOUT_CLASSIFICATION	1.2247496175809598E-7	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997503190681	WITHOUT_CLASSIFICATION	2.4968093190402734E-7	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998030206075	WITHOUT_CLASSIFICATION	1.9697939249492664E-7	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999905157739256	WITHOUT_CLASSIFICATION	9.484226074453087E-6	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9996784055583842	WITHOUT_CLASSIFICATION	3.215944416158773E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999969605063027	WITHOUT_CLASSIFICATION	3.039493697348296E-6	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999998544669261	WITHOUT_CLASSIFICATION	1.455330739498997E-7	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999945886598	WITHOUT_CLASSIFICATION	5.411340159944997E-9	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999983737657593	WITHOUT_CLASSIFICATION	1.626234240755459E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999990410145503	WITHOUT_CLASSIFICATION	9.589854497164104E-7	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999983737657593	WITHOUT_CLASSIFICATION	1.626234240755459E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999714879816	WITHOUT_CLASSIFICATION	2.8512018338381755E-8	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999989956386	WITHOUT_CLASSIFICATION	1.0043613749590643E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999965353917437	WITHOUT_CLASSIFICATION	3.464608256176577E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999998527420696	WITHOUT_CLASSIFICATION	1.472579303102245E-7	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999945886598	WITHOUT_CLASSIFICATION	5.411340159944997E-9	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999990410145503	WITHOUT_CLASSIFICATION	9.589854497164104E-7	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999714879816	WITHOUT_CLASSIFICATION	2.8512018338381755E-8	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999940876551282	WITHOUT_CLASSIFICATION	5.912344871811086E-6	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999604836964822	WITHOUT_CLASSIFICATION	3.951630351776401E-5	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9992304681944056	WITHOUT_CLASSIFICATION	7.69531805594269E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9997864006180598	WITHOUT_CLASSIFICATION	2.1359938194016903E-4	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999790693240308	WITHOUT_CLASSIFICATION	2.093067596922266E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999969159993516	WITHOUT_CLASSIFICATION	3.084000648537064E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975397755722	WITHOUT_CLASSIFICATION	2.460224427778486E-6	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999989956386	WITHOUT_CLASSIFICATION	1.0043613749590643E-9	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999972720731	WITHOUT_CLASSIFICATION	2.7279269128463287E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.999980525071214	WITHOUT_CLASSIFICATION	1.9474928785921457E-5	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999939850822	WITHOUT_CLASSIFICATION	6.014917733320023E-9	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975397755722	WITHOUT_CLASSIFICATION	2.460224427778486E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978441197859	WITHOUT_CLASSIFICATION	2.1558802141393776E-6	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999765270380038	WITHOUT_CLASSIFICATION	2.3472961996261244E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975397755722	WITHOUT_CLASSIFICATION	2.460224427778486E-6	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999988713289362	WITHOUT_CLASSIFICATION	1.1286710638899926E-6	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999982672831231	WITHOUT_CLASSIFICATION	1.7327168768244578E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978441197859	WITHOUT_CLASSIFICATION	2.1558802141393776E-6	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999993283297494	WITHOUT_CLASSIFICATION	6.716702505946679E-6	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999699100855179	WITHOUT_CLASSIFICATION	3.008991448212602E-5	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999995221521586	WITHOUT_CLASSIFICATION	4.778478414269403E-7	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999949634378846	WITHOUT_CLASSIFICATION	5.036562115462591E-6	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999994305436076	WITHOUT_CLASSIFICATION	5.694563923667513E-7	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999915972284608	WITHOUT_CLASSIFICATION	8.402771539251294E-6	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999996076965569	WITHOUT_CLASSIFICATION	3.9230344307197375E-7	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999970777095754	WITHOUT_CLASSIFICATION	2.9222904246043474E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999654214399127	WITHOUT_CLASSIFICATION	3.457856008719002E-5	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999999926074761	WITHOUT_CLASSIFICATION	7.39252390245062E-8	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9991253124774496	WITHOUT_CLASSIFICATION	8.746875225504532E-4	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999977357782412	WITHOUT_CLASSIFICATION	2.264221758876672E-6	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.999936892200991	WITHOUT_CLASSIFICATION	6.310779900899745E-5	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999996267826371	WITHOUT_CLASSIFICATION	3.7321736282512075E-7	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999937598616506	WITHOUT_CLASSIFICATION	6.240138349350061E-6	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999999007149	WITHOUT_CLASSIFICATION	9.928514067656143E-11	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999968649259267	WITHOUT_CLASSIFICATION	3.1350740734585626E-6	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9997769620740372	WITHOUT_CLASSIFICATION	2.2303792596283176E-4	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9998576361324046	WITHOUT_CLASSIFICATION	1.4236386759530398E-4	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999999849809037	WITHOUT_CLASSIFICATION	1.5019096303495755E-7	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999987572139	WITHOUT_CLASSIFICATION	1.242786120609184E-9	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9991621868523248	WITHOUT_CLASSIFICATION	8.378131476751589E-4	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998065111695166	WITHOUT_CLASSIFICATION	1.9348883048339046E-4	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999339582753971	WITHOUT_CLASSIFICATION	6.60417246029604E-5	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999996275914725	WITHOUT_CLASSIFICATION	3.72408527369589E-7	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999952107409925	WITHOUT_CLASSIFICATION	4.789259007479676E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999819354648082	WITHOUT_CLASSIFICATION	1.8064535191837616E-5	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999990614851281	WITHOUT_CLASSIFICATION	9.385148718327678E-7	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9961916834004703	WITHOUT_CLASSIFICATION	0.0038083165995296733	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999921083922597	WITHOUT_CLASSIFICATION	7.891607740275285E-6	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.999988526457951	WITHOUT_CLASSIFICATION	1.1473542049045618E-5	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9997453843512697	WITHOUT_CLASSIFICATION	2.546156487302812E-4	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9998923354303746	WITHOUT_CLASSIFICATION	1.0766456962542717E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999994625302743	WITHOUT_CLASSIFICATION	5.374697257550437E-7	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999996017796752	WITHOUT_CLASSIFICATION	3.982203248199236E-7	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9999852741037791	WITHOUT_CLASSIFICATION	1.4725896220827559E-5	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999429459763358	WITHOUT_CLASSIFICATION	5.705402366409401E-5	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999999847170824	WITHOUT_CLASSIFICATION	1.5282917619042375E-8	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9964922719683582	WITHOUT_CLASSIFICATION	0.00350772803164185	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.99985329283974	WITHOUT_CLASSIFICATION	1.4670716025994322E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978441197859	WITHOUT_CLASSIFICATION	2.1558802141393776E-6	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998970640705679	WITHOUT_CLASSIFICATION	1.0293592943209176E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999479236229845	WITHOUT_CLASSIFICATION	5.2076377015521966E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999479236229845	WITHOUT_CLASSIFICATION	5.2076377015521966E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9992782178232649	WITHOUT_CLASSIFICATION	7.217821767352582E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999915972284608	WITHOUT_CLASSIFICATION	8.402771539251294E-6	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999696183644506	WITHOUT_CLASSIFICATION	3.0381635549407263E-5	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999883986882	WITHOUT_CLASSIFICATION	1.160131170255849E-8	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999998580116967	WITHOUT_CLASSIFICATION	1.4198830335064162E-7	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999313047341043	WITHOUT_CLASSIFICATION	6.869526589573206E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999594823627742	WITHOUT_CLASSIFICATION	4.0517637225818944E-5	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999807994318738	WITHOUT_CLASSIFICATION	1.920056812618108E-5	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999687824705	WITHOUT_CLASSIFICATION	3.121752944929544E-8	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999964275208	WITHOUT_CLASSIFICATION	3.5724793315308203E-9	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999435159275936	WITHOUT_CLASSIFICATION	5.6484072406546663E-5	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999998414235096	WITHOUT_CLASSIFICATION	1.5857649039559722E-7	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999980300838276	WITHOUT_CLASSIFICATION	1.969916172403256E-6	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999998958159035	WITHOUT_CLASSIFICATION	1.0418409653827094E-7	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999472071823	WITHOUT_CLASSIFICATION	5.279281776077924E-8	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999868264948074	WITHOUT_CLASSIFICATION	1.3173505192563314E-5	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999821757171	WITHOUT_CLASSIFICATION	1.7824282959305267E-8	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999969660426	WITHOUT_CLASSIFICATION	3.033957375870238E-9	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999924558995	WITHOUT_CLASSIFICATION	7.544100480520188E-9	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9998120436850351	WITHOUT_CLASSIFICATION	1.8795631496494348E-4	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.999999262951855	WITHOUT_CLASSIFICATION	7.370481450911396E-7	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9937793678132358	WITHOUT_CLASSIFICATION	0.0062206321867641756	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999019971154983	WITHOUT_CLASSIFICATION	9.800288450161574E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998495231308	WITHOUT_CLASSIFICATION	1.5047686907023976E-7	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9964922719683582	WITHOUT_CLASSIFICATION	0.00350772803164185	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999996301514801	WITHOUT_CLASSIFICATION	3.698485198619908E-7	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999998540784452	WITHOUT_CLASSIFICATION	1.4592155479718484E-7	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999980897842	WITHOUT_CLASSIFICATION	1.910215734466302E-9	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999975558192086	WITHOUT_CLASSIFICATION	2.444180791453437E-6	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9997036403549587	WITHOUT_CLASSIFICATION	2.9635964504136456E-4	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999506258794033	WITHOUT_CLASSIFICATION	4.9374120596731744E-5	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999978646949134	WITHOUT_CLASSIFICATION	2.1353050867694186E-6	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999998742632202	WITHOUT_CLASSIFICATION	1.2573677980581611E-7	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998797864326	WITHOUT_CLASSIFICATION	1.2021356745241984E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.999999750770944	WITHOUT_CLASSIFICATION	2.492290559402074E-7	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999993736313045	WITHOUT_CLASSIFICATION	6.263686955106385E-7	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999997849782231	WITHOUT_CLASSIFICATION	2.1502177694923082E-7	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999983485877857	WITHOUT_CLASSIFICATION	1.6514122142729212E-6	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999995104367249	WITHOUT_CLASSIFICATION	4.895632751998214E-7	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999577725115536	WITHOUT_CLASSIFICATION	4.222748844638606E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999577725115536	WITHOUT_CLASSIFICATION	4.222748844638606E-5	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999992526564865	WITHOUT_CLASSIFICATION	7.473435134736433E-7	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999429122923594	WITHOUT_CLASSIFICATION	5.708770764049694E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999998293368557	WITHOUT_CLASSIFICATION	1.706631443793884E-7	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999998293368557	WITHOUT_CLASSIFICATION	1.706631443793884E-7	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999700368335	WITHOUT_CLASSIFICATION	2.996316652618041E-8	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999820042618178	WITHOUT_CLASSIFICATION	1.7995738182227753E-5	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9656538240144473	WITHOUT_CLASSIFICATION	0.03434617598555279	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999976615678	WITHOUT_CLASSIFICATION	2.3384322332483047E-9	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999622974859	WITHOUT_CLASSIFICATION	3.7702514086977036E-8	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999999448624265	WITHOUT_CLASSIFICATION	5.5137573488406E-7	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999978367	WITHOUT_CLASSIFICATION	2.1632999273010487E-9	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999978367	WITHOUT_CLASSIFICATION	2.1632999273010487E-9	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999990000292285	WITHOUT_CLASSIFICATION	9.999707714739805E-7	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999977188455288	WITHOUT_CLASSIFICATION	2.2811544711530466E-6	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999983531096227	WITHOUT_CLASSIFICATION	1.6468903772836078E-6	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999998630675329	WITHOUT_CLASSIFICATION	1.369324671917251E-7	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999998630675329	WITHOUT_CLASSIFICATION	1.369324671917251E-7	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999999374545192	WITHOUT_CLASSIFICATION	6.254548078942447E-8	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999931417236085	WITHOUT_CLASSIFICATION	6.85827639146122E-6	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999998138343431	WITHOUT_CLASSIFICATION	1.8616565674949226E-7	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999998178371265	WITHOUT_CLASSIFICATION	1.821628734135926E-7	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999998918692157	WITHOUT_CLASSIFICATION	1.0813078433963734E-7	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.999999901059541	WITHOUT_CLASSIFICATION	9.89404589903187E-8	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999995573994969	WITHOUT_CLASSIFICATION	4.426005031572364E-7	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999981640774236	WITHOUT_CLASSIFICATION	1.8359225763877078E-6	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999999709468402	WITHOUT_CLASSIFICATION	2.9053159868770003E-8	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999998757721552	WITHOUT_CLASSIFICATION	1.2422784469065535E-7	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999997485115674	WITHOUT_CLASSIFICATION	2.514884326196327E-7	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9997667655256605	WITHOUT_CLASSIFICATION	2.332344743396359E-4	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9583710279593818	WITHOUT_CLASSIFICATION	0.04162897204061813	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999821909784091	WITHOUT_CLASSIFICATION	1.7809021590785686E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999976955660017	WITHOUT_CLASSIFICATION	2.3044339982691957E-6	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999933491379	WITHOUT_CLASSIFICATION	6.6508621764710065E-9	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999624901928269	WITHOUT_CLASSIFICATION	3.7509807173104366E-5	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999996977345132	WITHOUT_CLASSIFICATION	3.0226548680523225E-7	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999989807023919	WITHOUT_CLASSIFICATION	1.0192976080966813E-6	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999999644585859	WITHOUT_CLASSIFICATION	3.5541414095547097E-7	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999996054145046	WITHOUT_CLASSIFICATION	3.9458549534480245E-7	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999915216898311	WITHOUT_CLASSIFICATION	8.478310169023362E-6	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9997965985501037	WITHOUT_CLASSIFICATION	2.034014498963152E-4	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999976497431999	WITHOUT_CLASSIFICATION	2.3502568000722123E-6	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999971918713402	WITHOUT_CLASSIFICATION	2.80812865985225E-6	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999999988866232	WITHOUT_CLASSIFICATION	1.1133768568365296E-9	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999999517610727	WITHOUT_CLASSIFICATION	4.823892725567062E-8	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999857778926254	WITHOUT_CLASSIFICATION	1.4222107374571039E-5	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999198119334	WITHOUT_CLASSIFICATION	8.018806661347251E-8	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999929568202526	WITHOUT_CLASSIFICATION	7.043179747424227E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9940941180285404	WITHOUT_CLASSIFICATION	0.005905881971459531	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999991630818363	WITHOUT_CLASSIFICATION	8.369181637251808E-7	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999995770619281	WITHOUT_CLASSIFICATION	4.229380718368082E-7	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999730502776419	WITHOUT_CLASSIFICATION	2.6949722358006865E-5	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999971277578616	WITHOUT_CLASSIFICATION	2.8722421383552943E-6	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999759111368599	WITHOUT_CLASSIFICATION	2.4088863140122798E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.999927191085508	WITHOUT_CLASSIFICATION	7.280891449201224E-5	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999999986972906	WITHOUT_CLASSIFICATION	1.3027093816911238E-8	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999992473007862	WITHOUT_CLASSIFICATION	7.526992138062755E-6	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999931953073	WITHOUT_CLASSIFICATION	6.804692783088838E-9	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999998543952487	WITHOUT_CLASSIFICATION	1.4560475123851872E-7	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999989293603667	WITHOUT_CLASSIFICATION	1.0706396333429796E-6	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999987015929512	WITHOUT_CLASSIFICATION	1.2984070487498887E-6	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999970552895401	WITHOUT_CLASSIFICATION	2.944710459901511E-6	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999915084783391	WITHOUT_CLASSIFICATION	8.491521660883458E-6	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999997444129711	WITHOUT_CLASSIFICATION	2.555870288646819E-7	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999977406141249	WITHOUT_CLASSIFICATION	2.2593858750897533E-6	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999995293176527	WITHOUT_CLASSIFICATION	4.7068234739512644E-7	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999994263507979	WITHOUT_CLASSIFICATION	5.736492022311352E-7	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999051116744	WITHOUT_CLASSIFICATION	9.488832565711951E-8	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.999996656743929	WITHOUT_CLASSIFICATION	3.343256071027844E-6	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9933445647822777	WITHOUT_CLASSIFICATION	0.006655435217722233	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9962758438739818	WITHOUT_CLASSIFICATION	0.0037241561260182923	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999996789046928	WITHOUT_CLASSIFICATION	3.210953072466366E-7	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.999999566423952	WITHOUT_CLASSIFICATION	4.3357604803428663E-7	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999760183376792	WITHOUT_CLASSIFICATION	2.3981662320796704E-4	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999987984704093	WITHOUT_CLASSIFICATION	1.2015295906445233E-6	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999998253020151	WITHOUT_CLASSIFICATION	1.746979848219493E-7	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999663508795842	WITHOUT_CLASSIFICATION	3.364912041576666E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.999999772396059	WITHOUT_CLASSIFICATION	2.2760394098399749E-7	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999955837202165	WITHOUT_CLASSIFICATION	4.416279783500738E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999955837202165	WITHOUT_CLASSIFICATION	4.416279783500738E-6	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999999999329205	WITHOUT_CLASSIFICATION	6.707949982091552E-10	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999643256233515	WITHOUT_CLASSIFICATION	3.5674376648516396E-5	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999989213704475	WITHOUT_CLASSIFICATION	1.0786295525548438E-6	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999999997532618	WITHOUT_CLASSIFICATION	2.4673820226062705E-9	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999332731202	WITHOUT_CLASSIFICATION	6.672687989283094E-8	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9998975789555877	WITHOUT_CLASSIFICATION	1.024210444123249E-4	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999999775098	WITHOUT_CLASSIFICATION	2.249031648248125E-11	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999967345284992	WITHOUT_CLASSIFICATION	3.2654715007408653E-6	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999999879278936	WITHOUT_CLASSIFICATION	1.2072106507941825E-8	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999999560170718	WITHOUT_CLASSIFICATION	4.3982928243388235E-8	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999257363363	WITHOUT_CLASSIFICATION	7.426366360034894E-8	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999961604966474	WITHOUT_CLASSIFICATION	3.839503352590448E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998386597182	WITHOUT_CLASSIFICATION	1.6134028180195063E-7	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999919068240581	WITHOUT_CLASSIFICATION	8.093175941980681E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999668654006297	WITHOUT_CLASSIFICATION	3.313459937024054E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999668654006297	WITHOUT_CLASSIFICATION	3.313459937024054E-5	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999999732385	WITHOUT_CLASSIFICATION	2.6761546274128014E-11	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999855410528303	WITHOUT_CLASSIFICATION	1.445894716961888E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999998949927275	WITHOUT_CLASSIFICATION	1.0500727256669216E-7	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999389844191	WITHOUT_CLASSIFICATION	6.101558096738675E-8	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999993617171082	WITHOUT_CLASSIFICATION	6.382828917263307E-7	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993372421985	WITHOUT_CLASSIFICATION	6.627578015064236E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999900217015303	WITHOUT_CLASSIFICATION	9.97829846980303E-6	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9985773325509517	WITHOUT_CLASSIFICATION	0.0014226674490482375	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999901089083	WITHOUT_CLASSIFICATION	9.891091692032833E-9	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999791571011367	WITHOUT_CLASSIFICATION	2.0842898863243353E-5	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999978624866706	WITHOUT_CLASSIFICATION	2.137513329334715E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999325882007	WITHOUT_CLASSIFICATION	6.741179922277555E-8	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999975971906	WITHOUT_CLASSIFICATION	2.4028093555372187E-9	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999997698062559	WITHOUT_CLASSIFICATION	2.301937441293473E-7	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999994424071073	WITHOUT_CLASSIFICATION	5.575928927393798E-7	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999781189799	WITHOUT_CLASSIFICATION	2.188102004889315E-8	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999999130007915	WITHOUT_CLASSIFICATION	8.699920849626973E-7	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999999311585138	WITHOUT_CLASSIFICATION	6.884148620459445E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999036088382	WITHOUT_CLASSIFICATION	9.639116177500609E-8	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999998924851977	WITHOUT_CLASSIFICATION	1.0751480226243702E-7	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.999999983482279	WITHOUT_CLASSIFICATION	1.651772096162066E-8	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999995559939358	WITHOUT_CLASSIFICATION	4.440060642443504E-7	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999999556170326	WITHOUT_CLASSIFICATION	4.438296742383231E-8	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.999991343959254	WITHOUT_CLASSIFICATION	8.656040745937259E-6	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999935387326998	WITHOUT_CLASSIFICATION	6.461267300266084E-6	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999595946665407	WITHOUT_CLASSIFICATION	4.040533345920181E-5	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999948069050308	WITHOUT_CLASSIFICATION	5.19309496917801E-6	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9892154872379068	WITHOUT_CLASSIFICATION	0.010784512762093188	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999785804023102	WITHOUT_CLASSIFICATION	2.1419597689694598E-5	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999534433872	WITHOUT_CLASSIFICATION	4.65566127915758E-8	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999994661541586	WITHOUT_CLASSIFICATION	5.338458413995538E-7	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999996594564681	WITHOUT_CLASSIFICATION	3.4054353189558403E-7	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999971327763042	WITHOUT_CLASSIFICATION	2.8672236958803263E-6	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999769214139834	WITHOUT_CLASSIFICATION	2.307858601665147E-5	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9853897993344191	WITHOUT_CLASSIFICATION	0.014610200665580969	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998680377379	WITHOUT_CLASSIFICATION	1.3196226214351758E-7	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998183361788	WITHOUT_CLASSIFICATION	1.8166382110632393E-7	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999978960469	WITHOUT_CLASSIFICATION	2.103953079706202E-9	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999990183804868	WITHOUT_CLASSIFICATION	9.816195131472404E-7	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999626371616	WITHOUT_CLASSIFICATION	3.736283837689632E-8	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997566618701287	WITHOUT_CLASSIFICATION	2.433381298713202E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997566618701287	WITHOUT_CLASSIFICATION	2.433381298713202E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999038228684	WITHOUT_CLASSIFICATION	9.617713161135435E-8	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999997397841504	WITHOUT_CLASSIFICATION	2.6021584960288567E-7	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9994566634784355	WITHOUT_CLASSIFICATION	5.433365215645081E-4	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999976016039519	WITHOUT_CLASSIFICATION	2.398396047991051E-6	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999665036080627	WITHOUT_CLASSIFICATION	3.349639193719645E-5	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999995584362062	WITHOUT_CLASSIFICATION	4.415637937458078E-7	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.999665028907129	WITHOUT_CLASSIFICATION	3.3497109287096324E-4	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999977884300442	WITHOUT_CLASSIFICATION	2.211569955757072E-6	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999982310808597	WITHOUT_CLASSIFICATION	1.7689191403152742E-6	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997139797784	WITHOUT_CLASSIFICATION	2.860202216935266E-7	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997776813488	WITHOUT_CLASSIFICATION	2.2231865126747265E-7	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999953257426427	WITHOUT_CLASSIFICATION	4.674257357211085E-6	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999917146465526	WITHOUT_CLASSIFICATION	8.285353447365893E-6	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999994108331345	WITHOUT_CLASSIFICATION	5.891668655826165E-7	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9998801202866738	WITHOUT_CLASSIFICATION	1.1987971332613745E-4	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9984997964790221	WITHOUT_CLASSIFICATION	0.0015002035209778922	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999925981854	WITHOUT_CLASSIFICATION	7.401814535844632E-9	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999699929352	WITHOUT_CLASSIFICATION	3.0007064937126574E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9997022249256761	WITHOUT_CLASSIFICATION	2.9777507432389384E-4	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999989399683221	WITHOUT_CLASSIFICATION	1.0600316778436425E-6	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999998977412413	WITHOUT_CLASSIFICATION	1.022587586866014E-7	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999862416710812	WITHOUT_CLASSIFICATION	1.3758328918859229E-5	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999986619739272	WITHOUT_CLASSIFICATION	1.338026072813403E-6	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999677360049335	WITHOUT_CLASSIFICATION	3.226399506655882E-5	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999924429039807	WITHOUT_CLASSIFICATION	7.557096019257045E-6	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999552873385485	WITHOUT_CLASSIFICATION	4.471266145135441E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999895220673	WITHOUT_CLASSIFICATION	1.0477932811425129E-8	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999985094148661	WITHOUT_CLASSIFICATION	1.4905851339250262E-6	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999909403332148	WITHOUT_CLASSIFICATION	9.059666785238193E-6	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9947165348183975	WITHOUT_CLASSIFICATION	0.005283465181602473	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999872457749701	WITHOUT_CLASSIFICATION	1.2754225029948162E-5	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999833881889092	WITHOUT_CLASSIFICATION	1.6611811090823856E-5	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999978208468	WITHOUT_CLASSIFICATION	2.1791531286579755E-9	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.999999998744642	WITHOUT_CLASSIFICATION	1.2553580915446565E-9	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999996903286	WITHOUT_CLASSIFICATION	3.096714041355361E-10	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.99998984115201	WITHOUT_CLASSIFICATION	1.015884799015339E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999251818933	WITHOUT_CLASSIFICATION	7.481810679324004E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999556813394	WITHOUT_CLASSIFICATION	4.4318660641079E-8	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999974818518964	WITHOUT_CLASSIFICATION	2.5181481035730866E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999929731379015	WITHOUT_CLASSIFICATION	7.02686209857108E-6	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999745138140186	WITHOUT_CLASSIFICATION	2.5486185981446145E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999819555878	WITHOUT_CLASSIFICATION	1.8044412163697017E-8	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999468096736	WITHOUT_CLASSIFICATION	5.319032630137932E-8	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999999837776	WITHOUT_CLASSIFICATION	1.622232057716345E-11	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9996123360381384	WITHOUT_CLASSIFICATION	3.876639618616232E-4	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999994258660634	WITHOUT_CLASSIFICATION	5.741339365425533E-7	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999994578061453	WITHOUT_CLASSIFICATION	5.421938547682411E-7	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998386597182	WITHOUT_CLASSIFICATION	1.6134028180195063E-7	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999999003851	WITHOUT_CLASSIFICATION	9.961488111133445E-11	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999995445793	WITHOUT_CLASSIFICATION	4.5542072148828886E-10	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9998951858002652	WITHOUT_CLASSIFICATION	1.0481419973481232E-4	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9987055442832726	WITHOUT_CLASSIFICATION	0.0012944557167272818	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.999999994732616	WITHOUT_CLASSIFICATION	5.267384041772245E-9	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999496551863555	WITHOUT_CLASSIFICATION	5.0344813644552596E-5	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9740470233370648	WITHOUT_CLASSIFICATION	0.025952976662935088	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999843473056037	WITHOUT_CLASSIFICATION	1.5652694396338212E-5	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999995454674	WITHOUT_CLASSIFICATION	4.545327321377903E-10	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9998720334806034	WITHOUT_CLASSIFICATION	1.2796651939658095E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999940237203151	WITHOUT_CLASSIFICATION	5.976279684810361E-6	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999501900445	WITHOUT_CLASSIFICATION	4.980995550397815E-8	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999778883446	WITHOUT_CLASSIFICATION	2.211165537982154E-8	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999995698576908	WITHOUT_CLASSIFICATION	4.301423092693798E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981247224803	WITHOUT_CLASSIFICATION	1.875277519663258E-6	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998233377383712	WITHOUT_CLASSIFICATION	1.7666226162885227E-4	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999998532781483	WITHOUT_CLASSIFICATION	1.4672185165892016E-7	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999949874270495	WITHOUT_CLASSIFICATION	5.01257295051764E-6	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999996802449648	WITHOUT_CLASSIFICATION	3.197550352289014E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981247224803	WITHOUT_CLASSIFICATION	1.875277519663258E-6	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999989506577824	WITHOUT_CLASSIFICATION	1.0493422175984034E-6	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999990544562	WITHOUT_CLASSIFICATION	9.455438002805778E-10	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999554252049625	WITHOUT_CLASSIFICATION	4.4574795037530585E-5	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999925539109	WITHOUT_CLASSIFICATION	7.44608907662097E-9	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999946689225928	WITHOUT_CLASSIFICATION	5.331077407090043E-6	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999956593915	WITHOUT_CLASSIFICATION	4.34060853168282E-9	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.999999999690014	WITHOUT_CLASSIFICATION	3.0998611406065193E-10	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9998786523121512	WITHOUT_CLASSIFICATION	1.2134768784880302E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999947086564	WITHOUT_CLASSIFICATION	5.2913435292090076E-9	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999160111311091	WITHOUT_CLASSIFICATION	8.398886889084236E-5	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9979448236751723	WITHOUT_CLASSIFICATION	0.00205517632482756	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999940330554716	WITHOUT_CLASSIFICATION	5.966944528365107E-6	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999998870142719	WITHOUT_CLASSIFICATION	1.1298572806930706E-7	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9887859564681533	WITHOUT_CLASSIFICATION	0.011214043531846685	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999130729668938	WITHOUT_CLASSIFICATION	8.692703310629321E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998495231308	WITHOUT_CLASSIFICATION	1.5047686907023976E-7	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999998405282874	WITHOUT_CLASSIFICATION	1.5947171266890097E-7	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999886418804	WITHOUT_CLASSIFICATION	1.1358119662470675E-8	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9978326968704408	WITHOUT_CLASSIFICATION	0.0021673031295592485	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999840617206887	WITHOUT_CLASSIFICATION	1.5938279311411753E-5	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9996621699783506	WITHOUT_CLASSIFICATION	3.378300216494407E-4	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999995437074436	WITHOUT_CLASSIFICATION	4.5629255642816634E-7	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999989813827954	WITHOUT_CLASSIFICATION	1.0186172045103844E-6	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999926671767	WITHOUT_CLASSIFICATION	7.332823371561775E-9	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999998140439	WITHOUT_CLASSIFICATION	1.859561332899497E-10	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999998933760543	WITHOUT_CLASSIFICATION	1.0662394559265089E-7	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999594471981472	WITHOUT_CLASSIFICATION	4.055280185285029E-5	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999994807380514	WITHOUT_CLASSIFICATION	5.192619485318508E-7	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9573098954923911	WITHOUT_CLASSIFICATION	0.0426901045076089	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.5099057345868782	IMPLEMENTATION	0.49009426541312195	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999998111578653	WITHOUT_CLASSIFICATION	1.8884213467377106E-7	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998711662370461	WITHOUT_CLASSIFICATION	1.2883376295382888E-4	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999843314383358	WITHOUT_CLASSIFICATION	1.5668561664194703E-5	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999996694241733	WITHOUT_CLASSIFICATION	3.305758267194227E-7	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999993857219724	WITHOUT_CLASSIFICATION	6.142780275243174E-7	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999947505558	WITHOUT_CLASSIFICATION	5.249444134153704E-9	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999921911902	WITHOUT_CLASSIFICATION	7.808809933937199E-9	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.999999151960831	WITHOUT_CLASSIFICATION	8.480391690299178E-7	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999997858625	WITHOUT_CLASSIFICATION	2.1413761983046175E-10	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999997894833916	WITHOUT_CLASSIFICATION	2.1051660833965668E-7	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9969140035648377	WITHOUT_CLASSIFICATION	0.003085996435162322	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9969140035648377	WITHOUT_CLASSIFICATION	0.003085996435162322	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999964839949209	WITHOUT_CLASSIFICATION	3.5160050789318157E-6	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999996533662479	WITHOUT_CLASSIFICATION	3.4663375211217335E-7	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999997387740294	WITHOUT_CLASSIFICATION	2.6122597065896967E-7	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7313539609549891	IMPLEMENTATION	0.268646039045011	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999995568641866	WITHOUT_CLASSIFICATION	4.431358133777898E-7	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999995568641866	WITHOUT_CLASSIFICATION	4.431358133777898E-7	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999976076502911	WITHOUT_CLASSIFICATION	2.3923497088124607E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999889096233	WITHOUT_CLASSIFICATION	1.1090376605984681E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999921318456578	WITHOUT_CLASSIFICATION	7.868154342225185E-6	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999844802775998	WITHOUT_CLASSIFICATION	1.5519722400208163E-5	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999998642926892	WITHOUT_CLASSIFICATION	1.3570731086391598E-7	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999973803523868	WITHOUT_CLASSIFICATION	2.619647613081107E-6	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999990570475783	WITHOUT_CLASSIFICATION	9.429524217071208E-7	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999267034001	WITHOUT_CLASSIFICATION	7.329659986396029E-8	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999573441989	WITHOUT_CLASSIFICATION	4.2655801085344956E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998377532904	WITHOUT_CLASSIFICATION	1.6224670959764362E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998377532904	WITHOUT_CLASSIFICATION	1.6224670959764362E-7	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999969404064032	WITHOUT_CLASSIFICATION	3.059593596893239E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999991563244163	WITHOUT_CLASSIFICATION	8.436755837737899E-7	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999687510482	WITHOUT_CLASSIFICATION	3.124895172663559E-8	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9998915857286719	WITHOUT_CLASSIFICATION	1.084142713281982E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978441197859	WITHOUT_CLASSIFICATION	2.1558802141393776E-6	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.999996839535105	WITHOUT_CLASSIFICATION	3.1604648949958825E-6	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998767489023	WITHOUT_CLASSIFICATION	1.2325109762738249E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978441197859	WITHOUT_CLASSIFICATION	2.1558802141393776E-6	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.999996025532262	WITHOUT_CLASSIFICATION	3.974467738056862E-6	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999980236927419	WITHOUT_CLASSIFICATION	1.976307258105018E-6	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.999988664819767	WITHOUT_CLASSIFICATION	1.1335180232936857E-5	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.999999913784702	WITHOUT_CLASSIFICATION	8.621529799234223E-8	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999160111311091	WITHOUT_CLASSIFICATION	8.398886889084236E-5	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999999911558795	WITHOUT_CLASSIFICATION	8.844120515315176E-9	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999940831395413	WITHOUT_CLASSIFICATION	5.916860458771549E-6	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.99999896335294	WITHOUT_CLASSIFICATION	1.0366470599828556E-6	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999957610852499	WITHOUT_CLASSIFICATION	4.2389147500816715E-6	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999967084265625	WITHOUT_CLASSIFICATION	3.2915734375064144E-6	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999955364137584	WITHOUT_CLASSIFICATION	4.46358624169837E-6	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999998079897914	WITHOUT_CLASSIFICATION	1.9201020858629953E-7	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999956027633669	WITHOUT_CLASSIFICATION	4.397236633141463E-6	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999997324080646	WITHOUT_CLASSIFICATION	2.675919353924951E-7	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999692874958394	WITHOUT_CLASSIFICATION	3.071250416067296E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999692874958394	WITHOUT_CLASSIFICATION	3.071250416067296E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999911520182817	WITHOUT_CLASSIFICATION	8.847981718327359E-6	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9998607136810507	WITHOUT_CLASSIFICATION	1.3928631894937607E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998576161496626	WITHOUT_CLASSIFICATION	1.423838503374083E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9997503615225706	WITHOUT_CLASSIFICATION	2.4963847742947697E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999989573258917	WITHOUT_CLASSIFICATION	1.0426741082666389E-6	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999990207050854	WITHOUT_CLASSIFICATION	9.792949146465647E-7	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999969605063027	WITHOUT_CLASSIFICATION	3.039493697348296E-6	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999963483119	WITHOUT_CLASSIFICATION	3.651688022250793E-9	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999940876551282	WITHOUT_CLASSIFICATION	5.912344871811086E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9987275389741529	WITHOUT_CLASSIFICATION	0.001272461025847172	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975397755722	WITHOUT_CLASSIFICATION	2.460224427778486E-6	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9998078817578854	WITHOUT_CLASSIFICATION	1.921182421146333E-4	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9974643174031643	WITHOUT_CLASSIFICATION	0.002535682596835609	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999652210052	WITHOUT_CLASSIFICATION	3.477899477409007E-8	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999977356838	WITHOUT_CLASSIFICATION	2.264316218848779E-9	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999996047398352	WITHOUT_CLASSIFICATION	3.952601647956003E-7	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999998983972554	WITHOUT_CLASSIFICATION	1.0160274456222749E-7	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999987748826611	WITHOUT_CLASSIFICATION	1.2251173388754057E-6	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999594627571385	WITHOUT_CLASSIFICATION	4.0537242861439E-5	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999999996247	WITHOUT_CLASSIFICATION	3.752723514979662E-13	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999992794987	WITHOUT_CLASSIFICATION	7.205012287016401E-10	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999982134684964	WITHOUT_CLASSIFICATION	1.786531503542469E-6	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999998138343431	WITHOUT_CLASSIFICATION	1.8616565674949226E-7	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.99999999999966	WITHOUT_CLASSIFICATION	3.399594669155078E-13	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998803263881	WITHOUT_CLASSIFICATION	1.1967361187928297E-7	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998803263881	WITHOUT_CLASSIFICATION	1.1967361187928297E-7	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999706599405109	WITHOUT_CLASSIFICATION	2.9340059489059783E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9988444480937066	WITHOUT_CLASSIFICATION	0.0011555519062933445	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999968224200776	WITHOUT_CLASSIFICATION	3.177579922408868E-6	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999994107856591	WITHOUT_CLASSIFICATION	5.89214340940322E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997088994554	WITHOUT_CLASSIFICATION	2.9110054447228293E-7	IMPLEMENTATION
