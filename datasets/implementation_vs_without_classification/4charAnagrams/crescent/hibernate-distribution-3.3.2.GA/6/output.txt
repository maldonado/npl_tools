// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9996689938532043	WITHOUT_CLASSIFICATION	3.310061467956706E-4	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9996689938532043	WITHOUT_CLASSIFICATION	3.310061467956706E-4	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.7517914290526249	IMPLEMENTATION	0.24820857094737503	WITHOUT_CLASSIFICATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.5807980375609665	WITHOUT_CLASSIFICATION	0.41920196243903346	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9118537920791141	WITHOUT_CLASSIFICATION	0.08814620792088582	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.9992317101582974	IMPLEMENTATION	7.682898417027253E-4	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.8082575472570743	WITHOUT_CLASSIFICATION	0.19174245274292567	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.7186397201268245	IMPLEMENTATION	0.2813602798731755	WITHOUT_CLASSIFICATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.8970200295827025	IMPLEMENTATION	0.10297997041729744	WITHOUT_CLASSIFICATION
//TODO: native ids	IMPLEMENTATION	0.8893287261468676	IMPLEMENTATION	0.1106712738531323	WITHOUT_CLASSIFICATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.5550184763579095	IMPLEMENTATION	0.44498152364209065	WITHOUT_CLASSIFICATION
//TODO: handle property-ref	IMPLEMENTATION	0.9924765289644594	IMPLEMENTATION	0.0075234710355405795	WITHOUT_CLASSIFICATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9753627442398157	IMPLEMENTATION	0.0246372557601843	WITHOUT_CLASSIFICATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9753627442398157	IMPLEMENTATION	0.0246372557601843	WITHOUT_CLASSIFICATION
/**	IMPLEMENTATION	0.9949474778795805	WITHOUT_CLASSIFICATION	0.005052522120419517	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.8923429000016787	IMPLEMENTATION	0.10765709999832122	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9998163616405432	IMPLEMENTATION	1.8363835945677353E-4	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.6288418144947558	WITHOUT_CLASSIFICATION	0.3711581855052441	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999999963288878	WITHOUT_CLASSIFICATION	3.671112054173847E-9	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9991208643720627	IMPLEMENTATION	8.79135627937284E-4	WITHOUT_CLASSIFICATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.7821092406325532	IMPLEMENTATION	0.2178907593674468	WITHOUT_CLASSIFICATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9987266506148463	WITHOUT_CLASSIFICATION	0.0012733493851536262	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9837385650884501	IMPLEMENTATION	0.016261434911549775	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9036939836326153	IMPLEMENTATION	0.09630601636738474	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9036939836326153	IMPLEMENTATION	0.09630601636738474	WITHOUT_CLASSIFICATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.8021230771531651	IMPLEMENTATION	0.19787692284683486	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9852395153670307	IMPLEMENTATION	0.014760484632969358	WITHOUT_CLASSIFICATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9855903404740989	IMPLEMENTATION	0.014409659525901237	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9908972841607224	IMPLEMENTATION	0.009102715839277607	WITHOUT_CLASSIFICATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9924972262564614	IMPLEMENTATION	0.007502773743538614	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.972964996343846	IMPLEMENTATION	0.027035003656154025	WITHOUT_CLASSIFICATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9838850704250287	IMPLEMENTATION	0.0161149295749713	WITHOUT_CLASSIFICATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9980091065007638	WITHOUT_CLASSIFICATION	0.001990893499236144	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.6933203020559353	IMPLEMENTATION	0.30667969794406463	WITHOUT_CLASSIFICATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9989375270879327	IMPLEMENTATION	0.0010624729120673703	WITHOUT_CLASSIFICATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9531267115487	WITHOUT_CLASSIFICATION	0.046873288451300045	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.9911094737140084	IMPLEMENTATION	0.008890526285991702	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.7087198980001004	IMPLEMENTATION	0.2912801019998997	WITHOUT_CLASSIFICATION
//TODO: use these in methods above	IMPLEMENTATION	0.943970038246143	IMPLEMENTATION	0.05602996175385693	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.6241217345547552	IMPLEMENTATION	0.3758782654452449	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.6241217345547552	IMPLEMENTATION	0.3758782654452449	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.5190114968312574	IMPLEMENTATION	0.4809885031687426	WITHOUT_CLASSIFICATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9983096017550193	WITHOUT_CLASSIFICATION	0.0016903982449807265	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.8198997474814836	WITHOUT_CLASSIFICATION	0.18010025251851638	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9946953119874937	IMPLEMENTATION	0.005304688012506287	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9610646779695843	IMPLEMENTATION	0.038935322030415796	WITHOUT_CLASSIFICATION
//TODO: formulas ?	IMPLEMENTATION	0.5030738675623672	IMPLEMENTATION	0.4969261324376328	WITHOUT_CLASSIFICATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.529219968319857	IMPLEMENTATION	0.47078003168014304	WITHOUT_CLASSIFICATION
// todo : cache this sql...	IMPLEMENTATION	0.9998940071312831	WITHOUT_CLASSIFICATION	1.0599286871688824E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9706565893704439	IMPLEMENTATION	0.0293434106295562	WITHOUT_CLASSIFICATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.6752501973961516	IMPLEMENTATION	0.3247498026038485	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9963302504079293	IMPLEMENTATION	0.0036697495920705336	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9221198034759157	WITHOUT_CLASSIFICATION	0.07788019652408423	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.5285123593161045	WITHOUT_CLASSIFICATION	0.4714876406838955	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.533833825723288	WITHOUT_CLASSIFICATION	0.4661661742767122	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9933725700346595	IMPLEMENTATION	0.006627429965340587	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.533833825723288	WITHOUT_CLASSIFICATION	0.4661661742767122	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9995771656386007	IMPLEMENTATION	4.2283436139927257E-4	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9943913814358063	IMPLEMENTATION	0.0056086185641937535	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.533833825723288	WITHOUT_CLASSIFICATION	0.4661661742767122	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9987394587048921	WITHOUT_CLASSIFICATION	0.0012605412951078602	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9988804319446513	WITHOUT_CLASSIFICATION	0.0011195680553487764	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9996026915117634	IMPLEMENTATION	3.9730848823657744E-4	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.5573877093601322	IMPLEMENTATION	0.44261229063986773	WITHOUT_CLASSIFICATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999941062875972	WITHOUT_CLASSIFICATION	5.893712402816744E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999998215655801	WITHOUT_CLASSIFICATION	1.7843441989454218E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999998215655801	WITHOUT_CLASSIFICATION	1.7843441989454218E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999998215655801	WITHOUT_CLASSIFICATION	1.7843441989454218E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999998215655801	WITHOUT_CLASSIFICATION	1.7843441989454218E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999998215655801	WITHOUT_CLASSIFICATION	1.7843441989454218E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999998215655801	WITHOUT_CLASSIFICATION	1.7843441989454218E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999998215655801	WITHOUT_CLASSIFICATION	1.7843441989454218E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990518247389	WITHOUT_CLASSIFICATION	9.481752611314596E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990518247389	WITHOUT_CLASSIFICATION	9.481752611314596E-7	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999864327767237	WITHOUT_CLASSIFICATION	1.356722327628525E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999994448583142	WITHOUT_CLASSIFICATION	5.551416858224151E-7	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999992093165179	WITHOUT_CLASSIFICATION	7.906834820852402E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999987985861826	WITHOUT_CLASSIFICATION	1.2014138174540676E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999987985861826	WITHOUT_CLASSIFICATION	1.2014138174540676E-6	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999997935745205	WITHOUT_CLASSIFICATION	2.0642547953431803E-7	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999951017421165	WITHOUT_CLASSIFICATION	4.898257883623184E-6	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999769164577803	WITHOUT_CLASSIFICATION	2.308354221966746E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999969504967908	WITHOUT_CLASSIFICATION	3.0495032091348856E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999920505845182	WITHOUT_CLASSIFICATION	7.949415481833382E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999920505845182	WITHOUT_CLASSIFICATION	7.949415481833382E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999900509896271	WITHOUT_CLASSIFICATION	9.949010372794917E-6	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999321920798919	WITHOUT_CLASSIFICATION	6.78079201081205E-5	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999978283377403	WITHOUT_CLASSIFICATION	2.171662259679918E-6	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999612144297096	WITHOUT_CLASSIFICATION	3.878557029028635E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999999995186041	WITHOUT_CLASSIFICATION	4.813959041544857E-9	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999998637324915	WITHOUT_CLASSIFICATION	1.3626750845572763E-7	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999888864492149	WITHOUT_CLASSIFICATION	1.111355078512941E-5	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999985212649503	WITHOUT_CLASSIFICATION	1.478735049717649E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999793042239189	WITHOUT_CLASSIFICATION	2.0695776081186618E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9865130372761244	WITHOUT_CLASSIFICATION	0.013486962723875645	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999953852515376	WITHOUT_CLASSIFICATION	4.614748462326432E-6	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999985259622083	WITHOUT_CLASSIFICATION	1.4740377916371248E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999794920558	WITHOUT_CLASSIFICATION	2.0507944278600213E-8	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999978401003494	WITHOUT_CLASSIFICATION	2.1598996506183227E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999978401003494	WITHOUT_CLASSIFICATION	2.1598996506183227E-6	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999997344640164	WITHOUT_CLASSIFICATION	2.6553598361835445E-7	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999847500806635	WITHOUT_CLASSIFICATION	1.5249919336517228E-5	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999959370961667	WITHOUT_CLASSIFICATION	4.062903833279476E-6	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999998459886237	WITHOUT_CLASSIFICATION	1.540113763142128E-7	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999999507888399	WITHOUT_CLASSIFICATION	4.9211160014096634E-8	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9949474778795805	WITHOUT_CLASSIFICATION	0.005052522120419517	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9949474778795805	WITHOUT_CLASSIFICATION	0.005052522120419517	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999998985026806	WITHOUT_CLASSIFICATION	1.0149731946548341E-7	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999972867582869	WITHOUT_CLASSIFICATION	2.713241712969233E-6	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999997280433868	WITHOUT_CLASSIFICATION	2.719566131537107E-7	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999365057087369	WITHOUT_CLASSIFICATION	6.34942912630827E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999909289534427	WITHOUT_CLASSIFICATION	9.071046557293887E-6	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851303449883	WITHOUT_CLASSIFICATION	1.486965501171675E-5	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946172949942	WITHOUT_CLASSIFICATION	5.382705005777341E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999922540532624	WITHOUT_CLASSIFICATION	7.745946737599352E-6	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999632947684386	WITHOUT_CLASSIFICATION	3.670523156150429E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999922581596	WITHOUT_CLASSIFICATION	7.741840432659477E-9	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.999989629517647	WITHOUT_CLASSIFICATION	1.0370482352916265E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999632947684386	WITHOUT_CLASSIFICATION	3.670523156150429E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.999989629517647	WITHOUT_CLASSIFICATION	1.0370482352916265E-5	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999617539641156	WITHOUT_CLASSIFICATION	3.824603588435962E-5	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999999950094932	WITHOUT_CLASSIFICATION	4.9905068719688514E-9	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999995563542773	WITHOUT_CLASSIFICATION	4.4364572274179993E-7	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999546724263983	WITHOUT_CLASSIFICATION	4.5327573601729985E-5	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999995987646462	WITHOUT_CLASSIFICATION	4.0123535381342426E-7	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999979960052132	WITHOUT_CLASSIFICATION	2.0039947867893014E-6	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999828181341488	WITHOUT_CLASSIFICATION	1.7181865851178628E-5	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9983660832979242	WITHOUT_CLASSIFICATION	0.0016339167020757513	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999999726735715	WITHOUT_CLASSIFICATION	2.732642848935089E-7	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999710439793004	WITHOUT_CLASSIFICATION	2.895602069954963E-5	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999818065460124	WITHOUT_CLASSIFICATION	1.8193453987566836E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.99999786848934	WITHOUT_CLASSIFICATION	2.131510660005803E-6	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999952829619	WITHOUT_CLASSIFICATION	4.717038192318006E-9	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999820314844952	WITHOUT_CLASSIFICATION	1.7968515504896536E-5	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999968799272763	WITHOUT_CLASSIFICATION	3.1200727237218714E-6	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999999375618484	WITHOUT_CLASSIFICATION	6.243815159725287E-7	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999995947073989	WITHOUT_CLASSIFICATION	4.052926011103819E-7	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999618578158235	WITHOUT_CLASSIFICATION	3.8142184176505E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998477576963	WITHOUT_CLASSIFICATION	1.522423037267787E-7	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999996995244883	WITHOUT_CLASSIFICATION	3.004755117484031E-7	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999969724360983	WITHOUT_CLASSIFICATION	3.027563901830381E-6	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999733293246762	WITHOUT_CLASSIFICATION	2.6670675323870532E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999980647261423	WITHOUT_CLASSIFICATION	1.9352738576518175E-6	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999986205450325	WITHOUT_CLASSIFICATION	1.3794549674656347E-6	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.8377985799323685	WITHOUT_CLASSIFICATION	0.16220142006763144	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999994004192405	WITHOUT_CLASSIFICATION	5.995807594140818E-7	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999866626978631	WITHOUT_CLASSIFICATION	1.333730213691025E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9940929248343284	WITHOUT_CLASSIFICATION	0.005907075165671544	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999076658024	WITHOUT_CLASSIFICATION	9.233419760257328E-8	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999785289615	WITHOUT_CLASSIFICATION	2.1471038548472597E-8	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999989993869505	WITHOUT_CLASSIFICATION	1.0006130494948655E-6	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.999997573159968	WITHOUT_CLASSIFICATION	2.4268400320706956E-6	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999839124206513	WITHOUT_CLASSIFICATION	1.6087579348770564E-5	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999999994398639	WITHOUT_CLASSIFICATION	5.601361143018653E-9	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.999999756804509	WITHOUT_CLASSIFICATION	2.4319549103242083E-7	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999999497734	WITHOUT_CLASSIFICATION	5.022650498870349E-11	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999999994398639	WITHOUT_CLASSIFICATION	5.601361143018653E-9	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999993906401163	WITHOUT_CLASSIFICATION	6.093598836720936E-7	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9995865644717955	WITHOUT_CLASSIFICATION	4.13435528204459E-4	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999979681677769	WITHOUT_CLASSIFICATION	2.0318322231776396E-6	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999994536994568	WITHOUT_CLASSIFICATION	5.463005433238024E-7	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999989638848967	WITHOUT_CLASSIFICATION	1.0361151033042618E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999783224882	WITHOUT_CLASSIFICATION	2.167751176749608E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999783224882	WITHOUT_CLASSIFICATION	2.167751176749608E-8	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999827079624917	WITHOUT_CLASSIFICATION	1.7292037508345937E-5	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999999829745847	WITHOUT_CLASSIFICATION	1.702541530342459E-7	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.999962934613059	WITHOUT_CLASSIFICATION	3.706538694107327E-5	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999973917525	WITHOUT_CLASSIFICATION	2.608247422498619E-9	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999996085937691	WITHOUT_CLASSIFICATION	3.9140623086532485E-7	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999916719336567	WITHOUT_CLASSIFICATION	8.328066343333127E-6	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999966326417832	WITHOUT_CLASSIFICATION	3.367358216729102E-6	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999950163256088	WITHOUT_CLASSIFICATION	4.983674391135518E-6	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999986964896792	WITHOUT_CLASSIFICATION	1.3035103208564975E-6	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999953283011	WITHOUT_CLASSIFICATION	4.671698909298195E-9	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998424762286	WITHOUT_CLASSIFICATION	1.5752377133245688E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998424762286	WITHOUT_CLASSIFICATION	1.5752377133245688E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999976884644648	WITHOUT_CLASSIFICATION	2.311535535329918E-6	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999994982155878	WITHOUT_CLASSIFICATION	5.017844122209266E-7	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999962161529304	WITHOUT_CLASSIFICATION	3.7838470696690337E-6	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998424762286	WITHOUT_CLASSIFICATION	1.5752377133245688E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999976884644648	WITHOUT_CLASSIFICATION	2.311535535329918E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999976884644648	WITHOUT_CLASSIFICATION	2.311535535329918E-6	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.999998133711848	WITHOUT_CLASSIFICATION	1.8662881520446734E-6	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999946835775636	WITHOUT_CLASSIFICATION	5.316422436451318E-6	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999346646105	WITHOUT_CLASSIFICATION	6.5335389470461E-8	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999880905434	WITHOUT_CLASSIFICATION	1.190945675579427E-8	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999824289719964	WITHOUT_CLASSIFICATION	1.757102800353675E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999824289719964	WITHOUT_CLASSIFICATION	1.757102800353675E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998791633440127	WITHOUT_CLASSIFICATION	1.2083665598726854E-4	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999993928493724	WITHOUT_CLASSIFICATION	6.071506275529788E-7	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999998687311796	WITHOUT_CLASSIFICATION	1.3126882041647153E-7	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999993102837176	WITHOUT_CLASSIFICATION	6.897162824657967E-7	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999993102837176	WITHOUT_CLASSIFICATION	6.897162824657967E-7	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999993070342325	WITHOUT_CLASSIFICATION	6.929657674181335E-7	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999936927994929	WITHOUT_CLASSIFICATION	6.307200507146944E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999998304227746	WITHOUT_CLASSIFICATION	1.6957722549157428E-7	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999896538497642	WITHOUT_CLASSIFICATION	1.0346150235684935E-5	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999999904834114	WITHOUT_CLASSIFICATION	9.516588662890361E-9	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999998646290162	WITHOUT_CLASSIFICATION	1.353709838027099E-7	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999305104828988	WITHOUT_CLASSIFICATION	6.948951710115317E-5	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999851425667289	WITHOUT_CLASSIFICATION	1.4857433271055894E-5	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999813516917752	WITHOUT_CLASSIFICATION	1.8648308224867804E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999998304227746	WITHOUT_CLASSIFICATION	1.6957722549157428E-7	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9999895067029773	WITHOUT_CLASSIFICATION	1.0493297022741288E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999173426541507	WITHOUT_CLASSIFICATION	8.265734584938035E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999173426541507	WITHOUT_CLASSIFICATION	8.265734584938035E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999918713735	WITHOUT_CLASSIFICATION	8.128626537802695E-9	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999947645858909	WITHOUT_CLASSIFICATION	5.23541410906773E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999940034011698	WITHOUT_CLASSIFICATION	5.996598830194101E-6	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999623851138254	WITHOUT_CLASSIFICATION	3.761488617452595E-5	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999732913665293	WITHOUT_CLASSIFICATION	2.6708633470583564E-5	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9999643166222677	WITHOUT_CLASSIFICATION	3.5683377732205354E-5	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9999824022552081	WITHOUT_CLASSIFICATION	1.759774479188326E-5	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999166967378446	WITHOUT_CLASSIFICATION	8.33032621554952E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999561463165	WITHOUT_CLASSIFICATION	4.3853683501485074E-8	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999561463165	WITHOUT_CLASSIFICATION	4.3853683501485074E-8	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999965264089735	WITHOUT_CLASSIFICATION	3.4735910265481997E-6	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999941062875972	WITHOUT_CLASSIFICATION	5.893712402816744E-5	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999996051245185	WITHOUT_CLASSIFICATION	3.9487548159110826E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999998215655801	WITHOUT_CLASSIFICATION	1.7843441989454218E-6	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999994565613208	WITHOUT_CLASSIFICATION	5.434386792133024E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990518247389	WITHOUT_CLASSIFICATION	9.481752611314596E-7	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999996850832518	WITHOUT_CLASSIFICATION	3.1491674823903225E-7	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999991344732462	WITHOUT_CLASSIFICATION	8.655267537758918E-7	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.999999832089819	WITHOUT_CLASSIFICATION	1.6791018096789385E-7	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.999999361301568	WITHOUT_CLASSIFICATION	6.386984320954004E-7	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999997942539016	WITHOUT_CLASSIFICATION	2.0574609822876942E-7	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999919229124998	WITHOUT_CLASSIFICATION	8.077087500125618E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999986788081048	WITHOUT_CLASSIFICATION	1.321191895314038E-6	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.999999250139019	WITHOUT_CLASSIFICATION	7.49860980890534E-7	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999994448583142	WITHOUT_CLASSIFICATION	5.551416858224151E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996887176721	WITHOUT_CLASSIFICATION	3.112823279089281E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996887176721	WITHOUT_CLASSIFICATION	3.112823279089281E-7	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999993578130396	WITHOUT_CLASSIFICATION	6.421869604396215E-7	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9995422579201052	WITHOUT_CLASSIFICATION	4.577420798948049E-4	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999981713985265	WITHOUT_CLASSIFICATION	1.8286014734171463E-6	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999995799863625	WITHOUT_CLASSIFICATION	4.20013637513514E-7	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.999999661337603	WITHOUT_CLASSIFICATION	3.386623970119024E-7	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999988600106673	WITHOUT_CLASSIFICATION	1.1399893326972277E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999987985861826	WITHOUT_CLASSIFICATION	1.2014138174540676E-6	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999666083363953	WITHOUT_CLASSIFICATION	3.339166360468722E-5	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999993370030202	WITHOUT_CLASSIFICATION	6.629969798621381E-7	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999992384404223	WITHOUT_CLASSIFICATION	7.615595776907544E-7	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999997311996865	WITHOUT_CLASSIFICATION	2.6880031341682237E-7	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999920966117414	WITHOUT_CLASSIFICATION	7.903388258542614E-6	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.999987190907328	WITHOUT_CLASSIFICATION	1.2809092672073356E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999954084491894	WITHOUT_CLASSIFICATION	4.591550810508476E-6	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999991139980581	WITHOUT_CLASSIFICATION	8.860019418262322E-7	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9998798721659032	WITHOUT_CLASSIFICATION	1.2012783409672466E-4	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999975433793535	WITHOUT_CLASSIFICATION	2.4566206465141728E-6	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999517087543902	WITHOUT_CLASSIFICATION	4.8291245609784236E-5	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999347934679057	WITHOUT_CLASSIFICATION	6.520653209430653E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999998215655801	WITHOUT_CLASSIFICATION	1.7843441989454218E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999998215655801	WITHOUT_CLASSIFICATION	1.7843441989454218E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990518247389	WITHOUT_CLASSIFICATION	9.481752611314596E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990518247389	WITHOUT_CLASSIFICATION	9.481752611314596E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999986788081048	WITHOUT_CLASSIFICATION	1.321191895314038E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996887176721	WITHOUT_CLASSIFICATION	3.112823279089281E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999954084491894	WITHOUT_CLASSIFICATION	4.591550810508476E-6	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999997935745205	WITHOUT_CLASSIFICATION	2.0642547953431803E-7	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999938315380299	WITHOUT_CLASSIFICATION	6.168461970045635E-6	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999906423479038	WITHOUT_CLASSIFICATION	9.357652096252562E-6	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999603193509748	WITHOUT_CLASSIFICATION	3.968064902511307E-5	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999975147534043	WITHOUT_CLASSIFICATION	2.48524659565125E-6	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999072525424	WITHOUT_CLASSIFICATION	9.274745765089655E-8	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999995628240432	WITHOUT_CLASSIFICATION	4.371759567210957E-7	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999928773121514	WITHOUT_CLASSIFICATION	7.122687848705166E-6	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9998918633207786	WITHOUT_CLASSIFICATION	1.0813667922142968E-4	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999902641537489	WITHOUT_CLASSIFICATION	9.735846251019266E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999911716495448	WITHOUT_CLASSIFICATION	8.828350455176949E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999911716495448	WITHOUT_CLASSIFICATION	8.828350455176949E-6	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999724082773	WITHOUT_CLASSIFICATION	2.7591722573022074E-8	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999922015606607	WITHOUT_CLASSIFICATION	7.79843933919608E-6	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999837890310682	WITHOUT_CLASSIFICATION	1.621096893173563E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999991515037346	WITHOUT_CLASSIFICATION	8.484962654820026E-7	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999728359664	WITHOUT_CLASSIFICATION	2.7164033592964477E-8	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9998883299502632	WITHOUT_CLASSIFICATION	1.1167004973677998E-4	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999989943231151	WITHOUT_CLASSIFICATION	1.0056768848532984E-6	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999951017421165	WITHOUT_CLASSIFICATION	4.898257883623184E-6	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999920424105784	WITHOUT_CLASSIFICATION	7.957589421617154E-6	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.999999359868004	WITHOUT_CLASSIFICATION	6.401319959971803E-7	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.999999359868004	WITHOUT_CLASSIFICATION	6.401319959971803E-7	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999998162216555	WITHOUT_CLASSIFICATION	1.8377834454759592E-7	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999723262332466	WITHOUT_CLASSIFICATION	2.767376675340127E-5	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999988360164771	WITHOUT_CLASSIFICATION	1.1639835228762608E-6	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.999999351381112	WITHOUT_CLASSIFICATION	6.486188879451921E-7	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999982304525793	WITHOUT_CLASSIFICATION	1.7695474207765226E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990518247389	WITHOUT_CLASSIFICATION	9.481752611314596E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999986788081048	WITHOUT_CLASSIFICATION	1.321191895314038E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999994448583142	WITHOUT_CLASSIFICATION	5.551416858224151E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999954084491894	WITHOUT_CLASSIFICATION	4.591550810508476E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999954084491894	WITHOUT_CLASSIFICATION	4.591550810508476E-6	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999971056715994	WITHOUT_CLASSIFICATION	2.894328400627849E-6	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999971056715994	WITHOUT_CLASSIFICATION	2.894328400627849E-6	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999932653575273	WITHOUT_CLASSIFICATION	6.734642472742247E-6	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999977496844097	WITHOUT_CLASSIFICATION	2.2503155904120293E-6	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999977496844097	WITHOUT_CLASSIFICATION	2.2503155904120293E-6	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999956657992373	WITHOUT_CLASSIFICATION	4.334200762700904E-6	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999987273539017	WITHOUT_CLASSIFICATION	1.2726460983694775E-6	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999997147446874	WITHOUT_CLASSIFICATION	2.8525531256553493E-7	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999959949012224	WITHOUT_CLASSIFICATION	4.005098777586276E-6	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999988384544177	WITHOUT_CLASSIFICATION	1.161545582173843E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999969504967908	WITHOUT_CLASSIFICATION	3.0495032091348856E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999969504967908	WITHOUT_CLASSIFICATION	3.0495032091348856E-6	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9998688805954701	WITHOUT_CLASSIFICATION	1.311194045300038E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999707881470781	WITHOUT_CLASSIFICATION	2.921185292197196E-5	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999995672344991	WITHOUT_CLASSIFICATION	4.327655008739525E-7	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999941597540194	WITHOUT_CLASSIFICATION	5.840245980646824E-6	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999998464779188	WITHOUT_CLASSIFICATION	1.5352208109690032E-7	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.999998569320477	WITHOUT_CLASSIFICATION	1.4306795229433401E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999920505845182	WITHOUT_CLASSIFICATION	7.949415481833382E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999982384684999	WITHOUT_CLASSIFICATION	1.7615315001898426E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999982384684999	WITHOUT_CLASSIFICATION	1.7615315001898426E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999900509896271	WITHOUT_CLASSIFICATION	9.949010372794917E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999900509896271	WITHOUT_CLASSIFICATION	9.949010372794917E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999741469980946	WITHOUT_CLASSIFICATION	2.5853001905266392E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999741469980946	WITHOUT_CLASSIFICATION	2.5853001905266392E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999828072981	WITHOUT_CLASSIFICATION	1.719270190710622E-8	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999828072981	WITHOUT_CLASSIFICATION	1.719270190710622E-8	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999969504967908	WITHOUT_CLASSIFICATION	3.0495032091348856E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999920505845182	WITHOUT_CLASSIFICATION	7.949415481833382E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999982384684999	WITHOUT_CLASSIFICATION	1.7615315001898426E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999982384684999	WITHOUT_CLASSIFICATION	1.7615315001898426E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999900509896271	WITHOUT_CLASSIFICATION	9.949010372794917E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999741469980946	WITHOUT_CLASSIFICATION	2.5853001905266392E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999741469980946	WITHOUT_CLASSIFICATION	2.5853001905266392E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999828072981	WITHOUT_CLASSIFICATION	1.719270190710622E-8	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999572649026209	WITHOUT_CLASSIFICATION	4.273509737915003E-5	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999985150433776	WITHOUT_CLASSIFICATION	1.4849566224223996E-6	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9998905640465798	WITHOUT_CLASSIFICATION	1.0943595342015364E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999939816574817	WITHOUT_CLASSIFICATION	6.018342518294685E-5	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999591536796913	WITHOUT_CLASSIFICATION	4.084632030869549E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999534859713328	WITHOUT_CLASSIFICATION	4.65140286672435E-5	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999999923381831	WITHOUT_CLASSIFICATION	7.661816896210746E-8	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999995932814246	WITHOUT_CLASSIFICATION	4.0671857549436167E-7	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999972841618564	WITHOUT_CLASSIFICATION	2.71583814355587E-6	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.999999488717723	WITHOUT_CLASSIFICATION	5.112822768539977E-7	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999983233927885	WITHOUT_CLASSIFICATION	1.6766072115897416E-6	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999976687141571	WITHOUT_CLASSIFICATION	2.331285842959087E-6	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999827079624917	WITHOUT_CLASSIFICATION	1.7292037508345937E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999534859713328	WITHOUT_CLASSIFICATION	4.65140286672435E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998863064563996	WITHOUT_CLASSIFICATION	1.1369354360033212E-4	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998863064563996	WITHOUT_CLASSIFICATION	1.1369354360033212E-4	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999999800277084	WITHOUT_CLASSIFICATION	1.9972291687484017E-8	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999943212698085	WITHOUT_CLASSIFICATION	5.678730191503587E-6	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999943212698085	WITHOUT_CLASSIFICATION	5.678730191503587E-6	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999917707083418	WITHOUT_CLASSIFICATION	8.22929165824704E-6	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999957139633078	WITHOUT_CLASSIFICATION	4.286036692304782E-6	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999998655575835	WITHOUT_CLASSIFICATION	1.3444241650018273E-7	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9997617119145354	WITHOUT_CLASSIFICATION	2.3828808546443159E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9997617119145354	WITHOUT_CLASSIFICATION	2.3828808546443159E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999999995186041	WITHOUT_CLASSIFICATION	4.813959041544857E-9	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999942955247	WITHOUT_CLASSIFICATION	5.7044753300630144E-9	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999942955247	WITHOUT_CLASSIFICATION	5.7044753300630144E-9	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999996843449415	WITHOUT_CLASSIFICATION	3.156550585956152E-7	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999142944687	WITHOUT_CLASSIFICATION	8.570553136582132E-8	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999404412592	WITHOUT_CLASSIFICATION	5.95587407536382E-8	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999941518831501	WITHOUT_CLASSIFICATION	5.848116849856488E-6	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999993215197461	WITHOUT_CLASSIFICATION	6.784802539560091E-7	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999992719050156	WITHOUT_CLASSIFICATION	7.280949844797896E-7	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999998637324915	WITHOUT_CLASSIFICATION	1.3626750845572763E-7	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999988594885566	WITHOUT_CLASSIFICATION	1.140511443386652E-6	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.6124033755084733	IMPLEMENTATION	0.3875966244915266	WITHOUT_CLASSIFICATION
// ID	WITHOUT_CLASSIFICATION	0.9999936787768133	WITHOUT_CLASSIFICATION	6.321223186601959E-6	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999937747063026	WITHOUT_CLASSIFICATION	6.225293697374093E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999793042239189	WITHOUT_CLASSIFICATION	2.0695776081186618E-5	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999996191757641	WITHOUT_CLASSIFICATION	3.8082423581280027E-7	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999998169250575	WITHOUT_CLASSIFICATION	1.8307494250235665E-7	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999886648585025	WITHOUT_CLASSIFICATION	1.1335141497499767E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999793042239189	WITHOUT_CLASSIFICATION	2.0695776081186618E-5	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999998839333019	WITHOUT_CLASSIFICATION	1.160666982362063E-7	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999997580596315	WITHOUT_CLASSIFICATION	2.4194036859488783E-7	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999917403474811	WITHOUT_CLASSIFICATION	8.259652518840339E-6	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999956585156429	WITHOUT_CLASSIFICATION	4.341484357087635E-6	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999970690165082	WITHOUT_CLASSIFICATION	2.930983491736171E-6	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999950933514778	WITHOUT_CLASSIFICATION	4.906648522064806E-6	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999974239836965	WITHOUT_CLASSIFICATION	2.5760163035477634E-6	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999985259622083	WITHOUT_CLASSIFICATION	1.4740377916371248E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999998668171704	WITHOUT_CLASSIFICATION	1.3318282960631137E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999794920558	WITHOUT_CLASSIFICATION	2.0507944278600213E-8	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999988699558312	WITHOUT_CLASSIFICATION	1.1300441687489922E-6	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999989325523634	WITHOUT_CLASSIFICATION	1.067447636630622E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999987505055485	WITHOUT_CLASSIFICATION	1.2494944515226305E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999998637324915	WITHOUT_CLASSIFICATION	1.3626750845572763E-7	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999998668171704	WITHOUT_CLASSIFICATION	1.3318282960631137E-6	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999988699558312	WITHOUT_CLASSIFICATION	1.1300441687489922E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999987505055485	WITHOUT_CLASSIFICATION	1.2494944515226305E-6	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999996116857567	WITHOUT_CLASSIFICATION	3.883142432960546E-7	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999777807155975	WITHOUT_CLASSIFICATION	2.221928440246306E-5	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999997683212664	WITHOUT_CLASSIFICATION	2.3167873348742715E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999978401003494	WITHOUT_CLASSIFICATION	2.1598996506183227E-6	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999992898722841	WITHOUT_CLASSIFICATION	7.101277158491451E-7	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999979200493442	WITHOUT_CLASSIFICATION	2.079950655727203E-6	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999962376506052	WITHOUT_CLASSIFICATION	3.7623493947744204E-6	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999993210461028	WITHOUT_CLASSIFICATION	6.789538971168358E-7	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999968509555301	WITHOUT_CLASSIFICATION	3.149044469728264E-6	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999997980421133	WITHOUT_CLASSIFICATION	2.01957886746075E-7	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999685584676	WITHOUT_CLASSIFICATION	3.144153241037937E-8	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999968175570401	WITHOUT_CLASSIFICATION	3.1824429599960297E-6	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.999999390905064	WITHOUT_CLASSIFICATION	6.090949360723668E-7	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998928168243	WITHOUT_CLASSIFICATION	1.0718317562855835E-7	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999972150588402	WITHOUT_CLASSIFICATION	2.7849411597892337E-6	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999972223751878	WITHOUT_CLASSIFICATION	2.7776248121687854E-6	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999847500806635	WITHOUT_CLASSIFICATION	1.5249919336517228E-5	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.99999729188111	WITHOUT_CLASSIFICATION	2.7081188898950925E-6	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999947052256455	WITHOUT_CLASSIFICATION	5.294774354538059E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999998668171704	WITHOUT_CLASSIFICATION	1.3318282960631137E-6	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999989413179338	WITHOUT_CLASSIFICATION	1.0586820661690558E-6	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.999997586807217	WITHOUT_CLASSIFICATION	2.4131927831589633E-6	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999982087921626	WITHOUT_CLASSIFICATION	1.7912078372840479E-6	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.999847185230143	WITHOUT_CLASSIFICATION	1.528147698569404E-4	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999875118876558	WITHOUT_CLASSIFICATION	1.2488112344153089E-5	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999998918567365	WITHOUT_CLASSIFICATION	1.0814326341570658E-7	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999998396153111	WITHOUT_CLASSIFICATION	1.603846888268367E-7	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999713466198	WITHOUT_CLASSIFICATION	2.8653380220258067E-8	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999710523943076	WITHOUT_CLASSIFICATION	2.894760569247877E-5	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999948276842108	WITHOUT_CLASSIFICATION	5.172315789218069E-6	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999950042074616	WITHOUT_CLASSIFICATION	4.9957925384020174E-6	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999938362548868	WITHOUT_CLASSIFICATION	6.1637451131975954E-6	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999975548373689	WITHOUT_CLASSIFICATION	2.4451626311711286E-6	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999998459886237	WITHOUT_CLASSIFICATION	1.540113763142128E-7	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999921716839848	WITHOUT_CLASSIFICATION	7.82831601523443E-6	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9994726627631616	WITHOUT_CLASSIFICATION	5.273372368382893E-4	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9999946092117538	WITHOUT_CLASSIFICATION	5.390788246268657E-6	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999957465512744	WITHOUT_CLASSIFICATION	4.253448725543444E-6	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999939927343909	WITHOUT_CLASSIFICATION	6.007265609070624E-6	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999980608193307	WITHOUT_CLASSIFICATION	1.9391806693395553E-6	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999906144961	WITHOUT_CLASSIFICATION	9.385503971252955E-9	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999990454200627	WITHOUT_CLASSIFICATION	9.545799373517543E-7	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999907902372233	WITHOUT_CLASSIFICATION	9.209762776795405E-6	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.99999790620614	WITHOUT_CLASSIFICATION	2.09379385988319E-6	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999880663576133	WITHOUT_CLASSIFICATION	1.1933642386789066E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999880663576133	WITHOUT_CLASSIFICATION	1.1933642386789066E-5	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999092699476114	WITHOUT_CLASSIFICATION	9.073005238863929E-5	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9998829648495877	WITHOUT_CLASSIFICATION	1.1703515041221615E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999990010836929	WITHOUT_CLASSIFICATION	9.98916307112878E-7	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999988460488783	WITHOUT_CLASSIFICATION	1.1539511216162841E-6	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999997956563025	WITHOUT_CLASSIFICATION	2.0434369749899874E-7	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999999229857147	WITHOUT_CLASSIFICATION	7.701428527294786E-8	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999989383102138	WITHOUT_CLASSIFICATION	1.0616897862739194E-6	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999999960028683	WITHOUT_CLASSIFICATION	3.997131737277501E-9	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9997938592497394	WITHOUT_CLASSIFICATION	2.0614075026057532E-4	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999827810809582	WITHOUT_CLASSIFICATION	1.721891904177637E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999951630455405	WITHOUT_CLASSIFICATION	4.836954459547136E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999865783452109	WITHOUT_CLASSIFICATION	1.3421654789183407E-5	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999999762170247	WITHOUT_CLASSIFICATION	2.3782975233993928E-8	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999994139635074	WITHOUT_CLASSIFICATION	5.860364925027225E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998124176553	WITHOUT_CLASSIFICATION	1.8758234458913645E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998638963759	WITHOUT_CLASSIFICATION	1.3610362422849293E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999997415931732	WITHOUT_CLASSIFICATION	2.5840682679670467E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999949325685	WITHOUT_CLASSIFICATION	5.067431492617179E-9	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999998020632636	WITHOUT_CLASSIFICATION	1.979367363794881E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999438023473715	WITHOUT_CLASSIFICATION	5.6197652628504574E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999931815840669	WITHOUT_CLASSIFICATION	6.818415933108069E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999931815840669	WITHOUT_CLASSIFICATION	6.818415933108069E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999990906773334	WITHOUT_CLASSIFICATION	9.093226665762306E-7	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999990906773334	WITHOUT_CLASSIFICATION	9.093226665762306E-7	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999907902372233	WITHOUT_CLASSIFICATION	9.209762776795405E-6	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999975546737429	WITHOUT_CLASSIFICATION	2.4453262570952974E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9915045981815207	WITHOUT_CLASSIFICATION	0.0084954018184793	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999733967637725	WITHOUT_CLASSIFICATION	2.660323622748336E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999965264089735	WITHOUT_CLASSIFICATION	3.4735910265481997E-6	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9915045981815207	WITHOUT_CLASSIFICATION	0.0084954018184793	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999733967637725	WITHOUT_CLASSIFICATION	2.660323622748336E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999894516366743	WITHOUT_CLASSIFICATION	1.0548363325579334E-5	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999946338942	WITHOUT_CLASSIFICATION	5.366105693713488E-9	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999996857018921	WITHOUT_CLASSIFICATION	3.1429810777458576E-7	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9994196466125028	WITHOUT_CLASSIFICATION	5.803533874971098E-4	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999828261902781	WITHOUT_CLASSIFICATION	1.7173809721961773E-5	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999952285329466	WITHOUT_CLASSIFICATION	4.771467053392227E-6	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999810335267963	WITHOUT_CLASSIFICATION	1.8966473203667885E-5	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.999908673957067	WITHOUT_CLASSIFICATION	9.132604293305739E-5	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.999992500806623	WITHOUT_CLASSIFICATION	7.499193376827879E-6	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999205299945	WITHOUT_CLASSIFICATION	7.947000548792323E-8	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999460744241355	WITHOUT_CLASSIFICATION	5.3925575864501744E-5	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999975523529333	WITHOUT_CLASSIFICATION	2.447647066691538E-5	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.999997203650397	WITHOUT_CLASSIFICATION	2.7963496029455848E-6	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999448059481334	WITHOUT_CLASSIFICATION	5.519405186657988E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999965264089735	WITHOUT_CLASSIFICATION	3.4735910265481997E-6	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999837396451847	WITHOUT_CLASSIFICATION	1.6260354815279974E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999980674652605	WITHOUT_CLASSIFICATION	1.9325347395052116E-6	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999980674652605	WITHOUT_CLASSIFICATION	1.9325347395052116E-6	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999847474064	WITHOUT_CLASSIFICATION	1.5252593592538448E-8	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999894516366743	WITHOUT_CLASSIFICATION	1.0548363325579334E-5	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999998468966891	WITHOUT_CLASSIFICATION	1.5310331080117191E-7	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999959992850466	WITHOUT_CLASSIFICATION	4.000714953467393E-6	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999313480392952	WITHOUT_CLASSIFICATION	6.865196070476881E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998100759616982	WITHOUT_CLASSIFICATION	1.899240383016244E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997438257982483	WITHOUT_CLASSIFICATION	2.561742017517554E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999894516366743	WITHOUT_CLASSIFICATION	1.0548363325579334E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998100759616982	WITHOUT_CLASSIFICATION	1.899240383016244E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997438257982483	WITHOUT_CLASSIFICATION	2.561742017517554E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999935220486454	WITHOUT_CLASSIFICATION	6.4779513545571715E-6	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999973344266307	WITHOUT_CLASSIFICATION	2.6655733693019573E-6	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999979002542634	WITHOUT_CLASSIFICATION	2.0997457365901146E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999894516366743	WITHOUT_CLASSIFICATION	1.0548363325579334E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999894516366743	WITHOUT_CLASSIFICATION	1.0548363325579334E-5	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999998597544933	WITHOUT_CLASSIFICATION	1.402455067080557E-7	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999996848926314	WITHOUT_CLASSIFICATION	3.15107368703176E-7	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999988924297567	WITHOUT_CLASSIFICATION	1.1075702433395382E-6	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999886511138831	WITHOUT_CLASSIFICATION	1.134888611683055E-5	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999991000930639	WITHOUT_CLASSIFICATION	8.999069362034413E-7	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999994233336009	WITHOUT_CLASSIFICATION	5.766663990724977E-7	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999970178002631	WITHOUT_CLASSIFICATION	2.982199736891134E-6	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999996371861996	WITHOUT_CLASSIFICATION	3.628138004035641E-7	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999997511174327	WITHOUT_CLASSIFICATION	2.4888256730833215E-7	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999991501813457	WITHOUT_CLASSIFICATION	8.498186543323373E-7	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999980768490976	WITHOUT_CLASSIFICATION	1.9231509023336086E-6	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999993308120279	WITHOUT_CLASSIFICATION	6.691879721032256E-7	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999997019723734	WITHOUT_CLASSIFICATION	2.9802762657653795E-7	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999999413274018	WITHOUT_CLASSIFICATION	5.867259820894311E-7	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945325820189	WITHOUT_CLASSIFICATION	5.467417981250365E-6	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999896262964	WITHOUT_CLASSIFICATION	1.0373703670196366E-8	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999365057087369	WITHOUT_CLASSIFICATION	6.34942912630827E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999957854145031	WITHOUT_CLASSIFICATION	4.21458549686821E-6	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999215273894543	WITHOUT_CLASSIFICATION	7.847261054573657E-5	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999889790123	WITHOUT_CLASSIFICATION	1.1020987705347237E-8	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999901693186419	WITHOUT_CLASSIFICATION	9.830681358074326E-6	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9989440707808434	WITHOUT_CLASSIFICATION	0.0010559292191566587	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9989440707808434	WITHOUT_CLASSIFICATION	0.0010559292191566587	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999365057087369	WITHOUT_CLASSIFICATION	6.34942912630827E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999996713590561	WITHOUT_CLASSIFICATION	3.2864094384736746E-7	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999998340626011	WITHOUT_CLASSIFICATION	1.6593739887271978E-7	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999016350484073	WITHOUT_CLASSIFICATION	9.836495159259707E-5	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999968335032514	WITHOUT_CLASSIFICATION	3.16649674867771E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999949726549129	WITHOUT_CLASSIFICATION	5.027345087143185E-6	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999995216129711	WITHOUT_CLASSIFICATION	4.783870288747965E-7	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999999572235081	WITHOUT_CLASSIFICATION	4.277649182228458E-8	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999999225265701	WITHOUT_CLASSIFICATION	7.74734299060018E-7	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999898883524	WITHOUT_CLASSIFICATION	1.0111647623018818E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993726248234	WITHOUT_CLASSIFICATION	6.273751765271972E-7	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999687867277347	WITHOUT_CLASSIFICATION	3.1213272265251896E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999989533273138	WITHOUT_CLASSIFICATION	1.0466726862224631E-6	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999727523277092	WITHOUT_CLASSIFICATION	2.7247672290699634E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999945849877079	WITHOUT_CLASSIFICATION	5.415012292195982E-6	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999834747421441	WITHOUT_CLASSIFICATION	1.6525257855850714E-5	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999866733744806	WITHOUT_CLASSIFICATION	1.332662551952853E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999981579221255	WITHOUT_CLASSIFICATION	1.8420778744262887E-6	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999991290245898	WITHOUT_CLASSIFICATION	8.709754101960592E-7	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999969248103802	WITHOUT_CLASSIFICATION	3.0751896199172146E-6	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999586395451	WITHOUT_CLASSIFICATION	4.136045489943846E-6	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999996444314175	WITHOUT_CLASSIFICATION	3.5556858243607876E-7	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999991719304011	WITHOUT_CLASSIFICATION	8.2806959889808E-6	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999980709099946	WITHOUT_CLASSIFICATION	1.9290900053606395E-6	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999831399820591	WITHOUT_CLASSIFICATION	1.686001794087264E-5	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994690446426863	WITHOUT_CLASSIFICATION	5.309553573136859E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999913850283105	WITHOUT_CLASSIFICATION	8.614971689393116E-6	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999749391656302	WITHOUT_CLASSIFICATION	2.5060834369787163E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753479769011	WITHOUT_CLASSIFICATION	2.465202309888359E-5	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999917042677344	WITHOUT_CLASSIFICATION	8.295732265590247E-6	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999801348042903	WITHOUT_CLASSIFICATION	1.9865195709781677E-5	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992424672621	WITHOUT_CLASSIFICATION	7.575327378409984E-7	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999968385127626	WITHOUT_CLASSIFICATION	3.161487237402915E-6	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999394312526538	WITHOUT_CLASSIFICATION	6.056874734617391E-5	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859286000291	WITHOUT_CLASSIFICATION	1.407139997081504E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941580813938	WITHOUT_CLASSIFICATION	5.841918606143459E-6	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999831339064873	WITHOUT_CLASSIFICATION	1.6866093512728174E-5	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948052053562	WITHOUT_CLASSIFICATION	5.194794643680864E-6	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999426269737383	WITHOUT_CLASSIFICATION	5.737302626172747E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935787148512	WITHOUT_CLASSIFICATION	6.4212851488305714E-6	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99998972401348	WITHOUT_CLASSIFICATION	1.027598652011297E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999915922702001	WITHOUT_CLASSIFICATION	8.40772979992318E-6	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999887988203214	WITHOUT_CLASSIFICATION	1.1201179678583452E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950718287023	WITHOUT_CLASSIFICATION	4.928171297676755E-6	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9978678954475854	WITHOUT_CLASSIFICATION	0.0021321045524146623	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999973015476832	WITHOUT_CLASSIFICATION	2.6984523167637763E-6	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999714509921	WITHOUT_CLASSIFICATION	2.8549008026696413E-8	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997410317109	WITHOUT_CLASSIFICATION	2.589682891438387E-7	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999971080094299	WITHOUT_CLASSIFICATION	2.8919905701384733E-6	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999855554017596	WITHOUT_CLASSIFICATION	1.444459824031212E-5	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999957532329218	WITHOUT_CLASSIFICATION	4.246767078265901E-6	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999997912906731	WITHOUT_CLASSIFICATION	2.0870932701899743E-7	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999926182843135	WITHOUT_CLASSIFICATION	7.381715686493033E-6	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999872325530118	WITHOUT_CLASSIFICATION	1.276744698817969E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993726248234	WITHOUT_CLASSIFICATION	6.273751765271972E-7	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999944518848696	WITHOUT_CLASSIFICATION	5.548115130393214E-6	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999989135393471	WITHOUT_CLASSIFICATION	1.0864606528674103E-6	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999983336984858	WITHOUT_CLASSIFICATION	1.6663015141253827E-6	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999997604287938	WITHOUT_CLASSIFICATION	2.3957120624754533E-7	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999995594871874	WITHOUT_CLASSIFICATION	4.4051281255664067E-7	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999992258248608	WITHOUT_CLASSIFICATION	7.74175139202014E-7	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999979361011978	WITHOUT_CLASSIFICATION	2.0638988022387747E-6	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995108630897	WITHOUT_CLASSIFICATION	4.891369102968355E-6	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968988033795	WITHOUT_CLASSIFICATION	3.101196620610109E-6	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998168167156335	WITHOUT_CLASSIFICATION	1.8318328436653215E-4	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947254924978	WITHOUT_CLASSIFICATION	5.274507502233481E-6	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999668826367565	WITHOUT_CLASSIFICATION	3.311736324348615E-5	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999211688522	WITHOUT_CLASSIFICATION	7.883114784929902E-8	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.999998489306051	WITHOUT_CLASSIFICATION	1.510693948959856E-6	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999772240901126	WITHOUT_CLASSIFICATION	2.2775909887347837E-5	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975025646047	WITHOUT_CLASSIFICATION	2.497435395321094E-6	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999996107771316	WITHOUT_CLASSIFICATION	3.892228683935519E-7	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999987561236064	WITHOUT_CLASSIFICATION	1.2438763935766663E-6	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999997722150854	WITHOUT_CLASSIFICATION	2.2778491460490358E-7	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999997058733489	WITHOUT_CLASSIFICATION	2.941266511221174E-7	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999998576341733	WITHOUT_CLASSIFICATION	1.4236582672311136E-7	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.999998049061451	WITHOUT_CLASSIFICATION	1.9509385490765318E-6	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999973396261636	WITHOUT_CLASSIFICATION	2.6603738363287665E-6	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999993269143286	WITHOUT_CLASSIFICATION	6.730856713887214E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993726248234	WITHOUT_CLASSIFICATION	6.273751765271972E-7	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997410317109	WITHOUT_CLASSIFICATION	2.589682891438387E-7	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999998657619293	WITHOUT_CLASSIFICATION	1.3423807059226625E-7	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999468722263708	WITHOUT_CLASSIFICATION	5.312777362913874E-5	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999970264534838	WITHOUT_CLASSIFICATION	2.9735465163874326E-6	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999882666495069	WITHOUT_CLASSIFICATION	1.1733350493046007E-5	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999994999679107	WITHOUT_CLASSIFICATION	5.000320893023498E-7	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999902360679229	WITHOUT_CLASSIFICATION	9.763932077132503E-6	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999823642462061	WITHOUT_CLASSIFICATION	1.7635753793851668E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.999999549547134	WITHOUT_CLASSIFICATION	4.5045286606318186E-7	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999934672717185	WITHOUT_CLASSIFICATION	6.532728281590675E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999995170355311	WITHOUT_CLASSIFICATION	4.82964468864538E-7	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999991934718288	WITHOUT_CLASSIFICATION	8.065281713323356E-7	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999992833873352	WITHOUT_CLASSIFICATION	7.166126647083298E-7	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999988637549483	WITHOUT_CLASSIFICATION	1.1362450517042853E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993726248234	WITHOUT_CLASSIFICATION	6.273751765271972E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993726248234	WITHOUT_CLASSIFICATION	6.273751765271972E-7	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999569038452499	WITHOUT_CLASSIFICATION	4.309615475011231E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999125620916843	WITHOUT_CLASSIFICATION	8.743790831566857E-5	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999819968094851	WITHOUT_CLASSIFICATION	1.8003190514981727E-5	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999814948144838	WITHOUT_CLASSIFICATION	1.850518551614143E-5	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999845836439012	WITHOUT_CLASSIFICATION	1.5416356098788863E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999995401759327	WITHOUT_CLASSIFICATION	4.598240672933272E-7	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999609788215555	WITHOUT_CLASSIFICATION	3.9021178444451155E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993726248234	WITHOUT_CLASSIFICATION	6.273751765271972E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999992529383785	WITHOUT_CLASSIFICATION	7.470616215625294E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999947909850283	WITHOUT_CLASSIFICATION	5.2090149716219464E-6	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999337083674646	WITHOUT_CLASSIFICATION	6.629163253535185E-5	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999698944813141	WITHOUT_CLASSIFICATION	3.01055186859218E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999987830020112	WITHOUT_CLASSIFICATION	1.2169979887936332E-5	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999898600390381	WITHOUT_CLASSIFICATION	1.0139960961908287E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9865130372761244	WITHOUT_CLASSIFICATION	0.013486962723875645	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999949059490334	WITHOUT_CLASSIFICATION	5.094050966617238E-6	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999879838973936	WITHOUT_CLASSIFICATION	1.20161026063809E-5	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999987546668435	WITHOUT_CLASSIFICATION	1.2453331564857678E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997410317109	WITHOUT_CLASSIFICATION	2.589682891438387E-7	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999999534983348	WITHOUT_CLASSIFICATION	4.6501665259410336E-8	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999565546508	WITHOUT_CLASSIFICATION	4.3445349149848485E-8	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998734153440746	WITHOUT_CLASSIFICATION	1.2658465592533752E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997410317109	WITHOUT_CLASSIFICATION	2.589682891438387E-7	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999952879757321	WITHOUT_CLASSIFICATION	4.712024267817498E-6	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999992529383785	WITHOUT_CLASSIFICATION	7.470616215625294E-7	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999398007887937	WITHOUT_CLASSIFICATION	6.0199211206317935E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993726248234	WITHOUT_CLASSIFICATION	6.273751765271972E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999978275959499	WITHOUT_CLASSIFICATION	2.1724040500618535E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993726248234	WITHOUT_CLASSIFICATION	6.273751765271972E-7	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999998152488829	WITHOUT_CLASSIFICATION	1.847511170898017E-7	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999995170355311	WITHOUT_CLASSIFICATION	4.82964468864538E-7	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999991934718288	WITHOUT_CLASSIFICATION	8.065281713323356E-7	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999992833873352	WITHOUT_CLASSIFICATION	7.166126647083298E-7	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999010391855	WITHOUT_CLASSIFICATION	9.896081455873253E-8	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999985933757863	WITHOUT_CLASSIFICATION	1.4066242136557607E-6	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999920679115707	WITHOUT_CLASSIFICATION	7.932088429308794E-6	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999987586969841	WITHOUT_CLASSIFICATION	1.241303015871047E-6	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999769733323	WITHOUT_CLASSIFICATION	2.3026667638226105E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993726248234	WITHOUT_CLASSIFICATION	6.273751765271972E-7	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997410317109	WITHOUT_CLASSIFICATION	2.589682891438387E-7	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999988637549483	WITHOUT_CLASSIFICATION	1.1362450517042853E-6	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999569038452499	WITHOUT_CLASSIFICATION	4.309615475011231E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999743205031	WITHOUT_CLASSIFICATION	2.567949681761092E-8	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999990510184	WITHOUT_CLASSIFICATION	9.489816164780759E-9	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999907570342	WITHOUT_CLASSIFICATION	9.242965870807037E-9	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999509197907	WITHOUT_CLASSIFICATION	4.908020941386637E-8	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999991092818823	WITHOUT_CLASSIFICATION	8.907181177408585E-7	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999987177218713	WITHOUT_CLASSIFICATION	1.2822781287809342E-6	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999915922702001	WITHOUT_CLASSIFICATION	8.40772979992318E-6	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999998622458078	WITHOUT_CLASSIFICATION	1.3775419215417316E-7	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9986660625231037	WITHOUT_CLASSIFICATION	0.001333937476896195	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999958017453734	WITHOUT_CLASSIFICATION	4.1982546265843795E-6	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999207574868506	WITHOUT_CLASSIFICATION	7.924251314941133E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999929356537044	WITHOUT_CLASSIFICATION	7.064346295579402E-6	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753479769011	WITHOUT_CLASSIFICATION	2.465202309888359E-5	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999917042677344	WITHOUT_CLASSIFICATION	8.295732265590247E-6	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941580813938	WITHOUT_CLASSIFICATION	5.841918606143459E-6	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999929356537044	WITHOUT_CLASSIFICATION	7.064346295579402E-6	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999827952013697	WITHOUT_CLASSIFICATION	1.7204798630303804E-4	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999993541074041	WITHOUT_CLASSIFICATION	6.458925959277235E-7	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999271649717589	WITHOUT_CLASSIFICATION	7.28350282411025E-5	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999933176905158	WITHOUT_CLASSIFICATION	6.682309484194126E-5	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999775464320457	WITHOUT_CLASSIFICATION	2.2453567954301983E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993726248234	WITHOUT_CLASSIFICATION	6.273751765271972E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993726248234	WITHOUT_CLASSIFICATION	6.273751765271972E-7	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999824089637794	WITHOUT_CLASSIFICATION	1.7591036220576477E-5	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999831339064873	WITHOUT_CLASSIFICATION	1.6866093512728174E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935787148512	WITHOUT_CLASSIFICATION	6.4212851488305714E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999997058733489	WITHOUT_CLASSIFICATION	2.941266511221174E-7	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999980004720254	WITHOUT_CLASSIFICATION	1.999527974626785E-6	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999998530157079	WITHOUT_CLASSIFICATION	1.4698429216372256E-7	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999949687627432	WITHOUT_CLASSIFICATION	5.031237256844864E-6	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999980726212113	WITHOUT_CLASSIFICATION	1.9273787887294026E-6	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999980849119655	WITHOUT_CLASSIFICATION	1.915088034386235E-6	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999997378945652	WITHOUT_CLASSIFICATION	2.621054348659408E-7	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.99996376443429	WITHOUT_CLASSIFICATION	3.62355657099108E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998401162813232	WITHOUT_CLASSIFICATION	1.598837186768371E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999898883524	WITHOUT_CLASSIFICATION	1.0111647623018818E-8	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.999846850752557	WITHOUT_CLASSIFICATION	1.5314924744302375E-4	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999872523626683	WITHOUT_CLASSIFICATION	1.274763733170148E-5	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999996420162425	WITHOUT_CLASSIFICATION	3.57983757510002E-7	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999999524716511	WITHOUT_CLASSIFICATION	4.752834884954581E-8	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999983952966388	WITHOUT_CLASSIFICATION	1.6047033612076794E-6	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999701145162342	WITHOUT_CLASSIFICATION	2.9885483765788654E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973463713782	WITHOUT_CLASSIFICATION	2.6536286217825664E-6	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999576663211301	WITHOUT_CLASSIFICATION	4.233367886995263E-5	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991959890975	WITHOUT_CLASSIFICATION	8.040109024935935E-7	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999621903207712	WITHOUT_CLASSIFICATION	3.780967922892144E-5	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999319257122131	WITHOUT_CLASSIFICATION	6.807428778684656E-5	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999927973832897	WITHOUT_CLASSIFICATION	7.202616710239512E-6	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995460293197	WITHOUT_CLASSIFICATION	4.539706802221211E-7	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993131153396	WITHOUT_CLASSIFICATION	6.868846603462179E-7	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999985652269638	WITHOUT_CLASSIFICATION	1.434773036175126E-6	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999729092242496	WITHOUT_CLASSIFICATION	2.7090775750343963E-5	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999930931970444	WITHOUT_CLASSIFICATION	6.906802955449777E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994261979576	WITHOUT_CLASSIFICATION	5.738020423910919E-7	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999923240211886	WITHOUT_CLASSIFICATION	7.675978811257276E-6	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999122107857	WITHOUT_CLASSIFICATION	8.778921433604534E-8	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999781435426136	WITHOUT_CLASSIFICATION	2.185645738644E-5	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999972998040457	WITHOUT_CLASSIFICATION	2.7001959542007226E-6	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999382706319	WITHOUT_CLASSIFICATION	6.172936802673666E-8	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999995707109973	WITHOUT_CLASSIFICATION	4.292890026663882E-7	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999973711583069	WITHOUT_CLASSIFICATION	2.628841693071011E-6	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999896802845709	WITHOUT_CLASSIFICATION	1.0319715429080597E-5	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999882485443095	WITHOUT_CLASSIFICATION	1.1751455690619865E-5	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999987969650921	WITHOUT_CLASSIFICATION	1.2030349078459969E-6	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999914606170673	WITHOUT_CLASSIFICATION	8.539382932673871E-6	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999852167140992	WITHOUT_CLASSIFICATION	1.4783285900806195E-5	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999959321597743	WITHOUT_CLASSIFICATION	4.067840225688055E-6	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999996442345378	WITHOUT_CLASSIFICATION	3.557654622828261E-7	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999944306160885	WITHOUT_CLASSIFICATION	5.569383911448869E-6	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999955533056526	WITHOUT_CLASSIFICATION	4.4466943474102816E-5	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999923442284464	WITHOUT_CLASSIFICATION	7.655771553631539E-6	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999944691941413	WITHOUT_CLASSIFICATION	5.530805858730792E-6	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.999999974338637	WITHOUT_CLASSIFICATION	2.566136298013932E-8	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999997248784811	WITHOUT_CLASSIFICATION	2.7512151893643954E-7	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999932904457962	WITHOUT_CLASSIFICATION	6.709554203782112E-6	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999113416765	WITHOUT_CLASSIFICATION	8.86583234778504E-8	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999998324866347	WITHOUT_CLASSIFICATION	1.6751336541696793E-7	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.999884976605249	WITHOUT_CLASSIFICATION	1.1502339475101055E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999982835812948	WITHOUT_CLASSIFICATION	1.7164187051499642E-6	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999875741846131	WITHOUT_CLASSIFICATION	1.2425815386800838E-5	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.99998598139484	WITHOUT_CLASSIFICATION	1.4018605160195694E-5	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999241743623727	WITHOUT_CLASSIFICATION	7.582563762725656E-5	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999997168193081	WITHOUT_CLASSIFICATION	2.831806918910264E-7	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999978857648464	WITHOUT_CLASSIFICATION	2.114235153626943E-6	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999995363429661	WITHOUT_CLASSIFICATION	4.636570338938959E-7	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999051136128344	WITHOUT_CLASSIFICATION	9.488638716556851E-5	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999785403629345	WITHOUT_CLASSIFICATION	2.1459637065457905E-5	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999905401221	WITHOUT_CLASSIFICATION	9.459877781305123E-9	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999904785719128	WITHOUT_CLASSIFICATION	9.521428087187895E-6	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999838606892	WITHOUT_CLASSIFICATION	1.613931083822547E-8	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999996107175	WITHOUT_CLASSIFICATION	3.89282390782246E-10	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999945929449665	WITHOUT_CLASSIFICATION	5.40705503344913E-6	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999886248184515	WITHOUT_CLASSIFICATION	1.13751815484212E-5	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.99999887757334	WITHOUT_CLASSIFICATION	1.1224266599283349E-6	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999992488514896	WITHOUT_CLASSIFICATION	7.511485105129695E-7	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999992619095288	WITHOUT_CLASSIFICATION	7.380904712944961E-7	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999964909322778	WITHOUT_CLASSIFICATION	3.5090677222378096E-6	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999765111349408	WITHOUT_CLASSIFICATION	2.3488865059264143E-5	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999993096190819	WITHOUT_CLASSIFICATION	6.903809181005308E-7	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999261509132084	WITHOUT_CLASSIFICATION	7.38490867917383E-5	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999942204200716	WITHOUT_CLASSIFICATION	5.779579928351071E-6	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999981073843318	WITHOUT_CLASSIFICATION	1.8926156681023256E-6	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9952513873315602	WITHOUT_CLASSIFICATION	0.004748612668439905	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999995840701874	WITHOUT_CLASSIFICATION	4.159298125985186E-7	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999949346723171	WITHOUT_CLASSIFICATION	5.065327682763693E-6	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999977980768574	WITHOUT_CLASSIFICATION	2.201923142657499E-6	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999934235361245	WITHOUT_CLASSIFICATION	6.5764638754838294E-6	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999957288548	WITHOUT_CLASSIFICATION	4.271145180618578E-9	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999745884245705	WITHOUT_CLASSIFICATION	2.5411575429426413E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.999999805998536	WITHOUT_CLASSIFICATION	1.9400146396446337E-7	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999756388122466	WITHOUT_CLASSIFICATION	2.4361187753324646E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999956650226748	WITHOUT_CLASSIFICATION	4.334977325222941E-6	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999996306132194	WITHOUT_CLASSIFICATION	3.6938678050058066E-7	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999885591413206	WITHOUT_CLASSIFICATION	1.1440858679437705E-5	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999997911383767	WITHOUT_CLASSIFICATION	2.08861623298542E-7	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999111656099505	WITHOUT_CLASSIFICATION	8.883439004947392E-5	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999741969370999	WITHOUT_CLASSIFICATION	2.5803062900198467E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998911556911	WITHOUT_CLASSIFICATION	1.0884430882601598E-7	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.999999647801422	WITHOUT_CLASSIFICATION	3.521985778790858E-7	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999927047492628	WITHOUT_CLASSIFICATION	7.295250737090408E-6	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999979914531897	WITHOUT_CLASSIFICATION	2.0085468103746567E-6	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9998942694813253	WITHOUT_CLASSIFICATION	1.0573051867469702E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999867523496981	WITHOUT_CLASSIFICATION	1.3247650301730532E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999510059571179	WITHOUT_CLASSIFICATION	4.8994042881964105E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999794338637524	WITHOUT_CLASSIFICATION	2.0566136247629582E-5	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999942676765	WITHOUT_CLASSIFICATION	5.732323476787593E-9	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999997592708284	WITHOUT_CLASSIFICATION	2.4072917158920953E-7	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9999815779499195	WITHOUT_CLASSIFICATION	1.8422050080442652E-5	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999999871677657	WITHOUT_CLASSIFICATION	1.2832234289304555E-7	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999997592708284	WITHOUT_CLASSIFICATION	2.4072917158920953E-7	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999972873552251	WITHOUT_CLASSIFICATION	2.7126447748969974E-6	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999662950842634	WITHOUT_CLASSIFICATION	3.370491573665959E-5	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999983232274317	WITHOUT_CLASSIFICATION	1.6767725683058113E-6	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999863313399164	WITHOUT_CLASSIFICATION	1.3668660083719943E-5	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999990791329237	WITHOUT_CLASSIFICATION	9.208670762422474E-7	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999526549098373	WITHOUT_CLASSIFICATION	4.734509016268364E-5	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999844016626337	WITHOUT_CLASSIFICATION	1.5598337366330095E-5	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999996035474343	WITHOUT_CLASSIFICATION	3.964525656528547E-7	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999735958723047	WITHOUT_CLASSIFICATION	2.640412769533253E-5	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999956209149884	WITHOUT_CLASSIFICATION	4.379085011681367E-6	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.999999947349977	WITHOUT_CLASSIFICATION	5.26500229959418E-8	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999994897729528	WITHOUT_CLASSIFICATION	5.102270472740547E-7	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999918350859	WITHOUT_CLASSIFICATION	8.164913963760172E-9	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999662756788	WITHOUT_CLASSIFICATION	3.3724321252888275E-8	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999996769023109	WITHOUT_CLASSIFICATION	3.230976891015522E-6	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.999999307275964	WITHOUT_CLASSIFICATION	6.927240360254973E-7	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999707175802687	WITHOUT_CLASSIFICATION	2.928241973126002E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999707175802687	WITHOUT_CLASSIFICATION	2.928241973126002E-5	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999993179753245	WITHOUT_CLASSIFICATION	6.820246754454342E-7	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.999762401111807	WITHOUT_CLASSIFICATION	2.3759888819291082E-4	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999504425593555	WITHOUT_CLASSIFICATION	4.9557440644432726E-5	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999374174282928	WITHOUT_CLASSIFICATION	6.258257170723424E-5	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.999467452274312	WITHOUT_CLASSIFICATION	5.325477256879989E-4	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9987431637015024	WITHOUT_CLASSIFICATION	0.001256836298497548	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999813140175071	WITHOUT_CLASSIFICATION	1.8685982492891695E-5	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999995819971806	WITHOUT_CLASSIFICATION	4.1800281939834707E-7	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999991008780321	WITHOUT_CLASSIFICATION	8.991219679120976E-7	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998986418813499	WITHOUT_CLASSIFICATION	1.0135811865008694E-4	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999984063105906	WITHOUT_CLASSIFICATION	1.5936894095288506E-6	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999710565523	WITHOUT_CLASSIFICATION	2.8943447740347755E-8	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999740003304841	WITHOUT_CLASSIFICATION	2.5999669515964543E-5	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.999990079225726	WITHOUT_CLASSIFICATION	9.92077427392817E-6	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9997964135990163	WITHOUT_CLASSIFICATION	2.0358640098382631E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999701145162342	WITHOUT_CLASSIFICATION	2.9885483765788654E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999831734517809	WITHOUT_CLASSIFICATION	1.682654821902736E-5	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999981101552764	WITHOUT_CLASSIFICATION	1.8898447235802883E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9931867938240667	WITHOUT_CLASSIFICATION	0.006813206175933347	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999927982134162	WITHOUT_CLASSIFICATION	7.201786583729036E-6	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999997626052435	WITHOUT_CLASSIFICATION	2.373947565921833E-7	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999978345132422	WITHOUT_CLASSIFICATION	2.1654867578229713E-6	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999944831713	WITHOUT_CLASSIFICATION	5.516828660807205E-9	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999969376829	WITHOUT_CLASSIFICATION	3.0623170650840505E-9	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999984678096129	WITHOUT_CLASSIFICATION	1.5321903871703342E-6	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999995012700704	WITHOUT_CLASSIFICATION	4.987299295552549E-7	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999886355511	WITHOUT_CLASSIFICATION	1.1364448934032852E-8	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999168885346964	WITHOUT_CLASSIFICATION	8.311146530359414E-5	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.999551758071051	WITHOUT_CLASSIFICATION	4.482419289489299E-4	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999906811001935	WITHOUT_CLASSIFICATION	9.318899806458208E-6	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999985411309292	WITHOUT_CLASSIFICATION	1.4588690707580135E-6	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999613048038144	WITHOUT_CLASSIFICATION	3.8695196185706354E-5	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.999949137554941	WITHOUT_CLASSIFICATION	5.086244505909454E-5	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999956535184348	WITHOUT_CLASSIFICATION	4.3464815652645595E-6	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999856322878535	WITHOUT_CLASSIFICATION	1.4367712146527992E-5	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999936083786477	WITHOUT_CLASSIFICATION	6.3916213523322464E-6	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999915803066413	WITHOUT_CLASSIFICATION	8.41969335875066E-6	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999546972370665	WITHOUT_CLASSIFICATION	4.530276293347746E-5	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.999996838535477	WITHOUT_CLASSIFICATION	3.16146452291094E-6	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999990351597776	WITHOUT_CLASSIFICATION	9.648402223806285E-7	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999115236470921	WITHOUT_CLASSIFICATION	8.847635290796809E-5	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999978675832119	WITHOUT_CLASSIFICATION	2.132416788251367E-6	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999987197572731	WITHOUT_CLASSIFICATION	1.2802427269336419E-6	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999995675645447	WITHOUT_CLASSIFICATION	4.324354553935134E-7	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999907507693699	WITHOUT_CLASSIFICATION	9.249230630092749E-6	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999996632670094	WITHOUT_CLASSIFICATION	3.367329906613842E-7	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934396979936	WITHOUT_CLASSIFICATION	6.5603020064294105E-6	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992878545093	WITHOUT_CLASSIFICATION	7.121454905650976E-7	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966188700267	WITHOUT_CLASSIFICATION	3.381129973361215E-6	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999983143735147	WITHOUT_CLASSIFICATION	1.6856264853689752E-6	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999956641905392	WITHOUT_CLASSIFICATION	4.335809460781336E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998401162813232	WITHOUT_CLASSIFICATION	1.598837186768371E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998401162813232	WITHOUT_CLASSIFICATION	1.598837186768371E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997299306047	WITHOUT_CLASSIFICATION	2.700693953260367E-7	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999439367694	WITHOUT_CLASSIFICATION	5.606323064822681E-8	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999906642626718	WITHOUT_CLASSIFICATION	9.335737328231255E-6	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999281414401444	WITHOUT_CLASSIFICATION	7.185855985565605E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999906642626718	WITHOUT_CLASSIFICATION	9.335737328231255E-6	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999501590715708	WITHOUT_CLASSIFICATION	4.98409284292789E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999957150074634	WITHOUT_CLASSIFICATION	4.284992536651561E-6	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999977123059206	WITHOUT_CLASSIFICATION	2.2876940793137553E-6	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999969945181544	WITHOUT_CLASSIFICATION	3.005481845605404E-6	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999952322431167	WITHOUT_CLASSIFICATION	4.767756883354892E-6	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999982411334927	WITHOUT_CLASSIFICATION	1.7588665073812923E-6	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999996589420946	WITHOUT_CLASSIFICATION	3.410579054099312E-7	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999997839908963	WITHOUT_CLASSIFICATION	2.1600910364293786E-7	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9998620594808779	WITHOUT_CLASSIFICATION	1.379405191221239E-4	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999976081716128	WITHOUT_CLASSIFICATION	2.391828387252786E-6	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9998417477908209	WITHOUT_CLASSIFICATION	1.582522091790335E-4	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999976518670197	WITHOUT_CLASSIFICATION	2.348132980297946E-6	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999975798600165	WITHOUT_CLASSIFICATION	2.4201399835381516E-6	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.999998808271466	WITHOUT_CLASSIFICATION	1.1917285339725059E-6	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999998334071	WITHOUT_CLASSIFICATION	1.6659282152319234E-10	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999998761116313	WITHOUT_CLASSIFICATION	1.23888368685758E-7	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999535865286906	WITHOUT_CLASSIFICATION	4.6413471309399526E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999535865286906	WITHOUT_CLASSIFICATION	4.6413471309399526E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999930248381964	WITHOUT_CLASSIFICATION	6.975161803591434E-6	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999996050473733	WITHOUT_CLASSIFICATION	3.949526266961653E-7	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999758052253	WITHOUT_CLASSIFICATION	2.419477466447346E-8	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9969044266070152	WITHOUT_CLASSIFICATION	0.0030955733929849353	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999805265145	WITHOUT_CLASSIFICATION	1.9473485485293324E-8	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999933022990083	WITHOUT_CLASSIFICATION	6.697700991713653E-6	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999737308812702	WITHOUT_CLASSIFICATION	2.6269118729758805E-5	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998697745150456	WITHOUT_CLASSIFICATION	1.302254849543403E-4	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999997212660487	WITHOUT_CLASSIFICATION	2.7873395124776105E-7	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999999734803084	WITHOUT_CLASSIFICATION	2.6519691590803626E-7	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999996753520725	WITHOUT_CLASSIFICATION	3.2464792755303526E-7	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999989419786696	WITHOUT_CLASSIFICATION	1.0580213304129114E-6	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999974950756767	WITHOUT_CLASSIFICATION	2.504924323214929E-6	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999997949465583	WITHOUT_CLASSIFICATION	2.050534417555166E-7	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999980672837225	WITHOUT_CLASSIFICATION	1.9327162773643036E-6	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999990886441855	WITHOUT_CLASSIFICATION	9.113558144502456E-7	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9996389481934859	WITHOUT_CLASSIFICATION	3.610518065141841E-4	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9992766626210678	WITHOUT_CLASSIFICATION	7.233373789320611E-4	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9999935868668525	WITHOUT_CLASSIFICATION	6.413133147465001E-6	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999991904505171	WITHOUT_CLASSIFICATION	8.095494827736973E-7	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999989789196808	WITHOUT_CLASSIFICATION	1.021080319109706E-6	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.999973579769363	WITHOUT_CLASSIFICATION	2.642023063708433E-5	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999983211321017	WITHOUT_CLASSIFICATION	1.6788678982224177E-6	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9695420788058684	WITHOUT_CLASSIFICATION	0.03045792119413163	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999998152415581	WITHOUT_CLASSIFICATION	1.8475844192738795E-7	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.999999917535758	WITHOUT_CLASSIFICATION	8.246424203003807E-8	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999992013735504	WITHOUT_CLASSIFICATION	7.986264496101436E-7	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999994243860728	WITHOUT_CLASSIFICATION	5.756139271876506E-7	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999977491055613	WITHOUT_CLASSIFICATION	2.2508944387479486E-6	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999993127926243	WITHOUT_CLASSIFICATION	6.87207375706658E-7	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999968486056171	WITHOUT_CLASSIFICATION	3.151394382846984E-6	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999964621666643	WITHOUT_CLASSIFICATION	3.537833335691764E-6	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.999971857119124	WITHOUT_CLASSIFICATION	2.814288087603669E-5	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.999999709373514	WITHOUT_CLASSIFICATION	2.906264859998046E-7	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9993800679240636	WITHOUT_CLASSIFICATION	6.199320759362995E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999991943078146	WITHOUT_CLASSIFICATION	8.056921853854302E-7	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999991417051352	WITHOUT_CLASSIFICATION	8.582948648751759E-7	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999972657744267	WITHOUT_CLASSIFICATION	2.7342255733281168E-6	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999997868424496	WITHOUT_CLASSIFICATION	2.13157550420608E-7	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999987892106141	WITHOUT_CLASSIFICATION	1.210789385919619E-6	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999767899905	WITHOUT_CLASSIFICATION	2.3210009470305565E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996001643991	WITHOUT_CLASSIFICATION	3.998356008785112E-7	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9998498031349232	WITHOUT_CLASSIFICATION	1.5019686507672692E-4	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9852995738520004	WITHOUT_CLASSIFICATION	0.014700426147999646	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999998722767701	WITHOUT_CLASSIFICATION	1.277232298673655E-7	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999996407664901	WITHOUT_CLASSIFICATION	3.5923350985840414E-7	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9946157423847701	WITHOUT_CLASSIFICATION	0.005384257615229843	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999956652019011	WITHOUT_CLASSIFICATION	4.33479809889874E-6	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999920091133702	WITHOUT_CLASSIFICATION	7.990886629843913E-6	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999994780345178	WITHOUT_CLASSIFICATION	5.219654822022287E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986417790174	WITHOUT_CLASSIFICATION	1.3582209825578236E-6	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999992669556669	WITHOUT_CLASSIFICATION	7.330443331906548E-7	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999987976432	WITHOUT_CLASSIFICATION	1.2023567919294639E-9	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999973096194881	WITHOUT_CLASSIFICATION	2.6903805119176304E-6	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.999953549440902	WITHOUT_CLASSIFICATION	4.645055909792641E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999952879757321	WITHOUT_CLASSIFICATION	4.712024267817498E-6	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999952879757321	WITHOUT_CLASSIFICATION	4.712024267817498E-6	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999999997244245	WITHOUT_CLASSIFICATION	2.7557549340377953E-9	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999975143332027	WITHOUT_CLASSIFICATION	2.485666797234854E-6	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999992963090628	WITHOUT_CLASSIFICATION	7.036909371996927E-6	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.99999747060665	WITHOUT_CLASSIFICATION	2.5293933501057356E-6	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999993819534234	WITHOUT_CLASSIFICATION	6.180465766083065E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999967477679696	WITHOUT_CLASSIFICATION	3.2522320304085573E-5	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999407859197778	WITHOUT_CLASSIFICATION	5.921408022230019E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999995379720729	WITHOUT_CLASSIFICATION	4.620279272172832E-7	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999887585522	WITHOUT_CLASSIFICATION	1.1241447755943115E-8	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999843949364	WITHOUT_CLASSIFICATION	1.560506356447494E-8	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999977489332821	WITHOUT_CLASSIFICATION	2.251066717911983E-6	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999994054312813	WITHOUT_CLASSIFICATION	5.945687187589741E-7	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999807714398941	WITHOUT_CLASSIFICATION	1.9228560105941092E-5	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999969311476138	WITHOUT_CLASSIFICATION	3.068852386254415E-6	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999911667493243	WITHOUT_CLASSIFICATION	8.8332506756942E-6	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999971964264934	WITHOUT_CLASSIFICATION	2.8035735064903016E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999995884185805	WITHOUT_CLASSIFICATION	4.1158141944107573E-7	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.99999043021457	WITHOUT_CLASSIFICATION	9.569785430035109E-6	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999431325806	WITHOUT_CLASSIFICATION	5.686741943296597E-8	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999807662024223	WITHOUT_CLASSIFICATION	1.9233797577760086E-5	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999974729139763	WITHOUT_CLASSIFICATION	2.5270860237297E-6	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999956501192963	WITHOUT_CLASSIFICATION	4.3498807036962836E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999845338030537	WITHOUT_CLASSIFICATION	1.546619694634643E-5	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999993921749395	WITHOUT_CLASSIFICATION	6.078250605316824E-7	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9984630252782039	WITHOUT_CLASSIFICATION	0.0015369747217962443	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.999559083516057	WITHOUT_CLASSIFICATION	4.4091648394305866E-4	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9893783448352002	WITHOUT_CLASSIFICATION	0.010621655164799763	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994710241521143	WITHOUT_CLASSIFICATION	5.289758478855963E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999994007761069	WITHOUT_CLASSIFICATION	5.992238930823181E-7	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999845338030537	WITHOUT_CLASSIFICATION	1.546619694634643E-5	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999704017309793	WITHOUT_CLASSIFICATION	2.9598269020671052E-5	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.999999999984539	WITHOUT_CLASSIFICATION	1.5461012937357393E-11	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9999308373797372	WITHOUT_CLASSIFICATION	6.916262026282915E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999978625351914	WITHOUT_CLASSIFICATION	2.137464808611792E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999999886373	WITHOUT_CLASSIFICATION	1.1362730573821421E-11	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999999849548612	WITHOUT_CLASSIFICATION	1.504513872865186E-8	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999910231318219	WITHOUT_CLASSIFICATION	8.976868178122624E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999997362687	WITHOUT_CLASSIFICATION	2.6373121112600177E-10	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.999946409985178	WITHOUT_CLASSIFICATION	5.359001482204694E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999978625351914	WITHOUT_CLASSIFICATION	2.137464808611792E-6	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999449185406	WITHOUT_CLASSIFICATION	5.508145942985758E-8	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999996581422	WITHOUT_CLASSIFICATION	3.4185779469003857E-10	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999998308131318	WITHOUT_CLASSIFICATION	1.6918686826382246E-7	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999811802844506	WITHOUT_CLASSIFICATION	1.8819715549359288E-5	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999997719308601	WITHOUT_CLASSIFICATION	2.2806913983101243E-7	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999996753520725	WITHOUT_CLASSIFICATION	3.2464792755303526E-7	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999920597591	WITHOUT_CLASSIFICATION	7.940240889483842E-9	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999998747160677	WITHOUT_CLASSIFICATION	1.2528393241918858E-7	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999992124281403	WITHOUT_CLASSIFICATION	7.875718597538366E-7	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999912876933286	WITHOUT_CLASSIFICATION	8.712306671498362E-6	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999964660798485	WITHOUT_CLASSIFICATION	3.5339201515854536E-6	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999996196395637	WITHOUT_CLASSIFICATION	3.8036043622758737E-7	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999971028189761	WITHOUT_CLASSIFICATION	2.897181023895194E-6	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.999987282891719	WITHOUT_CLASSIFICATION	1.2717108280954294E-5	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999991672397367	WITHOUT_CLASSIFICATION	8.327602633028484E-6	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999902687686013	WITHOUT_CLASSIFICATION	9.731231398669925E-6	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999775175447856	WITHOUT_CLASSIFICATION	2.248245521444989E-5	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999980315655568	WITHOUT_CLASSIFICATION	1.968434443242815E-6	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999865118940897	WITHOUT_CLASSIFICATION	1.3488105910382129E-5	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999984309805593	WITHOUT_CLASSIFICATION	1.5690194406829344E-6	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.999998881320121	WITHOUT_CLASSIFICATION	1.1186798789106104E-6	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998481163280102	WITHOUT_CLASSIFICATION	1.518836719897532E-4	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999999253592251	WITHOUT_CLASSIFICATION	7.46407749137602E-8	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999998299650918	WITHOUT_CLASSIFICATION	1.700349081541003E-7	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999995362995565	WITHOUT_CLASSIFICATION	4.6370044338274456E-7	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999907999309107	WITHOUT_CLASSIFICATION	9.200069089298131E-5	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9998950199565974	WITHOUT_CLASSIFICATION	1.0498004340268383E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999998348196032	WITHOUT_CLASSIFICATION	1.651803967070489E-7	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999194979307674	WITHOUT_CLASSIFICATION	8.050206923263759E-5	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999893265872	WITHOUT_CLASSIFICATION	1.0673412782438838E-8	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9998444233692344	WITHOUT_CLASSIFICATION	1.5557663076557724E-4	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9999209810735472	WITHOUT_CLASSIFICATION	7.901892645278098E-5	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999999079489726	WITHOUT_CLASSIFICATION	9.205102728011548E-8	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988462521833846	WITHOUT_CLASSIFICATION	0.0011537478166152792	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998984449990537	WITHOUT_CLASSIFICATION	1.0155500094625891E-4	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999940382388424	WITHOUT_CLASSIFICATION	5.961761157628659E-6	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999473811727146	WITHOUT_CLASSIFICATION	5.261882728545383E-5	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.999999790219209	WITHOUT_CLASSIFICATION	2.0978079100802524E-7	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999974668283644	WITHOUT_CLASSIFICATION	2.533171635447598E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999974668283644	WITHOUT_CLASSIFICATION	2.533171635447598E-6	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999631078883	WITHOUT_CLASSIFICATION	3.689211182642724E-8	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999928379784783	WITHOUT_CLASSIFICATION	7.1620215216798446E-6	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.99981895086881	WITHOUT_CLASSIFICATION	1.810491311898989E-4	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999978398648653	WITHOUT_CLASSIFICATION	2.1601351346208883E-6	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999961106814573	WITHOUT_CLASSIFICATION	3.889318542653941E-6	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999845607351687	WITHOUT_CLASSIFICATION	1.5439264831337252E-5	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999990175623683	WITHOUT_CLASSIFICATION	9.824376316913349E-7	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999995890909213	WITHOUT_CLASSIFICATION	4.109090785697225E-7	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999994614966952	WITHOUT_CLASSIFICATION	5.385033048948406E-7	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999987373099	WITHOUT_CLASSIFICATION	1.2626900571678973E-9	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999784037821	WITHOUT_CLASSIFICATION	2.1596217838603725E-8	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999776638905993	WITHOUT_CLASSIFICATION	2.2336109400705733E-5	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999779839650812	WITHOUT_CLASSIFICATION	2.2016034918758888E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999974668283644	WITHOUT_CLASSIFICATION	2.533171635447598E-6	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999894736265359	WITHOUT_CLASSIFICATION	1.0526373463975647E-5	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999993088892761	WITHOUT_CLASSIFICATION	6.911107239836392E-7	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999986216602829	WITHOUT_CLASSIFICATION	1.3783397171088907E-6	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999963739880515	WITHOUT_CLASSIFICATION	3.626011948539798E-6	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999998590072066	WITHOUT_CLASSIFICATION	1.4099279343024362E-7	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999893877632099	WITHOUT_CLASSIFICATION	1.061223679005177E-5	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999968544705726	WITHOUT_CLASSIFICATION	3.145529427321758E-6	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999936949833409	WITHOUT_CLASSIFICATION	6.305016659116642E-6	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999987020302631	WITHOUT_CLASSIFICATION	1.2979697369907836E-6	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999802345835829	WITHOUT_CLASSIFICATION	1.976541641712909E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999984105262094	WITHOUT_CLASSIFICATION	1.5894737905763045E-6	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988462521833846	WITHOUT_CLASSIFICATION	0.0011537478166152792	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999974668283644	WITHOUT_CLASSIFICATION	2.533171635447598E-6	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999992887571969	WITHOUT_CLASSIFICATION	7.112428029789697E-7	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999999127981318	WITHOUT_CLASSIFICATION	8.72018681993135E-7	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999990825747408	WITHOUT_CLASSIFICATION	9.174252592346487E-7	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.99996298270845	WITHOUT_CLASSIFICATION	3.7017291550074733E-5	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999996260582766	WITHOUT_CLASSIFICATION	3.73941723303689E-7	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.999912932104022	WITHOUT_CLASSIFICATION	8.706789597808171E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995552539879	WITHOUT_CLASSIFICATION	4.447460120605038E-7	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999544627353395	WITHOUT_CLASSIFICATION	4.5537264660392676E-5	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999971420989022	WITHOUT_CLASSIFICATION	2.8579010977129026E-6	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999981924649124	WITHOUT_CLASSIFICATION	1.8075350876037208E-6	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999976093683025	WITHOUT_CLASSIFICATION	2.3906316975437034E-6	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999399014335995	WITHOUT_CLASSIFICATION	6.009856640047864E-5	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999996438097554	WITHOUT_CLASSIFICATION	3.561902446974532E-7	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999992953525525	WITHOUT_CLASSIFICATION	7.0464744751156065E-6	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999501590715708	WITHOUT_CLASSIFICATION	4.98409284292789E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999998753151977	WITHOUT_CLASSIFICATION	1.2468480225378545E-7	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999991430244	WITHOUT_CLASSIFICATION	8.56975632093201E-10	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.999999835697054	WITHOUT_CLASSIFICATION	1.6430294609126285E-7	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999998715991981	WITHOUT_CLASSIFICATION	1.2840080191368598E-7	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999167086688	WITHOUT_CLASSIFICATION	8.329133119239575E-8	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999953889015689	WITHOUT_CLASSIFICATION	4.611098431070495E-6	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999953889015689	WITHOUT_CLASSIFICATION	4.611098431070495E-6	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999997127064586	WITHOUT_CLASSIFICATION	2.872935414109275E-7	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999945478852781	WITHOUT_CLASSIFICATION	5.452114721934948E-6	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999987304105966	WITHOUT_CLASSIFICATION	1.2695894033927218E-6	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.999994649828519	WITHOUT_CLASSIFICATION	5.350171480865453E-6	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999944697296301	WITHOUT_CLASSIFICATION	5.530270369950912E-6	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999993796254812	WITHOUT_CLASSIFICATION	6.203745187193826E-7	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999851371547246	WITHOUT_CLASSIFICATION	1.4862845275481065E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999992457048879	WITHOUT_CLASSIFICATION	7.542951122173089E-7	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999992457048879	WITHOUT_CLASSIFICATION	7.542951122173089E-7	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999780176867874	WITHOUT_CLASSIFICATION	2.1982313212612236E-5	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999220565969944	WITHOUT_CLASSIFICATION	7.794340300557243E-5	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999988177033476	WITHOUT_CLASSIFICATION	1.1822966524243843E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999996082036738	WITHOUT_CLASSIFICATION	3.9179632620830375E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999996082036738	WITHOUT_CLASSIFICATION	3.9179632620830375E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999996082036738	WITHOUT_CLASSIFICATION	3.9179632620830375E-6	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9998951648803778	WITHOUT_CLASSIFICATION	1.0483511962230075E-4	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.99999913281857	WITHOUT_CLASSIFICATION	8.671814301132944E-7	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9998491364375363	WITHOUT_CLASSIFICATION	1.5086356246375097E-4	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9984331456469667	WITHOUT_CLASSIFICATION	0.001566854353033249	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999329944518508	WITHOUT_CLASSIFICATION	6.700554814914853E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999974668283644	WITHOUT_CLASSIFICATION	2.533171635447598E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999974668283644	WITHOUT_CLASSIFICATION	2.533171635447598E-6	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999909613884909	WITHOUT_CLASSIFICATION	9.038611509135081E-6	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999904642624	WITHOUT_CLASSIFICATION	9.535737581021238E-9	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999887089916852	WITHOUT_CLASSIFICATION	1.1291008314689543E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999499976924	WITHOUT_CLASSIFICATION	5.000230758811243E-8	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999984067562684	WITHOUT_CLASSIFICATION	1.593243731510043E-6	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999993512052585	WITHOUT_CLASSIFICATION	6.487947413804476E-7	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999842431655999	WITHOUT_CLASSIFICATION	1.5756834400099243E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999939372262447	WITHOUT_CLASSIFICATION	6.062773755217432E-6	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999985839754794	WITHOUT_CLASSIFICATION	1.4160245206171845E-6	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999995091236317	WITHOUT_CLASSIFICATION	4.908763683688786E-7	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999863375972519	WITHOUT_CLASSIFICATION	1.3662402748243803E-5	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999912402800861	WITHOUT_CLASSIFICATION	8.759719913777152E-6	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999912402800861	WITHOUT_CLASSIFICATION	8.759719913777152E-6	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999948713930567	WITHOUT_CLASSIFICATION	5.128606943360319E-6	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999948713930567	WITHOUT_CLASSIFICATION	5.128606943360319E-6	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999945024493009	WITHOUT_CLASSIFICATION	5.497550699082771E-6	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999944315664175	WITHOUT_CLASSIFICATION	5.568433582399458E-6	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999944315664175	WITHOUT_CLASSIFICATION	5.568433582399458E-6	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999933189392076	WITHOUT_CLASSIFICATION	6.681060792353089E-6	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999993257882114	WITHOUT_CLASSIFICATION	6.742117886053882E-6	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9993574413376367	WITHOUT_CLASSIFICATION	6.425586623632682E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999953889015689	WITHOUT_CLASSIFICATION	4.611098431070495E-6	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999689260530908	WITHOUT_CLASSIFICATION	3.107394690927001E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999993257882114	WITHOUT_CLASSIFICATION	6.742117886053882E-6	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999269159749211	WITHOUT_CLASSIFICATION	7.308402507895251E-5	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999848418144537	WITHOUT_CLASSIFICATION	1.5158185546258667E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999979536030158	WITHOUT_CLASSIFICATION	2.046396984164939E-6	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999973972041153	WITHOUT_CLASSIFICATION	2.6027958847782515E-6	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999997707307138	WITHOUT_CLASSIFICATION	2.2926928624450338E-7	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999833279229055	WITHOUT_CLASSIFICATION	1.667207709454001E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999999621189825	WITHOUT_CLASSIFICATION	3.788101749425416E-7	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999994888610644	WITHOUT_CLASSIFICATION	5.111389355772496E-7	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999996829360297	WITHOUT_CLASSIFICATION	3.1706397029808737E-7	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999938540234198	WITHOUT_CLASSIFICATION	6.1459765802122E-6	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.999999697647072	WITHOUT_CLASSIFICATION	3.023529280724408E-7	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999959588293511	WITHOUT_CLASSIFICATION	4.041170648991531E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999970476926522	WITHOUT_CLASSIFICATION	2.95230734794268E-6	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999993583579739	WITHOUT_CLASSIFICATION	6.416420260846709E-7	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999220839827767	WITHOUT_CLASSIFICATION	7.79160172232882E-5	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999998297609174	WITHOUT_CLASSIFICATION	1.7023908264014197E-7	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999759240805148	WITHOUT_CLASSIFICATION	2.407591948515756E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999992142025126	WITHOUT_CLASSIFICATION	7.857974873322395E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999992142025126	WITHOUT_CLASSIFICATION	7.857974873322395E-7	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999985731275076	WITHOUT_CLASSIFICATION	1.4268724923764973E-6	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.999987809024645	WITHOUT_CLASSIFICATION	1.2190975355093051E-5	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999961943499442	WITHOUT_CLASSIFICATION	3.8056500556294213E-6	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999993163737206	WITHOUT_CLASSIFICATION	6.836262793966072E-7	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999997642278948	WITHOUT_CLASSIFICATION	2.3577210522176684E-7	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999899929567765	WITHOUT_CLASSIFICATION	1.0007043223437027E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999992773093775	WITHOUT_CLASSIFICATION	7.22690622527113E-7	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999955708257635	WITHOUT_CLASSIFICATION	4.42917423655832E-6	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999998219314679	WITHOUT_CLASSIFICATION	1.7806853215138713E-7	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999985332417423	WITHOUT_CLASSIFICATION	1.4667582576810979E-6	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999975560432075	WITHOUT_CLASSIFICATION	2.4439567925739086E-6	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999399014335995	WITHOUT_CLASSIFICATION	6.009856640047864E-5	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999997385733844	WITHOUT_CLASSIFICATION	2.6142661550219136E-7	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999999318358117	WITHOUT_CLASSIFICATION	6.816418824575607E-8	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999755422988406	WITHOUT_CLASSIFICATION	2.445770115938012E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999993760151303	WITHOUT_CLASSIFICATION	6.239848696083067E-7	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999928579065707	WITHOUT_CLASSIFICATION	7.14209342929062E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999928579065707	WITHOUT_CLASSIFICATION	7.14209342929062E-6	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999399231890472	WITHOUT_CLASSIFICATION	6.007681095284858E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.999999330001088	WITHOUT_CLASSIFICATION	6.699989121103707E-7	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999979331089529	WITHOUT_CLASSIFICATION	2.066891047131742E-6	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999980707851343	WITHOUT_CLASSIFICATION	1.929214865768734E-6	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999950552090036	WITHOUT_CLASSIFICATION	4.944790996464603E-6	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999994716495548	WITHOUT_CLASSIFICATION	5.283504451170484E-7	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9997123147328859	WITHOUT_CLASSIFICATION	2.876852671141033E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999963703207195	WITHOUT_CLASSIFICATION	3.6296792803859022E-6	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999989363802974	WITHOUT_CLASSIFICATION	1.0636197026760955E-6	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.999999991976244	WITHOUT_CLASSIFICATION	8.023755981341075E-9	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999656776227696	WITHOUT_CLASSIFICATION	3.432237723038706E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999963703207195	WITHOUT_CLASSIFICATION	3.6296792803859022E-6	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999863589901137	WITHOUT_CLASSIFICATION	1.3641009886207406E-5	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.999981827533816	WITHOUT_CLASSIFICATION	1.8172466183961393E-5	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999972633111	WITHOUT_CLASSIFICATION	2.7366888986250542E-9	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999960340240458	WITHOUT_CLASSIFICATION	3.965975954182456E-6	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999770159439	WITHOUT_CLASSIFICATION	2.298405606297559E-8	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999997235683058	WITHOUT_CLASSIFICATION	2.7643169414615945E-7	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999996740746268	WITHOUT_CLASSIFICATION	3.259253733009256E-7	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999994469102637	WITHOUT_CLASSIFICATION	5.530897363911792E-7	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999917401224	WITHOUT_CLASSIFICATION	8.259877639082992E-9	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999993311711349	WITHOUT_CLASSIFICATION	6.688288651121392E-7	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.999997870810705	WITHOUT_CLASSIFICATION	2.1291892949163992E-6	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999999987826762	WITHOUT_CLASSIFICATION	1.2173238080729722E-8	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999994184385865	WITHOUT_CLASSIFICATION	5.81561413529973E-7	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999994970682821	WITHOUT_CLASSIFICATION	5.029317179259273E-7	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999933179560515	WITHOUT_CLASSIFICATION	6.682043948556896E-6	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999546137679	WITHOUT_CLASSIFICATION	4.538623213116055E-8	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999992327069522	WITHOUT_CLASSIFICATION	7.67293047695902E-7	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999528790031053	WITHOUT_CLASSIFICATION	4.7120996894695356E-5	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999608247836407	WITHOUT_CLASSIFICATION	3.917521635919045E-5	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999997959372021	WITHOUT_CLASSIFICATION	2.0406279787024956E-7	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.999987520235402	WITHOUT_CLASSIFICATION	1.2479764597874178E-5	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9997756252648686	WITHOUT_CLASSIFICATION	2.243747351314265E-4	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998757455640025	WITHOUT_CLASSIFICATION	1.2425443599749055E-4	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999982299665066	WITHOUT_CLASSIFICATION	1.7700334934900025E-6	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999960779746501	WITHOUT_CLASSIFICATION	3.922025349909112E-6	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999173426541507	WITHOUT_CLASSIFICATION	8.265734584938035E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999990615481053	WITHOUT_CLASSIFICATION	9.384518947709638E-7	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999995850280343	WITHOUT_CLASSIFICATION	4.149719657065921E-7	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999923520054399	WITHOUT_CLASSIFICATION	7.647994560052105E-6	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999744443334834	WITHOUT_CLASSIFICATION	2.5555666516675245E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999791074441442	WITHOUT_CLASSIFICATION	2.0892555855744357E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999971783346852	WITHOUT_CLASSIFICATION	2.821665314916911E-6	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999980780461708	WITHOUT_CLASSIFICATION	1.9219538292022447E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999989470298087	WITHOUT_CLASSIFICATION	1.0529701912515373E-6	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999992452715497	WITHOUT_CLASSIFICATION	7.547284502504258E-7	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999998785634623	WITHOUT_CLASSIFICATION	1.2143653773139283E-7	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999927521231768	WITHOUT_CLASSIFICATION	7.247876823144328E-6	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999967667341951	WITHOUT_CLASSIFICATION	3.2332658048907564E-6	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999626106008175	WITHOUT_CLASSIFICATION	3.738939918255955E-5	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999897483053704	WITHOUT_CLASSIFICATION	1.0251694629655786E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999953078850645	WITHOUT_CLASSIFICATION	4.692114935436387E-6	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999999851901918	WITHOUT_CLASSIFICATION	1.480980821209291E-7	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999998612685095	WITHOUT_CLASSIFICATION	1.3873149040341522E-7	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999997870776778	WITHOUT_CLASSIFICATION	2.1292232227709718E-7	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999972902200317	WITHOUT_CLASSIFICATION	2.7097799682159206E-6	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999998521630777	WITHOUT_CLASSIFICATION	1.4783692238658243E-7	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999369161451837	WITHOUT_CLASSIFICATION	6.308385481632357E-5	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999656695803645	WITHOUT_CLASSIFICATION	3.4330419635536557E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999982514624222	WITHOUT_CLASSIFICATION	1.7485375779180451E-6	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999998259212566	WITHOUT_CLASSIFICATION	1.7407874339063076E-7	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981299234803	WITHOUT_CLASSIFICATION	1.8700765196998217E-6	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999996440431704	WITHOUT_CLASSIFICATION	3.559568295212229E-7	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.999999942707692	WITHOUT_CLASSIFICATION	5.7292307980710664E-8	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999822722387	WITHOUT_CLASSIFICATION	1.7727761260609275E-8	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999991305261039	WITHOUT_CLASSIFICATION	8.694738960511318E-7	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999997421323938	WITHOUT_CLASSIFICATION	2.5786760617575814E-7	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999993955796659	WITHOUT_CLASSIFICATION	6.04420334101805E-6	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999999899376085	WITHOUT_CLASSIFICATION	1.0062391430826408E-8	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999976904638119	WITHOUT_CLASSIFICATION	2.309536188125133E-6	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.999998822631359	WITHOUT_CLASSIFICATION	1.1773686409462736E-6	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999991261474777	WITHOUT_CLASSIFICATION	8.738525223163791E-7	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999989953845484	WITHOUT_CLASSIFICATION	1.0046154516194766E-6	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999924799873218	WITHOUT_CLASSIFICATION	7.520012678284584E-6	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999977014754	WITHOUT_CLASSIFICATION	2.2985246458876185E-9	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999741697863053	WITHOUT_CLASSIFICATION	2.5830213694647598E-5	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999809846715761	WITHOUT_CLASSIFICATION	1.9015328423866238E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981299234803	WITHOUT_CLASSIFICATION	1.8700765196998217E-6	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999983083126033	WITHOUT_CLASSIFICATION	1.6916873968147937E-6	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999934682256707	WITHOUT_CLASSIFICATION	6.531774329262348E-6	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999989274004087	WITHOUT_CLASSIFICATION	1.0725995911864445E-6	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999998920683546	WITHOUT_CLASSIFICATION	1.0793164537195476E-7	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999844830205272	WITHOUT_CLASSIFICATION	1.5516979472726987E-5	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999995207098491	WITHOUT_CLASSIFICATION	4.792901508409316E-7	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999989363802974	WITHOUT_CLASSIFICATION	1.0636197026760955E-6	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999462205067491	WITHOUT_CLASSIFICATION	5.377949325090678E-4	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999992452715497	WITHOUT_CLASSIFICATION	7.547284502504258E-7	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9996270700037012	WITHOUT_CLASSIFICATION	3.729299962987758E-4	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999988528741025	WITHOUT_CLASSIFICATION	1.1471258975045676E-6	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999927005843775	WITHOUT_CLASSIFICATION	7.299415622453995E-6	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999908441398508	WITHOUT_CLASSIFICATION	9.155860149244548E-6	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999950355454894	WITHOUT_CLASSIFICATION	4.964454510513013E-6	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999992748502867	WITHOUT_CLASSIFICATION	7.251497132739211E-7	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999434979331	WITHOUT_CLASSIFICATION	5.65020670217956E-8	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999987975394561	WITHOUT_CLASSIFICATION	1.202460543900076E-6	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999935547620569	WITHOUT_CLASSIFICATION	6.44523794319028E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999947903984	WITHOUT_CLASSIFICATION	5.209601636519363E-9	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999989233032683	WITHOUT_CLASSIFICATION	1.076696731758686E-6	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999963560695603	WITHOUT_CLASSIFICATION	3.643930439673918E-6	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999884311447	WITHOUT_CLASSIFICATION	1.1568855368907958E-8	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999884311447	WITHOUT_CLASSIFICATION	1.1568855368907958E-8	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999982670706349	WITHOUT_CLASSIFICATION	1.7329293650641215E-6	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999984873848715	WITHOUT_CLASSIFICATION	1.512615128366304E-6	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999862671999	WITHOUT_CLASSIFICATION	1.3732800147703199E-8	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999997694937997	WITHOUT_CLASSIFICATION	2.305062004565115E-7	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999902545739425	WITHOUT_CLASSIFICATION	9.745426057473831E-6	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999997433879959	WITHOUT_CLASSIFICATION	2.5661200411283817E-7	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999139313137	WITHOUT_CLASSIFICATION	8.606868630500133E-8	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999998171926575	WITHOUT_CLASSIFICATION	1.8280734257567543E-7	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999777036733	WITHOUT_CLASSIFICATION	2.2296326753165277E-8	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.999999209143854	WITHOUT_CLASSIFICATION	7.90856146061537E-7	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999873281464733	WITHOUT_CLASSIFICATION	1.2671853526635138E-5	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999878404632015	WITHOUT_CLASSIFICATION	1.2159536798476097E-5	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999957524593603	WITHOUT_CLASSIFICATION	4.247540639593773E-6	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999987831136	WITHOUT_CLASSIFICATION	1.216886427530434E-9	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999900202807759	WITHOUT_CLASSIFICATION	9.979719224179396E-6	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999996969356811	WITHOUT_CLASSIFICATION	3.0306431884982864E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999964173452639	WITHOUT_CLASSIFICATION	3.5826547360387557E-6	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999995412898024	WITHOUT_CLASSIFICATION	4.587101976618148E-7	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999973385791606	WITHOUT_CLASSIFICATION	2.661420839344565E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993726248234	WITHOUT_CLASSIFICATION	6.273751765271972E-7	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999433841401	WITHOUT_CLASSIFICATION	5.6615859828422436E-8	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999934693845878	WITHOUT_CLASSIFICATION	6.530615412238958E-6	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999983285424315	WITHOUT_CLASSIFICATION	1.671457568372346E-6	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999936226483447	WITHOUT_CLASSIFICATION	6.377351655233141E-6	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9976448943389313	WITHOUT_CLASSIFICATION	0.0023551056610686054	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999526223223708	WITHOUT_CLASSIFICATION	4.7377677629189245E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993726248234	WITHOUT_CLASSIFICATION	6.273751765271972E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993726248234	WITHOUT_CLASSIFICATION	6.273751765271972E-7	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999989533273138	WITHOUT_CLASSIFICATION	1.0466726862224631E-6	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999984663983267	WITHOUT_CLASSIFICATION	1.5336016733727176E-6	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999996826130093	WITHOUT_CLASSIFICATION	3.173869906571E-7	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999941886454107	WITHOUT_CLASSIFICATION	5.81135458927272E-6	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9865130372761244	WITHOUT_CLASSIFICATION	0.013486962723875645	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.999991007198745	WITHOUT_CLASSIFICATION	8.992801254947573E-6	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999840034073564	WITHOUT_CLASSIFICATION	1.599659264362327E-5	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9998732696637533	WITHOUT_CLASSIFICATION	1.2673033624662516E-4	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999979132337453	WITHOUT_CLASSIFICATION	2.086766254731918E-6	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999982605251715	WITHOUT_CLASSIFICATION	1.7394748285370555E-6	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999938744353997	WITHOUT_CLASSIFICATION	6.1255646003388815E-6	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9994578559433426	WITHOUT_CLASSIFICATION	5.421440566573791E-4	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999540319620422	WITHOUT_CLASSIFICATION	4.596803795769107E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999989454321931	WITHOUT_CLASSIFICATION	1.0545678068481419E-6	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999663361817803	WITHOUT_CLASSIFICATION	3.366381821960233E-5	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999541439766	WITHOUT_CLASSIFICATION	4.585602338339305E-8	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999881077901402	WITHOUT_CLASSIFICATION	1.1892209859636712E-5	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999982683805885	WITHOUT_CLASSIFICATION	1.7316194116345595E-6	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999985946871792	WITHOUT_CLASSIFICATION	1.4053128207274444E-6	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999271649717589	WITHOUT_CLASSIFICATION	7.28350282411025E-5	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.6132185076289719	IMPLEMENTATION	0.3867814923710281	WITHOUT_CLASSIFICATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999962428312573	WITHOUT_CLASSIFICATION	3.7571687427023674E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999951514963087	WITHOUT_CLASSIFICATION	4.848503691295148E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999998425183513	WITHOUT_CLASSIFICATION	1.5748164870572013E-6	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919176274951	WITHOUT_CLASSIFICATION	8.082372504964996E-6	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999930316128245	WITHOUT_CLASSIFICATION	6.968387175522082E-6	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999104054549	WITHOUT_CLASSIFICATION	8.959454508785418E-8	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999994792929084	WITHOUT_CLASSIFICATION	5.207070915963416E-7	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999986418751538	WITHOUT_CLASSIFICATION	1.3581248461901206E-5	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999992556331911	WITHOUT_CLASSIFICATION	7.443668087665292E-7	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999989491023699	WITHOUT_CLASSIFICATION	1.0508976301441687E-6	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999858584240406	WITHOUT_CLASSIFICATION	1.414157595934726E-5	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999951644841076	WITHOUT_CLASSIFICATION	4.8355158923889E-6	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999985763884036	WITHOUT_CLASSIFICATION	1.4236115963004986E-6	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999999394319475	WITHOUT_CLASSIFICATION	6.056805247476616E-8	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999993218978862	WITHOUT_CLASSIFICATION	6.78102113734092E-7	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999904995343198	WITHOUT_CLASSIFICATION	9.500465680184844E-6	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999998962811016	WITHOUT_CLASSIFICATION	1.0371889839175056E-7	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999017927305958	WITHOUT_CLASSIFICATION	9.820726940413305E-5	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999997476138093	WITHOUT_CLASSIFICATION	2.5238619066096146E-7	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999997722311684	WITHOUT_CLASSIFICATION	2.277688315951437E-6	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999995426871093	WITHOUT_CLASSIFICATION	4.573128906984313E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999941353055534	WITHOUT_CLASSIFICATION	5.864694446659128E-6	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999949765939462	WITHOUT_CLASSIFICATION	5.023406053800733E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999941353055534	WITHOUT_CLASSIFICATION	5.864694446659128E-6	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999968125808	WITHOUT_CLASSIFICATION	3.1874193009934773E-9	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999939978114396	WITHOUT_CLASSIFICATION	6.002188560463512E-6	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999934859332628	WITHOUT_CLASSIFICATION	6.514066737200297E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999926174396616	WITHOUT_CLASSIFICATION	7.382560338416821E-6	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999943329552273	WITHOUT_CLASSIFICATION	5.667044772761941E-6	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999557128826285	WITHOUT_CLASSIFICATION	4.428711737146367E-5	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999996576527351	WITHOUT_CLASSIFICATION	3.42347264951091E-7	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999911168939026	WITHOUT_CLASSIFICATION	8.883106097389085E-6	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999994331568978	WITHOUT_CLASSIFICATION	5.668431022520897E-7	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999999886389971	WITHOUT_CLASSIFICATION	1.1361002911672969E-7	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999994913826303	WITHOUT_CLASSIFICATION	5.086173696139982E-7	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999888985352852	WITHOUT_CLASSIFICATION	1.1101464714799016E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999996971098776	WITHOUT_CLASSIFICATION	3.0289012244743885E-7	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999978010404464	WITHOUT_CLASSIFICATION	2.1989595536762992E-6	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999908386818008	WITHOUT_CLASSIFICATION	9.161318199258539E-6	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999914184131177	WITHOUT_CLASSIFICATION	8.581586882253574E-6	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999989874551087	WITHOUT_CLASSIFICATION	1.0125448912787763E-6	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999067835335	WITHOUT_CLASSIFICATION	9.321646654310918E-8	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999996323790219	WITHOUT_CLASSIFICATION	3.676209781492176E-7	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999997836641448	WITHOUT_CLASSIFICATION	2.163358552526991E-7	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999975657670835	WITHOUT_CLASSIFICATION	2.4342329164931484E-6	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999906403745547	WITHOUT_CLASSIFICATION	9.359625445309028E-6	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999790336335524	WITHOUT_CLASSIFICATION	2.0966366447612582E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997364536423133	WITHOUT_CLASSIFICATION	2.6354635768666417E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999920727613925	WITHOUT_CLASSIFICATION	7.927238607415226E-6	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999985613971243	WITHOUT_CLASSIFICATION	1.4386028756345346E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999987920519492	WITHOUT_CLASSIFICATION	1.2079480507353355E-6	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999953131535811	WITHOUT_CLASSIFICATION	4.686846418840231E-6	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999995593346654	WITHOUT_CLASSIFICATION	4.406653344617774E-7	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999986317924884	WITHOUT_CLASSIFICATION	1.3682075116200244E-6	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999995943518737	WITHOUT_CLASSIFICATION	4.0564812623490533E-7	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999994859179993	WITHOUT_CLASSIFICATION	5.140820006726496E-7	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999992222276	WITHOUT_CLASSIFICATION	7.777723402951605E-10	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999980429007357	WITHOUT_CLASSIFICATION	1.9570992643404646E-6	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999996220766484	WITHOUT_CLASSIFICATION	3.779233516184803E-7	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999936012551395	WITHOUT_CLASSIFICATION	6.398744860418506E-6	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999977544183989	WITHOUT_CLASSIFICATION	2.245581601034436E-6	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999997570476067	WITHOUT_CLASSIFICATION	2.4295239332481224E-7	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9999780248908918	WITHOUT_CLASSIFICATION	2.1975109108213182E-5	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999679374374	WITHOUT_CLASSIFICATION	3.206256261358372E-8	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.999998696611969	WITHOUT_CLASSIFICATION	1.3033880309009657E-6	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999660331991341	WITHOUT_CLASSIFICATION	3.3966800865935085E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998734153440746	WITHOUT_CLASSIFICATION	1.2658465592533752E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999985613971243	WITHOUT_CLASSIFICATION	1.4386028756345346E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999064833730128	WITHOUT_CLASSIFICATION	9.351662698727697E-5	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999922962800912	WITHOUT_CLASSIFICATION	7.703719908713052E-6	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999773359389382	WITHOUT_CLASSIFICATION	2.266406106178393E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999999928945477	WITHOUT_CLASSIFICATION	7.105452306728785E-8	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999995499524904	WITHOUT_CLASSIFICATION	4.5004750960383475E-7	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999867192564046	WITHOUT_CLASSIFICATION	1.328074359550916E-5	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.999880349837481	WITHOUT_CLASSIFICATION	1.1965016251902696E-4	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999950017638038	WITHOUT_CLASSIFICATION	4.998236196143016E-6	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999944557435587	WITHOUT_CLASSIFICATION	5.544256441277538E-6	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999496488994988	WITHOUT_CLASSIFICATION	5.0351100501203876E-5	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9999870943981907	WITHOUT_CLASSIFICATION	1.2905601809329903E-5	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999990324265767	WITHOUT_CLASSIFICATION	9.675734233232552E-7	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999754699866857	WITHOUT_CLASSIFICATION	2.4530013314238025E-5	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999934452555923	WITHOUT_CLASSIFICATION	6.554744407713463E-6	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999974945730558	WITHOUT_CLASSIFICATION	2.50542694427541E-6	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999194523727	WITHOUT_CLASSIFICATION	8.054762734438709E-8	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999946188120002	WITHOUT_CLASSIFICATION	5.381187999723982E-6	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999997358114113	WITHOUT_CLASSIFICATION	2.641885886197479E-7	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999676853011132	WITHOUT_CLASSIFICATION	3.2314698886692716E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999064833730128	WITHOUT_CLASSIFICATION	9.351662698727697E-5	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999927053668358	WITHOUT_CLASSIFICATION	7.294633164120775E-6	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999806142709924	WITHOUT_CLASSIFICATION	1.9385729007659006E-5	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999995986875522	WITHOUT_CLASSIFICATION	4.0131244777895354E-7	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999974715014855	WITHOUT_CLASSIFICATION	2.5284985144612975E-6	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999998537182997	WITHOUT_CLASSIFICATION	1.4628170027795263E-7	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9997216332432202	WITHOUT_CLASSIFICATION	2.783667567798075E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9997216332432202	WITHOUT_CLASSIFICATION	2.783667567798075E-4	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999997166501634	WITHOUT_CLASSIFICATION	2.8334983659186374E-7	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9997216332432202	WITHOUT_CLASSIFICATION	2.783667567798075E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9997216332432202	WITHOUT_CLASSIFICATION	2.783667567798075E-4	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9998420520787638	WITHOUT_CLASSIFICATION	1.5794792123622402E-4	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999999995901181	WITHOUT_CLASSIFICATION	4.09881892790997E-9	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999996859500426	WITHOUT_CLASSIFICATION	3.1404995728735777E-7	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999989505265624	WITHOUT_CLASSIFICATION	1.0494734375199257E-6	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999999984106646	WITHOUT_CLASSIFICATION	1.589335395476249E-8	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999999794007085	WITHOUT_CLASSIFICATION	2.0599291455325424E-8	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9997167020432632	WITHOUT_CLASSIFICATION	2.832979567368459E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999785608618	WITHOUT_CLASSIFICATION	2.1439138303851122E-8	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999322112768964	WITHOUT_CLASSIFICATION	6.77887231035977E-5	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999645115356466	WITHOUT_CLASSIFICATION	3.5488464353381284E-5	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.999972086362623	WITHOUT_CLASSIFICATION	2.7913637376970717E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999046614496202	WITHOUT_CLASSIFICATION	9.533855037987529E-5	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999957668688318	WITHOUT_CLASSIFICATION	4.233131168102573E-6	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999891579225622	WITHOUT_CLASSIFICATION	1.0842077437976162E-5	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999918295268307	WITHOUT_CLASSIFICATION	8.170473169305208E-6	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999974727668243	WITHOUT_CLASSIFICATION	2.5272331757063144E-6	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997299306047	WITHOUT_CLASSIFICATION	2.700693953260367E-7	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999934696213238	WITHOUT_CLASSIFICATION	6.530378676225924E-6	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999953500896823	WITHOUT_CLASSIFICATION	4.6499103177454595E-6	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.999991043250237	WITHOUT_CLASSIFICATION	8.956749762920078E-6	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999895418529271	WITHOUT_CLASSIFICATION	1.045814707301283E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999945003150892	WITHOUT_CLASSIFICATION	5.499684910823179E-6	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997299306047	WITHOUT_CLASSIFICATION	2.700693953260367E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999987920519492	WITHOUT_CLASSIFICATION	1.2079480507353355E-6	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9999778809763201	WITHOUT_CLASSIFICATION	2.211902367979714E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999985652269638	WITHOUT_CLASSIFICATION	1.434773036175126E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994261979576	WITHOUT_CLASSIFICATION	5.738020423910919E-7	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999947680640918	WITHOUT_CLASSIFICATION	5.231935908220797E-6	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999979428113013	WITHOUT_CLASSIFICATION	2.0571886987022977E-6	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9999981179966962	WITHOUT_CLASSIFICATION	1.8820033037145133E-6	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999457790300351	WITHOUT_CLASSIFICATION	5.4220969964880685E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999998146908734	WITHOUT_CLASSIFICATION	1.853091266025243E-6	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9915197988175215	WITHOUT_CLASSIFICATION	0.008480201182478511	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.999974937923195	WITHOUT_CLASSIFICATION	2.5062076805000997E-5	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999977636867291	WITHOUT_CLASSIFICATION	2.236313270910264E-6	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999991739089695	WITHOUT_CLASSIFICATION	8.260910305583291E-7	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999984523185228	WITHOUT_CLASSIFICATION	1.5476814771736761E-6	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998432599494385	WITHOUT_CLASSIFICATION	1.5674005056149224E-4	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999997278289862	WITHOUT_CLASSIFICATION	2.721710137853636E-7	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999988442646983	WITHOUT_CLASSIFICATION	1.1557353016255462E-6	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.999986602605096	WITHOUT_CLASSIFICATION	1.3397394903994499E-5	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999961516992655	WITHOUT_CLASSIFICATION	3.848300734542513E-6	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999958235892642	WITHOUT_CLASSIFICATION	4.176410735807889E-6	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.999939874410666	WITHOUT_CLASSIFICATION	6.0125589333972313E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9998678919957591	WITHOUT_CLASSIFICATION	1.321080042408221E-4	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999997119898257	WITHOUT_CLASSIFICATION	2.8801017427758794E-7	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999998146908734	WITHOUT_CLASSIFICATION	1.853091266025243E-6	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999992330896997	WITHOUT_CLASSIFICATION	7.669103002881599E-7	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9999603425131638	WITHOUT_CLASSIFICATION	3.9657486836133205E-5	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999274407494632	WITHOUT_CLASSIFICATION	7.255925053678757E-5	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999972194109809	WITHOUT_CLASSIFICATION	2.7805890191835162E-6	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987111268881	WITHOUT_CLASSIFICATION	1.288873111911305E-6	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.999987998169651	WITHOUT_CLASSIFICATION	1.2001830348910153E-5	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9999983695452659	WITHOUT_CLASSIFICATION	1.630454734031849E-6	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999957729930893	WITHOUT_CLASSIFICATION	4.22700691074655E-6	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999920722365455	WITHOUT_CLASSIFICATION	7.92776345457871E-6	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9997977908951309	WITHOUT_CLASSIFICATION	2.0220910486911582E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999989969231791	WITHOUT_CLASSIFICATION	1.0030768209951203E-6	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999990299071787	WITHOUT_CLASSIFICATION	9.700928212573618E-7	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999995359490836	WITHOUT_CLASSIFICATION	4.640509164334047E-7	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999994100688763	WITHOUT_CLASSIFICATION	5.899311236371923E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999965264089735	WITHOUT_CLASSIFICATION	3.4735910265481997E-6	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999502901578002	WITHOUT_CLASSIFICATION	4.970984219983246E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999988769374804	WITHOUT_CLASSIFICATION	1.1230625197339E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999989969231791	WITHOUT_CLASSIFICATION	1.0030768209951203E-6	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999596846397	WITHOUT_CLASSIFICATION	4.0315360362681564E-8	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999583162574537	WITHOUT_CLASSIFICATION	4.1683742546370305E-5	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.999998717589238	WITHOUT_CLASSIFICATION	1.2824107619757715E-6	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999999700141389	WITHOUT_CLASSIFICATION	2.9985861106784493E-7	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999991969129425	WITHOUT_CLASSIFICATION	8.030870575470659E-7	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999980778027828	WITHOUT_CLASSIFICATION	1.9221972172891935E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999965264089735	WITHOUT_CLASSIFICATION	3.4735910265481997E-6	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999991065486564	WITHOUT_CLASSIFICATION	8.934513436214314E-7	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991013873487	WITHOUT_CLASSIFICATION	8.986126511887459E-7	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994121182031	WITHOUT_CLASSIFICATION	5.878817968866495E-7	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990377460232993	WITHOUT_CLASSIFICATION	9.622539767006725E-4	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999323865208124	WITHOUT_CLASSIFICATION	6.761347918759468E-4	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997715636905193	WITHOUT_CLASSIFICATION	2.2843630948050952E-4	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999993940509921	WITHOUT_CLASSIFICATION	6.059490079211498E-7	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999993940509921	WITHOUT_CLASSIFICATION	6.059490079211498E-7	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999996080724075	WITHOUT_CLASSIFICATION	3.919275924719308E-7	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999980162317963	WITHOUT_CLASSIFICATION	1.9837682038088186E-6	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999975259006719	WITHOUT_CLASSIFICATION	2.474099328055694E-6	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.99999895000644	WITHOUT_CLASSIFICATION	1.049993559926433E-6	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999542685037476	WITHOUT_CLASSIFICATION	4.5731496252390194E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995757992791	WITHOUT_CLASSIFICATION	4.2420072093003865E-7	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961996886589	WITHOUT_CLASSIFICATION	3.800311341159747E-6	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995502704706	WITHOUT_CLASSIFICATION	4.4972952939628095E-6	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999999929960244	WITHOUT_CLASSIFICATION	7.003975574749137E-9	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999291424691	WITHOUT_CLASSIFICATION	7.085753089641717E-7	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995757992791	WITHOUT_CLASSIFICATION	4.2420072093003865E-7	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961996886589	WITHOUT_CLASSIFICATION	3.800311341159747E-6	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995502704706	WITHOUT_CLASSIFICATION	4.4972952939628095E-6	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999994957129789	WITHOUT_CLASSIFICATION	5.042870211308305E-7	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9999424794996519	WITHOUT_CLASSIFICATION	5.752050034811876E-5	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999997549560199	WITHOUT_CLASSIFICATION	2.450439800683651E-7	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999943702395862	WITHOUT_CLASSIFICATION	5.629760413766491E-6	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999266263175	WITHOUT_CLASSIFICATION	7.337368243947413E-8	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999998908749699	WITHOUT_CLASSIFICATION	1.0912503007216871E-7	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999879598446081	WITHOUT_CLASSIFICATION	1.2040155391893163E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9995411029197936	WITHOUT_CLASSIFICATION	4.588970802064157E-4	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999641935815873	WITHOUT_CLASSIFICATION	3.580641841267187E-5	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999889309878758	WITHOUT_CLASSIFICATION	1.1069012124257604E-5	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999995036425501	WITHOUT_CLASSIFICATION	4.96357449881022E-7	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999967814270892	WITHOUT_CLASSIFICATION	3.2185729107988907E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999896355531429	WITHOUT_CLASSIFICATION	1.0364446857134468E-5	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999998974427421	WITHOUT_CLASSIFICATION	1.0255725785152246E-7	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.99999757483365	WITHOUT_CLASSIFICATION	2.425166350077894E-6	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999518524430248	WITHOUT_CLASSIFICATION	4.814755697524594E-5	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999991341940864	WITHOUT_CLASSIFICATION	8.658059135886153E-7	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999726427401803	WITHOUT_CLASSIFICATION	2.73572598197135E-5	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999962877991024	WITHOUT_CLASSIFICATION	3.7122008976134907E-6	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999420251714513	WITHOUT_CLASSIFICATION	5.7974828548768803E-5	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999996236892356	WITHOUT_CLASSIFICATION	3.7631076437198487E-7	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999118387572777	WITHOUT_CLASSIFICATION	8.816124272225915E-5	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9940228764814566	WITHOUT_CLASSIFICATION	0.005977123518543437	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999549313192395	WITHOUT_CLASSIFICATION	4.506868076034868E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999942478741	WITHOUT_CLASSIFICATION	5.752125781931983E-9	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.999853761122113	WITHOUT_CLASSIFICATION	1.462388778869661E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995982593364	WITHOUT_CLASSIFICATION	4.0174066361349227E-7	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947039745498	WITHOUT_CLASSIFICATION	5.296025450222116E-6	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999998465392237	WITHOUT_CLASSIFICATION	1.5346077632295482E-7	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987362439233	WITHOUT_CLASSIFICATION	1.2637560766558311E-6	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893696777861	WITHOUT_CLASSIFICATION	1.0630322213815899E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998911556911	WITHOUT_CLASSIFICATION	1.0884430882601598E-7	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998911556911	WITHOUT_CLASSIFICATION	1.0884430882601598E-7	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.999999819791896	WITHOUT_CLASSIFICATION	1.80208104079216E-7	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999938256318	WITHOUT_CLASSIFICATION	6.174368194090836E-9	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999954720628312	WITHOUT_CLASSIFICATION	4.527937168724646E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999399014335995	WITHOUT_CLASSIFICATION	6.009856640047864E-5	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999157803852271	WITHOUT_CLASSIFICATION	8.421961477291157E-5	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.999999986587475	WITHOUT_CLASSIFICATION	1.341252505768775E-8	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999905580474686	WITHOUT_CLASSIFICATION	9.441952531395561E-6	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999951413640343	WITHOUT_CLASSIFICATION	4.858635965736395E-6	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999794338637524	WITHOUT_CLASSIFICATION	2.0566136247629582E-5	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976575930841	WITHOUT_CLASSIFICATION	2.342406915910945E-6	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976426799293	WITHOUT_CLASSIFICATION	2.3573200706416444E-6	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963419984282	WITHOUT_CLASSIFICATION	3.658001571770484E-6	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987956531966	WITHOUT_CLASSIFICATION	1.2043468034655461E-6	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984342065896	WITHOUT_CLASSIFICATION	1.565793410284285E-6	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978006710606	WITHOUT_CLASSIFICATION	2.1993289393961356E-6	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985715517289	WITHOUT_CLASSIFICATION	1.4284482711499643E-6	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935133291498	WITHOUT_CLASSIFICATION	6.486670850340522E-6	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991597610366	WITHOUT_CLASSIFICATION	8.402389634236864E-7	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988280170814	WITHOUT_CLASSIFICATION	1.1719829186583814E-6	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992801550736	WITHOUT_CLASSIFICATION	7.198449264425121E-7	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.999996140291674	WITHOUT_CLASSIFICATION	3.859708325885127E-6	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999658441032293	WITHOUT_CLASSIFICATION	3.415589677070175E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998735086694011	WITHOUT_CLASSIFICATION	1.264913305988129E-4	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999991960950138	WITHOUT_CLASSIFICATION	8.039049861328353E-7	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999927891717	WITHOUT_CLASSIFICATION	7.21082821601177E-9	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999535452611364	WITHOUT_CLASSIFICATION	4.645473886357398E-5	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999993079518485	WITHOUT_CLASSIFICATION	6.920481514488021E-7	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9990162304316319	WITHOUT_CLASSIFICATION	9.837695683681123E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998735086694011	WITHOUT_CLASSIFICATION	1.264913305988129E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998735086694011	WITHOUT_CLASSIFICATION	1.264913305988129E-4	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999854667052177	WITHOUT_CLASSIFICATION	1.4533294782380065E-5	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999985647534526	WITHOUT_CLASSIFICATION	1.4352465474003275E-6	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999987696628	WITHOUT_CLASSIFICATION	1.2303372814362602E-9	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999934716461407	WITHOUT_CLASSIFICATION	6.528353859323861E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999970476926522	WITHOUT_CLASSIFICATION	2.95230734794268E-6	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999420251714513	WITHOUT_CLASSIFICATION	5.7974828548768803E-5	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999987286719023	WITHOUT_CLASSIFICATION	1.2713280976774364E-6	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999430898921596	WITHOUT_CLASSIFICATION	5.6910107840361345E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999998113363369	WITHOUT_CLASSIFICATION	1.886636630772472E-7	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999305078580023	WITHOUT_CLASSIFICATION	6.949214199771773E-5	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999943017383343	WITHOUT_CLASSIFICATION	5.6982616657715525E-6	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999791347640953	WITHOUT_CLASSIFICATION	2.0865235904738538E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999972456447377	WITHOUT_CLASSIFICATION	2.7543552622934363E-6	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999972456447377	WITHOUT_CLASSIFICATION	2.7543552622934363E-6	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999974684428689	WITHOUT_CLASSIFICATION	2.531557131153336E-6	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999974684428689	WITHOUT_CLASSIFICATION	2.531557131153336E-6	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988221336046955	WITHOUT_CLASSIFICATION	0.0011778663953044947	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997618623201	WITHOUT_CLASSIFICATION	2.3813767996662273E-7	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999699083461717	WITHOUT_CLASSIFICATION	3.009165382826719E-5	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999527355778393	WITHOUT_CLASSIFICATION	4.726442216069386E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.999962616851979	WITHOUT_CLASSIFICATION	3.738314802095974E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9992195755473035	WITHOUT_CLASSIFICATION	7.804244526964431E-4	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947429700561	WITHOUT_CLASSIFICATION	5.2570299439402715E-6	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998647943417	WITHOUT_CLASSIFICATION	1.3520565827607218E-7	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999900061652649	WITHOUT_CLASSIFICATION	9.993834735080061E-6	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999999650670541	WITHOUT_CLASSIFICATION	3.493294575115314E-8	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999446914714	WITHOUT_CLASSIFICATION	5.530852852134707E-8	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998401162813232	WITHOUT_CLASSIFICATION	1.598837186768371E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999958932343016	WITHOUT_CLASSIFICATION	4.106765698315466E-6	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999440682717102	WITHOUT_CLASSIFICATION	5.5931728289826304E-5	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999991831670338	WITHOUT_CLASSIFICATION	8.168329661529944E-7	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999258399210167	WITHOUT_CLASSIFICATION	7.416007898332546E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9998771630259865	WITHOUT_CLASSIFICATION	1.2283697401343217E-4	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9998771630259865	WITHOUT_CLASSIFICATION	1.2283697401343217E-4	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999725584983	WITHOUT_CLASSIFICATION	2.7441501758900395E-8	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999939718170731	WITHOUT_CLASSIFICATION	6.028182926855879E-6	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999861740263	WITHOUT_CLASSIFICATION	1.3825973615639323E-8	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999975144224732	WITHOUT_CLASSIFICATION	2.48557752678523E-6	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981431728058	WITHOUT_CLASSIFICATION	1.8568271942015664E-6	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964586758812	WITHOUT_CLASSIFICATION	3.541324118812459E-6	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999999595128289	WITHOUT_CLASSIFICATION	4.048717109776331E-7	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999403338352386	WITHOUT_CLASSIFICATION	5.966616476143774E-5	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9927354444798686	WITHOUT_CLASSIFICATION	0.0072645555201314525	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999801255124	WITHOUT_CLASSIFICATION	1.9874487554980797E-8	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999996614147293	WITHOUT_CLASSIFICATION	3.3858527081252235E-7	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9980481996831794	WITHOUT_CLASSIFICATION	0.0019518003168206715	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945325820189	WITHOUT_CLASSIFICATION	5.467417981250365E-6	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999995354667615	WITHOUT_CLASSIFICATION	4.6453323852160335E-7	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998672611794945	WITHOUT_CLASSIFICATION	1.3273882050542584E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999976677071896	WITHOUT_CLASSIFICATION	2.3322928104717788E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999977353035112	WITHOUT_CLASSIFICATION	2.2646964888112658E-6	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999990575787472	WITHOUT_CLASSIFICATION	9.424212528019351E-7	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999989846199264	WITHOUT_CLASSIFICATION	1.0153800735914256E-6	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999996687313605	WITHOUT_CLASSIFICATION	3.312686394176119E-7	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999999559349	WITHOUT_CLASSIFICATION	4.406517814833004E-11	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999999999198147	WITHOUT_CLASSIFICATION	8.018531395104948E-10	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999998675233	WITHOUT_CLASSIFICATION	1.3247670816487077E-10	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999855690058912	WITHOUT_CLASSIFICATION	1.4430994108892287E-5	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999998144140219	WITHOUT_CLASSIFICATION	1.8558597817582035E-7	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999999613061826	WITHOUT_CLASSIFICATION	3.8693817401440527E-7	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999999689297298	WITHOUT_CLASSIFICATION	3.107027028847351E-8	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999996650794325	WITHOUT_CLASSIFICATION	3.3492056749432343E-7	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999996514557	WITHOUT_CLASSIFICATION	3.48544301457791E-10	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999956535184348	WITHOUT_CLASSIFICATION	4.3464815652645595E-6	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999995662752	WITHOUT_CLASSIFICATION	4.3372477593940963E-10	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999996402211279	WITHOUT_CLASSIFICATION	3.597788720683765E-7	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999977118881044	WITHOUT_CLASSIFICATION	2.288111895543995E-6	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999183377916063	WITHOUT_CLASSIFICATION	8.166220839363593E-5	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999997041712013	WITHOUT_CLASSIFICATION	2.958287986201484E-7	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.999999895906743	WITHOUT_CLASSIFICATION	1.0409325700951224E-7	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999995884185805	WITHOUT_CLASSIFICATION	4.1158141944107573E-7	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9998807996121557	WITHOUT_CLASSIFICATION	1.192003878443599E-4	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999998002277264	WITHOUT_CLASSIFICATION	1.9977227359492345E-7	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9996263456968939	WITHOUT_CLASSIFICATION	3.7365430310608625E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999382329369	WITHOUT_CLASSIFICATION	6.176706314513963E-8	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999234420694859	WITHOUT_CLASSIFICATION	7.655793051412882E-5	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999996044550196	WITHOUT_CLASSIFICATION	3.9554498043203526E-7	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999999043455137	WITHOUT_CLASSIFICATION	9.565448637870272E-8	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999985779147	WITHOUT_CLASSIFICATION	1.422085416644004E-9	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.999934406905332	WITHOUT_CLASSIFICATION	6.559309466799227E-5	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999954091167191	WITHOUT_CLASSIFICATION	4.590883280834947E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999535865286906	WITHOUT_CLASSIFICATION	4.6413471309399526E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999634978914519	WITHOUT_CLASSIFICATION	3.650210854813544E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999881240649846	WITHOUT_CLASSIFICATION	1.1875935015286922E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999984351034407	WITHOUT_CLASSIFICATION	1.5648965592531084E-6	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999160719429229	WITHOUT_CLASSIFICATION	8.392805707711551E-5	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999969051980641	WITHOUT_CLASSIFICATION	3.094801935893163E-6	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999882143266469	WITHOUT_CLASSIFICATION	1.1785673353179368E-5	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999862626392615	WITHOUT_CLASSIFICATION	1.3737360738460297E-5	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999976383303429	WITHOUT_CLASSIFICATION	2.36166965696414E-6	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9983254019428004	WITHOUT_CLASSIFICATION	0.0016745980571995528	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999982966380802	WITHOUT_CLASSIFICATION	1.703361919929547E-6	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999985440067346	WITHOUT_CLASSIFICATION	1.4559932654047813E-6	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9997784198948616	WITHOUT_CLASSIFICATION	2.2158010513827314E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999996980822469	WITHOUT_CLASSIFICATION	3.0191775318138617E-7	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999995843814653	WITHOUT_CLASSIFICATION	4.1561853467334666E-7	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999850477782	WITHOUT_CLASSIFICATION	1.495222186166043E-8	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999998051652943	WITHOUT_CLASSIFICATION	1.9483470576488025E-7	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999997980959393	WITHOUT_CLASSIFICATION	2.0190406071513868E-7	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999286843104	WITHOUT_CLASSIFICATION	7.131568953726652E-8	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999997633964036	WITHOUT_CLASSIFICATION	2.3660359631848964E-7	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999937227563727	WITHOUT_CLASSIFICATION	6.277243627378958E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999845338030537	WITHOUT_CLASSIFICATION	1.546619694634643E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999845338030537	WITHOUT_CLASSIFICATION	1.546619694634643E-5	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999987279225341	WITHOUT_CLASSIFICATION	1.2720774660201501E-6	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999951382477231	WITHOUT_CLASSIFICATION	4.861752276917922E-6	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998946269156272	WITHOUT_CLASSIFICATION	1.0537308437279434E-4	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998870812082944	WITHOUT_CLASSIFICATION	1.129187917055967E-4	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999805458653	WITHOUT_CLASSIFICATION	1.9454134833186304E-8	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.999971536922725	WITHOUT_CLASSIFICATION	2.8463077275070073E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999991789402797	WITHOUT_CLASSIFICATION	8.210597203146059E-7	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999976818364	WITHOUT_CLASSIFICATION	2.318163581793796E-9	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999801189739436	WITHOUT_CLASSIFICATION	1.9881026056378204E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999999667915446	WITHOUT_CLASSIFICATION	3.3208455346728495E-8	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999984807109501	WITHOUT_CLASSIFICATION	1.51928904984273E-6	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999997430888105	WITHOUT_CLASSIFICATION	2.569111894785528E-7	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999945263613085	WITHOUT_CLASSIFICATION	5.473638691471006E-6	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999995420363027	WITHOUT_CLASSIFICATION	4.5796369741371987E-7	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999498041354251	WITHOUT_CLASSIFICATION	5.0195864574821827E-5	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9998270815080182	WITHOUT_CLASSIFICATION	1.729184919818121E-4	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999880912958166	WITHOUT_CLASSIFICATION	1.1908704183505456E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.999928695165444	WITHOUT_CLASSIFICATION	7.130483455590918E-5	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9279058922146151	WITHOUT_CLASSIFICATION	0.07209410778538503	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999950829155583	WITHOUT_CLASSIFICATION	4.917084441723999E-6	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999992652491619	WITHOUT_CLASSIFICATION	7.347508380320998E-7	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999991864035038	WITHOUT_CLASSIFICATION	8.135964962014468E-7	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999288336445709	WITHOUT_CLASSIFICATION	7.116635542913864E-5	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999270871932894	WITHOUT_CLASSIFICATION	7.291280671060714E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999996269407432	WITHOUT_CLASSIFICATION	3.7305925691069645E-7	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.999960763215644	WITHOUT_CLASSIFICATION	3.923678435610777E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999816282195239	WITHOUT_CLASSIFICATION	1.8371780476058477E-5	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999967498759396	WITHOUT_CLASSIFICATION	3.2501240603549916E-6	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999946603202678	WITHOUT_CLASSIFICATION	5.339679732212362E-6	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999994298745953	WITHOUT_CLASSIFICATION	5.701254047159999E-7	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999995945032067	WITHOUT_CLASSIFICATION	4.0549679319779806E-7	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999930481285233	WITHOUT_CLASSIFICATION	6.951871476611517E-6	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999990843882036	WITHOUT_CLASSIFICATION	9.156117962676673E-7	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999946662226995	WITHOUT_CLASSIFICATION	5.3337773005561626E-6	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999974531653726	WITHOUT_CLASSIFICATION	2.546834627501343E-6	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999974531653726	WITHOUT_CLASSIFICATION	2.546834627501343E-6	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999889552509257	WITHOUT_CLASSIFICATION	1.1044749074270732E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999459599940345	WITHOUT_CLASSIFICATION	5.404000596545044E-5	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999995894694673	WITHOUT_CLASSIFICATION	4.105305326862602E-7	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999884355567881	WITHOUT_CLASSIFICATION	1.156444321183558E-5	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999937906968175	WITHOUT_CLASSIFICATION	6.209303182499597E-6	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999946679665541	WITHOUT_CLASSIFICATION	5.332033445826826E-6	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999995828010859	WITHOUT_CLASSIFICATION	4.1719891396302567E-7	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999673095726	WITHOUT_CLASSIFICATION	3.2690427314180214E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999998381120897	WITHOUT_CLASSIFICATION	1.618879102899872E-7	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999996950466168	WITHOUT_CLASSIFICATION	3.0495338323901923E-7	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999996746581038	WITHOUT_CLASSIFICATION	3.2534189621888525E-7	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999963223308961	WITHOUT_CLASSIFICATION	3.6776691038645176E-6	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999998905416122	WITHOUT_CLASSIFICATION	1.0945838778713806E-7	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.999990002010153	WITHOUT_CLASSIFICATION	9.997989846960822E-6	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999973823215476	WITHOUT_CLASSIFICATION	2.6176784524675657E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999960391248826	WITHOUT_CLASSIFICATION	3.960875117456471E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999960391248826	WITHOUT_CLASSIFICATION	3.960875117456471E-6	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999983766379689	WITHOUT_CLASSIFICATION	1.623362031101369E-6	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999999420673571	WITHOUT_CLASSIFICATION	5.7932642860709834E-8	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999762409895312	WITHOUT_CLASSIFICATION	2.3759010468883173E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999997840634801	WITHOUT_CLASSIFICATION	2.15936519957424E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998401162813232	WITHOUT_CLASSIFICATION	1.598837186768371E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994710241521143	WITHOUT_CLASSIFICATION	5.289758478855963E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999998469588519	WITHOUT_CLASSIFICATION	1.530411481528092E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999997526966045	WITHOUT_CLASSIFICATION	2.4730339554875864E-7	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999997526966045	WITHOUT_CLASSIFICATION	2.4730339554875864E-7	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999977041189222	WITHOUT_CLASSIFICATION	2.2958810779432497E-6	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999999967551016	WITHOUT_CLASSIFICATION	3.244898406896175E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999811075331001	WITHOUT_CLASSIFICATION	1.8892466899844512E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999922905465	WITHOUT_CLASSIFICATION	7.709453584008654E-9	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999978741378341	WITHOUT_CLASSIFICATION	2.1258621658668896E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999811802844506	WITHOUT_CLASSIFICATION	1.8819715549359288E-5	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999984783702047	WITHOUT_CLASSIFICATION	1.5216297952551909E-6	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9993574413376367	WITHOUT_CLASSIFICATION	6.425586623632682E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999974668283644	WITHOUT_CLASSIFICATION	2.533171635447598E-6	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999946181048952	WITHOUT_CLASSIFICATION	5.381895104752551E-6	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999986216602829	WITHOUT_CLASSIFICATION	1.3783397171088907E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.99996298270845	WITHOUT_CLASSIFICATION	3.7017291550074733E-5	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999971056755218	WITHOUT_CLASSIFICATION	2.89432447824126E-6	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999945024493009	WITHOUT_CLASSIFICATION	5.497550699082771E-6	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999996826130093	WITHOUT_CLASSIFICATION	3.173869906571E-7	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999982279166533	WITHOUT_CLASSIFICATION	1.7720833466872614E-6	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999418350668	WITHOUT_CLASSIFICATION	5.816493312177705E-8	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999977930025227	WITHOUT_CLASSIFICATION	2.206997477286274E-6	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9992399683539663	WITHOUT_CLASSIFICATION	7.600316460336981E-4	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999152124333053	WITHOUT_CLASSIFICATION	8.47875666946583E-5	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999994972892327	WITHOUT_CLASSIFICATION	5.027107672324603E-7	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999933189392076	WITHOUT_CLASSIFICATION	6.681060792353089E-6	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999855562894419	WITHOUT_CLASSIFICATION	1.4443710558178245E-5	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999987453321484	WITHOUT_CLASSIFICATION	1.2546678515061117E-6	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999853554821145	WITHOUT_CLASSIFICATION	1.464451788553448E-5	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999980449000784	WITHOUT_CLASSIFICATION	1.955099921603218E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999999848956066	WITHOUT_CLASSIFICATION	1.510439344758207E-8	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999644435808586	WITHOUT_CLASSIFICATION	3.555641914135087E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999970454793945	WITHOUT_CLASSIFICATION	2.954520605378099E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999928579065707	WITHOUT_CLASSIFICATION	7.14209342929062E-6	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999917344447722	WITHOUT_CLASSIFICATION	8.265555227800841E-5	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999994134881858	WITHOUT_CLASSIFICATION	5.865118142070803E-7	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999595885775722	WITHOUT_CLASSIFICATION	4.041142242777396E-5	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.999962289987296	WITHOUT_CLASSIFICATION	3.771001270397158E-5	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999089023805481	WITHOUT_CLASSIFICATION	9.10976194519686E-5	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999980738554662	WITHOUT_CLASSIFICATION	1.926144533767662E-6	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9999954461711063	WITHOUT_CLASSIFICATION	4.553828893756757E-6	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999983805008562	WITHOUT_CLASSIFICATION	1.61949914380437E-6	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999997187138508	WITHOUT_CLASSIFICATION	2.8128614921268193E-7	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999980987610294	WITHOUT_CLASSIFICATION	1.901238970558408E-6	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999972598511969	WITHOUT_CLASSIFICATION	2.7401488031468924E-6	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999990072932784	WITHOUT_CLASSIFICATION	9.927067216303282E-7	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999303413109021	WITHOUT_CLASSIFICATION	6.965868909790506E-5	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999999980320413	WITHOUT_CLASSIFICATION	1.9679586966985113E-8	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999820334606	WITHOUT_CLASSIFICATION	1.79665393535833E-8	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9993654913345731	WITHOUT_CLASSIFICATION	6.345086654268818E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999997187138508	WITHOUT_CLASSIFICATION	2.8128614921268193E-7	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999980987610294	WITHOUT_CLASSIFICATION	1.901238970558408E-6	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999982434296367	WITHOUT_CLASSIFICATION	1.7565703632292444E-6	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999534920307184	WITHOUT_CLASSIFICATION	4.650796928172083E-5	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999989115594242	WITHOUT_CLASSIFICATION	1.0884405758253419E-6	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9996131316149008	WITHOUT_CLASSIFICATION	3.868683850990659E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999997836010564	WITHOUT_CLASSIFICATION	2.1639894359978055E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999998959831276	WITHOUT_CLASSIFICATION	1.0401687243058769E-7	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9990233334418174	WITHOUT_CLASSIFICATION	9.766665581826981E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.999998265730768	WITHOUT_CLASSIFICATION	1.7342692320603069E-6	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9995991477341003	WITHOUT_CLASSIFICATION	4.008522658997042E-4	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9951710539161902	IMPLEMENTATION	0.004828946083809832	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999980840531107	WITHOUT_CLASSIFICATION	1.9159468891899034E-6	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9951710539161902	IMPLEMENTATION	0.004828946083809832	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999606565583812	WITHOUT_CLASSIFICATION	3.9343441618851405E-5	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999879444329336	WITHOUT_CLASSIFICATION	1.2055567066381535E-5	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999929878231698	WITHOUT_CLASSIFICATION	7.012176830180957E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997118857773	WITHOUT_CLASSIFICATION	2.8811422272521645E-7	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999985770678574	WITHOUT_CLASSIFICATION	1.4229321425882349E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999787261634604	WITHOUT_CLASSIFICATION	2.127383653957873E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999787261634604	WITHOUT_CLASSIFICATION	2.127383653957873E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999959130205957	WITHOUT_CLASSIFICATION	4.086979404352036E-6	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.999998863990851	WITHOUT_CLASSIFICATION	1.136009149006815E-6	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999954951607307	WITHOUT_CLASSIFICATION	4.504839269314468E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999812339875493	WITHOUT_CLASSIFICATION	1.8766012450708775E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999839147487871	WITHOUT_CLASSIFICATION	1.608525121291945E-5	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999993541364052	WITHOUT_CLASSIFICATION	6.458635947987334E-7	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999959297628755	WITHOUT_CLASSIFICATION	4.0702371244992565E-6	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999998504890681	WITHOUT_CLASSIFICATION	1.4951093185323446E-7	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999987505055485	WITHOUT_CLASSIFICATION	1.2494944515226305E-6	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9999540191984032	WITHOUT_CLASSIFICATION	4.598080159683293E-5	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9999919707260431	WITHOUT_CLASSIFICATION	8.029273956887939E-6	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9988903972016204	WITHOUT_CLASSIFICATION	0.001109602798379579	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999334376524032	WITHOUT_CLASSIFICATION	6.656234759690564E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9999991668369344	WITHOUT_CLASSIFICATION	8.33163065673015E-7	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999987345990937	WITHOUT_CLASSIFICATION	1.2654009063098412E-6	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999550808287	WITHOUT_CLASSIFICATION	4.491917122147843E-8	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999994321088675	WITHOUT_CLASSIFICATION	5.678911325083211E-7	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999974082692272	WITHOUT_CLASSIFICATION	2.591730772629276E-6	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999998179375232	WITHOUT_CLASSIFICATION	1.8206247675362142E-7	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999358408403044	WITHOUT_CLASSIFICATION	6.415915969565364E-5	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999897580963926	WITHOUT_CLASSIFICATION	1.0241903607487506E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999624703183814	WITHOUT_CLASSIFICATION	3.75296816185478E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999973019219577	WITHOUT_CLASSIFICATION	2.6980780423820896E-6	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999840134033278	WITHOUT_CLASSIFICATION	1.598659667231052E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999805249572353	WITHOUT_CLASSIFICATION	1.9475042764722104E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.999993441896127	WITHOUT_CLASSIFICATION	6.558103872883377E-6	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9998427395827715	WITHOUT_CLASSIFICATION	1.5726041722863163E-4	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9997687282750233	WITHOUT_CLASSIFICATION	2.3127172497684425E-4	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9962793462108567	WITHOUT_CLASSIFICATION	0.0037206537891433804	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9616400932106326	WITHOUT_CLASSIFICATION	0.038359906789367425	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.8559815053667302	WITHOUT_CLASSIFICATION	0.14401849463326966	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.999954857340752	WITHOUT_CLASSIFICATION	4.514265924794904E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999959297628755	WITHOUT_CLASSIFICATION	4.0702371244992565E-6	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999992173675466	WITHOUT_CLASSIFICATION	7.826324533709504E-7	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999861999608607	WITHOUT_CLASSIFICATION	1.380003913934362E-5	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9613009498648374	IMPLEMENTATION	0.038699050135162574	WITHOUT_CLASSIFICATION
//an assertion	WITHOUT_CLASSIFICATION	0.999990750326735	WITHOUT_CLASSIFICATION	9.24967326494729E-6	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999959166562598	WITHOUT_CLASSIFICATION	4.083343740223101E-6	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999977460732933	WITHOUT_CLASSIFICATION	2.2539267066398803E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999812339875493	WITHOUT_CLASSIFICATION	1.8766012450708775E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999812339875493	WITHOUT_CLASSIFICATION	1.8766012450708775E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999800982565816	WITHOUT_CLASSIFICATION	1.990174341829338E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999942211362722	WITHOUT_CLASSIFICATION	5.778863727871226E-6	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999701726984633	WITHOUT_CLASSIFICATION	2.9827301536628075E-5	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999862374011352	WITHOUT_CLASSIFICATION	1.3762598864816432E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999776075884516	WITHOUT_CLASSIFICATION	2.239241154838456E-5	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999987863819544	WITHOUT_CLASSIFICATION	1.2136180456423195E-6	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.999999856099511	WITHOUT_CLASSIFICATION	1.439004889350359E-7	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9996635799058706	WITHOUT_CLASSIFICATION	3.36420094129309E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999833491695033	WITHOUT_CLASSIFICATION	1.6650830496656697E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999992937390341	WITHOUT_CLASSIFICATION	7.062609660330698E-7	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999965334682831	WITHOUT_CLASSIFICATION	3.4665317168330997E-6	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997637236143703	WITHOUT_CLASSIFICATION	2.362763856297963E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999971778364625	WITHOUT_CLASSIFICATION	2.822163537489856E-6	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999992937390341	WITHOUT_CLASSIFICATION	7.062609660330698E-7	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999991071906635	WITHOUT_CLASSIFICATION	8.928093364179252E-7	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9990494616646588	WITHOUT_CLASSIFICATION	9.505383353411957E-4	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999649901918876	WITHOUT_CLASSIFICATION	3.5009808112345714E-5	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.998509534863279	IMPLEMENTATION	0.0014904651367210547	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997637236143703	WITHOUT_CLASSIFICATION	2.362763856297963E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999900095517558	WITHOUT_CLASSIFICATION	9.99044824427584E-6	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999931492802313	WITHOUT_CLASSIFICATION	6.850719768723464E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999930462642261	WITHOUT_CLASSIFICATION	6.953735773864232E-6	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999990266718	WITHOUT_CLASSIFICATION	9.733282343667942E-10	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999532463356869	WITHOUT_CLASSIFICATION	4.6753664313072424E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999995302249937	WITHOUT_CLASSIFICATION	4.697750062362791E-7	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.999999780108663	WITHOUT_CLASSIFICATION	2.198913370009453E-7	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999984857117926	WITHOUT_CLASSIFICATION	1.514288207397308E-6	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999998497352954	WITHOUT_CLASSIFICATION	1.502647046049296E-6	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999993516283271	WITHOUT_CLASSIFICATION	6.483716728859866E-7	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999468221689939	WITHOUT_CLASSIFICATION	5.3177831006192254E-5	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999991089111115	WITHOUT_CLASSIFICATION	8.910888885384477E-7	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999992937390341	WITHOUT_CLASSIFICATION	7.062609660330698E-7	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999900095517558	WITHOUT_CLASSIFICATION	9.99044824427584E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999930462642261	WITHOUT_CLASSIFICATION	6.953735773864232E-6	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999907040325947	WITHOUT_CLASSIFICATION	9.29596740527702E-6	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999999487321349	WITHOUT_CLASSIFICATION	5.1267864923141514E-8	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.999999793996929	WITHOUT_CLASSIFICATION	2.0600307111636193E-7	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997637236143703	WITHOUT_CLASSIFICATION	2.362763856297963E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999986244261636	WITHOUT_CLASSIFICATION	1.3755738364811793E-6	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999981117084933	WITHOUT_CLASSIFICATION	1.888291506833568E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999793042239189	WITHOUT_CLASSIFICATION	2.0695776081186618E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999978401003494	WITHOUT_CLASSIFICATION	2.1598996506183227E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999984857117926	WITHOUT_CLASSIFICATION	1.514288207397308E-6	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999991071906635	WITHOUT_CLASSIFICATION	8.928093364179252E-7	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999964776162698	WITHOUT_CLASSIFICATION	3.5223837301799894E-6	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999987071197988	WITHOUT_CLASSIFICATION	1.2928802012585267E-6	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.99999837133641	WITHOUT_CLASSIFICATION	1.6286635900326108E-6	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9997528623535274	WITHOUT_CLASSIFICATION	2.4713764647258844E-4	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998570849164728	WITHOUT_CLASSIFICATION	1.429150835271347E-4	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9997054879614705	WITHOUT_CLASSIFICATION	2.945120385294166E-4	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9999984077484879	WITHOUT_CLASSIFICATION	1.5922515120670817E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997118857773	WITHOUT_CLASSIFICATION	2.8811422272521645E-7	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999826336034	WITHOUT_CLASSIFICATION	1.7366396606544555E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999466757734	WITHOUT_CLASSIFICATION	5.3324226599864776E-6	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999992907662446	WITHOUT_CLASSIFICATION	7.092337553383205E-7	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9990193347159406	WITHOUT_CLASSIFICATION	9.806652840594042E-4	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999984205739304	WITHOUT_CLASSIFICATION	1.5794260695985783E-5	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999778456625128	WITHOUT_CLASSIFICATION	2.2154337487237055E-5	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999999873178225	WITHOUT_CLASSIFICATION	1.2682177497346447E-7	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999992755592989	WITHOUT_CLASSIFICATION	7.244407011550055E-7	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999991722353426	WITHOUT_CLASSIFICATION	8.277646573693815E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999978401003494	WITHOUT_CLASSIFICATION	2.1598996506183227E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999466757734	WITHOUT_CLASSIFICATION	5.3324226599864776E-6	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.999988008068638	WITHOUT_CLASSIFICATION	1.1991931362069928E-5	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999974414719477	WITHOUT_CLASSIFICATION	2.5585280523094964E-6	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999917923456405	WITHOUT_CLASSIFICATION	8.207654359418531E-6	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999974850564294	WITHOUT_CLASSIFICATION	2.514943570575858E-6	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.999899350976682	WITHOUT_CLASSIFICATION	1.006490233178884E-4	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999812915976208	WITHOUT_CLASSIFICATION	1.870840237921767E-5	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999830009619076	WITHOUT_CLASSIFICATION	1.6999038092325837E-5	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9990943293436466	WITHOUT_CLASSIFICATION	9.05670656353446E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999999970820119	WITHOUT_CLASSIFICATION	2.917987987863245E-9	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9859855674306384	WITHOUT_CLASSIFICATION	0.014014432569361735	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999982631710793	WITHOUT_CLASSIFICATION	1.7368289207594187E-6	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999990792554743	WITHOUT_CLASSIFICATION	9.207445257021146E-7	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999175528587317	WITHOUT_CLASSIFICATION	8.244714126821371E-5	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999976168276169	WITHOUT_CLASSIFICATION	2.3831723830334783E-6	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999998779381767	WITHOUT_CLASSIFICATION	1.2206182339003127E-7	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999993229866257	WITHOUT_CLASSIFICATION	6.770133741413667E-7	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999642111148	WITHOUT_CLASSIFICATION	3.5788885124564874E-8	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999972400963584	WITHOUT_CLASSIFICATION	2.759903641586582E-6	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999934256589458	WITHOUT_CLASSIFICATION	6.574341054275323E-6	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999686246121565	WITHOUT_CLASSIFICATION	3.1375387843458525E-5	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999986319415797	WITHOUT_CLASSIFICATION	1.3680584203259495E-6	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999994688279161	WITHOUT_CLASSIFICATION	5.311720838488357E-7	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999978677406142	WITHOUT_CLASSIFICATION	2.132259385918107E-6	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999395002271	WITHOUT_CLASSIFICATION	6.049977284409218E-8	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999992164334518	WITHOUT_CLASSIFICATION	7.835665481406049E-7	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9685393821938882	IMPLEMENTATION	0.031460617806111806	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.999387188429479	WITHOUT_CLASSIFICATION	6.128115705208975E-4	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999972703675709	WITHOUT_CLASSIFICATION	2.729632429102267E-6	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999996065155998	WITHOUT_CLASSIFICATION	3.934844001978632E-7	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9109207024086312	WITHOUT_CLASSIFICATION	0.08907929759136884	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999060284207	WITHOUT_CLASSIFICATION	9.3971579312308E-8	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999993311711349	WITHOUT_CLASSIFICATION	6.688288651121392E-7	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999973769148142	WITHOUT_CLASSIFICATION	2.6230851857873225E-6	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999462205067491	WITHOUT_CLASSIFICATION	5.377949325090678E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999960770792924	WITHOUT_CLASSIFICATION	3.922920707662206E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999873941931668	WITHOUT_CLASSIFICATION	1.2605806833221262E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999984310826453	WITHOUT_CLASSIFICATION	1.568917354664509E-6	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999998004121246	WITHOUT_CLASSIFICATION	1.9958787546591857E-7	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999873941931668	WITHOUT_CLASSIFICATION	1.2605806833221262E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999960770792924	WITHOUT_CLASSIFICATION	3.922920707662206E-6	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999984310826453	WITHOUT_CLASSIFICATION	1.568917354664509E-6	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999968656126155	WITHOUT_CLASSIFICATION	3.1343873845566057E-6	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.99999321629626	WITHOUT_CLASSIFICATION	6.78370373990475E-6	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.999999998645755	WITHOUT_CLASSIFICATION	1.3542450082834822E-9	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999998692217797	WITHOUT_CLASSIFICATION	1.3077822028097646E-7	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999695994257	WITHOUT_CLASSIFICATION	3.0400574391121704E-8	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.755192948943895	IMPLEMENTATION	0.24480705105610495	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999475817376203	WITHOUT_CLASSIFICATION	5.241826237971349E-5	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999731670628992	WITHOUT_CLASSIFICATION	2.683293710085345E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999998686379679	WITHOUT_CLASSIFICATION	1.3136203221398376E-7	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999780772259218	WITHOUT_CLASSIFICATION	2.192277407826388E-5	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.999999709044722	WITHOUT_CLASSIFICATION	2.909552780173863E-7	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998596508318028	WITHOUT_CLASSIFICATION	1.40349168197159E-4	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999334644751844	WITHOUT_CLASSIFICATION	6.65355248155649E-5	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999994932558612	WITHOUT_CLASSIFICATION	5.067441386736545E-7	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998706217657	WITHOUT_CLASSIFICATION	1.293782344021602E-7	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999996100772159	WITHOUT_CLASSIFICATION	3.8992278407758814E-7	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999996286764721	WITHOUT_CLASSIFICATION	3.713235279880006E-7	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999958418992334	WITHOUT_CLASSIFICATION	4.158100766597517E-6	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.999999981363583	WITHOUT_CLASSIFICATION	1.8636416934470397E-8	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999915530688805	WITHOUT_CLASSIFICATION	8.446931119440568E-6	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9849623704762649	WITHOUT_CLASSIFICATION	0.015037629523734974	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999944738755965	WITHOUT_CLASSIFICATION	5.5261244034337105E-6	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999947190043463	WITHOUT_CLASSIFICATION	5.280995653732231E-6	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999992746580567	WITHOUT_CLASSIFICATION	7.25341943359158E-7	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999965726591066	WITHOUT_CLASSIFICATION	3.4273408934747817E-6	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999965726591066	WITHOUT_CLASSIFICATION	3.4273408934747817E-6	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999988307016245	WITHOUT_CLASSIFICATION	1.1692983753918657E-6	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999988307016245	WITHOUT_CLASSIFICATION	1.1692983753918657E-6	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9989145928968964	WITHOUT_CLASSIFICATION	0.0010854071031035535	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999996286764721	WITHOUT_CLASSIFICATION	3.713235279880006E-7	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999709186089228	WITHOUT_CLASSIFICATION	2.9081391077164567E-5	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999691302047679	WITHOUT_CLASSIFICATION	3.0869795232075894E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999612339992139	WITHOUT_CLASSIFICATION	3.876600078614527E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999612339992139	WITHOUT_CLASSIFICATION	3.876600078614527E-5	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999632324366208	WITHOUT_CLASSIFICATION	3.6767563379170344E-5	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999796426950809	WITHOUT_CLASSIFICATION	2.0357304919124626E-5	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999941852803	WITHOUT_CLASSIFICATION	5.814719726975839E-9	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999245806020012	WITHOUT_CLASSIFICATION	7.541939799878447E-5	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999969989153488	WITHOUT_CLASSIFICATION	3.001084651151183E-6	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999953152816725	WITHOUT_CLASSIFICATION	4.684718327445539E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999994013917451	WITHOUT_CLASSIFICATION	5.986082548670615E-7	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.999883404426824	WITHOUT_CLASSIFICATION	1.1659557317600143E-4	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9999948248392382	WITHOUT_CLASSIFICATION	5.175160761743746E-6	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999692309155788	WITHOUT_CLASSIFICATION	3.076908442121102E-5	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999993040941715	WITHOUT_CLASSIFICATION	6.959058284100169E-7	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.999961908434243	WITHOUT_CLASSIFICATION	3.8091565757029534E-5	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999965620325824	WITHOUT_CLASSIFICATION	3.4379674175606513E-6	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999988519230714	WITHOUT_CLASSIFICATION	1.1480769286562926E-6	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9550530839081918	WITHOUT_CLASSIFICATION	0.04494691609180834	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999998394916151	WITHOUT_CLASSIFICATION	1.605083848709906E-7	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998046281847	WITHOUT_CLASSIFICATION	1.9537181529695205E-6	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999381962230494	WITHOUT_CLASSIFICATION	6.180377695061431E-5	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999936607485529	WITHOUT_CLASSIFICATION	6.3392514471325015E-6	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999983241233986	WITHOUT_CLASSIFICATION	1.6758766014082996E-6	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9997058486313826	WITHOUT_CLASSIFICATION	2.94151368617461E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999987557978673	WITHOUT_CLASSIFICATION	1.2442021326648613E-6	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999933642676601	WITHOUT_CLASSIFICATION	6.63573233993344E-6	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999999352619272	WITHOUT_CLASSIFICATION	6.473807281069598E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999399014335995	WITHOUT_CLASSIFICATION	6.009856640047864E-5	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999994335084291	WITHOUT_CLASSIFICATION	5.664915708170953E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999466757734	WITHOUT_CLASSIFICATION	5.3324226599864776E-6	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999990792554743	WITHOUT_CLASSIFICATION	9.207445257021146E-7	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999442958566183	WITHOUT_CLASSIFICATION	5.570414338182887E-5	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999996350071404	WITHOUT_CLASSIFICATION	3.649928595944139E-7	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979788580865	WITHOUT_CLASSIFICATION	2.0211419134077417E-6	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910737979908	WITHOUT_CLASSIFICATION	8.926202009176587E-6	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999946207021556	WITHOUT_CLASSIFICATION	5.3792978443282885E-6	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999946207021556	WITHOUT_CLASSIFICATION	5.3792978443282885E-6	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999965601163184	WITHOUT_CLASSIFICATION	3.4398836815837085E-6	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999994224490342	WITHOUT_CLASSIFICATION	5.775509658201922E-7	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999949454582783	WITHOUT_CLASSIFICATION	5.0545417217225594E-6	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999949454582783	WITHOUT_CLASSIFICATION	5.0545417217225594E-6	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999993955796659	WITHOUT_CLASSIFICATION	6.04420334101805E-6	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998555272958668	WITHOUT_CLASSIFICATION	1.444727041331105E-4	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999866785612122	WITHOUT_CLASSIFICATION	1.3321438787730839E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999970476926522	WITHOUT_CLASSIFICATION	2.95230734794268E-6	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999979058008234	WITHOUT_CLASSIFICATION	2.0941991765709906E-6	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999997996403098	WITHOUT_CLASSIFICATION	2.0035969005892654E-7	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.999998101228519	WITHOUT_CLASSIFICATION	1.8987714810396097E-6	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999572649026209	WITHOUT_CLASSIFICATION	4.273509737915003E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999964098752177	WITHOUT_CLASSIFICATION	3.59012478243272E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999964098752177	WITHOUT_CLASSIFICATION	3.59012478243272E-6	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999992954908171	WITHOUT_CLASSIFICATION	7.045091830182778E-7	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999016009956	WITHOUT_CLASSIFICATION	9.839900438524213E-8	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999016009956	WITHOUT_CLASSIFICATION	9.839900438524213E-8	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999953384741218	WITHOUT_CLASSIFICATION	4.66152587815043E-6	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999609200485	WITHOUT_CLASSIFICATION	3.907995144009766E-8	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9013457934015823	WITHOUT_CLASSIFICATION	0.09865420659841774	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999999207931926	WITHOUT_CLASSIFICATION	7.920680747159192E-8	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999999097597423	WITHOUT_CLASSIFICATION	9.024025775252494E-8	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999359351216	WITHOUT_CLASSIFICATION	6.40648783659193E-8	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999618485134559	WITHOUT_CLASSIFICATION	3.815148654402994E-5	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999977740831573	WITHOUT_CLASSIFICATION	2.225916842707805E-6	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999904986764094	WITHOUT_CLASSIFICATION	9.501323590648124E-6	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9990866872990202	WITHOUT_CLASSIFICATION	9.133127009798015E-4	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999947295957794	WITHOUT_CLASSIFICATION	5.270404220594481E-6	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999862324744342	WITHOUT_CLASSIFICATION	1.3767525565906392E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999949726549129	WITHOUT_CLASSIFICATION	5.027345087143185E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999949726549129	WITHOUT_CLASSIFICATION	5.027345087143185E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999949726549129	WITHOUT_CLASSIFICATION	5.027345087143185E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999949726549129	WITHOUT_CLASSIFICATION	5.027345087143185E-6	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999997337685468	WITHOUT_CLASSIFICATION	2.6623145320648794E-6	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998903755346018	WITHOUT_CLASSIFICATION	1.0962446539819995E-4	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999083040471077	WITHOUT_CLASSIFICATION	9.169595289223615E-5	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999961049291172	WITHOUT_CLASSIFICATION	3.895070882852957E-6	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999948085156369	WITHOUT_CLASSIFICATION	5.191484363104548E-6	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999784077488141	WITHOUT_CLASSIFICATION	2.159225118584979E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998401162813232	WITHOUT_CLASSIFICATION	1.598837186768371E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999980662953465	WITHOUT_CLASSIFICATION	1.9337046535409953E-6	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999970989316224	WITHOUT_CLASSIFICATION	2.9010683776716815E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998401162813232	WITHOUT_CLASSIFICATION	1.598837186768371E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998401162813232	WITHOUT_CLASSIFICATION	1.598837186768371E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999769872576171	WITHOUT_CLASSIFICATION	2.3012742382852982E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999997668600448	WITHOUT_CLASSIFICATION	2.3313995517478554E-7	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999867721626132	WITHOUT_CLASSIFICATION	1.3227837386803127E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9993521832816256	WITHOUT_CLASSIFICATION	6.478167183745624E-4	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999995917331944	WITHOUT_CLASSIFICATION	4.082668056485365E-7	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.999999975779703	WITHOUT_CLASSIFICATION	2.422029702181974E-8	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999940519362156	WITHOUT_CLASSIFICATION	5.948063784389848E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9993521832816256	WITHOUT_CLASSIFICATION	6.478167183745624E-4	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.999999950048028	WITHOUT_CLASSIFICATION	4.995197195428118E-8	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999893411457436	WITHOUT_CLASSIFICATION	1.0658854256504983E-5	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999984596675237	WITHOUT_CLASSIFICATION	1.5403324763680326E-6	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999977068917122	WITHOUT_CLASSIFICATION	2.2931082879114297E-6	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999996183260206	WITHOUT_CLASSIFICATION	3.8167397944185144E-7	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999996660169227	WITHOUT_CLASSIFICATION	3.33983077306544E-7	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999994333547154	WITHOUT_CLASSIFICATION	5.666452844952184E-7	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999421838157583	WITHOUT_CLASSIFICATION	5.781618424165728E-5	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998531170642	WITHOUT_CLASSIFICATION	1.4688293587373985E-7	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999993183021615	WITHOUT_CLASSIFICATION	6.816978385145611E-7	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999965523021	WITHOUT_CLASSIFICATION	3.447697905802503E-8	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999815653181358	WITHOUT_CLASSIFICATION	1.8434681864290186E-5	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999992237779348	WITHOUT_CLASSIFICATION	7.76222065102363E-7	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998236006836776	WITHOUT_CLASSIFICATION	1.7639931632246861E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9995797830576066	WITHOUT_CLASSIFICATION	4.2021694239333275E-4	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999999184423025	WITHOUT_CLASSIFICATION	8.155769749546664E-8	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999355285104	WITHOUT_CLASSIFICATION	6.44714896189261E-8	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999998763316767	WITHOUT_CLASSIFICATION	1.2366832330526935E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999993371808326	WITHOUT_CLASSIFICATION	6.628191674813718E-7	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999998763316767	WITHOUT_CLASSIFICATION	1.2366832330526935E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999978710564258	WITHOUT_CLASSIFICATION	2.1289435741782847E-6	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999557393194	WITHOUT_CLASSIFICATION	4.42606805404453E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999978966409191	WITHOUT_CLASSIFICATION	2.1033590809625855E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999994901645819	WITHOUT_CLASSIFICATION	5.098354180703407E-7	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999355285104	WITHOUT_CLASSIFICATION	6.44714896189261E-8	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999993371808326	WITHOUT_CLASSIFICATION	6.628191674813718E-7	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999978710564258	WITHOUT_CLASSIFICATION	2.1289435741782847E-6	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999824627482529	WITHOUT_CLASSIFICATION	1.7537251747154845E-5	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999928975569754	WITHOUT_CLASSIFICATION	7.1024430246345846E-6	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9999978264134494	WITHOUT_CLASSIFICATION	2.173586550622006E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9999982155497338	WITHOUT_CLASSIFICATION	1.784450266217995E-6	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999695614631168	WITHOUT_CLASSIFICATION	3.043853688318532E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999978168428305	WITHOUT_CLASSIFICATION	2.183157169390442E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998046281847	WITHOUT_CLASSIFICATION	1.9537181529695205E-6	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999557393194	WITHOUT_CLASSIFICATION	4.42606805404453E-8	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999997473604	WITHOUT_CLASSIFICATION	2.5263958950042215E-10	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999996239871125	WITHOUT_CLASSIFICATION	3.760128875680871E-7	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999994018422006	WITHOUT_CLASSIFICATION	5.981577995145993E-7	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998046281847	WITHOUT_CLASSIFICATION	1.9537181529695205E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999466757734	WITHOUT_CLASSIFICATION	5.3324226599864776E-6	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999970881476266	WITHOUT_CLASSIFICATION	2.911852373473088E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998046281847	WITHOUT_CLASSIFICATION	1.9537181529695205E-6	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999994350021768	WITHOUT_CLASSIFICATION	5.649978232458043E-7	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999989454321931	WITHOUT_CLASSIFICATION	1.0545678068481419E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999466757734	WITHOUT_CLASSIFICATION	5.3324226599864776E-6	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999906116689222	WITHOUT_CLASSIFICATION	9.388331077801607E-5	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9998415135451362	WITHOUT_CLASSIFICATION	1.5848645486384063E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999962428312573	WITHOUT_CLASSIFICATION	3.7571687427023674E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999960724070134	WITHOUT_CLASSIFICATION	3.927592986674767E-6	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9987916004115519	WITHOUT_CLASSIFICATION	0.0012083995884481261	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999596498721177	WITHOUT_CLASSIFICATION	4.0350127882263215E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999708441977474	WITHOUT_CLASSIFICATION	2.9155802252512182E-5	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999984714292477	WITHOUT_CLASSIFICATION	1.5285707523222343E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999845338030537	WITHOUT_CLASSIFICATION	1.546619694634643E-5	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999221760251	WITHOUT_CLASSIFICATION	7.782397488339474E-8	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9013457934015823	WITHOUT_CLASSIFICATION	0.09865420659841774	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999922859416001	WITHOUT_CLASSIFICATION	7.714058400019447E-6	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.999991232002934	WITHOUT_CLASSIFICATION	8.767997065896495E-6	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999979048194478	WITHOUT_CLASSIFICATION	2.0951805521982934E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999881077901402	WITHOUT_CLASSIFICATION	1.1892209859636712E-5	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999995440311867	WITHOUT_CLASSIFICATION	4.559688133317084E-7	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999734507784	WITHOUT_CLASSIFICATION	2.6549221604796383E-8	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.999999279160471	WITHOUT_CLASSIFICATION	7.208395290487915E-7	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.999987218418494	WITHOUT_CLASSIFICATION	1.2781581506030521E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999997008648924	WITHOUT_CLASSIFICATION	2.991351076398321E-7	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.999913219734654	WITHOUT_CLASSIFICATION	8.678026534609004E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9003921786438799	WITHOUT_CLASSIFICATION	0.09960782135612015	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999941839264	WITHOUT_CLASSIFICATION	5.816073634446134E-9	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999900327068	WITHOUT_CLASSIFICATION	9.967293208285309E-9	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999941902898174	WITHOUT_CLASSIFICATION	5.809710182679059E-6	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999979366677134	WITHOUT_CLASSIFICATION	2.0633322864581472E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998863064563996	WITHOUT_CLASSIFICATION	1.1369354360033212E-4	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999999636423195	WITHOUT_CLASSIFICATION	3.63576805116279E-8	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999992646215572	WITHOUT_CLASSIFICATION	7.353784428985384E-7	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999991697478274	WITHOUT_CLASSIFICATION	8.302521724399632E-7	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999949037696461	WITHOUT_CLASSIFICATION	5.096230353983074E-6	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999765712266405	WITHOUT_CLASSIFICATION	2.342877335956313E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9907672268999583	WITHOUT_CLASSIFICATION	0.00923277310004165	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999997722311684	WITHOUT_CLASSIFICATION	2.277688315951437E-6	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999865378400168	WITHOUT_CLASSIFICATION	1.3462159983311906E-5	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.99992076949837	WITHOUT_CLASSIFICATION	7.923050162992888E-5	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999979546180434	WITHOUT_CLASSIFICATION	2.0453819565366984E-6	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999999710546061	WITHOUT_CLASSIFICATION	2.8945393831106437E-8	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.8978382345822525	WITHOUT_CLASSIFICATION	0.10216176541774755	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999889739538134	WITHOUT_CLASSIFICATION	1.102604618658406E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999466757734	WITHOUT_CLASSIFICATION	5.3324226599864776E-6	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999995021178119	WITHOUT_CLASSIFICATION	4.978821881261309E-7	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999676352590265	WITHOUT_CLASSIFICATION	3.236474097338761E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999676352590265	WITHOUT_CLASSIFICATION	3.236474097338761E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999783086259674	WITHOUT_CLASSIFICATION	2.169137403260452E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999596498721177	WITHOUT_CLASSIFICATION	4.0350127882263215E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999907724759748	WITHOUT_CLASSIFICATION	9.227524025215281E-6	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999913257623544	WITHOUT_CLASSIFICATION	8.674237645626409E-6	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999999657981036	WITHOUT_CLASSIFICATION	3.420189639586715E-7	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999851584732281	WITHOUT_CLASSIFICATION	1.4841526771952558E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999930740342193	WITHOUT_CLASSIFICATION	6.925965780716751E-6	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999355512756626	WITHOUT_CLASSIFICATION	6.444872433736924E-5	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999494596409	WITHOUT_CLASSIFICATION	5.0540359164748934E-8	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999317950616	WITHOUT_CLASSIFICATION	6.820493835826483E-8	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999956799274975	WITHOUT_CLASSIFICATION	4.320072502546395E-6	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999990404641904	WITHOUT_CLASSIFICATION	9.595358095330568E-7	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9995874916868212	WITHOUT_CLASSIFICATION	4.125083131788869E-4	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999990650519508	WITHOUT_CLASSIFICATION	9.349480492111107E-6	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999825850656	WITHOUT_CLASSIFICATION	1.741493436113906E-8	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999999999684412	WITHOUT_CLASSIFICATION	3.155881143085568E-10	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999998715686923	WITHOUT_CLASSIFICATION	1.2843130770106311E-6	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999998142699706	WITHOUT_CLASSIFICATION	1.857300293429057E-7	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999671859621	WITHOUT_CLASSIFICATION	3.281403791832196E-8	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999990035639076	WITHOUT_CLASSIFICATION	9.964360924262828E-7	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999830455553433	WITHOUT_CLASSIFICATION	1.695444465667053E-5	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999103740848979	WITHOUT_CLASSIFICATION	8.962591510205568E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999569372596867	WITHOUT_CLASSIFICATION	4.3062740313419226E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999993094312707	WITHOUT_CLASSIFICATION	6.905687293833514E-7	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.8978382345822525	WITHOUT_CLASSIFICATION	0.10216176541774755	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999997144982417	WITHOUT_CLASSIFICATION	2.855017584311208E-7	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9940813992687871	WITHOUT_CLASSIFICATION	0.005918600731212768	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999371689003	WITHOUT_CLASSIFICATION	6.283109971366685E-8	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.999997823386997	WITHOUT_CLASSIFICATION	2.1766130028682867E-6	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999980998065408	WITHOUT_CLASSIFICATION	1.9001934592283628E-6	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999835242877192	WITHOUT_CLASSIFICATION	1.6475712280719887E-5	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999802320926701	WITHOUT_CLASSIFICATION	1.9767907330004622E-5	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999994110937109	WITHOUT_CLASSIFICATION	5.88906289139197E-7	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999946027966125	WITHOUT_CLASSIFICATION	5.397203387526918E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999970651516179	WITHOUT_CLASSIFICATION	2.9348483821725476E-6	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999998369334863	WITHOUT_CLASSIFICATION	1.6306651382723315E-7	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999988223398513	WITHOUT_CLASSIFICATION	1.1776601486910125E-6	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999983337913225	WITHOUT_CLASSIFICATION	1.6662086775486616E-6	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999996782229201	WITHOUT_CLASSIFICATION	3.2177707985394914E-7	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999399316141	WITHOUT_CLASSIFICATION	6.00683858959505E-8	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999399316141	WITHOUT_CLASSIFICATION	6.00683858959505E-8	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999995061994552	WITHOUT_CLASSIFICATION	4.938005447267813E-7	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999990346220129	WITHOUT_CLASSIFICATION	9.653779871732616E-7	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999668681276	WITHOUT_CLASSIFICATION	3.313187235885264E-8	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999668681276	WITHOUT_CLASSIFICATION	3.313187235885264E-8	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.999999875779187	WITHOUT_CLASSIFICATION	1.2422081296842472E-7	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999046614496202	WITHOUT_CLASSIFICATION	9.533855037987529E-5	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.999998185248913	WITHOUT_CLASSIFICATION	1.8147510869715413E-6	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.999998817009121	WITHOUT_CLASSIFICATION	1.1829908790076684E-6	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999982048080758	WITHOUT_CLASSIFICATION	1.7951919242240365E-6	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999989036417318	WITHOUT_CLASSIFICATION	1.0963582682608864E-6	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999956305603	WITHOUT_CLASSIFICATION	4.369439720719778E-9	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999956305603	WITHOUT_CLASSIFICATION	4.369439720719778E-9	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999993370280604	WITHOUT_CLASSIFICATION	6.629719395359577E-7	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999874221244951	WITHOUT_CLASSIFICATION	1.2577875504811513E-5	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.999998006270939	WITHOUT_CLASSIFICATION	1.993729060977101E-6	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999992359867922	WITHOUT_CLASSIFICATION	7.640132078325256E-7	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999992359867922	WITHOUT_CLASSIFICATION	7.640132078325256E-7	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999997989470316	WITHOUT_CLASSIFICATION	2.0105296837925226E-7	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999984691591199	WITHOUT_CLASSIFICATION	1.5308408800374838E-6	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999830708740333	WITHOUT_CLASSIFICATION	1.6929125966722825E-5	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999990958870839	WITHOUT_CLASSIFICATION	9.041129159868619E-7	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999996221899631	WITHOUT_CLASSIFICATION	3.778100369007876E-6	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999993572892711	WITHOUT_CLASSIFICATION	6.427107287660338E-7	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999991545239857	WITHOUT_CLASSIFICATION	8.454760142557617E-7	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999983760552625	WITHOUT_CLASSIFICATION	1.6239447374558672E-6	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999997262291281	WITHOUT_CLASSIFICATION	2.737708717896321E-7	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999998041922342	WITHOUT_CLASSIFICATION	1.9580776576135125E-7	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9995732310258121	WITHOUT_CLASSIFICATION	4.2676897418803157E-4	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999255778182267	WITHOUT_CLASSIFICATION	7.442218177334606E-5	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9993456088699998	WITHOUT_CLASSIFICATION	6.54391130000258E-4	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999989169589736	WITHOUT_CLASSIFICATION	1.0830410264211096E-6	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999832363119872	WITHOUT_CLASSIFICATION	1.676368801282237E-5	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999983491835044	WITHOUT_CLASSIFICATION	1.6508164956190311E-6	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999993067047797	WITHOUT_CLASSIFICATION	6.932952204316156E-7	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999939944637712	WITHOUT_CLASSIFICATION	6.0055362286839605E-6	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999841073733375	WITHOUT_CLASSIFICATION	1.5892626662418927E-5	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999941940667062	WITHOUT_CLASSIFICATION	5.80593329383155E-6	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999992535412927	WITHOUT_CLASSIFICATION	7.464587072375153E-7	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999937866607802	WITHOUT_CLASSIFICATION	6.213339219736288E-6	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999555838090395	WITHOUT_CLASSIFICATION	4.44161909605171E-5	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999990835889898	WITHOUT_CLASSIFICATION	9.164110100616694E-7	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999903719147972	WITHOUT_CLASSIFICATION	9.628085202716518E-6	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999655882351881	WITHOUT_CLASSIFICATION	3.44117648119861E-5	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999995642352422	WITHOUT_CLASSIFICATION	4.357647579407554E-7	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999829269310931	WITHOUT_CLASSIFICATION	1.7073068906900877E-5	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999999440587918	WITHOUT_CLASSIFICATION	5.594120820086443E-7	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.99999757483365	WITHOUT_CLASSIFICATION	2.425166350077894E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999118387572777	WITHOUT_CLASSIFICATION	8.816124272225915E-5	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999661843066	WITHOUT_CLASSIFICATION	3.381569339302883E-8	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999993058270684	WITHOUT_CLASSIFICATION	6.941729315677408E-7	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999809326712675	WITHOUT_CLASSIFICATION	1.906732873245069E-5	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999993610220438	WITHOUT_CLASSIFICATION	6.389779561824684E-7	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.999959426452675	WITHOUT_CLASSIFICATION	4.057354732494157E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999962566433402	WITHOUT_CLASSIFICATION	3.7433566596475156E-6	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999598434416	WITHOUT_CLASSIFICATION	4.015655843823229E-8	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9998926698544992	WITHOUT_CLASSIFICATION	1.0733014550082758E-4	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999998383906498	WITHOUT_CLASSIFICATION	1.6160935026259827E-7	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998125427053532	WITHOUT_CLASSIFICATION	1.874572946468007E-4	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999984439150621	WITHOUT_CLASSIFICATION	1.5560849378379698E-6	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.999992844507308	WITHOUT_CLASSIFICATION	7.155492691950106E-6	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999416831263447	WITHOUT_CLASSIFICATION	5.8316873655406024E-5	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999996721423248	WITHOUT_CLASSIFICATION	3.278576752051236E-7	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999991135605264	WITHOUT_CLASSIFICATION	8.864394736291331E-7	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.999999443853267	WITHOUT_CLASSIFICATION	5.561467330558635E-7	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999997219769605	WITHOUT_CLASSIFICATION	2.780230394139451E-7	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999875589616486	WITHOUT_CLASSIFICATION	1.2441038351323487E-5	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999981342443651	WITHOUT_CLASSIFICATION	1.8657556348878216E-6	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999988622867884	WITHOUT_CLASSIFICATION	1.1377132116707591E-6	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999080201533	WITHOUT_CLASSIFICATION	9.197984679364806E-8	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.999998816996437	WITHOUT_CLASSIFICATION	1.1830035630458667E-6	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999999994583	WITHOUT_CLASSIFICATION	5.417155715004228E-13	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999981202179281	WITHOUT_CLASSIFICATION	1.8797820719634346E-6	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999997752751275	WITHOUT_CLASSIFICATION	2.2472487255026292E-7	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999992950018813	WITHOUT_CLASSIFICATION	7.049981186535242E-7	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999998383158378	WITHOUT_CLASSIFICATION	1.61684162212281E-6	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999992911724468	WITHOUT_CLASSIFICATION	7.088275531971684E-6	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999999390133211	WITHOUT_CLASSIFICATION	6.098667894087463E-8	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999866206697301	WITHOUT_CLASSIFICATION	1.3379330269842874E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999866206697301	WITHOUT_CLASSIFICATION	1.3379330269842874E-5	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999894108598	WITHOUT_CLASSIFICATION	1.0589140171075373E-8	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999442315089667	WITHOUT_CLASSIFICATION	5.5768491033360984E-5	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999876002189	WITHOUT_CLASSIFICATION	1.2399781200557784E-8	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999784072205	WITHOUT_CLASSIFICATION	2.1592779421283456E-8	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999998278021874	WITHOUT_CLASSIFICATION	1.7219781253289564E-7	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999964763024146	WITHOUT_CLASSIFICATION	3.5236975853581906E-6	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999737575643	WITHOUT_CLASSIFICATION	2.6242435638164907E-8	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999999959778	WITHOUT_CLASSIFICATION	4.0221630276735116E-12	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999999559806455	WITHOUT_CLASSIFICATION	4.401935444925767E-8	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999979117470981	WITHOUT_CLASSIFICATION	2.088252901922302E-6	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999903884966639	WITHOUT_CLASSIFICATION	9.61150333615982E-6	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999059598746282	WITHOUT_CLASSIFICATION	9.404012537191431E-5	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999991309271529	WITHOUT_CLASSIFICATION	8.690728469877749E-7	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.999993576931915	WITHOUT_CLASSIFICATION	6.423068084967269E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999988769374804	WITHOUT_CLASSIFICATION	1.1230625197339E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999988769374804	WITHOUT_CLASSIFICATION	1.1230625197339E-6	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.999999994414888	WITHOUT_CLASSIFICATION	5.585111968443441E-9	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999458725570552	WITHOUT_CLASSIFICATION	5.412744294482226E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999982728140144	WITHOUT_CLASSIFICATION	1.7271859856631383E-6	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999957091801768	WITHOUT_CLASSIFICATION	4.2908198231835725E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999989969231791	WITHOUT_CLASSIFICATION	1.0030768209951203E-6	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947985744284	WITHOUT_CLASSIFICATION	5.20142557166301E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999590997258372	WITHOUT_CLASSIFICATION	4.0900274162893835E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.999998161105348	WITHOUT_CLASSIFICATION	1.8388946520881403E-6	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999985655284033	WITHOUT_CLASSIFICATION	1.4344715967740971E-6	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999989351598695	WITHOUT_CLASSIFICATION	1.0648401304601672E-6	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999978222103139	WITHOUT_CLASSIFICATION	2.177789686161678E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999381010851	WITHOUT_CLASSIFICATION	6.189891484141328E-8	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999975299116	WITHOUT_CLASSIFICATION	2.4700884057930085E-9	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999953535248	WITHOUT_CLASSIFICATION	4.646475222823236E-9	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999999122920018	WITHOUT_CLASSIFICATION	8.770799808133995E-8	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999998657619293	WITHOUT_CLASSIFICATION	1.3423807059226625E-7	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999998152488829	WITHOUT_CLASSIFICATION	1.847511170898017E-7	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999998088020827	WITHOUT_CLASSIFICATION	1.911979172392774E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999785565032	WITHOUT_CLASSIFICATION	2.144349671180451E-8	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.999999553697365	WITHOUT_CLASSIFICATION	4.463026349609611E-7	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999778072657532	WITHOUT_CLASSIFICATION	2.219273424680662E-5	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999994963121	WITHOUT_CLASSIFICATION	5.036878748644345E-10	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999994331626544	WITHOUT_CLASSIFICATION	5.668373456773812E-7	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999982754511888	WITHOUT_CLASSIFICATION	1.7245488111659728E-6	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999967814270892	WITHOUT_CLASSIFICATION	3.2185729107988907E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999999795500568	WITHOUT_CLASSIFICATION	2.04499432090068E-8	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999583511539	WITHOUT_CLASSIFICATION	4.164884613555772E-8	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999992426343554	WITHOUT_CLASSIFICATION	7.573656446294449E-7	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999989506965629	WITHOUT_CLASSIFICATION	1.049303437158218E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999896704923	WITHOUT_CLASSIFICATION	1.0329507728618195E-8	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999975086360562	WITHOUT_CLASSIFICATION	2.491363943807854E-6	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999998461027778	WITHOUT_CLASSIFICATION	1.5389722218938E-7	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999999700115	WITHOUT_CLASSIFICATION	2.9988402574869465E-11	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999985638739748	WITHOUT_CLASSIFICATION	1.4361260252896228E-6	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9995256655449434	WITHOUT_CLASSIFICATION	4.7433445505665065E-4	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998606645212	WITHOUT_CLASSIFICATION	1.3933547874717362E-7	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999367715475	WITHOUT_CLASSIFICATION	6.322845258020084E-8	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999999895726882	WITHOUT_CLASSIFICATION	1.042731180868893E-7	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999982541267334	WITHOUT_CLASSIFICATION	1.7458732665576614E-6	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999955892853071	WITHOUT_CLASSIFICATION	4.410714692879744E-6	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999251596179838	WITHOUT_CLASSIFICATION	7.484038201613774E-5	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999251596179838	WITHOUT_CLASSIFICATION	7.484038201613774E-5	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999954840356	WITHOUT_CLASSIFICATION	4.515964336504204E-9	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999989351373889	WITHOUT_CLASSIFICATION	1.0648626111099758E-6	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9997117309699511	WITHOUT_CLASSIFICATION	2.882690300487746E-4	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999873560023231	WITHOUT_CLASSIFICATION	1.2643997676943124E-5	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.999999468781541	WITHOUT_CLASSIFICATION	5.312184589989311E-7	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999964688592573	WITHOUT_CLASSIFICATION	3.531140742741879E-6	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999990749074091	WITHOUT_CLASSIFICATION	9.250925909236496E-7	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999998296113314	WITHOUT_CLASSIFICATION	1.7038866847548914E-7	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.999827020343168	WITHOUT_CLASSIFICATION	1.7297965683210232E-4	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989545659975	WITHOUT_CLASSIFICATION	1.0454340024651338E-6	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997439507242	WITHOUT_CLASSIFICATION	2.5604927580066254E-7	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998735086694011	WITHOUT_CLASSIFICATION	1.264913305988129E-4	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999981295277	WITHOUT_CLASSIFICATION	1.870472301159232E-9	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999825124135	WITHOUT_CLASSIFICATION	1.7487586482262514E-8	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999990532281455	WITHOUT_CLASSIFICATION	9.467718543857547E-7	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999999903054616	WITHOUT_CLASSIFICATION	9.694538408136226E-9	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999737668133796	WITHOUT_CLASSIFICATION	2.6233186620472837E-5	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999326437891	WITHOUT_CLASSIFICATION	6.735621089391027E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999842587268554	WITHOUT_CLASSIFICATION	1.57412731445711E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999999934938755	WITHOUT_CLASSIFICATION	6.506124562702927E-9	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999190873639	WITHOUT_CLASSIFICATION	8.091263620673218E-8	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999954360617994	WITHOUT_CLASSIFICATION	4.563938200635374E-6	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999996488001877	WITHOUT_CLASSIFICATION	3.5119981226695977E-7	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999927328793493	WITHOUT_CLASSIFICATION	7.267120650646345E-6	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999989320427256	WITHOUT_CLASSIFICATION	1.0679572743375087E-6	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999556216191051	WITHOUT_CLASSIFICATION	4.437838089476511E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999993455683409	WITHOUT_CLASSIFICATION	6.544316589736128E-7	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999826448343	WITHOUT_CLASSIFICATION	1.7355165748281888E-8	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999954765159	WITHOUT_CLASSIFICATION	4.523484179294414E-9	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999987249529922	WITHOUT_CLASSIFICATION	1.275047007686442E-6	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999892907954008	WITHOUT_CLASSIFICATION	1.0709204599126744E-5	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999999611761852	WITHOUT_CLASSIFICATION	3.882381485174567E-8	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999986768920994	WITHOUT_CLASSIFICATION	1.3231079005560953E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999947903984	WITHOUT_CLASSIFICATION	5.209601636519363E-9	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999908012688	WITHOUT_CLASSIFICATION	9.198731233940015E-9	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997364536423133	WITHOUT_CLASSIFICATION	2.6354635768666417E-4	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999999117017	WITHOUT_CLASSIFICATION	8.829826200342303E-11	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999999413256449	WITHOUT_CLASSIFICATION	5.86743550958638E-7	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999857129460423	WITHOUT_CLASSIFICATION	1.4287053957550998E-5	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999988637813149	WITHOUT_CLASSIFICATION	1.136218685121613E-6	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999996788617439	WITHOUT_CLASSIFICATION	3.2113825606069214E-7	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999998583843969	WITHOUT_CLASSIFICATION	1.4161560319555432E-7	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999996238308617	WITHOUT_CLASSIFICATION	3.761691384050843E-7	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999658826476	WITHOUT_CLASSIFICATION	3.411735236449102E-8	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.999999410407034	WITHOUT_CLASSIFICATION	5.895929658914306E-7	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999978008786033	WITHOUT_CLASSIFICATION	2.19912139676527E-6	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999998290800048	WITHOUT_CLASSIFICATION	1.7091999521981763E-7	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999991309271529	WITHOUT_CLASSIFICATION	8.690728469877749E-7	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999719941972	WITHOUT_CLASSIFICATION	2.8005802799489818E-8	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999999108381	WITHOUT_CLASSIFICATION	8.916190520672151E-11	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999982424632865	WITHOUT_CLASSIFICATION	1.7575367135732094E-6	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999962507907343	WITHOUT_CLASSIFICATION	3.7492092657821672E-6	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999992940073	WITHOUT_CLASSIFICATION	7.059926256172554E-10	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999669889347	WITHOUT_CLASSIFICATION	3.301106534836378E-8	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9994580280730551	WITHOUT_CLASSIFICATION	5.419719269449829E-4	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999998796891391	WITHOUT_CLASSIFICATION	1.2031086091490802E-7	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999446914714	WITHOUT_CLASSIFICATION	5.530852852134707E-8	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999235607134729	WITHOUT_CLASSIFICATION	7.643928652708814E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999493078789	WITHOUT_CLASSIFICATION	5.069212109011427E-8	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999974715014855	WITHOUT_CLASSIFICATION	2.5284985144612975E-6	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.999999931955917	WITHOUT_CLASSIFICATION	6.804408305442133E-8	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999962750339	WITHOUT_CLASSIFICATION	3.72496608394344E-9	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997055602361	WITHOUT_CLASSIFICATION	2.944397639034931E-7	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999989873530669	WITHOUT_CLASSIFICATION	1.012646933136946E-6	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999972156582467	WITHOUT_CLASSIFICATION	2.7843417531574447E-6	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999991630846	WITHOUT_CLASSIFICATION	8.369154656100491E-10	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.999999311250531	WITHOUT_CLASSIFICATION	6.887494690041592E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997055602361	WITHOUT_CLASSIFICATION	2.944397639034931E-7	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9998397509877237	WITHOUT_CLASSIFICATION	1.602490122762099E-4	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999997813127994	WITHOUT_CLASSIFICATION	2.1868720054011187E-7	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999970772381	WITHOUT_CLASSIFICATION	2.9227620187927955E-9	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999995168943571	WITHOUT_CLASSIFICATION	4.831056430478529E-7	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999997415333697	WITHOUT_CLASSIFICATION	2.584666302975135E-6	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999996717542706	WITHOUT_CLASSIFICATION	3.2824572944090226E-7	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999947301477	WITHOUT_CLASSIFICATION	5.26985226210068E-9	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999984401145438	WITHOUT_CLASSIFICATION	1.5598854563348394E-6	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999905825115	WITHOUT_CLASSIFICATION	9.417488422613953E-9	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.999999021574073	WITHOUT_CLASSIFICATION	9.784259269600683E-7	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999829279096456	WITHOUT_CLASSIFICATION	1.707209035439174E-5	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9993827652957255	WITHOUT_CLASSIFICATION	6.172347042745197E-4	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999974197121071	WITHOUT_CLASSIFICATION	2.580287892896594E-6	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999950860936614	WITHOUT_CLASSIFICATION	4.9139063385563825E-6	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999999968322087	WITHOUT_CLASSIFICATION	3.1677913299448674E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999993094312707	WITHOUT_CLASSIFICATION	6.905687293833514E-7	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999937704552	WITHOUT_CLASSIFICATION	6.229544751060227E-9	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999849126633	WITHOUT_CLASSIFICATION	1.5087336735808733E-8	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9997775801362281	WITHOUT_CLASSIFICATION	2.2241986377198781E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999995896574322	WITHOUT_CLASSIFICATION	4.1034256772844934E-7	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.999997273603865	WITHOUT_CLASSIFICATION	2.726396134992807E-6	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999341064240251	WITHOUT_CLASSIFICATION	6.589357597485364E-5	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999812139798094	WITHOUT_CLASSIFICATION	1.878602019055201E-5	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999999979223876	WITHOUT_CLASSIFICATION	2.0776124035799682E-8	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999936799927	WITHOUT_CLASSIFICATION	6.320007233262812E-9	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999573312558	WITHOUT_CLASSIFICATION	4.266874414004216E-8	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999899925018885	WITHOUT_CLASSIFICATION	1.0007498111521418E-5	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999977353035112	WITHOUT_CLASSIFICATION	2.2646964888112658E-6	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999999942934212	WITHOUT_CLASSIFICATION	5.7065787164813975E-9	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999946864623258	WITHOUT_CLASSIFICATION	5.313537674172426E-6	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999981329170238	WITHOUT_CLASSIFICATION	1.8670829762259555E-6	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999636849332394	WITHOUT_CLASSIFICATION	3.6315066760533456E-5	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999999155341724	WITHOUT_CLASSIFICATION	8.446582755558237E-8	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999846125281	WITHOUT_CLASSIFICATION	1.5387471842511276E-8	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999999390145	WITHOUT_CLASSIFICATION	6.098558339460427E-11	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999979164841	WITHOUT_CLASSIFICATION	2.0835159487241978E-9	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999909779389	WITHOUT_CLASSIFICATION	9.022061163006242E-9	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.999904917345209	WITHOUT_CLASSIFICATION	9.508265479098707E-5	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999997657923391	WITHOUT_CLASSIFICATION	2.34207660827266E-7	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999996269407432	WITHOUT_CLASSIFICATION	3.7305925691069645E-7	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.99972635846915	WITHOUT_CLASSIFICATION	2.7364153085000396E-4	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.99972635846915	WITHOUT_CLASSIFICATION	2.7364153085000396E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999946679665541	WITHOUT_CLASSIFICATION	5.332033445826826E-6	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999996950466168	WITHOUT_CLASSIFICATION	3.0495338323901923E-7	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999997840634801	WITHOUT_CLASSIFICATION	2.15936519957424E-7	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9949474778795805	WITHOUT_CLASSIFICATION	0.005052522120419517	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999970476926522	WITHOUT_CLASSIFICATION	2.95230734794268E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999970476926522	WITHOUT_CLASSIFICATION	2.95230734794268E-6	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999988657437029	WITHOUT_CLASSIFICATION	1.1342562971163297E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999982279166533	WITHOUT_CLASSIFICATION	1.7720833466872614E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999640666868457	WITHOUT_CLASSIFICATION	3.5933313154290676E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999855562894419	WITHOUT_CLASSIFICATION	1.4443710558178245E-5	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999962124478777	WITHOUT_CLASSIFICATION	3.787552122237457E-6	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999979288375588	WITHOUT_CLASSIFICATION	2.0711624411291333E-6	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999992586508467	WITHOUT_CLASSIFICATION	7.413491531591798E-7	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999997961796925	WITHOUT_CLASSIFICATION	2.038203075253292E-7	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999457860782632	WITHOUT_CLASSIFICATION	5.421392173680626E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999413464947	WITHOUT_CLASSIFICATION	5.865350532381689E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999413464947	WITHOUT_CLASSIFICATION	5.865350532381689E-8	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9996266660873226	WITHOUT_CLASSIFICATION	3.7333391267736955E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999984857117926	WITHOUT_CLASSIFICATION	1.514288207397308E-6	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999995302249937	WITHOUT_CLASSIFICATION	4.697750062362791E-7	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999623249406026	WITHOUT_CLASSIFICATION	3.767505939740303E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999466757734	WITHOUT_CLASSIFICATION	5.3324226599864776E-6	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.999999585678865	WITHOUT_CLASSIFICATION	4.143211349925261E-7	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999826336034	WITHOUT_CLASSIFICATION	1.7366396606544555E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999466757734	WITHOUT_CLASSIFICATION	5.3324226599864776E-6	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999980082431744	WITHOUT_CLASSIFICATION	1.9917568256530316E-6	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999999572486931	WITHOUT_CLASSIFICATION	4.2751307008919216E-8	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9997190208354324	WITHOUT_CLASSIFICATION	2.809791645675183E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999698905272	WITHOUT_CLASSIFICATION	3.0109472724748005E-8	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.999999021574073	WITHOUT_CLASSIFICATION	9.784259269600683E-7	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999881133979226	WITHOUT_CLASSIFICATION	1.1886602077448442E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9998972945648098	WITHOUT_CLASSIFICATION	1.0270543519030138E-4	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999986736619292	WITHOUT_CLASSIFICATION	1.326338070751081E-6	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999572760632426	WITHOUT_CLASSIFICATION	4.272393675744373E-5	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999944324223091	WITHOUT_CLASSIFICATION	5.567577690859036E-6	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999988148266585	WITHOUT_CLASSIFICATION	1.1851733414984807E-6	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999903812306346	WITHOUT_CLASSIFICATION	9.61876936540219E-6	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999971085316	WITHOUT_CLASSIFICATION	2.891468379383115E-9	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999986664662842	WITHOUT_CLASSIFICATION	1.3335337158301192E-6	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997855812378726	WITHOUT_CLASSIFICATION	2.1441876212727076E-4	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997855812378726	WITHOUT_CLASSIFICATION	2.1441876212727076E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9993521832816256	WITHOUT_CLASSIFICATION	6.478167183745624E-4	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999997955009	WITHOUT_CLASSIFICATION	2.044991257544125E-10	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998401162813232	WITHOUT_CLASSIFICATION	1.598837186768371E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999757723880784	WITHOUT_CLASSIFICATION	2.4227611921662535E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999994536994568	WITHOUT_CLASSIFICATION	5.463005433238024E-7	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999997207147096	WITHOUT_CLASSIFICATION	2.792852903907711E-7	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9995797830576066	WITHOUT_CLASSIFICATION	4.2021694239333275E-4	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999986886536	WITHOUT_CLASSIFICATION	1.3113463848543233E-9	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999824627482529	WITHOUT_CLASSIFICATION	1.7537251747154845E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999546724263983	WITHOUT_CLASSIFICATION	4.5327573601729985E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998046281847	WITHOUT_CLASSIFICATION	1.9537181529695205E-6	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999999783171756	WITHOUT_CLASSIFICATION	2.1682824425033695E-8	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9979348798551468	WITHOUT_CLASSIFICATION	0.002065120144853163	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999952829619	WITHOUT_CLASSIFICATION	4.717038192318006E-9	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999498512957	WITHOUT_CLASSIFICATION	5.014870420448679E-8	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999980647261423	WITHOUT_CLASSIFICATION	1.9352738576518175E-6	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999998555995597	WITHOUT_CLASSIFICATION	1.4440044018497974E-7	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999986205450325	WITHOUT_CLASSIFICATION	1.3794549674656347E-6	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999206824394085	WITHOUT_CLASSIFICATION	7.931756059156214E-5	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999999900803	WITHOUT_CLASSIFICATION	9.919799203436987E-12	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999971217293	WITHOUT_CLASSIFICATION	2.8782707304855856E-9	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999497949141	WITHOUT_CLASSIFICATION	5.020508593706805E-8	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999830708740333	WITHOUT_CLASSIFICATION	1.6929125966722825E-5	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999926645281	WITHOUT_CLASSIFICATION	7.3354718279356585E-9	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999783224882	WITHOUT_CLASSIFICATION	2.167751176749608E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999783224882	WITHOUT_CLASSIFICATION	2.167751176749608E-8	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999936927994929	WITHOUT_CLASSIFICATION	6.307200507146944E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999940034011698	WITHOUT_CLASSIFICATION	5.996598830194101E-6	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999890212412	WITHOUT_CLASSIFICATION	1.097875874067918E-8	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.999999980405715	WITHOUT_CLASSIFICATION	1.9594285038521693E-8	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999965264089735	WITHOUT_CLASSIFICATION	3.4735910265481997E-6	IMPLEMENTATION
