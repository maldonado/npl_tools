// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9998394934030681	WITHOUT_CLASSIFICATION	1.6050659693185032E-4	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9998394934030681	WITHOUT_CLASSIFICATION	1.6050659693185032E-4	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.8664604924901281	IMPLEMENTATION	0.1335395075098718	WITHOUT_CLASSIFICATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.7111872403361034	IMPLEMENTATION	0.2888127596638965	WITHOUT_CLASSIFICATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.8112443296186527	WITHOUT_CLASSIFICATION	0.18875567038134747	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.9989758549149634	IMPLEMENTATION	0.0010241450850365789	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.7667881169168634	WITHOUT_CLASSIFICATION	0.23321188308313662	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.7920932709392955	IMPLEMENTATION	0.20790672906070456	WITHOUT_CLASSIFICATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9550969325986748	IMPLEMENTATION	0.04490306740132524	WITHOUT_CLASSIFICATION
//TODO: native ids	IMPLEMENTATION	0.9569704158459932	IMPLEMENTATION	0.04302958415400675	WITHOUT_CLASSIFICATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.8064561009149057	IMPLEMENTATION	0.1935438990850943	WITHOUT_CLASSIFICATION
//TODO: handle property-ref	IMPLEMENTATION	0.9979470954366046	IMPLEMENTATION	0.002052904563395329	WITHOUT_CLASSIFICATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.996761690501362	IMPLEMENTATION	0.0032383094986379486	WITHOUT_CLASSIFICATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.996761690501362	IMPLEMENTATION	0.0032383094986379486	WITHOUT_CLASSIFICATION
/**	IMPLEMENTATION	0.9471289117243847	IMPLEMENTATION	0.0528710882756153	WITHOUT_CLASSIFICATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.8741576698700618	IMPLEMENTATION	0.12584233012993817	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999957278267978	IMPLEMENTATION	4.272173202207983E-6	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.8763758196379803	WITHOUT_CLASSIFICATION	0.12362418036201975	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999999996348677	WITHOUT_CLASSIFICATION	3.6513224959248854E-10	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9995934893056393	IMPLEMENTATION	4.065106943607937E-4	WITHOUT_CLASSIFICATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9572572792040358	IMPLEMENTATION	0.04274272079596424	WITHOUT_CLASSIFICATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9991562049090659	WITHOUT_CLASSIFICATION	8.437950909340988E-4	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9867208871572081	IMPLEMENTATION	0.013279112842792037	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9693406099778741	IMPLEMENTATION	0.03065939002212593	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9693406099778741	IMPLEMENTATION	0.03065939002212593	WITHOUT_CLASSIFICATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.8382124246974598	IMPLEMENTATION	0.16178757530254026	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.986837246482591	IMPLEMENTATION	0.013162753517408966	WITHOUT_CLASSIFICATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9812094219840413	IMPLEMENTATION	0.01879057801595872	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9979246321179276	IMPLEMENTATION	0.0020753678820724713	WITHOUT_CLASSIFICATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9954403405780786	IMPLEMENTATION	0.004559659421921366	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.978379945687284	IMPLEMENTATION	0.021620054312715947	WITHOUT_CLASSIFICATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9913630134236006	IMPLEMENTATION	0.008636986576399462	WITHOUT_CLASSIFICATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9984918330964855	WITHOUT_CLASSIFICATION	0.001508166903514536	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.8788417098450189	IMPLEMENTATION	0.1211582901549812	WITHOUT_CLASSIFICATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9997819584191296	IMPLEMENTATION	2.180415808704259E-4	WITHOUT_CLASSIFICATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9573215480757798	WITHOUT_CLASSIFICATION	0.04267845192422021	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.9978637177602694	IMPLEMENTATION	0.002136282239730717	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.87437521531476	IMPLEMENTATION	0.1256247846852399	WITHOUT_CLASSIFICATION
//TODO: use these in methods above	IMPLEMENTATION	0.9870001292659683	IMPLEMENTATION	0.012999870734031782	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.5520694411040035	WITHOUT_CLASSIFICATION	0.4479305588959966	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.5520694411040035	WITHOUT_CLASSIFICATION	0.4479305588959966	IMPLEMENTATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.7175869230007969	WITHOUT_CLASSIFICATION	0.2824130769992031	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9997276113455696	WITHOUT_CLASSIFICATION	2.7238865443031E-4	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.8863676593426455	WITHOUT_CLASSIFICATION	0.11363234065735453	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9948178082311874	IMPLEMENTATION	0.00518219176881266	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9866739421011501	IMPLEMENTATION	0.01332605789884992	WITHOUT_CLASSIFICATION
//TODO: formulas ?	IMPLEMENTATION	0.6646611460684075	IMPLEMENTATION	0.3353388539315924	WITHOUT_CLASSIFICATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.5855102403551733	IMPLEMENTATION	0.41448975964482654	WITHOUT_CLASSIFICATION
// todo : cache this sql...	IMPLEMENTATION	0.9999736755159436	WITHOUT_CLASSIFICATION	2.632448405634866E-5	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9940923877511428	IMPLEMENTATION	0.005907612248857256	WITHOUT_CLASSIFICATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.7108374534401882	IMPLEMENTATION	0.2891625465598119	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9981029102134217	IMPLEMENTATION	0.0018970897865783647	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.8199792291523321	WITHOUT_CLASSIFICATION	0.1800207708476679	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.8302873842360365	IMPLEMENTATION	0.1697126157639635	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.7675092000033722	IMPLEMENTATION	0.23249079999662775	WITHOUT_CLASSIFICATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9972896668454924	IMPLEMENTATION	0.002710333154507709	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.7675092000033722	IMPLEMENTATION	0.23249079999662775	WITHOUT_CLASSIFICATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9981775845054615	IMPLEMENTATION	0.001822415494538474	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9940642377977684	IMPLEMENTATION	0.005935762202231689	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.7675092000033722	IMPLEMENTATION	0.23249079999662775	WITHOUT_CLASSIFICATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9988477362868918	WITHOUT_CLASSIFICATION	0.001152263713108202	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9989210857495666	WITHOUT_CLASSIFICATION	0.0010789142504333824	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9999101344628173	IMPLEMENTATION	8.9865537182695E-5	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.8168803660847797	IMPLEMENTATION	0.18311963391522043	WITHOUT_CLASSIFICATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999476725734966	WITHOUT_CLASSIFICATION	5.232742650343187E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999988225941113	WITHOUT_CLASSIFICATION	1.1774058885956991E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999988225941113	WITHOUT_CLASSIFICATION	1.1774058885956991E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999988225941113	WITHOUT_CLASSIFICATION	1.1774058885956991E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999988225941113	WITHOUT_CLASSIFICATION	1.1774058885956991E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999988225941113	WITHOUT_CLASSIFICATION	1.1774058885956991E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999988225941113	WITHOUT_CLASSIFICATION	1.1774058885956991E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999988225941113	WITHOUT_CLASSIFICATION	1.1774058885956991E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990477734374	WITHOUT_CLASSIFICATION	9.522265625004395E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990477734374	WITHOUT_CLASSIFICATION	9.522265625004395E-7	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999962699901719	WITHOUT_CLASSIFICATION	3.7300098281154124E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999995832586249	WITHOUT_CLASSIFICATION	4.1674137509886454E-7	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999994984548218	WITHOUT_CLASSIFICATION	5.015451782168416E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999995057330318	WITHOUT_CLASSIFICATION	4.942669682495682E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999995057330318	WITHOUT_CLASSIFICATION	4.942669682495682E-7	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999997690063414	WITHOUT_CLASSIFICATION	2.3099365861249446E-7	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999968585246707	WITHOUT_CLASSIFICATION	3.1414753293857884E-6	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999690411960365	WITHOUT_CLASSIFICATION	3.0958803963588076E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999967463210516	WITHOUT_CLASSIFICATION	3.2536789483963053E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999951362853192	WITHOUT_CLASSIFICATION	4.863714680778824E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999951362853192	WITHOUT_CLASSIFICATION	4.863714680778824E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999962975878552	WITHOUT_CLASSIFICATION	3.7024121448493482E-6	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999716174657665	WITHOUT_CLASSIFICATION	2.8382534233544166E-5	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999988593644649	WITHOUT_CLASSIFICATION	1.1406355350976046E-6	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999769216050034	WITHOUT_CLASSIFICATION	2.3078394996598687E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999985477318	WITHOUT_CLASSIFICATION	1.4522682424530089E-9	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.999999941837298	WITHOUT_CLASSIFICATION	5.816270185724828E-8	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.999991781220842	WITHOUT_CLASSIFICATION	8.218779157992281E-6	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999989537935223	WITHOUT_CLASSIFICATION	1.0462064776388769E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999808972354219	WITHOUT_CLASSIFICATION	1.910276457805577E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9971087851054449	WITHOUT_CLASSIFICATION	0.002891214894555176	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999958698415925	WITHOUT_CLASSIFICATION	4.130158407476098E-6	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999985612362275	WITHOUT_CLASSIFICATION	1.4387637724663977E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999876364617	WITHOUT_CLASSIFICATION	1.2363538211102528E-8	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999978826819639	WITHOUT_CLASSIFICATION	2.1173180361607993E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999978826819639	WITHOUT_CLASSIFICATION	2.1173180361607993E-6	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999994423487376	WITHOUT_CLASSIFICATION	5.576512624099472E-7	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999872174743237	WITHOUT_CLASSIFICATION	1.2782525676314102E-5	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999991855605239	WITHOUT_CLASSIFICATION	8.144394760893671E-7	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999997219887972	WITHOUT_CLASSIFICATION	2.78011202747141E-7	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999999598115266	WITHOUT_CLASSIFICATION	4.0188473409022096E-8	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9471289117243847	IMPLEMENTATION	0.0528710882756153	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9471289117243847	IMPLEMENTATION	0.0528710882756153	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999461465793	WITHOUT_CLASSIFICATION	5.3853420734734716E-8	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999971818247452	WITHOUT_CLASSIFICATION	2.818175254801342E-6	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.999999951905743	WITHOUT_CLASSIFICATION	4.809425712348003E-8	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999427416768302	WITHOUT_CLASSIFICATION	5.7258323169824824E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.999992407556754	WITHOUT_CLASSIFICATION	7.592443246013097E-6	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945792174583	WITHOUT_CLASSIFICATION	5.420782541649925E-6	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985698668655	WITHOUT_CLASSIFICATION	1.4301331345845709E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999899871501784	WITHOUT_CLASSIFICATION	1.0012849821484774E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999832463554591	WITHOUT_CLASSIFICATION	1.6753644540890424E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999944937576	WITHOUT_CLASSIFICATION	5.506242348146682E-9	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999853036256714	WITHOUT_CLASSIFICATION	1.4696374328634089E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999832463554591	WITHOUT_CLASSIFICATION	1.6753644540890424E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999853036256714	WITHOUT_CLASSIFICATION	1.4696374328634089E-5	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999419203925148	WITHOUT_CLASSIFICATION	5.807960748507176E-5	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999999965620915	WITHOUT_CLASSIFICATION	3.4379085155047897E-9	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999997119598888	WITHOUT_CLASSIFICATION	2.880401111678975E-7	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9995833021375332	WITHOUT_CLASSIFICATION	4.1669786246676706E-4	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999992998190012	WITHOUT_CLASSIFICATION	7.001809987524544E-7	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999956328016275	WITHOUT_CLASSIFICATION	4.367198372522038E-6	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999442874600967	WITHOUT_CLASSIFICATION	5.5712539903225336E-5	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9992294319683124	WITHOUT_CLASSIFICATION	7.705680316875576E-4	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999944484663111	WITHOUT_CLASSIFICATION	5.551533688916534E-6	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999801509142165	WITHOUT_CLASSIFICATION	1.984908578345465E-5	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999771310702111	WITHOUT_CLASSIFICATION	2.2868929788888438E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999974121449625	WITHOUT_CLASSIFICATION	2.587855037435084E-6	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999990544546	WITHOUT_CLASSIFICATION	9.455454544922991E-10	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999962312625597	WITHOUT_CLASSIFICATION	3.768737440193143E-6	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999994042038712	WITHOUT_CLASSIFICATION	5.957961287081622E-7	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.99999992153686	WITHOUT_CLASSIFICATION	7.846314004329831E-8	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999997320142607	WITHOUT_CLASSIFICATION	2.6798573923497854E-7	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999863640833103	WITHOUT_CLASSIFICATION	1.3635916689600795E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999997051109171	WITHOUT_CLASSIFICATION	2.9488908288078146E-7	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998605478839	WITHOUT_CLASSIFICATION	1.3945211598466415E-7	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999980996239695	WITHOUT_CLASSIFICATION	1.9003760305025532E-6	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999924789639345	WITHOUT_CLASSIFICATION	7.521036065558488E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999996680812756	WITHOUT_CLASSIFICATION	3.319187244147711E-7	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999989881726669	WITHOUT_CLASSIFICATION	1.0118273331908994E-6	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9299490496821372	WITHOUT_CLASSIFICATION	0.07005095031786278	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999997877048945	WITHOUT_CLASSIFICATION	2.1229510545041188E-7	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999917184848438	WITHOUT_CLASSIFICATION	8.28151515623467E-6	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9984449397062733	WITHOUT_CLASSIFICATION	0.0015550602937266492	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999307732953	WITHOUT_CLASSIFICATION	6.922670471742067E-8	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999999992705173	WITHOUT_CLASSIFICATION	7.294826949616816E-9	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999994350738955	WITHOUT_CLASSIFICATION	5.649261044933313E-7	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999986060756506	WITHOUT_CLASSIFICATION	1.3939243493723638E-6	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999959708062817	WITHOUT_CLASSIFICATION	4.029193718324573E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999972809207	WITHOUT_CLASSIFICATION	2.7190793474914117E-9	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999253155029	WITHOUT_CLASSIFICATION	7.46844971084747E-8	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999999887801	WITHOUT_CLASSIFICATION	1.1219827378710252E-11	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999972809207	WITHOUT_CLASSIFICATION	2.7190793474914117E-9	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.999999514746717	WITHOUT_CLASSIFICATION	4.852532829266314E-7	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9996859873125199	WITHOUT_CLASSIFICATION	3.14012687480153E-4	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999994532477482	WITHOUT_CLASSIFICATION	5.46752251830546E-7	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999995207575334	WITHOUT_CLASSIFICATION	4.79242466514849E-7	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999995327349936	WITHOUT_CLASSIFICATION	4.6726500640672814E-7	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999882560633	WITHOUT_CLASSIFICATION	1.1743936741137778E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999882560633	WITHOUT_CLASSIFICATION	1.1743936741137778E-8	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999782282264081	WITHOUT_CLASSIFICATION	2.177177359193106E-5	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999726311805	WITHOUT_CLASSIFICATION	2.7368819523798786E-8	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.999956042759637	WITHOUT_CLASSIFICATION	4.3957240363004714E-5	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999992520173	WITHOUT_CLASSIFICATION	7.479827451494334E-10	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999998621901677	WITHOUT_CLASSIFICATION	1.378098323015885E-7	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999959247932749	WITHOUT_CLASSIFICATION	4.075206725058107E-6	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999955016801548	WITHOUT_CLASSIFICATION	4.498319845169901E-6	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999954833318597	WITHOUT_CLASSIFICATION	4.516668140242865E-6	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999989333495524	WITHOUT_CLASSIFICATION	1.0666504476013062E-6	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999967132637	WITHOUT_CLASSIFICATION	3.2867362630473665E-9	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998998722376	WITHOUT_CLASSIFICATION	1.001277625014268E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998998722376	WITHOUT_CLASSIFICATION	1.001277625014268E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999998249684042	WITHOUT_CLASSIFICATION	1.7503159578875848E-6	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999999741487734	WITHOUT_CLASSIFICATION	2.5851226602484916E-7	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999991443330215	WITHOUT_CLASSIFICATION	8.556669785227111E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998998722376	WITHOUT_CLASSIFICATION	1.001277625014268E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999998249684042	WITHOUT_CLASSIFICATION	1.7503159578875848E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999998249684042	WITHOUT_CLASSIFICATION	1.7503159578875848E-6	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999991963252036	WITHOUT_CLASSIFICATION	8.036747962471062E-7	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999986970193341	WITHOUT_CLASSIFICATION	1.3029806659637891E-6	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999491655833	WITHOUT_CLASSIFICATION	5.083441668969892E-8	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999982363443	WITHOUT_CLASSIFICATION	1.7636557141909635E-9	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999881404466795	WITHOUT_CLASSIFICATION	1.1859553320470263E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999881404466795	WITHOUT_CLASSIFICATION	1.1859553320470263E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999402095197767	WITHOUT_CLASSIFICATION	5.97904802232395E-5	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999995284530803	WITHOUT_CLASSIFICATION	4.715469196467263E-7	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.999999910679849	WITHOUT_CLASSIFICATION	8.932015104153294E-8	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999992349936617	WITHOUT_CLASSIFICATION	7.650063383136182E-7	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999992349936617	WITHOUT_CLASSIFICATION	7.650063383136182E-7	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999997025715064	WITHOUT_CLASSIFICATION	2.9742849362583053E-7	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999978393135514	WITHOUT_CLASSIFICATION	2.1606864486093556E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999999741503088	WITHOUT_CLASSIFICATION	2.58496910443853E-8	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999946176635693	WITHOUT_CLASSIFICATION	5.382336430635153E-6	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999999928820216	WITHOUT_CLASSIFICATION	7.117978350316581E-9	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999018694847	WITHOUT_CLASSIFICATION	9.813051524523845E-8	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.999975587571038	WITHOUT_CLASSIFICATION	2.4412428962041695E-5	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999940166630003	WITHOUT_CLASSIFICATION	5.983336999654269E-6	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999940600472594	WITHOUT_CLASSIFICATION	5.9399527404843495E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999999741503088	WITHOUT_CLASSIFICATION	2.58496910443853E-8	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9999869940262109	WITHOUT_CLASSIFICATION	1.3005973789139841E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999223242690829	WITHOUT_CLASSIFICATION	7.767573091711813E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999223242690829	WITHOUT_CLASSIFICATION	7.767573091711813E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999979236194	WITHOUT_CLASSIFICATION	2.0763806122451756E-9	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.999999411454769	WITHOUT_CLASSIFICATION	5.885452309977866E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999842509018709	WITHOUT_CLASSIFICATION	1.57490981289861E-5	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999920934721027	WITHOUT_CLASSIFICATION	7.90652789720256E-6	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999918676033647	WITHOUT_CLASSIFICATION	8.132396635254481E-6	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9999713348436633	WITHOUT_CLASSIFICATION	2.8665156336633107E-5	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9999794785088114	WITHOUT_CLASSIFICATION	2.052149118856112E-5	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.99999675325099	WITHOUT_CLASSIFICATION	3.2467490099054282E-6	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999979316574	WITHOUT_CLASSIFICATION	2.0683426032015533E-8	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999979316574	WITHOUT_CLASSIFICATION	2.0683426032015533E-8	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999990463049039	WITHOUT_CLASSIFICATION	9.536950960377329E-7	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999476725734966	WITHOUT_CLASSIFICATION	5.232742650343187E-5	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999999908352925	WITHOUT_CLASSIFICATION	9.16470750513639E-8	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999988225941113	WITHOUT_CLASSIFICATION	1.1774058885956991E-6	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999996719274346	WITHOUT_CLASSIFICATION	3.280725654381722E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990477734374	WITHOUT_CLASSIFICATION	9.522265625004395E-7	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999998984178039	WITHOUT_CLASSIFICATION	1.0158219620058644E-7	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999994755016376	WITHOUT_CLASSIFICATION	5.244983624271219E-7	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999999268814433	WITHOUT_CLASSIFICATION	7.311855662936562E-8	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999994869192272	WITHOUT_CLASSIFICATION	5.130807728343948E-7	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999999200014268	WITHOUT_CLASSIFICATION	7.999857318388507E-8	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999920617740411	WITHOUT_CLASSIFICATION	7.938225958893295E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999991563675014	WITHOUT_CLASSIFICATION	8.436324986839649E-7	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999994305084465	WITHOUT_CLASSIFICATION	5.6949155339661E-7	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999995832586249	WITHOUT_CLASSIFICATION	4.1674137509886454E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999994735698572	WITHOUT_CLASSIFICATION	5.26430142783672E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999994735698572	WITHOUT_CLASSIFICATION	5.26430142783672E-7	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.999999103363942	WITHOUT_CLASSIFICATION	8.966360580705928E-7	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9998416898094288	WITHOUT_CLASSIFICATION	1.5831019057128577E-4	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999993429999734	WITHOUT_CLASSIFICATION	6.570000266667835E-7	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999997676761727	WITHOUT_CLASSIFICATION	2.3232382735161332E-7	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999998398396303	WITHOUT_CLASSIFICATION	1.6016036968170004E-7	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999999804178548	WITHOUT_CLASSIFICATION	1.9582145204017235E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999995057330318	WITHOUT_CLASSIFICATION	4.942669682495682E-7	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999815016132075	WITHOUT_CLASSIFICATION	1.849838679245478E-5	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999996955829169	WITHOUT_CLASSIFICATION	3.0441708305020923E-7	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999994561130799	WITHOUT_CLASSIFICATION	5.438869200798725E-7	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999998453878797	WITHOUT_CLASSIFICATION	1.5461212047160944E-7	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999941249909452	WITHOUT_CLASSIFICATION	5.875009054729562E-6	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999916028118687	WITHOUT_CLASSIFICATION	8.397188131393156E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999937254072494	WITHOUT_CLASSIFICATION	6.274592750551845E-6	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999979537996208	WITHOUT_CLASSIFICATION	2.046200379164648E-6	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9998392654827933	WITHOUT_CLASSIFICATION	1.607345172066973E-4	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999990471267369	WITHOUT_CLASSIFICATION	9.528732631884643E-7	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999801184709343	WITHOUT_CLASSIFICATION	1.9881529065733323E-5	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999795984447433	WITHOUT_CLASSIFICATION	2.0401555256736735E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999988225941113	WITHOUT_CLASSIFICATION	1.1774058885956991E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999988225941113	WITHOUT_CLASSIFICATION	1.1774058885956991E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990477734374	WITHOUT_CLASSIFICATION	9.522265625004395E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990477734374	WITHOUT_CLASSIFICATION	9.522265625004395E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999991563675014	WITHOUT_CLASSIFICATION	8.436324986839649E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999994735698572	WITHOUT_CLASSIFICATION	5.26430142783672E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999937254072494	WITHOUT_CLASSIFICATION	6.274592750551845E-6	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999997690063414	WITHOUT_CLASSIFICATION	2.3099365861249446E-7	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999946562557771	WITHOUT_CLASSIFICATION	5.3437442229269055E-6	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999810150754328	WITHOUT_CLASSIFICATION	1.898492456725947E-5	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999529871166674	WITHOUT_CLASSIFICATION	4.701288333264873E-5	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.999998235078753	WITHOUT_CLASSIFICATION	1.764921247011085E-6	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999380261861	WITHOUT_CLASSIFICATION	6.197381382236624E-8	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999997815301648	WITHOUT_CLASSIFICATION	2.184698352133596E-7	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999966175513657	WITHOUT_CLASSIFICATION	3.3824486342638766E-6	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9999552634196375	WITHOUT_CLASSIFICATION	4.473658036246667E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999904929796583	WITHOUT_CLASSIFICATION	9.507020341762402E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999976095980816	WITHOUT_CLASSIFICATION	2.3904019183959866E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999976095980816	WITHOUT_CLASSIFICATION	2.3904019183959866E-6	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999999993062566	WITHOUT_CLASSIFICATION	6.937434004976817E-9	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999951703740282	WITHOUT_CLASSIFICATION	4.829625971855183E-6	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999751100667149	WITHOUT_CLASSIFICATION	2.4889933285097982E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.999999444963398	WITHOUT_CLASSIFICATION	5.550366019764726E-7	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999919280861	WITHOUT_CLASSIFICATION	8.071913950335634E-9	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999492798959124	WITHOUT_CLASSIFICATION	5.072010408750948E-5	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999997168139221	WITHOUT_CLASSIFICATION	2.831860779247339E-7	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999968585246707	WITHOUT_CLASSIFICATION	3.1414753293857884E-6	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999968662109152	WITHOUT_CLASSIFICATION	3.1337890848389533E-6	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.999999830108341	WITHOUT_CLASSIFICATION	1.698916590081529E-7	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.999999830108341	WITHOUT_CLASSIFICATION	1.698916590081529E-7	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999497781801	WITHOUT_CLASSIFICATION	5.022181988582925E-8	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999836380381637	WITHOUT_CLASSIFICATION	1.636196183632598E-5	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999994668708023	WITHOUT_CLASSIFICATION	5.331291976567908E-7	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999996697479223	WITHOUT_CLASSIFICATION	3.302520776475355E-7	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999991652289925	WITHOUT_CLASSIFICATION	8.347710076291049E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990477734374	WITHOUT_CLASSIFICATION	9.522265625004395E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999991563675014	WITHOUT_CLASSIFICATION	8.436324986839649E-7	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999995832586249	WITHOUT_CLASSIFICATION	4.1674137509886454E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999937254072494	WITHOUT_CLASSIFICATION	6.274592750551845E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999937254072494	WITHOUT_CLASSIFICATION	6.274592750551845E-6	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999979478917143	WITHOUT_CLASSIFICATION	2.0521082856575785E-6	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999979478917143	WITHOUT_CLASSIFICATION	2.0521082856575785E-6	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999980745495184	WITHOUT_CLASSIFICATION	1.925450481628315E-6	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999986643695887	WITHOUT_CLASSIFICATION	1.3356304112589808E-6	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999986643695887	WITHOUT_CLASSIFICATION	1.3356304112589808E-6	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999961999311116	WITHOUT_CLASSIFICATION	3.8000688885425077E-6	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999987976910377	WITHOUT_CLASSIFICATION	1.2023089623109128E-6	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999998844541885	WITHOUT_CLASSIFICATION	1.1554581149540148E-7	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999969200209788	WITHOUT_CLASSIFICATION	3.07997902118473E-6	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.999998890192233	WITHOUT_CLASSIFICATION	1.1098077670228803E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999967463210516	WITHOUT_CLASSIFICATION	3.2536789483963053E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999967463210516	WITHOUT_CLASSIFICATION	3.2536789483963053E-6	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.999616651623081	WITHOUT_CLASSIFICATION	3.833483769190336E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999786290171929	WITHOUT_CLASSIFICATION	2.1370982807003217E-5	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999997935833604	WITHOUT_CLASSIFICATION	2.0641663953046505E-7	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999952955251791	WITHOUT_CLASSIFICATION	4.704474820934955E-6	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999999445684138	WITHOUT_CLASSIFICATION	5.543158627273119E-8	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999990197076882	WITHOUT_CLASSIFICATION	9.80292311712116E-7	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999951362853192	WITHOUT_CLASSIFICATION	4.863714680778824E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999984923990962	WITHOUT_CLASSIFICATION	1.5076009037707506E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999984923990962	WITHOUT_CLASSIFICATION	1.5076009037707506E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999962975878552	WITHOUT_CLASSIFICATION	3.7024121448493482E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999962975878552	WITHOUT_CLASSIFICATION	3.7024121448493482E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999747449615793	WITHOUT_CLASSIFICATION	2.5255038420656242E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999747449615793	WITHOUT_CLASSIFICATION	2.5255038420656242E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999972293275	WITHOUT_CLASSIFICATION	2.7706723970687774E-9	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999972293275	WITHOUT_CLASSIFICATION	2.7706723970687774E-9	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999967463210516	WITHOUT_CLASSIFICATION	3.2536789483963053E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999951362853192	WITHOUT_CLASSIFICATION	4.863714680778824E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999984923990962	WITHOUT_CLASSIFICATION	1.5076009037707506E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999984923990962	WITHOUT_CLASSIFICATION	1.5076009037707506E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999962975878552	WITHOUT_CLASSIFICATION	3.7024121448493482E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999747449615793	WITHOUT_CLASSIFICATION	2.5255038420656242E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999747449615793	WITHOUT_CLASSIFICATION	2.5255038420656242E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999972293275	WITHOUT_CLASSIFICATION	2.7706723970687774E-9	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999392834072117	WITHOUT_CLASSIFICATION	6.071659278830899E-5	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999995242556582	WITHOUT_CLASSIFICATION	4.757443418356136E-7	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9997883666061612	WITHOUT_CLASSIFICATION	2.1163339383868803E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999968985562277	WITHOUT_CLASSIFICATION	3.101443772292679E-5	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999618703674055	WITHOUT_CLASSIFICATION	3.8129632594589274E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999530072232866	WITHOUT_CLASSIFICATION	4.6992776713389305E-5	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999479417271	WITHOUT_CLASSIFICATION	5.205827298072363E-8	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999999061050571	WITHOUT_CLASSIFICATION	9.389494293193763E-8	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999977004945748	WITHOUT_CLASSIFICATION	2.2995054251828658E-6	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999978326938913	WITHOUT_CLASSIFICATION	2.1673061086917736E-6	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999979949334343	WITHOUT_CLASSIFICATION	2.005066565685407E-6	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.999998879097188	WITHOUT_CLASSIFICATION	1.1209028120417267E-6	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999782282264081	WITHOUT_CLASSIFICATION	2.177177359193106E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999530072232866	WITHOUT_CLASSIFICATION	4.6992776713389305E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998865004650688	WITHOUT_CLASSIFICATION	1.1349953493114629E-4	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998865004650688	WITHOUT_CLASSIFICATION	1.1349953493114629E-4	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999999911187328	WITHOUT_CLASSIFICATION	8.881267116447432E-9	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999943984967512	WITHOUT_CLASSIFICATION	5.601503248833734E-6	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999943984967512	WITHOUT_CLASSIFICATION	5.601503248833734E-6	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.999999321409322	WITHOUT_CLASSIFICATION	6.785906779875863E-7	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999975112863337	WITHOUT_CLASSIFICATION	2.488713666309596E-6	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999158925135	WITHOUT_CLASSIFICATION	8.410748648766698E-8	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9991372805254458	WITHOUT_CLASSIFICATION	8.627194745542085E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9991372805254458	WITHOUT_CLASSIFICATION	8.627194745542085E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999985477318	WITHOUT_CLASSIFICATION	1.4522682424530089E-9	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999941933068	WITHOUT_CLASSIFICATION	5.806693268574027E-9	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999941933068	WITHOUT_CLASSIFICATION	5.806693268574027E-9	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999996231308119	WITHOUT_CLASSIFICATION	3.768691881227095E-7	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999568536073	WITHOUT_CLASSIFICATION	4.314639258128466E-8	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.999999965812967	WITHOUT_CLASSIFICATION	3.4187032959028964E-8	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999953428596653	WITHOUT_CLASSIFICATION	4.657140334643301E-6	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999995682303043	WITHOUT_CLASSIFICATION	4.3176969567832316E-7	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999995670005409	WITHOUT_CLASSIFICATION	4.329994590470143E-7	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.999999941837298	WITHOUT_CLASSIFICATION	5.816270185724828E-8	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999990470692244	WITHOUT_CLASSIFICATION	9.529307757036442E-7	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.6528309007771106	IMPLEMENTATION	0.34716909922288935	WITHOUT_CLASSIFICATION
// ID	WITHOUT_CLASSIFICATION	0.9999955364306625	WITHOUT_CLASSIFICATION	4.463569337401592E-6	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999972630994896	WITHOUT_CLASSIFICATION	2.73690051047491E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999808972354219	WITHOUT_CLASSIFICATION	1.910276457805577E-5	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997652843867	WITHOUT_CLASSIFICATION	2.34715613325078E-7	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.999999970751054	WITHOUT_CLASSIFICATION	2.9248945997845637E-8	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.999997024080486	WITHOUT_CLASSIFICATION	2.9759195140355055E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999808972354219	WITHOUT_CLASSIFICATION	1.910276457805577E-5	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999380411041	WITHOUT_CLASSIFICATION	6.195889592164376E-8	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999563773213	WITHOUT_CLASSIFICATION	4.36226787114659E-8	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999994225548882	WITHOUT_CLASSIFICATION	5.774451117981748E-6	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999973108794977	WITHOUT_CLASSIFICATION	2.6891205023580966E-6	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999975925291791	WITHOUT_CLASSIFICATION	2.4074708210032735E-6	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999968139996427	WITHOUT_CLASSIFICATION	3.186000357262344E-6	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999987578685126	WITHOUT_CLASSIFICATION	1.242131487490038E-6	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999985612362275	WITHOUT_CLASSIFICATION	1.4387637724663977E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999989910682179	WITHOUT_CLASSIFICATION	1.0089317821099759E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999876364617	WITHOUT_CLASSIFICATION	1.2363538211102528E-8	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999959655016337	WITHOUT_CLASSIFICATION	4.0344983663625516E-6	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999989015765129	WITHOUT_CLASSIFICATION	1.0984234870611665E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999992889117079	WITHOUT_CLASSIFICATION	7.110882921221263E-7	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.999999941837298	WITHOUT_CLASSIFICATION	5.816270185724828E-8	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999989910682179	WITHOUT_CLASSIFICATION	1.0089317821099759E-6	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999959655016337	WITHOUT_CLASSIFICATION	4.0344983663625516E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999992889117079	WITHOUT_CLASSIFICATION	7.110882921221263E-7	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998185280109	WITHOUT_CLASSIFICATION	1.8147198908664754E-7	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999767493267608	WITHOUT_CLASSIFICATION	2.325067323917139E-5	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999997746862219	WITHOUT_CLASSIFICATION	2.2531377796346778E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999978826819639	WITHOUT_CLASSIFICATION	2.1173180361607993E-6	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999994798249904	WITHOUT_CLASSIFICATION	5.201750095578521E-7	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999976895881614	WITHOUT_CLASSIFICATION	2.3104118385470197E-6	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999962589373514	WITHOUT_CLASSIFICATION	3.741062648522042E-6	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999987098043865	WITHOUT_CLASSIFICATION	1.2901956134075317E-6	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999989298535841	WITHOUT_CLASSIFICATION	1.0701464158569236E-6	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.99999980064204	WITHOUT_CLASSIFICATION	1.9935795997972501E-7	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999957097484	WITHOUT_CLASSIFICATION	4.290251587851749E-9	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999949812465103	WITHOUT_CLASSIFICATION	5.018753489627046E-6	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999995085704017	WITHOUT_CLASSIFICATION	4.914295983416557E-7	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999724902268	WITHOUT_CLASSIFICATION	2.7509773329554947E-8	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999976118226707	WITHOUT_CLASSIFICATION	2.388177329272211E-6	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999974266513758	WITHOUT_CLASSIFICATION	2.5733486241813055E-6	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999872174743237	WITHOUT_CLASSIFICATION	1.2782525676314102E-5	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999963101539666	WITHOUT_CLASSIFICATION	3.6898460334898665E-6	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.999995880598084	WITHOUT_CLASSIFICATION	4.119401915928935E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999989910682179	WITHOUT_CLASSIFICATION	1.0089317821099759E-6	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999992096959921	WITHOUT_CLASSIFICATION	7.903040078277703E-7	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.999998580355391	WITHOUT_CLASSIFICATION	1.4196446089685724E-6	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999980643218406	WITHOUT_CLASSIFICATION	1.9356781593024403E-6	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.999933913128131	WITHOUT_CLASSIFICATION	6.608687186896596E-5	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999951060960229	WITHOUT_CLASSIFICATION	4.893903977013215E-6	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.999999953916796	WITHOUT_CLASSIFICATION	4.608320402036521E-8	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999149145281	WITHOUT_CLASSIFICATION	8.508547188075661E-8	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999850831282	WITHOUT_CLASSIFICATION	1.4916871843775387E-8	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999797853981416	WITHOUT_CLASSIFICATION	2.0214601858382722E-5	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999954471978021	WITHOUT_CLASSIFICATION	4.5528021978643345E-6	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999964994670402	WITHOUT_CLASSIFICATION	3.5005329598827477E-6	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.99999737500381	WITHOUT_CLASSIFICATION	2.624996190104914E-6	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9998494418274427	WITHOUT_CLASSIFICATION	1.505581725572978E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999997219887972	WITHOUT_CLASSIFICATION	2.78011202747141E-7	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999965179895919	WITHOUT_CLASSIFICATION	3.482010408213557E-6	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9998197899449475	WITHOUT_CLASSIFICATION	1.8021005505247604E-4	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9999960645939431	WITHOUT_CLASSIFICATION	3.935406056974131E-6	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999962496616962	WITHOUT_CLASSIFICATION	3.7503383037409057E-6	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999950619469289	WITHOUT_CLASSIFICATION	4.938053071034799E-6	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999994451430301	WITHOUT_CLASSIFICATION	5.548569699695358E-7	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999661973065	WITHOUT_CLASSIFICATION	3.380269361465409E-8	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999997319223248	WITHOUT_CLASSIFICATION	2.6807767524116557E-7	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999973881269955	WITHOUT_CLASSIFICATION	2.611873004609177E-6	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999983970404762	WITHOUT_CLASSIFICATION	1.6029595237024353E-6	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999922207319143	WITHOUT_CLASSIFICATION	7.779268085728099E-6	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999922207319143	WITHOUT_CLASSIFICATION	7.779268085728099E-6	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999149204620789	WITHOUT_CLASSIFICATION	8.507953792109465E-5	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9998789140088886	WITHOUT_CLASSIFICATION	1.2108599111139346E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999940732235629	WITHOUT_CLASSIFICATION	5.926776437071858E-6	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999995164874121	WITHOUT_CLASSIFICATION	4.835125878171646E-7	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999999224993633	WITHOUT_CLASSIFICATION	7.750063674561149E-8	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999999727044019	WITHOUT_CLASSIFICATION	2.7295598050429502E-8	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999994925960721	WITHOUT_CLASSIFICATION	5.074039278489497E-7	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999999876477451	WITHOUT_CLASSIFICATION	1.2352254882607562E-8	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9997213598451264	WITHOUT_CLASSIFICATION	2.7864015487359743E-4	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999926211115965	WITHOUT_CLASSIFICATION	7.378888403405672E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999944524678798	WITHOUT_CLASSIFICATION	5.54753212018175E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.999985407898253	WITHOUT_CLASSIFICATION	1.4592101747046164E-5	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999999969482005	WITHOUT_CLASSIFICATION	3.0517993881437994E-9	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999987844469683	WITHOUT_CLASSIFICATION	1.2155530316416338E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999242104053	WITHOUT_CLASSIFICATION	7.578959472820194E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998516436495	WITHOUT_CLASSIFICATION	1.4835635055459573E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999939192526497	WITHOUT_CLASSIFICATION	6.080747350189953E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999994000452	WITHOUT_CLASSIFICATION	5.999547723425437E-10	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999997223764209	WITHOUT_CLASSIFICATION	2.776235790549087E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999721741621493	WITHOUT_CLASSIFICATION	2.782583785064255E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.999994276565518	WITHOUT_CLASSIFICATION	5.723434481985845E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.999994276565518	WITHOUT_CLASSIFICATION	5.723434481985845E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999990978471734	WITHOUT_CLASSIFICATION	9.021528265912086E-7	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999990978471734	WITHOUT_CLASSIFICATION	9.021528265912086E-7	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999973881269955	WITHOUT_CLASSIFICATION	2.611873004609177E-6	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999817626999711	WITHOUT_CLASSIFICATION	1.8237300028949776E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9979996623415235	WITHOUT_CLASSIFICATION	0.002000337658476585	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999813321976149	WITHOUT_CLASSIFICATION	1.86678023851398E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999990463049039	WITHOUT_CLASSIFICATION	9.536950960377329E-7	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9979996623415235	WITHOUT_CLASSIFICATION	0.002000337658476585	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999813321976149	WITHOUT_CLASSIFICATION	1.86678023851398E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.99993501474635	WITHOUT_CLASSIFICATION	6.498525364991507E-5	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999969972113	WITHOUT_CLASSIFICATION	3.0027886643204776E-9	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999997674724028	WITHOUT_CLASSIFICATION	2.3252759726927593E-7	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9997993829295987	WITHOUT_CLASSIFICATION	2.0061707040132284E-4	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999760379369749	WITHOUT_CLASSIFICATION	2.3962063025119478E-5	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999405244556883	WITHOUT_CLASSIFICATION	5.947554431175212E-5	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999924893440845	WITHOUT_CLASSIFICATION	7.5106559154884324E-6	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999424220348367	WITHOUT_CLASSIFICATION	5.7577965163231375E-5	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999979456625896	WITHOUT_CLASSIFICATION	2.05433741047573E-6	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999883417252	WITHOUT_CLASSIFICATION	1.1658274889829129E-8	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999650793638871	WITHOUT_CLASSIFICATION	3.492063611287478E-5	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999958339708562	WITHOUT_CLASSIFICATION	4.16602914380895E-6	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999987346723462	WITHOUT_CLASSIFICATION	1.2653276537982015E-6	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999716153247492	WITHOUT_CLASSIFICATION	2.838467525080964E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999990463049039	WITHOUT_CLASSIFICATION	9.536950960377329E-7	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999945443563661	WITHOUT_CLASSIFICATION	5.4556436338247315E-6	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999986970225101	WITHOUT_CLASSIFICATION	1.3029774898658483E-6	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999986970225101	WITHOUT_CLASSIFICATION	1.3029774898658483E-6	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999956020482	WITHOUT_CLASSIFICATION	4.397951709222828E-9	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.99993501474635	WITHOUT_CLASSIFICATION	6.498525364991507E-5	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999998246582646	WITHOUT_CLASSIFICATION	1.753417353246792E-7	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999974644406296	WITHOUT_CLASSIFICATION	2.535559370277145E-6	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999719713104	WITHOUT_CLASSIFICATION	2.802868959995602E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999561995881024	WITHOUT_CLASSIFICATION	4.380041189762126E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998678023851437	WITHOUT_CLASSIFICATION	1.321976148561803E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.99993501474635	WITHOUT_CLASSIFICATION	6.498525364991507E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999561995881024	WITHOUT_CLASSIFICATION	4.380041189762126E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998678023851437	WITHOUT_CLASSIFICATION	1.321976148561803E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999942002985235	WITHOUT_CLASSIFICATION	5.799701476563601E-6	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999978315445346	WITHOUT_CLASSIFICATION	2.1684554654236878E-6	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999983002643725	WITHOUT_CLASSIFICATION	1.6997356274118888E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.99993501474635	WITHOUT_CLASSIFICATION	6.498525364991507E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.99993501474635	WITHOUT_CLASSIFICATION	6.498525364991507E-5	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999998823561072	WITHOUT_CLASSIFICATION	1.1764389286772666E-7	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999996787952649	WITHOUT_CLASSIFICATION	3.212047351840945E-7	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999986531318898	WITHOUT_CLASSIFICATION	1.3468681101798341E-6	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999917231771336	WITHOUT_CLASSIFICATION	8.276822866481573E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.999998553434586	WITHOUT_CLASSIFICATION	1.446565413943781E-6	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999998742064171	WITHOUT_CLASSIFICATION	1.2579358296474897E-7	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999993970870878	WITHOUT_CLASSIFICATION	6.029129121529971E-7	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.999999958398411	WITHOUT_CLASSIFICATION	4.160158905409413E-8	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999998811262621	WITHOUT_CLASSIFICATION	1.1887373791403016E-7	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999994513317603	WITHOUT_CLASSIFICATION	5.486682396678303E-7	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999997967326956	WITHOUT_CLASSIFICATION	2.032673044079159E-6	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999999209305639	WITHOUT_CLASSIFICATION	7.906943610555585E-8	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999658671904	WITHOUT_CLASSIFICATION	3.413280952233356E-8	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999991152586168	WITHOUT_CLASSIFICATION	8.847413831660596E-7	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967068078409	WITHOUT_CLASSIFICATION	3.2931921590784815E-6	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999813713562	WITHOUT_CLASSIFICATION	1.8628643765307727E-8	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999427416768302	WITHOUT_CLASSIFICATION	5.7258323169824824E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999935484499596	WITHOUT_CLASSIFICATION	6.451550040399522E-6	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9998962293698231	WITHOUT_CLASSIFICATION	1.0377063017686702E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999953346972	WITHOUT_CLASSIFICATION	4.665302824144593E-9	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999906821586131	WITHOUT_CLASSIFICATION	9.31784138687791E-6	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9990762619563308	WITHOUT_CLASSIFICATION	9.237380436692004E-4	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9990762619563308	WITHOUT_CLASSIFICATION	9.237380436692004E-4	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999427416768302	WITHOUT_CLASSIFICATION	5.7258323169824824E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999984174796245	WITHOUT_CLASSIFICATION	1.5825203755017294E-6	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999998645353826	WITHOUT_CLASSIFICATION	1.3546461731758123E-7	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999251937830129	WITHOUT_CLASSIFICATION	7.480621698705757E-5	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999978693812535	WITHOUT_CLASSIFICATION	2.1306187464899467E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999955070982438	WITHOUT_CLASSIFICATION	4.492901756185781E-6	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999996355863318	WITHOUT_CLASSIFICATION	3.6441366828562844E-7	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999999890157238	WITHOUT_CLASSIFICATION	1.0984276172011179E-8	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999994334702268	WITHOUT_CLASSIFICATION	5.665297731825486E-7	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999926080018	WITHOUT_CLASSIFICATION	7.3919982525429554E-9	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993627787672	WITHOUT_CLASSIFICATION	6.372212326957536E-7	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999866775078747	WITHOUT_CLASSIFICATION	1.3322492125160783E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999990645407266	WITHOUT_CLASSIFICATION	9.354592733214626E-7	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999891390279089	WITHOUT_CLASSIFICATION	1.0860972091040234E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999955204684718	WITHOUT_CLASSIFICATION	4.4795315281694964E-6	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999852842024426	WITHOUT_CLASSIFICATION	1.4715797557437284E-5	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929406120434	WITHOUT_CLASSIFICATION	7.059387956639851E-6	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999988018160868	WITHOUT_CLASSIFICATION	1.1981839132604213E-6	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999996174779716	WITHOUT_CLASSIFICATION	3.825220284381343E-7	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999990086351809	WITHOUT_CLASSIFICATION	9.913648191180977E-7	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972563829641	WITHOUT_CLASSIFICATION	2.7436170357967263E-6	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999997500005549	WITHOUT_CLASSIFICATION	2.499994451777658E-7	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999927149391233	WITHOUT_CLASSIFICATION	7.285060876693529E-6	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999965820919645	WITHOUT_CLASSIFICATION	3.417908035436829E-6	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855454843755	WITHOUT_CLASSIFICATION	1.4454515624633337E-5	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996917142602941	WITHOUT_CLASSIFICATION	3.0828573970593354E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926828149015	WITHOUT_CLASSIFICATION	7.317185098589478E-6	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999687067770812	WITHOUT_CLASSIFICATION	3.129322291886976E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999830419695449	WITHOUT_CLASSIFICATION	1.695803045514209E-5	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932697872138	WITHOUT_CLASSIFICATION	6.730212786210843E-6	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999857020753343	WITHOUT_CLASSIFICATION	1.4297924665592322E-5	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997183835629	WITHOUT_CLASSIFICATION	2.8161643709415035E-7	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999977642565473	WITHOUT_CLASSIFICATION	2.235743452692261E-6	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999671662042473	WITHOUT_CLASSIFICATION	3.283379575272921E-5	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999986711924656	WITHOUT_CLASSIFICATION	1.328807534389916E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955842158613	WITHOUT_CLASSIFICATION	4.415784138607259E-6	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999680678634774	WITHOUT_CLASSIFICATION	3.193213652258283E-5	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973310339458	WITHOUT_CLASSIFICATION	2.668966054242386E-6	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999957577430582	WITHOUT_CLASSIFICATION	4.24225694180257E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956835763212	WITHOUT_CLASSIFICATION	4.3164236788213945E-6	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920783482945	WITHOUT_CLASSIFICATION	7.921651705476596E-6	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992685481454	WITHOUT_CLASSIFICATION	7.314518546048461E-6	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999950966203562	WITHOUT_CLASSIFICATION	4.903379643674399E-6	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955445262599	WITHOUT_CLASSIFICATION	4.455473740045914E-6	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9990395782707323	WITHOUT_CLASSIFICATION	9.604217292677159E-4	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998815244454	WITHOUT_CLASSIFICATION	1.1847555462299763E-7	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999953582526	WITHOUT_CLASSIFICATION	4.641747417822545E-9	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999154281167	WITHOUT_CLASSIFICATION	8.457188332519586E-8	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999973215984458	WITHOUT_CLASSIFICATION	2.6784015543022565E-6	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999916270469038	WITHOUT_CLASSIFICATION	8.372953096152996E-6	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999970552724697	WITHOUT_CLASSIFICATION	2.944727530246118E-6	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999998902046155	WITHOUT_CLASSIFICATION	1.0979538441522409E-7	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999934139415693	WITHOUT_CLASSIFICATION	6.586058430809399E-6	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999923756349794	WITHOUT_CLASSIFICATION	7.624365020468485E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993627787672	WITHOUT_CLASSIFICATION	6.372212326957536E-7	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999976229234883	WITHOUT_CLASSIFICATION	2.3770765117138193E-6	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999991103407072	WITHOUT_CLASSIFICATION	8.896592927386004E-7	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999981069607765	WITHOUT_CLASSIFICATION	1.8930392234962662E-6	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999998346235107	WITHOUT_CLASSIFICATION	1.6537648933405075E-7	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999995748717846	WITHOUT_CLASSIFICATION	4.2512821545404437E-7	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999994533100208	WITHOUT_CLASSIFICATION	5.466899791836107E-7	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999993345620701	WITHOUT_CLASSIFICATION	6.654379297964201E-7	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999428301058	WITHOUT_CLASSIFICATION	5.7169894199847236E-6	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961094059288	WITHOUT_CLASSIFICATION	3.890594071305378E-6	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998111207200531	WITHOUT_CLASSIFICATION	1.8887927994690686E-4	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923019570354	WITHOUT_CLASSIFICATION	7.698042964682803E-6	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9995109136279241	WITHOUT_CLASSIFICATION	4.890863720758772E-4	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999091635001	WITHOUT_CLASSIFICATION	9.083649998210547E-8	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999977753177719	WITHOUT_CLASSIFICATION	2.2246822281385182E-6	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999928155631281	WITHOUT_CLASSIFICATION	7.184436871885593E-6	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999739584754	WITHOUT_CLASSIFICATION	2.6041524599760056E-6	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999998786893122	WITHOUT_CLASSIFICATION	1.213106878590517E-7	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.999999864392435	WITHOUT_CLASSIFICATION	1.3560756489484834E-7	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999999019209193	WITHOUT_CLASSIFICATION	9.807908074721119E-8	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998831232619	WITHOUT_CLASSIFICATION	1.1687673809204584E-7	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999958671442776	WITHOUT_CLASSIFICATION	4.132855722454387E-6	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999978536372619	WITHOUT_CLASSIFICATION	2.1463627380333266E-6	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999979687174823	WITHOUT_CLASSIFICATION	2.0312825177571297E-6	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.999998193734105	WITHOUT_CLASSIFICATION	1.8062658950024352E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993627787672	WITHOUT_CLASSIFICATION	6.372212326957536E-7	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999154281167	WITHOUT_CLASSIFICATION	8.457188332519586E-8	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999448641173	WITHOUT_CLASSIFICATION	5.513588285504535E-8	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999769910373961	WITHOUT_CLASSIFICATION	2.3008962603921798E-5	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999972171309018	WITHOUT_CLASSIFICATION	2.7828690981676583E-6	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999995127847476	WITHOUT_CLASSIFICATION	4.872152523274453E-7	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999999322336685	WITHOUT_CLASSIFICATION	6.776633149844666E-7	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999953497437271	WITHOUT_CLASSIFICATION	4.650256272928762E-6	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9998500591691768	WITHOUT_CLASSIFICATION	1.4994083082319195E-4	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999998854850757	WITHOUT_CLASSIFICATION	1.1451492432800741E-7	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999995020947089	WITHOUT_CLASSIFICATION	4.979052911858842E-7	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999993434141901	WITHOUT_CLASSIFICATION	6.565858100309048E-7	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999991563607803	WITHOUT_CLASSIFICATION	8.436392197703786E-7	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999989383754435	WITHOUT_CLASSIFICATION	1.0616245565602315E-6	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999993201610407	WITHOUT_CLASSIFICATION	6.798389592549233E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993627787672	WITHOUT_CLASSIFICATION	6.372212326957536E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993627787672	WITHOUT_CLASSIFICATION	6.372212326957536E-7	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998150164838776	WITHOUT_CLASSIFICATION	1.849835161224413E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999913766317616	WITHOUT_CLASSIFICATION	8.623368238363876E-6	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999852983133449	WITHOUT_CLASSIFICATION	1.4701686655112524E-5	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.999994004305622	WITHOUT_CLASSIFICATION	5.99569437799749E-6	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999991965941718	WITHOUT_CLASSIFICATION	8.034058281048205E-7	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999998766173557	WITHOUT_CLASSIFICATION	1.2338264431907053E-7	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999666739001521	WITHOUT_CLASSIFICATION	3.332609984793286E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993627787672	WITHOUT_CLASSIFICATION	6.372212326957536E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999974144912255	WITHOUT_CLASSIFICATION	2.585508774561017E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999967804327144	WITHOUT_CLASSIFICATION	3.219567285633453E-6	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999503782162525	WITHOUT_CLASSIFICATION	4.962178374737292E-5	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999834252116503	WITHOUT_CLASSIFICATION	1.6574788349667076E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999957870739588	WITHOUT_CLASSIFICATION	4.212926041213323E-6	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999964663757588	WITHOUT_CLASSIFICATION	3.5336242412500544E-6	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9971087851054449	WITHOUT_CLASSIFICATION	0.002891214894555176	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999946636204102	WITHOUT_CLASSIFICATION	5.336379589824858E-6	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999932365514821	WITHOUT_CLASSIFICATION	6.7634485178954934E-6	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999227352946	WITHOUT_CLASSIFICATION	7.726470541160614E-8	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999154281167	WITHOUT_CLASSIFICATION	8.457188332519586E-8	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.999999995418723	WITHOUT_CLASSIFICATION	4.581277108019772E-9	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999797371949	WITHOUT_CLASSIFICATION	2.026280506882928E-8	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998637134876257	WITHOUT_CLASSIFICATION	1.362865123743656E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999154281167	WITHOUT_CLASSIFICATION	8.457188332519586E-8	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999968433169045	WITHOUT_CLASSIFICATION	3.1566830954456325E-6	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999974144912255	WITHOUT_CLASSIFICATION	2.585508774561017E-6	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9998276252414465	WITHOUT_CLASSIFICATION	1.723747585534684E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993627787672	WITHOUT_CLASSIFICATION	6.372212326957536E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999719120127543	WITHOUT_CLASSIFICATION	2.8087987245733833E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993627787672	WITHOUT_CLASSIFICATION	6.372212326957536E-7	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999998932850851	WITHOUT_CLASSIFICATION	1.0671491493442346E-7	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999993434141901	WITHOUT_CLASSIFICATION	6.565858100309048E-7	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999991563607803	WITHOUT_CLASSIFICATION	8.436392197703786E-7	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999989383754435	WITHOUT_CLASSIFICATION	1.0616245565602315E-6	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.999999977195777	WITHOUT_CLASSIFICATION	2.2804222894927325E-8	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999994012783504	WITHOUT_CLASSIFICATION	5.987216496501038E-7	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999959693028492	WITHOUT_CLASSIFICATION	4.0306971508530285E-6	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.999999558292058	WITHOUT_CLASSIFICATION	4.4170794200693747E-7	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999900401157	WITHOUT_CLASSIFICATION	9.959884201778578E-9	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993627787672	WITHOUT_CLASSIFICATION	6.372212326957536E-7	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999154281167	WITHOUT_CLASSIFICATION	8.457188332519586E-8	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999993201610407	WITHOUT_CLASSIFICATION	6.798389592549233E-7	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998150164838776	WITHOUT_CLASSIFICATION	1.849835161224413E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999996684908	WITHOUT_CLASSIFICATION	3.3150918489152644E-9	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999964282212	WITHOUT_CLASSIFICATION	3.5717787502282703E-9	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999973172727	WITHOUT_CLASSIFICATION	2.682727151111436E-9	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999509963572	WITHOUT_CLASSIFICATION	4.900364280966062E-8	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999995998368529	WITHOUT_CLASSIFICATION	4.0016314699718837E-7	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999997672084092	WITHOUT_CLASSIFICATION	2.327915906758133E-7	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992685481454	WITHOUT_CLASSIFICATION	7.314518546048461E-6	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999999707406232	WITHOUT_CLASSIFICATION	2.9259376776630012E-8	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9966553025618305	WITHOUT_CLASSIFICATION	0.003344697438169401	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999983610775524	WITHOUT_CLASSIFICATION	1.6389224476598134E-6	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999875857392029	WITHOUT_CLASSIFICATION	1.2414260797181729E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999966511923815	WITHOUT_CLASSIFICATION	3.348807618575124E-6	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999830419695449	WITHOUT_CLASSIFICATION	1.695803045514209E-5	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932697872138	WITHOUT_CLASSIFICATION	6.730212786210843E-6	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955842158613	WITHOUT_CLASSIFICATION	4.415784138607259E-6	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999966511923815	WITHOUT_CLASSIFICATION	3.348807618575124E-6	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999190705851279	WITHOUT_CLASSIFICATION	8.09294148721436E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999995594609012	WITHOUT_CLASSIFICATION	4.4053909877956435E-7	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999712117161665	WITHOUT_CLASSIFICATION	2.8788283833382134E-5	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999972017643981	WITHOUT_CLASSIFICATION	2.7982356019053743E-5	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999982841834638	WITHOUT_CLASSIFICATION	1.715816536118551E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993627787672	WITHOUT_CLASSIFICATION	6.372212326957536E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993627787672	WITHOUT_CLASSIFICATION	6.372212326957536E-7	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999845292569686	WITHOUT_CLASSIFICATION	1.5470743031330897E-5	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999680678634774	WITHOUT_CLASSIFICATION	3.193213652258283E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956835763212	WITHOUT_CLASSIFICATION	4.3164236788213945E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998831232619	WITHOUT_CLASSIFICATION	1.1687673809204584E-7	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999965193622163	WITHOUT_CLASSIFICATION	3.480637783512021E-6	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999769500028	WITHOUT_CLASSIFICATION	2.3049997233187148E-8	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999980837358473	WITHOUT_CLASSIFICATION	1.9162641526991365E-6	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999993437219593	WITHOUT_CLASSIFICATION	6.562780407781589E-7	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999993573304456	WITHOUT_CLASSIFICATION	6.426695544282732E-7	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999998811256573	WITHOUT_CLASSIFICATION	1.1887434273904157E-7	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999774297195405	WITHOUT_CLASSIFICATION	2.2570280459453918E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998359470404888	WITHOUT_CLASSIFICATION	1.640529595112139E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999926080018	WITHOUT_CLASSIFICATION	7.3919982525429554E-9	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9998759578832409	WITHOUT_CLASSIFICATION	1.240421167591256E-4	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999932048431576	WITHOUT_CLASSIFICATION	6.795156842516384E-6	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999995380308468	WITHOUT_CLASSIFICATION	4.61969153156051E-7	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999999663450982	WITHOUT_CLASSIFICATION	3.365490178613103E-8	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.999999184725225	WITHOUT_CLASSIFICATION	8.152747748882363E-7	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999377140009059	WITHOUT_CLASSIFICATION	6.228599909404543E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969094900797	WITHOUT_CLASSIFICATION	3.090509920196624E-6	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999657703703795	WITHOUT_CLASSIFICATION	3.4229629620531934E-5	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999988179834491	WITHOUT_CLASSIFICATION	1.182016550758077E-6	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999940921455278	WITHOUT_CLASSIFICATION	5.907854472075257E-6	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999610039168156	WITHOUT_CLASSIFICATION	3.899608318425961E-5	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999703730154992	WITHOUT_CLASSIFICATION	2.9626984500857398E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998947440224	WITHOUT_CLASSIFICATION	1.0525597760429228E-6	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999975588967883	WITHOUT_CLASSIFICATION	2.4411032117225785E-6	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999995437053858	WITHOUT_CLASSIFICATION	4.562946142127439E-6	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999941762632032	WITHOUT_CLASSIFICATION	5.82373679683409E-6	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999914592619937	WITHOUT_CLASSIFICATION	8.540738006167101E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999988309833816	WITHOUT_CLASSIFICATION	1.1690166184097245E-6	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999974932200725	WITHOUT_CLASSIFICATION	2.506779927602564E-6	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998145248596	WITHOUT_CLASSIFICATION	1.8547514032654755E-7	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865013636717	WITHOUT_CLASSIFICATION	1.3498636328215175E-5	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999985201756018	WITHOUT_CLASSIFICATION	1.4798243982234723E-6	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999439257717	WITHOUT_CLASSIFICATION	5.607422825703135E-8	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999996854625561	WITHOUT_CLASSIFICATION	3.145374437838543E-7	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999974091369441	WITHOUT_CLASSIFICATION	2.5908630559782925E-6	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999910717509565	WITHOUT_CLASSIFICATION	8.928249043420917E-6	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.99999110789436	WITHOUT_CLASSIFICATION	8.892105640000876E-6	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999993392482116	WITHOUT_CLASSIFICATION	6.607517884266383E-7	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999978910076369	WITHOUT_CLASSIFICATION	2.108992363168889E-6	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999886139704414	WITHOUT_CLASSIFICATION	1.1386029558671793E-5	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999971677454477	WITHOUT_CLASSIFICATION	2.8322545523750504E-6	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999998488747651	WITHOUT_CLASSIFICATION	1.5112523478748553E-7	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.999992730088066	WITHOUT_CLASSIFICATION	7.2699119339897026E-6	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999356887159063	WITHOUT_CLASSIFICATION	6.431128409365932E-5	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999974585963096	WITHOUT_CLASSIFICATION	2.5414036903703516E-6	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.999998344980207	WITHOUT_CLASSIFICATION	1.6550197929805514E-6	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999892754041	WITHOUT_CLASSIFICATION	1.0724595898049072E-8	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999514700022	WITHOUT_CLASSIFICATION	4.852999775087752E-8	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999982171073588	WITHOUT_CLASSIFICATION	1.782892641195956E-6	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999331265592	WITHOUT_CLASSIFICATION	6.687344077645436E-8	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999988972369281	WITHOUT_CLASSIFICATION	1.1027630718508031E-6	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9996852847046103	WITHOUT_CLASSIFICATION	3.1471529538974996E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999996744073868	WITHOUT_CLASSIFICATION	3.2559261323723227E-7	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999961859918801	WITHOUT_CLASSIFICATION	3.8140081197613553E-6	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999897985077184	WITHOUT_CLASSIFICATION	1.0201492281662835E-5	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999750407959325	WITHOUT_CLASSIFICATION	2.4959204067518068E-5	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999998631428361	WITHOUT_CLASSIFICATION	1.3685716394744391E-7	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999984251113547	WITHOUT_CLASSIFICATION	1.5748886452116692E-6	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999997734032158	WITHOUT_CLASSIFICATION	2.2659678420280622E-7	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9986166955974806	WITHOUT_CLASSIFICATION	0.0013833044025193877	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999900072299815	WITHOUT_CLASSIFICATION	9.99277001847015E-6	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999951298849	WITHOUT_CLASSIFICATION	4.8701151372731904E-9	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999940383248602	WITHOUT_CLASSIFICATION	5.961675139747647E-6	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999760641888	WITHOUT_CLASSIFICATION	2.3935811229027008E-8	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999994491793	WITHOUT_CLASSIFICATION	5.508207752424086E-10	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999958417719449	WITHOUT_CLASSIFICATION	4.158228055085979E-6	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999865691252983	WITHOUT_CLASSIFICATION	1.3430874701788743E-5	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999991605006592	WITHOUT_CLASSIFICATION	8.394993409493245E-7	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999984538643878	WITHOUT_CLASSIFICATION	1.5461356122224073E-6	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999983213000747	WITHOUT_CLASSIFICATION	1.6786999252221219E-6	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999974550141815	WITHOUT_CLASSIFICATION	2.544985818504586E-6	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.999982048116474	WITHOUT_CLASSIFICATION	1.7951883526013342E-5	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999996000403428	WITHOUT_CLASSIFICATION	3.9995965719796723E-7	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.999960461080725	WITHOUT_CLASSIFICATION	3.953891927499885E-5	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999873896085826	WITHOUT_CLASSIFICATION	1.2610391417514357E-5	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999998208024106	WITHOUT_CLASSIFICATION	1.7919758949058976E-7	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.997397331851585	WITHOUT_CLASSIFICATION	0.0026026681484150153	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999997957929111	WITHOUT_CLASSIFICATION	2.042070889031923E-7	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999981319491742	WITHOUT_CLASSIFICATION	1.8680508257861287E-6	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999991797491982	WITHOUT_CLASSIFICATION	8.20250801903845E-7	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999974538777288	WITHOUT_CLASSIFICATION	2.546122271270665E-6	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999992600961	WITHOUT_CLASSIFICATION	7.399038837906114E-10	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999862334543781	WITHOUT_CLASSIFICATION	1.3766545621958677E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999403802721	WITHOUT_CLASSIFICATION	5.961972793987319E-8	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999806372526162	WITHOUT_CLASSIFICATION	1.9362747383745304E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999954696239262	WITHOUT_CLASSIFICATION	4.530376073889584E-6	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999998056359616	WITHOUT_CLASSIFICATION	1.943640385348536E-7	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999962998629802	WITHOUT_CLASSIFICATION	3.7001370197680265E-6	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999998546975364	WITHOUT_CLASSIFICATION	1.4530246358634829E-7	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999260072558126	WITHOUT_CLASSIFICATION	7.39927441873607E-5	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999861290808556	WITHOUT_CLASSIFICATION	1.3870919144347951E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999824260226	WITHOUT_CLASSIFICATION	1.757397735122365E-8	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999999283529205	WITHOUT_CLASSIFICATION	7.164707940184545E-8	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999959546115564	WITHOUT_CLASSIFICATION	4.0453884436092496E-6	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999991888940777	WITHOUT_CLASSIFICATION	8.111059223694293E-7	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999242858551067	WITHOUT_CLASSIFICATION	7.571414489324878E-5	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999777472829474	WITHOUT_CLASSIFICATION	2.225271705255449E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.999865018650939	WITHOUT_CLASSIFICATION	1.3498134906097473E-4	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999901606280563	WITHOUT_CLASSIFICATION	9.839371943781235E-6	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999987531013	WITHOUT_CLASSIFICATION	1.246898708991924E-9	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999998360721577	WITHOUT_CLASSIFICATION	1.6392784230155238E-7	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.999990112894061	WITHOUT_CLASSIFICATION	9.887105938884337E-6	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999999325134674	WITHOUT_CLASSIFICATION	6.748653260124286E-8	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999998360721577	WITHOUT_CLASSIFICATION	1.6392784230155238E-7	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999996240201587	WITHOUT_CLASSIFICATION	3.759798412209624E-7	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999945610945362	WITHOUT_CLASSIFICATION	5.438905463793176E-6	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999992018122356	WITHOUT_CLASSIFICATION	7.981877645030962E-7	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999877801696341	WITHOUT_CLASSIFICATION	1.2219830365946385E-5	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999989884505711	WITHOUT_CLASSIFICATION	1.0115494288749576E-6	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999892252542313	WITHOUT_CLASSIFICATION	1.0774745768638625E-5	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999874036678709	WITHOUT_CLASSIFICATION	1.2596332129158515E-5	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999995948234289	WITHOUT_CLASSIFICATION	4.051765711649356E-7	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999457323480646	WITHOUT_CLASSIFICATION	5.426765193544956E-5	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999966448786449	WITHOUT_CLASSIFICATION	3.3551213551046644E-6	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999880995835	WITHOUT_CLASSIFICATION	1.1900416575217074E-8	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999994107123742	WITHOUT_CLASSIFICATION	5.892876257838123E-7	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999903554926	WITHOUT_CLASSIFICATION	9.644507376116296E-9	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999884902802	WITHOUT_CLASSIFICATION	1.1509719780799343E-8	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999961018432779	WITHOUT_CLASSIFICATION	3.898156722027765E-6	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999991629671481	WITHOUT_CLASSIFICATION	8.370328520149624E-7	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999540094432543	WITHOUT_CLASSIFICATION	4.599055674578289E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999540094432543	WITHOUT_CLASSIFICATION	4.599055674578289E-5	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998670490243	WITHOUT_CLASSIFICATION	1.329509756866335E-7	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9996283034383695	WITHOUT_CLASSIFICATION	3.7169656163044953E-4	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999629169720646	WITHOUT_CLASSIFICATION	3.708302793537694E-5	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.999875248533962	WITHOUT_CLASSIFICATION	1.2475146603799564E-4	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9997352428713743	WITHOUT_CLASSIFICATION	2.647571286257448E-4	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9989196459904129	WITHOUT_CLASSIFICATION	0.0010803540095869662	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999875850585367	WITHOUT_CLASSIFICATION	1.2414941463336501E-5	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999997220900443	WITHOUT_CLASSIFICATION	2.7790995560986285E-7	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.999999614835272	WITHOUT_CLASSIFICATION	3.851647280796229E-7	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999084257828932	WITHOUT_CLASSIFICATION	9.157421710692556E-5	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999935519700675	WITHOUT_CLASSIFICATION	6.448029932536652E-6	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999925515262	WITHOUT_CLASSIFICATION	7.44847382978159E-9	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999703976376901	WITHOUT_CLASSIFICATION	2.9602362309812007E-5	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999247788905192	WITHOUT_CLASSIFICATION	7.52211094807586E-5	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999340743792428	WITHOUT_CLASSIFICATION	6.592562075716871E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999377140009059	WITHOUT_CLASSIFICATION	6.228599909404543E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.999956599048919	WITHOUT_CLASSIFICATION	4.340095108095433E-5	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999973425427113	WITHOUT_CLASSIFICATION	2.6574572887445073E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9542611315678848	WITHOUT_CLASSIFICATION	0.04573886843211512	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999901889601651	WITHOUT_CLASSIFICATION	9.81103983491032E-6	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999480432653	WITHOUT_CLASSIFICATION	5.195673467746445E-8	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999978308953366	WITHOUT_CLASSIFICATION	2.1691046634937687E-6	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999993424544	WITHOUT_CLASSIFICATION	6.575456510932811E-10	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999994312258	WITHOUT_CLASSIFICATION	5.687741396787311E-10	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999996491581373	WITHOUT_CLASSIFICATION	3.5084186266538823E-7	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999998642246345	WITHOUT_CLASSIFICATION	1.3577536543511964E-7	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999942128279	WITHOUT_CLASSIFICATION	5.787172116986689E-9	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999007787995118	WITHOUT_CLASSIFICATION	9.922120048817961E-5	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9996287295189525	WITHOUT_CLASSIFICATION	3.712704810474145E-4	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999800812133394	WITHOUT_CLASSIFICATION	1.9918786660621594E-5	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999985246129112	WITHOUT_CLASSIFICATION	1.4753870888341448E-6	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999771390894001	WITHOUT_CLASSIFICATION	2.2860910599909388E-5	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999337502674697	WITHOUT_CLASSIFICATION	6.624973253035663E-5	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999914968875295	WITHOUT_CLASSIFICATION	8.503112470440225E-6	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999897869236352	WITHOUT_CLASSIFICATION	1.0213076364774239E-5	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999971663405538	WITHOUT_CLASSIFICATION	2.8336594461365863E-6	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999943227251522	WITHOUT_CLASSIFICATION	5.677274847767761E-6	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999798335091197	WITHOUT_CLASSIFICATION	2.0166490880366008E-5	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999979920172964	WITHOUT_CLASSIFICATION	2.007982703474857E-6	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999997288057004	WITHOUT_CLASSIFICATION	2.7119429956651666E-7	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9997830305434928	WITHOUT_CLASSIFICATION	2.1696945650718895E-4	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999980933691077	WITHOUT_CLASSIFICATION	1.9066308922393968E-6	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999990851172049	WITHOUT_CLASSIFICATION	9.148827951470673E-7	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999156008719	WITHOUT_CLASSIFICATION	8.439912814441073E-8	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999985932348612	WITHOUT_CLASSIFICATION	1.4067651387882692E-6	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999998449558707	WITHOUT_CLASSIFICATION	1.5504412924205058E-7	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962625370088	WITHOUT_CLASSIFICATION	3.7374629912288763E-6	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990777374009	WITHOUT_CLASSIFICATION	9.222625991306603E-7	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998365662397	WITHOUT_CLASSIFICATION	1.6343376029837582E-6	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999997033822361	WITHOUT_CLASSIFICATION	2.9661776388400377E-7	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999947433125159	WITHOUT_CLASSIFICATION	5.256687484009001E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998359470404888	WITHOUT_CLASSIFICATION	1.640529595112139E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998359470404888	WITHOUT_CLASSIFICATION	1.640529595112139E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997694075045	WITHOUT_CLASSIFICATION	2.30592495621035E-7	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999763662468	WITHOUT_CLASSIFICATION	2.363375309315477E-8	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999858657557701	WITHOUT_CLASSIFICATION	1.4134244229842825E-5	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999921541975452	WITHOUT_CLASSIFICATION	7.845802454797445E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999858657557701	WITHOUT_CLASSIFICATION	1.4134244229842825E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999397351383801	WITHOUT_CLASSIFICATION	6.026486161986827E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999988470025477	WITHOUT_CLASSIFICATION	1.1529974522147367E-6	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999967369061658	WITHOUT_CLASSIFICATION	3.2630938341706183E-6	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999998513270644	WITHOUT_CLASSIFICATION	1.4867293559367424E-6	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999991731866192	WITHOUT_CLASSIFICATION	8.268133808355021E-7	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999998151464413	WITHOUT_CLASSIFICATION	1.8485355877813768E-7	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999997667467769	WITHOUT_CLASSIFICATION	2.3325322310742844E-7	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999998842058605	WITHOUT_CLASSIFICATION	1.1579413954307328E-7	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.999979523442338	WITHOUT_CLASSIFICATION	2.0476557662017823E-5	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999994029821373	WITHOUT_CLASSIFICATION	5.97017862587569E-7	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9997709310475428	WITHOUT_CLASSIFICATION	2.2906895245718034E-4	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999092801252	WITHOUT_CLASSIFICATION	9.071987484679541E-8	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999975523062413	WITHOUT_CLASSIFICATION	2.4476937586038658E-6	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999997499016074	WITHOUT_CLASSIFICATION	2.5009839245924447E-7	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.999999999971005	WITHOUT_CLASSIFICATION	2.899493282966701E-11	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999966728504	WITHOUT_CLASSIFICATION	3.3271495019776254E-9	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999619525522655	WITHOUT_CLASSIFICATION	3.804744773453371E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999619525522655	WITHOUT_CLASSIFICATION	3.804744773453371E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999963517752295	WITHOUT_CLASSIFICATION	3.648224770456197E-6	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999127699436	WITHOUT_CLASSIFICATION	8.723005641050382E-8	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999962665133	WITHOUT_CLASSIFICATION	3.733486680458905E-9	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9644569091558635	WITHOUT_CLASSIFICATION	0.035543090844136545	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999890262352	WITHOUT_CLASSIFICATION	1.0973764654482258E-8	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999984636290706	WITHOUT_CLASSIFICATION	1.536370929294589E-6	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.999981888413569	WITHOUT_CLASSIFICATION	1.811158643099149E-5	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998487939250083	WITHOUT_CLASSIFICATION	1.512060749916259E-4	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999998701716165	WITHOUT_CLASSIFICATION	1.2982838345982401E-7	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999998755520955	WITHOUT_CLASSIFICATION	1.2444790449550244E-7	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998999331007	WITHOUT_CLASSIFICATION	1.0006689929550232E-7	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999994281505833	WITHOUT_CLASSIFICATION	5.718494166426749E-7	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.999996617630385	WITHOUT_CLASSIFICATION	3.3823696149914462E-6	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999999892496835	WITHOUT_CLASSIFICATION	1.0750316504862563E-7	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999996775931206	WITHOUT_CLASSIFICATION	3.2240687935025013E-7	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999995723570729	WITHOUT_CLASSIFICATION	4.276429271282625E-7	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9998383628824711	WITHOUT_CLASSIFICATION	1.6163711752894004E-4	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.994403805881791	WITHOUT_CLASSIFICATION	0.005596194118209034	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9999911365644389	WITHOUT_CLASSIFICATION	8.86343556108795E-6	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999998653627197	WITHOUT_CLASSIFICATION	1.3463728022443692E-7	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999991763605007	WITHOUT_CLASSIFICATION	8.236394993467051E-7	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999699049334484	WITHOUT_CLASSIFICATION	3.0095066551706192E-5	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999989697395466	WITHOUT_CLASSIFICATION	1.0302604533499107E-6	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9877329641465579	WITHOUT_CLASSIFICATION	0.012267035853442236	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.999999718874952	WITHOUT_CLASSIFICATION	2.8112504798383894E-7	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999999597660081	WITHOUT_CLASSIFICATION	4.023399192485109E-8	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999997701339718	WITHOUT_CLASSIFICATION	2.2986602825244485E-7	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999992069584895	WITHOUT_CLASSIFICATION	7.930415103642266E-7	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999983382708193	WITHOUT_CLASSIFICATION	1.6617291806141845E-6	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999999808329381	WITHOUT_CLASSIFICATION	1.9167061898529126E-7	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999989329165816	WITHOUT_CLASSIFICATION	1.0670834183891607E-6	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999989869145247	WITHOUT_CLASSIFICATION	1.0130854752887224E-6	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999829894976918	WITHOUT_CLASSIFICATION	1.7010502308123008E-5	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999997676202058	WITHOUT_CLASSIFICATION	2.323797941156872E-7	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9996318230737318	WITHOUT_CLASSIFICATION	3.681769262681842E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999995300442646	WITHOUT_CLASSIFICATION	4.699557355163156E-7	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999994668653464	WITHOUT_CLASSIFICATION	5.33134653585707E-7	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999801813804092	WITHOUT_CLASSIFICATION	1.9818619590838775E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999433230713	WITHOUT_CLASSIFICATION	5.6676928758846476E-8	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999987973210719	WITHOUT_CLASSIFICATION	1.2026789280356814E-6	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999891690631	WITHOUT_CLASSIFICATION	1.0830936901198559E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997665176457	WITHOUT_CLASSIFICATION	2.3348235431018237E-7	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9997484628361806	WITHOUT_CLASSIFICATION	2.5153716381936294E-4	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.985427703872463	WITHOUT_CLASSIFICATION	0.01457229612753706	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999210719175	WITHOUT_CLASSIFICATION	7.892808246937437E-8	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999969576267979	WITHOUT_CLASSIFICATION	3.0423732022372385E-6	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9924921998696825	WITHOUT_CLASSIFICATION	0.007507800130317548	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999987097077652	WITHOUT_CLASSIFICATION	1.2902922348799984E-6	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999791099885434	WITHOUT_CLASSIFICATION	2.0890011456507026E-5	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999997127648307	WITHOUT_CLASSIFICATION	2.8723516932733204E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989951201024	WITHOUT_CLASSIFICATION	1.004879897597782E-6	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999398454166	WITHOUT_CLASSIFICATION	6.015458342860535E-8	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999992417703	WITHOUT_CLASSIFICATION	7.582296854971688E-10	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999984234738661	WITHOUT_CLASSIFICATION	1.5765261338132311E-6	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9998951123159789	WITHOUT_CLASSIFICATION	1.0488768402110617E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999968433169045	WITHOUT_CLASSIFICATION	3.1566830954456325E-6	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999968433169045	WITHOUT_CLASSIFICATION	3.1566830954456325E-6	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999994367241	WITHOUT_CLASSIFICATION	5.63275862904829E-10	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999980682189005	WITHOUT_CLASSIFICATION	1.931781099460023E-6	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999918362006371	WITHOUT_CLASSIFICATION	8.163799362919525E-6	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999995027477059	WITHOUT_CLASSIFICATION	4.972522941407712E-7	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999996464154532	WITHOUT_CLASSIFICATION	3.535845467526356E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999579773361879	WITHOUT_CLASSIFICATION	4.202266381214279E-5	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.999970531346029	WITHOUT_CLASSIFICATION	2.946865397100977E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999997117678129	WITHOUT_CLASSIFICATION	2.882321870522653E-7	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999977901263	WITHOUT_CLASSIFICATION	2.209873823120073E-9	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999969319545	WITHOUT_CLASSIFICATION	3.068045419162852E-9	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999910208233677	WITHOUT_CLASSIFICATION	8.979176632233023E-6	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999993007943654	WITHOUT_CLASSIFICATION	6.992056345212883E-7	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999885972713841	WITHOUT_CLASSIFICATION	1.1402728615843202E-5	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999987554509645	WITHOUT_CLASSIFICATION	1.2445490355642773E-6	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999990604646665	WITHOUT_CLASSIFICATION	9.395353335957494E-7	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999970946037607	WITHOUT_CLASSIFICATION	2.9053962391999656E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999997123060944	WITHOUT_CLASSIFICATION	2.876939055841074E-7	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9999891245825139	WITHOUT_CLASSIFICATION	1.087541748612835E-5	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999938315345	WITHOUT_CLASSIFICATION	6.168465404084799E-9	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999902769710685	WITHOUT_CLASSIFICATION	9.723028931548143E-6	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999999605171285	WITHOUT_CLASSIFICATION	3.9482871489345304E-7	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999968489089139	WITHOUT_CLASSIFICATION	3.1510910860647373E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999843465434092	WITHOUT_CLASSIFICATION	1.565345659077767E-5	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999977009125331	WITHOUT_CLASSIFICATION	2.2990874668236237E-6	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9998970994490897	WITHOUT_CLASSIFICATION	1.0290055091027422E-4	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9997041109645516	WITHOUT_CLASSIFICATION	2.958890354484374E-4	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9850368330155986	WITHOUT_CLASSIFICATION	0.014963166984401286	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995402882042845	WITHOUT_CLASSIFICATION	4.5971179571540667E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999997779328889	WITHOUT_CLASSIFICATION	2.2206711122570403E-7	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999843465434092	WITHOUT_CLASSIFICATION	1.565345659077767E-5	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999975733266386	WITHOUT_CLASSIFICATION	2.4266733614381822E-6	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999999974626	WITHOUT_CLASSIFICATION	2.5373831896458576E-12	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9999454529832789	WITHOUT_CLASSIFICATION	5.454701672102847E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.99999675136543	WITHOUT_CLASSIFICATION	3.2486345700468138E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999999926102	WITHOUT_CLASSIFICATION	7.389647836863619E-12	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999999990424853	WITHOUT_CLASSIFICATION	9.575146617956884E-10	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999894718115697	WITHOUT_CLASSIFICATION	1.0528188430324788E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999998212064	WITHOUT_CLASSIFICATION	1.7879355403394977E-10	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999730961627358	WITHOUT_CLASSIFICATION	2.6903837264250088E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.99999675136543	WITHOUT_CLASSIFICATION	3.2486345700468138E-6	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999957416174	WITHOUT_CLASSIFICATION	4.2583826442851675E-9	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999997492854	WITHOUT_CLASSIFICATION	2.507146506785634E-10	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999999522208728	WITHOUT_CLASSIFICATION	4.777912723469886E-8	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999796741412635	WITHOUT_CLASSIFICATION	2.032585873645606E-5	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999535373776	WITHOUT_CLASSIFICATION	4.6462622535627884E-8	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998999331007	WITHOUT_CLASSIFICATION	1.0006689929550232E-7	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999958935756	WITHOUT_CLASSIFICATION	4.106424405866847E-9	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999999634940616	WITHOUT_CLASSIFICATION	3.650593843411645E-8	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999995978338017	WITHOUT_CLASSIFICATION	4.0216619829933994E-7	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999858191520683	WITHOUT_CLASSIFICATION	1.4180847931758068E-5	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999984020832909	WITHOUT_CLASSIFICATION	1.59791670910607E-6	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999997880116303	WITHOUT_CLASSIFICATION	2.1198836970614563E-7	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999962147188753	WITHOUT_CLASSIFICATION	3.7852811247486832E-6	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999970516008361	WITHOUT_CLASSIFICATION	2.948399163902488E-6	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999894219988189	WITHOUT_CLASSIFICATION	1.0578001181103927E-5	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999965530565657	WITHOUT_CLASSIFICATION	3.4469434343667574E-6	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999749656635458	WITHOUT_CLASSIFICATION	2.5034336454103067E-5	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999991312273689	WITHOUT_CLASSIFICATION	8.687726310117526E-7	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999965961441144	WITHOUT_CLASSIFICATION	3.403855885531252E-6	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999996086591425	WITHOUT_CLASSIFICATION	3.9134085754183797E-7	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999995524456811	WITHOUT_CLASSIFICATION	4.475543189828957E-7	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998889416987633	WITHOUT_CLASSIFICATION	1.1105830123669566E-4	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999997159439266	WITHOUT_CLASSIFICATION	2.8405607346522365E-7	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999999488990925	WITHOUT_CLASSIFICATION	5.110090760598967E-8	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999999129999726	WITHOUT_CLASSIFICATION	8.700002735378543E-8	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999534192740179	WITHOUT_CLASSIFICATION	4.658072598195089E-5	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9998778247168782	WITHOUT_CLASSIFICATION	1.2217528312168072E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999994023497628	WITHOUT_CLASSIFICATION	5.976502372343196E-7	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999423673311408	WITHOUT_CLASSIFICATION	5.763266885902249E-5	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999991708902	WITHOUT_CLASSIFICATION	8.291097824457341E-10	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9998527512731206	WITHOUT_CLASSIFICATION	1.4724872687938223E-4	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9999233315441463	WITHOUT_CLASSIFICATION	7.666845585382648E-5	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999999654668517	WITHOUT_CLASSIFICATION	3.453314837651259E-8	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994612674981739	WITHOUT_CLASSIFICATION	5.387325018260951E-4	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999314037278996	WITHOUT_CLASSIFICATION	6.859627210042148E-5	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999977249489782	WITHOUT_CLASSIFICATION	2.2750510217407885E-6	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999452933193714	WITHOUT_CLASSIFICATION	5.470668062845641E-5	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999998466453416	WITHOUT_CLASSIFICATION	1.5335465846255619E-7	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999978455202704	WITHOUT_CLASSIFICATION	2.154479729599767E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999978455202704	WITHOUT_CLASSIFICATION	2.154479729599767E-6	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999999988297096	WITHOUT_CLASSIFICATION	1.1702903983927177E-8	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.999997066103132	WITHOUT_CLASSIFICATION	2.9338968679555986E-6	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9992272244655711	WITHOUT_CLASSIFICATION	7.727755344288798E-4	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999984891146265	WITHOUT_CLASSIFICATION	1.510885373427989E-6	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999981903518982	WITHOUT_CLASSIFICATION	1.8096481018309744E-6	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999957207263696	WITHOUT_CLASSIFICATION	4.2792736304413E-6	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999993441081246	WITHOUT_CLASSIFICATION	6.558918754143941E-7	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999995688080071	WITHOUT_CLASSIFICATION	4.3119199295049454E-7	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999432031862	WITHOUT_CLASSIFICATION	5.6796813849218834E-8	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999995172921	WITHOUT_CLASSIFICATION	4.827078816286209E-10	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999860615489	WITHOUT_CLASSIFICATION	1.3938451067771814E-8	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999941962407167	WITHOUT_CLASSIFICATION	5.803759283279522E-6	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999971604332084	WITHOUT_CLASSIFICATION	2.839566791593552E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999978455202704	WITHOUT_CLASSIFICATION	2.154479729599767E-6	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999947295200602	WITHOUT_CLASSIFICATION	5.270479939748562E-6	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999995765804645	WITHOUT_CLASSIFICATION	4.234195354398857E-7	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999991505156183	WITHOUT_CLASSIFICATION	8.49484381661482E-7	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999990493019039	WITHOUT_CLASSIFICATION	9.50698096049389E-7	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999999811220298	WITHOUT_CLASSIFICATION	1.8877970217715978E-8	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999942336863858	WITHOUT_CLASSIFICATION	5.766313614153972E-6	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999999001672438	WITHOUT_CLASSIFICATION	9.983275611331405E-8	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999937809731662	WITHOUT_CLASSIFICATION	6.219026833837487E-6	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999996734416591	WITHOUT_CLASSIFICATION	3.265583409109787E-7	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999671618076428	WITHOUT_CLASSIFICATION	3.283819235713779E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999965611976536	WITHOUT_CLASSIFICATION	3.4388023464941593E-6	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994612674981739	WITHOUT_CLASSIFICATION	5.387325018260951E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999978455202704	WITHOUT_CLASSIFICATION	2.154479729599767E-6	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999998367754614	WITHOUT_CLASSIFICATION	1.6322453852632563E-7	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999998084380776	WITHOUT_CLASSIFICATION	1.915619224633825E-7	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999996315750012	WITHOUT_CLASSIFICATION	3.684249988606429E-7	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999466823210793	WITHOUT_CLASSIFICATION	5.331767892069252E-5	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999996296518828	WITHOUT_CLASSIFICATION	3.703481172013929E-7	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999456221824131	WITHOUT_CLASSIFICATION	5.437781758688854E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996637194409	WITHOUT_CLASSIFICATION	3.362805590054873E-7	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999743610558655	WITHOUT_CLASSIFICATION	2.5638944134555015E-5	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999990243289548	WITHOUT_CLASSIFICATION	9.756710452040478E-7	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999992890255603	WITHOUT_CLASSIFICATION	7.109744396362458E-7	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999995184154865	WITHOUT_CLASSIFICATION	4.815845135053592E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999467014940651	WITHOUT_CLASSIFICATION	5.329850593496277E-5	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999995458722304	WITHOUT_CLASSIFICATION	4.541277695951639E-7	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999980248750285	WITHOUT_CLASSIFICATION	1.9751249713822694E-6	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999397351383801	WITHOUT_CLASSIFICATION	6.026486161986827E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999606640637	WITHOUT_CLASSIFICATION	3.933593618740987E-8	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999999999836058	WITHOUT_CLASSIFICATION	1.6394197724450185E-10	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999505763761	WITHOUT_CLASSIFICATION	4.942362393264525E-8	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999999061802195	WITHOUT_CLASSIFICATION	9.381978056068062E-8	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999737680434	WITHOUT_CLASSIFICATION	2.6231956628260476E-8	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999956934978182	WITHOUT_CLASSIFICATION	4.306502181734055E-6	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999956934978182	WITHOUT_CLASSIFICATION	4.306502181734055E-6	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999998374997142	WITHOUT_CLASSIFICATION	1.6250028586059824E-7	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.99999563594993	WITHOUT_CLASSIFICATION	4.3640500699838486E-6	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999998931937893	WITHOUT_CLASSIFICATION	1.0680621069940715E-6	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999978998552225	WITHOUT_CLASSIFICATION	2.100144777488619E-6	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999986012032663	WITHOUT_CLASSIFICATION	1.3987967335495153E-6	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999994667637707	WITHOUT_CLASSIFICATION	5.332362293210155E-7	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999872305033304	WITHOUT_CLASSIFICATION	1.2769496669645492E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999996332837485	WITHOUT_CLASSIFICATION	3.667162514649192E-7	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999996332837485	WITHOUT_CLASSIFICATION	3.667162514649192E-7	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999093302189358	WITHOUT_CLASSIFICATION	9.066978106413378E-5	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999467609196239	WITHOUT_CLASSIFICATION	5.3239080376219626E-5	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999997408513248	WITHOUT_CLASSIFICATION	2.5914867522920415E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999955392515045	WITHOUT_CLASSIFICATION	4.4607484953982924E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999955392515045	WITHOUT_CLASSIFICATION	4.4607484953982924E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999955392515045	WITHOUT_CLASSIFICATION	4.4607484953982924E-6	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999329879706614	WITHOUT_CLASSIFICATION	6.701202933862119E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999990777221485	WITHOUT_CLASSIFICATION	9.222778514953567E-7	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.984688517815855	WITHOUT_CLASSIFICATION	0.015311482184145	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9996578128438236	WITHOUT_CLASSIFICATION	3.421871561764402E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999860125871872	WITHOUT_CLASSIFICATION	1.3987412812928745E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999978455202704	WITHOUT_CLASSIFICATION	2.154479729599767E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999978455202704	WITHOUT_CLASSIFICATION	2.154479729599767E-6	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999976514496665	WITHOUT_CLASSIFICATION	2.3485503336767806E-6	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999918030291	WITHOUT_CLASSIFICATION	8.196970916889448E-9	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.999951521177959	WITHOUT_CLASSIFICATION	4.847882204089849E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999768562872	WITHOUT_CLASSIFICATION	2.3143712810476454E-8	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999987911470094	WITHOUT_CLASSIFICATION	1.2088529906319767E-6	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999996206307749	WITHOUT_CLASSIFICATION	3.793692251976706E-7	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999927961417692	WITHOUT_CLASSIFICATION	7.203858230874238E-6	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999963887106612	WITHOUT_CLASSIFICATION	3.61128933879976E-6	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999988182858176	WITHOUT_CLASSIFICATION	1.1817141823970732E-6	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999996777152976	WITHOUT_CLASSIFICATION	3.2228470235686293E-7	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999833068291129	WITHOUT_CLASSIFICATION	1.669317088710308E-5	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999973677469635	WITHOUT_CLASSIFICATION	2.632253036458384E-6	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999973677469635	WITHOUT_CLASSIFICATION	2.632253036458384E-6	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999985835514433	WITHOUT_CLASSIFICATION	1.416448556598391E-6	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999985835514433	WITHOUT_CLASSIFICATION	1.416448556598391E-6	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999984527101569	WITHOUT_CLASSIFICATION	1.5472898431323592E-6	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999975423121259	WITHOUT_CLASSIFICATION	2.4576878741027176E-6	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999975423121259	WITHOUT_CLASSIFICATION	2.4576878741027176E-6	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999971174488538	WITHOUT_CLASSIFICATION	2.8825511462207793E-6	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999997243369689	WITHOUT_CLASSIFICATION	2.7566303110246266E-6	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9991867860343014	WITHOUT_CLASSIFICATION	8.132139656986172E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999956934978182	WITHOUT_CLASSIFICATION	4.306502181734055E-6	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999920989543905	WITHOUT_CLASSIFICATION	7.901045609510829E-6	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999997243369689	WITHOUT_CLASSIFICATION	2.7566303110246266E-6	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999615245043275	WITHOUT_CLASSIFICATION	3.8475495672461416E-5	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999810278970629	WITHOUT_CLASSIFICATION	1.8972102937123558E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999992044538958	WITHOUT_CLASSIFICATION	7.955461042145393E-7	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999990125553494	WITHOUT_CLASSIFICATION	9.874446506402748E-7	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999999893869336	WITHOUT_CLASSIFICATION	1.0613066392043684E-7	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999926569712175	WITHOUT_CLASSIFICATION	7.343028782519037E-6	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999998539148903	WITHOUT_CLASSIFICATION	1.4608510965971156E-7	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999999429085695	WITHOUT_CLASSIFICATION	5.709143059824103E-8	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999999129992856	WITHOUT_CLASSIFICATION	8.700071432548991E-8	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999942014986887	WITHOUT_CLASSIFICATION	5.798501311241895E-6	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999286340822	WITHOUT_CLASSIFICATION	7.136591780725327E-8	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999970258165402	WITHOUT_CLASSIFICATION	2.9741834599391843E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999993292297511	WITHOUT_CLASSIFICATION	6.707702490044315E-7	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999998674082539	WITHOUT_CLASSIFICATION	1.3259174603650784E-7	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999908788374944	WITHOUT_CLASSIFICATION	9.121162505622548E-6	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999999087446031	WITHOUT_CLASSIFICATION	9.125539688121295E-8	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999722493463521	WITHOUT_CLASSIFICATION	2.775065364791776E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999995132091427	WITHOUT_CLASSIFICATION	4.867908573497337E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999995132091427	WITHOUT_CLASSIFICATION	4.867908573497337E-7	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999973828843388	WITHOUT_CLASSIFICATION	2.6171156613025986E-6	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.99998381122208	WITHOUT_CLASSIFICATION	1.6188777920006466E-5	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999965128145029	WITHOUT_CLASSIFICATION	3.487185497164889E-6	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999993048286278	WITHOUT_CLASSIFICATION	6.951713722625012E-7	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999997408438229	WITHOUT_CLASSIFICATION	2.591561769947372E-7	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999966155279745	WITHOUT_CLASSIFICATION	3.3844720254509858E-6	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999998689993527	WITHOUT_CLASSIFICATION	1.3100064729359018E-7	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999962532505002	WITHOUT_CLASSIFICATION	3.746749499776874E-6	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999999883422561	WITHOUT_CLASSIFICATION	1.1657743902836797E-7	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999991778795408	WITHOUT_CLASSIFICATION	8.221204591874148E-7	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999982376480071	WITHOUT_CLASSIFICATION	1.7623519928600078E-6	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999467014940651	WITHOUT_CLASSIFICATION	5.329850593496277E-5	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999997127941115	WITHOUT_CLASSIFICATION	2.872058885380461E-7	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999999501920684	WITHOUT_CLASSIFICATION	4.9807931611694385E-8	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999805866908348	WITHOUT_CLASSIFICATION	1.9413309165201766E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999994558574061	WITHOUT_CLASSIFICATION	5.441425939006892E-7	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999978460858696	WITHOUT_CLASSIFICATION	2.1539141304388E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999978460858696	WITHOUT_CLASSIFICATION	2.1539141304388E-6	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.999957168408026	WITHOUT_CLASSIFICATION	4.283159197409542E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999990341335921	WITHOUT_CLASSIFICATION	9.658664078183917E-7	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999950551225488	WITHOUT_CLASSIFICATION	4.944877451126436E-6	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999982929100723	WITHOUT_CLASSIFICATION	1.7070899277695556E-6	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999932492045652	WITHOUT_CLASSIFICATION	6.750795434745221E-6	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999996832754404	WITHOUT_CLASSIFICATION	3.167245595337184E-7	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9995743085508232	WITHOUT_CLASSIFICATION	4.256914491768756E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999987838634398	WITHOUT_CLASSIFICATION	1.216136560309718E-6	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999982441445461	WITHOUT_CLASSIFICATION	1.7558554539463828E-6	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999976256456	WITHOUT_CLASSIFICATION	2.3743543085704873E-9	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999994079491793	WITHOUT_CLASSIFICATION	5.920508206997363E-6	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999987838634398	WITHOUT_CLASSIFICATION	1.216136560309718E-6	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999864922733464	WITHOUT_CLASSIFICATION	1.3507726653601524E-5	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999904053137119	WITHOUT_CLASSIFICATION	9.594686288263643E-6	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999988506285	WITHOUT_CLASSIFICATION	1.149371488629957E-9	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999994004172502	WITHOUT_CLASSIFICATION	5.995827498088027E-7	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999797306093	WITHOUT_CLASSIFICATION	2.0269390715928966E-8	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999223497263	WITHOUT_CLASSIFICATION	7.765027371092987E-8	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999998418948478	WITHOUT_CLASSIFICATION	1.581051522468971E-7	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999998362074155	WITHOUT_CLASSIFICATION	1.6379258441504185E-7	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999991065663	WITHOUT_CLASSIFICATION	8.934336527721873E-10	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999984674881472	WITHOUT_CLASSIFICATION	1.5325118527395023E-6	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999987272958987	WITHOUT_CLASSIFICATION	1.2727041014107185E-6	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999823761792	WITHOUT_CLASSIFICATION	1.7623820885907026E-8	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999996866237966	WITHOUT_CLASSIFICATION	3.133762035037766E-7	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999996487745122	WITHOUT_CLASSIFICATION	3.512254877813197E-7	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999954683752424	WITHOUT_CLASSIFICATION	4.531624757559198E-6	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999775919926	WITHOUT_CLASSIFICATION	2.2408007516329226E-8	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999990605182998	WITHOUT_CLASSIFICATION	9.394817001062073E-7	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999711353211619	WITHOUT_CLASSIFICATION	2.886467883815235E-5	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999740200229351	WITHOUT_CLASSIFICATION	2.5979977064786036E-5	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999018249411	WITHOUT_CLASSIFICATION	9.817505893633577E-8	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999914185138736	WITHOUT_CLASSIFICATION	8.581486126391149E-6	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999849585836487	WITHOUT_CLASSIFICATION	1.5041416351233469E-5	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999257389072411	WITHOUT_CLASSIFICATION	7.42610927588368E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.999998849253594	WITHOUT_CLASSIFICATION	1.1507464059952742E-6	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999981775410631	WITHOUT_CLASSIFICATION	1.8224589368889545E-6	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999223242690829	WITHOUT_CLASSIFICATION	7.767573091711813E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999982512728924	WITHOUT_CLASSIFICATION	1.7487271075371312E-6	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999994647020002	WITHOUT_CLASSIFICATION	5.352979998154806E-7	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999868829641524	WITHOUT_CLASSIFICATION	1.3117035847595264E-5	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999972540378772	WITHOUT_CLASSIFICATION	2.7459621228374226E-6	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999924064949326	WITHOUT_CLASSIFICATION	7.59350506752907E-6	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999962708248599	WITHOUT_CLASSIFICATION	3.7291751401896344E-6	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999934623971561	WITHOUT_CLASSIFICATION	6.537602843871419E-6	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999104029941	WITHOUT_CLASSIFICATION	8.959700594767065E-8	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999999880889411	WITHOUT_CLASSIFICATION	1.191105890058052E-7	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999999055245334	WITHOUT_CLASSIFICATION	9.447546648234109E-8	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999975612902243	WITHOUT_CLASSIFICATION	2.438709775732701E-6	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999983450890916	WITHOUT_CLASSIFICATION	1.6549109084906756E-6	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999626749829975	WITHOUT_CLASSIFICATION	3.732501700248082E-5	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999986041200564	WITHOUT_CLASSIFICATION	1.3958799435935405E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999985479899878	WITHOUT_CLASSIFICATION	1.452010012230681E-6	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999999828014208	WITHOUT_CLASSIFICATION	1.7198579195906224E-7	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999305768957	WITHOUT_CLASSIFICATION	6.942310422642356E-8	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999999895520432	WITHOUT_CLASSIFICATION	1.044795679399701E-7	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999991159928902	WITHOUT_CLASSIFICATION	8.840071097910338E-7	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999999289388327	WITHOUT_CLASSIFICATION	7.106116733789797E-8	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.999977277392728	WITHOUT_CLASSIFICATION	2.2722607271963686E-5	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999890586363928	WITHOUT_CLASSIFICATION	1.0941363607163497E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999990760556187	WITHOUT_CLASSIFICATION	9.239443813553092E-7	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999999818591304	WITHOUT_CLASSIFICATION	1.8140869575250195E-8	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989385311849	WITHOUT_CLASSIFICATION	1.0614688151102883E-6	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999999372769843	WITHOUT_CLASSIFICATION	6.272301568105987E-8	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999447052638	WITHOUT_CLASSIFICATION	5.529473612697233E-8	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999961191869	WITHOUT_CLASSIFICATION	3.880813109428097E-9	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999987024014482	WITHOUT_CLASSIFICATION	1.2975985518527106E-6	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999999566511927	WITHOUT_CLASSIFICATION	4.334880730125453E-7	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999999368766955	WITHOUT_CLASSIFICATION	6.312330448963922E-7	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999999913782518	WITHOUT_CLASSIFICATION	8.621748262180406E-9	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.999999105793807	WITHOUT_CLASSIFICATION	8.942061930587947E-7	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999997458768021	WITHOUT_CLASSIFICATION	2.5412319787959994E-7	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999988075919587	WITHOUT_CLASSIFICATION	1.1924080412285842E-6	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999982727239514	WITHOUT_CLASSIFICATION	1.7272760486995432E-6	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999957464988626	WITHOUT_CLASSIFICATION	4.253501137440787E-6	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999995092491	WITHOUT_CLASSIFICATION	4.9075080445848E-10	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999873238783707	WITHOUT_CLASSIFICATION	1.26761216293024E-5	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999872983565177	WITHOUT_CLASSIFICATION	1.2701643482383042E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989385311849	WITHOUT_CLASSIFICATION	1.0614688151102883E-6	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999987750709297	WITHOUT_CLASSIFICATION	1.2249290702743668E-6	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.99999748378322	WITHOUT_CLASSIFICATION	2.516216779970143E-6	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999994882484297	WITHOUT_CLASSIFICATION	5.117515703324871E-7	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999999767809868	WITHOUT_CLASSIFICATION	2.3219013157030556E-8	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.99995375096457	WITHOUT_CLASSIFICATION	4.624903543008935E-5	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999996091436483	WITHOUT_CLASSIFICATION	3.9085635167746134E-7	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999982441445461	WITHOUT_CLASSIFICATION	1.7558554539463828E-6	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9997588820613292	WITHOUT_CLASSIFICATION	2.4111793867062913E-4	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999999880889411	WITHOUT_CLASSIFICATION	1.191105890058052E-7	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9996055675347083	WITHOUT_CLASSIFICATION	3.944324652916541E-4	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999987988120455	WITHOUT_CLASSIFICATION	1.2011879545797711E-6	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.99999735930386	WITHOUT_CLASSIFICATION	2.640696140073227E-6	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999966452408792	WITHOUT_CLASSIFICATION	3.354759120855157E-6	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999972206144936	WITHOUT_CLASSIFICATION	2.7793855064799947E-6	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999996311801655	WITHOUT_CLASSIFICATION	3.688198344639821E-7	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999979004348	WITHOUT_CLASSIFICATION	2.0995652030805238E-8	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999995012942339	WITHOUT_CLASSIFICATION	4.987057660282964E-7	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999974685067067	WITHOUT_CLASSIFICATION	2.5314932933602304E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999993679167	WITHOUT_CLASSIFICATION	6.32083323835314E-10	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999936934991067	WITHOUT_CLASSIFICATION	6.306500893331561E-6	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999874937199396	WITHOUT_CLASSIFICATION	1.2506280060497827E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999956953812	WITHOUT_CLASSIFICATION	4.304618764528179E-9	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999956953812	WITHOUT_CLASSIFICATION	4.304618764528179E-9	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999968774173525	WITHOUT_CLASSIFICATION	3.1225826474426592E-6	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999991226514209	WITHOUT_CLASSIFICATION	8.773485790940083E-6	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999974457994	WITHOUT_CLASSIFICATION	2.554200600006317E-9	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999601022247	WITHOUT_CLASSIFICATION	3.9897775403178937E-8	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999961365731121	WITHOUT_CLASSIFICATION	3.863426887804101E-6	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999998452363676	WITHOUT_CLASSIFICATION	1.5476363236814528E-7	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999644840616	WITHOUT_CLASSIFICATION	3.551593836075427E-8	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999997917296892	WITHOUT_CLASSIFICATION	2.082703108627096E-7	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999925846452	WITHOUT_CLASSIFICATION	7.415354817054804E-9	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999992225344309	WITHOUT_CLASSIFICATION	7.774655690383632E-7	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999790755079087	WITHOUT_CLASSIFICATION	2.0924492091394636E-5	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.999982153598314	WITHOUT_CLASSIFICATION	1.784640168597452E-5	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999922561595016	WITHOUT_CLASSIFICATION	7.743840498317365E-6	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999996668674	WITHOUT_CLASSIFICATION	3.331327072314555E-10	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999871779588516	WITHOUT_CLASSIFICATION	1.2822041148265647E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999998329905737	WITHOUT_CLASSIFICATION	1.6700942623420932E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999995137725776	WITHOUT_CLASSIFICATION	4.862274225306622E-7	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999996366536342	WITHOUT_CLASSIFICATION	3.633463657860716E-7	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999983389149896	WITHOUT_CLASSIFICATION	1.6610850103828834E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993627787672	WITHOUT_CLASSIFICATION	6.372212326957536E-7	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999561697253	WITHOUT_CLASSIFICATION	4.3830274820098376E-8	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999959062261217	WITHOUT_CLASSIFICATION	4.09377387840542E-6	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999993073693538	WITHOUT_CLASSIFICATION	6.926306462558851E-7	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.999992203360994	WITHOUT_CLASSIFICATION	7.796639006007895E-6	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9980368078260454	WITHOUT_CLASSIFICATION	0.0019631921739546414	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9995590556000666	WITHOUT_CLASSIFICATION	4.409443999334163E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993627787672	WITHOUT_CLASSIFICATION	6.372212326957536E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993627787672	WITHOUT_CLASSIFICATION	6.372212326957536E-7	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999990645407266	WITHOUT_CLASSIFICATION	9.354592733214626E-7	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999983399901518	WITHOUT_CLASSIFICATION	1.6600098482320205E-6	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999998271393615	WITHOUT_CLASSIFICATION	1.728606385723095E-7	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999996492418828	WITHOUT_CLASSIFICATION	3.507581172622673E-7	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9971087851054449	WITHOUT_CLASSIFICATION	0.002891214894555176	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999919595951572	WITHOUT_CLASSIFICATION	8.040404842860639E-6	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999812084809023	WITHOUT_CLASSIFICATION	1.8791519097574753E-5	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9998396609816482	WITHOUT_CLASSIFICATION	1.6033901835172702E-4	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999987874487671	WITHOUT_CLASSIFICATION	1.2125512327864792E-6	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999977821901058	WITHOUT_CLASSIFICATION	2.2178098942056167E-6	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999960702969892	WITHOUT_CLASSIFICATION	3.929703010771751E-6	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9997095688346046	WITHOUT_CLASSIFICATION	2.9043116539539775E-4	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999831597452385	WITHOUT_CLASSIFICATION	1.6840254761482358E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999991186023623	WITHOUT_CLASSIFICATION	8.813976376414324E-7	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999795172851678	WITHOUT_CLASSIFICATION	2.048271483227566E-5	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999700616974	WITHOUT_CLASSIFICATION	2.9938302571441365E-8	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999955260955159	WITHOUT_CLASSIFICATION	4.473904484175531E-6	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999992863256219	WITHOUT_CLASSIFICATION	7.136743781487475E-7	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999990802855154	WITHOUT_CLASSIFICATION	9.197144846519394E-7	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999712117161665	WITHOUT_CLASSIFICATION	2.8788283833382134E-5	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.7847172900914433	IMPLEMENTATION	0.21528270990855683	WITHOUT_CLASSIFICATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999707017707005	WITHOUT_CLASSIFICATION	2.92982292994397E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999981682920649	WITHOUT_CLASSIFICATION	1.831707935122926E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999984574906433	WITHOUT_CLASSIFICATION	1.5425093566605272E-6	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960124687699	WITHOUT_CLASSIFICATION	3.987531230131365E-6	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999965548709204	WITHOUT_CLASSIFICATION	3.4451290796681552E-6	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999632709536	WITHOUT_CLASSIFICATION	3.6729046238432925E-8	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999994149792941	WITHOUT_CLASSIFICATION	5.850207058903175E-7	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999925677269788	WITHOUT_CLASSIFICATION	7.432273021304247E-6	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999996826747356	WITHOUT_CLASSIFICATION	3.1732526431407195E-7	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999997292387043	WITHOUT_CLASSIFICATION	2.707612957255593E-7	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999803255797551	WITHOUT_CLASSIFICATION	1.967442024490458E-5	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999901417357079	WITHOUT_CLASSIFICATION	9.858264292156983E-6	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999984234328048	WITHOUT_CLASSIFICATION	1.5765671952785133E-6	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999999968911414	WITHOUT_CLASSIFICATION	3.1088586028897556E-8	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.999999638314719	WITHOUT_CLASSIFICATION	3.616852809487811E-7	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999944039666641	WITHOUT_CLASSIFICATION	5.596033335911977E-6	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999999637827927	WITHOUT_CLASSIFICATION	3.621720730952122E-8	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999648799526297	WITHOUT_CLASSIFICATION	3.512004737024083E-5	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999997354085108	WITHOUT_CLASSIFICATION	2.6459148915284976E-7	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999968625012885	WITHOUT_CLASSIFICATION	3.1374987115028937E-6	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999997911057184	WITHOUT_CLASSIFICATION	2.088942815968377E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999947058669438	WITHOUT_CLASSIFICATION	5.294133056109553E-6	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999984186796826	WITHOUT_CLASSIFICATION	1.5813203173486687E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999947058669438	WITHOUT_CLASSIFICATION	5.294133056109553E-6	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999977152452	WITHOUT_CLASSIFICATION	2.2847547944763487E-9	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999978581976511	WITHOUT_CLASSIFICATION	2.141802348797055E-6	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999559325021422	WITHOUT_CLASSIFICATION	4.406749785773389E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999936478958196	WITHOUT_CLASSIFICATION	6.35210418034125E-6	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999964178590419	WITHOUT_CLASSIFICATION	3.582140958189269E-6	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999976586698349	WITHOUT_CLASSIFICATION	2.341330165106387E-5	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999997721079223	WITHOUT_CLASSIFICATION	2.278920776151773E-7	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999992616287031	WITHOUT_CLASSIFICATION	7.38371296907777E-6	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999993899137318	WITHOUT_CLASSIFICATION	6.100862680893581E-7	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999998506251848	WITHOUT_CLASSIFICATION	1.4937481520178547E-7	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999999811573128	WITHOUT_CLASSIFICATION	1.8842687193125752E-7	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999865583076933	WITHOUT_CLASSIFICATION	1.3441692306629681E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999544924324	WITHOUT_CLASSIFICATION	4.55075675373216E-8	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999996035811466	WITHOUT_CLASSIFICATION	3.964188534527731E-7	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999826166208685	WITHOUT_CLASSIFICATION	1.738337913141348E-5	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999971524997199	WITHOUT_CLASSIFICATION	2.8475002802512977E-6	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.999999267230864	WITHOUT_CLASSIFICATION	7.327691361224819E-7	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999493173245	WITHOUT_CLASSIFICATION	5.0682675529931966E-8	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999999852255806	WITHOUT_CLASSIFICATION	1.4774419400802978E-7	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999998333132648	WITHOUT_CLASSIFICATION	1.6668673519327816E-7	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999972580832981	WITHOUT_CLASSIFICATION	2.741916702035267E-6	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999969947433888	WITHOUT_CLASSIFICATION	3.0052566113118967E-6	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999845062741521	WITHOUT_CLASSIFICATION	1.5493725847869947E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9995266574652061	WITHOUT_CLASSIFICATION	4.7334253479387896E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999934058025698	WITHOUT_CLASSIFICATION	6.594197430284277E-6	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999991888937513	WITHOUT_CLASSIFICATION	8.111062486786676E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999992037709172	WITHOUT_CLASSIFICATION	7.962290827020943E-7	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999883521304465	WITHOUT_CLASSIFICATION	1.164786955355156E-5	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998085273875	WITHOUT_CLASSIFICATION	1.9147261244599414E-7	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999973234038887	WITHOUT_CLASSIFICATION	2.6765961113344077E-6	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999995343151167	WITHOUT_CLASSIFICATION	4.65684883328379E-7	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999989102387333	WITHOUT_CLASSIFICATION	1.0897612666225498E-6	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999999393951	WITHOUT_CLASSIFICATION	6.06047630271742E-11	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999978743120346	WITHOUT_CLASSIFICATION	2.1256879653862687E-6	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999998355560606	WITHOUT_CLASSIFICATION	1.6444393933641682E-7	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999964199430083	WITHOUT_CLASSIFICATION	3.580056991872632E-6	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.999998422340139	WITHOUT_CLASSIFICATION	1.5776598610123344E-6	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999292037502	WITHOUT_CLASSIFICATION	7.07962498240849E-8	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9999884585415084	WITHOUT_CLASSIFICATION	1.1541458491543497E-5	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999632408941	WITHOUT_CLASSIFICATION	3.675910584910185E-8	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999990338045861	WITHOUT_CLASSIFICATION	9.661954139454499E-7	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999414338667945	WITHOUT_CLASSIFICATION	5.8566133205537876E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998637134876257	WITHOUT_CLASSIFICATION	1.362865123743656E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999991888937513	WITHOUT_CLASSIFICATION	8.111062486786676E-7	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999052855637209	WITHOUT_CLASSIFICATION	9.471443627915031E-5	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999863731104244	WITHOUT_CLASSIFICATION	1.3626889575605627E-5	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999835553738162	WITHOUT_CLASSIFICATION	1.6444626183715445E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999999807098198	WITHOUT_CLASSIFICATION	1.929018020131633E-7	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999996121688232	WITHOUT_CLASSIFICATION	3.8783117684191536E-7	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.999984655286789	WITHOUT_CLASSIFICATION	1.5344713210929284E-5	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999463207499609	WITHOUT_CLASSIFICATION	5.3679250039181944E-5	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999937809349514	WITHOUT_CLASSIFICATION	6.2190650485813566E-6	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999954082042758	WITHOUT_CLASSIFICATION	4.591795724151046E-6	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999929557373053	WITHOUT_CLASSIFICATION	7.044262694793078E-6	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9999880966488792	WITHOUT_CLASSIFICATION	1.1903351120706382E-5	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999474468568	WITHOUT_CLASSIFICATION	5.255314323549491E-8	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999821148086284	WITHOUT_CLASSIFICATION	1.788519137152684E-5	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999964677176677	WITHOUT_CLASSIFICATION	3.532282332363763E-6	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999992670215385	WITHOUT_CLASSIFICATION	7.329784615190548E-7	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999574760385	WITHOUT_CLASSIFICATION	4.2523961369840414E-8	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999970686253636	WITHOUT_CLASSIFICATION	2.9313746364293503E-6	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999999531105587	WITHOUT_CLASSIFICATION	4.688944129759524E-7	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999814528848642	WITHOUT_CLASSIFICATION	1.8547115135724373E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999052855637209	WITHOUT_CLASSIFICATION	9.471443627915031E-5	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999865825349348	WITHOUT_CLASSIFICATION	1.3417465065158085E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999942613474165	WITHOUT_CLASSIFICATION	5.738652583521875E-6	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999996761581181	WITHOUT_CLASSIFICATION	3.238418819180711E-7	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999993691816716	WITHOUT_CLASSIFICATION	6.30818328343736E-7	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.999999925666957	WITHOUT_CLASSIFICATION	7.433304308299006E-8	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9984057058986062	WITHOUT_CLASSIFICATION	0.0015942941013938339	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9984057058986062	WITHOUT_CLASSIFICATION	0.0015942941013938339	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999998276910487	WITHOUT_CLASSIFICATION	1.723089512540919E-7	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9984057058986062	WITHOUT_CLASSIFICATION	0.0015942941013938339	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9984057058986062	WITHOUT_CLASSIFICATION	0.0015942941013938339	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999001488397821	WITHOUT_CLASSIFICATION	9.985116021805625E-5	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999999976411569	WITHOUT_CLASSIFICATION	2.3588430447528094E-9	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999995498668032	WITHOUT_CLASSIFICATION	4.501331968459766E-7	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999981086472816	WITHOUT_CLASSIFICATION	1.8913527185059531E-6	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999964249148	WITHOUT_CLASSIFICATION	3.575085197707467E-9	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999999994526471	WITHOUT_CLASSIFICATION	5.473529527097598E-10	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9994029101273187	WITHOUT_CLASSIFICATION	5.970898726811696E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999923942836	WITHOUT_CLASSIFICATION	7.60571646661336E-9	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999244004685556	WITHOUT_CLASSIFICATION	7.559953144443732E-5	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999276961468943	WITHOUT_CLASSIFICATION	7.230385310576698E-5	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999708652714503	WITHOUT_CLASSIFICATION	2.9134728549647046E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999288908586673	WITHOUT_CLASSIFICATION	7.110914133263613E-5	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999975349340464	WITHOUT_CLASSIFICATION	2.4650659535647346E-6	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999847791574225	WITHOUT_CLASSIFICATION	1.5220842577547553E-5	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999930160356447	WITHOUT_CLASSIFICATION	6.98396435528515E-6	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999987081639994	WITHOUT_CLASSIFICATION	1.2918360006068866E-6	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997694075045	WITHOUT_CLASSIFICATION	2.30592495621035E-7	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999911414800314	WITHOUT_CLASSIFICATION	8.858519968620267E-6	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999776614627239	WITHOUT_CLASSIFICATION	2.2338537276149814E-5	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999881759650131	WITHOUT_CLASSIFICATION	1.1824034986956067E-5	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999908003407486	WITHOUT_CLASSIFICATION	9.199659251299143E-6	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999976571555645	WITHOUT_CLASSIFICATION	2.342844435433141E-6	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997694075045	WITHOUT_CLASSIFICATION	2.30592495621035E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999992037709172	WITHOUT_CLASSIFICATION	7.962290827020943E-7	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9999544327723213	WITHOUT_CLASSIFICATION	4.556722767864677E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999995437053858	WITHOUT_CLASSIFICATION	4.562946142127439E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999988309833816	WITHOUT_CLASSIFICATION	1.1690166184097245E-6	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999959889266388	WITHOUT_CLASSIFICATION	4.0110733612576325E-6	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999975975208079	WITHOUT_CLASSIFICATION	2.4024791921180033E-6	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9999994934426906	WITHOUT_CLASSIFICATION	5.065573094864215E-7	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999944213211806	WITHOUT_CLASSIFICATION	5.5786788193879993E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999983041055386	WITHOUT_CLASSIFICATION	1.6958944614567736E-6	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9992592501900616	WITHOUT_CLASSIFICATION	7.407498099384839E-4	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999627552639926	WITHOUT_CLASSIFICATION	3.72447360073137E-5	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999991664891622	WITHOUT_CLASSIFICATION	8.335108376856115E-7	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999997162880779	WITHOUT_CLASSIFICATION	2.837119220943245E-7	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999996925098354	WITHOUT_CLASSIFICATION	3.0749016458348534E-7	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998930178763433	WITHOUT_CLASSIFICATION	1.0698212365663322E-4	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999998515092431	WITHOUT_CLASSIFICATION	1.484907569926488E-7	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999997602458651	WITHOUT_CLASSIFICATION	2.3975413483618095E-7	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999881609327048	WITHOUT_CLASSIFICATION	1.1839067295095155E-5	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999962430090626	WITHOUT_CLASSIFICATION	3.756990937368197E-6	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999973584601357	WITHOUT_CLASSIFICATION	2.6415398642683246E-6	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999535682670467	WITHOUT_CLASSIFICATION	4.6431732953347006E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999322800692793	WITHOUT_CLASSIFICATION	6.77199307207452E-5	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999998756566006	WITHOUT_CLASSIFICATION	1.2434339928460078E-7	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999983041055386	WITHOUT_CLASSIFICATION	1.6958944614567736E-6	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999994303100165	WITHOUT_CLASSIFICATION	5.696899835263711E-7	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9999774180755159	WITHOUT_CLASSIFICATION	2.2581924484103745E-5	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999333350981134	WITHOUT_CLASSIFICATION	6.666490188651829E-5	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.999999045766359	WITHOUT_CLASSIFICATION	9.542336409675096E-7	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995738098661	WITHOUT_CLASSIFICATION	4.261901339004479E-7	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9999939678953075	WITHOUT_CLASSIFICATION	6.032104692631578E-6	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9999989846469753	WITHOUT_CLASSIFICATION	1.015353024717261E-6	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999947663209339	WITHOUT_CLASSIFICATION	5.2336790661419615E-6	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999898488843998	WITHOUT_CLASSIFICATION	1.0151115600153282E-5	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9998511299930425	WITHOUT_CLASSIFICATION	1.4887000695740446E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997333829406	WITHOUT_CLASSIFICATION	2.666170594597813E-7	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999998565225116	WITHOUT_CLASSIFICATION	1.434774884085612E-7	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999995949058093	WITHOUT_CLASSIFICATION	4.0509419077081395E-7	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.999999559604952	WITHOUT_CLASSIFICATION	4.4039504798789535E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999990463049039	WITHOUT_CLASSIFICATION	9.536950960377329E-7	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999963430815694	WITHOUT_CLASSIFICATION	3.656918430604222E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999978012389614	WITHOUT_CLASSIFICATION	2.1987610386162037E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997333829406	WITHOUT_CLASSIFICATION	2.666170594597813E-7	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999943827407	WITHOUT_CLASSIFICATION	5.6172593191187974E-9	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999957132782058	WITHOUT_CLASSIFICATION	4.286721794193727E-6	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999993939847507	WITHOUT_CLASSIFICATION	6.060152493716232E-7	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999996706363634	WITHOUT_CLASSIFICATION	3.2936363658911897E-7	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.999998410565061	WITHOUT_CLASSIFICATION	1.5894349389959768E-6	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999989345473848	WITHOUT_CLASSIFICATION	1.0654526153263094E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999990463049039	WITHOUT_CLASSIFICATION	9.536950960377329E-7	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999991193343399	WITHOUT_CLASSIFICATION	8.806656601042511E-7	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993000015446	WITHOUT_CLASSIFICATION	6.999984555017262E-7	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999768385412	WITHOUT_CLASSIFICATION	2.316145880291609E-7	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995884551931855	WITHOUT_CLASSIFICATION	4.115448068145217E-4	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992342656644946	WITHOUT_CLASSIFICATION	7.657343355054023E-4	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998285538833219	WITHOUT_CLASSIFICATION	1.7144611667808837E-4	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995096451296	WITHOUT_CLASSIFICATION	4.90354870262936E-7	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995096451296	WITHOUT_CLASSIFICATION	4.90354870262936E-7	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999998714252103	WITHOUT_CLASSIFICATION	1.2857478971304054E-7	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999982088159365	WITHOUT_CLASSIFICATION	1.7911840635015047E-6	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999983485062289	WITHOUT_CLASSIFICATION	1.651493771109872E-6	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999992459203977	WITHOUT_CLASSIFICATION	7.540796022924746E-7	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999720224908275	WITHOUT_CLASSIFICATION	2.7977509172446593E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997999379646	WITHOUT_CLASSIFICATION	2.000620352763422E-7	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942417852058	WITHOUT_CLASSIFICATION	5.75821479423182E-6	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981651903688	WITHOUT_CLASSIFICATION	1.8348096312171357E-6	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999999854785274	WITHOUT_CLASSIFICATION	1.4521472639339044E-8	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994845929691	WITHOUT_CLASSIFICATION	5.154070309861324E-7	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997999379646	WITHOUT_CLASSIFICATION	2.000620352763422E-7	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942417852058	WITHOUT_CLASSIFICATION	5.75821479423182E-6	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981651903688	WITHOUT_CLASSIFICATION	1.8348096312171357E-6	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999998171128022	WITHOUT_CLASSIFICATION	1.8288719783401385E-7	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9999116303752184	WITHOUT_CLASSIFICATION	8.836962478167199E-5	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.999999923943585	WITHOUT_CLASSIFICATION	7.605641505529951E-8	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999983261216339	WITHOUT_CLASSIFICATION	1.6738783662062488E-6	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999704580421	WITHOUT_CLASSIFICATION	2.954195793474665E-8	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999998974105335	WITHOUT_CLASSIFICATION	1.0258946646105797E-7	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998923564743077	WITHOUT_CLASSIFICATION	1.0764352569217806E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9997704778841532	WITHOUT_CLASSIFICATION	2.2952211584681789E-4	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999659545120032	WITHOUT_CLASSIFICATION	3.40454879967638E-5	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.99999596212824	WITHOUT_CLASSIFICATION	4.03787175993824E-6	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999998753203192	WITHOUT_CLASSIFICATION	1.246796808436706E-7	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999981110343815	WITHOUT_CLASSIFICATION	1.8889656185035383E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999939813515204	WITHOUT_CLASSIFICATION	6.018648479547274E-6	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999550551644	WITHOUT_CLASSIFICATION	4.494483566274918E-8	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999993761402377	WITHOUT_CLASSIFICATION	6.238597624307078E-7	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999869779359737	WITHOUT_CLASSIFICATION	1.302206402623048E-5	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999992807203913	WITHOUT_CLASSIFICATION	7.192796087819827E-7	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999967493252462	WITHOUT_CLASSIFICATION	3.250674753800633E-5	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999986489120274	WITHOUT_CLASSIFICATION	1.3510879726276534E-6	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999929880183868	WITHOUT_CLASSIFICATION	7.011981613242982E-6	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999983920874836	WITHOUT_CLASSIFICATION	1.6079125163314825E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999731953545259	WITHOUT_CLASSIFICATION	2.680464547410394E-5	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9817714640399864	WITHOUT_CLASSIFICATION	0.0182285359600136	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.999965602709914	WITHOUT_CLASSIFICATION	3.4397290086058E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999931923876	WITHOUT_CLASSIFICATION	6.807612452101536E-9	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998597317167716	WITHOUT_CLASSIFICATION	1.4026828322843268E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997388678465	WITHOUT_CLASSIFICATION	2.6113215346061047E-7	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956982581644	WITHOUT_CLASSIFICATION	4.301741835621777E-6	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999661306782	WITHOUT_CLASSIFICATION	3.3869321875468184E-8	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979321694179	WITHOUT_CLASSIFICATION	2.067830582154334E-6	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930663362003	WITHOUT_CLASSIFICATION	6.933663799686994E-6	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999824260226	WITHOUT_CLASSIFICATION	1.757397735122365E-8	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999824260226	WITHOUT_CLASSIFICATION	1.757397735122365E-8	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999673969214	WITHOUT_CLASSIFICATION	3.260307867310205E-8	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999993010742	WITHOUT_CLASSIFICATION	6.989257645998875E-10	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999953215580294	WITHOUT_CLASSIFICATION	4.678441970638396E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999467014940651	WITHOUT_CLASSIFICATION	5.329850593496277E-5	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999155064981444	WITHOUT_CLASSIFICATION	8.449350185563511E-5	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999919269243	WITHOUT_CLASSIFICATION	8.073075623064168E-9	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.999993000070212	WITHOUT_CLASSIFICATION	6.999929788048846E-6	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999971441683989	WITHOUT_CLASSIFICATION	2.8558316010068E-6	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999901606280563	WITHOUT_CLASSIFICATION	9.839371943781235E-6	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997521385961	WITHOUT_CLASSIFICATION	2.4786140390589976E-6	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965842188323	WITHOUT_CLASSIFICATION	3.415781167591793E-6	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971120499211	WITHOUT_CLASSIFICATION	2.8879500787690162E-6	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990715090409	WITHOUT_CLASSIFICATION	9.284909591040475E-7	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990469654959	WITHOUT_CLASSIFICATION	9.530345040704019E-7	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985186607263	WITHOUT_CLASSIFICATION	1.4813392737009515E-6	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987318799678	WITHOUT_CLASSIFICATION	1.268120032235316E-6	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963551115413	WITHOUT_CLASSIFICATION	3.644888458830236E-6	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994516247089	WITHOUT_CLASSIFICATION	5.483752911356306E-7	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991025200935	WITHOUT_CLASSIFICATION	8.97479906603214E-7	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994411590807	WITHOUT_CLASSIFICATION	5.588409192930161E-7	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999928631689472	WITHOUT_CLASSIFICATION	7.136831052836984E-6	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999870843720637	WITHOUT_CLASSIFICATION	1.2915627936234959E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999268681312566	WITHOUT_CLASSIFICATION	7.313186874328437E-5	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999998317461387	WITHOUT_CLASSIFICATION	1.6825386127370977E-7	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999976276855	WITHOUT_CLASSIFICATION	2.3723144452511712E-9	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999468639741854	WITHOUT_CLASSIFICATION	5.313602581459231E-5	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999998434958011	WITHOUT_CLASSIFICATION	1.5650419882077242E-7	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9914157309816793	WITHOUT_CLASSIFICATION	0.008584269018320628	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999268681312566	WITHOUT_CLASSIFICATION	7.313186874328437E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999268681312566	WITHOUT_CLASSIFICATION	7.313186874328437E-5	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999949212541522	WITHOUT_CLASSIFICATION	5.078745847736428E-6	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999984549461846	WITHOUT_CLASSIFICATION	1.5450538154263815E-6	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999996552089	WITHOUT_CLASSIFICATION	3.447910396596368E-10	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999929911957983	WITHOUT_CLASSIFICATION	7.008804201672791E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999993292297511	WITHOUT_CLASSIFICATION	6.707702490044315E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999929880183868	WITHOUT_CLASSIFICATION	7.011981613242982E-6	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999999349602996	WITHOUT_CLASSIFICATION	6.503970040765333E-7	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999579624890955	WITHOUT_CLASSIFICATION	4.203751090444845E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999999307916722	WITHOUT_CLASSIFICATION	6.92083278397788E-8	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999442496540681	WITHOUT_CLASSIFICATION	5.575034593182246E-5	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999982533145372	WITHOUT_CLASSIFICATION	1.7466854628856178E-6	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999824877696315	WITHOUT_CLASSIFICATION	1.7512230368465936E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999987554669688	WITHOUT_CLASSIFICATION	1.2445330312307883E-6	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999987554669688	WITHOUT_CLASSIFICATION	1.2445330312307883E-6	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999985989726277	WITHOUT_CLASSIFICATION	1.4010273723360567E-6	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999985989726277	WITHOUT_CLASSIFICATION	1.4010273723360567E-6	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989616080968969	WITHOUT_CLASSIFICATION	0.001038391903103046	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998986453105	WITHOUT_CLASSIFICATION	1.0135468958460203E-7	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999902087315727	WITHOUT_CLASSIFICATION	9.791268427229317E-6	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999831720151637	WITHOUT_CLASSIFICATION	1.6827984836299625E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999833656213705	WITHOUT_CLASSIFICATION	1.663437862952561E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9998132210034776	WITHOUT_CLASSIFICATION	1.8677899652245133E-4	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965980608315	WITHOUT_CLASSIFICATION	3.401939168357197E-6	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999407320064	WITHOUT_CLASSIFICATION	5.926799355923816E-8	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999975979431817	WITHOUT_CLASSIFICATION	2.40205681828226E-6	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999999829202906	WITHOUT_CLASSIFICATION	1.7079709464339155E-8	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999998944342751	WITHOUT_CLASSIFICATION	1.0556572494536717E-7	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998359470404888	WITHOUT_CLASSIFICATION	1.640529595112139E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999980428977417	WITHOUT_CLASSIFICATION	1.9571022583392166E-6	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999735797771112	WITHOUT_CLASSIFICATION	2.642022288871009E-5	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999995350820158	WITHOUT_CLASSIFICATION	4.6491798418220674E-7	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999839029658524	WITHOUT_CLASSIFICATION	1.6097034147679495E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.999977763086829	WITHOUT_CLASSIFICATION	2.223691317104909E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.999977763086829	WITHOUT_CLASSIFICATION	2.223691317104909E-5	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999933017051	WITHOUT_CLASSIFICATION	6.698294861192578E-9	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999964361060862	WITHOUT_CLASSIFICATION	3.5638939137531352E-6	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999965073874	WITHOUT_CLASSIFICATION	3.4926127466848984E-9	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999980682824672	WITHOUT_CLASSIFICATION	1.931717532717619E-6	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986669821881	WITHOUT_CLASSIFICATION	1.3330178119017194E-6	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975232066369	WITHOUT_CLASSIFICATION	2.4767933630476332E-6	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999998066046926	WITHOUT_CLASSIFICATION	1.9339530748624664E-7	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999738458007068	WITHOUT_CLASSIFICATION	2.6154199293114998E-5	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9955368123250221	WITHOUT_CLASSIFICATION	0.004463187674977992	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999802021972	WITHOUT_CLASSIFICATION	1.9797802743906943E-8	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999819531277	WITHOUT_CLASSIFICATION	1.8046872358209434E-8	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9982456334736909	WITHOUT_CLASSIFICATION	0.001754366526309114	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967068078409	WITHOUT_CLASSIFICATION	3.2931921590784815E-6	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999997308175684	WITHOUT_CLASSIFICATION	2.691824315692151E-7	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998568467299328	WITHOUT_CLASSIFICATION	1.4315327006725058E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.999998341314636	WITHOUT_CLASSIFICATION	1.6586853638821224E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999976349541386	WITHOUT_CLASSIFICATION	2.365045861427852E-6	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.999999582127905	WITHOUT_CLASSIFICATION	4.1787209506889025E-7	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999997974671383	WITHOUT_CLASSIFICATION	2.0253286174552712E-7	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999075978973	WITHOUT_CLASSIFICATION	9.240210275446483E-8	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999999865687	WITHOUT_CLASSIFICATION	1.3431217076203312E-11	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999996973556	WITHOUT_CLASSIFICATION	3.026442421803138E-10	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999999687269	WITHOUT_CLASSIFICATION	3.1273044410895796E-11	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999948541021713	WITHOUT_CLASSIFICATION	5.145897828716716E-6	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999998921844546	WITHOUT_CLASSIFICATION	1.0781554549781766E-7	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999998381090756	WITHOUT_CLASSIFICATION	1.6189092453666329E-7	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999999827087059	WITHOUT_CLASSIFICATION	1.729129412540651E-8	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999997722614695	WITHOUT_CLASSIFICATION	2.2773853036899602E-7	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999999999240005	WITHOUT_CLASSIFICATION	7.599949376971836E-10	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999914968875295	WITHOUT_CLASSIFICATION	8.503112470440225E-6	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999998613446	WITHOUT_CLASSIFICATION	1.386554511632776E-10	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.999999935835648	WITHOUT_CLASSIFICATION	6.416435204535751E-8	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.99999861915939	WITHOUT_CLASSIFICATION	1.380840609989388E-6	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999817417511767	WITHOUT_CLASSIFICATION	1.82582488232618E-5	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999999021674221	WITHOUT_CLASSIFICATION	9.78325779321211E-8	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999999751539543	WITHOUT_CLASSIFICATION	2.4846045748213465E-8	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999997123060944	WITHOUT_CLASSIFICATION	2.876939055841074E-7	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9998038884644019	WITHOUT_CLASSIFICATION	1.9611153559805387E-4	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999252074919	WITHOUT_CLASSIFICATION	7.479250808765927E-8	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9995368895413317	WITHOUT_CLASSIFICATION	4.6311045866824176E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999803421457	WITHOUT_CLASSIFICATION	1.9657854350632445E-8	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999603700082393	WITHOUT_CLASSIFICATION	3.9629991760607764E-5	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999999038316472	WITHOUT_CLASSIFICATION	9.61683529534339E-8	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999999424831058	WITHOUT_CLASSIFICATION	5.75168942114946E-8	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999975567168	WITHOUT_CLASSIFICATION	2.443283275627216E-9	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999679811153647	WITHOUT_CLASSIFICATION	3.20188846353725E-5	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999981720477665	WITHOUT_CLASSIFICATION	1.8279522334645122E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999619525522655	WITHOUT_CLASSIFICATION	3.804744773453371E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999808892769108	WITHOUT_CLASSIFICATION	1.9110723089230014E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999943515249459	WITHOUT_CLASSIFICATION	5.6484750542081115E-6	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999997771886241	WITHOUT_CLASSIFICATION	2.228113759124814E-6	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9995904614495447	WITHOUT_CLASSIFICATION	4.0953855045526913E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999968144639302	WITHOUT_CLASSIFICATION	3.185536069735142E-6	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999945762288981	WITHOUT_CLASSIFICATION	5.423771101885401E-6	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999876321970246	WITHOUT_CLASSIFICATION	1.2367802975435372E-5	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999991640587167	WITHOUT_CLASSIFICATION	8.359412832119007E-7	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9988654605341619	WITHOUT_CLASSIFICATION	0.0011345394658380046	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999986715440741	WITHOUT_CLASSIFICATION	1.3284559258390723E-6	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999996349429481	WITHOUT_CLASSIFICATION	3.6505705199356696E-7	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998749471306776	WITHOUT_CLASSIFICATION	1.2505286932239216E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999997637218399	WITHOUT_CLASSIFICATION	2.3627816024626463E-7	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999215456801	WITHOUT_CLASSIFICATION	7.845431996317212E-8	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999971909298	WITHOUT_CLASSIFICATION	2.8090700633821115E-9	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999999893173385	WITHOUT_CLASSIFICATION	1.0682661497846955E-7	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999998450877796	WITHOUT_CLASSIFICATION	1.5491222041979825E-7	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999999997685982	WITHOUT_CLASSIFICATION	2.3140178682069012E-9	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999910401242	WITHOUT_CLASSIFICATION	8.959875925003761E-9	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999895594172267	WITHOUT_CLASSIFICATION	1.0440582773247731E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999843465434092	WITHOUT_CLASSIFICATION	1.565345659077767E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999843465434092	WITHOUT_CLASSIFICATION	1.565345659077767E-5	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999989506528258	WITHOUT_CLASSIFICATION	1.0493471741427256E-6	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999966415328864	WITHOUT_CLASSIFICATION	3.358467113578215E-6	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999455658533752	WITHOUT_CLASSIFICATION	5.443414662469843E-5	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998944634664223	WITHOUT_CLASSIFICATION	1.0553653357768506E-4	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999980160698	WITHOUT_CLASSIFICATION	1.9839302676445945E-9	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999833955485653	WITHOUT_CLASSIFICATION	1.660445143474627E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.99999981694041	WITHOUT_CLASSIFICATION	1.8305959004356457E-7	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999978086689	WITHOUT_CLASSIFICATION	2.1913310455092655E-9	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999703276690258	WITHOUT_CLASSIFICATION	2.967233097411644E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999999790749884	WITHOUT_CLASSIFICATION	2.092501164990285E-8	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999965438737333	WITHOUT_CLASSIFICATION	3.4561262666431716E-6	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999995881821683	WITHOUT_CLASSIFICATION	4.118178317598036E-7	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999940744651458	WITHOUT_CLASSIFICATION	5.925534854279837E-6	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999779940367	WITHOUT_CLASSIFICATION	2.200596336741647E-8	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999331838120593	WITHOUT_CLASSIFICATION	6.681618794062108E-5	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9956650602977148	WITHOUT_CLASSIFICATION	0.004334939702285151	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999899733902934	WITHOUT_CLASSIFICATION	1.0026609706553811E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.999934678124267	WITHOUT_CLASSIFICATION	6.532187573310433E-5	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9825138116164598	WITHOUT_CLASSIFICATION	0.017486188383540206	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.999998360867623	WITHOUT_CLASSIFICATION	1.6391323770213568E-6	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999992201526086	WITHOUT_CLASSIFICATION	7.798473915476093E-7	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999994918110902	WITHOUT_CLASSIFICATION	5.081889098771193E-7	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999348685564322	WITHOUT_CLASSIFICATION	6.513144356771829E-5	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998407787129766	WITHOUT_CLASSIFICATION	1.59221287023386E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999997752736371	WITHOUT_CLASSIFICATION	2.2472636285476296E-7	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999727215293189	WITHOUT_CLASSIFICATION	2.7278470680995355E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999917212367735	WITHOUT_CLASSIFICATION	8.278763226454675E-6	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999979152084154	WITHOUT_CLASSIFICATION	2.0847915846472254E-6	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999985501571468	WITHOUT_CLASSIFICATION	1.4498428532272445E-6	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999996489854132	WITHOUT_CLASSIFICATION	3.510145868464437E-7	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999996889740047	WITHOUT_CLASSIFICATION	3.1102599529049935E-7	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999954486753315	WITHOUT_CLASSIFICATION	4.551324668436317E-6	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999996315998279	WITHOUT_CLASSIFICATION	3.684001722207754E-7	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999962933516882	WITHOUT_CLASSIFICATION	3.7066483119338003E-6	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999964287390156	WITHOUT_CLASSIFICATION	3.5712609843762524E-6	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999964287390156	WITHOUT_CLASSIFICATION	3.5712609843762524E-6	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.999994079514881	WITHOUT_CLASSIFICATION	5.920485119050518E-6	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999723963462911	WITHOUT_CLASSIFICATION	2.7603653708927938E-5	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999995964950646	WITHOUT_CLASSIFICATION	4.035049354489289E-7	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999946810614753	WITHOUT_CLASSIFICATION	5.318938524778333E-6	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999990778833123	WITHOUT_CLASSIFICATION	9.221166876410697E-7	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999967713005443	WITHOUT_CLASSIFICATION	3.228699455708739E-6	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999998234007899	WITHOUT_CLASSIFICATION	1.7659921014374824E-7	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999843561024	WITHOUT_CLASSIFICATION	1.5643897628840285E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999996333684749	WITHOUT_CLASSIFICATION	3.666315250803335E-7	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999484362102	WITHOUT_CLASSIFICATION	5.156378980948649E-7	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999597463394	WITHOUT_CLASSIFICATION	4.0253660656181894E-8	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999952008758252	WITHOUT_CLASSIFICATION	4.799124174826701E-6	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999875067299	WITHOUT_CLASSIFICATION	1.2493270004181439E-8	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999934994709947	WITHOUT_CLASSIFICATION	6.500529005287759E-6	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999979557891626	WITHOUT_CLASSIFICATION	2.0442108374397694E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999984376897786	WITHOUT_CLASSIFICATION	1.5623102213962532E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999984376897786	WITHOUT_CLASSIFICATION	1.5623102213962532E-6	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999992660241998	WITHOUT_CLASSIFICATION	7.339758002059265E-7	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999999530031893	WITHOUT_CLASSIFICATION	4.6996810736115676E-8	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999909352692151	WITHOUT_CLASSIFICATION	9.06473078492938E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999996661607337	WITHOUT_CLASSIFICATION	3.3383926624925714E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998359470404888	WITHOUT_CLASSIFICATION	1.640529595112139E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995402882042845	WITHOUT_CLASSIFICATION	4.5971179571540667E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999998961058798	WITHOUT_CLASSIFICATION	1.0389412021995735E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999998994704686	WITHOUT_CLASSIFICATION	1.0052953134851881E-7	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999998994704686	WITHOUT_CLASSIFICATION	1.0052953134851881E-7	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999979030314344	WITHOUT_CLASSIFICATION	2.096968565689949E-6	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999956036895	WITHOUT_CLASSIFICATION	4.3963105337231906E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999639465559911	WITHOUT_CLASSIFICATION	3.6053444008850156E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999969464943	WITHOUT_CLASSIFICATION	3.0535056499186182E-9	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999992527781139	WITHOUT_CLASSIFICATION	7.472218861955627E-7	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999796741412635	WITHOUT_CLASSIFICATION	2.032585873645606E-5	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999969219375305	WITHOUT_CLASSIFICATION	3.078062469418396E-6	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9991867860343014	WITHOUT_CLASSIFICATION	8.132139656986172E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999978455202704	WITHOUT_CLASSIFICATION	2.154479729599767E-6	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999996081212422	WITHOUT_CLASSIFICATION	3.918787578199018E-7	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999991505156183	WITHOUT_CLASSIFICATION	8.49484381661482E-7	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999466823210793	WITHOUT_CLASSIFICATION	5.331767892069252E-5	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999966457234832	WITHOUT_CLASSIFICATION	3.3542765167147244E-6	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999984527101569	WITHOUT_CLASSIFICATION	1.5472898431323592E-6	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999998271393615	WITHOUT_CLASSIFICATION	1.728606385723095E-7	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999958832153414	WITHOUT_CLASSIFICATION	4.116784658592674E-6	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999999963040484	WITHOUT_CLASSIFICATION	3.69595159246494E-8	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999967576062577	WITHOUT_CLASSIFICATION	3.24239374230247E-6	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9998908662976709	WITHOUT_CLASSIFICATION	1.0913370232910789E-4	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999586501022482	WITHOUT_CLASSIFICATION	4.1349897751920695E-5	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999997420275882	WITHOUT_CLASSIFICATION	2.579724117548017E-7	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999971174488538	WITHOUT_CLASSIFICATION	2.8825511462207793E-6	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999688806224292	WITHOUT_CLASSIFICATION	3.111937757083103E-5	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999997937529481	WITHOUT_CLASSIFICATION	2.0624705180542977E-7	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999958853891228	WITHOUT_CLASSIFICATION	4.114610877266481E-6	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999852454986221	WITHOUT_CLASSIFICATION	1.475450137786192E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999998847598751	WITHOUT_CLASSIFICATION	1.1524012490368735E-7	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999454084317372	WITHOUT_CLASSIFICATION	5.459156826281617E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999986290975453	WITHOUT_CLASSIFICATION	1.370902454649352E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999978460858696	WITHOUT_CLASSIFICATION	2.1539141304388E-6	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999629347801966	WITHOUT_CLASSIFICATION	3.706521980350967E-5	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.999999501842008	WITHOUT_CLASSIFICATION	4.981579919669697E-7	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999654129180304	WITHOUT_CLASSIFICATION	3.458708196956071E-5	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999649353151059	WITHOUT_CLASSIFICATION	3.506468489402277E-5	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999309415867202	WITHOUT_CLASSIFICATION	6.905841327975149E-5	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999986769366972	WITHOUT_CLASSIFICATION	1.3230633027633312E-6	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9999969295171105	WITHOUT_CLASSIFICATION	3.070482889356113E-6	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999989317591018	WITHOUT_CLASSIFICATION	1.06824089820199E-6	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999997197477696	WITHOUT_CLASSIFICATION	2.802522304451399E-7	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999986894525003	WITHOUT_CLASSIFICATION	1.3105474996841773E-6	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999929477124414	WITHOUT_CLASSIFICATION	7.052287558653661E-6	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999991220138774	WITHOUT_CLASSIFICATION	8.779861225702354E-7	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999476440404541	WITHOUT_CLASSIFICATION	5.235595954577095E-5	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999999825755253	WITHOUT_CLASSIFICATION	1.7424474694348662E-7	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999694077337	WITHOUT_CLASSIFICATION	3.0592266267242626E-8	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9987432908169491	WITHOUT_CLASSIFICATION	0.0012567091830508045	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999997197477696	WITHOUT_CLASSIFICATION	2.802522304451399E-7	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999986894525003	WITHOUT_CLASSIFICATION	1.3105474996841773E-6	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999988077978981	WITHOUT_CLASSIFICATION	1.1922021019272917E-6	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999210177865865	WITHOUT_CLASSIFICATION	7.89822134134809E-5	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999069846004	WITHOUT_CLASSIFICATION	9.301539954228053E-8	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9998502254815825	WITHOUT_CLASSIFICATION	1.497745184174291E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999977363347564	WITHOUT_CLASSIFICATION	2.263665243650375E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999999336160053	WITHOUT_CLASSIFICATION	6.638399466321185E-8	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9992878328185612	WITHOUT_CLASSIFICATION	7.121671814388095E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999988369747094	WITHOUT_CLASSIFICATION	1.1630252906027554E-6	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999290068362527	WITHOUT_CLASSIFICATION	7.099316374718778E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9995697035513523	IMPLEMENTATION	4.302964486476248E-4	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999998768030676	WITHOUT_CLASSIFICATION	1.2319693236653173E-7	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9995697035513523	IMPLEMENTATION	4.302964486476248E-4	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9998082428630357	WITHOUT_CLASSIFICATION	1.9175713696422439E-4	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999906188027163	WITHOUT_CLASSIFICATION	9.381197283686717E-6	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999800207813657	WITHOUT_CLASSIFICATION	1.9979218634220682E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999796744809	WITHOUT_CLASSIFICATION	2.0325519099955055E-7	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999934043596506	WITHOUT_CLASSIFICATION	6.59564034941226E-6	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999817603539738	WITHOUT_CLASSIFICATION	1.8239646026190364E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999817603539738	WITHOUT_CLASSIFICATION	1.8239646026190364E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999976258053074	WITHOUT_CLASSIFICATION	2.374194692616529E-6	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999993868326472	WITHOUT_CLASSIFICATION	6.131673527513453E-7	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999984711221005	WITHOUT_CLASSIFICATION	1.528877899497527E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999992671165197	WITHOUT_CLASSIFICATION	7.3288348030541374E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999896016555468	WITHOUT_CLASSIFICATION	1.0398344453181597E-5	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999997426628746	WITHOUT_CLASSIFICATION	2.5733712538674704E-7	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999964928496637	WITHOUT_CLASSIFICATION	3.50715033625569E-6	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999999108563389	WITHOUT_CLASSIFICATION	8.91436610663987E-8	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999992889117079	WITHOUT_CLASSIFICATION	7.110882921221263E-7	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.999965846949255	WITHOUT_CLASSIFICATION	3.4153050744931216E-5	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9999895044545127	WITHOUT_CLASSIFICATION	1.0495545487319293E-5	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.99947346968116	WITHOUT_CLASSIFICATION	5.2653031884004E-4	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999125947033802	WITHOUT_CLASSIFICATION	8.740529661978327E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9999994139490576	WITHOUT_CLASSIFICATION	5.860509425507631E-7	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999975714006734	WITHOUT_CLASSIFICATION	2.428599326624529E-6	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999483546999	WITHOUT_CLASSIFICATION	5.164530018838708E-8	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999989444915977	WITHOUT_CLASSIFICATION	1.055508402438149E-6	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999865299551937	WITHOUT_CLASSIFICATION	1.3470044806302984E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999029608064	WITHOUT_CLASSIFICATION	9.703919351786452E-8	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999580789554016	WITHOUT_CLASSIFICATION	4.192104459857444E-5	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999471026578581	WITHOUT_CLASSIFICATION	5.289734214174934E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999739277020563	WITHOUT_CLASSIFICATION	2.607229794368097E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999857257613999	WITHOUT_CLASSIFICATION	1.4274238600132613E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999860735432675	WITHOUT_CLASSIFICATION	1.3926456732601174E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999825354792247	WITHOUT_CLASSIFICATION	1.7464520775371104E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999929284474808	WITHOUT_CLASSIFICATION	7.071552519204079E-6	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9996985177712628	WITHOUT_CLASSIFICATION	3.0148222873711795E-4	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9993740861585028	WITHOUT_CLASSIFICATION	6.259138414973223E-4	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9969388690250806	WITHOUT_CLASSIFICATION	0.0030611309749195214	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9808675425212332	WITHOUT_CLASSIFICATION	0.01913245747876678	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.5654821204832088	IMPLEMENTATION	0.4345178795167912	WITHOUT_CLASSIFICATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999430114369785	WITHOUT_CLASSIFICATION	5.698856302157048E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999964928496637	WITHOUT_CLASSIFICATION	3.50715033625569E-6	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999997057819056	WITHOUT_CLASSIFICATION	2.942180945094606E-7	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999397679701656	WITHOUT_CLASSIFICATION	6.023202983438572E-5	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9886821846068846	IMPLEMENTATION	0.011317815393115466	WITHOUT_CLASSIFICATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999839624912331	WITHOUT_CLASSIFICATION	1.603750876684635E-5	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999975932726346	WITHOUT_CLASSIFICATION	2.40672736540546E-6	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999993947338732	WITHOUT_CLASSIFICATION	6.052661268573882E-7	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999992671165197	WITHOUT_CLASSIFICATION	7.3288348030541374E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999992671165197	WITHOUT_CLASSIFICATION	7.3288348030541374E-6	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999867039251689	WITHOUT_CLASSIFICATION	1.329607483098683E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999953988663356	WITHOUT_CLASSIFICATION	4.601133664396015E-6	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.999970916947041	WITHOUT_CLASSIFICATION	2.908305295896228E-5	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999889053696772	WITHOUT_CLASSIFICATION	1.1094630322740782E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999858279440804	WITHOUT_CLASSIFICATION	1.4172055919486851E-5	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999991593204901	WITHOUT_CLASSIFICATION	8.406795097948942E-7	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999999740288286	WITHOUT_CLASSIFICATION	2.597117152944448E-8	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9998371720665201	WITHOUT_CLASSIFICATION	1.6282793347980538E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999884143215093	WITHOUT_CLASSIFICATION	1.1585678490602232E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999997551120463	WITHOUT_CLASSIFICATION	2.44887953758202E-7	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999947184563558	WITHOUT_CLASSIFICATION	5.281543644220366E-6	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997268782610449	WITHOUT_CLASSIFICATION	2.731217389550838E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999961676972416	WITHOUT_CLASSIFICATION	3.83230275839656E-6	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999997551120463	WITHOUT_CLASSIFICATION	2.44887953758202E-7	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999988601072598	WITHOUT_CLASSIFICATION	1.139892740123733E-6	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9984925413111619	WITHOUT_CLASSIFICATION	0.0015074586888380165	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999705676115583	WITHOUT_CLASSIFICATION	2.9432388441709586E-5	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.99943800600671	IMPLEMENTATION	5.619939932900352E-4	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997268782610449	WITHOUT_CLASSIFICATION	2.731217389550838E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999834904122931	WITHOUT_CLASSIFICATION	1.6509587706859237E-5	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999940103109997	WITHOUT_CLASSIFICATION	5.989689000352804E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999961125693846	WITHOUT_CLASSIFICATION	3.887430615466293E-6	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.999999999281084	WITHOUT_CLASSIFICATION	7.189159613219792E-10	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999453781624595	WITHOUT_CLASSIFICATION	5.4621837540587866E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999997282602536	WITHOUT_CLASSIFICATION	2.717397463772681E-7	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999996461960822	WITHOUT_CLASSIFICATION	3.538039178945061E-7	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999986054415244	WITHOUT_CLASSIFICATION	1.394558475658189E-6	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999987479133492	WITHOUT_CLASSIFICATION	1.2520866507604945E-6	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999996138353553	WITHOUT_CLASSIFICATION	3.861646446286502E-7	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9996325824174468	WITHOUT_CLASSIFICATION	3.6741758255327177E-4	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999994593858674	WITHOUT_CLASSIFICATION	5.406141325848844E-7	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999997551120463	WITHOUT_CLASSIFICATION	2.44887953758202E-7	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999834904122931	WITHOUT_CLASSIFICATION	1.6509587706859237E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999961125693846	WITHOUT_CLASSIFICATION	3.887430615466293E-6	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999931954873585	WITHOUT_CLASSIFICATION	6.804512641508312E-6	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999999901570141	WITHOUT_CLASSIFICATION	9.842985882378492E-9	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.999999897636603	WITHOUT_CLASSIFICATION	1.023633969439355E-7	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997268782610449	WITHOUT_CLASSIFICATION	2.731217389550838E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999981779641512	WITHOUT_CLASSIFICATION	1.8220358486525854E-6	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999983849443013	WITHOUT_CLASSIFICATION	1.6150556987399485E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999808972354219	WITHOUT_CLASSIFICATION	1.910276457805577E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999978826819639	WITHOUT_CLASSIFICATION	2.1173180361607993E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999986054415244	WITHOUT_CLASSIFICATION	1.394558475658189E-6	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999988601072598	WITHOUT_CLASSIFICATION	1.139892740123733E-6	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999973111436569	WITHOUT_CLASSIFICATION	2.688856343216762E-6	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999986126017086	WITHOUT_CLASSIFICATION	1.3873982912885266E-6	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999992521956903	WITHOUT_CLASSIFICATION	7.478043097460364E-7	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999465173262889	WITHOUT_CLASSIFICATION	5.348267371108646E-5	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9936861086633323	WITHOUT_CLASSIFICATION	0.006313891336667771	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9899145559729119	WITHOUT_CLASSIFICATION	0.010085444027088055	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9999970236167182	WITHOUT_CLASSIFICATION	2.976383281779146E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999796744809	WITHOUT_CLASSIFICATION	2.0325519099955055E-7	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999564319454	WITHOUT_CLASSIFICATION	4.35680547211991E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956407204359	WITHOUT_CLASSIFICATION	4.3592795641231585E-6	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999999811514572	WITHOUT_CLASSIFICATION	1.8848542797412947E-7	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9982583005921399	WITHOUT_CLASSIFICATION	0.0017416994078600417	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999654067465695	WITHOUT_CLASSIFICATION	3.459325343043076E-5	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999661599524438	WITHOUT_CLASSIFICATION	3.3840047556346625E-5	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999836537931	WITHOUT_CLASSIFICATION	1.6346206907810184E-8	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999994390231024	WITHOUT_CLASSIFICATION	5.60976897473789E-7	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999980352322285	WITHOUT_CLASSIFICATION	1.9647677714703293E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999978826819639	WITHOUT_CLASSIFICATION	2.1173180361607993E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956407204359	WITHOUT_CLASSIFICATION	4.3592795641231585E-6	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999896658757939	WITHOUT_CLASSIFICATION	1.03341242060574E-5	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999986437659077	WITHOUT_CLASSIFICATION	1.3562340923164115E-6	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999897943432181	WITHOUT_CLASSIFICATION	1.0205656781798086E-5	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999984124595304	WITHOUT_CLASSIFICATION	1.5875404696502342E-6	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9998865924773419	WITHOUT_CLASSIFICATION	1.1340752265809971E-4	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999951035614616	WITHOUT_CLASSIFICATION	4.896438538396421E-6	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999948603076332	WITHOUT_CLASSIFICATION	5.1396923668231845E-6	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9994331388979939	WITHOUT_CLASSIFICATION	5.668611020060352E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999999998274477	WITHOUT_CLASSIFICATION	1.7255229730898468E-9	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9899292417791314	WITHOUT_CLASSIFICATION	0.01007075822086846	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999991111938507	WITHOUT_CLASSIFICATION	8.888061494125469E-7	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999997821258843	WITHOUT_CLASSIFICATION	2.1787411574903846E-7	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999544173426599	WITHOUT_CLASSIFICATION	4.558265733999047E-5	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999973667630748	WITHOUT_CLASSIFICATION	2.633236925054943E-6	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999144345926	WITHOUT_CLASSIFICATION	8.556540742069938E-8	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999997872299456	WITHOUT_CLASSIFICATION	2.1277005430971614E-7	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999897949063	WITHOUT_CLASSIFICATION	1.0205093665047511E-8	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999998928616492	WITHOUT_CLASSIFICATION	1.0713835079742006E-6	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999973581802959	WITHOUT_CLASSIFICATION	2.6418197040036682E-6	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999902610531092	WITHOUT_CLASSIFICATION	9.738946890912674E-6	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999989764393279	WITHOUT_CLASSIFICATION	1.0235606721305406E-6	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999998497942856	WITHOUT_CLASSIFICATION	1.502057143628461E-7	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999991531339121	WITHOUT_CLASSIFICATION	8.468660878632314E-7	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999833626841	WITHOUT_CLASSIFICATION	1.663731588660902E-8	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999993425073588	WITHOUT_CLASSIFICATION	6.57492641231624E-7	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.946910386373714	IMPLEMENTATION	0.05308961362628599	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9965578892784515	WITHOUT_CLASSIFICATION	0.003442110721548494	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999977721376925	WITHOUT_CLASSIFICATION	2.2278623075067434E-6	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999998575058403	WITHOUT_CLASSIFICATION	1.4249415967307427E-7	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.6640942729550557	WITHOUT_CLASSIFICATION	0.33590572704494426	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999096103049	WITHOUT_CLASSIFICATION	9.0389695046176E-8	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999984674881472	WITHOUT_CLASSIFICATION	1.5325118527395023E-6	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999983932428563	WITHOUT_CLASSIFICATION	1.6067571437357789E-6	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9997588820613292	WITHOUT_CLASSIFICATION	2.4111793867062913E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999995245563963	WITHOUT_CLASSIFICATION	4.754436036725314E-7	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.999987045903154	WITHOUT_CLASSIFICATION	1.2954096845959801E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.999999311795568	WITHOUT_CLASSIFICATION	6.882044320195387E-7	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999999355792689	WITHOUT_CLASSIFICATION	6.442073103721162E-8	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.999987045903154	WITHOUT_CLASSIFICATION	1.2954096845959801E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999995245563963	WITHOUT_CLASSIFICATION	4.754436036725314E-7	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.999999311795568	WITHOUT_CLASSIFICATION	6.882044320195387E-7	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999978601773438	WITHOUT_CLASSIFICATION	2.1398226561587237E-6	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999950523664547	WITHOUT_CLASSIFICATION	4.947633545278125E-6	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999989836449	WITHOUT_CLASSIFICATION	1.016355038136466E-9	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999998646105926	WITHOUT_CLASSIFICATION	1.3538940733543975E-7	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999998924083315	WITHOUT_CLASSIFICATION	1.0759166842582326E-7	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7002075087294035	IMPLEMENTATION	0.29979249127059654	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999705715862073	WITHOUT_CLASSIFICATION	2.9428413792819694E-5	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999150502330443	WITHOUT_CLASSIFICATION	8.494976695576325E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999301685591	WITHOUT_CLASSIFICATION	6.983144088821915E-8	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.99997882994638	WITHOUT_CLASSIFICATION	2.11700536200255E-5	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999996528200322	WITHOUT_CLASSIFICATION	3.471799678063822E-7	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999357072953159	WITHOUT_CLASSIFICATION	6.429270468410373E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999417410547463	WITHOUT_CLASSIFICATION	5.825894525359672E-5	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999993916410544	WITHOUT_CLASSIFICATION	6.083589455414569E-7	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999972552213042	WITHOUT_CLASSIFICATION	2.7447786958137978E-6	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999996888029514	WITHOUT_CLASSIFICATION	3.111970485397723E-7	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998604190242	WITHOUT_CLASSIFICATION	1.3958097580258113E-7	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999975246741206	WITHOUT_CLASSIFICATION	2.4753258794384092E-6	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.999999992279462	WITHOUT_CLASSIFICATION	7.72053797227669E-9	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999950326112064	WITHOUT_CLASSIFICATION	4.9673887935526555E-6	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9682799058378111	WITHOUT_CLASSIFICATION	0.03172009416218889	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999963781705731	WITHOUT_CLASSIFICATION	3.62182942690185E-6	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999984055038236	WITHOUT_CLASSIFICATION	1.5944961763099055E-6	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999994733892186	WITHOUT_CLASSIFICATION	5.266107813064935E-7	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999982699556004	WITHOUT_CLASSIFICATION	1.7300443995832251E-6	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999982699556004	WITHOUT_CLASSIFICATION	1.7300443995832251E-6	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999988145531244	WITHOUT_CLASSIFICATION	1.185446875543956E-6	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999988145531244	WITHOUT_CLASSIFICATION	1.185446875543956E-6	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9977539000341594	WITHOUT_CLASSIFICATION	0.0022460999658405513	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998604190242	WITHOUT_CLASSIFICATION	1.3958097580258113E-7	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999770363407138	WITHOUT_CLASSIFICATION	2.296365928617172E-5	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999651204594658	WITHOUT_CLASSIFICATION	3.487954053420527E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999653300205944	WITHOUT_CLASSIFICATION	3.4669979405630974E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999653300205944	WITHOUT_CLASSIFICATION	3.4669979405630974E-5	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999626859978742	WITHOUT_CLASSIFICATION	3.731400212571584E-5	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999682568307583	WITHOUT_CLASSIFICATION	3.174316924167085E-5	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999959595486	WITHOUT_CLASSIFICATION	4.0404513300760696E-9	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999379712132311	WITHOUT_CLASSIFICATION	6.202878676885399E-5	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.999999218258003	WITHOUT_CLASSIFICATION	7.817419970698208E-7	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999886504817247	WITHOUT_CLASSIFICATION	1.134951827527125E-5	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999992987238092	WITHOUT_CLASSIFICATION	7.012761907471859E-7	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999519069983253	WITHOUT_CLASSIFICATION	4.809300167484295E-5	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9999941215982788	WITHOUT_CLASSIFICATION	5.878401721269235E-6	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999856190506293	WITHOUT_CLASSIFICATION	1.438094937061478E-5	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999986731605375	WITHOUT_CLASSIFICATION	1.3268394625895537E-6	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999694697843148	WITHOUT_CLASSIFICATION	3.053021568514787E-5	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999973709094906	WITHOUT_CLASSIFICATION	2.629090509418198E-6	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999985158825789	WITHOUT_CLASSIFICATION	1.4841174211080336E-6	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.966414530994422	WITHOUT_CLASSIFICATION	0.03358546900557804	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999999833687987	WITHOUT_CLASSIFICATION	1.663120130075134E-7	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983631832572	WITHOUT_CLASSIFICATION	1.6368167428493823E-6	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999834637995669	WITHOUT_CLASSIFICATION	1.6536200433114678E-5	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999978258008287	WITHOUT_CLASSIFICATION	2.1741991711708202E-6	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999989074444305	WITHOUT_CLASSIFICATION	1.0925555694981856E-6	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9995291920095282	WITHOUT_CLASSIFICATION	4.708079904717846E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999996738672249	WITHOUT_CLASSIFICATION	3.2613277513194754E-7	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999919799841246	WITHOUT_CLASSIFICATION	8.020015875488701E-6	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999995651819629	WITHOUT_CLASSIFICATION	4.348180370740295E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999467014940651	WITHOUT_CLASSIFICATION	5.329850593496277E-5	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999999467104842	WITHOUT_CLASSIFICATION	5.328951581235071E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956407204359	WITHOUT_CLASSIFICATION	4.3592795641231585E-6	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999997821258843	WITHOUT_CLASSIFICATION	2.1787411574903846E-7	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999456574482548	WITHOUT_CLASSIFICATION	5.434255174523944E-5	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999992468049572	WITHOUT_CLASSIFICATION	7.531950428427757E-7	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982779772812	WITHOUT_CLASSIFICATION	1.7220227187068912E-6	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999812080840905	WITHOUT_CLASSIFICATION	1.8791915909445126E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999849495724776	WITHOUT_CLASSIFICATION	1.5050427522341501E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999849495724776	WITHOUT_CLASSIFICATION	1.5050427522341501E-5	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999998131310885	WITHOUT_CLASSIFICATION	1.8686891149539466E-7	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999996862942427	WITHOUT_CLASSIFICATION	3.1370575722890455E-7	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999968218787623	WITHOUT_CLASSIFICATION	3.1781212378381293E-6	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999968218787623	WITHOUT_CLASSIFICATION	3.1781212378381293E-6	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999999368766955	WITHOUT_CLASSIFICATION	6.312330448963922E-7	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999248960561742	WITHOUT_CLASSIFICATION	7.510394382581617E-5	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999944805809986	WITHOUT_CLASSIFICATION	5.519419001434433E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999993292297511	WITHOUT_CLASSIFICATION	6.707702490044315E-7	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999983215820973	WITHOUT_CLASSIFICATION	1.6784179026384454E-6	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999998943018058	WITHOUT_CLASSIFICATION	1.0569819423603248E-7	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.999998246539373	WITHOUT_CLASSIFICATION	1.753460626995499E-6	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999392834072117	WITHOUT_CLASSIFICATION	6.071659278830899E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999993588340028	WITHOUT_CLASSIFICATION	6.411659971756959E-7	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999993588340028	WITHOUT_CLASSIFICATION	6.411659971756959E-7	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999989580856047	WITHOUT_CLASSIFICATION	1.0419143952855206E-6	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999558027197	WITHOUT_CLASSIFICATION	4.4197280359883096E-8	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999558027197	WITHOUT_CLASSIFICATION	4.4197280359883096E-8	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999989260167662	WITHOUT_CLASSIFICATION	1.0739832337837688E-6	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999913365811	WITHOUT_CLASSIFICATION	8.663418875775181E-9	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.8337625365903719	WITHOUT_CLASSIFICATION	0.16623746340962803	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999999436146251	WITHOUT_CLASSIFICATION	5.6385374882877845E-8	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999999703648028	WITHOUT_CLASSIFICATION	2.9635197181040677E-8	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.999999828582932	WITHOUT_CLASSIFICATION	1.7141706795868161E-7	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.999917791899228	WITHOUT_CLASSIFICATION	8.220810077200532E-5	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999967181972457	WITHOUT_CLASSIFICATION	3.2818027542949023E-6	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999990669073978	WITHOUT_CLASSIFICATION	9.330926021953924E-6	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9991607645135377	WITHOUT_CLASSIFICATION	8.392354864623579E-4	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999958301455272	WITHOUT_CLASSIFICATION	4.169854472850428E-6	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999686800912441	WITHOUT_CLASSIFICATION	3.131990875590016E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999955070982438	WITHOUT_CLASSIFICATION	4.492901756185781E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999955070982438	WITHOUT_CLASSIFICATION	4.492901756185781E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999955070982438	WITHOUT_CLASSIFICATION	4.492901756185781E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999955070982438	WITHOUT_CLASSIFICATION	4.492901756185781E-6	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999999218916016	WITHOUT_CLASSIFICATION	7.810839840161085E-7	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998930013379305	WITHOUT_CLASSIFICATION	1.0699866206946348E-4	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999467868727082	WITHOUT_CLASSIFICATION	5.321312729172547E-5	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999960133077984	WITHOUT_CLASSIFICATION	3.9866922015956635E-6	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999996806725393	WITHOUT_CLASSIFICATION	3.193274607036967E-6	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999717441644413	WITHOUT_CLASSIFICATION	2.825583555862275E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998359470404888	WITHOUT_CLASSIFICATION	1.640529595112139E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999994034503094	WITHOUT_CLASSIFICATION	5.965496906046809E-7	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999987011705289	WITHOUT_CLASSIFICATION	1.2988294710941945E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998359470404888	WITHOUT_CLASSIFICATION	1.640529595112139E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998359470404888	WITHOUT_CLASSIFICATION	1.640529595112139E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999582230154724	WITHOUT_CLASSIFICATION	4.1776984527522226E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999998783614372	WITHOUT_CLASSIFICATION	1.216385627558715E-7	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999879301443065	WITHOUT_CLASSIFICATION	1.2069855693371573E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9988160374078033	WITHOUT_CLASSIFICATION	0.0011839625921966769	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999997495795261	WITHOUT_CLASSIFICATION	2.50420473911343E-7	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999999892248221	WITHOUT_CLASSIFICATION	1.0775177926127892E-8	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999981550577917	WITHOUT_CLASSIFICATION	1.8449422083622568E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9988160374078033	WITHOUT_CLASSIFICATION	0.0011839625921966769	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999999938103017	WITHOUT_CLASSIFICATION	6.189698397576037E-9	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999927347673945	WITHOUT_CLASSIFICATION	7.265232605507141E-6	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999996585930728	WITHOUT_CLASSIFICATION	3.4140692721330043E-7	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999992207094592	WITHOUT_CLASSIFICATION	7.792905407602116E-7	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999999244706916	WITHOUT_CLASSIFICATION	7.552930832384038E-8	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999996758931129	WITHOUT_CLASSIFICATION	3.241068871858476E-7	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999997865515454	WITHOUT_CLASSIFICATION	2.134484545689325E-7	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999428318066527	WITHOUT_CLASSIFICATION	5.716819334724369E-5	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998953949495	WITHOUT_CLASSIFICATION	1.0460505055279714E-7	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999995167616812	WITHOUT_CLASSIFICATION	4.832383188414199E-7	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999834739758	WITHOUT_CLASSIFICATION	1.652602416919951E-8	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999854129138642	WITHOUT_CLASSIFICATION	1.458708613590118E-5	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999970438257801	WITHOUT_CLASSIFICATION	2.9561742199097324E-6	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9994084368720146	WITHOUT_CLASSIFICATION	5.91563127985411E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998252570137609	WITHOUT_CLASSIFICATION	1.7474298623897962E-4	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999999755046483	WITHOUT_CLASSIFICATION	2.4495351627227422E-8	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999564715125	WITHOUT_CLASSIFICATION	4.3528487425753856E-8	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999998376526886	WITHOUT_CLASSIFICATION	1.6234731140677767E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999989073556347	WITHOUT_CLASSIFICATION	1.0926443652946894E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999998376526886	WITHOUT_CLASSIFICATION	1.6234731140677767E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999994329297807	WITHOUT_CLASSIFICATION	5.670702193878086E-7	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999945660742	WITHOUT_CLASSIFICATION	5.433925696062695E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999996480896273	WITHOUT_CLASSIFICATION	3.519103727234624E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999994519260729	WITHOUT_CLASSIFICATION	5.480739271220662E-7	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999564715125	WITHOUT_CLASSIFICATION	4.3528487425753856E-8	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999989073556347	WITHOUT_CLASSIFICATION	1.0926443652946894E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999994329297807	WITHOUT_CLASSIFICATION	5.670702193878086E-7	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999918888962834	WITHOUT_CLASSIFICATION	8.11110371649107E-6	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999926274203156	WITHOUT_CLASSIFICATION	7.372579684474374E-6	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9999984387902474	WITHOUT_CLASSIFICATION	1.5612097526145334E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9999972222150865	WITHOUT_CLASSIFICATION	2.77778491360414E-6	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999162349677548	WITHOUT_CLASSIFICATION	8.376503224518586E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.999997098629054	WITHOUT_CLASSIFICATION	2.901370945950067E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983631832572	WITHOUT_CLASSIFICATION	1.6368167428493823E-6	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999945660742	WITHOUT_CLASSIFICATION	5.433925696062695E-9	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999998629724	WITHOUT_CLASSIFICATION	1.3702749277785962E-10	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999995142103448	WITHOUT_CLASSIFICATION	4.857896550828764E-7	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999998113866302	WITHOUT_CLASSIFICATION	1.8861336980781507E-7	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983631832572	WITHOUT_CLASSIFICATION	1.6368167428493823E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956407204359	WITHOUT_CLASSIFICATION	4.3592795641231585E-6	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999997548402701	WITHOUT_CLASSIFICATION	2.4515972988651574E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983631832572	WITHOUT_CLASSIFICATION	1.6368167428493823E-6	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999245075362	WITHOUT_CLASSIFICATION	7.549246383983968E-8	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999991186023623	WITHOUT_CLASSIFICATION	8.813976376414324E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956407204359	WITHOUT_CLASSIFICATION	4.3592795641231585E-6	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999944233730045	WITHOUT_CLASSIFICATION	5.576626995494633E-5	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999135358560158	WITHOUT_CLASSIFICATION	8.646414398416688E-5	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999707017707005	WITHOUT_CLASSIFICATION	2.92982292994397E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999969276113476	WITHOUT_CLASSIFICATION	3.0723886523410395E-6	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9991236570776886	WITHOUT_CLASSIFICATION	8.763429223113127E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999617100867667	WITHOUT_CLASSIFICATION	3.8289913233292094E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999971050159958	WITHOUT_CLASSIFICATION	2.8949840042181455E-6	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999995288586329	WITHOUT_CLASSIFICATION	4.7114136710824833E-7	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999843465434092	WITHOUT_CLASSIFICATION	1.565345659077767E-5	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999487137924	WITHOUT_CLASSIFICATION	5.128620764592601E-8	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.8337625365903719	WITHOUT_CLASSIFICATION	0.16623746340962803	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999981307120611	WITHOUT_CLASSIFICATION	1.8692879389233859E-6	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999842802441848	WITHOUT_CLASSIFICATION	1.5719755815202166E-5	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999981110878803	WITHOUT_CLASSIFICATION	1.888912119817845E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999955260955159	WITHOUT_CLASSIFICATION	4.473904484175531E-6	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.999999904580669	WITHOUT_CLASSIFICATION	9.541933094907946E-8	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999537626841	WITHOUT_CLASSIFICATION	4.6237315728175455E-8	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999998407453541	WITHOUT_CLASSIFICATION	1.5925464591908812E-7	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.999996466748853	WITHOUT_CLASSIFICATION	3.5332511471182746E-6	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999999786228489	WITHOUT_CLASSIFICATION	2.1377151100262283E-7	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999564396485097	WITHOUT_CLASSIFICATION	4.35603514902852E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.834548883114095	WITHOUT_CLASSIFICATION	0.165451116885905	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999946834602	WITHOUT_CLASSIFICATION	5.316539749081628E-9	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999935580259	WITHOUT_CLASSIFICATION	6.441974075489734E-9	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999955763980471	WITHOUT_CLASSIFICATION	4.423601952867254E-6	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999986967994485	WITHOUT_CLASSIFICATION	1.3032005514891351E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998865004650688	WITHOUT_CLASSIFICATION	1.1349953493114629E-4	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999999606397342	WITHOUT_CLASSIFICATION	3.936026588970465E-8	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999994920169311	WITHOUT_CLASSIFICATION	5.079830689624062E-7	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999993088463882	WITHOUT_CLASSIFICATION	6.911536117739017E-7	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999973942290324	WITHOUT_CLASSIFICATION	2.605770967494642E-6	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999882241404016	WITHOUT_CLASSIFICATION	1.1775859598451916E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9895320270357616	WITHOUT_CLASSIFICATION	0.010467972964238442	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999968625012885	WITHOUT_CLASSIFICATION	3.1374987115028937E-6	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999733735596924	WITHOUT_CLASSIFICATION	2.66264403076055E-5	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9999629209585494	WITHOUT_CLASSIFICATION	3.707904145060303E-5	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999987372441871	WITHOUT_CLASSIFICATION	1.2627558129723437E-6	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999999863925667	WITHOUT_CLASSIFICATION	1.3607433353823888E-8	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.782502311900364	WITHOUT_CLASSIFICATION	0.21749768809963593	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999877900707609	WITHOUT_CLASSIFICATION	1.2209929239168757E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956407204359	WITHOUT_CLASSIFICATION	4.3592795641231585E-6	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999996949823369	WITHOUT_CLASSIFICATION	3.0501766310600893E-7	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999758106633286	WITHOUT_CLASSIFICATION	2.41893366714185E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999758106633286	WITHOUT_CLASSIFICATION	2.41893366714185E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999934138634148	WITHOUT_CLASSIFICATION	6.5861365852506705E-6	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999617100867667	WITHOUT_CLASSIFICATION	3.8289913233292094E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999903298757918	WITHOUT_CLASSIFICATION	9.67012420812545E-6	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999984491298908	WITHOUT_CLASSIFICATION	1.5508701091547262E-6	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999997187646207	WITHOUT_CLASSIFICATION	2.8123537930225017E-7	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999687556583157	WITHOUT_CLASSIFICATION	3.124434168428217E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.999995569788525	WITHOUT_CLASSIFICATION	4.430211475062155E-6	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999530950534209	WITHOUT_CLASSIFICATION	4.690494657903386E-5	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999378117278	WITHOUT_CLASSIFICATION	6.218827216160092E-8	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.999999937962431	WITHOUT_CLASSIFICATION	6.203756890386852E-8	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999946058454529	WITHOUT_CLASSIFICATION	5.394154547134223E-6	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.999999232992233	WITHOUT_CLASSIFICATION	7.670077670475839E-7	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9980719846946224	WITHOUT_CLASSIFICATION	0.0019280153053775808	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999995429284916	WITHOUT_CLASSIFICATION	4.5707150839151775E-6	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999944962907	WITHOUT_CLASSIFICATION	5.5037092355472455E-9	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999999835484	WITHOUT_CLASSIFICATION	1.6451621323261968E-11	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999994721733902	WITHOUT_CLASSIFICATION	5.278266097260232E-7	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999998892213697	WITHOUT_CLASSIFICATION	1.1077863035425529E-7	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999549408141	WITHOUT_CLASSIFICATION	4.5059185855192174E-8	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999998272071512	WITHOUT_CLASSIFICATION	1.7279284878195314E-7	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999920918568495	WITHOUT_CLASSIFICATION	7.90814315052052E-6	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9997582234459659	WITHOUT_CLASSIFICATION	2.4177655403410874E-4	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999660456972833	WITHOUT_CLASSIFICATION	3.395430271679309E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999949393279397	WITHOUT_CLASSIFICATION	5.060672060329262E-6	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.782502311900364	WITHOUT_CLASSIFICATION	0.21749768809963593	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999998072162706	WITHOUT_CLASSIFICATION	1.9278372948153972E-7	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.998576025465223	WITHOUT_CLASSIFICATION	0.0014239745347769993	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999874109134	WITHOUT_CLASSIFICATION	1.2589086606959159E-8	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999942222451744	WITHOUT_CLASSIFICATION	5.777754825603448E-6	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999832374058396	WITHOUT_CLASSIFICATION	1.676259416048797E-5	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999666520655234	WITHOUT_CLASSIFICATION	3.334793447655616E-5	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.999987117980606	WITHOUT_CLASSIFICATION	1.2882019394032205E-5	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999997256924487	WITHOUT_CLASSIFICATION	2.7430755131002796E-7	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999965341451698	WITHOUT_CLASSIFICATION	3.4658548301932997E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999972064221455	WITHOUT_CLASSIFICATION	2.793577854470873E-6	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999999152167008	WITHOUT_CLASSIFICATION	8.478329921760844E-8	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999996113759153	WITHOUT_CLASSIFICATION	3.8862408466565E-7	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999990132944122	WITHOUT_CLASSIFICATION	9.867055877631458E-7	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999983258633384	WITHOUT_CLASSIFICATION	1.6741366617092498E-6	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999999987515637	WITHOUT_CLASSIFICATION	1.2484363003210125E-8	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999999987515637	WITHOUT_CLASSIFICATION	1.2484363003210125E-8	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999999284889344	WITHOUT_CLASSIFICATION	7.151106558513448E-8	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999992089194424	WITHOUT_CLASSIFICATION	7.910805575787961E-7	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999960451771	WITHOUT_CLASSIFICATION	3.954822951257038E-9	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999960451771	WITHOUT_CLASSIFICATION	3.954822951257038E-9	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999998573008607	WITHOUT_CLASSIFICATION	1.4269913934924585E-7	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999288908586673	WITHOUT_CLASSIFICATION	7.110914133263613E-5	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999976972711512	WITHOUT_CLASSIFICATION	2.302728848749776E-6	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999981622852616	WITHOUT_CLASSIFICATION	1.837714738351432E-6	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999986954842197	WITHOUT_CLASSIFICATION	1.304515780211325E-6	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999987064960978	WITHOUT_CLASSIFICATION	1.2935039022671092E-6	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999994055133	WITHOUT_CLASSIFICATION	5.944867144966314E-10	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999994055133	WITHOUT_CLASSIFICATION	5.944867144966314E-10	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999992462623426	WITHOUT_CLASSIFICATION	7.537376573975633E-7	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999953163643338	WITHOUT_CLASSIFICATION	4.683635666255487E-6	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999989953270443	WITHOUT_CLASSIFICATION	1.0046729556589803E-6	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999997282238703	WITHOUT_CLASSIFICATION	2.717761297570839E-7	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999997282238703	WITHOUT_CLASSIFICATION	2.717761297570839E-7	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999998271170929	WITHOUT_CLASSIFICATION	1.7288290711622966E-7	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999987557667419	WITHOUT_CLASSIFICATION	1.2442332580715023E-6	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999979332948494	WITHOUT_CLASSIFICATION	2.0667051505572747E-6	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999995973366625	WITHOUT_CLASSIFICATION	4.0266333750894225E-7	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999991237536897	WITHOUT_CLASSIFICATION	8.762463102799888E-7	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999996863357999	WITHOUT_CLASSIFICATION	3.1366419999031503E-7	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999997466070691	WITHOUT_CLASSIFICATION	2.5339293091836954E-7	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999989664516186	WITHOUT_CLASSIFICATION	1.0335483814031928E-6	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999998537629147	WITHOUT_CLASSIFICATION	1.462370853770991E-7	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999998823298853	WITHOUT_CLASSIFICATION	1.176701146745358E-7	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.99957169554358	WITHOUT_CLASSIFICATION	4.283044564200506E-4	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999795279432718	WITHOUT_CLASSIFICATION	2.0472056728209048E-5	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9675388526048295	WITHOUT_CLASSIFICATION	0.03246114739517056	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999991729041815	WITHOUT_CLASSIFICATION	8.270958186315015E-7	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999854321394864	WITHOUT_CLASSIFICATION	1.4567860513434036E-5	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999984713269153	WITHOUT_CLASSIFICATION	1.5286730846170462E-6	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999994078857862	WITHOUT_CLASSIFICATION	5.921142138252786E-7	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999894652113049	WITHOUT_CLASSIFICATION	1.0534788694970789E-5	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999757698043938	WITHOUT_CLASSIFICATION	2.4230195606200674E-5	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999993127227233	WITHOUT_CLASSIFICATION	6.8727727668996855E-6	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999991376225971	WITHOUT_CLASSIFICATION	8.62377403006811E-7	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999961890422123	WITHOUT_CLASSIFICATION	3.8109577877821946E-6	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999862800658265	WITHOUT_CLASSIFICATION	1.3719934173605283E-5	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999991740154187	WITHOUT_CLASSIFICATION	8.259845813778425E-7	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999898951864872	WITHOUT_CLASSIFICATION	1.0104813512884019E-5	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999724681758987	WITHOUT_CLASSIFICATION	2.7531824101351983E-5	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999998820727468	WITHOUT_CLASSIFICATION	1.1792725311685E-7	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999899027915238	WITHOUT_CLASSIFICATION	1.009720847628322E-5	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999210271547	WITHOUT_CLASSIFICATION	7.897284520424853E-8	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999993761402377	WITHOUT_CLASSIFICATION	6.238597624307078E-7	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999731953545259	WITHOUT_CLASSIFICATION	2.680464547410394E-5	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999895878758	WITHOUT_CLASSIFICATION	1.0412124060643816E-8	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999992446401452	WITHOUT_CLASSIFICATION	7.553598547971018E-7	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999940099734159	WITHOUT_CLASSIFICATION	5.9900265841771384E-6	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999998565850267	WITHOUT_CLASSIFICATION	1.4341497325800054E-7	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999819376765773	WITHOUT_CLASSIFICATION	1.8062323422713393E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999935616021195	WITHOUT_CLASSIFICATION	6.43839788052808E-6	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999999992303524	WITHOUT_CLASSIFICATION	7.696476081520738E-9	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9997985636881922	WITHOUT_CLASSIFICATION	2.0143631180778623E-4	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999758828714	WITHOUT_CLASSIFICATION	2.4117128694011606E-8	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999050144652964	WITHOUT_CLASSIFICATION	9.498553470349092E-5	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.99999864975967	WITHOUT_CLASSIFICATION	1.3502403299763006E-6	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999946972497038	WITHOUT_CLASSIFICATION	5.302750296161049E-6	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999545404448145	WITHOUT_CLASSIFICATION	4.5459555185456195E-5	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999996864106788	WITHOUT_CLASSIFICATION	3.1358932119771646E-7	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999988273665699	WITHOUT_CLASSIFICATION	1.1726334301408585E-6	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999994880659359	WITHOUT_CLASSIFICATION	5.119340641603721E-7	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999998760844149	WITHOUT_CLASSIFICATION	1.2391558509500868E-7	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999830419201822	WITHOUT_CLASSIFICATION	1.695807981780967E-5	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999991977335143	WITHOUT_CLASSIFICATION	8.022664856827594E-7	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999993675651812	WITHOUT_CLASSIFICATION	6.324348188226132E-7	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999354634386	WITHOUT_CLASSIFICATION	6.453656141869428E-8	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999982096041762	WITHOUT_CLASSIFICATION	1.7903958238362913E-6	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999999998336	WITHOUT_CLASSIFICATION	1.6633992502195238E-13	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999990815081239	WITHOUT_CLASSIFICATION	9.184918761437489E-7	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999999426762357	WITHOUT_CLASSIFICATION	5.732376433947945E-8	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999994784080345	WITHOUT_CLASSIFICATION	5.215919654759028E-7	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999996760799421	WITHOUT_CLASSIFICATION	3.2392005789063905E-7	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999710743791748	WITHOUT_CLASSIFICATION	2.8925620825147958E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999998987982149	WITHOUT_CLASSIFICATION	1.0120178504512902E-7	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999794851578682	WITHOUT_CLASSIFICATION	2.0514842131775545E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999794851578682	WITHOUT_CLASSIFICATION	2.0514842131775545E-5	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999990740753	WITHOUT_CLASSIFICATION	9.259247577341082E-10	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999755850127029	WITHOUT_CLASSIFICATION	2.4414987297182977E-5	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999873816536	WITHOUT_CLASSIFICATION	1.2618346275032268E-8	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999921685853	WITHOUT_CLASSIFICATION	7.831414706808822E-9	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999876435041	WITHOUT_CLASSIFICATION	1.2356495922336255E-8	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999982277366625	WITHOUT_CLASSIFICATION	1.7722633374730728E-6	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999900199255	WITHOUT_CLASSIFICATION	9.980074529665095E-9	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999999932776	WITHOUT_CLASSIFICATION	6.72241389230901E-12	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999999714306462	WITHOUT_CLASSIFICATION	2.8569353718286486E-8	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999984531155915	WITHOUT_CLASSIFICATION	1.5468844083926535E-6	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999976357961662	WITHOUT_CLASSIFICATION	2.364203833861537E-6	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999497425857433	WITHOUT_CLASSIFICATION	5.025741425669405E-5	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999762869572	WITHOUT_CLASSIFICATION	2.3713042833043085E-8	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999985312068116	WITHOUT_CLASSIFICATION	1.468793188430564E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999978012389614	WITHOUT_CLASSIFICATION	2.1987610386162037E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999978012389614	WITHOUT_CLASSIFICATION	2.1987610386162037E-6	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999909128002	WITHOUT_CLASSIFICATION	9.08719972542197E-9	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999559245341417	WITHOUT_CLASSIFICATION	4.407546585818657E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999984094960976	WITHOUT_CLASSIFICATION	1.5905039022997622E-6	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.999999430295317	WITHOUT_CLASSIFICATION	5.69704683004945E-7	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997333829406	WITHOUT_CLASSIFICATION	2.666170594597813E-7	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993554925016	WITHOUT_CLASSIFICATION	6.4450749841161E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999761939787413	WITHOUT_CLASSIFICATION	2.3806021258790215E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.999998197585265	WITHOUT_CLASSIFICATION	1.8024147350218004E-6	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999970483800673	WITHOUT_CLASSIFICATION	2.9516199327989987E-6	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999997258836644	WITHOUT_CLASSIFICATION	2.74116335618378E-7	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.999997664166288	WITHOUT_CLASSIFICATION	2.335833712073802E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999959980974	WITHOUT_CLASSIFICATION	4.001902604769355E-9	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999996725277	WITHOUT_CLASSIFICATION	3.274721912400276E-10	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999989867535	WITHOUT_CLASSIFICATION	1.0132463971883758E-9	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999999496468488	WITHOUT_CLASSIFICATION	5.0353151116446946E-8	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999448641173	WITHOUT_CLASSIFICATION	5.513588285504535E-8	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999998932850851	WITHOUT_CLASSIFICATION	1.0671491493442346E-7	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999999882113298	WITHOUT_CLASSIFICATION	1.178867016036623E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999765516819	WITHOUT_CLASSIFICATION	2.34483181479502E-8	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999470899886	WITHOUT_CLASSIFICATION	5.291001136652136E-8	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999923727324914	WITHOUT_CLASSIFICATION	7.627267508662014E-6	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999998931174	WITHOUT_CLASSIFICATION	1.0688262824965941E-10	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999997761961495	WITHOUT_CLASSIFICATION	2.2380385039350008E-7	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.999998935676982	WITHOUT_CLASSIFICATION	1.0643230180016612E-6	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999981110343815	WITHOUT_CLASSIFICATION	1.8889656185035383E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999999928477962	WITHOUT_CLASSIFICATION	7.1522038603437725E-9	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999293447988	WITHOUT_CLASSIFICATION	7.065520121425867E-8	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999998903526769	WITHOUT_CLASSIFICATION	1.0964732318021005E-7	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999988732126703	WITHOUT_CLASSIFICATION	1.126787329696851E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999951790676	WITHOUT_CLASSIFICATION	4.820932435363857E-9	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999980390652539	WITHOUT_CLASSIFICATION	1.9609347460972756E-6	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999999064586997	WITHOUT_CLASSIFICATION	9.354130025197517E-8	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.99999999998899	WITHOUT_CLASSIFICATION	1.1009898665913088E-11	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999997581523902	WITHOUT_CLASSIFICATION	2.4184760983503067E-7	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9992445304818016	WITHOUT_CLASSIFICATION	7.554695181984695E-4	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998250484837	WITHOUT_CLASSIFICATION	1.7495151618507594E-7	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999617130769	WITHOUT_CLASSIFICATION	3.8286923040007354E-8	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999295099842	WITHOUT_CLASSIFICATION	7.049001579111315E-8	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999993935379665	WITHOUT_CLASSIFICATION	6.064620334073414E-7	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999991517172587	WITHOUT_CLASSIFICATION	8.482827412642101E-7	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999312753171596	WITHOUT_CLASSIFICATION	6.872468284032775E-5	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999312753171596	WITHOUT_CLASSIFICATION	6.872468284032775E-5	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999986099721	WITHOUT_CLASSIFICATION	1.39002793619126E-9	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999997538263826	WITHOUT_CLASSIFICATION	2.461736174907446E-7	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999290825571223	WITHOUT_CLASSIFICATION	7.091744287770766E-5	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999944443745415	WITHOUT_CLASSIFICATION	5.5556254584366485E-6	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999978841907156	WITHOUT_CLASSIFICATION	2.1158092844342886E-6	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999965449730849	WITHOUT_CLASSIFICATION	3.4550269151791643E-6	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999999010697558	WITHOUT_CLASSIFICATION	9.893024425640892E-8	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999997714499139	WITHOUT_CLASSIFICATION	2.2855008610461364E-7	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.999919724762238	WITHOUT_CLASSIFICATION	8.027523776204342E-5	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990877092402	WITHOUT_CLASSIFICATION	9.122907598081399E-7	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996865252293	WITHOUT_CLASSIFICATION	3.134747707414285E-7	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999268681312566	WITHOUT_CLASSIFICATION	7.313186874328437E-5	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999999999353948	WITHOUT_CLASSIFICATION	6.460518883835034E-10	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999301922576	WITHOUT_CLASSIFICATION	6.980774234563316E-8	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999996395760071	WITHOUT_CLASSIFICATION	3.6042399279067193E-7	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999999988193878	WITHOUT_CLASSIFICATION	1.18061222359803E-9	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999942605121251	WITHOUT_CLASSIFICATION	5.7394878748442425E-6	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999740987419	WITHOUT_CLASSIFICATION	2.590125815522748E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999689704011736	WITHOUT_CLASSIFICATION	3.1029598826340196E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999999986825242	WITHOUT_CLASSIFICATION	1.3174758061317452E-8	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999998380678783	WITHOUT_CLASSIFICATION	1.6193212176110017E-7	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.999994701013006	WITHOUT_CLASSIFICATION	5.298986993950669E-6	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999998616240602	WITHOUT_CLASSIFICATION	1.383759397890636E-6	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999931978546222	WITHOUT_CLASSIFICATION	6.802145377933834E-6	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999989528070973	WITHOUT_CLASSIFICATION	1.0471929027009934E-6	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999940787747919	WITHOUT_CLASSIFICATION	5.921225208218292E-6	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.999999828427767	WITHOUT_CLASSIFICATION	1.715722329499419E-7	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999028455938	WITHOUT_CLASSIFICATION	9.715440623871092E-8	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999978535314	WITHOUT_CLASSIFICATION	2.146468611334161E-9	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999971512158985	WITHOUT_CLASSIFICATION	2.8487841014084346E-6	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999928555382505	WITHOUT_CLASSIFICATION	7.1444617495615346E-6	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999999895239953	WITHOUT_CLASSIFICATION	1.0476004766112404E-8	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999988095834975	WITHOUT_CLASSIFICATION	1.1904165025761222E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999993679167	WITHOUT_CLASSIFICATION	6.32083323835314E-10	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999944900866	WITHOUT_CLASSIFICATION	5.50991329734322E-9	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9995266574652061	WITHOUT_CLASSIFICATION	4.7334253479387896E-4	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999999313324	WITHOUT_CLASSIFICATION	6.86676569555508E-11	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999996942906317	WITHOUT_CLASSIFICATION	3.0570936826068147E-7	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999903500411467	WITHOUT_CLASSIFICATION	9.649958853380313E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999992648781136	WITHOUT_CLASSIFICATION	7.35121886338786E-7	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.999999613831205	WITHOUT_CLASSIFICATION	3.861687949575933E-7	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999997860102461	WITHOUT_CLASSIFICATION	2.1398975403409996E-7	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999029755379	WITHOUT_CLASSIFICATION	9.702446213450097E-8	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999827056785	WITHOUT_CLASSIFICATION	1.7294321537362644E-8	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999990960517282	WITHOUT_CLASSIFICATION	9.039482717810218E-7	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999988128032952	WITHOUT_CLASSIFICATION	1.1871967048035502E-6	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999998463167639	WITHOUT_CLASSIFICATION	1.5368323613852022E-7	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999762869572	WITHOUT_CLASSIFICATION	2.3713042833043085E-8	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999860156303	WITHOUT_CLASSIFICATION	1.3984369714500848E-8	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999999708126	WITHOUT_CLASSIFICATION	2.918746279931824E-11	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999972111003349	WITHOUT_CLASSIFICATION	2.7888996651651922E-6	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999994548711703	WITHOUT_CLASSIFICATION	5.451288296582788E-7	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999995010835	WITHOUT_CLASSIFICATION	4.989164304217525E-10	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999791712089	WITHOUT_CLASSIFICATION	2.0828791091869723E-8	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9982638169481517	WITHOUT_CLASSIFICATION	0.0017361830518483974	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999996984604591	WITHOUT_CLASSIFICATION	3.0153954092297454E-7	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999998944342751	WITHOUT_CLASSIFICATION	1.0556572494536717E-7	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999605390174912	WITHOUT_CLASSIFICATION	3.946098250883253E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999964314489	WITHOUT_CLASSIFICATION	3.5685510142925353E-9	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999993691816716	WITHOUT_CLASSIFICATION	6.30818328343736E-7	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999663120605	WITHOUT_CLASSIFICATION	3.368793960957472E-8	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999974490376	WITHOUT_CLASSIFICATION	2.5509625298388453E-9	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998594824517	WITHOUT_CLASSIFICATION	1.405175483452856E-7	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999998153261773	WITHOUT_CLASSIFICATION	1.8467382269097507E-6	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999979412071732	WITHOUT_CLASSIFICATION	2.058792826793694E-6	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999997807262	WITHOUT_CLASSIFICATION	2.1927374936201313E-10	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999998870492341	WITHOUT_CLASSIFICATION	1.129507658437936E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998594824517	WITHOUT_CLASSIFICATION	1.405175483452856E-7	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9974092495273342	WITHOUT_CLASSIFICATION	0.0025907504726657257	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999998365143292	WITHOUT_CLASSIFICATION	1.634856707644252E-7	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999944363019	WITHOUT_CLASSIFICATION	5.563698013823042E-9	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999997673408346	WITHOUT_CLASSIFICATION	2.3265916535343853E-7	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999925311849139	WITHOUT_CLASSIFICATION	7.468815086160337E-6	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998799815527	WITHOUT_CLASSIFICATION	1.2001844731354387E-7	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999987044638	WITHOUT_CLASSIFICATION	1.2955362888977405E-9	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999997328520621	WITHOUT_CLASSIFICATION	2.6714793792005676E-7	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999975800137	WITHOUT_CLASSIFICATION	2.4199862636111777E-9	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999950803726305	WITHOUT_CLASSIFICATION	4.9196273694423045E-6	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.99999195139707	WITHOUT_CLASSIFICATION	8.048602929966026E-6	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.998888034260831	WITHOUT_CLASSIFICATION	0.0011119657391690412	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999997097874535	WITHOUT_CLASSIFICATION	2.902125465317346E-7	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999972957870816	WITHOUT_CLASSIFICATION	2.704212918409587E-6	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.999999999425906	WITHOUT_CLASSIFICATION	5.740940308054443E-10	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999949393279397	WITHOUT_CLASSIFICATION	5.060672060329262E-6	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999951123206	WITHOUT_CLASSIFICATION	4.887679354957702E-9	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999873138905	WITHOUT_CLASSIFICATION	1.2686109483966739E-8	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9998753032457957	WITHOUT_CLASSIFICATION	1.2469675420426717E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999997221399409	WITHOUT_CLASSIFICATION	2.778600590630427E-7	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999995440595489	WITHOUT_CLASSIFICATION	4.559404510133793E-7	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999890496638374	WITHOUT_CLASSIFICATION	1.0950336162562546E-5	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999488607440778	WITHOUT_CLASSIFICATION	5.1139255922166664E-5	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999791937295	WITHOUT_CLASSIFICATION	2.080627055483694E-8	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999977130467	WITHOUT_CLASSIFICATION	2.2869532257840403E-9	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999928423075	WITHOUT_CLASSIFICATION	7.15769253074324E-9	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999926153243137	WITHOUT_CLASSIFICATION	7.3846756863087044E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999976349541386	WITHOUT_CLASSIFICATION	2.365045861427852E-6	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999999887895779	WITHOUT_CLASSIFICATION	1.1210422138176716E-8	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999909581914124	WITHOUT_CLASSIFICATION	9.04180858763369E-6	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999992894613294	WITHOUT_CLASSIFICATION	7.105386706095161E-7	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999805299255107	WITHOUT_CLASSIFICATION	1.947007448928054E-5	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999999375187337	WITHOUT_CLASSIFICATION	6.248126628748231E-8	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999892989576	WITHOUT_CLASSIFICATION	1.070104239735625E-8	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999999999907196	WITHOUT_CLASSIFICATION	9.28039079561668E-11	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999993452963	WITHOUT_CLASSIFICATION	6.547036532994212E-10	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999926320021	WITHOUT_CLASSIFICATION	7.367997888856493E-9	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999737149746527	WITHOUT_CLASSIFICATION	2.6285025347225858E-5	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999818703849	WITHOUT_CLASSIFICATION	1.8129615194617834E-8	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999997752736371	WITHOUT_CLASSIFICATION	2.2472636285476296E-7	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999173493266247	WITHOUT_CLASSIFICATION	8.265067337531329E-5	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999173493266247	WITHOUT_CLASSIFICATION	8.265067337531329E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999967713005443	WITHOUT_CLASSIFICATION	3.228699455708739E-6	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999484362102	WITHOUT_CLASSIFICATION	5.156378980948649E-7	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999996661607337	WITHOUT_CLASSIFICATION	3.3383926624925714E-7	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9471289117243847	IMPLEMENTATION	0.0528710882756153	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999993292297511	WITHOUT_CLASSIFICATION	6.707702490044315E-7	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999993292297511	WITHOUT_CLASSIFICATION	6.707702490044315E-7	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999986879869592	WITHOUT_CLASSIFICATION	1.3120130408429888E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999958832153414	WITHOUT_CLASSIFICATION	4.116784658592674E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999741264008206	WITHOUT_CLASSIFICATION	2.5873599179406514E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999688806224292	WITHOUT_CLASSIFICATION	3.111937757083103E-5	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999912856916793	WITHOUT_CLASSIFICATION	8.7143083206102E-6	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999979145170498	WITHOUT_CLASSIFICATION	2.08548295032408E-6	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999989957182238	WITHOUT_CLASSIFICATION	1.004281776152759E-6	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999998878284885	WITHOUT_CLASSIFICATION	1.121715115471927E-7	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999905758177712	WITHOUT_CLASSIFICATION	9.424182228829142E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999803854576	WITHOUT_CLASSIFICATION	1.9614542474679156E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999803854576	WITHOUT_CLASSIFICATION	1.9614542474679156E-8	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9996566265480723	WITHOUT_CLASSIFICATION	3.433734519276796E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999986054415244	WITHOUT_CLASSIFICATION	1.394558475658189E-6	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999997282602536	WITHOUT_CLASSIFICATION	2.717397463772681E-7	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999622669515665	WITHOUT_CLASSIFICATION	3.7733048433514685E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956407204359	WITHOUT_CLASSIFICATION	4.3592795641231585E-6	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999998175558249	WITHOUT_CLASSIFICATION	1.8244417516414137E-7	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999564319454	WITHOUT_CLASSIFICATION	4.35680547211991E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956407204359	WITHOUT_CLASSIFICATION	4.3592795641231585E-6	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999990114443216	WITHOUT_CLASSIFICATION	9.885556785164033E-7	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999999673008895	WITHOUT_CLASSIFICATION	3.26991106417445E-8	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9995962712947726	WITHOUT_CLASSIFICATION	4.037287052273533E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.999999989505813	WITHOUT_CLASSIFICATION	1.0494186986845583E-8	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999950803726305	WITHOUT_CLASSIFICATION	4.9196273694423045E-6	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999885674857298	WITHOUT_CLASSIFICATION	1.143251427013885E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999659821655433	WITHOUT_CLASSIFICATION	3.401783445657806E-5	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999997112417469	WITHOUT_CLASSIFICATION	2.887582530835761E-7	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999635421989852	WITHOUT_CLASSIFICATION	3.6457801014835055E-5	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999945335957485	WITHOUT_CLASSIFICATION	5.466404251445851E-6	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999979999149554	WITHOUT_CLASSIFICATION	2.0000850445399912E-6	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999874142900517	WITHOUT_CLASSIFICATION	1.2585709948385196E-5	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999985693675	WITHOUT_CLASSIFICATION	1.4306325784917095E-9	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999996089275869	WITHOUT_CLASSIFICATION	3.910724131601131E-7	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997262770891472	WITHOUT_CLASSIFICATION	2.7372291085280047E-4	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997262770891472	WITHOUT_CLASSIFICATION	2.7372291085280047E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9988160374078033	WITHOUT_CLASSIFICATION	0.0011839625921966769	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999995296774	WITHOUT_CLASSIFICATION	4.703225605665545E-10	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998359470404888	WITHOUT_CLASSIFICATION	1.640529595112139E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999924278303817	WITHOUT_CLASSIFICATION	7.572169618292772E-6	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999995207575334	WITHOUT_CLASSIFICATION	4.79242466514849E-7	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999453237989	WITHOUT_CLASSIFICATION	5.467620110327865E-8	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998252570137609	WITHOUT_CLASSIFICATION	1.7474298623897962E-4	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.999999999984908	WITHOUT_CLASSIFICATION	1.5092007430129904E-11	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999918888962834	WITHOUT_CLASSIFICATION	8.11110371649107E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9995833021375332	WITHOUT_CLASSIFICATION	4.1669786246676706E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983631832572	WITHOUT_CLASSIFICATION	1.6368167428493823E-6	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999999989610202	WITHOUT_CLASSIFICATION	1.0389797549452873E-9	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9987808342602986	WITHOUT_CLASSIFICATION	0.0012191657397013216	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999990544546	WITHOUT_CLASSIFICATION	9.455454544922991E-10	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999992211189	WITHOUT_CLASSIFICATION	7.788810271146543E-10	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999996680812756	WITHOUT_CLASSIFICATION	3.319187244147711E-7	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999997396875374	WITHOUT_CLASSIFICATION	2.6031246258675266E-7	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999989881726669	WITHOUT_CLASSIFICATION	1.0118273331908994E-6	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.999793146205982	WITHOUT_CLASSIFICATION	2.0685379401800635E-4	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999999995643	WITHOUT_CLASSIFICATION	4.3568060141193395E-13	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999999094733	WITHOUT_CLASSIFICATION	9.052673625764581E-11	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999776099777	WITHOUT_CLASSIFICATION	2.2390022259767417E-8	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999979332948494	WITHOUT_CLASSIFICATION	2.0667051505572747E-6	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999992406673	WITHOUT_CLASSIFICATION	7.593326855625192E-10	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999882560633	WITHOUT_CLASSIFICATION	1.1743936741137778E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999882560633	WITHOUT_CLASSIFICATION	1.1743936741137778E-8	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999978393135514	WITHOUT_CLASSIFICATION	2.1606864486093556E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999842509018709	WITHOUT_CLASSIFICATION	1.57490981289861E-5	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999984366693	WITHOUT_CLASSIFICATION	1.5633307193650894E-9	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999952474976	WITHOUT_CLASSIFICATION	4.752502392462336E-9	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999990463049039	WITHOUT_CLASSIFICATION	9.536950960377329E-7	IMPLEMENTATION
