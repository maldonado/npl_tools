// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.998995639469752	WITHOUT_CLASSIFICATION	0.0010043605302479967	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.998995639469752	WITHOUT_CLASSIFICATION	0.0010043605302479967	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.5615907176309219	WITHOUT_CLASSIFICATION	0.43840928236907817	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.858400679364825	WITHOUT_CLASSIFICATION	0.141599320635175	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9562219438497994	WITHOUT_CLASSIFICATION	0.04377805615020048	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.9913413087654187	IMPLEMENTATION	0.008658691234581276	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9370318503528429	WITHOUT_CLASSIFICATION	0.06296814964715712	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.7101614876645709	WITHOUT_CLASSIFICATION	0.28983851233542923	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.526930033273941	WITHOUT_CLASSIFICATION	0.47306996672605894	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.6463097378064832	IMPLEMENTATION	0.35369026219351685	WITHOUT_CLASSIFICATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.8303115851997906	WITHOUT_CLASSIFICATION	0.16968841480020933	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.9256885575415472	IMPLEMENTATION	0.07431144245845282	WITHOUT_CLASSIFICATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.6981381488954915	IMPLEMENTATION	0.30186185110450847	WITHOUT_CLASSIFICATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.6981381488954915	IMPLEMENTATION	0.30186185110450847	WITHOUT_CLASSIFICATION
/**	IMPLEMENTATION	0.9930455059755611	WITHOUT_CLASSIFICATION	0.0069544940244388445	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.8727905455135966	IMPLEMENTATION	0.12720945448640333	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9936636407674824	IMPLEMENTATION	0.006336359232517753	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.945843270123064	WITHOUT_CLASSIFICATION	0.05415672987693597	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999999885524157	WITHOUT_CLASSIFICATION	1.144758425831548E-8	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9666619737710402	IMPLEMENTATION	0.03333802622895969	WITHOUT_CLASSIFICATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.8286051000008207	WITHOUT_CLASSIFICATION	0.1713948999991793	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9984227694509311	WITHOUT_CLASSIFICATION	0.001577230549068827	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.6098884239245311	IMPLEMENTATION	0.3901115760754689	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.5299737268597183	WITHOUT_CLASSIFICATION	0.4700262731402816	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.5299737268597183	WITHOUT_CLASSIFICATION	0.4700262731402816	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.6121653169942346	IMPLEMENTATION	0.38783468300576546	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9290040152235418	IMPLEMENTATION	0.07099598477645824	WITHOUT_CLASSIFICATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9567526327705969	IMPLEMENTATION	0.04324736722940313	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.6678365085529442	IMPLEMENTATION	0.3321634914470557	WITHOUT_CLASSIFICATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9768230183071811	IMPLEMENTATION	0.023176981692818906	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.6847451680802081	IMPLEMENTATION	0.3152548319197919	WITHOUT_CLASSIFICATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.6539962123020586	WITHOUT_CLASSIFICATION	0.3460037876979415	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.999839409654422	WITHOUT_CLASSIFICATION	1.6059034557800223E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.7068243785531555	WITHOUT_CLASSIFICATION	0.2931756214468444	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9985481000518525	IMPLEMENTATION	0.00145189994814756	WITHOUT_CLASSIFICATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9128594807988187	WITHOUT_CLASSIFICATION	0.08714051920118117	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.9160475472922694	IMPLEMENTATION	0.0839524527077306	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9804330223853884	WITHOUT_CLASSIFICATION	0.019566977614611618	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.7379665236651247	WITHOUT_CLASSIFICATION	0.2620334763348752	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8557140741731528	WITHOUT_CLASSIFICATION	0.14428592582684716	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8557140741731528	WITHOUT_CLASSIFICATION	0.14428592582684716	IMPLEMENTATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.7078031944840452	WITHOUT_CLASSIFICATION	0.29219680551595495	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9983373395984549	WITHOUT_CLASSIFICATION	0.0016626604015450562	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9199123677032116	WITHOUT_CLASSIFICATION	0.08008763229678847	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.7694869612201264	IMPLEMENTATION	0.2305130387798737	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.8327709481104538	IMPLEMENTATION	0.16722905188954618	WITHOUT_CLASSIFICATION
//TODO: formulas ?	IMPLEMENTATION	0.5295807814903005	IMPLEMENTATION	0.4704192185096994	WITHOUT_CLASSIFICATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.7532632952363556	WITHOUT_CLASSIFICATION	0.24673670476364443	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9999698714145816	WITHOUT_CLASSIFICATION	3.012858541831204E-5	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.6314036679847134	IMPLEMENTATION	0.36859633201528674	WITHOUT_CLASSIFICATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.7396576036484617	WITHOUT_CLASSIFICATION	0.2603423963515383	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9862627083362733	IMPLEMENTATION	0.013737291663726817	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9950238534481196	WITHOUT_CLASSIFICATION	0.004976146551880415	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.7013642295430215	WITHOUT_CLASSIFICATION	0.2986357704569785	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.619842040878291	IMPLEMENTATION	0.380157959121709	WITHOUT_CLASSIFICATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9818358634820842	IMPLEMENTATION	0.0181641365179158	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.619842040878291	IMPLEMENTATION	0.380157959121709	WITHOUT_CLASSIFICATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9936935560925504	IMPLEMENTATION	0.006306443907449591	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.5672058247431383	IMPLEMENTATION	0.43279417525686176	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.619842040878291	IMPLEMENTATION	0.380157959121709	WITHOUT_CLASSIFICATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9994648739121049	WITHOUT_CLASSIFICATION	5.3512608789504E-4	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9993312337341723	WITHOUT_CLASSIFICATION	6.687662658276813E-4	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9997409221552571	IMPLEMENTATION	2.5907784474287745E-4	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9548189428425676	WITHOUT_CLASSIFICATION	0.04518105715743239	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999652915819849	WITHOUT_CLASSIFICATION	3.4708418015120965E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999890498322174	WITHOUT_CLASSIFICATION	1.0950167782497143E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999890498322174	WITHOUT_CLASSIFICATION	1.0950167782497143E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999890498322174	WITHOUT_CLASSIFICATION	1.0950167782497143E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999890498322174	WITHOUT_CLASSIFICATION	1.0950167782497143E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999890498322174	WITHOUT_CLASSIFICATION	1.0950167782497143E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999890498322174	WITHOUT_CLASSIFICATION	1.0950167782497143E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999890498322174	WITHOUT_CLASSIFICATION	1.0950167782497143E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.999997524935202	WITHOUT_CLASSIFICATION	2.475064798090224E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.999997524935202	WITHOUT_CLASSIFICATION	2.475064798090224E-6	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.999910380324782	WITHOUT_CLASSIFICATION	8.961967521795652E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999984431600993	WITHOUT_CLASSIFICATION	1.556839900627248E-6	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999966655436187	WITHOUT_CLASSIFICATION	3.3344563812622144E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999974852843457	WITHOUT_CLASSIFICATION	2.514715654131184E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999974852843457	WITHOUT_CLASSIFICATION	2.514715654131184E-6	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999183446702	WITHOUT_CLASSIFICATION	8.16553297429095E-8	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999976455964357	WITHOUT_CLASSIFICATION	2.354403564290982E-6	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.999863509206343	WITHOUT_CLASSIFICATION	1.3649079365704185E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999989398566335	WITHOUT_CLASSIFICATION	1.060143366520372E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999944405735628	WITHOUT_CLASSIFICATION	5.559426437206918E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999944405735628	WITHOUT_CLASSIFICATION	5.559426437206918E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999859080174021	WITHOUT_CLASSIFICATION	1.4091982597929582E-5	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999326584645782	WITHOUT_CLASSIFICATION	6.734153542177313E-5	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999991796822197	WITHOUT_CLASSIFICATION	8.203177803165449E-7	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999985546558939	WITHOUT_CLASSIFICATION	1.4453441060183277E-6	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999815450794	WITHOUT_CLASSIFICATION	1.8454920511794945E-8	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999973151796663	WITHOUT_CLASSIFICATION	2.6848203337880613E-6	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999703409368635	WITHOUT_CLASSIFICATION	2.9659063136515284E-5	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999941667910653	WITHOUT_CLASSIFICATION	5.833208934666185E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999343359232331	WITHOUT_CLASSIFICATION	6.566407676688847E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9863796992114336	WITHOUT_CLASSIFICATION	0.013620300788566431	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999802101016914	WITHOUT_CLASSIFICATION	1.9789898308664057E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999939905325284	WITHOUT_CLASSIFICATION	6.009467471573776E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999998346593254	WITHOUT_CLASSIFICATION	1.653406746713681E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999928612905303	WITHOUT_CLASSIFICATION	7.1387094696490495E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999928612905303	WITHOUT_CLASSIFICATION	7.1387094696490495E-6	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999996917284516	WITHOUT_CLASSIFICATION	3.0827154846108895E-7	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999720616017771	WITHOUT_CLASSIFICATION	2.7938398222946354E-5	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999939057996381	WITHOUT_CLASSIFICATION	6.0942003619305885E-6	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999994691366925	WITHOUT_CLASSIFICATION	5.308633075520579E-7	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999437265657457	WITHOUT_CLASSIFICATION	5.627343425420123E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9930455059755611	WITHOUT_CLASSIFICATION	0.0069544940244388445	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9930455059755611	WITHOUT_CLASSIFICATION	0.0069544940244388445	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999998503109911	WITHOUT_CLASSIFICATION	1.4968900876394663E-7	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999984085979278	WITHOUT_CLASSIFICATION	1.5914020721758534E-6	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.999999805221459	WITHOUT_CLASSIFICATION	1.947785408975741E-7	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999899532650649	WITHOUT_CLASSIFICATION	1.0046734935102081E-4	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999812884615185	WITHOUT_CLASSIFICATION	1.8711538481585803E-5	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753982309235	WITHOUT_CLASSIFICATION	2.4601769076431426E-5	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844045712636	WITHOUT_CLASSIFICATION	1.5595428736417654E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999957543123383	WITHOUT_CLASSIFICATION	4.245687661581326E-6	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999454765986914	WITHOUT_CLASSIFICATION	5.4523401308679667E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999998293534	WITHOUT_CLASSIFICATION	1.7064659184901195E-10	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999730382511356	WITHOUT_CLASSIFICATION	2.696174886438186E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999454765986914	WITHOUT_CLASSIFICATION	5.4523401308679667E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999730382511356	WITHOUT_CLASSIFICATION	2.696174886438186E-5	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999846332644362	WITHOUT_CLASSIFICATION	1.5366735563802154E-5	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999965996227441	WITHOUT_CLASSIFICATION	3.400377255833286E-6	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999975270991661	WITHOUT_CLASSIFICATION	2.4729008339165206E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999946700349954	WITHOUT_CLASSIFICATION	5.32996500463139E-6	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999991761549198	WITHOUT_CLASSIFICATION	8.238450802065344E-7	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999850350174335	WITHOUT_CLASSIFICATION	1.4964982566524574E-5	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999875492906594	WITHOUT_CLASSIFICATION	1.2450709340573543E-5	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9981963326928271	WITHOUT_CLASSIFICATION	0.0018036673071728363	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999985741839846	WITHOUT_CLASSIFICATION	1.4258160153807662E-6	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999684716856307	WITHOUT_CLASSIFICATION	3.152831436932906E-5	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999836455133044	WITHOUT_CLASSIFICATION	1.6354486695583506E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999922539148539	WITHOUT_CLASSIFICATION	7.746085146123794E-6	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999928452725	WITHOUT_CLASSIFICATION	7.154727470773576E-9	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999963396745705	WITHOUT_CLASSIFICATION	3.6603254295594756E-6	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999977270805541	WITHOUT_CLASSIFICATION	2.2729194458958017E-6	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999994587789502	WITHOUT_CLASSIFICATION	5.412210497251867E-7	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999998484979693	WITHOUT_CLASSIFICATION	1.5150203059818603E-7	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999551546193245	WITHOUT_CLASSIFICATION	4.484538067559045E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999115442748	WITHOUT_CLASSIFICATION	8.845572523810353E-8	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998980867796	WITHOUT_CLASSIFICATION	1.0191322041848905E-7	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999929085078361	WITHOUT_CLASSIFICATION	7.0914921639202465E-6	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999954490283575	WITHOUT_CLASSIFICATION	4.550971642530685E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999985357521529	WITHOUT_CLASSIFICATION	1.464247847091307E-6	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999990994140008	WITHOUT_CLASSIFICATION	9.005859991119074E-7	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9698147580059635	WITHOUT_CLASSIFICATION	0.030185241994036414	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999999518813457	WITHOUT_CLASSIFICATION	4.811865433643569E-8	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999605596672775	WITHOUT_CLASSIFICATION	3.9440332722538034E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9976773622442778	WITHOUT_CLASSIFICATION	0.0023226377557221266	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999998842271984	WITHOUT_CLASSIFICATION	1.1577280157567524E-7	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999985709617	WITHOUT_CLASSIFICATION	1.4290383061171598E-9	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999990967724656	WITHOUT_CLASSIFICATION	9.032275344521156E-7	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999980842348319	WITHOUT_CLASSIFICATION	1.9157651679969534E-6	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999903138986992	WITHOUT_CLASSIFICATION	9.68610130074949E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999998195521609	WITHOUT_CLASSIFICATION	1.8044783909988962E-7	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999988277863069	WITHOUT_CLASSIFICATION	1.1722136930550673E-6	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999991615687	WITHOUT_CLASSIFICATION	8.384314015766801E-10	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999998195521609	WITHOUT_CLASSIFICATION	1.8044783909988962E-7	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999998452205213	WITHOUT_CLASSIFICATION	1.5477947859769151E-7	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9997494663868947	WITHOUT_CLASSIFICATION	2.5053361310529087E-4	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999933236869285	WITHOUT_CLASSIFICATION	6.6763130714215814E-6	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999963543681455	WITHOUT_CLASSIFICATION	3.6456318544033978E-6	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999966199866729	WITHOUT_CLASSIFICATION	3.380013326976287E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999282719868	WITHOUT_CLASSIFICATION	7.172801319159051E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999282719868	WITHOUT_CLASSIFICATION	7.172801319159051E-8	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999964970853144	WITHOUT_CLASSIFICATION	3.5029146856031885E-5	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999997219472556	WITHOUT_CLASSIFICATION	2.780527444801924E-7	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999542973033841	WITHOUT_CLASSIFICATION	4.5702696615745805E-5	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999919892839	WITHOUT_CLASSIFICATION	8.010716051405933E-9	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999999660851141	WITHOUT_CLASSIFICATION	3.3914885898309074E-7	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999965157303399	WITHOUT_CLASSIFICATION	3.484269660134377E-6	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999974368383985	WITHOUT_CLASSIFICATION	2.5631616015999405E-6	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.999995785146029	WITHOUT_CLASSIFICATION	4.214853970976039E-6	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999970932212361	WITHOUT_CLASSIFICATION	2.9067787639487836E-6	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999820253515	WITHOUT_CLASSIFICATION	1.7974648546092267E-8	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999043247356	WITHOUT_CLASSIFICATION	9.567526441687679E-8	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999043247356	WITHOUT_CLASSIFICATION	9.567526441687679E-8	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999977656702532	WITHOUT_CLASSIFICATION	2.2343297468366145E-6	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999999777188552	WITHOUT_CLASSIFICATION	2.2281144800738275E-7	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999921292999322	WITHOUT_CLASSIFICATION	7.870700067806025E-6	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999043247356	WITHOUT_CLASSIFICATION	9.567526441687679E-8	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999977656702532	WITHOUT_CLASSIFICATION	2.2343297468366145E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999977656702532	WITHOUT_CLASSIFICATION	2.2343297468366145E-6	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999981212778295	WITHOUT_CLASSIFICATION	1.8787221704930205E-6	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999879112294661	WITHOUT_CLASSIFICATION	1.2088770533909793E-5	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999731160273	WITHOUT_CLASSIFICATION	2.6883972641235373E-8	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999858005175	WITHOUT_CLASSIFICATION	1.4199482361640762E-8	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999662147452776	WITHOUT_CLASSIFICATION	3.378525472240204E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999662147452776	WITHOUT_CLASSIFICATION	3.378525472240204E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999520888364418	WITHOUT_CLASSIFICATION	4.7911163558218716E-5	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999958038248938	WITHOUT_CLASSIFICATION	4.196175106108218E-6	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.999999533086699	WITHOUT_CLASSIFICATION	4.669133010076133E-7	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999975600288252	WITHOUT_CLASSIFICATION	2.4399711747110687E-6	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999975600288252	WITHOUT_CLASSIFICATION	2.4399711747110687E-6	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999992864221896	WITHOUT_CLASSIFICATION	7.135778104750159E-7	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999998673770196	WITHOUT_CLASSIFICATION	1.3262298039318249E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999991200025293	WITHOUT_CLASSIFICATION	8.799974705836549E-7	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.999995244866713	WITHOUT_CLASSIFICATION	4.755133286948224E-6	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999987565707993	WITHOUT_CLASSIFICATION	1.2434292006454983E-6	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999987435839116	WITHOUT_CLASSIFICATION	1.2564160883128409E-6	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.99996874550951	WITHOUT_CLASSIFICATION	3.125449048998513E-5	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999520273070789	WITHOUT_CLASSIFICATION	4.79726929211287E-5	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999824100773329	WITHOUT_CLASSIFICATION	1.758992266710258E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999991200025293	WITHOUT_CLASSIFICATION	8.799974705836549E-7	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9999920911925622	WITHOUT_CLASSIFICATION	7.908807437847045E-6	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999276258963268	WITHOUT_CLASSIFICATION	7.237410367321839E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999276258963268	WITHOUT_CLASSIFICATION	7.237410367321839E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999845748971	WITHOUT_CLASSIFICATION	1.5425102877406953E-8	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999925133287579	WITHOUT_CLASSIFICATION	7.486671242127274E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999892996438475	WITHOUT_CLASSIFICATION	1.0700356152452647E-5	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999932542015394	WITHOUT_CLASSIFICATION	6.745798460636773E-6	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.999969655601616	WITHOUT_CLASSIFICATION	3.0344398384047403E-5	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9999836313841204	WITHOUT_CLASSIFICATION	1.6368615879676285E-5	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9999902832929213	WITHOUT_CLASSIFICATION	9.716707078729848E-6	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9958295341098795	WITHOUT_CLASSIFICATION	0.004170465890120515	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999997602027677	WITHOUT_CLASSIFICATION	2.397972323519772E-7	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999997602027677	WITHOUT_CLASSIFICATION	2.397972323519772E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999896955591081	WITHOUT_CLASSIFICATION	1.0304440891991308E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999652915819849	WITHOUT_CLASSIFICATION	3.4708418015120965E-5	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999981432972105	WITHOUT_CLASSIFICATION	1.8567027894589447E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999890498322174	WITHOUT_CLASSIFICATION	1.0950167782497143E-5	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999975614102411	WITHOUT_CLASSIFICATION	2.4385897589625976E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.999997524935202	WITHOUT_CLASSIFICATION	2.475064798090224E-6	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999983530328044	WITHOUT_CLASSIFICATION	1.6469671955867471E-6	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999992150106362	WITHOUT_CLASSIFICATION	7.849893637939697E-7	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999996622838536	WITHOUT_CLASSIFICATION	3.3771614632319466E-7	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999957769846618	WITHOUT_CLASSIFICATION	4.223015338155508E-6	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.999999204345676	WITHOUT_CLASSIFICATION	7.956543240449613E-7	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999631561328272	WITHOUT_CLASSIFICATION	3.68438671727906E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999977884334447	WITHOUT_CLASSIFICATION	2.2115665554190624E-6	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999958407181225	WITHOUT_CLASSIFICATION	4.159281877486983E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999984431600993	WITHOUT_CLASSIFICATION	1.556839900627248E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999989838214596	WITHOUT_CLASSIFICATION	1.016178540425635E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999989838214596	WITHOUT_CLASSIFICATION	1.016178540425635E-6	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999980281035792	WITHOUT_CLASSIFICATION	1.9718964207826845E-6	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9983247518404368	WITHOUT_CLASSIFICATION	0.001675248159563221	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999959714461522	WITHOUT_CLASSIFICATION	4.028553847810309E-6	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999978206637966	WITHOUT_CLASSIFICATION	2.179336203442048E-6	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999991187182381	WITHOUT_CLASSIFICATION	8.812817618782028E-7	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999983550213661	WITHOUT_CLASSIFICATION	1.644978633775102E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999974852843457	WITHOUT_CLASSIFICATION	2.514715654131184E-6	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999111535410228	WITHOUT_CLASSIFICATION	8.884645897712511E-5	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999969640950699	WITHOUT_CLASSIFICATION	3.0359049302531937E-6	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999956901256948	WITHOUT_CLASSIFICATION	4.309874305269723E-6	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.999998437568505	WITHOUT_CLASSIFICATION	1.5624314949373613E-6	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999655777930877	WITHOUT_CLASSIFICATION	3.4422206912214294E-5	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999753258921833	WITHOUT_CLASSIFICATION	2.467410781669966E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999930679319503	WITHOUT_CLASSIFICATION	6.932068049814746E-6	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999995946494683	WITHOUT_CLASSIFICATION	4.053505317664721E-7	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999849712632064	WITHOUT_CLASSIFICATION	1.50287367935303E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999957640792443	WITHOUT_CLASSIFICATION	4.235920755728238E-6	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9998968450271732	WITHOUT_CLASSIFICATION	1.0315497282684027E-4	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999690613177457	WITHOUT_CLASSIFICATION	3.093868225442224E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999890498322174	WITHOUT_CLASSIFICATION	1.0950167782497143E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999890498322174	WITHOUT_CLASSIFICATION	1.0950167782497143E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.999997524935202	WITHOUT_CLASSIFICATION	2.475064798090224E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.999997524935202	WITHOUT_CLASSIFICATION	2.475064798090224E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999977884334447	WITHOUT_CLASSIFICATION	2.2115665554190624E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999989838214596	WITHOUT_CLASSIFICATION	1.016178540425635E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999930679319503	WITHOUT_CLASSIFICATION	6.932068049814746E-6	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999183446702	WITHOUT_CLASSIFICATION	8.16553297429095E-8	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999907030494004	WITHOUT_CLASSIFICATION	9.296950599608997E-6	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999557149616793	WITHOUT_CLASSIFICATION	4.428503832064377E-5	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999252903242064	WITHOUT_CLASSIFICATION	7.470967579359756E-5	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.999989901925609	WITHOUT_CLASSIFICATION	1.0098074390997323E-5	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999994408363184	WITHOUT_CLASSIFICATION	5.591636815062333E-7	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999986843306978	WITHOUT_CLASSIFICATION	1.3156693021173547E-6	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.999994863147747	WITHOUT_CLASSIFICATION	5.136852252953544E-6	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9998808985423439	WITHOUT_CLASSIFICATION	1.1910145765607502E-4	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999955775606412	WITHOUT_CLASSIFICATION	4.422439358760126E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999492680889527	WITHOUT_CLASSIFICATION	5.073191104730271E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999492680889527	WITHOUT_CLASSIFICATION	5.073191104730271E-5	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998615425013	WITHOUT_CLASSIFICATION	1.3845749872582697E-7	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999864907027232	WITHOUT_CLASSIFICATION	1.3509297276889361E-5	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999961200508223	WITHOUT_CLASSIFICATION	3.879949177703106E-6	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999990984482968	WITHOUT_CLASSIFICATION	9.015517032616657E-7	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998460846615	WITHOUT_CLASSIFICATION	1.5391533842967156E-7	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999419184689586	WITHOUT_CLASSIFICATION	5.808153104133407E-5	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999997677573552	WITHOUT_CLASSIFICATION	2.3224264481026276E-6	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999976455964357	WITHOUT_CLASSIFICATION	2.354403564290982E-6	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999784875376886	WITHOUT_CLASSIFICATION	2.1512462311513074E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999996382186436	WITHOUT_CLASSIFICATION	3.6178135644816E-7	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999996382186436	WITHOUT_CLASSIFICATION	3.6178135644816E-7	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999997057079403	WITHOUT_CLASSIFICATION	2.9429205971220465E-7	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999049689470879	WITHOUT_CLASSIFICATION	9.503105291216839E-5	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999989712949603	WITHOUT_CLASSIFICATION	1.028705039757647E-6	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999998549566449	WITHOUT_CLASSIFICATION	1.4504335513185958E-7	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999938680016744	WITHOUT_CLASSIFICATION	6.1319983255359166E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.999997524935202	WITHOUT_CLASSIFICATION	2.475064798090224E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999977884334447	WITHOUT_CLASSIFICATION	2.2115665554190624E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999984431600993	WITHOUT_CLASSIFICATION	1.556839900627248E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999930679319503	WITHOUT_CLASSIFICATION	6.932068049814746E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999930679319503	WITHOUT_CLASSIFICATION	6.932068049814746E-6	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999984345545828	WITHOUT_CLASSIFICATION	1.5654454171772687E-6	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999984345545828	WITHOUT_CLASSIFICATION	1.5654454171772687E-6	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999933907523638	WITHOUT_CLASSIFICATION	6.609247636159902E-6	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999910296950477	WITHOUT_CLASSIFICATION	8.970304952325372E-6	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999910296950477	WITHOUT_CLASSIFICATION	8.970304952325372E-6	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999877553471959	WITHOUT_CLASSIFICATION	1.2244652804267984E-5	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999968124369326	WITHOUT_CLASSIFICATION	3.1875630674052377E-6	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999983247929174	WITHOUT_CLASSIFICATION	1.6752070825689069E-6	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999842738961594	WITHOUT_CLASSIFICATION	1.572610384061084E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999998813216304	WITHOUT_CLASSIFICATION	1.1867836950558882E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999989398566335	WITHOUT_CLASSIFICATION	1.060143366520372E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999989398566335	WITHOUT_CLASSIFICATION	1.060143366520372E-6	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9997623697800974	WITHOUT_CLASSIFICATION	2.376302199025704E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999970653075236	WITHOUT_CLASSIFICATION	2.9346924763425523E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999982334549725	WITHOUT_CLASSIFICATION	1.7665450275141292E-6	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999861677647831	WITHOUT_CLASSIFICATION	1.3832235216978667E-5	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999994659178408	WITHOUT_CLASSIFICATION	5.340821591557818E-7	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999954157628583	WITHOUT_CLASSIFICATION	4.58423714163582E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999944405735628	WITHOUT_CLASSIFICATION	5.559426437206918E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999928651561252	WITHOUT_CLASSIFICATION	7.13484387474035E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999928651561252	WITHOUT_CLASSIFICATION	7.13484387474035E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999859080174021	WITHOUT_CLASSIFICATION	1.4091982597929582E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999859080174021	WITHOUT_CLASSIFICATION	1.4091982597929582E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999813052278322	WITHOUT_CLASSIFICATION	1.8694772167740143E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999813052278322	WITHOUT_CLASSIFICATION	1.8694772167740143E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999930948767	WITHOUT_CLASSIFICATION	6.905123297298289E-8	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999930948767	WITHOUT_CLASSIFICATION	6.905123297298289E-8	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999989398566335	WITHOUT_CLASSIFICATION	1.060143366520372E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999944405735628	WITHOUT_CLASSIFICATION	5.559426437206918E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999928651561252	WITHOUT_CLASSIFICATION	7.13484387474035E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999928651561252	WITHOUT_CLASSIFICATION	7.13484387474035E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999859080174021	WITHOUT_CLASSIFICATION	1.4091982597929582E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999813052278322	WITHOUT_CLASSIFICATION	1.8694772167740143E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999813052278322	WITHOUT_CLASSIFICATION	1.8694772167740143E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999930948767	WITHOUT_CLASSIFICATION	6.905123297298289E-8	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999927275188478	WITHOUT_CLASSIFICATION	7.272481152135915E-6	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999972843989617	WITHOUT_CLASSIFICATION	2.7156010383105096E-6	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.999912895670524	WITHOUT_CLASSIFICATION	8.710432947599188E-5	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999429379031164	WITHOUT_CLASSIFICATION	5.7062096883742745E-5	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999446351199903	WITHOUT_CLASSIFICATION	5.536488000961902E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999128938337971	WITHOUT_CLASSIFICATION	8.710616620282984E-5	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999911242884	WITHOUT_CLASSIFICATION	8.875711549200576E-9	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999928811808868	WITHOUT_CLASSIFICATION	7.118819113169879E-6	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999997726981196	WITHOUT_CLASSIFICATION	2.2730188034806762E-7	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999984505891617	WITHOUT_CLASSIFICATION	1.549410838310769E-6	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999990179292946	WITHOUT_CLASSIFICATION	9.820707054209826E-7	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999967369160705	WITHOUT_CLASSIFICATION	3.263083929479004E-6	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999964970853144	WITHOUT_CLASSIFICATION	3.5029146856031885E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999128938337971	WITHOUT_CLASSIFICATION	8.710616620282984E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998960997958789	WITHOUT_CLASSIFICATION	1.0390020412114679E-4	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998960997958789	WITHOUT_CLASSIFICATION	1.0390020412114679E-4	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.999999843603229	WITHOUT_CLASSIFICATION	1.5639677090399372E-7	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999914259676688	WITHOUT_CLASSIFICATION	8.574032331282364E-6	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999914259676688	WITHOUT_CLASSIFICATION	8.574032331282364E-6	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.999996605189264	WITHOUT_CLASSIFICATION	3.394810735946954E-6	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999981362668676	WITHOUT_CLASSIFICATION	1.863733132373478E-6	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999514954929	WITHOUT_CLASSIFICATION	4.850450711095197E-8	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999555511053249	WITHOUT_CLASSIFICATION	4.4448894675097334E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999555511053249	WITHOUT_CLASSIFICATION	4.4448894675097334E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999815450794	WITHOUT_CLASSIFICATION	1.8454920511794945E-8	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999434770857	WITHOUT_CLASSIFICATION	5.6522914321167704E-8	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999434770857	WITHOUT_CLASSIFICATION	5.6522914321167704E-8	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999980358048107	WITHOUT_CLASSIFICATION	1.9641951891677337E-6	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999995863939369	WITHOUT_CLASSIFICATION	4.1360606305029E-7	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999995635437596	WITHOUT_CLASSIFICATION	4.3645624046250445E-7	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.999976799141695	WITHOUT_CLASSIFICATION	2.3200858304962485E-5	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999952048204485	WITHOUT_CLASSIFICATION	4.795179551552465E-6	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999945478612888	WITHOUT_CLASSIFICATION	5.452138711245807E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999973151796663	WITHOUT_CLASSIFICATION	2.6848203337880613E-6	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999954615015089	WITHOUT_CLASSIFICATION	4.538498491062796E-6	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.5287937451094171	WITHOUT_CLASSIFICATION	0.4712062548905829	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999827268220121	WITHOUT_CLASSIFICATION	1.7273177987986524E-5	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999860021779527	WITHOUT_CLASSIFICATION	1.3997822047295623E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999343359232331	WITHOUT_CLASSIFICATION	6.566407676688847E-5	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999989469944132	WITHOUT_CLASSIFICATION	1.0530055868494045E-6	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.999999893346187	WITHOUT_CLASSIFICATION	1.0665381303559041E-7	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999659160693837	WITHOUT_CLASSIFICATION	3.408393061637032E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999343359232331	WITHOUT_CLASSIFICATION	6.566407676688847E-5	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999996800275766	WITHOUT_CLASSIFICATION	3.1997242343968313E-7	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999986189417851	WITHOUT_CLASSIFICATION	1.3810582149357904E-6	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999738986282867	WITHOUT_CLASSIFICATION	2.6101371713310956E-5	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999897778927985	WITHOUT_CLASSIFICATION	1.0222107201423699E-5	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999922556137185	WITHOUT_CLASSIFICATION	7.744386281421548E-6	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999899389317913	WITHOUT_CLASSIFICATION	1.0061068208607008E-5	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999874261967546	WITHOUT_CLASSIFICATION	1.2573803245347006E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999939905325284	WITHOUT_CLASSIFICATION	6.009467471573776E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999919264511183	WITHOUT_CLASSIFICATION	8.073548881695138E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999998346593254	WITHOUT_CLASSIFICATION	1.653406746713681E-7	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999949918471025	WITHOUT_CLASSIFICATION	5.008152897563399E-6	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999965519464277	WITHOUT_CLASSIFICATION	3.4480535723482735E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999934556555655	WITHOUT_CLASSIFICATION	6.544344434549872E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999973151796663	WITHOUT_CLASSIFICATION	2.6848203337880613E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999919264511183	WITHOUT_CLASSIFICATION	8.073548881695138E-6	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999949918471025	WITHOUT_CLASSIFICATION	5.008152897563399E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999934556555655	WITHOUT_CLASSIFICATION	6.544344434549872E-6	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999991779070607	WITHOUT_CLASSIFICATION	8.220929392070811E-7	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999547114957276	WITHOUT_CLASSIFICATION	4.52885042723915E-5	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999992129606635	WITHOUT_CLASSIFICATION	7.870393364292577E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999928612905303	WITHOUT_CLASSIFICATION	7.1387094696490495E-6	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.999995567737372	WITHOUT_CLASSIFICATION	4.432262628029032E-6	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999975556852808	WITHOUT_CLASSIFICATION	2.4443147192527997E-6	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999956108159682	WITHOUT_CLASSIFICATION	4.389184031718223E-6	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999993131981536	WITHOUT_CLASSIFICATION	6.868018465076955E-7	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999946826553969	WITHOUT_CLASSIFICATION	5.317344603057803E-6	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999984260717614	WITHOUT_CLASSIFICATION	1.5739282385645053E-6	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999739200748	WITHOUT_CLASSIFICATION	2.6079925171760886E-8	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999965630004817	WITHOUT_CLASSIFICATION	3.436999518285783E-6	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999986354248178	WITHOUT_CLASSIFICATION	1.3645751821630174E-6	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998991538225	WITHOUT_CLASSIFICATION	1.0084617755301144E-7	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999861446196281	WITHOUT_CLASSIFICATION	1.3855380371988434E-5	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999805012823718	WITHOUT_CLASSIFICATION	1.949871762818648E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999720616017771	WITHOUT_CLASSIFICATION	2.7938398222946354E-5	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999991991899503	WITHOUT_CLASSIFICATION	8.008100496603088E-7	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999895578366752	WITHOUT_CLASSIFICATION	1.0442163324875301E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999919264511183	WITHOUT_CLASSIFICATION	8.073548881695138E-6	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999927094370167	WITHOUT_CLASSIFICATION	7.290562983318839E-6	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999814139667185	WITHOUT_CLASSIFICATION	1.858603328144843E-5	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999982532708483	WITHOUT_CLASSIFICATION	1.7467291516526316E-6	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9984160453932978	WITHOUT_CLASSIFICATION	0.0015839546067022263	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999736726255889	WITHOUT_CLASSIFICATION	2.632737441116517E-5	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999999240509007	WITHOUT_CLASSIFICATION	7.594909939129724E-8	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999409749074	WITHOUT_CLASSIFICATION	5.902509254756583E-8	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999997407313431	WITHOUT_CLASSIFICATION	2.5926865698150246E-7	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999658653610146	WITHOUT_CLASSIFICATION	3.413463898549482E-5	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999803804330863	WITHOUT_CLASSIFICATION	1.961956691363169E-5	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999986254055674	WITHOUT_CLASSIFICATION	1.3745944325982156E-5	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999834609909517	WITHOUT_CLASSIFICATION	1.653900904824774E-5	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999983254659526	WITHOUT_CLASSIFICATION	1.6745340473970587E-6	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999994691366925	WITHOUT_CLASSIFICATION	5.308633075520579E-7	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999715410162335	WITHOUT_CLASSIFICATION	2.8458983766500324E-5	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999507524890199	WITHOUT_CLASSIFICATION	4.924751098026305E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.999993070206757	WITHOUT_CLASSIFICATION	6.929793243092911E-6	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999973416688024	WITHOUT_CLASSIFICATION	2.6583311976830372E-6	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999856028448567	WITHOUT_CLASSIFICATION	1.4397155143185563E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999963077662364	WITHOUT_CLASSIFICATION	3.692233763636446E-6	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999998915033166	WITHOUT_CLASSIFICATION	1.0849668348535754E-7	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999984137498147	WITHOUT_CLASSIFICATION	1.5862501852630008E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999883190897142	WITHOUT_CLASSIFICATION	1.1680910285741353E-5	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999947265409879	WITHOUT_CLASSIFICATION	5.273459012060047E-6	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999448940466465	WITHOUT_CLASSIFICATION	5.5105953353579506E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999448940466465	WITHOUT_CLASSIFICATION	5.5105953353579506E-5	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999292559697075	WITHOUT_CLASSIFICATION	7.07440302924294E-5	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9993108817787641	WITHOUT_CLASSIFICATION	6.8911822123581E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999966908286806	WITHOUT_CLASSIFICATION	3.3091713193534747E-6	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999947940325038	WITHOUT_CLASSIFICATION	5.205967496277826E-6	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999979669768867	WITHOUT_CLASSIFICATION	2.033023113241717E-6	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999998372423295	WITHOUT_CLASSIFICATION	1.627576704127241E-7	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999998046735411	WITHOUT_CLASSIFICATION	1.9532645880569129E-7	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999999878191681	WITHOUT_CLASSIFICATION	1.2180831770314939E-8	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9997161024330354	WITHOUT_CLASSIFICATION	2.8389756696458755E-4	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.999967704041673	WITHOUT_CLASSIFICATION	3.229595832702003E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.999991849550726	WITHOUT_CLASSIFICATION	8.150449274034774E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999952930679069	WITHOUT_CLASSIFICATION	4.706932093068394E-6	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999992357684725	WITHOUT_CLASSIFICATION	7.642315275171916E-7	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.999999399145533	WITHOUT_CLASSIFICATION	6.008544668336299E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990339445144	WITHOUT_CLASSIFICATION	9.660554855543224E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989843628225	WITHOUT_CLASSIFICATION	1.0156371774703908E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999909201475556	WITHOUT_CLASSIFICATION	9.079852444279741E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999757120343	WITHOUT_CLASSIFICATION	2.428796573653125E-8	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999999832115899	WITHOUT_CLASSIFICATION	1.6788410084216505E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999934682397417	WITHOUT_CLASSIFICATION	6.531760258296044E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999864926084434	WITHOUT_CLASSIFICATION	1.3507391556504708E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999864926084434	WITHOUT_CLASSIFICATION	1.3507391556504708E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999983206030433	WITHOUT_CLASSIFICATION	1.6793969567237828E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999983206030433	WITHOUT_CLASSIFICATION	1.6793969567237828E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999883190897142	WITHOUT_CLASSIFICATION	1.1680910285741353E-5	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999868618596078	WITHOUT_CLASSIFICATION	1.3138140392265103E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9969930908059867	WITHOUT_CLASSIFICATION	0.0030069091940133044	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999790597659536	WITHOUT_CLASSIFICATION	2.0940234046351807E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999896955591081	WITHOUT_CLASSIFICATION	1.0304440891991308E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9969930908059867	WITHOUT_CLASSIFICATION	0.0030069091940133044	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999790597659536	WITHOUT_CLASSIFICATION	2.0940234046351807E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999986763942078	WITHOUT_CLASSIFICATION	1.3236057921596314E-6	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999762892715	WITHOUT_CLASSIFICATION	2.3710728555759336E-8	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999983400013893	WITHOUT_CLASSIFICATION	1.6599986107292693E-6	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9994298809053349	WITHOUT_CLASSIFICATION	5.701190946650742E-4	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999993130213206	WITHOUT_CLASSIFICATION	6.869786794844891E-7	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999905842384529	WITHOUT_CLASSIFICATION	9.415761547129957E-6	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999822598342102	WITHOUT_CLASSIFICATION	1.7740165789790492E-5	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999425394817283	WITHOUT_CLASSIFICATION	5.7460518271703435E-5	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999958199535268	WITHOUT_CLASSIFICATION	4.180046473198702E-6	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999992716066332	WITHOUT_CLASSIFICATION	7.283933668359835E-7	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999662630994983	WITHOUT_CLASSIFICATION	3.37369005017703E-5	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999982857276607	WITHOUT_CLASSIFICATION	1.714272339302939E-5	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999916885893096	WITHOUT_CLASSIFICATION	8.311410690420049E-6	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999687014591326	WITHOUT_CLASSIFICATION	3.1298540867362905E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999896955591081	WITHOUT_CLASSIFICATION	1.0304440891991308E-5	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999585285032144	WITHOUT_CLASSIFICATION	4.147149678554978E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999988590439858	WITHOUT_CLASSIFICATION	1.1409560142717547E-6	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999988590439858	WITHOUT_CLASSIFICATION	1.1409560142717547E-6	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999921333664	WITHOUT_CLASSIFICATION	7.866633647355719E-9	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999986763942078	WITHOUT_CLASSIFICATION	1.3236057921596314E-6	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999991789968916	WITHOUT_CLASSIFICATION	8.210031084342939E-7	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999285076862345	WITHOUT_CLASSIFICATION	7.149231376555926E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9995428941527139	WITHOUT_CLASSIFICATION	4.5710584728603666E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999404577089047	WITHOUT_CLASSIFICATION	5.95422910952203E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999834963361174	WITHOUT_CLASSIFICATION	1.6503663882618748E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999986763942078	WITHOUT_CLASSIFICATION	1.3236057921596314E-6	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999404577089047	WITHOUT_CLASSIFICATION	5.95422910952203E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999834963361174	WITHOUT_CLASSIFICATION	1.6503663882618748E-5	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999900133869005	WITHOUT_CLASSIFICATION	9.986613099443409E-6	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999934568227208	WITHOUT_CLASSIFICATION	6.5431772791976955E-6	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999946936709222	WITHOUT_CLASSIFICATION	5.30632907781563E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999986763942078	WITHOUT_CLASSIFICATION	1.3236057921596314E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999986763942078	WITHOUT_CLASSIFICATION	1.3236057921596314E-6	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999984176700742	WITHOUT_CLASSIFICATION	1.5823299257573393E-6	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999984242027492	WITHOUT_CLASSIFICATION	1.5757972507006197E-6	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999986730996973	WITHOUT_CLASSIFICATION	1.326900302758293E-6	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999740588947137	WITHOUT_CLASSIFICATION	2.5941105286304158E-5	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999990657770719	WITHOUT_CLASSIFICATION	9.342229281117815E-7	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999996376350043	WITHOUT_CLASSIFICATION	3.623649957673513E-7	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999998795677587	WITHOUT_CLASSIFICATION	1.2043224129363225E-6	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999996360756944	WITHOUT_CLASSIFICATION	3.639243056124509E-7	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999996047194438	WITHOUT_CLASSIFICATION	3.9528055614154093E-7	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999979708918774	WITHOUT_CLASSIFICATION	2.02910812265031E-6	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999991785787508	WITHOUT_CLASSIFICATION	8.21421249292515E-7	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999979160736121	WITHOUT_CLASSIFICATION	2.083926387934974E-6	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999998689035041	WITHOUT_CLASSIFICATION	1.310964959196743E-7	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999997596105946	WITHOUT_CLASSIFICATION	2.403894054527311E-7	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785645628637	WITHOUT_CLASSIFICATION	2.1435437136240018E-5	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999996954041226	WITHOUT_CLASSIFICATION	3.0459587746684664E-7	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999899532650649	WITHOUT_CLASSIFICATION	1.0046734935102081E-4	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999971082160677	WITHOUT_CLASSIFICATION	2.891783932235119E-6	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999377711108576	WITHOUT_CLASSIFICATION	6.222888914242837E-5	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999881221754	WITHOUT_CLASSIFICATION	1.1877824724601856E-8	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999861154172268	WITHOUT_CLASSIFICATION	1.3884582773275536E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9991357157711116	WITHOUT_CLASSIFICATION	8.64284228888527E-4	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9991357157711116	WITHOUT_CLASSIFICATION	8.64284228888527E-4	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999899532650649	WITHOUT_CLASSIFICATION	1.0046734935102081E-4	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999984598949199	WITHOUT_CLASSIFICATION	1.5401050801273303E-6	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999999617026244	WITHOUT_CLASSIFICATION	3.829737553629117E-8	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9983539231764053	WITHOUT_CLASSIFICATION	0.0016460768235946701	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999964520622161	WITHOUT_CLASSIFICATION	3.547937783875542E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999922201007994	WITHOUT_CLASSIFICATION	7.779899200672822E-6	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999959382645299	WITHOUT_CLASSIFICATION	4.061735470093359E-6	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999993500603886	WITHOUT_CLASSIFICATION	6.499396112622065E-7	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999990625309393	WITHOUT_CLASSIFICATION	9.374690606248091E-7	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999997997883624	WITHOUT_CLASSIFICATION	2.0021163758289321E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980061222111	WITHOUT_CLASSIFICATION	1.9938777889984667E-6	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999260330938103	WITHOUT_CLASSIFICATION	7.396690618971745E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999975246237636	WITHOUT_CLASSIFICATION	2.4753762363970067E-6	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999876019013819	WITHOUT_CLASSIFICATION	1.2398098618091653E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999744087721606	WITHOUT_CLASSIFICATION	2.5591227839484603E-5	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999819162516419	WITHOUT_CLASSIFICATION	1.808374835820376E-5	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999897405242127	WITHOUT_CLASSIFICATION	1.0259475787256239E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999952851566879	WITHOUT_CLASSIFICATION	4.714843312065421E-6	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999997716884409	WITHOUT_CLASSIFICATION	2.2831155912451104E-7	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999985491775942	WITHOUT_CLASSIFICATION	1.4508224058827602E-6	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964644912843	WITHOUT_CLASSIFICATION	3.5355087157040456E-6	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999963482088936	WITHOUT_CLASSIFICATION	3.651791106336082E-6	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999972982445885	WITHOUT_CLASSIFICATION	2.701755411465212E-6	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999999026815425	WITHOUT_CLASSIFICATION	9.73184575347285E-8	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975999903283	WITHOUT_CLASSIFICATION	2.4000096717294346E-6	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999151104544175	WITHOUT_CLASSIFICATION	8.488954558258274E-5	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855824411629	WITHOUT_CLASSIFICATION	1.4417558837070402E-5	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998819921185503	WITHOUT_CLASSIFICATION	1.1800788144970974E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999477286274907	WITHOUT_CLASSIFICATION	5.227137250925632E-5	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999854731101679	WITHOUT_CLASSIFICATION	1.4526889832101249E-5	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999530274304035	WITHOUT_CLASSIFICATION	4.6972569596473825E-5	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973438041876	WITHOUT_CLASSIFICATION	2.656195812385294E-6	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999983076550496	WITHOUT_CLASSIFICATION	1.6923449503809294E-6	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999884837996309	WITHOUT_CLASSIFICATION	1.1516200369002617E-5	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999901176699703	WITHOUT_CLASSIFICATION	9.882330029658624E-6	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960052467197	WITHOUT_CLASSIFICATION	3.994753280270442E-6	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999850941152538	WITHOUT_CLASSIFICATION	1.4905884746137513E-5	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999891360575914	WITHOUT_CLASSIFICATION	1.0863942408434243E-5	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999404867293706	WITHOUT_CLASSIFICATION	5.951327062946507E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848845245721	WITHOUT_CLASSIFICATION	1.5115475427737777E-5	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999798864035483	WITHOUT_CLASSIFICATION	2.0113596451659603E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999790205162095	WITHOUT_CLASSIFICATION	2.0979483790579975E-5	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999828090757238	WITHOUT_CLASSIFICATION	1.719092427621222E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945118844583	WITHOUT_CLASSIFICATION	5.488115541637208E-6	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9998961244579191	WITHOUT_CLASSIFICATION	1.0387554208093947E-4	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999983172559315	WITHOUT_CLASSIFICATION	1.6827440685115225E-6	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999333427012	WITHOUT_CLASSIFICATION	6.665729879329783E-8	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999991133835481	WITHOUT_CLASSIFICATION	8.866164518323503E-7	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999967610862643	WITHOUT_CLASSIFICATION	3.238913735724722E-6	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.999993812303019	WITHOUT_CLASSIFICATION	6.187696981000802E-6	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999923660923951	WITHOUT_CLASSIFICATION	7.633907605028865E-6	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999961732251927	WITHOUT_CLASSIFICATION	3.826774807288233E-6	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.999981951070105	WITHOUT_CLASSIFICATION	1.804892989494192E-5	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999576876828256	WITHOUT_CLASSIFICATION	4.231231717441259E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980061222111	WITHOUT_CLASSIFICATION	1.9938777889984667E-6	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999985252773749	WITHOUT_CLASSIFICATION	1.4747226251034104E-5	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.999993776800869	WITHOUT_CLASSIFICATION	6.223199131123096E-6	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999967112344271	WITHOUT_CLASSIFICATION	3.2887655729434323E-6	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999996280208279	WITHOUT_CLASSIFICATION	3.719791720575485E-7	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999990848500897	WITHOUT_CLASSIFICATION	9.151499102899754E-7	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999938421862595	WITHOUT_CLASSIFICATION	6.157813740396867E-6	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999962577344289	WITHOUT_CLASSIFICATION	3.7422655710473694E-6	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943076764849	WITHOUT_CLASSIFICATION	5.692323515039345E-6	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972703833101	WITHOUT_CLASSIFICATION	2.7296166899792984E-6	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997892707189514	WITHOUT_CLASSIFICATION	2.1072928104855628E-4	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999905190965241	WITHOUT_CLASSIFICATION	9.480903475868174E-6	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9997928460690136	WITHOUT_CLASSIFICATION	2.071539309863972E-4	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999994795042068	WITHOUT_CLASSIFICATION	5.204957933243648E-7	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999978040606742	WITHOUT_CLASSIFICATION	2.1959393258972267E-6	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999702463950058	WITHOUT_CLASSIFICATION	2.9753604994135597E-5	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976702595542	WITHOUT_CLASSIFICATION	2.3297404457508494E-6	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999992780250285	WITHOUT_CLASSIFICATION	7.219749715080673E-7	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999992694393443	WITHOUT_CLASSIFICATION	7.305606557356957E-7	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999999367195197	WITHOUT_CLASSIFICATION	6.328048029802789E-7	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999996635768922	WITHOUT_CLASSIFICATION	3.364231078128418E-7	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999999539395618	WITHOUT_CLASSIFICATION	4.606043828754323E-8	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999967371328713	WITHOUT_CLASSIFICATION	3.2628671286760516E-6	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999898398876086	WITHOUT_CLASSIFICATION	1.0160112391429233E-5	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999998483216483	WITHOUT_CLASSIFICATION	1.5167835162804872E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980061222111	WITHOUT_CLASSIFICATION	1.9938777889984667E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999991133835481	WITHOUT_CLASSIFICATION	8.866164518323503E-7	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999945308539381	WITHOUT_CLASSIFICATION	5.469146061884132E-6	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999987231200688	WITHOUT_CLASSIFICATION	1.2768799312518745E-6	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999936917376273	WITHOUT_CLASSIFICATION	6.308262372631488E-6	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999994169119919	WITHOUT_CLASSIFICATION	5.830880081012748E-6	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999964336047951	WITHOUT_CLASSIFICATION	3.566395204918767E-6	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999812984406136	WITHOUT_CLASSIFICATION	1.8701559386381904E-5	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999395516755637	WITHOUT_CLASSIFICATION	6.044832443644498E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999988661189222	WITHOUT_CLASSIFICATION	1.1338810778691097E-6	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999122692138066	WITHOUT_CLASSIFICATION	8.773078619341652E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999966651607033	WITHOUT_CLASSIFICATION	3.3348392966692395E-6	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999972961667041	WITHOUT_CLASSIFICATION	2.703833295902502E-6	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999963151230832	WITHOUT_CLASSIFICATION	3.6848769167757684E-6	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999870451470259	WITHOUT_CLASSIFICATION	1.295485297419072E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980061222111	WITHOUT_CLASSIFICATION	1.9938777889984667E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980061222111	WITHOUT_CLASSIFICATION	1.9938777889984667E-6	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999717548680842	WITHOUT_CLASSIFICATION	2.8245131915808804E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999903054408035	WITHOUT_CLASSIFICATION	9.694559196490473E-6	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999966280578242	WITHOUT_CLASSIFICATION	3.371942175818775E-6	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999544444982783	WITHOUT_CLASSIFICATION	4.555550172166358E-5	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999944877400475	WITHOUT_CLASSIFICATION	5.512259952438727E-6	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999995938125281	WITHOUT_CLASSIFICATION	4.061874718364886E-7	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9998846362280225	WITHOUT_CLASSIFICATION	1.1536377197747741E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980061222111	WITHOUT_CLASSIFICATION	1.9938777889984667E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999986697760329	WITHOUT_CLASSIFICATION	1.330223967009187E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999971862167817	WITHOUT_CLASSIFICATION	2.813783218380445E-6	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999245170277599	WITHOUT_CLASSIFICATION	7.548297224012888E-5	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999648021505937	WITHOUT_CLASSIFICATION	3.5197849406283254E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999966974196351	WITHOUT_CLASSIFICATION	3.3025803647910588E-6	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999818822419622	WITHOUT_CLASSIFICATION	1.8117758037844683E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9863796992114336	WITHOUT_CLASSIFICATION	0.013620300788566431	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999957253052739	WITHOUT_CLASSIFICATION	4.274694726130972E-6	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999923797811544	WITHOUT_CLASSIFICATION	7.620218845533979E-6	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999996038698776	WITHOUT_CLASSIFICATION	3.9613012231144936E-7	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999991133835481	WITHOUT_CLASSIFICATION	8.866164518323503E-7	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999996730990495	WITHOUT_CLASSIFICATION	3.2690095061078794E-7	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999998759442741	WITHOUT_CLASSIFICATION	1.2405572584080775E-7	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9995837887998622	WITHOUT_CLASSIFICATION	4.162112001377199E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999991133835481	WITHOUT_CLASSIFICATION	8.866164518323503E-7	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999963956689081	WITHOUT_CLASSIFICATION	3.604331091923243E-6	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999986697760329	WITHOUT_CLASSIFICATION	1.330223967009187E-6	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.999984225615555	WITHOUT_CLASSIFICATION	1.5774384444995985E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980061222111	WITHOUT_CLASSIFICATION	1.9938777889984667E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.999996677485888	WITHOUT_CLASSIFICATION	3.322514112024397E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980061222111	WITHOUT_CLASSIFICATION	1.9938777889984667E-6	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999963296452836	WITHOUT_CLASSIFICATION	3.670354716475075E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999966651607033	WITHOUT_CLASSIFICATION	3.3348392966692395E-6	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999972961667041	WITHOUT_CLASSIFICATION	2.703833295902502E-6	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999963151230832	WITHOUT_CLASSIFICATION	3.6848769167757684E-6	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999986359967405	WITHOUT_CLASSIFICATION	1.364003259401366E-6	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999983094640049	WITHOUT_CLASSIFICATION	1.690535995070415E-6	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.999990812756913	WITHOUT_CLASSIFICATION	9.187243086995664E-6	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999990415455302	WITHOUT_CLASSIFICATION	9.584544697878954E-7	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999921086273037	WITHOUT_CLASSIFICATION	7.891372696306828E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980061222111	WITHOUT_CLASSIFICATION	1.9938777889984667E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999991133835481	WITHOUT_CLASSIFICATION	8.866164518323503E-7	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999870451470259	WITHOUT_CLASSIFICATION	1.295485297419072E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999717548680842	WITHOUT_CLASSIFICATION	2.8245131915808804E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999382049501	WITHOUT_CLASSIFICATION	6.179504987065327E-8	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999415651686	WITHOUT_CLASSIFICATION	5.843483150668507E-8	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.999999970175951	WITHOUT_CLASSIFICATION	2.9824049018716856E-8	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999996113211814	WITHOUT_CLASSIFICATION	3.886788185363565E-7	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999990468672276	WITHOUT_CLASSIFICATION	9.531327723209825E-7	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999997295729246	WITHOUT_CLASSIFICATION	2.704270754078003E-7	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999790205162095	WITHOUT_CLASSIFICATION	2.0979483790579975E-5	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999994393238423	WITHOUT_CLASSIFICATION	5.606761577153443E-7	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9991292120095433	WITHOUT_CLASSIFICATION	8.707879904567221E-4	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.999993254241244	WITHOUT_CLASSIFICATION	6.74575875603943E-6	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9997669068983098	WITHOUT_CLASSIFICATION	2.3309310169008265E-4	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999882741464169	WITHOUT_CLASSIFICATION	1.1725853583171648E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999477286274907	WITHOUT_CLASSIFICATION	5.227137250925632E-5	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999854731101679	WITHOUT_CLASSIFICATION	1.4526889832101249E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960052467197	WITHOUT_CLASSIFICATION	3.994753280270442E-6	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999882741464169	WITHOUT_CLASSIFICATION	1.1725853583171648E-5	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999902890929803	WITHOUT_CLASSIFICATION	9.710907019697834E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999996300247607	WITHOUT_CLASSIFICATION	3.699752392993928E-7	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999040113170464	WITHOUT_CLASSIFICATION	9.598868295356018E-5	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998720817390375	WITHOUT_CLASSIFICATION	1.2791826096247353E-4	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999822405174053	WITHOUT_CLASSIFICATION	1.7759482594690783E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980061222111	WITHOUT_CLASSIFICATION	1.9938777889984667E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980061222111	WITHOUT_CLASSIFICATION	1.9938777889984667E-6	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999737544842852	WITHOUT_CLASSIFICATION	2.6245515714908922E-5	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999850941152538	WITHOUT_CLASSIFICATION	1.4905884746137513E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848845245721	WITHOUT_CLASSIFICATION	1.5115475427737777E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999996635768922	WITHOUT_CLASSIFICATION	3.364231078128418E-7	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999910097808168	WITHOUT_CLASSIFICATION	8.990219183129602E-6	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999976767709546	WITHOUT_CLASSIFICATION	2.3232290452952772E-6	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999764647511871	WITHOUT_CLASSIFICATION	2.353524881290707E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999960901692708	WITHOUT_CLASSIFICATION	3.909830729173363E-6	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999993493266489	WITHOUT_CLASSIFICATION	6.506733510632381E-7	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999996888619004	WITHOUT_CLASSIFICATION	3.111380996854096E-7	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999976917911997	WITHOUT_CLASSIFICATION	2.3082088002972765E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998197883065648	WITHOUT_CLASSIFICATION	1.8021169343525144E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999997997883624	WITHOUT_CLASSIFICATION	2.0021163758289321E-7	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.999924363769146	WITHOUT_CLASSIFICATION	7.56362308540191E-5	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999519263187645	WITHOUT_CLASSIFICATION	4.807368123543267E-5	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999998808330216	WITHOUT_CLASSIFICATION	1.191669783895821E-6	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999996910735673	WITHOUT_CLASSIFICATION	3.0892643261656166E-7	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999995960458735	WITHOUT_CLASSIFICATION	4.0395412640268375E-7	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999933180487041	WITHOUT_CLASSIFICATION	6.681951295995668E-6	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976367998663	WITHOUT_CLASSIFICATION	2.363200133593247E-6	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999417819552616	WITHOUT_CLASSIFICATION	5.821804473840296E-5	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999973116920553	WITHOUT_CLASSIFICATION	2.6883079447598684E-6	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999229211863794	WITHOUT_CLASSIFICATION	7.70788136206344E-5	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999748264714411	WITHOUT_CLASSIFICATION	2.517352855889568E-5	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999950609293253	WITHOUT_CLASSIFICATION	4.939070674629947E-6	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997209213909	WITHOUT_CLASSIFICATION	2.7907860907086666E-7	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993601165069	WITHOUT_CLASSIFICATION	6.39883493003776E-7	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99999881828168	WITHOUT_CLASSIFICATION	1.1817183199208173E-6	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999492671700678	WITHOUT_CLASSIFICATION	5.0732829932104995E-5	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999922397679337	WITHOUT_CLASSIFICATION	7.760232066189023E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994780504083	WITHOUT_CLASSIFICATION	5.219495916576206E-7	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999652598112219	WITHOUT_CLASSIFICATION	3.474018877815734E-5	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997828149209	WITHOUT_CLASSIFICATION	2.1718507902982797E-7	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919288010587	WITHOUT_CLASSIFICATION	8.071198941294981E-6	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999948565298422	WITHOUT_CLASSIFICATION	5.143470157793432E-5	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999618767148	WITHOUT_CLASSIFICATION	3.812328519600078E-8	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999993178940972	WITHOUT_CLASSIFICATION	6.821059026932749E-7	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999954676211454	WITHOUT_CLASSIFICATION	4.53237885449893E-6	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999899051026805	WITHOUT_CLASSIFICATION	1.0094897319469222E-5	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999884410886716	WITHOUT_CLASSIFICATION	1.1558911328403417E-5	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999992487413645	WITHOUT_CLASSIFICATION	7.512586354066387E-7	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999979831775323	WITHOUT_CLASSIFICATION	2.0168224676177278E-6	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999978492371772	WITHOUT_CLASSIFICATION	2.1507628229212015E-6	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999987672393302	WITHOUT_CLASSIFICATION	1.2327606697129898E-6	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999995114214811	WITHOUT_CLASSIFICATION	4.885785189094579E-7	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999939420764833	WITHOUT_CLASSIFICATION	6.057923516734293E-6	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999829904008051	WITHOUT_CLASSIFICATION	1.7009599194866615E-5	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999722500468474	WITHOUT_CLASSIFICATION	2.7749953152625107E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999964843494552	WITHOUT_CLASSIFICATION	3.5156505448107243E-6	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999977347274848	WITHOUT_CLASSIFICATION	2.2652725151896546E-6	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999135150074	WITHOUT_CLASSIFICATION	8.648499255591113E-8	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999914042443899	WITHOUT_CLASSIFICATION	8.595755610069919E-6	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999929404369476	WITHOUT_CLASSIFICATION	7.059563052293459E-6	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999989012492057	WITHOUT_CLASSIFICATION	1.0987507943789517E-6	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999518000877803	WITHOUT_CLASSIFICATION	4.819991221974841E-5	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999993335363799	WITHOUT_CLASSIFICATION	6.664636199687345E-7	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999982183263064	WITHOUT_CLASSIFICATION	1.781673693545312E-6	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999699894421675	WITHOUT_CLASSIFICATION	3.00105578325023E-5	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.999795162512493	WITHOUT_CLASSIFICATION	2.0483748750708253E-4	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999994488882975	WITHOUT_CLASSIFICATION	5.511117025932119E-7	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999983042918972	WITHOUT_CLASSIFICATION	1.695708102810159E-6	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999998389366377	WITHOUT_CLASSIFICATION	1.6106336229752327E-6	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999196833329446	WITHOUT_CLASSIFICATION	8.031666705546057E-5	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999878369996779	WITHOUT_CLASSIFICATION	1.2163000322259602E-5	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.999999987995817	WITHOUT_CLASSIFICATION	1.2004183099882754E-8	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999839889854996	WITHOUT_CLASSIFICATION	1.6011014500445606E-5	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999999974242031	WITHOUT_CLASSIFICATION	2.5757969061187733E-8	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999911783768	WITHOUT_CLASSIFICATION	8.821623210906494E-9	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999839810966529	WITHOUT_CLASSIFICATION	1.6018903347123438E-5	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999916054338972	WITHOUT_CLASSIFICATION	8.394566102865896E-6	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999970382204983	WITHOUT_CLASSIFICATION	2.96177950173351E-6	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.999998767439354	WITHOUT_CLASSIFICATION	1.2325606459480068E-6	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999988531932908	WITHOUT_CLASSIFICATION	1.1468067092399486E-6	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999938751747287	WITHOUT_CLASSIFICATION	6.1248252712774356E-6	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999825149273868	WITHOUT_CLASSIFICATION	1.748507261319944E-5	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999987396312875	WITHOUT_CLASSIFICATION	1.2603687125950384E-6	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9995821894071257	WITHOUT_CLASSIFICATION	4.1781059287421447E-4	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999805523294618	WITHOUT_CLASSIFICATION	1.944767053820057E-5	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999991476723441	WITHOUT_CLASSIFICATION	8.523276557892425E-7	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9931797774458198	WITHOUT_CLASSIFICATION	0.006820222554180267	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999998592302204	WITHOUT_CLASSIFICATION	1.4076977967750108E-7	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999772369208052	WITHOUT_CLASSIFICATION	2.2763079194744938E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999872245488036	WITHOUT_CLASSIFICATION	1.277545119641528E-5	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999877945155782	WITHOUT_CLASSIFICATION	1.2205484421803502E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999746848799	WITHOUT_CLASSIFICATION	2.5315120093619895E-8	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999925490858547	WITHOUT_CLASSIFICATION	7.450914145358308E-6	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.999998365672841	WITHOUT_CLASSIFICATION	1.634327159080764E-6	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999691383295028	WITHOUT_CLASSIFICATION	3.0861670497115486E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999942876687907	WITHOUT_CLASSIFICATION	5.712331209186995E-6	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999998151011273	WITHOUT_CLASSIFICATION	1.8489887264557567E-7	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999795832424991	WITHOUT_CLASSIFICATION	2.041675750085349E-5	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999998105009306	WITHOUT_CLASSIFICATION	1.894990695783744E-7	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999264777141789	WITHOUT_CLASSIFICATION	7.35222858210673E-5	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.999966206567913	WITHOUT_CLASSIFICATION	3.379343208702437E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998010187473	WITHOUT_CLASSIFICATION	1.9898125260437663E-7	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999990460285806	WITHOUT_CLASSIFICATION	9.539714193820602E-7	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999985444590953	WITHOUT_CLASSIFICATION	1.4555409047100686E-5	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999991620541481	WITHOUT_CLASSIFICATION	8.379458518847857E-6	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999250551607639	WITHOUT_CLASSIFICATION	7.494483923610057E-5	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999844359525771	WITHOUT_CLASSIFICATION	1.5564047422839393E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999251165405998	WITHOUT_CLASSIFICATION	7.488345940019403E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999935382440711	WITHOUT_CLASSIFICATION	6.461755928875116E-6	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999965827238	WITHOUT_CLASSIFICATION	3.41727618609504E-9	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.999999641434212	WITHOUT_CLASSIFICATION	3.5856578799796557E-7	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9999701999807142	WITHOUT_CLASSIFICATION	2.9800019285826343E-5	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999965026634129	WITHOUT_CLASSIFICATION	3.4973365871319552E-6	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.999999641434212	WITHOUT_CLASSIFICATION	3.5856578799796557E-7	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999988982615122	WITHOUT_CLASSIFICATION	1.1017384877706995E-6	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.999963450722812	WITHOUT_CLASSIFICATION	3.654927718799982E-5	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999993653944651	WITHOUT_CLASSIFICATION	6.34605534835286E-7	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999946355723305	WITHOUT_CLASSIFICATION	5.364427669497737E-6	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999976480473249	WITHOUT_CLASSIFICATION	2.351952674992237E-6	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999586690084638	WITHOUT_CLASSIFICATION	4.1330991536269566E-5	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.999945727000105	WITHOUT_CLASSIFICATION	5.427299989508726E-5	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999986519748415	WITHOUT_CLASSIFICATION	1.3480251585692492E-6	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.999974749156562	WITHOUT_CLASSIFICATION	2.5250843437971782E-5	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999828285180226	WITHOUT_CLASSIFICATION	1.717148197745466E-5	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999998601946607	WITHOUT_CLASSIFICATION	1.398053391717717E-7	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999992500165431	WITHOUT_CLASSIFICATION	7.499834568118285E-7	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999625193341	WITHOUT_CLASSIFICATION	3.74806658446732E-8	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999988364623921	WITHOUT_CLASSIFICATION	1.1635376079017838E-6	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999996962992358	WITHOUT_CLASSIFICATION	3.037007642078816E-6	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.999999633513514	WITHOUT_CLASSIFICATION	3.664864860008831E-7	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999803238501975	WITHOUT_CLASSIFICATION	1.967614980237361E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999803238501975	WITHOUT_CLASSIFICATION	1.967614980237361E-5	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998002703201	WITHOUT_CLASSIFICATION	1.997296798865989E-7	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9997160711132974	WITHOUT_CLASSIFICATION	2.83928886702541E-4	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999584358351127	WITHOUT_CLASSIFICATION	4.156416488736466E-5	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.999939929706658	WITHOUT_CLASSIFICATION	6.00702933420643E-5	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9992754094421874	WITHOUT_CLASSIFICATION	7.245905578126183E-4	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.998988496286368	WITHOUT_CLASSIFICATION	0.001011503713631913	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999838767583304	WITHOUT_CLASSIFICATION	1.612324166954534E-5	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999987394814974	WITHOUT_CLASSIFICATION	1.2605185025777887E-6	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999974569095089	WITHOUT_CLASSIFICATION	2.5430904910809194E-6	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9996283703835398	WITHOUT_CLASSIFICATION	3.716296164601571E-4	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999367916188162	WITHOUT_CLASSIFICATION	6.320838118375197E-5	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999096397977	WITHOUT_CLASSIFICATION	9.036020233641552E-8	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999915674835929	WITHOUT_CLASSIFICATION	8.432516407064295E-6	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999952664321526	WITHOUT_CLASSIFICATION	4.733567847399692E-6	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.999817607106114	WITHOUT_CLASSIFICATION	1.823928938860826E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999933180487041	WITHOUT_CLASSIFICATION	6.681951295995668E-6	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999523496497127	WITHOUT_CLASSIFICATION	4.7650350287310564E-5	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999987204164567	WITHOUT_CLASSIFICATION	1.2795835433101258E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9973204738712093	WITHOUT_CLASSIFICATION	0.002679526128790793	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999853993533774	WITHOUT_CLASSIFICATION	1.4600646622627678E-5	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999991156394027	WITHOUT_CLASSIFICATION	8.84360597287023E-7	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999935748124414	WITHOUT_CLASSIFICATION	6.425187558626606E-6	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999600326099	WITHOUT_CLASSIFICATION	3.996738998574875E-8	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999904635605	WITHOUT_CLASSIFICATION	9.536439578945065E-9	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999988202670909	WITHOUT_CLASSIFICATION	1.1797329091113217E-6	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999996406346261	WITHOUT_CLASSIFICATION	3.593653739406603E-7	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.999999989112866	WITHOUT_CLASSIFICATION	1.0887134044208256E-8	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999795699833316	WITHOUT_CLASSIFICATION	2.0430016668357774E-5	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9992976110719082	WITHOUT_CLASSIFICATION	7.023889280916904E-4	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.999982267512359	WITHOUT_CLASSIFICATION	1.7732487641037185E-5	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999957179539039	WITHOUT_CLASSIFICATION	4.2820460962297655E-6	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999994141163328	WITHOUT_CLASSIFICATION	5.858836672052527E-6	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999384654670506	WITHOUT_CLASSIFICATION	6.153453294944355E-5	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999958907523577	WITHOUT_CLASSIFICATION	4.1092476423759575E-6	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999977371851599	WITHOUT_CLASSIFICATION	2.2628148401070916E-5	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999968656811624	WITHOUT_CLASSIFICATION	3.1343188376119943E-6	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999787620325625	WITHOUT_CLASSIFICATION	2.1237967437454887E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999837451063408	WITHOUT_CLASSIFICATION	1.625489365914364E-5	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999971409442417	WITHOUT_CLASSIFICATION	2.859055758250037E-6	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999859644732467	WITHOUT_CLASSIFICATION	1.4035526753261422E-5	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999191167276811	WITHOUT_CLASSIFICATION	8.088327231897959E-5	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999988148972505	WITHOUT_CLASSIFICATION	1.1851027494777452E-6	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999903326329206	WITHOUT_CLASSIFICATION	9.667367079481052E-6	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999985603934567	WITHOUT_CLASSIFICATION	1.4396065433138419E-6	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9998707159131256	WITHOUT_CLASSIFICATION	1.292840868744306E-4	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999996331627283	WITHOUT_CLASSIFICATION	3.6683727173596874E-7	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964229663443	WITHOUT_CLASSIFICATION	3.5770336558034E-6	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989315831603	WITHOUT_CLASSIFICATION	1.0684168397483665E-6	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999903153120443	WITHOUT_CLASSIFICATION	9.684687955582581E-6	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.999995476829689	WITHOUT_CLASSIFICATION	4.523170310937916E-6	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999997476163936	WITHOUT_CLASSIFICATION	2.5238360640258026E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998197883065648	WITHOUT_CLASSIFICATION	1.8021169343525144E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998197883065648	WITHOUT_CLASSIFICATION	1.8021169343525144E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999996994109573	WITHOUT_CLASSIFICATION	3.005890426139904E-7	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999809215941	WITHOUT_CLASSIFICATION	1.9078405801277343E-8	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999985776633894	WITHOUT_CLASSIFICATION	1.4223366105229865E-6	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999746668847515	WITHOUT_CLASSIFICATION	2.5333115248554623E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999985776633894	WITHOUT_CLASSIFICATION	1.4223366105229865E-6	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999906030829952	WITHOUT_CLASSIFICATION	9.396917004797415E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999950651997591	WITHOUT_CLASSIFICATION	4.9348002409123635E-6	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.999987346512976	WITHOUT_CLASSIFICATION	1.265348702405378E-5	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999969103035449	WITHOUT_CLASSIFICATION	3.089696455260659E-6	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999873537803232	WITHOUT_CLASSIFICATION	1.2646219676834307E-5	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999578104412666	WITHOUT_CLASSIFICATION	4.2189558733298755E-5	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998131610054	WITHOUT_CLASSIFICATION	1.868389945915371E-7	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999998680324627	WITHOUT_CLASSIFICATION	1.319675373737045E-7	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9993901151307685	WITHOUT_CLASSIFICATION	6.098848692314318E-4	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.99992793623729	WITHOUT_CLASSIFICATION	7.206376270994656E-5	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.999781175658972	WITHOUT_CLASSIFICATION	2.1882434102813559E-4	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.999997086512719	WITHOUT_CLASSIFICATION	2.9134872809944456E-6	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.999996638496293	WITHOUT_CLASSIFICATION	3.361503706890277E-6	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999961958520729	WITHOUT_CLASSIFICATION	3.80414792706772E-6	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999901764136	WITHOUT_CLASSIFICATION	9.823586470422797E-9	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999170753253	WITHOUT_CLASSIFICATION	8.292467470546394E-8	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999721438869245	WITHOUT_CLASSIFICATION	2.7856113075536272E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999721438869245	WITHOUT_CLASSIFICATION	2.7856113075536272E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999678774215212	WITHOUT_CLASSIFICATION	3.212257847884158E-5	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999976335771034	WITHOUT_CLASSIFICATION	2.3664228966698937E-6	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999553974923	WITHOUT_CLASSIFICATION	4.4602507679194015E-8	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9983372044596344	WITHOUT_CLASSIFICATION	0.0016627955403655777	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999616610603	WITHOUT_CLASSIFICATION	3.833893962156151E-8	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9998694736512679	WITHOUT_CLASSIFICATION	1.3052634873211795E-4	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999810354605138	WITHOUT_CLASSIFICATION	1.89645394862725E-5	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.999789688727343	WITHOUT_CLASSIFICATION	2.1031127265702833E-4	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999954338714265	WITHOUT_CLASSIFICATION	4.566128573548824E-6	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999996900267473	WITHOUT_CLASSIFICATION	3.0997325264298187E-7	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999995527596238	WITHOUT_CLASSIFICATION	4.472403762514598E-7	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999993632590014	WITHOUT_CLASSIFICATION	6.367409986585892E-7	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999942131250539	WITHOUT_CLASSIFICATION	5.7868749461167914E-6	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999996987156405	WITHOUT_CLASSIFICATION	3.012843593916518E-7	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999992475847634	WITHOUT_CLASSIFICATION	7.524152364726819E-7	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999971246645083	WITHOUT_CLASSIFICATION	2.875335491747981E-6	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999594574691817	WITHOUT_CLASSIFICATION	4.05425308182822E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999132317771595	WITHOUT_CLASSIFICATION	8.676822284042796E-5	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.999991228880948	WITHOUT_CLASSIFICATION	8.771119051936457E-6	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999997740956285	WITHOUT_CLASSIFICATION	2.2590437141038953E-7	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999992167132394	WITHOUT_CLASSIFICATION	7.832867604479212E-7	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999915652595848	WITHOUT_CLASSIFICATION	8.43474041518389E-6	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999664669752	WITHOUT_CLASSIFICATION	3.353302473362226E-8	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9944143781952878	WITHOUT_CLASSIFICATION	0.0055856218047122454	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999824558867579	WITHOUT_CLASSIFICATION	1.75441132420265E-5	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999995331025422	WITHOUT_CLASSIFICATION	4.668974579201373E-7	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999976062284944	WITHOUT_CLASSIFICATION	2.3937715055957976E-6	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999975522027181	WITHOUT_CLASSIFICATION	2.4477972819156967E-6	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999895485933944	WITHOUT_CLASSIFICATION	1.0451406605562727E-5	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999993605010989	WITHOUT_CLASSIFICATION	6.394989011395826E-7	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999994815357327	WITHOUT_CLASSIFICATION	5.184642674102595E-7	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999940508839528	WITHOUT_CLASSIFICATION	5.949116047255782E-6	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999840448571901	WITHOUT_CLASSIFICATION	1.5955142809897536E-5	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999919680785719	WITHOUT_CLASSIFICATION	8.031921428081459E-6	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998276966267882	WITHOUT_CLASSIFICATION	1.7230337321192578E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999965817939792	WITHOUT_CLASSIFICATION	3.418206020648473E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999972901058974	WITHOUT_CLASSIFICATION	2.7098941025598596E-6	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999954004150313	WITHOUT_CLASSIFICATION	4.599584968624718E-6	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999558855723	WITHOUT_CLASSIFICATION	4.4114427644454054E-8	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999952177570695	WITHOUT_CLASSIFICATION	4.7822429306164285E-6	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999998579452772	WITHOUT_CLASSIFICATION	1.4205472271869778E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996153269967	WITHOUT_CLASSIFICATION	3.8467300324500804E-7	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9998223000247234	WITHOUT_CLASSIFICATION	1.7769997527666967E-4	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9562264695446644	WITHOUT_CLASSIFICATION	0.04377353045533572	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999597994699	WITHOUT_CLASSIFICATION	4.0200530068050514E-8	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999995741003402	WITHOUT_CLASSIFICATION	4.258996597210183E-7	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9844153979364485	WITHOUT_CLASSIFICATION	0.015584602063551578	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999985316752757	WITHOUT_CLASSIFICATION	1.4683247241890504E-6	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999904331304281	WITHOUT_CLASSIFICATION	9.566869571821296E-6	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999987565919675	WITHOUT_CLASSIFICATION	1.2434080325124822E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983647431848	WITHOUT_CLASSIFICATION	1.6352568151517565E-6	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999999612805153	WITHOUT_CLASSIFICATION	3.8719484693164515E-7	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999994484702	WITHOUT_CLASSIFICATION	5.515298057703657E-10	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999963800881011	WITHOUT_CLASSIFICATION	3.619911898938411E-6	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9998937118052242	WITHOUT_CLASSIFICATION	1.0628819477579244E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999963956689081	WITHOUT_CLASSIFICATION	3.604331091923243E-6	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999963956689081	WITHOUT_CLASSIFICATION	3.604331091923243E-6	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999460966331	WITHOUT_CLASSIFICATION	5.3903366764947435E-8	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999873258063021	WITHOUT_CLASSIFICATION	1.2674193697935227E-5	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999997139330774	WITHOUT_CLASSIFICATION	2.860669225822575E-6	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999971168569376	WITHOUT_CLASSIFICATION	2.883143062517301E-6	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999997668519211	WITHOUT_CLASSIFICATION	2.331480788976633E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999675443592054	WITHOUT_CLASSIFICATION	3.245564079459324E-5	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999673315440981	WITHOUT_CLASSIFICATION	3.266845590201435E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999987598234824	WITHOUT_CLASSIFICATION	1.2401765176008757E-6	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999273283152	WITHOUT_CLASSIFICATION	7.267168483721133E-8	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999542986245	WITHOUT_CLASSIFICATION	4.5701375408407435E-8	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999898713753813	WITHOUT_CLASSIFICATION	1.0128624618774072E-5	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999988866290934	WITHOUT_CLASSIFICATION	1.1133709066322927E-6	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999935492754159	WITHOUT_CLASSIFICATION	6.45072458409181E-5	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999944098168122	WITHOUT_CLASSIFICATION	5.590183187857144E-6	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999982593123943	WITHOUT_CLASSIFICATION	1.74068760569678E-5	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999938155976464	WITHOUT_CLASSIFICATION	6.1844023535472316E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998370940317	WITHOUT_CLASSIFICATION	1.629059682610871E-7	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9999920824795756	WITHOUT_CLASSIFICATION	7.917520424385228E-6	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999254099298	WITHOUT_CLASSIFICATION	7.459007024633495E-8	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999859251226221	WITHOUT_CLASSIFICATION	1.4074877377912445E-5	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999975776269784	WITHOUT_CLASSIFICATION	2.4223730216278748E-6	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999970911174645	WITHOUT_CLASSIFICATION	2.908882535462657E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999459414892589	WITHOUT_CLASSIFICATION	5.405851074103055E-5	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999968686538012	WITHOUT_CLASSIFICATION	3.1313461987605357E-6	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.999741673737656	WITHOUT_CLASSIFICATION	2.583262623440154E-4	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9996955467521805	WITHOUT_CLASSIFICATION	3.044532478194963E-4	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999346076345968	WITHOUT_CLASSIFICATION	6.539236540320252E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999381515446953	WITHOUT_CLASSIFICATION	6.18484553047137E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999993689035549	WITHOUT_CLASSIFICATION	6.310964450592531E-7	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999459414892589	WITHOUT_CLASSIFICATION	5.405851074103055E-5	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999950711845573	WITHOUT_CLASSIFICATION	4.928815442724851E-6	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999998710609	WITHOUT_CLASSIFICATION	1.2893911784661548E-10	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9998726221334238	WITHOUT_CLASSIFICATION	1.273778665762287E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999987094741928	WITHOUT_CLASSIFICATION	1.2905258071098806E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999998653043	WITHOUT_CLASSIFICATION	1.3469573053275993E-10	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999997839565019	WITHOUT_CLASSIFICATION	2.1604349807600488E-7	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999870844760638	WITHOUT_CLASSIFICATION	1.2915523936254397E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999992201635	WITHOUT_CLASSIFICATION	7.798365204830299E-10	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999439018750381	WITHOUT_CLASSIFICATION	5.609812496183997E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999987094741928	WITHOUT_CLASSIFICATION	1.2905258071098806E-6	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999527974941	WITHOUT_CLASSIFICATION	4.7202505854994554E-8	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999991188411	WITHOUT_CLASSIFICATION	8.811590126002356E-10	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999995782146102	WITHOUT_CLASSIFICATION	4.2178538980144285E-7	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999404987042443	WITHOUT_CLASSIFICATION	5.950129575582259E-5	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999996670365094	WITHOUT_CLASSIFICATION	3.3296349056693376E-7	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999995527596238	WITHOUT_CLASSIFICATION	4.472403762514598E-7	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999964344074	WITHOUT_CLASSIFICATION	3.5655926628051102E-9	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999999000559217	WITHOUT_CLASSIFICATION	9.994407838088609E-8	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999999680137367	WITHOUT_CLASSIFICATION	3.1986263300665315E-7	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999930635252501	WITHOUT_CLASSIFICATION	6.9364747498794305E-6	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999980337839829	WITHOUT_CLASSIFICATION	1.9662160171812056E-6	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999987864293068	WITHOUT_CLASSIFICATION	1.213570693200759E-6	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999925859389522	WITHOUT_CLASSIFICATION	7.414061047718641E-6	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999920646046782	WITHOUT_CLASSIFICATION	7.935395321749597E-6	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999763381567507	WITHOUT_CLASSIFICATION	2.3661843249280748E-5	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999829250020214	WITHOUT_CLASSIFICATION	1.707499797858019E-5	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999936402481353	WITHOUT_CLASSIFICATION	6.359751864709858E-5	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999945747386996	WITHOUT_CLASSIFICATION	5.425261300474653E-6	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999842098164397	WITHOUT_CLASSIFICATION	1.5790183560392736E-5	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.999996653138689	WITHOUT_CLASSIFICATION	3.346861311019591E-6	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.999996153942058	WITHOUT_CLASSIFICATION	3.846057941936118E-6	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999774370111967	WITHOUT_CLASSIFICATION	2.2562988803245245E-5	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999996746875248	WITHOUT_CLASSIFICATION	3.253124752125527E-7	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999997572204797	WITHOUT_CLASSIFICATION	2.427795202190413E-7	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999992140650872	WITHOUT_CLASSIFICATION	7.859349127634755E-7	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9998236603313955	WITHOUT_CLASSIFICATION	1.7633966860445904E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9998024502379902	WITHOUT_CLASSIFICATION	1.9754976200978306E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999997208226542	WITHOUT_CLASSIFICATION	2.791773457838914E-7	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999982547644528	WITHOUT_CLASSIFICATION	1.7452355471721196E-6	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999132179569	WITHOUT_CLASSIFICATION	8.678204307267701E-8	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999668358621364	WITHOUT_CLASSIFICATION	3.3164137863677725E-5	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9997983583056622	WITHOUT_CLASSIFICATION	2.016416943379131E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999992228951579	WITHOUT_CLASSIFICATION	7.771048421351294E-7	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993315189391533	WITHOUT_CLASSIFICATION	6.684810608468064E-4	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997245290107557	WITHOUT_CLASSIFICATION	2.75470989244351E-4	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.999997132102713	WITHOUT_CLASSIFICATION	2.8678972870994587E-6	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999667015534136	WITHOUT_CLASSIFICATION	3.329844658638298E-5	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999997296880949	WITHOUT_CLASSIFICATION	2.703119051191169E-7	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999923820956316	WITHOUT_CLASSIFICATION	7.6179043684107535E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999923820956316	WITHOUT_CLASSIFICATION	7.6179043684107535E-6	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999999608112002	WITHOUT_CLASSIFICATION	3.9188799805524835E-7	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999714097704812	WITHOUT_CLASSIFICATION	2.8590229518822045E-5	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999873235101291	WITHOUT_CLASSIFICATION	1.2676489870859912E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999974230076949	WITHOUT_CLASSIFICATION	2.5769923051657864E-6	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999943491829991	WITHOUT_CLASSIFICATION	5.650817000890073E-6	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999963457531613	WITHOUT_CLASSIFICATION	3.6542468386555946E-6	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999986695730526	WITHOUT_CLASSIFICATION	1.3304269474355526E-6	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999979371197126	WITHOUT_CLASSIFICATION	2.0628802872703076E-6	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999984000952393	WITHOUT_CLASSIFICATION	1.5999047606924385E-6	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999842782265	WITHOUT_CLASSIFICATION	1.5721773539334005E-8	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999992075531121	WITHOUT_CLASSIFICATION	7.924468879625055E-7	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999983888390713	WITHOUT_CLASSIFICATION	1.61116092870519E-5	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999756557270434	WITHOUT_CLASSIFICATION	2.4344272956672428E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999923820956316	WITHOUT_CLASSIFICATION	7.6179043684107535E-6	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999949898509316	WITHOUT_CLASSIFICATION	5.010149068309083E-6	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999996279406981	WITHOUT_CLASSIFICATION	3.7205930196954003E-7	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999997178627389	WITHOUT_CLASSIFICATION	2.8213726103795584E-7	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999969822068634	WITHOUT_CLASSIFICATION	3.0177931366016287E-6	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999996556064489	WITHOUT_CLASSIFICATION	3.4439355106655254E-7	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999846484852073	WITHOUT_CLASSIFICATION	1.535151479272364E-5	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999992795270548	WITHOUT_CLASSIFICATION	7.204729451103841E-7	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999893856819577	WITHOUT_CLASSIFICATION	1.0614318042267398E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999963783967079	WITHOUT_CLASSIFICATION	3.6216032920933365E-6	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999728421316842	WITHOUT_CLASSIFICATION	2.715786831570873E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999977733491329	WITHOUT_CLASSIFICATION	2.226650867191056E-6	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993315189391533	WITHOUT_CLASSIFICATION	6.684810608468064E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999923820956316	WITHOUT_CLASSIFICATION	7.6179043684107535E-6	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999906083388264	WITHOUT_CLASSIFICATION	9.391661173747203E-6	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999990318260057	WITHOUT_CLASSIFICATION	9.681739943011765E-7	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999980771202401	WITHOUT_CLASSIFICATION	1.9228797599135193E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9998537964315162	WITHOUT_CLASSIFICATION	1.4620356848379798E-4	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999996062480746	WITHOUT_CLASSIFICATION	3.937519253986033E-7	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999824560215481	WITHOUT_CLASSIFICATION	1.754397845190708E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910316050492	WITHOUT_CLASSIFICATION	8.96839495073332E-6	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999715614590214	WITHOUT_CLASSIFICATION	2.8438540978518758E-5	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999797538747247	WITHOUT_CLASSIFICATION	2.0246125275355633E-5	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999869006067376	WITHOUT_CLASSIFICATION	1.3099393262382878E-5	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999899078726504	WITHOUT_CLASSIFICATION	1.009212734955951E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999882499315632	WITHOUT_CLASSIFICATION	1.175006843679547E-4	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999996564234656	WITHOUT_CLASSIFICATION	3.435765343840933E-7	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999811683217262	WITHOUT_CLASSIFICATION	1.8831678273752674E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999906030829952	WITHOUT_CLASSIFICATION	9.396917004797415E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999984403310815	WITHOUT_CLASSIFICATION	1.559668918386803E-6	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999999986558746	WITHOUT_CLASSIFICATION	1.3441254010859658E-8	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999982998817489	WITHOUT_CLASSIFICATION	1.7001182511568998E-6	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999996220074496	WITHOUT_CLASSIFICATION	3.779925503356308E-7	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999993237082697	WITHOUT_CLASSIFICATION	6.762917303170768E-7	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999878032339123	WITHOUT_CLASSIFICATION	1.2196766087516373E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999878032339123	WITHOUT_CLASSIFICATION	1.2196766087516373E-5	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999998208641155	WITHOUT_CLASSIFICATION	1.7913588437273889E-7	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999973960000059	WITHOUT_CLASSIFICATION	2.6039999940968097E-6	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999975690862961	WITHOUT_CLASSIFICATION	2.4309137038970254E-6	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999879819813592	WITHOUT_CLASSIFICATION	1.2018018640856373E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999996630004298	WITHOUT_CLASSIFICATION	3.3699957019596162E-6	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999994674430498	WITHOUT_CLASSIFICATION	5.325569502760145E-7	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999922218294329	WITHOUT_CLASSIFICATION	7.778170567025646E-6	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999739013732083	WITHOUT_CLASSIFICATION	2.6098626791709602E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999739013732083	WITHOUT_CLASSIFICATION	2.6098626791709602E-5	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999930137782999	WITHOUT_CLASSIFICATION	6.986221700130717E-6	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999306433471636	WITHOUT_CLASSIFICATION	6.935665283629977E-5	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999994577935128	WITHOUT_CLASSIFICATION	5.422064871264236E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999970676958979	WITHOUT_CLASSIFICATION	2.9323041020282E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999970676958979	WITHOUT_CLASSIFICATION	2.9323041020282E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999970676958979	WITHOUT_CLASSIFICATION	2.9323041020282E-6	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999373024556774	WITHOUT_CLASSIFICATION	6.269754432269861E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999998752054107	WITHOUT_CLASSIFICATION	1.2479458940209257E-7	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999913759034019	WITHOUT_CLASSIFICATION	8.624096598033191E-6	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9993703410694104	WITHOUT_CLASSIFICATION	6.296589305896089E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999497436350959	WITHOUT_CLASSIFICATION	5.02563649041382E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999923820956316	WITHOUT_CLASSIFICATION	7.6179043684107535E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999923820956316	WITHOUT_CLASSIFICATION	7.6179043684107535E-6	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999951977215551	WITHOUT_CLASSIFICATION	4.80227844489775E-6	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999897828671	WITHOUT_CLASSIFICATION	1.0217132938673682E-8	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999791428329012	WITHOUT_CLASSIFICATION	2.0857167098729378E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999991869700223	WITHOUT_CLASSIFICATION	8.130299775831612E-7	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999952981591971	WITHOUT_CLASSIFICATION	4.7018408029209E-6	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999910337698366	WITHOUT_CLASSIFICATION	8.966230163328931E-6	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999741403478991	WITHOUT_CLASSIFICATION	2.585965210085157E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999901471537023	WITHOUT_CLASSIFICATION	9.852846297681619E-6	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999984130610187	WITHOUT_CLASSIFICATION	1.5869389813206878E-6	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999999061775494	WITHOUT_CLASSIFICATION	9.382245059466329E-7	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999990217449554	WITHOUT_CLASSIFICATION	9.782550446133332E-6	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999661240279077	WITHOUT_CLASSIFICATION	3.387597209218288E-5	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999661240279077	WITHOUT_CLASSIFICATION	3.387597209218288E-5	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999814636016999	WITHOUT_CLASSIFICATION	1.8536398300110314E-5	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999814636016999	WITHOUT_CLASSIFICATION	1.8536398300110314E-5	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999811946587611	WITHOUT_CLASSIFICATION	1.8805341238840767E-5	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999638882611083	WITHOUT_CLASSIFICATION	3.6111738891727954E-5	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999638882611083	WITHOUT_CLASSIFICATION	3.6111738891727954E-5	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.999963967266622	WITHOUT_CLASSIFICATION	3.603273337796709E-5	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999545345155351	WITHOUT_CLASSIFICATION	4.546548446493592E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9988573034622285	WITHOUT_CLASSIFICATION	0.001142696537771625	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999878032339123	WITHOUT_CLASSIFICATION	1.2196766087516373E-5	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9998024185108282	WITHOUT_CLASSIFICATION	1.9758148917180024E-4	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999545345155351	WITHOUT_CLASSIFICATION	4.546548446493592E-5	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999879737522724	WITHOUT_CLASSIFICATION	1.2026247727622685E-5	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999731569184142	WITHOUT_CLASSIFICATION	2.6843081585899217E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999917217254818	WITHOUT_CLASSIFICATION	8.278274518327349E-6	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999849473292624	WITHOUT_CLASSIFICATION	1.5052670737648454E-5	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999999648420621	WITHOUT_CLASSIFICATION	3.51579379016945E-7	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999905492277884	WITHOUT_CLASSIFICATION	9.450772211600473E-6	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999999839200946	WITHOUT_CLASSIFICATION	1.607990538959319E-7	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999968951655663	WITHOUT_CLASSIFICATION	3.1048344335930867E-6	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999986664337225	WITHOUT_CLASSIFICATION	1.3335662774588557E-6	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999560217966523	WITHOUT_CLASSIFICATION	4.3978203347616765E-5	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999995503420924	WITHOUT_CLASSIFICATION	4.496579074735022E-7	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999924204256583	WITHOUT_CLASSIFICATION	7.579574341662882E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999917801689813	WITHOUT_CLASSIFICATION	8.219831018706969E-6	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999969166857164	WITHOUT_CLASSIFICATION	3.0833142834958074E-6	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9997621885074686	WITHOUT_CLASSIFICATION	2.378114925313148E-4	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999996745181993	WITHOUT_CLASSIFICATION	3.25481800651073E-7	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999912753332568	WITHOUT_CLASSIFICATION	8.724666743145256E-6	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999987305342131	WITHOUT_CLASSIFICATION	1.2694657869469653E-6	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999987305342131	WITHOUT_CLASSIFICATION	1.2694657869469653E-6	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999989311562266	WITHOUT_CLASSIFICATION	1.0688437733707735E-6	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999848166592377	WITHOUT_CLASSIFICATION	1.518334076227156E-5	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999976999301892	WITHOUT_CLASSIFICATION	2.3000698108756645E-6	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999992421294994	WITHOUT_CLASSIFICATION	7.578705005017945E-7	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999997089548549	WITHOUT_CLASSIFICATION	2.9104514511325674E-7	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999987019126133	WITHOUT_CLASSIFICATION	1.2980873867802722E-6	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999990102695205	WITHOUT_CLASSIFICATION	9.89730479536966E-7	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999996724886393	WITHOUT_CLASSIFICATION	3.2751136070022964E-6	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999992200600117	WITHOUT_CLASSIFICATION	7.799399883224871E-7	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999035506839041	WITHOUT_CLASSIFICATION	9.644931609581788E-5	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999687520470127	WITHOUT_CLASSIFICATION	3.12479529872624E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999882499315632	WITHOUT_CLASSIFICATION	1.175006843679547E-4	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999993846200148	WITHOUT_CLASSIFICATION	6.153799852155753E-7	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999999185312434	WITHOUT_CLASSIFICATION	8.14687565550039E-8	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999942851876548	WITHOUT_CLASSIFICATION	5.714812345288914E-6	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999972934777016	WITHOUT_CLASSIFICATION	2.7065222984104455E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999923473884097	WITHOUT_CLASSIFICATION	7.652611590266856E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999923473884097	WITHOUT_CLASSIFICATION	7.652611590266856E-6	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999766798156545	WITHOUT_CLASSIFICATION	2.3320184345489354E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.999998346172612	WITHOUT_CLASSIFICATION	1.6538273880293956E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999966733214192	WITHOUT_CLASSIFICATION	3.326678580837315E-6	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999956257832192	WITHOUT_CLASSIFICATION	4.3742167807801824E-6	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999931627299747	WITHOUT_CLASSIFICATION	6.837270025264761E-6	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999969485462652	WITHOUT_CLASSIFICATION	3.0514537347975713E-6	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9995090825632617	WITHOUT_CLASSIFICATION	4.909174367382842E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999786003296147	WITHOUT_CLASSIFICATION	2.1399670385312752E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999983884222932	WITHOUT_CLASSIFICATION	1.6115777068081943E-6	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999883129389	WITHOUT_CLASSIFICATION	1.1687061130893039E-8	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9998392463090177	WITHOUT_CLASSIFICATION	1.6075369098230994E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999786003296147	WITHOUT_CLASSIFICATION	2.1399670385312752E-5	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999994517382458	WITHOUT_CLASSIFICATION	5.482617541954478E-6	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999789395983414	WITHOUT_CLASSIFICATION	2.1060401658667438E-5	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999723170007	WITHOUT_CLASSIFICATION	2.7682999255245276E-8	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999956634045707	WITHOUT_CLASSIFICATION	4.336595429242078E-6	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.999999224994074	WITHOUT_CLASSIFICATION	7.750059260160094E-7	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999966841368302	WITHOUT_CLASSIFICATION	3.315863169742044E-6	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999998553959488	WITHOUT_CLASSIFICATION	1.446040511959556E-6	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999998597477293	WITHOUT_CLASSIFICATION	1.4025227065367547E-7	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999805943293	WITHOUT_CLASSIFICATION	1.940567071599491E-8	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999961781811108	WITHOUT_CLASSIFICATION	3.821818889167107E-6	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999978959029623	WITHOUT_CLASSIFICATION	2.1040970377865472E-6	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999838447872	WITHOUT_CLASSIFICATION	1.6155212917883133E-8	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.999997464613019	WITHOUT_CLASSIFICATION	2.535386980951143E-6	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999996510489445	WITHOUT_CLASSIFICATION	3.4895105551603595E-7	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999998126304781	WITHOUT_CLASSIFICATION	1.8736952190400683E-6	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999024542895	WITHOUT_CLASSIFICATION	9.754571054321857E-8	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999994506516188	WITHOUT_CLASSIFICATION	5.493483812771193E-7	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999299870492797	WITHOUT_CLASSIFICATION	7.001295072026195E-5	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999461799941006	WITHOUT_CLASSIFICATION	5.3820005899420366E-5	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999990912754491	WITHOUT_CLASSIFICATION	9.087245510011872E-7	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999410604370512	WITHOUT_CLASSIFICATION	5.8939562948736095E-5	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999415914240625	WITHOUT_CLASSIFICATION	5.840857593739862E-5	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998572729534111	WITHOUT_CLASSIFICATION	1.4272704658894333E-4	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999908991842476	WITHOUT_CLASSIFICATION	9.100815752507503E-6	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999950708309625	WITHOUT_CLASSIFICATION	4.92916903746786E-6	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999276258963268	WITHOUT_CLASSIFICATION	7.237410367321839E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999947052035933	WITHOUT_CLASSIFICATION	5.294796406718963E-6	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999988205572559	WITHOUT_CLASSIFICATION	1.1794427442373477E-6	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999950440522101	WITHOUT_CLASSIFICATION	4.955947789948537E-6	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999591538430103	WITHOUT_CLASSIFICATION	4.084615698970435E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999968241142021	WITHOUT_CLASSIFICATION	3.175885797959521E-6	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999990484708873	WITHOUT_CLASSIFICATION	9.515291127566904E-7	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999901430914084	WITHOUT_CLASSIFICATION	9.856908591498395E-6	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999754115437256	WITHOUT_CLASSIFICATION	2.4588456274414538E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999989662283758	WITHOUT_CLASSIFICATION	1.0337716241868E-6	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999998575875692	WITHOUT_CLASSIFICATION	1.4241243083735823E-7	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999976876508733	WITHOUT_CLASSIFICATION	2.312349126767887E-6	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999959892767764	WITHOUT_CLASSIFICATION	4.010723223686694E-6	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999727555537502	WITHOUT_CLASSIFICATION	2.7244446249773715E-5	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999858532542065	WITHOUT_CLASSIFICATION	1.4146745793598954E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999993289625209	WITHOUT_CLASSIFICATION	6.710374791318237E-7	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999990871257891	WITHOUT_CLASSIFICATION	9.128742107806004E-7	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999998437498009	WITHOUT_CLASSIFICATION	1.5625019904588123E-7	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999968918636154	WITHOUT_CLASSIFICATION	3.1081363846251194E-6	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999979605011055	WITHOUT_CLASSIFICATION	2.0394988945581415E-6	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999982809423898	WITHOUT_CLASSIFICATION	1.7190576100988017E-6	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9998685094040295	WITHOUT_CLASSIFICATION	1.314905959704476E-4	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999829294541767	WITHOUT_CLASSIFICATION	1.707054582331253E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999970529208201	WITHOUT_CLASSIFICATION	2.947079179933204E-6	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999997788209866	WITHOUT_CLASSIFICATION	2.2117901352924794E-7	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972601929362	WITHOUT_CLASSIFICATION	2.739807063830055E-6	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999996883195684	WITHOUT_CLASSIFICATION	3.1168043157739946E-7	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999996791152772	WITHOUT_CLASSIFICATION	3.208847228324334E-7	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999996334252415	WITHOUT_CLASSIFICATION	3.665747584738184E-7	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999975298874629	WITHOUT_CLASSIFICATION	2.4701125370107653E-6	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999992164356135	WITHOUT_CLASSIFICATION	7.83564386518122E-7	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999998477229932	WITHOUT_CLASSIFICATION	1.522770068061568E-6	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999999986222012	WITHOUT_CLASSIFICATION	1.3777987963757742E-8	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999937745387305	WITHOUT_CLASSIFICATION	6.225461269461357E-6	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999934736817383	WITHOUT_CLASSIFICATION	6.526318261612969E-6	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999991207007753	WITHOUT_CLASSIFICATION	8.792992247024169E-7	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999847705349174	WITHOUT_CLASSIFICATION	1.5229465082633425E-5	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999802934138806	WITHOUT_CLASSIFICATION	1.9706586119378225E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999510762576	WITHOUT_CLASSIFICATION	4.8923742350015056E-8	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999869103125287	WITHOUT_CLASSIFICATION	1.3089687471196367E-5	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999136442055292	WITHOUT_CLASSIFICATION	8.635579447079939E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972601929362	WITHOUT_CLASSIFICATION	2.739807063830055E-6	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999991518973818	WITHOUT_CLASSIFICATION	8.481026183068034E-7	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999700356152221	WITHOUT_CLASSIFICATION	2.9964384777831145E-5	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999892529264839	WITHOUT_CLASSIFICATION	1.0747073516069074E-5	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999986950948275	WITHOUT_CLASSIFICATION	1.304905172503607E-6	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999951092675826	WITHOUT_CLASSIFICATION	4.890732417398317E-6	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999985410123513	WITHOUT_CLASSIFICATION	1.4589876487079872E-6	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999983884222932	WITHOUT_CLASSIFICATION	1.6115777068081943E-6	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9997768892641506	WITHOUT_CLASSIFICATION	2.2311073584934925E-4	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999989662283758	WITHOUT_CLASSIFICATION	1.0337716241868E-6	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999224975508362	WITHOUT_CLASSIFICATION	7.750244916379214E-5	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999897069061411	WITHOUT_CLASSIFICATION	1.029309385890454E-5	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999988847290183	WITHOUT_CLASSIFICATION	1.115270981693161E-5	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999823322064574	WITHOUT_CLASSIFICATION	1.7667793542541572E-5	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999732002156189	WITHOUT_CLASSIFICATION	2.6799784381251024E-5	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999993007159907	WITHOUT_CLASSIFICATION	6.992840091378897E-7	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998918022232	WITHOUT_CLASSIFICATION	1.0819777676080321E-7	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999974097803388	WITHOUT_CLASSIFICATION	2.590219661200069E-6	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999926332901081	WITHOUT_CLASSIFICATION	7.366709891937865E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999795530152	WITHOUT_CLASSIFICATION	2.0446984774280532E-8	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999999647147444	WITHOUT_CLASSIFICATION	3.5285255596170267E-7	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999980664610235	WITHOUT_CLASSIFICATION	1.933538976367213E-6	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999720659153	WITHOUT_CLASSIFICATION	2.7934084757635714E-8	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999720659153	WITHOUT_CLASSIFICATION	2.7934084757635714E-8	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999980142951395	WITHOUT_CLASSIFICATION	1.9857048606076544E-6	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999998435576053	WITHOUT_CLASSIFICATION	1.5644239469674178E-6	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999999997489849	WITHOUT_CLASSIFICATION	2.5101510340166326E-9	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999985882384723	WITHOUT_CLASSIFICATION	1.4117615276490285E-6	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999887824502306	WITHOUT_CLASSIFICATION	1.1217549769445844E-5	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999997836106401	WITHOUT_CLASSIFICATION	2.1638935978523E-7	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999997782111586	WITHOUT_CLASSIFICATION	2.2178884143214724E-7	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999991832905292	WITHOUT_CLASSIFICATION	8.1670947071466E-7	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999359745683	WITHOUT_CLASSIFICATION	6.40254316793782E-8	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999995176015554	WITHOUT_CLASSIFICATION	4.823984447206046E-7	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999788538358008	WITHOUT_CLASSIFICATION	2.1146164199299452E-5	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999700122674409	WITHOUT_CLASSIFICATION	2.998773255915044E-5	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999903316628735	WITHOUT_CLASSIFICATION	9.668337126466395E-6	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999999386882	WITHOUT_CLASSIFICATION	6.131179527241939E-10	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999850633858869	WITHOUT_CLASSIFICATION	1.4936614113142738E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999985778013087	WITHOUT_CLASSIFICATION	1.4221986912734643E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999898695914757	WITHOUT_CLASSIFICATION	1.0130408524231267E-5	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999994426398748	WITHOUT_CLASSIFICATION	5.573601251972788E-6	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999955713159699	WITHOUT_CLASSIFICATION	4.4286840300432905E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980061222111	WITHOUT_CLASSIFICATION	1.9938777889984667E-6	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999971227534034	WITHOUT_CLASSIFICATION	2.877246596613626E-6	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999932903250999	WITHOUT_CLASSIFICATION	6.709674900088931E-6	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999893303977857	WITHOUT_CLASSIFICATION	1.0669602214228696E-5	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.999985178241544	WITHOUT_CLASSIFICATION	1.4821758456036555E-5	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9963599384966163	WITHOUT_CLASSIFICATION	0.0036400615033836286	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9985327079131736	WITHOUT_CLASSIFICATION	0.0014672920868263868	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980061222111	WITHOUT_CLASSIFICATION	1.9938777889984667E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980061222111	WITHOUT_CLASSIFICATION	1.9938777889984667E-6	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999975246237636	WITHOUT_CLASSIFICATION	2.4753762363970067E-6	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999989521746732	WITHOUT_CLASSIFICATION	1.0478253267722413E-6	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999960992909201	WITHOUT_CLASSIFICATION	3.9007090798179765E-6	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999971722188599	WITHOUT_CLASSIFICATION	2.8277811401863087E-6	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9863796992114336	WITHOUT_CLASSIFICATION	0.013620300788566431	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999281546002783	WITHOUT_CLASSIFICATION	7.184539972164356E-5	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999948269204693	WITHOUT_CLASSIFICATION	5.173079530725402E-6	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.999936545352058	WITHOUT_CLASSIFICATION	6.345464794199519E-5	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999888318761501	WITHOUT_CLASSIFICATION	1.1168123849936871E-5	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999873378488188	WITHOUT_CLASSIFICATION	1.2662151181112419E-5	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999836416108077	WITHOUT_CLASSIFICATION	1.6358389192315235E-5	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9998114809581505	WITHOUT_CLASSIFICATION	1.8851904184940865E-4	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9998748831709524	WITHOUT_CLASSIFICATION	1.251168290475197E-4	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999993310484003	WITHOUT_CLASSIFICATION	6.689515996551665E-7	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999608424212897	WITHOUT_CLASSIFICATION	3.915757871035961E-5	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999614989165	WITHOUT_CLASSIFICATION	3.85010835729819E-8	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999608940828116	WITHOUT_CLASSIFICATION	3.910591718831522E-5	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999921137350567	WITHOUT_CLASSIFICATION	7.88626494328538E-6	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999978104706994	WITHOUT_CLASSIFICATION	2.1895293006519235E-6	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999040113170464	WITHOUT_CLASSIFICATION	9.598868295356018E-5	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.5030378464527946	IMPLEMENTATION	0.4969621535472054	WITHOUT_CLASSIFICATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999660654038739	WITHOUT_CLASSIFICATION	3.3934596126139436E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999983794000917	WITHOUT_CLASSIFICATION	1.6205999081889287E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999978028402081	WITHOUT_CLASSIFICATION	2.197159791825334E-6	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999879885969796	WITHOUT_CLASSIFICATION	1.2011403020363829E-5	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999847071482939	WITHOUT_CLASSIFICATION	1.5292851706161668E-5	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999128997775	WITHOUT_CLASSIFICATION	8.71002225340285E-8	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999989307068475	WITHOUT_CLASSIFICATION	1.0692931524087745E-6	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999923340404652	WITHOUT_CLASSIFICATION	7.665959534869121E-6	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999992850136039	WITHOUT_CLASSIFICATION	7.149863960930472E-7	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999965312099108	WITHOUT_CLASSIFICATION	3.4687900891489623E-6	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999051916903163	WITHOUT_CLASSIFICATION	9.480830968361602E-5	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999943220020304	WITHOUT_CLASSIFICATION	5.6779979695702804E-6	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999990546542635	WITHOUT_CLASSIFICATION	9.453457363552839E-7	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999997807614053	WITHOUT_CLASSIFICATION	2.1923859470134644E-6	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999972215024103	WITHOUT_CLASSIFICATION	2.778497589708731E-6	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999912564051865	WITHOUT_CLASSIFICATION	8.743594813564552E-6	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999995531120907	WITHOUT_CLASSIFICATION	4.468879092706438E-7	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999278538781085	WITHOUT_CLASSIFICATION	7.214612189158993E-5	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.999999797286049	WITHOUT_CLASSIFICATION	2.0271395100484898E-7	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999968856690234	WITHOUT_CLASSIFICATION	3.114330976615787E-6	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999968883231142	WITHOUT_CLASSIFICATION	3.1116768859290957E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999924215777991	WITHOUT_CLASSIFICATION	7.5784222009387406E-6	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999951877891425	WITHOUT_CLASSIFICATION	4.81221085749819E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999924215777991	WITHOUT_CLASSIFICATION	7.5784222009387406E-6	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.999999704502492	WITHOUT_CLASSIFICATION	2.954975080410797E-7	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999977867036502	WITHOUT_CLASSIFICATION	2.213296349747253E-6	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999770663883847	WITHOUT_CLASSIFICATION	2.2933611615355396E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999967408386146	WITHOUT_CLASSIFICATION	3.259161385304295E-6	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999975177126446	WITHOUT_CLASSIFICATION	2.4822873554565414E-6	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999722401672652	WITHOUT_CLASSIFICATION	2.7759832734910748E-5	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999995400131003	WITHOUT_CLASSIFICATION	4.5998689973622146E-7	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999759866916988	WITHOUT_CLASSIFICATION	2.4013308301204063E-5	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999997347901302	WITHOUT_CLASSIFICATION	2.652098698143834E-7	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999998750679129	WITHOUT_CLASSIFICATION	1.2493208710627154E-6	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999989184589126	WITHOUT_CLASSIFICATION	1.0815410873808843E-6	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999931148392931	WITHOUT_CLASSIFICATION	6.885160706801124E-6	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999998948114484	WITHOUT_CLASSIFICATION	1.0518855155811327E-7	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.999946542669796	WITHOUT_CLASSIFICATION	5.3457330204021807E-5	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999976518952367	WITHOUT_CLASSIFICATION	2.348104763319023E-6	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999984868890958	WITHOUT_CLASSIFICATION	1.5131109042768535E-6	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.999996764863091	WITHOUT_CLASSIFICATION	3.2351369089567E-6	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999997692454721	WITHOUT_CLASSIFICATION	2.3075452786224162E-7	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999920992103684	WITHOUT_CLASSIFICATION	7.900789631626266E-6	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.999995345896224	WITHOUT_CLASSIFICATION	4.654103776002329E-6	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999541088914949	WITHOUT_CLASSIFICATION	4.5891108505039336E-5	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999912404516623	WITHOUT_CLASSIFICATION	8.759548337575877E-6	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.999995840877588	WITHOUT_CLASSIFICATION	4.159122412104475E-6	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9994119531425348	WITHOUT_CLASSIFICATION	5.88046857465242E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999977779570148	WITHOUT_CLASSIFICATION	2.2220429852641507E-6	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999908659467402	WITHOUT_CLASSIFICATION	9.134053259770622E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999975377483307	WITHOUT_CLASSIFICATION	2.462251669330136E-6	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999946225259194	WITHOUT_CLASSIFICATION	5.3774740804784675E-6	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999996292620535	WITHOUT_CLASSIFICATION	3.707379463778145E-7	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999989385502357	WITHOUT_CLASSIFICATION	1.0614497643518494E-6	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999990922887914	WITHOUT_CLASSIFICATION	9.077112086338639E-7	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999951628358321	WITHOUT_CLASSIFICATION	4.8371641677871225E-6	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999960014841	WITHOUT_CLASSIFICATION	3.998515844272688E-9	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999974742046399	WITHOUT_CLASSIFICATION	2.525795359982703E-6	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999995938272506	WITHOUT_CLASSIFICATION	4.0617274942816706E-7	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999840379661329	WITHOUT_CLASSIFICATION	1.5962033867128622E-5	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.999995903695432	WITHOUT_CLASSIFICATION	4.096304568005028E-6	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999997636379855	WITHOUT_CLASSIFICATION	2.3636201439900417E-7	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9999518531598535	WITHOUT_CLASSIFICATION	4.814684014653955E-5	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999632556137	WITHOUT_CLASSIFICATION	3.674438638384031E-8	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.99999451919508	WITHOUT_CLASSIFICATION	5.4808049199928665E-6	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999634394161019	WITHOUT_CLASSIFICATION	3.656058389806608E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9995837887998622	WITHOUT_CLASSIFICATION	4.162112001377199E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999908659467402	WITHOUT_CLASSIFICATION	9.134053259770622E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9998770368974301	WITHOUT_CLASSIFICATION	1.229631025698946E-4	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.999978538481285	WITHOUT_CLASSIFICATION	2.146151871491619E-5	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999948529717111	WITHOUT_CLASSIFICATION	5.147028289003463E-6	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999980913082008	WITHOUT_CLASSIFICATION	1.908691799080442E-6	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999994433572612	WITHOUT_CLASSIFICATION	5.566427387123002E-7	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999899817843838	WITHOUT_CLASSIFICATION	1.0018215616128489E-5	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9996445519059194	WITHOUT_CLASSIFICATION	3.554480940806056E-4	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.999999943042629	WITHOUT_CLASSIFICATION	5.695737100582897E-8	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999989645817497	WITHOUT_CLASSIFICATION	1.035418250299056E-6	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9998603755034747	WITHOUT_CLASSIFICATION	1.3962449652522098E-4	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9999905946411471	WITHOUT_CLASSIFICATION	9.405358852864073E-6	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999993654837119	WITHOUT_CLASSIFICATION	6.345162880947761E-7	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999812088585959	WITHOUT_CLASSIFICATION	1.879114140410339E-5	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999880021073236	WITHOUT_CLASSIFICATION	1.1997892676299361E-5	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999978569895898	WITHOUT_CLASSIFICATION	2.1430104103184805E-6	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999998264252323	WITHOUT_CLASSIFICATION	1.7357476768523244E-7	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999921622801101	WITHOUT_CLASSIFICATION	7.837719889928054E-6	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999990137089158	WITHOUT_CLASSIFICATION	9.862910842126527E-7	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999953680973002	WITHOUT_CLASSIFICATION	4.631902699894219E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9998770368974301	WITHOUT_CLASSIFICATION	1.229631025698946E-4	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999898082985058	WITHOUT_CLASSIFICATION	1.0191701494249761E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9998758362357901	WITHOUT_CLASSIFICATION	1.2416376420989434E-4	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999976513121267	WITHOUT_CLASSIFICATION	2.348687873404786E-6	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999707566472318	WITHOUT_CLASSIFICATION	2.924335276828637E-5	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999997317764566	WITHOUT_CLASSIFICATION	2.682235433820607E-7	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9991891950159134	WITHOUT_CLASSIFICATION	8.108049840865692E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9991891950159134	WITHOUT_CLASSIFICATION	8.108049840865692E-4	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999976411033651	WITHOUT_CLASSIFICATION	2.3588966349396952E-6	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9991891950159134	WITHOUT_CLASSIFICATION	8.108049840865692E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9991891950159134	WITHOUT_CLASSIFICATION	8.108049840865692E-4	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9998636060105169	WITHOUT_CLASSIFICATION	1.3639398948311806E-4	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999999676766553	WITHOUT_CLASSIFICATION	3.232334470375426E-8	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999982549963287	WITHOUT_CLASSIFICATION	1.7450036714064237E-6	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999959659300653	WITHOUT_CLASSIFICATION	4.034069934650286E-6	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999995941694207	WITHOUT_CLASSIFICATION	4.0583057933004804E-7	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999990800381727	WITHOUT_CLASSIFICATION	9.199618271859069E-7	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999209848790637	WITHOUT_CLASSIFICATION	7.901512093627624E-5	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999630811942	WITHOUT_CLASSIFICATION	3.691880585763065E-8	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998422554587714	WITHOUT_CLASSIFICATION	1.5774454122854592E-4	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999899570448989	WITHOUT_CLASSIFICATION	1.0042955100991024E-5	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999923138752859	WITHOUT_CLASSIFICATION	7.686124714171272E-6	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999632137643744	WITHOUT_CLASSIFICATION	3.678623562570612E-5	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999977691338902	WITHOUT_CLASSIFICATION	2.230866109780833E-6	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999982792276155	WITHOUT_CLASSIFICATION	1.720772384534911E-6	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999916774464953	WITHOUT_CLASSIFICATION	8.322553504644688E-6	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.999982027797996	WITHOUT_CLASSIFICATION	1.797220200402176E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999996994109573	WITHOUT_CLASSIFICATION	3.005890426139904E-7	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9998128220243527	WITHOUT_CLASSIFICATION	1.8717797564716694E-4	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999981943578706	WITHOUT_CLASSIFICATION	1.8056421293909578E-6	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999987748537917	WITHOUT_CLASSIFICATION	1.2251462082491E-6	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999898845608762	WITHOUT_CLASSIFICATION	1.0115439123789742E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999858633024177	WITHOUT_CLASSIFICATION	1.4136697582292134E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999996994109573	WITHOUT_CLASSIFICATION	3.005890426139904E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999975377483307	WITHOUT_CLASSIFICATION	2.462251669330136E-6	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9999828256560332	WITHOUT_CLASSIFICATION	1.7174343966761383E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99999881828168	WITHOUT_CLASSIFICATION	1.1817183199208173E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994780504083	WITHOUT_CLASSIFICATION	5.219495916576206E-7	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999942510566097	WITHOUT_CLASSIFICATION	5.748943390289296E-6	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999958158567847	WITHOUT_CLASSIFICATION	4.184143215378478E-6	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.999997395201989	WITHOUT_CLASSIFICATION	2.6047980110215207E-6	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999963392819947	WITHOUT_CLASSIFICATION	3.660718005299332E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999967238794228	WITHOUT_CLASSIFICATION	3.2761205772760326E-6	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.998175067072208	WITHOUT_CLASSIFICATION	0.0018249329277919724	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999505381060796	WITHOUT_CLASSIFICATION	4.9461893920354595E-5	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.999997633267849	WITHOUT_CLASSIFICATION	2.3667321510761796E-6	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999994056260231	WITHOUT_CLASSIFICATION	5.943739769587689E-7	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999922668531196	WITHOUT_CLASSIFICATION	7.733146880422486E-6	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9985921218905824	WITHOUT_CLASSIFICATION	0.0014078781094174864	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999707547449522	WITHOUT_CLASSIFICATION	2.92452550477322E-5	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.999994246122408	WITHOUT_CLASSIFICATION	5.7538775920436105E-6	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999850953283765	WITHOUT_CLASSIFICATION	1.4904671623435176E-5	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999790488524087	WITHOUT_CLASSIFICATION	2.0951147591322454E-5	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999904083814016	WITHOUT_CLASSIFICATION	9.591618598462038E-6	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999332016892984	WITHOUT_CLASSIFICATION	6.679831070152769E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9996607657615834	WITHOUT_CLASSIFICATION	3.3923423841663425E-4	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999998715765858	WITHOUT_CLASSIFICATION	1.2842341425506058E-7	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999967238794228	WITHOUT_CLASSIFICATION	3.2761205772760326E-6	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999978541406634	WITHOUT_CLASSIFICATION	2.1458593366215692E-6	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9999814700811065	WITHOUT_CLASSIFICATION	1.8529918893540714E-5	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999226830806311	WITHOUT_CLASSIFICATION	7.731691936885805E-5	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999965238407647	WITHOUT_CLASSIFICATION	3.476159235339476E-6	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942656877394	WITHOUT_CLASSIFICATION	5.7343122606016825E-6	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9999777934234043	WITHOUT_CLASSIFICATION	2.2206576595738404E-5	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.999997764024748	WITHOUT_CLASSIFICATION	2.235975252054045E-6	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999945391266011	WITHOUT_CLASSIFICATION	5.460873398867554E-6	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999913188013746	WITHOUT_CLASSIFICATION	8.681198625493327E-6	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.99985841986906	WITHOUT_CLASSIFICATION	1.4158013093998922E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999917238941858	WITHOUT_CLASSIFICATION	8.276105814103373E-6	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999913075369715	WITHOUT_CLASSIFICATION	8.692463028433269E-6	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999995560980107	WITHOUT_CLASSIFICATION	4.439019893067973E-7	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.999998362483709	WITHOUT_CLASSIFICATION	1.6375162909353887E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999896955591081	WITHOUT_CLASSIFICATION	1.0304440891991308E-5	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999133325692156	WITHOUT_CLASSIFICATION	8.666743078450342E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999985575504877	WITHOUT_CLASSIFICATION	1.442449512235234E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999917238941858	WITHOUT_CLASSIFICATION	8.276105814103373E-6	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999997211164064	WITHOUT_CLASSIFICATION	2.7888359352151875E-7	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999306945171552	WITHOUT_CLASSIFICATION	6.930548284475225E-5	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999982932619599	WITHOUT_CLASSIFICATION	1.7067380400664684E-6	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999976270572145	WITHOUT_CLASSIFICATION	2.3729427854048215E-6	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999986036472409	WITHOUT_CLASSIFICATION	1.3963527590363334E-6	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999993167130737	WITHOUT_CLASSIFICATION	6.83286926235388E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999896955591081	WITHOUT_CLASSIFICATION	1.0304440891991308E-5	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999994248930971	WITHOUT_CLASSIFICATION	5.751069029057672E-7	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979979839317	WITHOUT_CLASSIFICATION	2.0020160682364534E-6	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999105005277	WITHOUT_CLASSIFICATION	8.949947228608994E-7	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979842599286404	WITHOUT_CLASSIFICATION	0.002015740071359545	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988796112439945	WITHOUT_CLASSIFICATION	0.0011203887560054838	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996094545382752	WITHOUT_CLASSIFICATION	3.9054546172480955E-4	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999969425914764	WITHOUT_CLASSIFICATION	3.0574085235902234E-6	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999969425914764	WITHOUT_CLASSIFICATION	3.0574085235902234E-6	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999990222591567	WITHOUT_CLASSIFICATION	9.777408433035368E-7	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999876624576081	WITHOUT_CLASSIFICATION	1.2337542391978857E-5	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999982009751385	WITHOUT_CLASSIFICATION	1.799024861472623E-6	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999993288177548	WITHOUT_CLASSIFICATION	6.711822451871513E-7	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9997409041038718	WITHOUT_CLASSIFICATION	2.590958961281758E-4	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966687269584	WITHOUT_CLASSIFICATION	3.331273041555856E-6	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944120879952	WITHOUT_CLASSIFICATION	5.587912004827059E-6	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999913367306288	WITHOUT_CLASSIFICATION	8.663269371170897E-6	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999999894077877	WITHOUT_CLASSIFICATION	1.0592212242773048E-8	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985769159206	WITHOUT_CLASSIFICATION	1.4230840792970965E-6	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966687269584	WITHOUT_CLASSIFICATION	3.331273041555856E-6	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944120879952	WITHOUT_CLASSIFICATION	5.587912004827059E-6	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999913367306288	WITHOUT_CLASSIFICATION	8.663269371170897E-6	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999983375858457	WITHOUT_CLASSIFICATION	1.6624141543650749E-6	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9997905764145951	WITHOUT_CLASSIFICATION	2.094235854048683E-4	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999998406319732	WITHOUT_CLASSIFICATION	1.5936802675517105E-7	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999993811518068	WITHOUT_CLASSIFICATION	6.188481932896502E-7	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999996150981401	WITHOUT_CLASSIFICATION	3.849018600218186E-7	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999974816722939	WITHOUT_CLASSIFICATION	2.51832770615504E-6	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9997720761689848	WITHOUT_CLASSIFICATION	2.279238310151562E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9998480908970951	WITHOUT_CLASSIFICATION	1.5190910290489355E-4	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999076572165128	WITHOUT_CLASSIFICATION	9.234278348722252E-5	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999844409014139	WITHOUT_CLASSIFICATION	1.5559098586121832E-5	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999995057377788	WITHOUT_CLASSIFICATION	4.942622211211728E-7	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999659065615959	WITHOUT_CLASSIFICATION	3.409343840400117E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999620107801636	WITHOUT_CLASSIFICATION	3.798921983648866E-5	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999993251305679	WITHOUT_CLASSIFICATION	6.748694321511336E-7	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999997635634592	WITHOUT_CLASSIFICATION	2.3643654080210243E-6	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.999954880657705	WITHOUT_CLASSIFICATION	4.51193422950611E-5	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999918608180418	WITHOUT_CLASSIFICATION	8.139181958112983E-6	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999299993455251	WITHOUT_CLASSIFICATION	7.00006544749479E-5	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999974849146288	WITHOUT_CLASSIFICATION	2.5150853711554698E-6	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9995307792169069	WITHOUT_CLASSIFICATION	4.6922078309309136E-4	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999993908935174	WITHOUT_CLASSIFICATION	6.091064824713326E-7	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999775319362615	WITHOUT_CLASSIFICATION	2.246806373859895E-5	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9983841857261128	WITHOUT_CLASSIFICATION	0.0016158142738871995	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999934898442245	WITHOUT_CLASSIFICATION	6.510155775465401E-6	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999871334244	WITHOUT_CLASSIFICATION	1.2866575568695522E-8	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998718494285341	WITHOUT_CLASSIFICATION	1.2815057146593883E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979107044275	WITHOUT_CLASSIFICATION	2.0892955726026988E-6	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999834272333722	WITHOUT_CLASSIFICATION	1.6572766627869178E-5	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999977560105504	WITHOUT_CLASSIFICATION	2.2439894496161023E-6	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947035066987	WITHOUT_CLASSIFICATION	5.296493301319944E-6	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999980000316659	WITHOUT_CLASSIFICATION	1.9999683341056587E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998010187473	WITHOUT_CLASSIFICATION	1.9898125260437663E-7	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998010187473	WITHOUT_CLASSIFICATION	1.9898125260437663E-7	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999991602065588	WITHOUT_CLASSIFICATION	8.39793441187164E-7	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.999999967650526	WITHOUT_CLASSIFICATION	3.234947404171722E-8	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999898220418879	WITHOUT_CLASSIFICATION	1.0177958112062025E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999882499315632	WITHOUT_CLASSIFICATION	1.175006843679547E-4	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999299046542375	WITHOUT_CLASSIFICATION	7.00953457625528E-5	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999839725491	WITHOUT_CLASSIFICATION	1.602745085441452E-8	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999838737922776	WITHOUT_CLASSIFICATION	1.6126207722477068E-5	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.999986649824766	WITHOUT_CLASSIFICATION	1.3350175233923276E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999935382440711	WITHOUT_CLASSIFICATION	6.461755928875116E-6	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994731015797	WITHOUT_CLASSIFICATION	5.268984203125947E-6	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939994315569	WITHOUT_CLASSIFICATION	6.000568443087838E-6	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999879482522415	WITHOUT_CLASSIFICATION	1.2051747758583175E-5	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923752809291	WITHOUT_CLASSIFICATION	7.624719070965265E-6	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934308955332	WITHOUT_CLASSIFICATION	6.569104466759552E-6	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999895768057367	WITHOUT_CLASSIFICATION	1.0423194263337897E-5	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960894392109	WITHOUT_CLASSIFICATION	3.910560789024558E-6	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999871329044655	WITHOUT_CLASSIFICATION	1.2867095534427846E-5	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944787699994	WITHOUT_CLASSIFICATION	5.521230000602168E-6	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970016205909	WITHOUT_CLASSIFICATION	2.998379409102256E-6	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977220397559	WITHOUT_CLASSIFICATION	2.2779602441768705E-6	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999941052044826	WITHOUT_CLASSIFICATION	5.894795517486825E-6	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999364123724749	WITHOUT_CLASSIFICATION	6.35876275251466E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999659981484018	WITHOUT_CLASSIFICATION	3.4001851598258845E-5	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999994508951475	WITHOUT_CLASSIFICATION	5.491048525612124E-7	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999895922612	WITHOUT_CLASSIFICATION	1.0407738799241608E-8	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999343162499417	WITHOUT_CLASSIFICATION	6.56837500583465E-5	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999998056914801	WITHOUT_CLASSIFICATION	1.943085198941283E-7	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9988696418484959	WITHOUT_CLASSIFICATION	0.001130358151504141	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999659981484018	WITHOUT_CLASSIFICATION	3.4001851598258845E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999659981484018	WITHOUT_CLASSIFICATION	3.4001851598258845E-5	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999883998562135	WITHOUT_CLASSIFICATION	1.1600143786610808E-5	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999995220459164	WITHOUT_CLASSIFICATION	4.779540836254217E-7	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999952440711	WITHOUT_CLASSIFICATION	4.7559288961911594E-8	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999991706954833	WITHOUT_CLASSIFICATION	8.293045166952765E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999917801689813	WITHOUT_CLASSIFICATION	8.219831018706969E-6	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9995307792169069	WITHOUT_CLASSIFICATION	4.6922078309309136E-4	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999995235182949	WITHOUT_CLASSIFICATION	4.7648170510831675E-7	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999629453376118	WITHOUT_CLASSIFICATION	3.7054662388320614E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999994785923833	WITHOUT_CLASSIFICATION	5.214076167610567E-7	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999853974854782	WITHOUT_CLASSIFICATION	1.4602514521833966E-5	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999987433154325	WITHOUT_CLASSIFICATION	1.2566845675381452E-6	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930908267601	WITHOUT_CLASSIFICATION	6.90917323977232E-6	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999938781622022	WITHOUT_CLASSIFICATION	6.121837797800689E-6	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999938781622022	WITHOUT_CLASSIFICATION	6.121837797800689E-6	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999962931321384	WITHOUT_CLASSIFICATION	3.7068678615427006E-6	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999962931321384	WITHOUT_CLASSIFICATION	3.7068678615427006E-6	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990673517741506	WITHOUT_CLASSIFICATION	9.326482258492453E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988708953702	WITHOUT_CLASSIFICATION	1.1291046297846122E-6	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999812801871482	WITHOUT_CLASSIFICATION	1.871981285190986E-5	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988119348618809	WITHOUT_CLASSIFICATION	0.001188065138119112	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999931594626145	WITHOUT_CLASSIFICATION	6.840537385555123E-6	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9998949936682707	WITHOUT_CLASSIFICATION	1.0500633172918212E-4	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922289641645	WITHOUT_CLASSIFICATION	7.771035835403152E-6	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999364699273	WITHOUT_CLASSIFICATION	6.35300726920737E-7	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999927871837077	WITHOUT_CLASSIFICATION	7.212816292376679E-6	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999995191512175	WITHOUT_CLASSIFICATION	4.808487823575654E-7	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999995541033971	WITHOUT_CLASSIFICATION	4.458966028553218E-7	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998197883065648	WITHOUT_CLASSIFICATION	1.8021169343525144E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999958530924914	WITHOUT_CLASSIFICATION	4.146907508637602E-6	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.999957179782319	WITHOUT_CLASSIFICATION	4.282021768100994E-5	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999984403115022	WITHOUT_CLASSIFICATION	1.559688497780549E-6	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999844555794254	WITHOUT_CLASSIFICATION	1.5544420574575812E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999627779542705	WITHOUT_CLASSIFICATION	3.7222045729584836E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999627779542705	WITHOUT_CLASSIFICATION	3.7222045729584836E-5	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999520276056	WITHOUT_CLASSIFICATION	4.7972394329129184E-8	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999566939475647	WITHOUT_CLASSIFICATION	4.330605243529641E-5	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999998214420639	WITHOUT_CLASSIFICATION	1.7855793606715651E-7	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999873259519253	WITHOUT_CLASSIFICATION	1.267404807474758E-5	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999440010678875	WITHOUT_CLASSIFICATION	5.599893211244311E-5	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998815113081039	WITHOUT_CLASSIFICATION	1.1848869189602618E-4	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999996192615004	WITHOUT_CLASSIFICATION	3.8073849963439566E-7	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999623717783083	WITHOUT_CLASSIFICATION	3.7628221691793096E-5	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9969185048368048	WITHOUT_CLASSIFICATION	0.003081495163195187	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999868527049	WITHOUT_CLASSIFICATION	1.3147295266049862E-8	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999583309297	WITHOUT_CLASSIFICATION	4.1669070369491604E-8	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9860444252456853	WITHOUT_CLASSIFICATION	0.013955574754314703	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785645628637	WITHOUT_CLASSIFICATION	2.1435437136240018E-5	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999996876987056	WITHOUT_CLASSIFICATION	3.123012943120628E-7	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9997873061670921	WITHOUT_CLASSIFICATION	2.1269383290799867E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999967634463506	WITHOUT_CLASSIFICATION	3.2365536493461057E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999974465189179	WITHOUT_CLASSIFICATION	2.5534810821016492E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.999999806833103	WITHOUT_CLASSIFICATION	1.9316689704179334E-7	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999998266129907	WITHOUT_CLASSIFICATION	1.7338700924420274E-7	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999984956351787	WITHOUT_CLASSIFICATION	1.5043648212301413E-6	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999948937333	WITHOUT_CLASSIFICATION	5.106266799913961E-9	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999982403321	WITHOUT_CLASSIFICATION	1.7596679160067378E-9	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.999999995695881	WITHOUT_CLASSIFICATION	4.304118939535339E-9	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.999892230575051	WITHOUT_CLASSIFICATION	1.0776942494896407E-4	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999989952406022	WITHOUT_CLASSIFICATION	1.0047593978041378E-6	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999959447039883	WITHOUT_CLASSIFICATION	4.055296011644557E-6	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999999461263402	WITHOUT_CLASSIFICATION	5.387365983786656E-8	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999998774371929	WITHOUT_CLASSIFICATION	1.2256280711986037E-7	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999981621427	WITHOUT_CLASSIFICATION	1.8378573137693294E-9	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999958907523577	WITHOUT_CLASSIFICATION	4.1092476423759575E-6	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999778201564	WITHOUT_CLASSIFICATION	2.2179843618379514E-8	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999994892456715	WITHOUT_CLASSIFICATION	5.107543285009067E-7	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999983381532722	WITHOUT_CLASSIFICATION	1.6618467278212456E-6	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9998419091049195	WITHOUT_CLASSIFICATION	1.580908950804152E-4	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999951395933744	WITHOUT_CLASSIFICATION	4.860406625600816E-6	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999997357092935	WITHOUT_CLASSIFICATION	2.642907064541915E-7	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998370940317	WITHOUT_CLASSIFICATION	1.629059682610871E-7	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.999950452718789	WITHOUT_CLASSIFICATION	4.954728121097219E-5	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999994442481336	WITHOUT_CLASSIFICATION	5.557518663680855E-7	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9994436740925167	WITHOUT_CLASSIFICATION	5.563259074833644E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999995453703063	WITHOUT_CLASSIFICATION	4.5462969369533685E-7	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999238228671151	WITHOUT_CLASSIFICATION	7.61771328848204E-5	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999739620726069	WITHOUT_CLASSIFICATION	2.6037927393165075E-5	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999998679358896	WITHOUT_CLASSIFICATION	1.3206411043609008E-7	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999999713892647	WITHOUT_CLASSIFICATION	2.861073529815328E-7	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998808033351927	WITHOUT_CLASSIFICATION	1.1919666480732855E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999952694278706	WITHOUT_CLASSIFICATION	4.730572129327233E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999721438869245	WITHOUT_CLASSIFICATION	2.7856113075536272E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999932924004774	WITHOUT_CLASSIFICATION	6.707599522603879E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999924865633008	WITHOUT_CLASSIFICATION	7.51343669915952E-6	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999993917898498	WITHOUT_CLASSIFICATION	6.082101503113065E-7	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999203641611573	WITHOUT_CLASSIFICATION	7.963583884277978E-5	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999977289401593	WITHOUT_CLASSIFICATION	2.2710598408022585E-6	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999942364588322	WITHOUT_CLASSIFICATION	5.763541167727843E-6	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999932619151438	WITHOUT_CLASSIFICATION	6.738084856294649E-6	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999845556560447	WITHOUT_CLASSIFICATION	1.5444343955292477E-5	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9997064077874073	WITHOUT_CLASSIFICATION	2.9359221259269043E-4	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999978743829736	WITHOUT_CLASSIFICATION	2.125617026336906E-6	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999885503766462	WITHOUT_CLASSIFICATION	1.1449623353732766E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998455674376159	WITHOUT_CLASSIFICATION	1.5443256238413335E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999992603982389	WITHOUT_CLASSIFICATION	7.396017611279397E-7	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999995811935969	WITHOUT_CLASSIFICATION	4.188064030572145E-7	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999557708379	WITHOUT_CLASSIFICATION	4.4229162037411616E-8	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999981543637274	WITHOUT_CLASSIFICATION	1.8456362725350026E-6	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999999441358107	WITHOUT_CLASSIFICATION	5.586418929695587E-7	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999985944197403	WITHOUT_CLASSIFICATION	1.4055802596721295E-6	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999068065486	WITHOUT_CLASSIFICATION	9.319345130496007E-8	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999926165027936	WITHOUT_CLASSIFICATION	7.38349720639338E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999459414892589	WITHOUT_CLASSIFICATION	5.405851074103055E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999459414892589	WITHOUT_CLASSIFICATION	5.405851074103055E-5	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999973091878069	WITHOUT_CLASSIFICATION	2.690812193022692E-6	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999909613099989	WITHOUT_CLASSIFICATION	9.03869000107829E-6	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999487232049586	WITHOUT_CLASSIFICATION	5.127679504134234E-5	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999860085890414	WITHOUT_CLASSIFICATION	1.3991410958716915E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999284478066	WITHOUT_CLASSIFICATION	7.155219339609903E-8	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.999937541157516	WITHOUT_CLASSIFICATION	6.245884248396451E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999140828946	WITHOUT_CLASSIFICATION	8.591710545614386E-8	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.999999768595238	WITHOUT_CLASSIFICATION	2.3140476200381595E-7	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999873908431902	WITHOUT_CLASSIFICATION	1.2609156809745746E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999999398183913	WITHOUT_CLASSIFICATION	6.018160865332503E-8	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999994477137817	WITHOUT_CLASSIFICATION	5.522862182139541E-7	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999987102453602	WITHOUT_CLASSIFICATION	1.2897546396882643E-6	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999875820688882	WITHOUT_CLASSIFICATION	1.24179311117731E-5	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999997091407488	WITHOUT_CLASSIFICATION	2.908592511717564E-7	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999448829072919	WITHOUT_CLASSIFICATION	5.511709270811519E-5	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9997595187175009	WITHOUT_CLASSIFICATION	2.4048128249911792E-4	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999954680276525	WITHOUT_CLASSIFICATION	4.53197234752958E-6	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999923563206026	WITHOUT_CLASSIFICATION	7.643679397475938E-6	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9976259243429492	WITHOUT_CLASSIFICATION	0.0023740756570508484	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999969171002052	WITHOUT_CLASSIFICATION	3.082899794837905E-6	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999971767184554	WITHOUT_CLASSIFICATION	2.8232815446711246E-6	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999999234460318	WITHOUT_CLASSIFICATION	7.655396819691167E-7	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999724507247025	WITHOUT_CLASSIFICATION	2.7549275297490994E-5	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.999989848302179	WITHOUT_CLASSIFICATION	1.0151697821121903E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999998684902733	WITHOUT_CLASSIFICATION	1.315097266890865E-7	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.999953468091337	WITHOUT_CLASSIFICATION	4.6531908662940774E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999827796561951	WITHOUT_CLASSIFICATION	1.7220343804905726E-5	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999920623029218	WITHOUT_CLASSIFICATION	7.937697078188822E-6	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999885462372604	WITHOUT_CLASSIFICATION	1.1453762739547747E-5	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999994175935631	WITHOUT_CLASSIFICATION	5.824064368763897E-7	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999999256667572	WITHOUT_CLASSIFICATION	7.43332427893981E-8	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999944515107926	WITHOUT_CLASSIFICATION	5.548489207527505E-6	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999995226411763	WITHOUT_CLASSIFICATION	4.773588237642847E-7	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999879577588943	WITHOUT_CLASSIFICATION	1.204224110570527E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999989848740849	WITHOUT_CLASSIFICATION	1.0151259151648645E-6	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999989848740849	WITHOUT_CLASSIFICATION	1.0151259151648645E-6	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999599793707269	WITHOUT_CLASSIFICATION	4.0020629273105845E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999566047804938	WITHOUT_CLASSIFICATION	4.33952195062166E-5	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999999367815549	WITHOUT_CLASSIFICATION	6.321844509746553E-7	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999938322919301	WITHOUT_CLASSIFICATION	6.167708069963801E-6	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999885456878205	WITHOUT_CLASSIFICATION	1.1454312179479098E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999992916663253	WITHOUT_CLASSIFICATION	7.083336747044178E-6	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999985213243756	WITHOUT_CLASSIFICATION	1.478675624438866E-6	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999845694059	WITHOUT_CLASSIFICATION	1.5430594087673724E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999930647887804	WITHOUT_CLASSIFICATION	6.935211219657389E-6	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999995564470909	WITHOUT_CLASSIFICATION	4.4355290908001623E-7	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999759971563	WITHOUT_CLASSIFICATION	2.400284369798999E-8	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999998823214796	WITHOUT_CLASSIFICATION	1.1767852036723392E-7	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999998022997977	WITHOUT_CLASSIFICATION	1.9770020230869083E-7	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999994578444177	WITHOUT_CLASSIFICATION	5.421555822940959E-7	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.999981575854078	WITHOUT_CLASSIFICATION	1.8424145921927636E-5	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999965691768968	WITHOUT_CLASSIFICATION	3.430823103251047E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999965691768968	WITHOUT_CLASSIFICATION	3.430823103251047E-6	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999993159782843	WITHOUT_CLASSIFICATION	6.840217157398279E-7	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999997724058262	WITHOUT_CLASSIFICATION	2.275941739340372E-7	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999969991982286	WITHOUT_CLASSIFICATION	3.000801771413727E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999999316080671	WITHOUT_CLASSIFICATION	6.839193289213774E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998197883065648	WITHOUT_CLASSIFICATION	1.8021169343525144E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999381515446953	WITHOUT_CLASSIFICATION	6.18484553047137E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999950871440623	WITHOUT_CLASSIFICATION	4.9128559377481035E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999982700433347	WITHOUT_CLASSIFICATION	1.7299566652429284E-6	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999982700433347	WITHOUT_CLASSIFICATION	1.7299566652429284E-6	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999997987973603	WITHOUT_CLASSIFICATION	2.012026397073263E-6	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999999977511813	WITHOUT_CLASSIFICATION	2.2488186977615453E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999430292906917	WITHOUT_CLASSIFICATION	5.697070930836305E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999906845999	WITHOUT_CLASSIFICATION	9.315400043096846E-9	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999873303953684	WITHOUT_CLASSIFICATION	1.2669604631616235E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999404987042443	WITHOUT_CLASSIFICATION	5.950129575582259E-5	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999988717157829	WITHOUT_CLASSIFICATION	1.1282842170328419E-6	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9988573034622285	WITHOUT_CLASSIFICATION	0.001142696537771625	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999923820956316	WITHOUT_CLASSIFICATION	7.6179043684107535E-6	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999406374016302	WITHOUT_CLASSIFICATION	5.936259836980497E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999997178627389	WITHOUT_CLASSIFICATION	2.8213726103795584E-7	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9998537964315162	WITHOUT_CLASSIFICATION	1.4620356848379798E-4	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999956242908293	WITHOUT_CLASSIFICATION	4.375709170659043E-6	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999811946587611	WITHOUT_CLASSIFICATION	1.8805341238840767E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999960992909201	WITHOUT_CLASSIFICATION	3.9007090798179765E-6	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999947945911294	WITHOUT_CLASSIFICATION	5.205408870623678E-6	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999986771100837	WITHOUT_CLASSIFICATION	1.3228899162892072E-6	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999960813318767	WITHOUT_CLASSIFICATION	3.918668123414821E-6	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9984062224795794	WITHOUT_CLASSIFICATION	0.001593777520420529	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9998406705015874	WITHOUT_CLASSIFICATION	1.593294984126864E-4	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999972064645902	WITHOUT_CLASSIFICATION	2.793535409673365E-6	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.999963967266622	WITHOUT_CLASSIFICATION	3.603273337796709E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999868354669302	WITHOUT_CLASSIFICATION	1.3164533069864537E-5	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999940691167916	WITHOUT_CLASSIFICATION	5.93088320851114E-6	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999945892156898	WITHOUT_CLASSIFICATION	5.410784310119093E-6	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999936343017471	WITHOUT_CLASSIFICATION	6.36569825283545E-6	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999999922661819	WITHOUT_CLASSIFICATION	7.73381816303249E-9	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.99997595675084	WITHOUT_CLASSIFICATION	2.4043249160128527E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.999997469865927	WITHOUT_CLASSIFICATION	2.5301340731351055E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999923473884097	WITHOUT_CLASSIFICATION	7.652611590266856E-6	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9995352014559971	WITHOUT_CLASSIFICATION	4.6479854400293335E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999967542940772	WITHOUT_CLASSIFICATION	3.245705922825901E-6	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999945651479072	WITHOUT_CLASSIFICATION	5.4348520927785195E-6	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9998356728214376	WITHOUT_CLASSIFICATION	1.6432717856246053E-4	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999456822542453	WITHOUT_CLASSIFICATION	5.431774575472449E-5	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.999997192942336	WITHOUT_CLASSIFICATION	2.807057663993266E-6	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9999920371856288	WITHOUT_CLASSIFICATION	7.962814371097297E-6	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999942276396446	WITHOUT_CLASSIFICATION	5.772360355256946E-6	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999982595331114	WITHOUT_CLASSIFICATION	1.7404668886343856E-6	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999956145819372	WITHOUT_CLASSIFICATION	4.3854180628422405E-6	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999976837399746	WITHOUT_CLASSIFICATION	2.3162600253646057E-6	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999956265403299	WITHOUT_CLASSIFICATION	4.373459670087322E-6	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999529097272555	WITHOUT_CLASSIFICATION	4.709027274441334E-5	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999250588425	WITHOUT_CLASSIFICATION	7.494115754670424E-8	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999997568679584	WITHOUT_CLASSIFICATION	2.4313204152723245E-7	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9998360176101316	WITHOUT_CLASSIFICATION	1.6398238986832904E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999982595331114	WITHOUT_CLASSIFICATION	1.7404668886343856E-6	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999956145819372	WITHOUT_CLASSIFICATION	4.3854180628422405E-6	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999961694604466	WITHOUT_CLASSIFICATION	3.83053955346392E-6	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999892981048489	WITHOUT_CLASSIFICATION	1.0701895151032818E-5	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999993564293143	WITHOUT_CLASSIFICATION	6.435706856342804E-7	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9998260345194346	WITHOUT_CLASSIFICATION	1.7396548056537354E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999913087033993	WITHOUT_CLASSIFICATION	8.691296600787163E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999999472980762	WITHOUT_CLASSIFICATION	5.270192391181041E-8	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9993372714852373	WITHOUT_CLASSIFICATION	6.627285147627274E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999939935413326	WITHOUT_CLASSIFICATION	6.006458667463719E-6	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9993540589658343	WITHOUT_CLASSIFICATION	6.4594103416574E-4	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9348048096021444	IMPLEMENTATION	0.06519519039785567	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999969690711143	WITHOUT_CLASSIFICATION	3.030928885655328E-6	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9348048096021444	IMPLEMENTATION	0.06519519039785567	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999626720740067	WITHOUT_CLASSIFICATION	3.7327925993339756E-5	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999960937982416	WITHOUT_CLASSIFICATION	3.906201758282301E-6	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999857207228859	WITHOUT_CLASSIFICATION	1.4279277114156087E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997823718946	WITHOUT_CLASSIFICATION	2.176281054004601E-6	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999891248728714	WITHOUT_CLASSIFICATION	1.087512712853853E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999651491745742	WITHOUT_CLASSIFICATION	3.485082542582296E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999651491745742	WITHOUT_CLASSIFICATION	3.485082542582296E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999984326731495	WITHOUT_CLASSIFICATION	1.567326850561784E-6	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999995226392271	WITHOUT_CLASSIFICATION	4.773607728660278E-7	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999978486563127	WITHOUT_CLASSIFICATION	2.1513436873458205E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999689159776428	WITHOUT_CLASSIFICATION	3.108402235724225E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999963620998357	WITHOUT_CLASSIFICATION	3.63790016429337E-5	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999995800209569	WITHOUT_CLASSIFICATION	4.19979043078492E-7	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999956488567411	WITHOUT_CLASSIFICATION	4.3511432589535284E-6	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999997612827439	WITHOUT_CLASSIFICATION	2.387172559861918E-7	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999934556555655	WITHOUT_CLASSIFICATION	6.544344434549872E-6	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.999924409952876	WITHOUT_CLASSIFICATION	7.559004712397654E-5	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9999483193919304	WITHOUT_CLASSIFICATION	5.1680608069631166E-5	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9979439047838224	WITHOUT_CLASSIFICATION	0.0020560952161774986	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999341637526421	WITHOUT_CLASSIFICATION	6.583624735791846E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.999993697211423	WITHOUT_CLASSIFICATION	6.302788577089816E-6	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999987369266565	WITHOUT_CLASSIFICATION	1.2630733435549518E-6	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999404506742	WITHOUT_CLASSIFICATION	5.9549325740958826E-8	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999991951482293	WITHOUT_CLASSIFICATION	8.048517706441956E-7	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999964229448015	WITHOUT_CLASSIFICATION	3.577055198575762E-6	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999998491993037	WITHOUT_CLASSIFICATION	1.5080069640262976E-7	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998718076061148	WITHOUT_CLASSIFICATION	1.28192393885289E-4	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999822408716564	WITHOUT_CLASSIFICATION	1.775912834352006E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999254469570521	WITHOUT_CLASSIFICATION	7.455304294782177E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999997945461778	WITHOUT_CLASSIFICATION	2.054538221999864E-6	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999839872398556	WITHOUT_CLASSIFICATION	1.6012760144428883E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999745317081801	WITHOUT_CLASSIFICATION	2.5468291819923834E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999802067543113	WITHOUT_CLASSIFICATION	1.979324568865087E-5	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999429150432841	WITHOUT_CLASSIFICATION	5.7084956715822644E-5	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998603460327747	WITHOUT_CLASSIFICATION	1.3965396722517961E-4	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9967694355310159	WITHOUT_CLASSIFICATION	0.0032305644689840027	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9740621493642942	WITHOUT_CLASSIFICATION	0.0259378506357057	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.8372382335529026	WITHOUT_CLASSIFICATION	0.16276176644709728	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999689311499322	WITHOUT_CLASSIFICATION	3.1068850067877094E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999956488567411	WITHOUT_CLASSIFICATION	4.3511432589535284E-6	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999982827794511	WITHOUT_CLASSIFICATION	1.7172205489325075E-6	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999910045591875	WITHOUT_CLASSIFICATION	8.995440812475502E-6	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.8752041623103987	IMPLEMENTATION	0.12479583768960133	WITHOUT_CLASSIFICATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999916559990708	WITHOUT_CLASSIFICATION	8.344000929222313E-6	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999914482597697	WITHOUT_CLASSIFICATION	8.551740230348016E-6	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999975762145525	WITHOUT_CLASSIFICATION	2.423785447464324E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999689159776428	WITHOUT_CLASSIFICATION	3.108402235724225E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999689159776428	WITHOUT_CLASSIFICATION	3.108402235724225E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999470323841224	WITHOUT_CLASSIFICATION	5.2967615877592675E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.999993834890737	WITHOUT_CLASSIFICATION	6.1651092630301975E-6	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999489337720281	WITHOUT_CLASSIFICATION	5.1066227971824105E-5	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999921574275075	WITHOUT_CLASSIFICATION	7.842572492621618E-6	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999048267716163	WITHOUT_CLASSIFICATION	9.517322838360266E-5	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999976204533109	WITHOUT_CLASSIFICATION	2.379546689180038E-6	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999997195066317	WITHOUT_CLASSIFICATION	2.804933683597015E-7	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9996223469864388	WITHOUT_CLASSIFICATION	3.7765301356110047E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999676386230526	WITHOUT_CLASSIFICATION	3.236137694748443E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999970282258308	WITHOUT_CLASSIFICATION	2.97177416907263E-6	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999981896545264	WITHOUT_CLASSIFICATION	1.8103454735951774E-6	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997031812838584	WITHOUT_CLASSIFICATION	2.968187161416221E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999893306980785	WITHOUT_CLASSIFICATION	1.066930192144044E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999970282258308	WITHOUT_CLASSIFICATION	2.97177416907263E-6	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999971491187268	WITHOUT_CLASSIFICATION	2.8508812732963377E-6	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9996454736522845	WITHOUT_CLASSIFICATION	3.545263477154488E-4	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999763465110353	WITHOUT_CLASSIFICATION	2.3653488964727776E-5	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9856768313741912	IMPLEMENTATION	0.014323168625808897	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997031812838584	WITHOUT_CLASSIFICATION	2.968187161416221E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999795686362971	WITHOUT_CLASSIFICATION	2.0431363702906528E-5	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999653896609305	WITHOUT_CLASSIFICATION	3.461033906936405E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999607831026537	WITHOUT_CLASSIFICATION	3.921689734627481E-5	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999928577765	WITHOUT_CLASSIFICATION	7.142223411672077E-9	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999183570068698	WITHOUT_CLASSIFICATION	8.164299313017834E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999959475258907	WITHOUT_CLASSIFICATION	4.052474109337125E-6	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999994273994	WITHOUT_CLASSIFICATION	5.726006000012988E-7	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999958755394707	WITHOUT_CLASSIFICATION	4.12446052929121E-6	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999988725355555	WITHOUT_CLASSIFICATION	1.127464444446987E-6	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999985523768895	WITHOUT_CLASSIFICATION	1.447623110507875E-6	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999799420574644	WITHOUT_CLASSIFICATION	2.0057942535576207E-5	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999984463898224	WITHOUT_CLASSIFICATION	1.5536101776625646E-6	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999970282258308	WITHOUT_CLASSIFICATION	2.97177416907263E-6	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999795686362971	WITHOUT_CLASSIFICATION	2.0431363702906528E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999607831026537	WITHOUT_CLASSIFICATION	3.921689734627481E-5	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999944487534986	WITHOUT_CLASSIFICATION	5.551246501335391E-6	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999922381239792	WITHOUT_CLASSIFICATION	7.76187602088201E-6	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999998165058457	WITHOUT_CLASSIFICATION	1.8349415420731305E-7	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997031812838584	WITHOUT_CLASSIFICATION	2.968187161416221E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999997597023824	WITHOUT_CLASSIFICATION	2.402976176282247E-7	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999962825996247	WITHOUT_CLASSIFICATION	3.7174003752440437E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999343359232331	WITHOUT_CLASSIFICATION	6.566407676688847E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999928612905303	WITHOUT_CLASSIFICATION	7.1387094696490495E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999958755394707	WITHOUT_CLASSIFICATION	4.12446052929121E-6	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999971491187268	WITHOUT_CLASSIFICATION	2.8508812732963377E-6	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999903726372942	WITHOUT_CLASSIFICATION	9.627362705745444E-6	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999993487174037	WITHOUT_CLASSIFICATION	6.512825962448634E-7	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999981994257665	WITHOUT_CLASSIFICATION	1.8005742334212983E-6	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9998433017362323	WITHOUT_CLASSIFICATION	1.5669826376770718E-4	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999647497971891	WITHOUT_CLASSIFICATION	3.525020281096315E-5	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.999845061735462	WITHOUT_CLASSIFICATION	1.5493826453802042E-4	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9999977572523423	WITHOUT_CLASSIFICATION	2.2427476577005324E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997823718946	WITHOUT_CLASSIFICATION	2.176281054004601E-6	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996250671882	WITHOUT_CLASSIFICATION	3.749328117941093E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977809858233	WITHOUT_CLASSIFICATION	2.2190141767017897E-5	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999997601668851	WITHOUT_CLASSIFICATION	2.39833114835288E-7	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9958725380868538	WITHOUT_CLASSIFICATION	0.004127461913146237	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999823743080987	WITHOUT_CLASSIFICATION	1.7625691901390824E-5	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999775312559473	WITHOUT_CLASSIFICATION	2.2468744052599304E-5	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999997896673514	WITHOUT_CLASSIFICATION	2.103326485882734E-7	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999975372934611	WITHOUT_CLASSIFICATION	2.4627065388831855E-6	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999995401686829	WITHOUT_CLASSIFICATION	4.59831317050193E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999928612905303	WITHOUT_CLASSIFICATION	7.1387094696490495E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977809858233	WITHOUT_CLASSIFICATION	2.2190141767017897E-5	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999677603816824	WITHOUT_CLASSIFICATION	3.223961831760717E-5	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999908931879964	WITHOUT_CLASSIFICATION	9.106812003628164E-6	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999672378241121	WITHOUT_CLASSIFICATION	3.276217588790233E-5	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999964714663382	WITHOUT_CLASSIFICATION	3.528533661765045E-6	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9998451976030798	WITHOUT_CLASSIFICATION	1.5480239692021992E-4	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999695157533298	WITHOUT_CLASSIFICATION	3.0484246670214204E-5	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999859366389451	WITHOUT_CLASSIFICATION	1.4063361054903883E-5	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9991479662101795	WITHOUT_CLASSIFICATION	8.520337898204133E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999999875811652	WITHOUT_CLASSIFICATION	1.241883489011203E-8	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.8485476623905989	WITHOUT_CLASSIFICATION	0.1514523376094011	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999977083577637	WITHOUT_CLASSIFICATION	2.291642236332583E-6	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999997795791153	WITHOUT_CLASSIFICATION	2.204208846977911E-6	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9993359842544174	WITHOUT_CLASSIFICATION	6.640157455827273E-4	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999913788701787	WITHOUT_CLASSIFICATION	8.621129821301025E-6	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999996471472041	WITHOUT_CLASSIFICATION	3.5285279584636084E-7	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999990751073863	WITHOUT_CLASSIFICATION	9.248926137097256E-7	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999991223974158	WITHOUT_CLASSIFICATION	8.77602584215621E-7	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999982720277987	WITHOUT_CLASSIFICATION	1.7279722013336618E-6	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999642783307054	WITHOUT_CLASSIFICATION	3.572166929457112E-5	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.999993418882487	WITHOUT_CLASSIFICATION	6.581117512889516E-6	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999960147093382	WITHOUT_CLASSIFICATION	3.9852906618216775E-6	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999973372094461	WITHOUT_CLASSIFICATION	2.6627905540486836E-6	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.999998465079889	WITHOUT_CLASSIFICATION	1.5349201109975297E-6	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999996129684345	WITHOUT_CLASSIFICATION	3.8703156537786596E-7	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999991875545897	WITHOUT_CLASSIFICATION	8.124454103944384E-7	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9896933017045181	IMPLEMENTATION	0.010306698295481793	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9995203246508162	WITHOUT_CLASSIFICATION	4.796753491837652E-4	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999992378072339	WITHOUT_CLASSIFICATION	7.621927660792678E-7	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999991038855958	WITHOUT_CLASSIFICATION	8.961144042110055E-7	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.97365912590657	WITHOUT_CLASSIFICATION	0.026340874093430125	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999997680429532	WITHOUT_CLASSIFICATION	2.319570467943895E-7	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999961781811108	WITHOUT_CLASSIFICATION	3.821818889167107E-6	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999987095503609	WITHOUT_CLASSIFICATION	1.2904496391883993E-6	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9997768892641506	WITHOUT_CLASSIFICATION	2.2311073584934925E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999948168633495	WITHOUT_CLASSIFICATION	5.183136650550149E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999769243909516	WITHOUT_CLASSIFICATION	2.307560904833288E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999966508618375	WITHOUT_CLASSIFICATION	3.349138162430138E-6	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999999443743401	WITHOUT_CLASSIFICATION	5.56256598680539E-8	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999769243909516	WITHOUT_CLASSIFICATION	2.307560904833288E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999948168633495	WITHOUT_CLASSIFICATION	5.183136650550149E-6	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999966508618375	WITHOUT_CLASSIFICATION	3.349138162430138E-6	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999951938162516	WITHOUT_CLASSIFICATION	4.806183748422634E-6	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999883290067387	WITHOUT_CLASSIFICATION	1.1670993261389382E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999953954022	WITHOUT_CLASSIFICATION	4.604597877446335E-9	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999997696841585	WITHOUT_CLASSIFICATION	2.303158415041402E-7	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999996583151382	WITHOUT_CLASSIFICATION	3.4168486182574794E-7	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.6404914472737716	IMPLEMENTATION	0.3595085527262284	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999757754928669	WITHOUT_CLASSIFICATION	2.4224507133184144E-5	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999899981642216	WITHOUT_CLASSIFICATION	1.0001835778322479E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999992538477295	WITHOUT_CLASSIFICATION	7.461522706166128E-7	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999962942767485	WITHOUT_CLASSIFICATION	3.705723251366204E-6	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999991065801623	WITHOUT_CLASSIFICATION	8.934198376276857E-7	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999209456641823	WITHOUT_CLASSIFICATION	7.90543358177087E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999867390333586	WITHOUT_CLASSIFICATION	1.3260966641342213E-5	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.999999374473177	WITHOUT_CLASSIFICATION	6.255268229703964E-7	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999996722547316	WITHOUT_CLASSIFICATION	3.277452683183997E-7	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999966716629998	WITHOUT_CLASSIFICATION	3.3283370002628817E-6	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999992879022249	WITHOUT_CLASSIFICATION	7.120977750267887E-7	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999993959398478	WITHOUT_CLASSIFICATION	6.040601522262347E-7	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999999907923496	WITHOUT_CLASSIFICATION	9.207650358038234E-9	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999981100371917	WITHOUT_CLASSIFICATION	1.8899628083292168E-6	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9991286995911219	WITHOUT_CLASSIFICATION	8.713004088779316E-4	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999977894161216	WITHOUT_CLASSIFICATION	2.21058387846694E-6	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999966112213415	WITHOUT_CLASSIFICATION	3.3887786584877867E-6	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999991791338892	WITHOUT_CLASSIFICATION	8.208661106188867E-7	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999989161502962	WITHOUT_CLASSIFICATION	1.0838497037210767E-6	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999989161502962	WITHOUT_CLASSIFICATION	1.0838497037210767E-6	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999996257279589	WITHOUT_CLASSIFICATION	3.742720410601869E-7	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999996257279589	WITHOUT_CLASSIFICATION	3.742720410601869E-7	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9973096495074536	WITHOUT_CLASSIFICATION	0.0026903504925464227	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999992879022249	WITHOUT_CLASSIFICATION	7.120977750267887E-7	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999169668683723	WITHOUT_CLASSIFICATION	8.30331316276495E-5	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999923165825162	WITHOUT_CLASSIFICATION	7.683417483800744E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999672502278864	WITHOUT_CLASSIFICATION	3.2749772113564756E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999672502278864	WITHOUT_CLASSIFICATION	3.2749772113564756E-5	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999957322224419	WITHOUT_CLASSIFICATION	4.2677775581562455E-6	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999630597175387	WITHOUT_CLASSIFICATION	3.6940282461185594E-5	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999102306025	WITHOUT_CLASSIFICATION	8.976939741719716E-8	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999680199687743	WITHOUT_CLASSIFICATION	3.198003122573681E-5	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999965875509497	WITHOUT_CLASSIFICATION	3.4124490503227704E-6	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999952667593355	WITHOUT_CLASSIFICATION	4.733240664536709E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999955171144771	WITHOUT_CLASSIFICATION	4.482885522879882E-6	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999753303324024	WITHOUT_CLASSIFICATION	2.4669667597656285E-5	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9999871594004204	WITHOUT_CLASSIFICATION	1.2840599579605695E-5	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.999952709527382	WITHOUT_CLASSIFICATION	4.729047261803358E-5	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999983762265878	WITHOUT_CLASSIFICATION	1.6237734122175093E-6	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.999960629827271	WITHOUT_CLASSIFICATION	3.937017272895861E-5	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999962636602775	WITHOUT_CLASSIFICATION	3.7363397226074497E-6	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.999997493938119	WITHOUT_CLASSIFICATION	2.506061881108373E-6	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9956447884085565	WITHOUT_CLASSIFICATION	0.004355211591443451	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999999202225068	WITHOUT_CLASSIFICATION	7.977749318925035E-7	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947646322582	WITHOUT_CLASSIFICATION	5.2353677417688345E-6	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999454245762036	WITHOUT_CLASSIFICATION	5.457542379652347E-5	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999891771728657	WITHOUT_CLASSIFICATION	1.0822827134246172E-5	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999955020739102	WITHOUT_CLASSIFICATION	4.497926089786394E-6	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999851022552907	WITHOUT_CLASSIFICATION	1.4897744709337615E-5	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999971898084411	WITHOUT_CLASSIFICATION	2.8101915589821117E-6	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999939948709902	WITHOUT_CLASSIFICATION	6.005129009784233E-6	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999999329374362	WITHOUT_CLASSIFICATION	6.706256379197566E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999882499315632	WITHOUT_CLASSIFICATION	1.175006843679547E-4	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999996388522114	WITHOUT_CLASSIFICATION	3.6114778846921273E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977809858233	WITHOUT_CLASSIFICATION	2.2190141767017897E-5	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999997795791153	WITHOUT_CLASSIFICATION	2.204208846977911E-6	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998609440299414	WITHOUT_CLASSIFICATION	1.3905597005859553E-4	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999980598255132	WITHOUT_CLASSIFICATION	1.9401744868414278E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999867804156302	WITHOUT_CLASSIFICATION	1.3219584369858762E-5	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999661328012318	WITHOUT_CLASSIFICATION	3.386719876813537E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999838292832866	WITHOUT_CLASSIFICATION	1.6170716713389205E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999838292832866	WITHOUT_CLASSIFICATION	1.6170716713389205E-5	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999997344169214	WITHOUT_CLASSIFICATION	2.6558307861832454E-7	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999984659258655	WITHOUT_CLASSIFICATION	1.5340741345848403E-6	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.999996605948181	WITHOUT_CLASSIFICATION	3.3940518189502225E-6	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.999996605948181	WITHOUT_CLASSIFICATION	3.3940518189502225E-6	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999998477229932	WITHOUT_CLASSIFICATION	1.522770068061568E-6	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9993562231337904	WITHOUT_CLASSIFICATION	6.437768662095482E-4	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999927107073655	WITHOUT_CLASSIFICATION	7.289292634483234E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999917801689813	WITHOUT_CLASSIFICATION	8.219831018706969E-6	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.999990207312628	WITHOUT_CLASSIFICATION	9.792687371985432E-6	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999992180264982	WITHOUT_CLASSIFICATION	7.819735018664498E-7	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9999941769048631	WITHOUT_CLASSIFICATION	5.823095136824034E-6	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999927275188478	WITHOUT_CLASSIFICATION	7.272481152135915E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999965608676542	WITHOUT_CLASSIFICATION	3.439132345869757E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999965608676542	WITHOUT_CLASSIFICATION	3.439132345869757E-6	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999991736869246	WITHOUT_CLASSIFICATION	8.263130753921146E-7	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999996644344669	WITHOUT_CLASSIFICATION	3.3556553316559677E-7	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999996644344669	WITHOUT_CLASSIFICATION	3.3556553316559677E-7	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999973254589466	WITHOUT_CLASSIFICATION	2.674541053337145E-6	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999997575934265	WITHOUT_CLASSIFICATION	2.4240657349763696E-7	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.8984699406631271	WITHOUT_CLASSIFICATION	0.10153005933687285	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999998845007887	WITHOUT_CLASSIFICATION	1.1549921128269883E-7	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999999034818147	WITHOUT_CLASSIFICATION	9.651818534791403E-8	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999997211623792	WITHOUT_CLASSIFICATION	2.788376207686384E-7	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999057521463248	WITHOUT_CLASSIFICATION	9.424785367510768E-5	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999937513329399	WITHOUT_CLASSIFICATION	6.2486670601363015E-6	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999964382441361	WITHOUT_CLASSIFICATION	3.5617558638824605E-6	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9994165718717858	WITHOUT_CLASSIFICATION	5.834281282142001E-4	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999995882291925	WITHOUT_CLASSIFICATION	4.1177080753047837E-7	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999652541427733	WITHOUT_CLASSIFICATION	3.4745857226751565E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999922201007994	WITHOUT_CLASSIFICATION	7.779899200672822E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999922201007994	WITHOUT_CLASSIFICATION	7.779899200672822E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999922201007994	WITHOUT_CLASSIFICATION	7.779899200672822E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999922201007994	WITHOUT_CLASSIFICATION	7.779899200672822E-6	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999945514830396	WITHOUT_CLASSIFICATION	5.448516960454156E-6	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.999917493372088	WITHOUT_CLASSIFICATION	8.250662791201923E-5	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999954931080049	WITHOUT_CLASSIFICATION	4.506891995095129E-5	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999917992355174	WITHOUT_CLASSIFICATION	8.200764482555113E-6	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999967279125577	WITHOUT_CLASSIFICATION	3.2720874423738113E-6	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999671110836433	WITHOUT_CLASSIFICATION	3.2888916356734194E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998197883065648	WITHOUT_CLASSIFICATION	1.8021169343525144E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999897929335799	WITHOUT_CLASSIFICATION	1.0207066420016631E-5	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.999997246239904	WITHOUT_CLASSIFICATION	2.753760095901584E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998197883065648	WITHOUT_CLASSIFICATION	1.8021169343525144E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998197883065648	WITHOUT_CLASSIFICATION	1.8021169343525144E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999721113300515	WITHOUT_CLASSIFICATION	2.7888669948569146E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999997524116248	WITHOUT_CLASSIFICATION	2.4758837524878797E-7	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999950963717131	WITHOUT_CLASSIFICATION	4.903628286850916E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999815795072317	WITHOUT_CLASSIFICATION	1.8420492768368376E-5	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999999321872056	WITHOUT_CLASSIFICATION	6.781279434322553E-8	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999999516686093	WITHOUT_CLASSIFICATION	4.8331390545622927E-8	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999965237977868	WITHOUT_CLASSIFICATION	3.4762022132117215E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999815795072317	WITHOUT_CLASSIFICATION	1.8420492768368376E-5	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999991188105295	WITHOUT_CLASSIFICATION	8.811894704431666E-7	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999958256174037	WITHOUT_CLASSIFICATION	4.174382596216635E-6	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999985772296379	WITHOUT_CLASSIFICATION	1.422770361968252E-6	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999961630781559	WITHOUT_CLASSIFICATION	3.836921844035308E-6	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999139343714515	WITHOUT_CLASSIFICATION	8.606562854851763E-5	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999978314573441	WITHOUT_CLASSIFICATION	2.1685426558375745E-6	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999995283013952	WITHOUT_CLASSIFICATION	4.716986048515503E-7	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999804241700371	WITHOUT_CLASSIFICATION	1.9575829962881216E-5	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997004934701	WITHOUT_CLASSIFICATION	2.995065298744167E-7	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999979103000789	WITHOUT_CLASSIFICATION	2.0896999210257067E-6	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998716372263	WITHOUT_CLASSIFICATION	1.2836277370088932E-7	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999925024933971	WITHOUT_CLASSIFICATION	7.4975066029149055E-6	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999980078424838	WITHOUT_CLASSIFICATION	1.992157516171606E-6	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999740926590679	WITHOUT_CLASSIFICATION	2.5907340932062364E-5	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998835689600187	WITHOUT_CLASSIFICATION	1.1643103998127126E-4	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999985627484609	WITHOUT_CLASSIFICATION	1.4372515390984081E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999999962718629	WITHOUT_CLASSIFICATION	3.728137088725136E-8	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999993144917102	WITHOUT_CLASSIFICATION	6.855082897270706E-7	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999997995935141	WITHOUT_CLASSIFICATION	2.0040648578553307E-7	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999993144917102	WITHOUT_CLASSIFICATION	6.855082897270706E-7	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999885564493548	WITHOUT_CLASSIFICATION	1.1443550645247915E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999341398563	WITHOUT_CLASSIFICATION	6.58601436891738E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999980344631307	WITHOUT_CLASSIFICATION	1.9655368692614133E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999977819997461	WITHOUT_CLASSIFICATION	2.2180002540029774E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999999962718629	WITHOUT_CLASSIFICATION	3.728137088725136E-8	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999997995935141	WITHOUT_CLASSIFICATION	2.0040648578553307E-7	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999885564493548	WITHOUT_CLASSIFICATION	1.1443550645247915E-5	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999888229186837	WITHOUT_CLASSIFICATION	1.1177081316226003E-5	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999896468292826	WITHOUT_CLASSIFICATION	1.035317071731129E-5	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9999965045678856	WITHOUT_CLASSIFICATION	3.4954321145286797E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9999979408010106	WITHOUT_CLASSIFICATION	2.0591989894684932E-6	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999214507142362	WITHOUT_CLASSIFICATION	7.85492857638343E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999994265391509	WITHOUT_CLASSIFICATION	5.734608490422187E-7	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947646322582	WITHOUT_CLASSIFICATION	5.2353677417688345E-6	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999341398563	WITHOUT_CLASSIFICATION	6.58601436891738E-8	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999995823862	WITHOUT_CLASSIFICATION	4.176138569271722E-10	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999996555440449	WITHOUT_CLASSIFICATION	3.444559550461945E-7	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999976481460768	WITHOUT_CLASSIFICATION	2.351853923180468E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947646322582	WITHOUT_CLASSIFICATION	5.2353677417688345E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977809858233	WITHOUT_CLASSIFICATION	2.2190141767017897E-5	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999997207319691	WITHOUT_CLASSIFICATION	2.792680308957681E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947646322582	WITHOUT_CLASSIFICATION	5.2353677417688345E-6	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999998366504201	WITHOUT_CLASSIFICATION	1.633495799727771E-7	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999993310484003	WITHOUT_CLASSIFICATION	6.689515996551665E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977809858233	WITHOUT_CLASSIFICATION	2.2190141767017897E-5	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998360322807561	WITHOUT_CLASSIFICATION	1.6396771924376605E-4	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9998894274424619	WITHOUT_CLASSIFICATION	1.1057255753818151E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999660654038739	WITHOUT_CLASSIFICATION	3.3934596126139436E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999942029203752	WITHOUT_CLASSIFICATION	5.797079624794402E-6	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999037001636225	WITHOUT_CLASSIFICATION	9.629983637749343E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999767447790839	WITHOUT_CLASSIFICATION	2.325522091609474E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999803104437552	WITHOUT_CLASSIFICATION	1.968955624479853E-5	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999964322310052	WITHOUT_CLASSIFICATION	3.567768994839822E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999459414892589	WITHOUT_CLASSIFICATION	5.405851074103055E-5	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999998492968888	WITHOUT_CLASSIFICATION	1.5070311119946726E-7	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.8984699406631271	WITHOUT_CLASSIFICATION	0.10153005933687285	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.999988709471166	WITHOUT_CLASSIFICATION	1.1290528833982585E-5	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999955134107374	WITHOUT_CLASSIFICATION	4.486589262554737E-6	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999864634844845	WITHOUT_CLASSIFICATION	1.3536515515597179E-5	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999608940828116	WITHOUT_CLASSIFICATION	3.910591718831522E-5	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999997781612049	WITHOUT_CLASSIFICATION	2.218387950267336E-7	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999997938696495	WITHOUT_CLASSIFICATION	2.0613035034213337E-7	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999938298091888	WITHOUT_CLASSIFICATION	6.170190811150158E-6	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.99992592099906	WITHOUT_CLASSIFICATION	7.407900094009771E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999975937719177	WITHOUT_CLASSIFICATION	2.4062280822884663E-6	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9998634150999076	WITHOUT_CLASSIFICATION	1.365849000924074E-4	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.8983937780337736	WITHOUT_CLASSIFICATION	0.10160622196622641	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999928063036	WITHOUT_CLASSIFICATION	7.193696421558675E-9	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999852388786	WITHOUT_CLASSIFICATION	1.4761121426930926E-8	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999957235580689	WITHOUT_CLASSIFICATION	4.276441931164117E-6	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999923957747174	WITHOUT_CLASSIFICATION	7.6042252826150255E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998960997958789	WITHOUT_CLASSIFICATION	1.0390020412114679E-4	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999999785279454	WITHOUT_CLASSIFICATION	2.1472054586574147E-8	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999996222626527	WITHOUT_CLASSIFICATION	3.77737347370727E-7	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999986817368293	WITHOUT_CLASSIFICATION	1.3182631708115164E-6	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999887725058663	WITHOUT_CLASSIFICATION	1.1227494133646153E-5	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.999992654554511	WITHOUT_CLASSIFICATION	7.3454454889648136E-6	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9901058061886384	WITHOUT_CLASSIFICATION	0.00989419381136162	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999968856690234	WITHOUT_CLASSIFICATION	3.114330976615787E-6	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999803304704261	WITHOUT_CLASSIFICATION	1.96695295738197E-5	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9998848550273338	WITHOUT_CLASSIFICATION	1.1514497266621246E-4	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999982789852258	WITHOUT_CLASSIFICATION	1.721014774339298E-6	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999988719017785	WITHOUT_CLASSIFICATION	1.1280982215299913E-6	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.8742494761526058	WITHOUT_CLASSIFICATION	0.12575052384739419	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999973368115929	WITHOUT_CLASSIFICATION	2.6631884071452633E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977809858233	WITHOUT_CLASSIFICATION	2.2190141767017897E-5	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999949747359861	WITHOUT_CLASSIFICATION	5.02526401382688E-6	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999818738304268	WITHOUT_CLASSIFICATION	1.812616957321908E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999818738304268	WITHOUT_CLASSIFICATION	1.812616957321908E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999530702999473	WITHOUT_CLASSIFICATION	4.692970005276205E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999767447790839	WITHOUT_CLASSIFICATION	2.325522091609474E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999981115404317	WITHOUT_CLASSIFICATION	1.8884595682359915E-6	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999929837326186	WITHOUT_CLASSIFICATION	7.016267381426201E-6	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.99999921328178	WITHOUT_CLASSIFICATION	7.867182199733033E-7	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999700136517049	WITHOUT_CLASSIFICATION	2.998634829518593E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999942803404179	WITHOUT_CLASSIFICATION	5.719659582057083E-6	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999168415043984	WITHOUT_CLASSIFICATION	8.315849560164301E-5	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999999395410084	WITHOUT_CLASSIFICATION	6.045899160420677E-7	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999998816139762	WITHOUT_CLASSIFICATION	1.1838602380968649E-7	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999977997342585	WITHOUT_CLASSIFICATION	2.2002657415590333E-6	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999988933387778	WITHOUT_CLASSIFICATION	1.106661222174992E-6	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9987472521366862	WITHOUT_CLASSIFICATION	0.0012527478633136927	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999996087737251	WITHOUT_CLASSIFICATION	3.9122627489151985E-6	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999997207121648	WITHOUT_CLASSIFICATION	2.792878351195088E-7	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999996220743	WITHOUT_CLASSIFICATION	3.779256615922404E-10	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999988480455881	WITHOUT_CLASSIFICATION	1.151954411923142E-6	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999992186311784	WITHOUT_CLASSIFICATION	7.813688216113136E-7	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999344964622	WITHOUT_CLASSIFICATION	6.550353778485754E-8	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999990831777399	WITHOUT_CLASSIFICATION	9.168222601849688E-7	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999643083213794	WITHOUT_CLASSIFICATION	3.5691678620558105E-5	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999839944585108	WITHOUT_CLASSIFICATION	1.600554148917126E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999829272559182	WITHOUT_CLASSIFICATION	1.707274408178144E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999997494446564	WITHOUT_CLASSIFICATION	2.505553436187333E-7	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.8742494761526058	WITHOUT_CLASSIFICATION	0.12575052384739419	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999994704372642	WITHOUT_CLASSIFICATION	5.295627357478673E-7	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9987078972364162	WITHOUT_CLASSIFICATION	0.0012921027635837913	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999201674815	WITHOUT_CLASSIFICATION	7.983251848018218E-8	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999961591090213	WITHOUT_CLASSIFICATION	3.840890978686531E-6	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999868277517019	WITHOUT_CLASSIFICATION	1.3172248298110529E-5	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999954995526218	WITHOUT_CLASSIFICATION	4.500447378185391E-6	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999460718124299	WITHOUT_CLASSIFICATION	5.392818757004137E-5	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999954032156	WITHOUT_CLASSIFICATION	4.5967843999313615E-6	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999970500079483	WITHOUT_CLASSIFICATION	2.9499920516974454E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999986287500142	WITHOUT_CLASSIFICATION	1.3712499857822807E-6	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999993227806578	WITHOUT_CLASSIFICATION	6.772193422569538E-7	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999995864865048	WITHOUT_CLASSIFICATION	4.1351349520775266E-6	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999998648319453	WITHOUT_CLASSIFICATION	1.351680548689114E-7	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999968416183652	WITHOUT_CLASSIFICATION	3.158381634663584E-6	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999920405881	WITHOUT_CLASSIFICATION	7.959411839770461E-9	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999920405881	WITHOUT_CLASSIFICATION	7.959411839770461E-9	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999995902538843	WITHOUT_CLASSIFICATION	4.0974611568799395E-7	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999991820876836	WITHOUT_CLASSIFICATION	8.179123163899065E-7	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999909257811	WITHOUT_CLASSIFICATION	9.074218907113071E-9	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999909257811	WITHOUT_CLASSIFICATION	9.074218907113071E-9	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999996232414567	WITHOUT_CLASSIFICATION	3.767585432786445E-7	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999632137643744	WITHOUT_CLASSIFICATION	3.678623562570612E-5	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.999986093600458	WITHOUT_CLASSIFICATION	1.3906399542046734E-5	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.999999632810601	WITHOUT_CLASSIFICATION	3.6718939904841697E-7	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999957641104097	WITHOUT_CLASSIFICATION	4.2358895903808795E-6	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999988027026282	WITHOUT_CLASSIFICATION	1.1972973718888046E-6	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999878244772	WITHOUT_CLASSIFICATION	1.2175522797031427E-8	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999878244772	WITHOUT_CLASSIFICATION	1.2175522797031427E-8	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999989615307826	WITHOUT_CLASSIFICATION	1.0384692173059834E-6	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999952053675917	WITHOUT_CLASSIFICATION	4.794632408277917E-6	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.999996996428587	WITHOUT_CLASSIFICATION	3.003571412965459E-6	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999962015604124	WITHOUT_CLASSIFICATION	3.7984395877061037E-6	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999962015604124	WITHOUT_CLASSIFICATION	3.7984395877061037E-6	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999986156595382	WITHOUT_CLASSIFICATION	1.3843404617767309E-6	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999948574553704	WITHOUT_CLASSIFICATION	5.142544629468529E-6	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999915221276956	WITHOUT_CLASSIFICATION	8.477872304311773E-6	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999984231282454	WITHOUT_CLASSIFICATION	1.576871754592211E-6	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999934143563722	WITHOUT_CLASSIFICATION	6.585643627814322E-6	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999978686367229	WITHOUT_CLASSIFICATION	2.131363276970176E-6	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999988694055989	WITHOUT_CLASSIFICATION	1.1305944011704761E-6	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999945960460345	WITHOUT_CLASSIFICATION	5.4039539655096945E-6	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999985328351525	WITHOUT_CLASSIFICATION	1.4671648474745267E-6	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999993271620566	WITHOUT_CLASSIFICATION	6.72837943306279E-7	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9993557832023748	WITHOUT_CLASSIFICATION	6.442167976252024E-4	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9998112367998965	WITHOUT_CLASSIFICATION	1.8876320010346873E-4	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9999427536064278	WITHOUT_CLASSIFICATION	5.7246393572188234E-5	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999991547494517	WITHOUT_CLASSIFICATION	8.452505482764106E-7	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999684322416088	WITHOUT_CLASSIFICATION	3.156775839118723E-5	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999824076210918	WITHOUT_CLASSIFICATION	1.7592378908262544E-5	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999998324342878	WITHOUT_CLASSIFICATION	1.675657122395138E-7	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999764864567059	WITHOUT_CLASSIFICATION	2.351354329419254E-5	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999723408062342	WITHOUT_CLASSIFICATION	2.765919376575266E-5	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999936365112966	WITHOUT_CLASSIFICATION	6.363488703426242E-6	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999966850316405	WITHOUT_CLASSIFICATION	3.314968359416962E-6	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999748913486585	WITHOUT_CLASSIFICATION	2.5108651341517296E-5	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999378504214992	WITHOUT_CLASSIFICATION	6.21495785008153E-5	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999994909706604	WITHOUT_CLASSIFICATION	5.090293396635985E-7	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.99998078092827	WITHOUT_CLASSIFICATION	1.921907173001415E-5	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999370184539618	WITHOUT_CLASSIFICATION	6.29815460382444E-5	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999988155248646	WITHOUT_CLASSIFICATION	1.1844751355020927E-6	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999398827969959	WITHOUT_CLASSIFICATION	6.01172030040825E-5	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999990690438691	WITHOUT_CLASSIFICATION	9.309561307143488E-7	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999997635634592	WITHOUT_CLASSIFICATION	2.3643654080210243E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999775319362615	WITHOUT_CLASSIFICATION	2.246806373859895E-5	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999844409295	WITHOUT_CLASSIFICATION	1.5559070484163582E-8	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999986219925374	WITHOUT_CLASSIFICATION	1.378007462591667E-6	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999826792286001	WITHOUT_CLASSIFICATION	1.732077139990204E-5	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999981122860404	WITHOUT_CLASSIFICATION	1.8877139595383029E-6	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999663597672598	WITHOUT_CLASSIFICATION	3.364023274021405E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999941068457873	WITHOUT_CLASSIFICATION	5.893154212796834E-6	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999122818586	WITHOUT_CLASSIFICATION	8.771814140585238E-8	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999669134950724	WITHOUT_CLASSIFICATION	3.308650492761523E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999996979717017	WITHOUT_CLASSIFICATION	3.0202829826061005E-7	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999127764292015	WITHOUT_CLASSIFICATION	8.72235707984684E-5	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999978074597007	WITHOUT_CLASSIFICATION	2.1925402993024496E-6	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999966567237408	WITHOUT_CLASSIFICATION	3.3432762592618283E-6	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9996237825624473	WITHOUT_CLASSIFICATION	3.7621743755271566E-4	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.999999227889752	WITHOUT_CLASSIFICATION	7.721102479868711E-7	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999988601962753	WITHOUT_CLASSIFICATION	1.1398037246860777E-6	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999979854904689	WITHOUT_CLASSIFICATION	2.014509531050252E-6	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999992349112423	WITHOUT_CLASSIFICATION	7.650887576711789E-7	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999842650923946	WITHOUT_CLASSIFICATION	1.5734907605439476E-5	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999949158883842	WITHOUT_CLASSIFICATION	5.084111615829164E-6	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999934691182669	WITHOUT_CLASSIFICATION	6.5308817331616776E-6	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999995388738875	WITHOUT_CLASSIFICATION	4.6112611250639243E-7	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999986114407425	WITHOUT_CLASSIFICATION	1.3885592575208669E-6	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999999824537	WITHOUT_CLASSIFICATION	1.754633138632527E-11	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999936683459185	WITHOUT_CLASSIFICATION	6.3316540815443394E-6	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999999727268186	WITHOUT_CLASSIFICATION	2.727318131649916E-8	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999990873606469	WITHOUT_CLASSIFICATION	9.12639353084159E-7	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999975702244431	WITHOUT_CLASSIFICATION	2.4297755569449795E-6	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999960094094366	WITHOUT_CLASSIFICATION	3.990590563460765E-6	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999989532963843	WITHOUT_CLASSIFICATION	1.0467036157066395E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999714394118017	WITHOUT_CLASSIFICATION	2.8560588198370454E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999714394118017	WITHOUT_CLASSIFICATION	2.8560588198370454E-5	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999999994568271	WITHOUT_CLASSIFICATION	5.431728938827675E-9	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9996907043232175	WITHOUT_CLASSIFICATION	3.0929567678253595E-4	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999686538812	WITHOUT_CLASSIFICATION	3.134611887805516E-8	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999808312244	WITHOUT_CLASSIFICATION	1.916877561467394E-8	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999715234883	WITHOUT_CLASSIFICATION	2.847651182246837E-8	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999975720642439	WITHOUT_CLASSIFICATION	2.4279357560424645E-6	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999935838426744	WITHOUT_CLASSIFICATION	6.416157325552001E-6	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999999906152	WITHOUT_CLASSIFICATION	9.384772362233387E-12	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999995995467773	WITHOUT_CLASSIFICATION	4.0045322267113846E-7	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999994991913751	WITHOUT_CLASSIFICATION	5.008086248326206E-7	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999757940858693	WITHOUT_CLASSIFICATION	2.4205914130607035E-5	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9998776447705823	WITHOUT_CLASSIFICATION	1.2235522941767845E-4	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999981506376876	WITHOUT_CLASSIFICATION	1.8493623123715462E-6	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999795913281196	WITHOUT_CLASSIFICATION	2.0408671880350155E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999985575504877	WITHOUT_CLASSIFICATION	1.442449512235234E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999985575504877	WITHOUT_CLASSIFICATION	1.442449512235234E-6	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.999999953822829	WITHOUT_CLASSIFICATION	4.617717089096411E-8	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.999977043278742	WITHOUT_CLASSIFICATION	2.29567212579983E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999969671188247	WITHOUT_CLASSIFICATION	3.0328811754156135E-6	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999989738730056	WITHOUT_CLASSIFICATION	1.0261269943695646E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999917238941858	WITHOUT_CLASSIFICATION	8.276105814103373E-6	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796220573761	WITHOUT_CLASSIFICATION	2.0377942623802827E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.999929864857116	WITHOUT_CLASSIFICATION	7.013514288403539E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999905940091011	WITHOUT_CLASSIFICATION	9.40599089901774E-6	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999983514867956	WITHOUT_CLASSIFICATION	1.648513204360111E-6	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999997911735702	WITHOUT_CLASSIFICATION	2.088264297778278E-7	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.999997540709036	WITHOUT_CLASSIFICATION	2.459290963977522E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999417978679	WITHOUT_CLASSIFICATION	5.820213219222E-8	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999687103017	WITHOUT_CLASSIFICATION	3.1289698226158684E-8	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999704307581	WITHOUT_CLASSIFICATION	2.9569241968688338E-8	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999999212892705	WITHOUT_CLASSIFICATION	7.871072945905588E-8	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999945308539381	WITHOUT_CLASSIFICATION	5.469146061884132E-6	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999963296452836	WITHOUT_CLASSIFICATION	3.670354716475075E-6	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999990654784175	WITHOUT_CLASSIFICATION	9.345215823683245E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999535467496	WITHOUT_CLASSIFICATION	4.6453250447854595E-8	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999970405188673	WITHOUT_CLASSIFICATION	2.9594811326491465E-6	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999311072445588	WITHOUT_CLASSIFICATION	6.88927554411843E-5	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999992000015	WITHOUT_CLASSIFICATION	7.999985163731478E-10	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999996791422608	WITHOUT_CLASSIFICATION	3.2085773907415983E-7	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999949335321604	WITHOUT_CLASSIFICATION	5.066467839481575E-6	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999659065615959	WITHOUT_CLASSIFICATION	3.409343840400117E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999982427186591	WITHOUT_CLASSIFICATION	1.757281340853246E-6	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999998960817682	WITHOUT_CLASSIFICATION	1.0391823184630015E-7	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.999999356831411	WITHOUT_CLASSIFICATION	6.431685891673576E-7	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999997443411727	WITHOUT_CLASSIFICATION	2.5565882730579107E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999485839536	WITHOUT_CLASSIFICATION	5.141604650789296E-8	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999949137835203	WITHOUT_CLASSIFICATION	5.086216479751376E-6	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999998581454812	WITHOUT_CLASSIFICATION	1.4185451876153153E-7	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999997310476	WITHOUT_CLASSIFICATION	2.689523452558934E-10	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998168141114	WITHOUT_CLASSIFICATION	1.8318588853416126E-7	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9995439581231454	WITHOUT_CLASSIFICATION	4.5604187685455535E-4	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999996109050127	WITHOUT_CLASSIFICATION	3.8909498733160285E-7	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999718011414	WITHOUT_CLASSIFICATION	2.8198858601550087E-7	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999989806708016	WITHOUT_CLASSIFICATION	1.0193291984003064E-5	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999958591531158	WITHOUT_CLASSIFICATION	4.140846884063107E-6	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999952773945413	WITHOUT_CLASSIFICATION	4.7226054586962285E-6	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998984239669477	WITHOUT_CLASSIFICATION	1.0157603305224104E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998984239669477	WITHOUT_CLASSIFICATION	1.0157603305224104E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999643031859	WITHOUT_CLASSIFICATION	3.569681413454762E-8	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999938187307857	WITHOUT_CLASSIFICATION	6.181269214306706E-6	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9994132158766984	WITHOUT_CLASSIFICATION	5.86784123301577E-4	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999991979864482	WITHOUT_CLASSIFICATION	8.020135517291819E-7	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999987387600385	WITHOUT_CLASSIFICATION	1.2612399614968402E-6	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999996665927127	WITHOUT_CLASSIFICATION	3.3340728740436344E-7	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999998397053187	WITHOUT_CLASSIFICATION	1.6029468126505514E-7	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999995740326673	WITHOUT_CLASSIFICATION	4.2596733282543467E-7	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999344362184417	WITHOUT_CLASSIFICATION	6.55637815582625E-5	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995915941632	WITHOUT_CLASSIFICATION	4.0840583680515735E-6	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986583036988	WITHOUT_CLASSIFICATION	1.3416963011487034E-6	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999659981484018	WITHOUT_CLASSIFICATION	3.4001851598258845E-5	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999999990366838	WITHOUT_CLASSIFICATION	9.63316212464018E-9	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999653786076	WITHOUT_CLASSIFICATION	3.462139250799197E-8	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999998080005038	WITHOUT_CLASSIFICATION	1.9199949621884358E-7	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999999850490799	WITHOUT_CLASSIFICATION	1.4950920013919905E-8	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9998215535196773	WITHOUT_CLASSIFICATION	1.784464803227329E-4	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999997462295197	WITHOUT_CLASSIFICATION	2.537704803171477E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999575932932475	WITHOUT_CLASSIFICATION	4.240670675238312E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999999476532909	WITHOUT_CLASSIFICATION	5.2346709194108335E-8	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999643833308	WITHOUT_CLASSIFICATION	3.561666919662623E-8	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999944703622999	WITHOUT_CLASSIFICATION	5.529637700046778E-6	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999981000110804	WITHOUT_CLASSIFICATION	1.899988919606251E-6	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.999984298952376	WITHOUT_CLASSIFICATION	1.5701047624127465E-5	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999953949958691	WITHOUT_CLASSIFICATION	4.605004130994926E-6	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999934974180674	WITHOUT_CLASSIFICATION	6.50258193259927E-6	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999889030131479	WITHOUT_CLASSIFICATION	1.1096986852151299E-5	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999876102424	WITHOUT_CLASSIFICATION	1.238975754479636E-8	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999996988214033	WITHOUT_CLASSIFICATION	3.0117859678054953E-7	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999936046826068	WITHOUT_CLASSIFICATION	6.395317393184896E-6	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999832112854599	WITHOUT_CLASSIFICATION	1.6788714540160086E-5	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999995514498591	WITHOUT_CLASSIFICATION	4.4855014089258607E-7	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999759317357713	WITHOUT_CLASSIFICATION	2.4068264228763043E-5	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999795530152	WITHOUT_CLASSIFICATION	2.0446984774280532E-8	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999997675369523	WITHOUT_CLASSIFICATION	2.324630477220434E-7	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9994119531425348	WITHOUT_CLASSIFICATION	5.88046857465242E-4	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999625572938	WITHOUT_CLASSIFICATION	3.744270611262123E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999576358782577	WITHOUT_CLASSIFICATION	4.236412174226818E-5	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999985462084947	WITHOUT_CLASSIFICATION	1.453791505338876E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999958966858515	WITHOUT_CLASSIFICATION	4.10331414845709E-6	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999992329929719	WITHOUT_CLASSIFICATION	7.670070280609483E-7	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999172622175	WITHOUT_CLASSIFICATION	8.273778251863402E-8	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999933610784202	WITHOUT_CLASSIFICATION	6.638921579832218E-6	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999991052746434	WITHOUT_CLASSIFICATION	8.947253566752129E-7	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999994671918289	WITHOUT_CLASSIFICATION	5.328081710730365E-7	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999945194850914	WITHOUT_CLASSIFICATION	5.480514908602711E-6	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999870665830043	WITHOUT_CLASSIFICATION	1.2933416995782356E-5	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999981506376876	WITHOUT_CLASSIFICATION	1.8493623123715462E-6	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999998698026009	WITHOUT_CLASSIFICATION	1.3019739898103324E-7	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999868188254	WITHOUT_CLASSIFICATION	1.3181174560003597E-8	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.999997142044747	WITHOUT_CLASSIFICATION	2.857955253048077E-6	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999996076889588	WITHOUT_CLASSIFICATION	3.9231104124171887E-7	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999087125582	WITHOUT_CLASSIFICATION	9.128744179052182E-8	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999996423113982	WITHOUT_CLASSIFICATION	3.5768860174029407E-7	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999595918686345	WITHOUT_CLASSIFICATION	4.040813136549427E-5	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999998099574104	WITHOUT_CLASSIFICATION	1.9004258957388734E-7	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999995541033971	WITHOUT_CLASSIFICATION	4.458966028553218E-7	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9996417230847681	WITHOUT_CLASSIFICATION	3.5827691523195466E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999056327171	WITHOUT_CLASSIFICATION	9.43672828353428E-8	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999707566472318	WITHOUT_CLASSIFICATION	2.924335276828637E-5	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999997946375954	WITHOUT_CLASSIFICATION	2.0536240452911548E-7	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999952582472	WITHOUT_CLASSIFICATION	4.741752707747318E-9	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985432850058	WITHOUT_CLASSIFICATION	1.4567149941173464E-6	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999972261514163	WITHOUT_CLASSIFICATION	2.773848583800034E-6	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999963789670482	WITHOUT_CLASSIFICATION	3.62103295171016E-6	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999980754374	WITHOUT_CLASSIFICATION	1.9245626664254907E-9	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999954004033575	WITHOUT_CLASSIFICATION	4.599596642559674E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985432850058	WITHOUT_CLASSIFICATION	1.4567149941173464E-6	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999425091324361	WITHOUT_CLASSIFICATION	5.7490867563965716E-5	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999995301633164	WITHOUT_CLASSIFICATION	4.698366836396968E-7	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999960571516	WITHOUT_CLASSIFICATION	3.942848360270861E-9	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999952825922693	WITHOUT_CLASSIFICATION	4.717407730741309E-6	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999985683675653	WITHOUT_CLASSIFICATION	1.4316324346954533E-6	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999994494018308	WITHOUT_CLASSIFICATION	5.505981691740599E-7	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.999999926058636	WITHOUT_CLASSIFICATION	7.394136407597726E-8	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999097448428105	WITHOUT_CLASSIFICATION	9.025515718943764E-5	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999674865795	WITHOUT_CLASSIFICATION	3.251342051698054E-8	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999997186570007	WITHOUT_CLASSIFICATION	2.813429994014515E-7	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999885210740684	WITHOUT_CLASSIFICATION	1.1478925931593842E-5	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998156830638681	WITHOUT_CLASSIFICATION	1.843169361319692E-4	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.999998566790916	WITHOUT_CLASSIFICATION	1.4332090839985175E-6	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999991128003866	WITHOUT_CLASSIFICATION	8.871996134553981E-7	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999999360831284	WITHOUT_CLASSIFICATION	6.391687152949036E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999997494446564	WITHOUT_CLASSIFICATION	2.505553436187333E-7	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999931935248	WITHOUT_CLASSIFICATION	6.8064751336836275E-9	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999997060485731	WITHOUT_CLASSIFICATION	2.9395142688555716E-7	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9998384820258912	WITHOUT_CLASSIFICATION	1.6151797410876714E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999990372637625	WITHOUT_CLASSIFICATION	9.627362375235373E-7	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.999996951085525	WITHOUT_CLASSIFICATION	3.048914475087869E-6	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999499234782717	WITHOUT_CLASSIFICATION	5.007652172836142E-5	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999966144890525	WITHOUT_CLASSIFICATION	3.3855109475375293E-6	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999996536367672	WITHOUT_CLASSIFICATION	3.463632327467179E-7	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999681827019	WITHOUT_CLASSIFICATION	3.181729818304276E-8	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999998964321585	WITHOUT_CLASSIFICATION	1.0356784148660757E-7	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999931283705772	WITHOUT_CLASSIFICATION	6.871629422724772E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999974465189179	WITHOUT_CLASSIFICATION	2.5534810821016492E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999998477840611	WITHOUT_CLASSIFICATION	1.5221593876228752E-7	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999918574120141	WITHOUT_CLASSIFICATION	8.142587985959981E-6	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999950346545288	WITHOUT_CLASSIFICATION	4.965345471149316E-6	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999597967737679	WITHOUT_CLASSIFICATION	4.020322623217492E-5	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999982660573621	WITHOUT_CLASSIFICATION	1.7339426380025419E-6	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999996995113172	WITHOUT_CLASSIFICATION	3.0048868282424283E-7	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999969333261	WITHOUT_CLASSIFICATION	3.066673978983182E-9	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999615996124	WITHOUT_CLASSIFICATION	3.840038757725493E-8	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999987453207897	WITHOUT_CLASSIFICATION	1.2546792102001077E-6	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9995584081643463	WITHOUT_CLASSIFICATION	4.41591835653706E-4	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999997087942561	WITHOUT_CLASSIFICATION	2.9120574393194174E-7	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999998684902733	WITHOUT_CLASSIFICATION	1.315097266890865E-7	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9997794709208465	WITHOUT_CLASSIFICATION	2.2052907915344637E-4	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9997794709208465	WITHOUT_CLASSIFICATION	2.2052907915344637E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999992916663253	WITHOUT_CLASSIFICATION	7.083336747044178E-6	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999995564470909	WITHOUT_CLASSIFICATION	4.4355290908001623E-7	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999999316080671	WITHOUT_CLASSIFICATION	6.839193289213774E-7	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9930455059755611	WITHOUT_CLASSIFICATION	0.0069544940244388445	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999917801689813	WITHOUT_CLASSIFICATION	8.219831018706969E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999917801689813	WITHOUT_CLASSIFICATION	8.219831018706969E-6	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999936722409952	WITHOUT_CLASSIFICATION	6.327759004854289E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999947945911294	WITHOUT_CLASSIFICATION	5.205408870623678E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999363644509447	WITHOUT_CLASSIFICATION	6.363554905536213E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999868354669302	WITHOUT_CLASSIFICATION	1.3164533069864537E-5	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999882595890972	WITHOUT_CLASSIFICATION	1.1740410902886008E-5	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999980945600555	WITHOUT_CLASSIFICATION	1.9054399445889812E-6	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999960448707458	WITHOUT_CLASSIFICATION	3.955129254167845E-6	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999995361243059	WITHOUT_CLASSIFICATION	4.6387569410065223E-7	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999890105755928	WITHOUT_CLASSIFICATION	1.0989424407210621E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996986694601	WITHOUT_CLASSIFICATION	3.013305397752313E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996986694601	WITHOUT_CLASSIFICATION	3.013305397752313E-7	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9997956078984863	WITHOUT_CLASSIFICATION	2.0439210151373494E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999958755394707	WITHOUT_CLASSIFICATION	4.12446052929121E-6	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999959475258907	WITHOUT_CLASSIFICATION	4.052474109337125E-6	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999803204375324	WITHOUT_CLASSIFICATION	1.9679562467624576E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977809858233	WITHOUT_CLASSIFICATION	2.2190141767017897E-5	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999993982873798	WITHOUT_CLASSIFICATION	6.017126202769158E-7	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996250671882	WITHOUT_CLASSIFICATION	3.749328117941093E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977809858233	WITHOUT_CLASSIFICATION	2.2190141767017897E-5	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999954464848861	WITHOUT_CLASSIFICATION	4.553515113924452E-6	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999997279683612	WITHOUT_CLASSIFICATION	2.7203163874961976E-7	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.999622134389456	WITHOUT_CLASSIFICATION	3.778656105440181E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999993878742416	WITHOUT_CLASSIFICATION	6.121257584055901E-7	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999997186570007	WITHOUT_CLASSIFICATION	2.813429994014515E-7	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999817956220916	WITHOUT_CLASSIFICATION	1.820437790841081E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999002388980686	WITHOUT_CLASSIFICATION	9.97611019314003E-5	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999874840769685	WITHOUT_CLASSIFICATION	1.2515923031578665E-5	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999784826173689	WITHOUT_CLASSIFICATION	2.151738263119366E-5	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999945223954055	WITHOUT_CLASSIFICATION	5.477604594449204E-6	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999987729207553	WITHOUT_CLASSIFICATION	1.2270792447014896E-6	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999340316252588	WITHOUT_CLASSIFICATION	6.596837474112657E-5	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999984228202	WITHOUT_CLASSIFICATION	1.577179862402353E-9	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999977328689762	WITHOUT_CLASSIFICATION	2.2671310237171034E-6	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999273943411306	WITHOUT_CLASSIFICATION	7.260565886938212E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999273943411306	WITHOUT_CLASSIFICATION	7.260565886938212E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999815795072317	WITHOUT_CLASSIFICATION	1.8420492768368376E-5	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999949907865	WITHOUT_CLASSIFICATION	5.00921346164291E-9	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998197883065648	WITHOUT_CLASSIFICATION	1.8021169343525144E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999443937211501	WITHOUT_CLASSIFICATION	5.560627884996575E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999963543681455	WITHOUT_CLASSIFICATION	3.6456318544033978E-6	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999321244917	WITHOUT_CLASSIFICATION	6.787550831394144E-8	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998835689600187	WITHOUT_CLASSIFICATION	1.1643103998127126E-4	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999971894235	WITHOUT_CLASSIFICATION	2.810576513420333E-9	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999888229186837	WITHOUT_CLASSIFICATION	1.1177081316226003E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999946700349954	WITHOUT_CLASSIFICATION	5.32996500463139E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947646322582	WITHOUT_CLASSIFICATION	5.2353677417688345E-6	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999982513561869	WITHOUT_CLASSIFICATION	1.7486438130541331E-6	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9991668014262908	WITHOUT_CLASSIFICATION	8.331985737092633E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999928452725	WITHOUT_CLASSIFICATION	7.154727470773576E-9	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999997969774207	WITHOUT_CLASSIFICATION	2.0302257939502164E-7	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999985357521529	WITHOUT_CLASSIFICATION	1.464247847091307E-6	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999960111202667	WITHOUT_CLASSIFICATION	3.988879733292526E-6	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999990994140008	WITHOUT_CLASSIFICATION	9.005859991119074E-7	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9997545605616519	WITHOUT_CLASSIFICATION	2.454394383481448E-4	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999998721357	WITHOUT_CLASSIFICATION	1.2786430136752618E-10	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999887354528	WITHOUT_CLASSIFICATION	1.126454716148536E-8	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999849649213	WITHOUT_CLASSIFICATION	1.503507874891566E-8	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999915221276956	WITHOUT_CLASSIFICATION	8.477872304311773E-6	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.999999921869273	WITHOUT_CLASSIFICATION	7.813072689647945E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999282719868	WITHOUT_CLASSIFICATION	7.172801319159051E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999282719868	WITHOUT_CLASSIFICATION	7.172801319159051E-8	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999998673770196	WITHOUT_CLASSIFICATION	1.3262298039318249E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999892996438475	WITHOUT_CLASSIFICATION	1.0700356152452647E-5	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999443976801	WITHOUT_CLASSIFICATION	5.5602320006226585E-8	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999349863367	WITHOUT_CLASSIFICATION	6.501366328667774E-8	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999896955591081	WITHOUT_CLASSIFICATION	1.0304440891991308E-5	IMPLEMENTATION
