IMPLEMENTATION	todo add support for read_write ( + nonstrict_read_write ??? )
IMPLEMENTATION	todo add support for read_write ( + nonstrict_read_write ??? )
IMPLEMENTATION	todo return new lock(ts)
IMPLEMENTATION	todo if lock.gettimestamp().equals(ts)
IMPLEMENTATION	todo mappings.getlogicaltablename(ownertable)
IMPLEMENTATION	todo handle typedefs
IMPLEMENTATION	todo check there is no actual definition elemnents when a ref is defined
IMPLEMENTATION	todo bindpropertyresults(alias returnelem)
IMPLEMENTATION	todo validate existing of property with the chosen name. (secondpass )
IMPLEMENTATION	todo native ids
IMPLEMENTATION	todo if we are using identity columns fetch the identifier
IMPLEMENTATION	todo handle property-ref
IMPLEMENTATION	todo get all properties not just the fetched ones!
IMPLEMENTATION	todo get all properties not just the fetched ones!
IMPLEMENTATION	todo check if mimer sql cannot handle the way db2 does
IMPLEMENTATION	todo restrict violation
IMPLEMENTATION	todo lowercasing done here. was done "at random" before maybe not needed at all ?
IMPLEMENTATION	todo tolowercase was not done before. only used in template.
IMPLEMENTATION	add an entry for this type of entity. we can be assured that all referenced entities have already been processed so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.
IMPLEMENTATION	todo avoid this for non-new instances where mightbedirty==false
IMPLEMENTATION	todo optimize away this lookup for entities w/o unsaved-value="undefined"
IMPLEMENTATION	we could move this inside if we wanted to tolerate collection initializations during collection dirty checking
IMPLEMENTATION	todo assertion only could be optimized away
IMPLEMENTATION	todo check that entry.getidentifier().equals(requestedid)
IMPLEMENTATION	todo check that entry.getidentifier().equals(requestedid)
IMPLEMENTATION	todo why aren't these the same?
IMPLEMENTATION	todo always true for now but not if we later decide to support elements() in the from clause
IMPLEMENTATION	todo or should we return 'containstablealias'??
IMPLEMENTATION	todo arithmetic expressions multiple new foo()
IMPLEMENTATION	todo for some dialects it would be appropriate to add the renderorderbypropertiesselect() to other select strings
IMPLEMENTATION	todo cache the persister this shows up in yourkit
IMPLEMENTATION	todo theoretically non-threadsafe
IMPLEMENTATION	todo look at optimizing these
IMPLEMENTATION	todo maybe call it getrowselection() ?
IMPLEMENTATION	todo make this handle multiple collection roles!
IMPLEMENTATION	todo can we limit stored procedures ?!
IMPLEMENTATION	todo not visible to the user!
IMPLEMENTATION	todo unnecessary for databases with ansi-style joins
IMPLEMENTATION	todo use these in methods above
IMPLEMENTATION	todo better error message since we actually support composites if names are explicitly listed.
IMPLEMENTATION	todo better error message since we actually support composites if names are explicitly listed.
IMPLEMENTATION	todo temporary initial step towards hhh-1907
IMPLEMENTATION	todo remove this once componentmetamodel is complete and merged
IMPLEMENTATION	todo handle supportsnotnullunique=false but such a case does not exist in the wild so far
IMPLEMENTATION	todo still need to make collectionpersisters entitymode-aware
IMPLEMENTATION	todo add owner argument!!
IMPLEMENTATION	todo formulas ?
IMPLEMENTATION	todo include the rowids!!!!
IMPLEMENTATION	todo cache this sql
IMPLEMENTATION	todo create uk loaders for component properties
IMPLEMENTATION	todo cache this in an instvar
IMPLEMENTATION	/ todo look at perhaps caching this
IMPLEMENTATION	todo eventually put this back in once we think all is fixed object otheralias = columnsunique.put(qualifiedcolumn columnalias)
IMPLEMENTATION	todo if we support multiple fetch groups we would need to clone the set of lazy properties!
IMPLEMENTATION	todo proxies!
IMPLEMENTATION	todo terrible implementation!
IMPLEMENTATION	todo proxies!
IMPLEMENTATION	todo i don't really like this implementation it would be better if this was handled by searchfordirtycollections()
IMPLEMENTATION	todo check if key contains the owner id
IMPLEMENTATION	todo proxies!
IMPLEMENTATION	table=null -> an association - fill it in later todo fill in the mappings for table == null
IMPLEMENTATION	table=null -> an association - fill it in later todo fill in the mappings for table == null
IMPLEMENTATION	if we are still not resolved we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). todo cleanup the grammar so that "processconstants" is always just handled from here
IMPLEMENTATION	todo add referencedclass to disambiguate to fks on the same columns pointing to different tables
WITHOUT_CLASSIFICATION	test out the optimizer
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	| this | bean | args | raw bean |
WITHOUT_CLASSIFICATION	invokeinterface
WITHOUT_CLASSIFICATION	astore 4 store the raw bean
WITHOUT_CLASSIFICATION	current stack len = 0
WITHOUT_CLASSIFICATION	current stack len = 0
WITHOUT_CLASSIFICATION	local variables | target obj | each oldvalue |
WITHOUT_CLASSIFICATION	invokeinterface invoke enabled.getinterceptfieldcallback()
WITHOUT_CLASSIFICATION	putfield new value of the field
WITHOUT_CLASSIFICATION	reference type
WITHOUT_CLASSIFICATION	double
WITHOUT_CLASSIFICATION	double
WITHOUT_CLASSIFICATION	long
WITHOUT_CLASSIFICATION	just decrement the lock don't recache (we don't know which transaction won)
WITHOUT_CLASSIFICATION	decode row selection
WITHOUT_CLASSIFICATION	disassembled state gets put in a new array (we write to cache by value!)
WITHOUT_CLASSIFICATION	again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.
WITHOUT_CLASSIFICATION	check
WITHOUT_CLASSIFICATION	row id
WITHOUT_CLASSIFICATION	composite-id
WITHOUT_CLASSIFICATION	discriminator
WITHOUT_CLASSIFICATION	property prop = new property() prop.setname("id") prop.setpropertyaccessorname("embedded") prop.setvalue(id) entity.setidentifierproperty(prop)
WITHOUT_CLASSIFICATION	dynamic insert
WITHOUT_CLASSIFICATION	persister
WITHOUT_CLASSIFICATION	get meta's from <subclass>
WITHOUT_CLASSIFICATION	properties
WITHOUT_CLASSIFICATION	properties
WITHOUT_CLASSIFICATION	generated properties can never be insertable
WITHOUT_CLASSIFICATION	table
WITHOUT_CLASSIFICATION	by default natural-ids are "immutable" (constant)
WITHOUT_CLASSIFICATION	( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)
WITHOUT_CLASSIFICATION	we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result
WITHOUT_CLASSIFICATION	build a resultsetmappingdefinition given a containing element for the "return-xxx" elements @param resultsetelem the element containing the return definitions. @param path no clue @param mappings the current processing state. @return the description of the mappings
WITHOUT_CLASSIFICATION	private boolean showsql private boolean formatsql
WITHOUT_CLASSIFICATION	public boolean isshowsqlenabled() { return showsql } public boolean isformatsqlenabled() { return formatsql }
WITHOUT_CLASSIFICATION	set a custom entity resolver. this entity resolver must be set before addxxx(misc) call. default value is {@link org.hibernate.util.dtdentityresolver} @param entityresolver entity resolver to use
WITHOUT_CLASSIFICATION	final list extendsqueue
WITHOUT_CLASSIFICATION	if close() is called guarantee unbind()
WITHOUT_CLASSIFICATION	if a threadlocalsessioncontext-bound session happens to get serialized to be completely correct we need to make sure that unbinding of that session occurs.
WITHOUT_CLASSIFICATION	on the inverse it makes sense that if a threadlocalsessioncontext- bound session then gets deserialized to go ahead and re-bind it to the threadlocalsessioncontext session map.
WITHOUT_CLASSIFICATION	cannot be instantiated
WITHOUT_CLASSIFICATION	60 second lock timeout
WITHOUT_CLASSIFICATION	optimisticcache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	option.setdataversion( nonlockingdataversion.instance )
WITHOUT_CLASSIFICATION	do the put outside the scope of the jta txn
WITHOUT_CLASSIFICATION	ignore!
WITHOUT_CLASSIFICATION	tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (npes)
WITHOUT_CLASSIFICATION	60 seconds
WITHOUT_CLASSIFICATION	ignore!
WITHOUT_CLASSIFICATION	60 seconds
WITHOUT_CLASSIFICATION	do the failfast put outside the scope of the jta txn
WITHOUT_CLASSIFICATION	note evict() operates locally only (i.e. does not propogate to any other nodes in the potential cluster). this is exactly what is needed when we destroy() here destroy() is used as part of the process of shutting down a sessionfactory thus these removals should not be propogated
WITHOUT_CLASSIFICATION	protected regionrootlistener listener
WITHOUT_CLASSIFICATION	establish the region root node with a non-locking data version
WITHOUT_CLASSIFICATION	if we've been blocking for the mutex perhaps another thread has already reestablished the root. in case the node was reestablised via replication confirm it's marked "resident" (a status which doesn't replicate)
WITHOUT_CLASSIFICATION	for pessimistic locking we just want to toss out our ref to any old invalid root node and get the latest (may be null)
WITHOUT_CLASSIFICATION	the rest only matters for optimistic locking where we need to establish the proper data version on the region root
WITHOUT_CLASSIFICATION	don't hold a transactional lock for this
WITHOUT_CLASSIFICATION	make sure the root node for the region exists and has a dataversion that never complains
WITHOUT_CLASSIFICATION	never evict this node
WITHOUT_CLASSIFICATION	fix up the resident flag
WITHOUT_CLASSIFICATION	60 seconds
WITHOUT_CLASSIFICATION	we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists
WITHOUT_CLASSIFICATION	no-op. we don't own the cache so we shouldn't stop it.
WITHOUT_CLASSIFICATION	this should only be possible if the caches are constructor injected
WITHOUT_CLASSIFICATION	we only build caches if none were passed in. passing in caches counts as a clear statement of exactly what is wanted
WITHOUT_CLASSIFICATION	set up the cache factory
WITHOUT_CLASSIFICATION	see if the user configured a multiplexer stack
WITHOUT_CLASSIFICATION	default to collections sharing entity cache if there is one
WITHOUT_CLASSIFICATION	default to sharing the entity cache if there is one
WITHOUT_CLASSIFICATION	for timestamps we default to a separate config
WITHOUT_CLASSIFICATION	we can't change the tm on a running cache just check if the cache has no tm and we're ok with that
WITHOUT_CLASSIFICATION	configure the cache to use our tm
WITHOUT_CLASSIFICATION	make sure jbc doesn't look one up
WITHOUT_CLASSIFICATION	this method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start
WITHOUT_CLASSIFICATION	make sure we don't re-release the same cache
WITHOUT_CLASSIFICATION	we use a different delegate than the non-optimistic superclass default
WITHOUT_CLASSIFICATION	following methods we don't delegate since they have so little logic it's clearer to just implement them here
WITHOUT_CLASSIFICATION	if jbc is using invalidation we don't want to propagate changes. we use the timestamps cache to manage invalidation
WITHOUT_CLASSIFICATION	we don't want to waste effort setting an option if jbc is already in local mode. if jbc is repl_(a)sync then check if they passed an config option to disable query replication
WITHOUT_CLASSIFICATION	don't hold the jbc node lock throughout the tx as that prevents updates add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit
WITHOUT_CLASSIFICATION	double check the distributed cache
WITHOUT_CLASSIFICATION	get an exclusive right to update jbc for this key from this node.
WITHOUT_CLASSIFICATION	we ensure async semantics (jbcache-1175)
WITHOUT_CLASSIFICATION	initial load from jbc
WITHOUT_CLASSIFICATION	see if we had a 2nd invalidation from the same initial preinvalidation timestamp. if so only increment if the new current value is an increase
WITHOUT_CLASSIFICATION	we ensure async semantics (jbcache-1175)
WITHOUT_CLASSIFICATION	if the workspace node has null as well ok if not we've been modified in a non-comparable manner which we have to treat as us being newer
WITHOUT_CLASSIFICATION	the standard comparator types are not serializable but are singletons
WITHOUT_CLASSIFICATION	ignore!
WITHOUT_CLASSIFICATION	ignore it
WITHOUT_CLASSIFICATION	construct the cache
WITHOUT_CLASSIFICATION	local cache so we use synchronization
WITHOUT_CLASSIFICATION	local cache so we use synchronization
WITHOUT_CLASSIFICATION	ie. 60 seconds
WITHOUT_CLASSIFICATION	swaldman 2006-08-28 define c3p0-style configuration parameters for initialpoolsize which hibernate sensibly lets default to minpoolsize but we'll let users override it with the c3p0-style property if they want.
WITHOUT_CLASSIFICATION	datasource unpooled = datasources.unpooleddatasource(jdbcurl props.getproperty(environment.user) props.getproperty(environment.pass))
WITHOUT_CLASSIFICATION	true if the pool is borrowed from the outside false if we used to create it
WITHOUT_CLASSIFICATION	get a connection from the pool (thru drivermanager cfr. proxool doc)
WITHOUT_CLASSIFICATION	set the transaction isolation if defined
WITHOUT_CLASSIFICATION	toggle autocommit to false if set
WITHOUT_CLASSIFICATION	return the connection
WITHOUT_CLASSIFICATION	get the configurator files (if available)
WITHOUT_CLASSIFICATION	default the proxool alias setting
WITHOUT_CLASSIFICATION	validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	set the existing pool flag to true
WITHOUT_CLASSIFICATION	configured using the jaxp configurator
WITHOUT_CLASSIFICATION	validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	configured using the properties file configurator
WITHOUT_CLASSIFICATION	remember isolation level
WITHOUT_CLASSIFICATION	if the provider was leeching off an existing pool don't close it
WITHOUT_CLASSIFICATION	we have created the pool ourselves so shut it down
WITHOUT_CLASSIFICATION	not really a many-to-one association necessarily
WITHOUT_CLASSIFICATION	not really a many-to-one association necessarily
WITHOUT_CLASSIFICATION	always overwrite nonversioned data
WITHOUT_CLASSIFICATION	public currency getcurrency(int col) throws hibernateexception
WITHOUT_CLASSIFICATION	default is pojo
WITHOUT_CLASSIFICATION	use setparameter for null values
WITHOUT_CLASSIFICATION	use setparameter for null values
WITHOUT_CLASSIFICATION	private cacheentry cacheentry
WITHOUT_CLASSIFICATION	don't need to lock the cache here since if someone else inserted the same pk first the insert would fail
WITHOUT_CLASSIFICATION	make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!
WITHOUT_CLASSIFICATION	get the updated snapshot of the entity state by cloning current state it is safe to copy in place since by this time no-one else (should have) has a reference to the array
WITHOUT_CLASSIFICATION	this entity defines proeprty generation so process those generated values
WITHOUT_CLASSIFICATION	have the entity entry perform post-update processing passing it the update state and the new version (if one).
WITHOUT_CLASSIFICATION	!persister.iscacheinvalidationrequired()
WITHOUT_CLASSIFICATION	need to look it up from the persistence-context
WITHOUT_CLASSIFICATION	sort first by role name
WITHOUT_CLASSIFICATION	make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!
WITHOUT_CLASSIFICATION	then by fk
WITHOUT_CLASSIFICATION	nothing to do
WITHOUT_CLASSIFICATION	nothing to do
WITHOUT_CLASSIFICATION	an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized hibernate has no way of knowing if the collection is actually empty without querying the db)
WITHOUT_CLASSIFICATION	this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner
WITHOUT_CLASSIFICATION	boolean put = persister.getcache().insert(ck cacheentry)
WITHOUT_CLASSIFICATION	we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush
WITHOUT_CLASSIFICATION	do nothing - we only need to notify the cache
WITHOUT_CLASSIFICATION	sort first by entity name
WITHOUT_CLASSIFICATION	then by id
WITHOUT_CLASSIFICATION	to be safe
WITHOUT_CLASSIFICATION	no transformations took place so handle it as we would a non-instrumented class
WITHOUT_CLASSIFICATION	see if the entry represents a class file
WITHOUT_CLASSIFICATION	see if the entry represents a class file
WITHOUT_CLASSIFICATION	intentionally empty
WITHOUT_CLASSIFICATION	test out the optimizer
WITHOUT_CLASSIFICATION	set the name of bulk accessor.
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	invokespecial
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	aload_1 load bean
WITHOUT_CLASSIFICATION	checkcast cast bean
WITHOUT_CLASSIFICATION	astore_3 store bean
WITHOUT_CLASSIFICATION	aload_2 args
WITHOUT_CLASSIFICATION	iconst_i continue to aastore growing stack is 1
WITHOUT_CLASSIFICATION	new
WITHOUT_CLASSIFICATION	dup
WITHOUT_CLASSIFICATION	aload_3 load the raw bean
WITHOUT_CLASSIFICATION	invokeinterface
WITHOUT_CLASSIFICATION	invokevirtual
WITHOUT_CLASSIFICATION	invokevirtual
WITHOUT_CLASSIFICATION	aastore args
WITHOUT_CLASSIFICATION	| this | bean | args | i | raw bean | exception |
WITHOUT_CLASSIFICATION	required to exception table iconst_0 i
WITHOUT_CLASSIFICATION	istore_3 store i
WITHOUT_CLASSIFICATION	aload_1 load the bean
WITHOUT_CLASSIFICATION	checkcast cast the bean into a raw bean
WITHOUT_CLASSIFICATION	current stack len = 0
WITHOUT_CLASSIFICATION	start region to handling exception (bulkaccessorexception)
WITHOUT_CLASSIFICATION	iinc 3 1
WITHOUT_CLASSIFICATION	aload 4 load the raw bean
WITHOUT_CLASSIFICATION	aload_2 load the args
WITHOUT_CLASSIFICATION	iconst_i
WITHOUT_CLASSIFICATION	aaload
WITHOUT_CLASSIFICATION	checkcast
WITHOUT_CLASSIFICATION	checkcast (case of primitive type) invokevirtual (case of primitive type)
WITHOUT_CLASSIFICATION	checkcast (case of reference type)
WITHOUT_CLASSIFICATION	current stack len = 2
WITHOUT_CLASSIFICATION	end region to handling exception (bulkaccessorexception)
WITHOUT_CLASSIFICATION	register in exception table
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	dup
WITHOUT_CLASSIFICATION	invokevirtual
WITHOUT_CLASSIFICATION	checkcast
WITHOUT_CLASSIFICATION	local variables | target obj | each oldvalue |
WITHOUT_CLASSIFICATION	astore 5 store exception
WITHOUT_CLASSIFICATION	new bulkaccessorexception
WITHOUT_CLASSIFICATION	aload 5 load exception
WITHOUT_CLASSIFICATION	iload_3 i
WITHOUT_CLASSIFICATION	invokespecial bulkaccessorexception.<init>
WITHOUT_CLASSIFICATION	athrow
WITHOUT_CLASSIFICATION	warning classfile only
WITHOUT_CLASSIFICATION	swallow
WITHOUT_CLASSIFICATION	local variable | this |
WITHOUT_CLASSIFICATION	aload_0 load this
WITHOUT_CLASSIFICATION	aload_0 load this
WITHOUT_CLASSIFICATION	getfield get field "$javassist_callback" defined already
WITHOUT_CLASSIFICATION	areturn return the value of the field
WITHOUT_CLASSIFICATION	local variables | this | callback |
WITHOUT_CLASSIFICATION	aload_1 load callback
WITHOUT_CLASSIFICATION	putfield put field "$javassist_callback" defined already
WITHOUT_CLASSIFICATION	case of non-static field
WITHOUT_CLASSIFICATION	getfield get each field
WITHOUT_CLASSIFICATION	invokeinterface invoke enabled.getinterceptfieldcallback()
WITHOUT_CLASSIFICATION	ifnonnull
WITHOUT_CLASSIFICATION	return each type
WITHOUT_CLASSIFICATION	return each type
WITHOUT_CLASSIFICATION	store_1 each type
WITHOUT_CLASSIFICATION	ldc name of the field
WITHOUT_CLASSIFICATION	load_1 each type
WITHOUT_CLASSIFICATION	invokeinterface invoke callback.read() each type
WITHOUT_CLASSIFICATION	int
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	dup
WITHOUT_CLASSIFICATION	invokeinterface
WITHOUT_CLASSIFICATION	checkcast
WITHOUT_CLASSIFICATION	checkcast
WITHOUT_CLASSIFICATION	invokeinterface enabled.getinterceptfieldcallback()
WITHOUT_CLASSIFICATION	invokeinterface enabled.getinterceptfieldcallback()
WITHOUT_CLASSIFICATION	ifnonnull (label1)
WITHOUT_CLASSIFICATION	load_1
WITHOUT_CLASSIFICATION	load_1
WITHOUT_CLASSIFICATION	putfield
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	ldc field name
WITHOUT_CLASSIFICATION	getfield old value of the field
WITHOUT_CLASSIFICATION	invokeinterface callback.write(..)
WITHOUT_CLASSIFICATION	reference type
WITHOUT_CLASSIFICATION	reference type
WITHOUT_CLASSIFICATION	not array
WITHOUT_CLASSIFICATION	array of reference type
WITHOUT_CLASSIFICATION	boolean
WITHOUT_CLASSIFICATION	byte
WITHOUT_CLASSIFICATION	char
WITHOUT_CLASSIFICATION	short
WITHOUT_CLASSIFICATION	double
WITHOUT_CLASSIFICATION	float
WITHOUT_CLASSIFICATION	float
WITHOUT_CLASSIFICATION	long
WITHOUT_CLASSIFICATION	long
WITHOUT_CLASSIFICATION	bad type
WITHOUT_CLASSIFICATION	bad type
WITHOUT_CLASSIFICATION	boolean byte char int short
WITHOUT_CLASSIFICATION	boolean byte char int short
WITHOUT_CLASSIFICATION	reference type
WITHOUT_CLASSIFICATION	double
WITHOUT_CLASSIFICATION	float
WITHOUT_CLASSIFICATION	float
WITHOUT_CLASSIFICATION	long
WITHOUT_CLASSIFICATION	bad type
WITHOUT_CLASSIFICATION	bad type
WITHOUT_CLASSIFICATION	boolean byte char int short
WITHOUT_CLASSIFICATION	skip finalize methods
WITHOUT_CLASSIFICATION	mainly for oscache
WITHOUT_CLASSIFICATION	decrement the lock
WITHOUT_CLASSIFICATION	create new lock that times out immediately
WITHOUT_CLASSIFICATION	recache the updated state
WITHOUT_CLASSIFICATION	noop
WITHOUT_CLASSIFICATION	null clientlock is remotely possible but will never happen in practice
WITHOUT_CLASSIFICATION	we really could refresh the item if it is not a lock but it might be slower return freshtimestamp < txtimestamp
WITHOUT_CLASSIFICATION	by requiring < we rely on lock timeout in the case of an unsuccessful update!
WITHOUT_CLASSIFICATION	the user provided resulttransformer not the one used with "select new". here to avoid mangling transformed/non-transformed results.
WITHOUT_CLASSIFICATION	disassemble positional parameters
WITHOUT_CLASSIFICATION	disassemble named parameters
WITHOUT_CLASSIFICATION	ie. 60 seconds
WITHOUT_CLASSIFICATION	noop
WITHOUT_CLASSIFICATION	noop
WITHOUT_CLASSIFICATION	noop
WITHOUT_CLASSIFICATION	this is called from settingsfactory irregardless trivial to simply disregard
WITHOUT_CLASSIFICATION	do nothing subclasses may override.
WITHOUT_CLASSIFICATION	do nothing subclasses may override.
WITHOUT_CLASSIFICATION	throw new unsupportedoperationexception("can't write to a readonly object")
WITHOUT_CLASSIFICATION	assembled state gets put in a new array (we read from cache by value!)
WITHOUT_CLASSIFICATION	persister.setidentifier(result id) before calling interceptor for consistency with normal load
WITHOUT_CLASSIFICATION	no-op ccs did not have such a concept
WITHOUT_CLASSIFICATION	no-op ccs did not have such a concept
WITHOUT_CLASSIFICATION	again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.
WITHOUT_CLASSIFICATION	again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction
WITHOUT_CLASSIFICATION	again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction
WITHOUT_CLASSIFICATION	classes mentioned in extends not available - so put it in queue
WITHOUT_CLASSIFICATION	get meta's from <hibernate-mapping>
WITHOUT_CLASSIFICATION	get meta's from <class>
WITHOUT_CLASSIFICATION	db-objectname
WITHOUT_CLASSIFICATION	mutable
WITHOUT_CLASSIFICATION	where
WITHOUT_CLASSIFICATION	check
WITHOUT_CLASSIFICATION	polymorphism
WITHOUT_CLASSIFICATION	todo
WITHOUT_CLASSIFICATION	id
WITHOUT_CLASSIFICATION	version / timestamp
WITHOUT_CLASSIFICATION	discriminator
WITHOUT_CLASSIFICATION	primary key constraint
WITHOUT_CLASSIFICATION	this is either a <version/> tag with no type attribute or a <timestamp/> tag
WITHOUT_CLASSIFICATION	for version properties marked as being generated make sure they are "always" generated aka "insert" is invalid this is dis-allowed by the dtd but just to make sure
WITHOUT_CLASSIFICATION	discriminator
WITHOUT_CLASSIFICATION	( (column) discrim.getcolumniterator().next() ).settype(type)
WITHOUT_CLASSIFICATION	go ahead and set the lazy here since pojo.proxy can override it.
WITHOUT_CLASSIFICATION	dynamic update
WITHOUT_CLASSIFICATION	import
WITHOUT_CLASSIFICATION	batch size
WITHOUT_CLASSIFICATION	select before update
WITHOUT_CLASSIFICATION	optimistic lock mode
WITHOUT_CLASSIFICATION	persister
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	get meta's from <subclass>
WITHOUT_CLASSIFICATION	properties
WITHOUT_CLASSIFICATION	joined subclasses
WITHOUT_CLASSIFICATION	key
WITHOUT_CLASSIFICATION	check
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	properties
WITHOUT_CLASSIFICATION	key
WITHOUT_CLASSIFICATION	model.getkey().settype( new type( model.getidentifier() ) )
WITHOUT_CLASSIFICATION	tablename
WITHOUT_CLASSIFICATION	join.getkey().settype( new type( lazz.getidentifier() ) )
WITHOUT_CLASSIFICATION	properties
WITHOUT_CLASSIFICATION	column(s)
WITHOUT_CLASSIFICATION	column index
WITHOUT_CLASSIFICATION	column unique-key
WITHOUT_CLASSIFICATION	automatically makes a column with the default name if none is specifed by xml
WITHOUT_CLASSIFICATION	for an any
WITHOUT_CLASSIFICATION	insertable simply because that is the user did not specify anything just override it
WITHOUT_CLASSIFICATION	the user specifically supplied insert="true" which constitutes an illegal combo
WITHOUT_CLASSIFICATION	properties generated on update can never be updateable
WITHOUT_CLASSIFICATION	updateable only because the user did not specify anything just override it
WITHOUT_CLASSIFICATION	the user specifically supplied update="true" which constitutes an illegal combo
WITHOUT_CLASSIFICATION	rolename
WITHOUT_CLASSIFICATION	fetch strategy
WITHOUT_CLASSIFICATION	table
WITHOUT_CLASSIFICATION	tablename = mappings.getnamingstrategy().propertytotablename( classname path )
WITHOUT_CLASSIFICATION	sort
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	unsorted natural comparator.class.name
WITHOUT_CLASSIFICATION	orphan delete (used for programmer error detection)
WITHOUT_CLASSIFICATION	set up second pass
WITHOUT_CLASSIFICATION	an "embedded" component (composite ids and unique) note that this does not handle nested components
WITHOUT_CLASSIFICATION	a nested composite element
WITHOUT_CLASSIFICATION	for an any we will have to use reflection
WITHOUT_CLASSIFICATION	note special case one-to-one constrained=false cannot be proxied so default to join and non-lazy
WITHOUT_CLASSIFICATION	use old (hb 2.1) defaults if outer-join is specified
WITHOUT_CLASSIFICATION	lazy = !join
WITHOUT_CLASSIFICATION	generator
WITHOUT_CLASSIFICATION	id unsaved-value
WITHOUT_CLASSIFICATION	version unsaved-value
WITHOUT_CLASSIFICATION	not necessarily a unique property reference
WITHOUT_CLASSIFICATION	( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)
WITHOUT_CLASSIFICATION	contained elements
WITHOUT_CLASSIFICATION	for non-inverse one-to-many with a not-null fk add a backref!
WITHOUT_CLASSIFICATION	bind the where
WITHOUT_CLASSIFICATION	bind the order-by
WITHOUT_CLASSIFICATION	bind the filters
WITHOUT_CLASSIFICATION	overriding inherited meta attribute. hbx-621 & hbx-793
WITHOUT_CLASSIFICATION	first iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.
WITHOUT_CLASSIFICATION	mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a fqn (in the case of a pojo mapping).
WITHOUT_CLASSIFICATION	+ "_" + referencedcolumnname not used for backward compatibility
WITHOUT_CLASSIFICATION	sessionfactory name
WITHOUT_CLASSIFICATION	jdbc and connection settings
WITHOUT_CLASSIFICATION	jdbc and connection settings
WITHOUT_CLASSIFICATION	interrogate jdbc metadata
WITHOUT_CLASSIFICATION	user supplied jdbc connections
WITHOUT_CLASSIFICATION	use dialect default properties
WITHOUT_CLASSIFICATION	transaction settings
WITHOUT_CLASSIFICATION	sql generation settings
WITHOUT_CLASSIFICATION	query parser settings
WITHOUT_CLASSIFICATION	second-level / query cache
WITHOUT_CLASSIFICATION	the cache provider is needed when we either have second-level cache enabled or query cache enabled. note that usesecondlevelcache is enabled by default
WITHOUT_CLASSIFICATION	sql exception converter
WITHOUT_CLASSIFICATION	statistics and logging
WITHOUT_CLASSIFICATION	settings.setshowsqlenabled(showsql)
WITHOUT_CLASSIFICATION	settings.setformatsqlenabled(formatsql)
WITHOUT_CLASSIFICATION	schema export
WITHOUT_CLASSIFICATION	string provider = properties.getproperty( environment.bytecode_provider ) log.info( "bytecode provider name " + provider ) bytecodeprovider bytecodeprovider = buildbytecodeprovider( provider ) settings.setbytecodeprovider( bytecodeprovider )
WITHOUT_CLASSIFICATION	legacy behavior apply the bridge
WITHOUT_CLASSIFICATION	maybe a concrete sqlpropertyresult type but map is exactly what is required at the moment
WITHOUT_CLASSIFICATION	if dotted and not load-collection nor return-join regular property
WITHOUT_CLASSIFICATION	private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907 private bytecodeprovider bytecodeprovider
WITHOUT_CLASSIFICATION	public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }
WITHOUT_CLASSIFICATION	package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	void setshowsqlenabled(boolean b) { showsql = b } void setformatsqlenabled(boolean b) { formatsql = b }
WITHOUT_CLASSIFICATION	public bytecodeprovider getbytecodeprovider() { return bytecodeprovider } void setbytecodeprovider(bytecodeprovider bytecodeprovider) { this.bytecodeprovider = bytecodeprovider }
WITHOUT_CLASSIFICATION	using local since the inheritedmetas at this point is not the correct map since it is always the empty map
WITHOUT_CLASSIFICATION	private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907
WITHOUT_CLASSIFICATION	protected list extendsqueue
WITHOUT_CLASSIFICATION	extendsqueue = new arraylist()
WITHOUT_CLASSIFICATION	componenttuplizerfactory = new componenttuplizerfactory()
WITHOUT_CLASSIFICATION	if doc is null then for whatever reason the cached file cannot be used
WITHOUT_CLASSIFICATION	drop them in reverse order in case db needs it done that way
WITHOUT_CLASSIFICATION	public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }
WITHOUT_CLASSIFICATION	this method may be called many times!!
WITHOUT_CLASSIFICATION	iterator iterator = extendsqueue.iterator()
WITHOUT_CLASSIFICATION	iterator iter = extendsqueue.iterator()
WITHOUT_CLASSIFICATION	found
WITHOUT_CLASSIFICATION	found
WITHOUT_CLASSIFICATION	settings.setcomponenttuplizerfactory( this.getcomponenttuplizerfactory() )
WITHOUT_CLASSIFICATION	private final list extendsqueue
WITHOUT_CLASSIFICATION	<string string>
WITHOUT_CLASSIFICATION	<string string>
WITHOUT_CLASSIFICATION	+ "_" + referencedcolumnname not used for backward compatibility
WITHOUT_CLASSIFICATION	set use_reflection_optimizer to false to fix hhh-227
WITHOUT_CLASSIFICATION	orphan delete not supported for entitymode.dom4j
WITHOUT_CLASSIFICATION	element = xmlhelper.generatedom4jelement( persister.getnodename() )
WITHOUT_CLASSIFICATION	intentionally empty
WITHOUT_CLASSIFICATION	orphan delete not supported for entitymode.dom4j
WITHOUT_CLASSIFICATION	element = xmlhelper.generatedom4jelement( persister.getnodename() )
WITHOUT_CLASSIFICATION	needed for soap libraries etc
WITHOUT_CLASSIFICATION	maintain correct duplication if loaded in a cartesian product
WITHOUT_CLASSIFICATION	the element has been removed from the set
WITHOUT_CLASSIFICATION	the element has changed
WITHOUT_CLASSIFICATION	careful these methods do not initialize the collection.
WITHOUT_CLASSIFICATION	needed so that we remove this collection from the second-level cache
WITHOUT_CLASSIFICATION	override on some subclasses
WITHOUT_CLASSIFICATION	override on some subclasses
WITHOUT_CLASSIFICATION	do this bit after setting initialized to true or it will recurse
WITHOUT_CLASSIFICATION	short-circuit(s) no new elements the old list contains only orphans no old elements so no orphans neither
WITHOUT_CLASSIFICATION	create the collection holding the orphans
WITHOUT_CLASSIFICATION	collect entityidentifier(s) of the current elements - add them into a hashset for fast access
WITHOUT_CLASSIFICATION	iterate over the old list
WITHOUT_CLASSIFICATION	(array==null) ? templist.size()
WITHOUT_CLASSIFICATION	intentionally empty
WITHOUT_CLASSIFICATION	(array==null) ? templist.get(i)
WITHOUT_CLASSIFICATION	write() -- doesn't
WITHOUT_CLASSIFICATION	write() -- doesn't
WITHOUT_CLASSIFICATION	amazingly these two will work because abstractcollection uses iterator() to fill the array
WITHOUT_CLASSIFICATION	needed for soap libraries etc
WITHOUT_CLASSIFICATION	finally what it's all about
WITHOUT_CLASSIFICATION	note that if we load this collection from a cartesian product the multiplicity would be broken so use an idbag instead
WITHOUT_CLASSIFICATION	anyway here we implement <set> semantics for a <one-to-many> <bag>!
WITHOUT_CLASSIFICATION	a shortcut if its location didn't change!
WITHOUT_CLASSIFICATION	search for it note that this code is incorrect for other than one-to-many
WITHOUT_CLASSIFICATION	needed for soap libraries etc
WITHOUT_CLASSIFICATION	a shortcut if its location didn't change!
WITHOUT_CLASSIFICATION	search for it note that this code is incorrect for other than one-to-many
WITHOUT_CLASSIFICATION	public boolean equals(object other) {read()return bag.equals(other)}public int hashcode(object other) {read()return bag.hashcode()}
WITHOUT_CLASSIFICATION	list operations
WITHOUT_CLASSIFICATION	pad with nulls from the current last element up to the new index
WITHOUT_CLASSIFICATION	needed for soap libraries etc
WITHOUT_CLASSIFICATION	needed for soap libraries etc
WITHOUT_CLASSIFICATION	from map
WITHOUT_CLASSIFICATION	from sortedmap
WITHOUT_CLASSIFICATION	inject the data
WITHOUT_CLASSIFICATION	cannot be instantiated
WITHOUT_CLASSIFICATION	default pool size 20
WITHOUT_CLASSIFICATION	trying via forname() first to be as close to drivermanager's semantics
WITHOUT_CLASSIFICATION	if debug level is enabled then log the password otherwise mask it
WITHOUT_CLASSIFICATION	register a cleanup synch
WITHOUT_CLASSIFICATION	wrap the session in the transaction-protection proxy
WITHOUT_CLASSIFICATION	then bind it
WITHOUT_CLASSIFICATION	try to make sure we don't wrap and already wrapped session
WITHOUT_CLASSIFICATION	allow these to go through the the real session no matter what
WITHOUT_CLASSIFICATION	limit the methods available if no transaction is active
WITHOUT_CLASSIFICATION	allow these (deprecated) methods to pass through
WITHOUT_CLASSIFICATION	serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	we could register the session against the transaction even though it is not started but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).
WITHOUT_CLASSIFICATION	cannot be instantiated
WITHOUT_CLASSIFICATION	private string propertyname
WITHOUT_CLASSIFICATION	public propertyprojection project() {return projections.property(getpropertyname())}
WITHOUT_CLASSIFICATION	string[] fk = stringhelper.qualify( "collection_" cp.getkeycolumnnames() )
WITHOUT_CLASSIFICATION	" collection_ where " +
WITHOUT_CLASSIFICATION	unsupported
WITHOUT_CLASSIFICATION	unsupported
WITHOUT_CLASSIFICATION	cannot be instantiated
WITHOUT_CLASSIFICATION	the following two lines were added to ensure that this.params is not null which can happen with two-deep nested subqueries
WITHOUT_CLASSIFICATION	with two-deep subqueries the same alias would get generated for both using the old method (criteriaquery.generatesqlalias()) so that is now used as a fallback if the main criteria alias isn't set
WITHOUT_CLASSIFICATION	implicit polymorphism not supported (would need a union)
WITHOUT_CLASSIFICATION	pull off the last " "
WITHOUT_CLASSIFICATION	$non-nls-1
WITHOUT_CLASSIFICATION	we have the form trim(trimsource) so we trim leading and trailing spaces
WITHOUT_CLASSIFICATION	we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource)
WITHOUT_CLASSIFICATION	not_supported_should_use_jdbc3_preparedstatement.getgeneratedkeys_method
WITHOUT_CLASSIFICATION	potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	oracle did add support for ansi case statements in 9i
WITHOUT_CLASSIFICATION	the standard sql function name is current_timestamp
WITHOUT_CLASSIFICATION	informix doesn't have a bit type
WITHOUT_CLASSIFICATION	or byte or text? or money
WITHOUT_CLASSIFICATION	strip table-owner because informix always returns constraint names as "<table-owner>.<constraint-name>"
WITHOUT_CLASSIFICATION	build the map of standard ansi sql aggregation functions ~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	pre h3.2 behavior super.getreturntype(ct m)
WITHOUT_CLASSIFICATION	finally use the sqltype if == on hibernate types did not find a match.
WITHOUT_CLASSIFICATION	because numeric can be anything
WITHOUT_CLASSIFICATION	constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	standard sql92 functions (can be overridden by subclasses)
WITHOUT_CLASSIFICATION	map second/minute/hour/day/month/year to ansi extract() override on subclasses
WITHOUT_CLASSIFICATION	register hibernate types for default use in scalar sqlquery type auto detection
WITHOUT_CLASSIFICATION	database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	guid support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	by default we report no support
WITHOUT_CLASSIFICATION	by default we report no support for nowait lock semantics
WITHOUT_CLASSIFICATION	table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	sqlexception support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	grrr for differentiation of mysql storage engines
WITHOUT_CLASSIFICATION	informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	return false here as most databases do not properly support this construct
WITHOUT_CLASSIFICATION	mckoi has no known variation of a "select for update" syntax
WITHOUT_CLASSIFICATION	oracle8 and previous define only a "date" type which is used to represent all aspects of date/time
WITHOUT_CLASSIFICATION	starts with 1 implicitly
WITHOUT_CLASSIFICATION	" cascade"
WITHOUT_CLASSIFICATION	trim off the length/precision/scale
WITHOUT_CLASSIFICATION	public boolean droptemporarytableafteruse() {we have to because postgres sets current txto rollback only after a failed create tablereturn true}
WITHOUT_CLASSIFICATION	check violation
WITHOUT_CLASSIFICATION	unique violation
WITHOUT_CLASSIFICATION	foreign key violation
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	not null violation
WITHOUT_CLASSIFICATION	all other
WITHOUT_CLASSIFICATION	register the type of the out param - postgresql uses types.other
WITHOUT_CLASSIFICATION	seems to not really public boolean supportsrowvalueconstructorsyntax() { return true }
WITHOUT_CLASSIFICATION	seems to have spotty lob suppport
WITHOUT_CLASSIFICATION	hhh-2300
WITHOUT_CLASSIFICATION	ignore (probably h2 not in the classpath)
WITHOUT_CLASSIFICATION	numeric functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	string functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	time and date functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	system functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	not null is implicit
WITHOUT_CLASSIFICATION	23000 check constraint violation {0} 23001 unique index or primary key violation {0}
WITHOUT_CLASSIFICATION	display the dialect version.
WITHOUT_CLASSIFICATION	the rdms concat() function only supports 2 parameters
WITHOUT_CLASSIFICATION	dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	original dialect.java returns " for update"
WITHOUT_CLASSIFICATION	verify the state of this new method in hibernate 3.0 dialect.java
WITHOUT_CLASSIFICATION	origial dialect.java returns true
WITHOUT_CLASSIFICATION	the keyword used to specify a nullable column.
WITHOUT_CLASSIFICATION	sequence methods - start. the rdms dialect needs these
WITHOUT_CLASSIFICATION	methods to make it possible to use the native id generator
WITHOUT_CLASSIFICATION	the where clause was added to eliminate this statement from brute force searches.
WITHOUT_CLASSIFICATION	sequence methods - end
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	starts with 1 implicitly
WITHOUT_CLASSIFICATION	we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400
WITHOUT_CLASSIFICATION	used with drop table to delete all records in the table.
WITHOUT_CLASSIFICATION	rdms supports the union all clause.
WITHOUT_CLASSIFICATION	rdms has no known variation of a "select for update" syntax
WITHOUT_CLASSIFICATION	multi-param dialect functions
WITHOUT_CLASSIFICATION	function templates
WITHOUT_CLASSIFICATION	not null is implicit
WITHOUT_CLASSIFICATION	this assumes schema support which is present in 1.8.0 and later
WITHOUT_CLASSIFICATION	hsqldb only supports read_uncommitted transaction isolation
WITHOUT_CLASSIFICATION	multi-param string dialect functions
WITHOUT_CLASSIFICATION	multi-param numeric dialect functions
WITHOUT_CLASSIFICATION	multi-param date dialect functions
WITHOUT_CLASSIFICATION	simple nullability constraint
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	not final-static to avoid possible classcast exceptions if using different oracle drivers.
WITHOUT_CLASSIFICATION	register the type of the out param - an oracle specific type
WITHOUT_CLASSIFICATION	timesten has no blob/clob support but these types may be suitable for some applications. the length is limited to 4 million bytes.
WITHOUT_CLASSIFICATION	new methods in dialect3
WITHOUT_CLASSIFICATION	public boolean supportsforupdatenowait() {return false}
WITHOUT_CLASSIFICATION	timesten has no known variation of a "select for update" syntax
WITHOUT_CLASSIFICATION	iterate entries ordered by capacity to find first fit
WITHOUT_CLASSIFICATION	add new ordered map
WITHOUT_CLASSIFICATION	registercolumntype( types.varchar 16777215 "mediumtext" )
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	this assumes you will want to ignore any update counts
WITHOUT_CLASSIFICATION	sql server just returns automatically
WITHOUT_CLASSIFICATION	return "select current_timestamp from rdb$database"
WITHOUT_CLASSIFICATION	registercolumntype data types
WITHOUT_CLASSIFICATION	hibernate seems to ignore this type
WITHOUT_CLASSIFICATION	ibid for current_time and current_date
WITHOUT_CLASSIFICATION	tell hibernate to use getbytes instead of getbinarystream
WITHOUT_CLASSIFICATION	no batch statements
WITHOUT_CLASSIFICATION	we might want a special case for 192. this is very common for money types and here it is converted to 181
WITHOUT_CLASSIFICATION	no pointbase bit
WITHOUT_CLASSIFICATION	no pointbase tinyint
WITHOUT_CLASSIFICATION	pointbase has no known variation of a "select for update" syntax
WITHOUT_CLASSIFICATION	starts with 1 implicitly
WITHOUT_CLASSIFICATION	the current_timestamp is more accurate but only known to be supported in sql server 7.0 and later (i.e. sybase not known to support it at all)
WITHOUT_CLASSIFICATION	sql server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table
WITHOUT_CLASSIFICATION	here assume sqlserver2005 using snapshot isolation which does not have this problem
WITHOUT_CLASSIFICATION	registercolumntype( types.blob 16777215 "mediumblob" ) registercolumntype( types.blob 65535 "blob" )
WITHOUT_CLASSIFICATION	registercolumntype( types.clob 16777215 "mediumtext" ) registercolumntype( types.clob 65535 "text" )
WITHOUT_CLASSIFICATION	registercolumntype( types.varchar 16777215 "mediumtext" ) registercolumntype( types.varchar 65535 "text" )
WITHOUT_CLASSIFICATION	starts with 1 implicitly
WITHOUT_CLASSIFICATION	package-private
WITHOUT_CLASSIFICATION	sql server just returns automatically
WITHOUT_CLASSIFICATION	sybase bit type does not support null values
WITHOUT_CLASSIFICATION	this assumes you will want to ignore any update counts
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed
WITHOUT_CLASSIFICATION	not null (start with 1) is implicit
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.
WITHOUT_CLASSIFICATION	multi-param string dialect functions
WITHOUT_CLASSIFICATION	multi-param numeric dialect functions
WITHOUT_CLASSIFICATION	multi-param date dialect functions
WITHOUT_CLASSIFICATION	add another (inner) nested select add the main query close off the inner nested select
WITHOUT_CLASSIFICATION	add the main query
WITHOUT_CLASSIFICATION	add the restriction to the outer select
WITHOUT_CLASSIFICATION	this assumes you will want to ignore any update counts
WITHOUT_CLASSIFICATION	you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	starts with 1 implicitly
WITHOUT_CLASSIFICATION	simple nullability constraint
WITHOUT_CLASSIFICATION	not final-static to avoid possible classcast exceptions if using different oracle drivers.
WITHOUT_CLASSIFICATION	register the type of the out param - an oracle specific type
WITHOUT_CLASSIFICATION	features which change between 8i 9i and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	features which remain constant across 8i 9i and 10g ~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	binary %stream character %stream
WITHOUT_CLASSIFICATION	getdefaultproperties().setproperty(environment.statement_batch_size no_batch)
WITHOUT_CLASSIFICATION	hibernate impelemnts cast in dialect.java
WITHOUT_CLASSIFICATION	aggregate functions shouldn't be registered right? registerfunction( "list" new standardsqlfunction("list"hibernate.string) ) stopped on $list
WITHOUT_CLASSIFICATION	ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	below is for cache' that don't have str in 2007.1 there is str and we register str directly
WITHOUT_CLASSIFICATION	note that %string is deprecated
WITHOUT_CLASSIFICATION	%upper is deprecated
WITHOUT_CLASSIFICATION	the syntax used to add a foreign key constraint to a table.
WITHOUT_CLASSIFICATION	identifier-commalist
WITHOUT_CLASSIFICATION	identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	identifier-commalist
WITHOUT_CLASSIFICATION	the syntax used to add a column to a table
WITHOUT_CLASSIFICATION	completely optional cascading drop clause.
WITHOUT_CLASSIFICATION	lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	limit support (ala top) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	intersystems cache' does not current support "select for update" syntax set your transaction mode to read_committed before using
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	<string>
WITHOUT_CLASSIFICATION	callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	the keyword used to specify a nullable column.
WITHOUT_CLASSIFICATION	does the limit clause come at the start of the select statement rather than at the end?
WITHOUT_CLASSIFICATION	does the limit clause take a "maximum" row number instead of a total number of returned rows?
WITHOUT_CLASSIFICATION	the name of the sql function that transforms a string to lowercase
WITHOUT_CLASSIFICATION	create an outerjoingenerator for this dialect.
WITHOUT_CLASSIFICATION	the keyword used to insert a row without specifying any column values
WITHOUT_CLASSIFICATION	registerfunction( "trim" new standardsqlfunction( "trim" hibernate.string ) )
WITHOUT_CLASSIFICATION	skip the from keyword in params
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly
WITHOUT_CLASSIFICATION	sqlfunction implementation
WITHOUT_CLASSIFICATION	conceivable that the dialect ctor could throw hibernateexceptions so don't re-wrap
WITHOUT_CLASSIFICATION	register the standard dialect resolver
WITHOUT_CLASSIFICATION	register resolvers set via environment property
WITHOUT_CLASSIFICATION	kept for backward compatibility until after the 3.1beta5 release of ha
WITHOUT_CLASSIFICATION	cache the hashcode
WITHOUT_CLASSIFICATION	the cascadingaction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	the cascadingaction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	delete does cascade to uninitialized collections
WITHOUT_CLASSIFICATION	orphans should be deleted during delete
WITHOUT_CLASSIFICATION	(lockmode) anything
WITHOUT_CLASSIFICATION	lock doesn't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	refresh doesn't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	evicts don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	saves / updates don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	orphans should be deleted during save/update
WITHOUT_CLASSIFICATION	for deprecated saveorupdatecopy()
WITHOUT_CLASSIFICATION	persists don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	a proxy cannot be transient and it breaks foreignkeys.istransient
WITHOUT_CLASSIFICATION	replicate does cascade to uninitialized collections
WITHOUT_CLASSIFICATION	static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	handles arrays and newly instantiated collections
WITHOUT_CLASSIFICATION	actually the semantics of the next three are really "bag" note that unlike objects collection insertions updates deletions are not really remembered between flushes. we just re-use the same lists for convenience.
WITHOUT_CLASSIFICATION	add these directly to the executions queue
WITHOUT_CLASSIFICATION	continue loop
WITHOUT_CLASSIFICATION	sort the updates by fk
WITHOUT_CLASSIFICATION	sort the updates by pk
WITHOUT_CLASSIFICATION	the mapping of entity names to their latest batch numbers.
WITHOUT_CLASSIFICATION	the map of batch numbers to entityinsertaction lists
WITHOUT_CLASSIFICATION	optimize the hash size to eliminate a rehash.
WITHOUT_CLASSIFICATION	the list of entity names that indicate the batch number
WITHOUT_CLASSIFICATION	remove the current element from insertions. it will be added back later.
WITHOUT_CLASSIFICATION	the entity associated with the current action.
WITHOUT_CLASSIFICATION	there is already an existing batch for this type of entity. check to see if the latest batch is acceptable.
WITHOUT_CLASSIFICATION	now rebuild the insertions list. there is a batch for each entry in the name list.
WITHOUT_CLASSIFICATION	the current batch number is the latest batch for this entity type.
WITHOUT_CLASSIFICATION	loop through all the associations of the current entity and make sure that they are processed before the current batch number
WITHOUT_CLASSIFICATION	find the batch number associated with the current association if any.
WITHOUT_CLASSIFICATION	create a new batch for this type. the batch number is the number of current batches.
WITHOUT_CLASSIFICATION	loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.
WITHOUT_CLASSIFICATION	since this entity will now be processed in the latest possible batch we can be assured that it will come after all other associations there's not need to continue checking.
WITHOUT_CLASSIFICATION	cascade to current collection elements
WITHOUT_CLASSIFICATION	not really necessary but good for consistency
WITHOUT_CLASSIFICATION	we can't cascade to non-embedded elements
WITHOUT_CLASSIFICATION	a newly instantiated collection can't have orphans
WITHOUT_CLASSIFICATION	handle orphaned entities!!
WITHOUT_CLASSIFICATION	loaded entity instances by entityuniquekey
WITHOUT_CLASSIFICATION	identity map of entityentry instances by the entity instance
WITHOUT_CLASSIFICATION	entity proxies by entitykey
WITHOUT_CLASSIFICATION	snapshots of current database state for entities that have not been loaded
WITHOUT_CLASSIFICATION	identity map of array holder arrayholder instances by the array instance
WITHOUT_CLASSIFICATION	collection wrappers by the collectionkey key=collectionkey value=persistentcollection
WITHOUT_CLASSIFICATION	set of entitykeys of deleted objects
WITHOUT_CLASSIFICATION	properties that we have tried to load and not found in the database
WITHOUT_CLASSIFICATION	a list of collection wrappers that were instantiating during result set processing that we will need to initialize at the end of the query
WITHOUT_CLASSIFICATION	a container for collections we load up when the owning entity is not yet loaded for now this is purely transient!
WITHOUT_CLASSIFICATION	downgrade locks
WITHOUT_CLASSIFICATION	any earlier proxy takes precedence
WITHOUT_CLASSIFICATION	unwrap the object
WITHOUT_CLASSIFICATION	initialize + unwrap the object
WITHOUT_CLASSIFICATION	return the proxied object
WITHOUT_CLASSIFICATION	overwrite old proxy
WITHOUT_CLASSIFICATION	early exit
WITHOUT_CLASSIFICATION	or should it actually throw an exception?
WITHOUT_CLASSIFICATION	treat it just like a new collection
WITHOUT_CLASSIFICATION	do this work only at the very highest level of the load don't let this method be called recursively
WITHOUT_CLASSIFICATION	note that each iteration of the loop may add new elements
WITHOUT_CLASSIFICATION	it might be an unwrapped collection reference! try to find a wrapper (slowish)
WITHOUT_CLASSIFICATION	public boolean isnonexistant(entitykey key) {return nonexistantentitykeys.contains(key)}
WITHOUT_CLASSIFICATION	public boolean isnonexistant(entityuniquekey key) {return nonexistententityuniquekeys.contains(key)}
WITHOUT_CLASSIFICATION	iterate all the entities currently associated with the persistence context.
WITHOUT_CLASSIFICATION	does this entity entry pertain to the entity persister in which we are interested (owner)?
WITHOUT_CLASSIFICATION	check if the managed object is the parent
WITHOUT_CLASSIFICATION	otherwise the proxy was pruned during the serialization process
WITHOUT_CLASSIFICATION	adds remove as a sort-of alias for delete
WITHOUT_CLASSIFICATION	bad cast
WITHOUT_CLASSIFICATION	return lhspersister.getsubclasspropertycolumnnames(property)
WITHOUT_CLASSIFICATION	property-refs for associations defined on a component are not supported so no need to slice
WITHOUT_CLASSIFICATION	if there is no property-ref assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)
WITHOUT_CLASSIFICATION	handle a property-ref
WITHOUT_CLASSIFICATION	nativesqlqueryreturn
WITHOUT_CLASSIFICATION	final boolean forcecacherefresh
WITHOUT_CLASSIFICATION	why is all others non final ?
WITHOUT_CLASSIFICATION	this.forcecacherefresh = forcecacherefresh
WITHOUT_CLASSIFICATION	hella important optimization!!!
WITHOUT_CLASSIFICATION	return that.type.equals(type) && equalshelper.equals(that.value value)
WITHOUT_CLASSIFICATION	must occur after resolving identifiers!
WITHOUT_CLASSIFICATION	take a snapshot
WITHOUT_CLASSIFICATION	do a check
WITHOUT_CLASSIFICATION	the owning entity may have been deleted and its identifier unset due to identifier-rollback in which case try to look up its identifier from the persistence context
WITHOUT_CLASSIFICATION	do the work
WITHOUT_CLASSIFICATION	we've been here before
WITHOUT_CLASSIFICATION	it is or was referenced _somewhere_
WITHOUT_CLASSIFICATION	do the work
WITHOUT_CLASSIFICATION	if either its role changed
WITHOUT_CLASSIFICATION	or its key changed
WITHOUT_CLASSIFICATION	we will need to create new entries
WITHOUT_CLASSIFICATION	we will need to remove ye olde entries
WITHOUT_CLASSIFICATION	force initialize!
WITHOUT_CLASSIFICATION	else if it's elements changed
WITHOUT_CLASSIFICATION	attributes maintained between flush cycles
WITHOUT_CLASSIFICATION	session-start/post-flush persistent state
WITHOUT_CLASSIFICATION	allow the collectionsnapshot to be serialized
WITHOUT_CLASSIFICATION	attributes used only during flush cycle
WITHOUT_CLASSIFICATION	"current" means the reference that was found during flush()
WITHOUT_CLASSIFICATION	"loaded" means the reference that is consistent with the current database state
WITHOUT_CLASSIFICATION	during flush we navigate the object graph to collections and decide what to do with them
WITHOUT_CLASSIFICATION	if we instantiate a collection during the flush() process we must ignore it for the rest of the flush()
WITHOUT_CLASSIFICATION	new collections that get found + wrapped during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	a newly wrapped collection is not dirty (or we get unnecessary version updates)
WITHOUT_CLASSIFICATION	collection.cleardirty()
WITHOUT_CLASSIFICATION	collection.cleardirty()
WITHOUT_CLASSIFICATION	detached collections that get found + reattached during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	optimization
WITHOUT_CLASSIFICATION	optimization optimization
WITHOUT_CLASSIFICATION	re-snapshot
WITHOUT_CLASSIFICATION	for convenience to save some lookups
WITHOUT_CLASSIFICATION	note this is not updated when properties are fetched lazily!
WITHOUT_CLASSIFICATION	memory optimization
WITHOUT_CLASSIFICATION	use the id value of a newly instantiated instance as the unsaved-value
WITHOUT_CLASSIFICATION	copied from session
WITHOUT_CLASSIFICATION	this should not happen since the dtd prevents it
WITHOUT_CLASSIFICATION	joinprocessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the sql ast. 'hasfiltercondition' keeps track of that fact.
WITHOUT_CLASSIFICATION	the current join represents the join between a many-to-many association table and its "target" table. here we need to apply any additional filters defined specifically on the many-to-many
WITHOUT_CLASSIFICATION	check basic level one nullablilty
WITHOUT_CLASSIFICATION	values is not null and is checkable we'll look deeper
WITHOUT_CLASSIFICATION	for non null args check for components and elements containing components
WITHOUT_CLASSIFICATION	cache the hashcode
WITHOUT_CLASSIFICATION	persistent collections may have components
WITHOUT_CLASSIFICATION	check for all components values in the collection
WITHOUT_CLASSIFICATION	will check current level if some of them are not null or sublevels if they exist
WITHOUT_CLASSIFICATION	do the test
WITHOUT_CLASSIFICATION	if its an uninitialized proxy it can't be transient
WITHOUT_CLASSIFICATION	unwrap it
WITHOUT_CLASSIFICATION	see if the entity is already bound to this session if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is we rely on foreign keys to keep database integrity)
WITHOUT_CLASSIFICATION	an unfetched association can only point to an entity that already exists in the db
WITHOUT_CLASSIFICATION	let the interceptor inspect the instance to decide
WITHOUT_CLASSIFICATION	let the persister inspect the instance to decide
WITHOUT_CLASSIFICATION	we use the assumed value if there is one to avoid hitting the database
WITHOUT_CLASSIFICATION	hit the database after checking the session cache for a snapshot
WITHOUT_CLASSIFICATION	context-entity-identifier returns null explicitly if the entity is not associated with the persistence context so make some deeper checks
WITHOUT_CLASSIFICATION	int count = 0
WITHOUT_CLASSIFICATION	the first key found after the given key
WITHOUT_CLASSIFICATION	checkforend = false
WITHOUT_CLASSIFICATION	count++
WITHOUT_CLASSIFICATION	end of array start filling again from start
WITHOUT_CLASSIFICATION	we ran out of keys to try
WITHOUT_CLASSIFICATION	first element of array is reserved for the actual instance we are loading!
WITHOUT_CLASSIFICATION	the first id found after the given id
WITHOUT_CLASSIFICATION	we ran out of ids to try
WITHOUT_CLASSIFICATION	look for existing collection as part of the persistence context
WITHOUT_CLASSIFICATION	ignore this row of results! note the early exit
WITHOUT_CLASSIFICATION	initialize this collection
WITHOUT_CLASSIFICATION	create one
WITHOUT_CLASSIFICATION	warning can cause a recursive calls! (proxy initialization)
WITHOUT_CLASSIFICATION	there were no queued additions and the role has a cache
WITHOUT_CLASSIFICATION	and this is not a forced initialization during flush
WITHOUT_CLASSIFICATION	some filters affecting the collection are enabled on the session so do not do the put into the cache.
WITHOUT_CLASSIFICATION	cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	simple cache of param metadata based on query string. ideally the original "user-supplied query" string should be used to retreive this metadata (i.e. not the para-list-expanded query string) to avoid unnecessary cache entries. used solely for caching param metadata for native-sql queries see getsqlparametermetadata() for a discussion as to why
WITHOUT_CLASSIFICATION	the cache of the actual plans
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	assumes that types are all of span 1
WITHOUT_CLASSIFICATION	for native-sql queries the param metadata is determined outside any relation to a query plan because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set which might not be the case up-front when param metadata would be most useful
WITHOUT_CLASSIFICATION	don't care
WITHOUT_CLASSIFICATION	recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	don't care
WITHOUT_CLASSIFICATION	note firstrow is zero-based
WITHOUT_CLASSIFICATION	break the outer loop !!!
WITHOUT_CLASSIFICATION	named parameter
WITHOUT_CLASSIFICATION	could be either an ordinal or jpa-positional parameter
WITHOUT_CLASSIFICATION	a peek ahead showed this as an jpa-positional parameter
WITHOUT_CLASSIFICATION	make sure this "name" is an integral
WITHOUT_CLASSIFICATION	pre-determine and cache the hashcode
WITHOUT_CLASSIFICATION	perform the actual work
WITHOUT_CLASSIFICATION	if everything went ok commit the transaction and close the obtained connection handle
WITHOUT_CLASSIFICATION	at some point the processing went bad so we need to 1) make sure the connection handle gets released 2) try to cleanup the jta context as much as possible
WITHOUT_CLASSIFICATION	finally handle the exception
WITHOUT_CLASSIFICATION	a "detached" collection that belonged to a different entity
WITHOUT_CLASSIFICATION	saveorupdatecopy() is deprecated!
WITHOUT_CLASSIFICATION	collectionpersister should not be null but we don't want to throw an exception if it is null
WITHOUT_CLASSIFICATION	otherwise a null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better processarrayornewcollection(collection type)
WITHOUT_CLASSIFICATION	a "detached" collection that originally belonged to the same entity
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	force a substitution!
WITHOUT_CLASSIFICATION	the user requested a "greater" (i.e. more restrictive) form of pessimistic lock
WITHOUT_CLASSIFICATION	the database now holds a lock + the object is flushed from the cache so release the soft lock
WITHOUT_CLASSIFICATION	now update the object .. has to be outside the main if block above (because of collections)
WITHOUT_CLASSIFICATION	search for collections by reachability updating their role. we don't want to touch collections reachable from a deleted object
WITHOUT_CLASSIFICATION	this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed
WITHOUT_CLASSIFICATION	note we need to do the wrap here even if its not "dirty" because collections need wrapping but changes to _them_ don't dirty the container. also for versioned data we need to wrap before calling searchfordirtycollections
WITHOUT_CLASSIFICATION	grab its state saved at deletion
WITHOUT_CLASSIFICATION	grab its current state
WITHOUT_CLASSIFICATION	schedule the update note that we intentionally do _not_ pass in currentpersistentstate!
WITHOUT_CLASSIFICATION	substitutes into values by side-effect
WITHOUT_CLASSIFICATION	give the interceptor a chance to process property values if the properties were modified by the interceptor we need to set them back to the object
WITHOUT_CLASSIFICATION	compare to cached state (ignoring collections unless versioned)
WITHOUT_CLASSIFICATION	if it was dirtied by a collection only
WITHOUT_CLASSIFICATION	increment the version number (if necessary)
WITHOUT_CLASSIFICATION	check nullability but do not perform command execute we'll use scheduled updates for that.
WITHOUT_CLASSIFICATION	give the interceptor a chance to modify property values
WITHOUT_CLASSIFICATION	now we might need to recalculate the dirtyproperties array
WITHOUT_CLASSIFICATION	use the current version
WITHOUT_CLASSIFICATION	interceptor returned null so do the dirtycheck ourself if possible
WITHOUT_CLASSIFICATION	object loaded by update()
WITHOUT_CLASSIFICATION	dirty check against the usual snapshot of the entity
WITHOUT_CLASSIFICATION	dirty check against the database snapshot if possible/necessary
WITHOUT_CLASSIFICATION	the interceptor handled the dirty checking
WITHOUT_CLASSIFICATION	even process null collections
WITHOUT_CLASSIFICATION	get the id from the object
WITHOUT_CLASSIFICATION	always do an insert and let it fail by constraint violation
WITHOUT_CLASSIFICATION	what is the version on the database?
WITHOUT_CLASSIFICATION	/ hhh-2378
WITHOUT_CLASSIFICATION	will result in a sql update
WITHOUT_CLASSIFICATION	else do nothing (don't even reassociate object!)
WITHOUT_CLASSIFICATION	no existing row - do an insert
WITHOUT_CLASSIFICATION	refresh() does not pass an entityname
WITHOUT_CLASSIFICATION	do not return a proxy! (this option indicates we are initializing a proxy)
WITHOUT_CLASSIFICATION	return a proxy if appropriate
WITHOUT_CLASSIFICATION	return existing object or initialized proxy (unless deleted)
WITHOUT_CLASSIFICATION	return new uninitialized proxy
WITHOUT_CLASSIFICATION	this object was already loaded
WITHOUT_CLASSIFICATION	entity was found in second-level cache
WITHOUT_CLASSIFICATION	make it circular-reference safe
WITHOUT_CLASSIFICATION	intializes result by side-effect
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	some statistics
WITHOUT_CLASSIFICATION	safe from concurrent modification because of how entrylist() is implemented on identitymap
WITHOUT_CLASSIFICATION	initialize dirty flags for arrays + collections with composite elements and reset reached doupdate etc.
WITHOUT_CLASSIFICATION	among other things updatereachables() will recursively load all collections that are moving roles. this might cause entities to be loaded.
WITHOUT_CLASSIFICATION	so this needs to be safe from concurrent modification problems. it is safe because of how identitymap implements entryset()
WITHOUT_CLASSIFICATION	update the status of the object and if necessary schedule an update
WITHOUT_CLASSIFICATION	schedule updates to collections
WITHOUT_CLASSIFICATION	we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	the database has changed now so the subselect results need to be invalidated
WITHOUT_CLASSIFICATION	if the collection is dereferenced remove from the session cache iter.remove() does not work since the entryset is not backed by the set
WITHOUT_CLASSIFICATION	otherwise recreate the mapping between the collection and its key
WITHOUT_CLASSIFICATION	get a snapshot
WITHOUT_CLASSIFICATION	package-private
WITHOUT_CLASSIFICATION	package-private
WITHOUT_CLASSIFICATION	key is an entity involved with the operation performed by the listener value is a flag indicating if the listener explicitly operates on the entity
WITHOUT_CLASSIFICATION	early exit!!!
WITHOUT_CLASSIFICATION	ie. the entity came in from update()
WITHOUT_CLASSIFICATION	before any callbacks etc so subdeletions see that this deletion happened first
WITHOUT_CLASSIFICATION	ensures that containing deletions happen before sub-deletions
WITHOUT_CLASSIFICATION	typefactory.deepcopy( currentstate proptypes persister.getpropertyupdateability() deletedstate session )
WITHOUT_CLASSIFICATION	cascade-delete to collections before the collection owner is deleted
WITHOUT_CLASSIFICATION	cascade-delete to many-to-one after the parent was deleted
WITHOUT_CLASSIFICATION	if it is an initialized proxy let cascade handle it later on
WITHOUT_CLASSIFICATION	assign the requested id to the proxy before reassociating the proxy
WITHOUT_CLASSIFICATION	an uninitialized proxy noop don't even need to return an id since it is never a save()
WITHOUT_CLASSIFICATION	initialize properties of the event
WITHOUT_CLASSIFICATION	return the id in the event object
WITHOUT_CLASSIFICATION	transient or deleted
WITHOUT_CLASSIFICATION	use the id assigned to the instance
WITHOUT_CLASSIFICATION	assume this is a newly instantiated transient object which should be saved rather than updated
WITHOUT_CLASSIFICATION	this is a transient object with existing persistent state not loaded by the session
WITHOUT_CLASSIFICATION	a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()
WITHOUT_CLASSIFICATION	cachedstate
WITHOUT_CLASSIFICATION	assume true since we don't really know and it doesn't matter
WITHOUT_CLASSIFICATION	a "detached" collection!
WITHOUT_CLASSIFICATION	if the collection belonged to a different entity clean up the existing state of the collection
WITHOUT_CLASSIFICATION	log.debug( "calling onload()" )
WITHOUT_CLASSIFICATION	early exit!
WITHOUT_CLASSIFICATION	note performexecutions() clears all collectionxxxxtion collections (the collection actions) in the session
WITHOUT_CLASSIFICATION	if no array holder we found an unwrappered array (this can't occur because we now always call wrap() before getting to here) return (ah==null) ? true searchfordirtycollections(ah type)
WITHOUT_CLASSIFICATION	if not wrappered yet its dirty (this can't occur because we now always call wrap() before getting to here) return ( ! (obj instanceof persistentcollection) ) ? true searchfordirtycollections( (persistentcollection) obj type )
WITHOUT_CLASSIFICATION	we need to check even if it was not initialized because of delayed adds!
WITHOUT_CLASSIFICATION	note early exit!
WITHOUT_CLASSIFICATION	find any entities that are still transient after retry
WITHOUT_CLASSIFICATION	early exit!
WITHOUT_CLASSIFICATION	check the persistence context for an entry relating to this entity to be merged
WITHOUT_CLASSIFICATION	we have specialized case of a detached entity from the perspective of the merge operation. specifically we have an incoming entity instance which has a corresponding entry in the current persistence context but registered under a different entity instance
WITHOUT_CLASSIFICATION	deleted
WITHOUT_CLASSIFICATION	before cascade!
WITHOUT_CLASSIFICATION	cascade first so that all unsaved objects get their copy created before we actually copy cascadeonmerge(event persister entity copycache cascades.cascade_before_merge)
WITHOUT_CLASSIFICATION	this bit is only really absolutely necessary for handling requestedid but is also good if we merge multiple object graphs since it helps ensure uniqueness
WITHOUT_CLASSIFICATION	continue we'll find out if it ends up not getting saved later
WITHOUT_CLASSIFICATION	cascade first so that all unsaved objects get their copy created before we actually copy
WITHOUT_CLASSIFICATION	check that entity id = requestedid
WITHOUT_CLASSIFICATION	before cascade!
WITHOUT_CLASSIFICATION	we got here because we assumed that an instance with an assigned id was detached when it was really persistent
WITHOUT_CLASSIFICATION	cascade first so that all unsaved objects get their copy created before we actually copy
WITHOUT_CLASSIFICATION	copyvalues works by reflection so explicitly mark the entity instance dirty
WITHOUT_CLASSIFICATION	early exit
WITHOUT_CLASSIFICATION	source.getbatcher().executebatch() found another way to ensure that all batched joined inserts have been executed
WITHOUT_CLASSIFICATION	substitutes into values by side-effect
WITHOUT_CLASSIFICATION	now done in entityidentityinsertaction persister.setidentifier( entity id source.getentitymode() )
WITHOUT_CLASSIFICATION	source.getpersistencecontext().removenonexist( new entitykey( id persister source.getentitymode() ) )
WITHOUT_CLASSIFICATION	keep the existing version number in the case of replicate!
WITHOUT_CLASSIFICATION	cascade-save to many-to-one before the parent is saved
WITHOUT_CLASSIFICATION	pass this as an argument only to avoid double looking
WITHOUT_CLASSIFICATION	the object is persistent
WITHOUT_CLASSIFICATION	the entity is associated with the session so check its status
WITHOUT_CLASSIFICATION	do nothing for persistent instances
WITHOUT_CLASSIFICATION	ie. e.status==deleted
WITHOUT_CLASSIFICATION	the object is transient or detached
WITHOUT_CLASSIFICATION	note early exit!
WITHOUT_CLASSIFICATION	private constructor - stops checkstyle from complaining.
WITHOUT_CLASSIFICATION	first try to find a matching constructor accepting a violatedconstraintnameextracter param
WITHOUT_CLASSIFICATION	eat it and try next
WITHOUT_CLASSIFICATION	otherwise try to use the no-arg constructor
WITHOUT_CLASSIFICATION	oracle sql-state code for deadlock
WITHOUT_CLASSIFICATION	collectionpropertymapping processes everything except 'index'.
WITHOUT_CLASSIFICATION	remove initial " "
WITHOUT_CLASSIFICATION	remove initial " and "
WITHOUT_CLASSIFICATION	beforeclasstokens.add("new") definitely don't have this!!
WITHOUT_CLASSIFICATION	notafterclasstokens.add("")
WITHOUT_CLASSIFICATION	just especially for the trivial collection filter
WITHOUT_CLASSIFICATION	update last non-whitespace token if necessary
WITHOUT_CLASSIFICATION	select-range is terminated by declaration of "from"
WITHOUT_CLASSIFICATION	scan for next non-whitespace token
WITHOUT_CLASSIFICATION	note this!!
WITHOUT_CLASSIFICATION	error message constants.
WITHOUT_CLASSIFICATION	handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	handle collection-fiter compilation. important note this is modifying the input (hql) tree not the output tree!
WITHOUT_CLASSIFICATION	show the modified ast.
WITHOUT_CLASSIFICATION	create a parameter specification for the collection filter
WITHOUT_CLASSIFICATION	use the delegate.
WITHOUT_CLASSIFICATION	use the delegate.
WITHOUT_CLASSIFICATION	get the names of the columns used to link between the collection owner and the collection elements.
WITHOUT_CLASSIFICATION	the path ast should be a dotnode and it should have been evaluated already.
WITHOUT_CLASSIFICATION	tell the dot node about the join type.
WITHOUT_CLASSIFICATION	re-arrange the tree so that the collection function is the root and the lhs is the path.
WITHOUT_CLASSIFICATION	don't forget to resolve the argument! resolve the collection function now.
WITHOUT_CLASSIFICATION	resolve everything up to this dot but don't resolve the placeholders yet.
WITHOUT_CLASSIFICATION	should mean that no such property was found
WITHOUT_CLASSIFICATION	was there an explicit select expression?
WITHOUT_CLASSIFICATION	attach any mapping-defined "order by" fragments
WITHOUT_CLASSIFICATION	use the explicitly declared select expression determine the return types indicated by each select token
WITHOUT_CLASSIFICATION	after that process the joins. invoke a delegate to do the work as this is farily complex.
WITHOUT_CLASSIFICATION	make #@%$^#^&# sure no alias is applied to the table name
WITHOUT_CLASSIFICATION	we need to generate ids as part of this bulk insert. note that this is only supported for sequence-style generators and post-insert-style generators basically only in-db generators
WITHOUT_CLASSIFICATION	use the delegate.
WITHOUT_CLASSIFICATION	we need to seed the version value as part of this bulk insert
WITHOUT_CLASSIFICATION	we need to wrtap the param in a cast()
WITHOUT_CLASSIFICATION	this is called when it's time to fully resolve a path expression.
WITHOUT_CLASSIFICATION	generate implicit joins only if necessary.
WITHOUT_CLASSIFICATION	notify the from element that it is being referenced by the select.
WITHOUT_CLASSIFICATION	turn off includesubclasses on all fromelements.
WITHOUT_CLASSIFICATION	create the node initially with the param name so that it shows appropriately in the "original text" attribute
WITHOUT_CLASSIFICATION	use the delegate resolve identifiers as from element aliases.
WITHOUT_CLASSIFICATION	select clauses for insert statements should alwasy be treated as shallow
WITHOUT_CLASSIFICATION	no need to even collect this information if the persister is considered multi-table
WITHOUT_CLASSIFICATION	make sure that the persister is versioned
WITHOUT_CLASSIFICATION	handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	use the delegate.
WITHOUT_CLASSIFICATION	--commented out by inspection (12/11/04 1056 am) int getwarningcount()
WITHOUT_CLASSIFICATION	alias references and identifiers use the same node class.
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	make a new one
WITHOUT_CLASSIFICATION	just do the regular thing if you can't find the ctor your ast must have default ctor to use this.
WITHOUT_CLASSIFICATION	initialize sql nodes here.
WITHOUT_CLASSIFICATION	semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	if template is null we just write the function out as it appears in the hql statement
WITHOUT_CLASSIFICATION	this function has a template -> redirect output and catch the arguments
WITHOUT_CLASSIFICATION	--- inner classes (moved here from sql-gen.g) ---
WITHOUT_CLASSIFICATION	check two "adjecent" nodes at the top of the from-clause tree
WITHOUT_CLASSIFICATION	/
WITHOUT_CLASSIFICATION	these are just two unrelated table references
WITHOUT_CLASSIFICATION	again both should be fromelements
WITHOUT_CLASSIFICATION	note firstrow is zero-based
WITHOUT_CLASSIFICATION	right represents a joins originating from left or both right and left reprersent joins originating from the same fromelement
WITHOUT_CLASSIFICATION	check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them
WITHOUT_CLASSIFICATION	right represents a joins originating from left
WITHOUT_CLASSIFICATION	all clear
WITHOUT_CLASSIFICATION	ignore the token class name parameter and use a specific token class.
WITHOUT_CLASSIFICATION	overriden to avoid system.exit
WITHOUT_CLASSIFICATION	overriden to avoid system.exit
WITHOUT_CLASSIFICATION	remember that ordinal parameters numbers are 1-based!!!
WITHOUT_CLASSIFICATION	don't care about other param types here just those explicitly user-defined
WITHOUT_CLASSIFICATION	if the query is already compiled skip the compilation.
WITHOUT_CLASSIFICATION	remember the parameters for the compilation.
WITHOUT_CLASSIFICATION	phase 1 parse the hql into an ast.
WITHOUT_CLASSIFICATION	phase 2 analyze the hql ast and produce an sql ast.
WITHOUT_CLASSIFICATION	phase 3 generate the sql.
WITHOUT_CLASSIFICATION	we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes
WITHOUT_CLASSIFICATION	we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes
WITHOUT_CLASSIFICATION	only needed during compilation phase
WITHOUT_CLASSIFICATION	transform the tree.
WITHOUT_CLASSIFICATION	parse the query string into an hql ast.
WITHOUT_CLASSIFICATION	delegate to the queryloader
WITHOUT_CLASSIFICATION	delegate to the queryloader
WITHOUT_CLASSIFICATION	delegate to the queryloader
WITHOUT_CLASSIFICATION	note ( max - 1 ) because first is zero-based while max is not
WITHOUT_CLASSIFICATION	-- package local methods for the queryloader delegate --
WITHOUT_CLASSIFICATION	if there are no collection fetches then no further checks are needed
WITHOUT_CLASSIFICATION	a shallow query is ok (although technically there should be no fetching here)
WITHOUT_CLASSIFICATION	should be the first but just to be safe
WITHOUT_CLASSIFICATION	use the delegate.
WITHOUT_CLASSIFICATION	use the delegate.
WITHOUT_CLASSIFICATION	impl note allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return
WITHOUT_CLASSIFICATION	otherwise we have a non-scalar select with defined collection fetch(es). make sure that there is only a single root entity in the return (no tuples)
WITHOUT_CLASSIFICATION	this is not strictly true. we actually just need to make sure that it is ordered by root-entity pk and that that order-by comes before any non-root-entity ordering
WITHOUT_CLASSIFICATION	paramtranslations = new parametertranslationsimpl( collectedparameterspecifications )
WITHOUT_CLASSIFICATION	we are already processing a dot-structure
WITHOUT_CLASSIFICATION	igndore it
WITHOUT_CLASSIFICATION	we are now at a new tree level
WITHOUT_CLASSIFICATION	[jsd] the fix for hhh-558
WITHOUT_CLASSIFICATION	if the token can tell us if it could be an identifier
WITHOUT_CLASSIFICATION	and the expected token type was an identifier then
WITHOUT_CLASSIFICATION	use the token as an identifier.
WITHOUT_CLASSIFICATION	add the token to the ast.
WITHOUT_CLASSIFICATION	(not (eq a b) ) => (ne a b)
WITHOUT_CLASSIFICATION	(not (ne a b) ) => (eq a b)
WITHOUT_CLASSIFICATION	(not (lt a b) ) => (ge a b)
WITHOUT_CLASSIFICATION	(not (ge a b) ) => (lt a b)
WITHOUT_CLASSIFICATION	(not (le a b) ) => (gt a b)
WITHOUT_CLASSIFICATION	(not (like a b) ) => (not_like a b)
WITHOUT_CLASSIFICATION	(not (not_like a b) ) => (like a b)
WITHOUT_CLASSIFICATION	(not (is_not_null a b) ) => (is_null a b)
WITHOUT_CLASSIFICATION	(not (between a b) ) => (not_between a b)
WITHOUT_CLASSIFICATION	initialize the error handling delegate.
WITHOUT_CLASSIFICATION	overriden to avoid system.exit
WITHOUT_CLASSIFICATION	if if otherwise handle the error normally.
WITHOUT_CLASSIFICATION	(not (not_between a b) ) => (between a b)
WITHOUT_CLASSIFICATION	this can never happen because this rule will always eliminate the child not.case notreturn x.getfirstchild() (not (not x) ) => (x)
WITHOUT_CLASSIFICATION	just add a 'not' parent.
WITHOUT_CLASSIFICATION	(eq null b) => (is_null b)
WITHOUT_CLASSIFICATION	(eq a null) => (is_null a)
WITHOUT_CLASSIFICATION	note because we're using astutil.createparent() the tree must be created from the bottom up. is empty x => (exists (query (select_from (from x) ) ) )
WITHOUT_CLASSIFICATION	add not if it's negated.
WITHOUT_CLASSIFICATION	create nodes that track line and column number.
WITHOUT_CLASSIFICATION	case 1 multi token keywords group by and order by the next token ( lt(2) ) should be 'by' otherwise this is just an ident.
WITHOUT_CLASSIFICATION	case 2 the current token is after from and before '.'.
WITHOUT_CLASSIFICATION	this handles hhh-354 where there is a strange property name in a where clause. if the lookahead contains a dot then something that isn't an ident
WITHOUT_CLASSIFICATION	see if the second lookahed token can be an identifier.
WITHOUT_CLASSIFICATION	set it!
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	strip the " where "
WITHOUT_CLASSIFICATION	don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail
WITHOUT_CLASSIFICATION	at the very least cleanup the data )
WITHOUT_CLASSIFICATION	first save off the pertinent ids as the return value
WITHOUT_CLASSIFICATION	jdbc params are 1-based
WITHOUT_CLASSIFICATION	jdbc params are 1-based
WITHOUT_CLASSIFICATION	start performing the updates
WITHOUT_CLASSIFICATION	first save off the pertinent ids saving the number of pertinent ids for return
WITHOUT_CLASSIFICATION	start performing the deletes
WITHOUT_CLASSIFICATION	otherwise everything ok.
WITHOUT_CLASSIFICATION	visit width-first then depth
WITHOUT_CLASSIFICATION	if the types report logical equivalence return true
WITHOUT_CLASSIFICATION	otherwise perform a "deep equivalence" check
WITHOUT_CLASSIFICATION	if there is no where node make one.
WITHOUT_CLASSIFICATION	inject the where after the parent
WITHOUT_CLASSIFICATION	never include subclasses for implied from elements.
WITHOUT_CLASSIFICATION	moved here from selectclause [jsd]
WITHOUT_CLASSIFICATION	/
WITHOUT_CLASSIFICATION	use the table fromelement and the property name to get the array of column names.
WITHOUT_CLASSIFICATION	set the attributes of the property reference expression.
WITHOUT_CLASSIFICATION	if the uresolved property path isn't set yet just use the property name.
WITHOUT_CLASSIFICATION	the 'from element' that the property is in.
WITHOUT_CLASSIFICATION	prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	if this dot has already been resolved stop now.
WITHOUT_CLASSIFICATION	if there is no data type for this node and we're at the end of the path (top most dot node) then this might be a java constant.
WITHOUT_CLASSIFICATION	the property is a collection
WITHOUT_CLASSIFICATION	the property is a component
WITHOUT_CLASSIFICATION	the property is another class..
WITHOUT_CLASSIFICATION	otherwise this is a primitive type.
WITHOUT_CLASSIFICATION	foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)
WITHOUT_CLASSIFICATION	this 'dot' expression now refers to the resulting from element.
WITHOUT_CLASSIFICATION	always add the collection's query spaces.
WITHOUT_CLASSIFICATION	in non-select queries the only time we should need to join is if we are in a subquery from clause
WITHOUT_CLASSIFICATION	this is the regression style determination which matches the logic of the classic translator
WITHOUT_CLASSIFICATION	this 'dot' expression now refers to the resulting from element.
WITHOUT_CLASSIFICATION	even though we might find a pre-existing element by join path we may not be able to reuse it
WITHOUT_CLASSIFICATION	note addduplicatealias() already performs nullness checks on the alias.
WITHOUT_CLASSIFICATION	if the from-clauses are the same we can be a little more aggressive in terms of what we reuse
WITHOUT_CLASSIFICATION	again null != null here
WITHOUT_CLASSIFICATION	if this is an implied join in a from element then use the impled join type which is part of the tree parser's state (set by the gramamar actions).
WITHOUT_CLASSIFICATION	otherwise (subquery case) dont reuse the fromelement if we are processing the from-clause of the subquery
WITHOUT_CLASSIFICATION	we know only the lhs-hand type so use that
WITHOUT_CLASSIFICATION	the referenced node text is the special 'id'
WITHOUT_CLASSIFICATION	only the identifier property field name can be a reference to the associated entity's pk
WITHOUT_CLASSIFICATION	special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression
WITHOUT_CLASSIFICATION	append the new property name onto the unresolved path.
WITHOUT_CLASSIFICATION	if the lhs is a collection use collectionpropertymapping
WITHOUT_CLASSIFICATION	tell the destination fromelement to 'includesubclasses'.
WITHOUT_CLASSIFICATION	use theta style (for regression) move the node up after the origin node.
WITHOUT_CLASSIFICATION	don't resolve the node again.
WITHOUT_CLASSIFICATION	for expected parameter type injection we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.
WITHOUT_CLASSIFICATION	we need to strip off the embedded parens so that sql-gen does not double these up
WITHOUT_CLASSIFICATION	we have something like "? [op] rhs"
WITHOUT_CLASSIFICATION	we have something like "lhs [op] ?"
WITHOUT_CLASSIFICATION	we know only the rhs-hand type so use that
WITHOUT_CLASSIFICATION	handle the (assumed) valid cases #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)
WITHOUT_CLASSIFICATION	one or the other needs to be a datetime for us to get into this method in the first place
WITHOUT_CLASSIFICATION	#3 - note that this is also true of "datetime - param"
WITHOUT_CLASSIFICATION	#2
WITHOUT_CLASSIFICATION	generate the inner join -- the elements need to be joined to the collection they are in.
WITHOUT_CLASSIFICATION	nothing to do
WITHOUT_CLASSIFICATION	the 'from element' that represents the elements of the collection.
WITHOUT_CLASSIFICATION	add the condition to the join sequence that qualifies the indexed element.
WITHOUT_CLASSIFICATION	sometimes use the element table alias sometimes use the umm collection table alias (many to many)
WITHOUT_CLASSIFICATION	now set the text for this node. it should be the element columns.
WITHOUT_CLASSIFICATION	get the function return value type based on the type of the first argument.
WITHOUT_CLASSIFICATION	this will call initialize(tok)!
WITHOUT_CLASSIFICATION	mutation depends on the types of nodes invloved
WITHOUT_CLASSIFICATION	"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding
WITHOUT_CLASSIFICATION	logic operators by definition resolve to booleans
WITHOUT_CLASSIFICATION	generated select expressions are already resolved nothing to do.
WITHOUT_CLASSIFICATION	the path may be a reference to an alias defined in the parent query.
WITHOUT_CLASSIFICATION	the hql class alias refers to the class name.
WITHOUT_CLASSIFICATION	associate the table alias with the element.
WITHOUT_CLASSIFICATION	try the parent fromclause
WITHOUT_CLASSIFICATION	add the new node to the map so that we don't create it twice.
WITHOUT_CLASSIFICATION	make sure that all from elements registered with this from clause are actually in the ast.
WITHOUT_CLASSIFICATION	invoke setscalarcolumntext on each constructor argument.
WITHOUT_CLASSIFICATION	collect the select expressions skip the first child because it is the class name.
WITHOUT_CLASSIFICATION	return an empty type array
WITHOUT_CLASSIFICATION	constructors are always considered scalar results.
WITHOUT_CLASSIFICATION	this is the exception returned by reflecthelper.getconstructor() if it cannot locate an appropriate constructor
WITHOUT_CLASSIFICATION	if there is no order by make one
WITHOUT_CLASSIFICATION	find the where if there is no where find the from
WITHOUT_CLASSIFICATION	now inject the newly built order by into the tree
WITHOUT_CLASSIFICATION	parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	logic operators by definition resolve to boolean.
WITHOUT_CLASSIFICATION	render the identifier select fragment using the table alias.
WITHOUT_CLASSIFICATION	class names in the from clause result in a joinsequence (the old fromparser does this).
WITHOUT_CLASSIFICATION	for many-to-many joins use the tablename from the queryable collection for the default text.
WITHOUT_CLASSIFICATION	otherwise use the property mapping.
WITHOUT_CLASSIFICATION	should be safe to only ever expect entitypersister references here
WITHOUT_CLASSIFICATION	if the property is a special collection property name return a collectionpropertymapping.
WITHOUT_CLASSIFICATION	collection of components.
WITHOUT_CLASSIFICATION	make sure the lhs is "assignable"
WITHOUT_CLASSIFICATION	false indicates to not generate parens around the assignment
WITHOUT_CLASSIFICATION	register the fromelement with the from clause now that we have the names and aliases.
WITHOUT_CLASSIFICATION	currently allowed
WITHOUT_CLASSIFICATION	hhh-276 implied joins in a subselect where clause - the destination needs to be added to the destination's from clause. not sure if this is will fix everything but it works.
WITHOUT_CLASSIFICATION	return classalias == null ? classname classalias
WITHOUT_CLASSIFICATION	this is an explicit from element.
WITHOUT_CLASSIFICATION	parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	fetch can't be used with scroll() or iterate().
WITHOUT_CLASSIFICATION	if it's not implied or it is implied and it's a many to many join where the target wasn't found.
WITHOUT_CLASSIFICATION	since this is an explicit from element it can't be implied in the from clause.
WITHOUT_CLASSIFICATION	do nothing eplicit from elements are always in the projection list.
WITHOUT_CLASSIFICATION	propertyname refers to something like collection.size
WITHOUT_CLASSIFICATION	property name is a sub-path of a component
WITHOUT_CLASSIFICATION	always add the collection's query spaces.
WITHOUT_CLASSIFICATION	nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here
WITHOUT_CLASSIFICATION	logic operators by definition resolve to booleans
WITHOUT_CLASSIFICATION	dotnode uses null here
WITHOUT_CLASSIFICATION	we represent a from-clause alias
WITHOUT_CLASSIFICATION	we are the lhs of the dot representing a naked comp-prop-ref
WITHOUT_CLASSIFICATION	we are the rhs of the dot representing a naked comp-prop-ref
WITHOUT_CLASSIFICATION	we represent a naked (simple) prop-ref
WITHOUT_CLASSIFICATION	early exit!!! return so the resolve call explicitly coming from dotnode can resolve this
WITHOUT_CLASSIFICATION	assume this ident's text does not refer to a property on the given persister
WITHOUT_CLASSIFICATION	just ignore it for now it'll get resolved later
WITHOUT_CLASSIFICATION	this is not actually a constant but a reference to from element.
WITHOUT_CLASSIFICATION	check to see if our "proppath" actually represents a property on the persister
WITHOUT_CLASSIFICATION	these pieces are needed for usage in select clause
WITHOUT_CLASSIFICATION	used to set the type of the parent dot node
WITHOUT_CLASSIFICATION	assume we do not refer to a property on the given persister
WITHOUT_CLASSIFICATION	assume we do not refer to a property on the given persister
WITHOUT_CLASSIFICATION	naked property-refs cannot be used with an aliased from element
WITHOUT_CLASSIFICATION	this piece is needed for usage in select clause
WITHOUT_CLASSIFICATION	do not over-write the column text as that has already been "rendered" during resolve
WITHOUT_CLASSIFICATION	for some reason the antlr.commonast initialization routines force this method to get called twice. the first time with an empty string
WITHOUT_CLASSIFICATION	look up class name using the first identifier in the path.
WITHOUT_CLASSIFICATION	add to the query spaces.
WITHOUT_CLASSIFICATION	if the from element isn't in the same clause create a new from element.
WITHOUT_CLASSIFICATION	this is the root level node. generate an explicit from clause at the root.
WITHOUT_CLASSIFICATION	correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ansi-style join
WITHOUT_CLASSIFICATION	super-duper-classic-parser-regression-testing-mojo-magic
WITHOUT_CLASSIFICATION	a collection of entities
WITHOUT_CLASSIFICATION	a collection of components
WITHOUT_CLASSIFICATION	a collection of scalar elements
WITHOUT_CLASSIFICATION	according to both the ansi-sql and ejb3 specs trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if only <trim specification> is omitted both is assumed if <trim character> is omitted space is assumed
WITHOUT_CLASSIFICATION	don't include sub-classes for implied collection joins or subquery joins.
WITHOUT_CLASSIFICATION	treat explict from elements in sub-queries properly.
WITHOUT_CLASSIFICATION	( implied && dotnode.usethetastyleimplicitjoins ) ) {
WITHOUT_CLASSIFICATION	the "root from-element" in correlated subqueries do need this piece
WITHOUT_CLASSIFICATION	create the from element for the target (the elements of the collection).
WITHOUT_CLASSIFICATION	if the join is implied then don't include sub-classes on the element.
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	the associated entity is implied but it must be included in the from. the collection alias is the role.
WITHOUT_CLASSIFICATION	tag this node as a join. don't include subclasses in the join. this is a clollection join.
WITHOUT_CLASSIFICATION	get the class name of the associated entity.
WITHOUT_CLASSIFICATION	origin path implied columns classalias
WITHOUT_CLASSIFICATION	implied
WITHOUT_CLASSIFICATION	for implied many-to-many just add the end join.
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	the standard sql function name is current_timestamp
WITHOUT_CLASSIFICATION	this causes the factory to instantiate the desired class.
WITHOUT_CLASSIFICATION	private type[] sqlresulttypes
WITHOUT_CLASSIFICATION	frontbase has no known variation of a "select for update" syntax
WITHOUT_CLASSIFICATION	the types represented in the sql result set. @return the types represented in the sql result set.
WITHOUT_CLASSIFICATION	public type[] getsqlresulttypes() {return sqlresulttypes}
WITHOUT_CLASSIFICATION	first collect all of the select expressions. note this must be done before invoking setscalarcolumntext() because setscalarcolumntext() changes the ast!!!
WITHOUT_CLASSIFICATION	first allow the actual type to control the return value. (the actual underlying sqltype could actually be different)
WITHOUT_CLASSIFICATION	sqlresulttypelist.addall( constructorargumenttypelist )
WITHOUT_CLASSIFICATION	if the data type is not an association type it could not have been in the from clause.
WITHOUT_CLASSIFICATION	sqlresulttypelist.add( type )
WITHOUT_CLASSIFICATION	always add the type to the return type list.
WITHOUT_CLASSIFICATION	add the fetched entities
WITHOUT_CLASSIFICATION	get ready to start adding nodes.
WITHOUT_CLASSIFICATION	function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	if there are any scalars (non-entities) selected render the select column aliases.
WITHOUT_CLASSIFICATION	sqlresulttypelist
WITHOUT_CLASSIFICATION	arraylist sqlresulttypelist
WITHOUT_CLASSIFICATION	sqlresulttypes = ( type[] ) sqlresulttypelist.toarray( new type[sqlresulttypelist.size()] )
WITHOUT_CLASSIFICATION	lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	todo
WITHOUT_CLASSIFICATION	add the type to the list of returned sqlresulttypes.
WITHOUT_CLASSIFICATION	generate an 2d array of column names the first dimension is parallel with the return types array. the second dimension is the list of column names for each type.
WITHOUT_CLASSIFICATION	generate the select expression.
WITHOUT_CLASSIFICATION	union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	skip 'distinct' and 'all' so we return the first expression node.
WITHOUT_CLASSIFICATION	create sql_token nodes for the columns.
WITHOUT_CLASSIFICATION	generate the property select tokens.
WITHOUT_CLASSIFICATION	get the function name node.
WITHOUT_CLASSIFICATION	method expressions in a select should always be considered scalar.
WITHOUT_CLASSIFICATION	if this is 'elements' then create a new from element.
WITHOUT_CLASSIFICATION	not elements(x)
WITHOUT_CLASSIFICATION	dialect function
WITHOUT_CLASSIFICATION	collection 'property function'
WITHOUT_CLASSIFICATION	if the constant is an ident figure out what it means
WITHOUT_CLASSIFICATION	ident is a class alias in the from.
WITHOUT_CLASSIFICATION	resolve to an identity column.
WITHOUT_CLASSIFICATION	otherwise it's a literal.
WITHOUT_CLASSIFICATION	the name of an entity class
WITHOUT_CLASSIFICATION	the class discriminator value
WITHOUT_CLASSIFICATION	chop off the rest of the tree.
WITHOUT_CLASSIFICATION	add a space before the display text.
WITHOUT_CLASSIFICATION	find or create the where clause
WITHOUT_CLASSIFICATION	child == parent.getfirstchild()
WITHOUT_CLASSIFICATION	find or create the where clause
WITHOUT_CLASSIFICATION	filter conditions need to be inserted before the hql where condition and the theta join node. this is because org.hibernate.loader.loader binds the filter parameters first then it binds all the hql query parameters see org.hibernate.loader.loader.processfilterparameters().
WITHOUT_CLASSIFICATION	put the filters node before the hql condition and theta joins
WITHOUT_CLASSIFICATION	add the current fragment to the filters node
WITHOUT_CLASSIFICATION	create a new theta_joins node as a parent of all filters
WITHOUT_CLASSIFICATION	put the theta_joins node before the hql condition after the filters.
WITHOUT_CLASSIFICATION	add the current fragment to the theta_joins node
WITHOUT_CLASSIFICATION	first try to get the persister using the given name directly.
WITHOUT_CLASSIFICATION	unable to locate it using this name
WITHOUT_CLASSIFICATION	if that didn't work try using the 'import' name.
WITHOUT_CLASSIFICATION	implicit joins use theta style (where pk = fk) explicit joins use join (after from)
WITHOUT_CLASSIFICATION	locate the registered function by the given name
WITHOUT_CLASSIFICATION	determine the type of the first argument
WITHOUT_CLASSIFICATION	use the dot node to emit the first column name. create the column names folled by the column aliases.
WITHOUT_CLASSIFICATION	note this simply constructs a "raw" sql_token representing the where fragment and injects this into the tree. this "works" however it is probably not the best long-term solution. at some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.
WITHOUT_CLASSIFICATION	append the text of the current node.
WITHOUT_CLASSIFICATION	if the node has a first child recurse into the first child.
WITHOUT_CLASSIFICATION	if there is a second child (rhs) recurse into that child.
WITHOUT_CLASSIFICATION	iterate through the aliasjoinsequence pairs and generate sql token nodes.
WITHOUT_CLASSIFICATION	if the from element represents a join_fragment and it is a theta-style join convert its type from join_fragment to from_fragment
WITHOUT_CLASSIFICATION	this is used during sqlgenerator processing
WITHOUT_CLASSIFICATION	if there is a from fragment and the from element is an explicit then add the from part.
WITHOUT_CLASSIFICATION	&& stringhelper.isnotempty( frag )
WITHOUT_CLASSIFICATION	the from fragment will probably begin with ' '. remove this if it is present.
WITHOUT_CLASSIFICATION	this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths
WITHOUT_CLASSIFICATION	select p from p in class eg.person order by p.name p.address p
WITHOUT_CLASSIFICATION	the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.
WITHOUT_CLASSIFICATION	named query parameter
WITHOUT_CLASSIFICATION	default mode
WITHOUT_CLASSIFICATION	queryjoinfragment join = q.createjoinfragment(usethetastylejoin)
WITHOUT_CLASSIFICATION	reset the dotcount (but not the path) after reset!
WITHOUT_CLASSIFICATION	after reset!
WITHOUT_CLASSIFICATION	we don't need to worry about any condition in the on clause here (tofromfragmentstring) since anything in the on condition is already applied to the whole query
WITHOUT_CLASSIFICATION	bit_length feels a bit broken to me. we have to cast to char in order to pass when a numeric value is supplied. but of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. jay nance 2006-09-22
WITHOUT_CLASSIFICATION	dotcount>=2
WITHOUT_CLASSIFICATION	do the corresponding rhs
WITHOUT_CLASSIFICATION	if its "id"
WITHOUT_CLASSIFICATION	or its the id property name
WITHOUT_CLASSIFICATION	join = q.createjoinfragment(usethetastylejoin)
WITHOUT_CLASSIFICATION	important!!
WITHOUT_CLASSIFICATION	string[] keycols = collpersister.getkeycolumnnames()
WITHOUT_CLASSIFICATION	an association
WITHOUT_CLASSIFICATION	allow index() function
WITHOUT_CLASSIFICATION	here assume sqlserver2005 using snapshot isolation which does not have this problem
WITHOUT_CLASSIFICATION	the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.
WITHOUT_CLASSIFICATION	many-to-many
WITHOUT_CLASSIFICATION	collections of values
WITHOUT_CLASSIFICATION	opening paren in new foo ( )
WITHOUT_CLASSIFICATION	if we are inside a new result() but not inside a nested function
WITHOUT_CLASSIFICATION	special case
WITHOUT_CLASSIFICATION	the name of an sql function
WITHOUT_CLASSIFICATION	null child could occur for no from clause in a filter
WITHOUT_CLASSIFICATION	this is basically a copy/paste of orderbyparser might be worth refactoring
WITHOUT_CLASSIFICATION	select p from p in class eg.person group by p.name p.address p
WITHOUT_CLASSIFICATION	return aliases not supported in classic translator!
WITHOUT_CLASSIFICATION	register collection role
WITHOUT_CLASSIFICATION	the keyword used to specify an identity column if identity column key generation is supported.
WITHOUT_CLASSIFICATION	.getelementpropertymapping()
WITHOUT_CLASSIFICATION	crossjoins.add(name)
WITHOUT_CLASSIFICATION	ie no select clause in hql
WITHOUT_CLASSIFICATION	initialize the set of queried identifier spaces (ie. tables)
WITHOUT_CLASSIFICATION	ie. no select clause
WITHOUT_CLASSIFICATION	there _was_ a select clause
WITHOUT_CLASSIFICATION	return the concrete type or the underlying type if a concrete type was not specified
WITHOUT_CLASSIFICATION	many-to-many
WITHOUT_CLASSIFICATION	q.addcollection(collectionname collectionrole)
WITHOUT_CLASSIFICATION	classic parser does not support bulk manipulation statements
WITHOUT_CLASSIFICATION	can't cache this stuff either (per-invocation)
WITHOUT_CLASSIFICATION	unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance
WITHOUT_CLASSIFICATION	this is the legacy behaviour for hql queries
WITHOUT_CLASSIFICATION	not known!
WITHOUT_CLASSIFICATION	not known!
WITHOUT_CLASSIFICATION	we have the form trim(trimsource) so we trim leading and trailing spaces early exit!!!!
WITHOUT_CLASSIFICATION	not known!
WITHOUT_CLASSIFICATION	not known!
WITHOUT_CLASSIFICATION	need this since join condition can appear inside parens!
WITHOUT_CLASSIFICATION	tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression
WITHOUT_CLASSIFICATION	expressionterminators.add("") deliberately excluded
WITHOUT_CLASSIFICATION	expressionopeners.add("") deliberately excluded
WITHOUT_CLASSIFICATION	we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource) early exit!!!!
WITHOUT_CLASSIFICATION	otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)
WITHOUT_CLASSIFICATION	inside a between and expression
WITHOUT_CLASSIFICATION	were an odd or even number of nots encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean
WITHOUT_CLASSIFICATION	ie. a many-to-many
WITHOUT_CLASSIFICATION	cope with []
WITHOUT_CLASSIFICATION	cope with a continued path expression (ie. ].baz)
WITHOUT_CLASSIFICATION	note early return
WITHOUT_CLASSIFICATION	cope with a subselect
WITHOUT_CLASSIFICATION	cope with special cases of and not ()
WITHOUT_CLASSIFICATION	close extra brackets we opened
WITHOUT_CLASSIFICATION	take note when this is a boolean expression
WITHOUT_CLASSIFICATION	assumes that types are all of span 1
WITHOUT_CLASSIFICATION	process a token mapping oo path expressions to sql expressions
WITHOUT_CLASSIFICATION	open any extra brackets we might need.
WITHOUT_CLASSIFICATION	cope with special cases of and not )
WITHOUT_CLASSIFICATION	the next one up must also be
WITHOUT_CLASSIFICATION	add any joins
WITHOUT_CLASSIFICATION	assumes that types are all of span 1
WITHOUT_CLASSIFICATION	named query parameter
WITHOUT_CLASSIFICATION	path expression
WITHOUT_CLASSIFICATION	saves / updates don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	persists don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	anything else
WITHOUT_CLASSIFICATION	the path expression continues after a ]
WITHOUT_CLASSIFICATION	careful with this!
WITHOUT_CLASSIFICATION	the path expression ends at the ]
WITHOUT_CLASSIFICATION	"finish off" the join
WITHOUT_CLASSIFICATION	notice no " or . since they are part of (compound) identifiers
WITHOUT_CLASSIFICATION	cannot instantiate
WITHOUT_CLASSIFICATION	start by looking for hql keywords
WITHOUT_CLASSIFICATION	inner joins can be abbreviated to 'join'
WITHOUT_CLASSIFICATION	'outer' is optional and is ignored
WITHOUT_CLASSIFICATION	now anything that is not a hql keyword
WITHOUT_CLASSIFICATION	process the "old" hql style where aliases appear _first_ ie. using the in or in class constructions
WITHOUT_CLASSIFICATION	treat it as a classname
WITHOUT_CLASSIFICATION	treat it as a path expression
WITHOUT_CLASSIFICATION	starts with the name of a mapped class (new style)
WITHOUT_CLASSIFICATION	starts with a path expression (new style)
WITHOUT_CLASSIFICATION	allow odmg oql style from person p p.cars c
WITHOUT_CLASSIFICATION	handle quoted strings
WITHOUT_CLASSIFICATION	object insertions updates and deletions have list semantics because they must happen in the right order so as to respect referential integrity
WITHOUT_CLASSIFICATION	"finish off" the join
WITHOUT_CLASSIFICATION	ignore whitespace
WITHOUT_CLASSIFICATION	do replacements
WITHOUT_CLASSIFICATION	handle hql2 collection syntax
WITHOUT_CLASSIFICATION	uuid.hex is deprecated
WITHOUT_CLASSIFICATION	abstractselectingdelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	hilo params
WITHOUT_CLASSIFICATION	sql = query
WITHOUT_CLASSIFICATION	performance opt
WITHOUT_CLASSIFICATION	sql = update
WITHOUT_CLASSIFICATION	hilo config
WITHOUT_CLASSIFICATION	so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	don't allow comments on these insert statements as comments totally blow up the oracle getgeneratedkeys "support" (
WITHOUT_CLASSIFICATION	abort the save (the object is already saved by a circular cascade)
WITHOUT_CLASSIFICATION	throw new identifiergenerationexception("save associated object first or disable cascade for inverse association")
WITHOUT_CLASSIFICATION	intentionally empty
WITHOUT_CLASSIFICATION	do nothing to avoid a lazy property initialization
WITHOUT_CLASSIFICATION	keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	do nothing until we hit the rsult set containing the generated id
WITHOUT_CLASSIFICATION	column and table should be renamed but it would break the public api
WITHOUT_CLASSIFICATION	loaded entity instances by entitykey
WITHOUT_CLASSIFICATION	if the given name is un-qualified we may neen to qualify it
WITHOUT_CLASSIFICATION	the default
WITHOUT_CLASSIFICATION	unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence
WITHOUT_CLASSIFICATION	intentionally empty
WITHOUT_CLASSIFICATION	identity map of collectionentry instances by the collection wrapper
WITHOUT_CLASSIFICATION	general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	identifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	persistentidentifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	prepare and execute the insert
WITHOUT_CLASSIFICATION	prepare and execute the insert
WITHOUT_CLASSIFICATION	fetch the generated id in a separate query
WITHOUT_CLASSIFICATION	we just hit the last position
WITHOUT_CLASSIFICATION	scroll ahead
WITHOUT_CLASSIFICATION	scroll backward
WITHOUT_CLASSIFICATION	we have not yet hit the last result
WITHOUT_CLASSIFICATION	constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.
WITHOUT_CLASSIFICATION	inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	caches
WITHOUT_CLASSIFICATION	generators
WITHOUT_CLASSIFICATION	cache region is defined by the root-class in the hierarchy
WITHOUT_CLASSIFICATION	check if the detached object being merged is the parent
WITHOUT_CLASSIFICATION	after all persisters and named queries are registered
WITHOUT_CLASSIFICATION	if we get here it is possible that we have a proxy 'in the way' of the merge map resolution note decided to put this here rather than in the above loop as i was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'
WITHOUT_CLASSIFICATION	jndi + serialization
WITHOUT_CLASSIFICATION	checking for named queries
WITHOUT_CLASSIFICATION	stats
WITHOUT_CLASSIFICATION	entitynotfounddelegate
WITHOUT_CLASSIFICATION	check named hql queries
WITHOUT_CLASSIFICATION	this will throw an error if there's something wrong.
WITHOUT_CLASSIFICATION	prevents this session from adding things to cache
WITHOUT_CLASSIFICATION	from javax.naming.referenceable
WITHOUT_CLASSIFICATION	look for the instance by uuid
WITHOUT_CLASSIFICATION	for a dynamic-class
WITHOUT_CLASSIFICATION	test this entity to see if we must query it
WITHOUT_CLASSIFICATION	note early exit
WITHOUT_CLASSIFICATION	for backward-compatability
WITHOUT_CLASSIFICATION	ignore this error for now
WITHOUT_CLASSIFICATION	to stop the class from being unloaded
WITHOUT_CLASSIFICATION	in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)
WITHOUT_CLASSIFICATION	must add to jndi _after_ adding to hashmaps because some jndi servers use serialization
WITHOUT_CLASSIFICATION	make sure this is a defined parameter and check the incoming value type
WITHOUT_CLASSIFICATION	for each of the defined parameters make sure its value has been set
WITHOUT_CLASSIFICATION	we never need to apply locks to the sql
WITHOUT_CLASSIFICATION	inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	during deserialization we need to reconnect all proxies and collections to this session as well as the entityentry and collectionentry instances these associations are transient because serialization is used for different things.
WITHOUT_CLASSIFICATION	updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	final boolean forcecacherefresh
WITHOUT_CLASSIFICATION	final boolean forcecacherefresh
WITHOUT_CLASSIFICATION	first try to load it from the temp pc associated to this ss
WITHOUT_CLASSIFICATION	if the metadata allowed proxy creation and caller did not request forceful eager loading generate a proxy
WITHOUT_CLASSIFICATION	otherwise immediately materialize it
WITHOUT_CLASSIFICATION	/
WITHOUT_CLASSIFICATION	no auto-flushing to support in stateless session
WITHOUT_CLASSIFICATION	after setting values to object entitymode
WITHOUT_CLASSIFICATION	for ejb3
WITHOUT_CLASSIFICATION	just ignore
WITHOUT_CLASSIFICATION	do a check
WITHOUT_CLASSIFICATION	saveorupdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	persistonflush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	saveorupdatecopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	do not auto-flush while outside a transaction
WITHOUT_CLASSIFICATION	this is an internal error of some sort
WITHOUT_CLASSIFICATION	stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete
WITHOUT_CLASSIFICATION	if it was previously unreferenced we need to flush in order to get its state into the database in order to execute query
WITHOUT_CLASSIFICATION	not for internal use
WITHOUT_CLASSIFICATION	otherwise we only need to flush if there are in-memory changes to the queried tables
WITHOUT_CLASSIFICATION	might need to run a different filter entirely after the flush because the collection role may have changed
WITHOUT_CLASSIFICATION	stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	if it is initialized see if the underlying instance is contained since we need to account for the fact that it might have been evicted
WITHOUT_CLASSIFICATION	basically just an adapted copy of find(criteriaimpl)
WITHOUT_CLASSIFICATION	it is possible for this method to be called during flush processing so make certain that we do not accidently initialize an uninitialized proxy
WITHOUT_CLASSIFICATION	nothing to do in a stateful session
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	ignore this error for now
WITHOUT_CLASSIFICATION	we need to writeobject() on this since interceptor is user defined
WITHOUT_CLASSIFICATION	the old-time stand-by
WITHOUT_CLASSIFICATION	parameter bind values
WITHOUT_CLASSIFICATION	parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	prepend value and type list with null for any positions before the wanted position.
WITHOUT_CLASSIFICATION	execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	we have a cglib enhanced entity
WITHOUT_CLASSIFICATION	we have a cglib enhanced entity
WITHOUT_CLASSIFICATION	we have a javassist enhanced entity
WITHOUT_CLASSIFICATION	we have a javassist enhanced entity
WITHOUT_CLASSIFICATION	fieldinterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	let's assume that there is only one lazy fetch group for now!
WITHOUT_CLASSIFICATION	fieldhandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	should not need to grow beyond the size of the total number of columns in the rs
WITHOUT_CLASSIFICATION	should probably no-op commit/rollback here at least in jta scenarios
WITHOUT_CLASSIFICATION	base expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	various expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	explicitly perform no checking
WITHOUT_CLASSIFICATION	used from testsuite
WITHOUT_CLASSIFICATION	assume we are in an auto-commit state
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	register synch stats.connect()
WITHOUT_CLASSIFICATION	noncritical swallow and let the other propagate!
WITHOUT_CLASSIFICATION	calls executebatch()
WITHOUT_CLASSIFICATION	no big deal
WITHOUT_CLASSIFICATION	no big deal
WITHOUT_CLASSIFICATION	no big deal
WITHOUT_CLASSIFICATION	sybase driver (jconnect) throwing npe here in certain cases but we'll just handle the general "unexpected" case
WITHOUT_CLASSIFICATION	see explanation above
WITHOUT_CLASSIFICATION	if we are in the process of releasing no sense checking for aggressive-release possibility.
WITHOUT_CLASSIFICATION	early exit!!!!
WITHOUT_CLASSIFICATION	resultset impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	resultset impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	refer to comment in statefulpersistencecontext.addcollection()
WITHOUT_CLASSIFICATION	connectionmanager.callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	note success = false because we don't know the outcome of the transaction
WITHOUT_CLASSIFICATION	we already have a callback registered either a local (org.hibernate.transaction) transaction has accepted callback responsibilities or we have previously registered a transaction synch.
WITHOUT_CLASSIFICATION	the configured transaction-factory says it only supports local callback mode so no sense attempting to register a jta synchronization
WITHOUT_CLASSIFICATION	transactions marked for rollback-only cause some tm impls to throw exceptions
WITHOUT_CLASSIFICATION	serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	postinitialize() will be called after initialization
WITHOUT_CLASSIFICATION	cannot handle single quotes
WITHOUT_CLASSIFICATION	todo for 4.0 private static final logger log = loggerfactory.getlogger( sqlstatementlogger.class ) this is the legacy logging 'category'
WITHOUT_CLASSIFICATION	note that for sequential scrolling we make the assumption that the first persister element is the "root entity"
WITHOUT_CLASSIFICATION	don't even bother trying to read further
WITHOUT_CLASSIFICATION	don't even bother trying to read any further
WITHOUT_CLASSIFICATION	position cursor to the last row
WITHOUT_CLASSIFICATION	sequentially read the result set in reverse until we recognize a change in the key value. at that point we are pointed at the last physical sequential row for the logical row in which we are interested in processing
WITHOUT_CLASSIFICATION	read backwards until we read past the first physical sequential row with the key we are interested in loading
WITHOUT_CLASSIFICATION	finally read ahead one row to position result set cursor at the first physical row we are interested in loading
WITHOUT_CLASSIFICATION	now get an existing proxy for each row element (if there is one)
WITHOUT_CLASSIFICATION	force the proxy to resolve itself
WITHOUT_CLASSIFICATION	this is equivalent to the old behavior
WITHOUT_CLASSIFICATION	if null owner will be retrieved from session
WITHOUT_CLASSIFICATION	final string querystring
WITHOUT_CLASSIFICATION	if it was a reference to self don't need to nullify unless we are using native id generation in which case we definitely need to nullify
WITHOUT_CLASSIFICATION	end of array start filling again from start
WITHOUT_CLASSIFICATION	in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to persistentcollection#endread) we scan the internal loadingcollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endread processing.
WITHOUT_CLASSIFICATION	we can reuse it for each row
WITHOUT_CLASSIFICATION	can't reuse in this case
WITHOUT_CLASSIFICATION	first we need to suspend any current jta transaction and obtain a jdbc connection
WITHOUT_CLASSIFICATION	getresultlist(results)
WITHOUT_CLASSIFICATION	if we only returned one entity query by key is more efficient
WITHOUT_CLASSIFICATION	a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()
WITHOUT_CLASSIFICATION	handle empty collection
WITHOUT_CLASSIFICATION	else no collection element but also no owner
WITHOUT_CLASSIFICATION	handle empty collections
WITHOUT_CLASSIFICATION	else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)
WITHOUT_CLASSIFICATION	validate() instances of validatable
WITHOUT_CLASSIFICATION	if we know there is exactly 1 row we can skip. it would be great if we could _always_ skip this it is a problem for <key-many-to-one>
WITHOUT_CLASSIFICATION	remove all collections for the entity from the session-level cache
WITHOUT_CLASSIFICATION	null version means the object is in the process of being loaded somewhere else in the resultset
WITHOUT_CLASSIFICATION	problematic for <key-many-to-one>!
WITHOUT_CLASSIFICATION	use the id passed in
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	prefer re-generation of identity!
WITHOUT_CLASSIFICATION	no point doing this if none was requested
WITHOUT_CLASSIFICATION	if the object is already loaded return the loaded one
WITHOUT_CLASSIFICATION	its already loaded so don't need to hydrate it
WITHOUT_CLASSIFICATION	cascade the refresh prior to refreshing this entity
WITHOUT_CLASSIFICATION	the load() which takes an entity does not pass an entityname
WITHOUT_CLASSIFICATION	we only check the version when _upgrading_ lock modes
WITHOUT_CLASSIFICATION	look for a proxy
WITHOUT_CLASSIFICATION	we need to upgrade the lock mode to the mode requested
WITHOUT_CLASSIFICATION	its the given optional object
WITHOUT_CLASSIFICATION	instantiate a new instance
WITHOUT_CLASSIFICATION	need to hydrate it.
WITHOUT_CLASSIFICATION	return a newly loaded object
WITHOUT_CLASSIFICATION	will be ignored using the existing entry instead
WITHOUT_CLASSIFICATION	key is an entity involved with the operation performed by the listener value can be either a copy of the entity or the entity itself
WITHOUT_CLASSIFICATION	materialize associations (and initialize the object) later
WITHOUT_CLASSIFICATION	get the persister for the _subclass_
WITHOUT_CLASSIFICATION	ok in normal hibernate usage to delete a detached entity jpa however forbids it thus this is a hook for hem to affect this behavior
WITHOUT_CLASSIFICATION	the entry will be removed after the flush and will no longer override the stale snapshot this is now handled by removeentity() in entitydeleteaction persistencecontext.removedatabasesnapshot(key)
WITHOUT_CLASSIFICATION	addinitializedcollection(collection persister id)
WITHOUT_CLASSIFICATION	early exit!
WITHOUT_CLASSIFICATION	early exit!
WITHOUT_CLASSIFICATION	|| oj.getjoinable().consumescollectionalias()
WITHOUT_CLASSIFICATION	here we do not bother with the discriminator.
WITHOUT_CLASSIFICATION	code to handle subclasses of topclass
WITHOUT_CLASSIFICATION	woops we got an instance of another class hierarchy branch
WITHOUT_CLASSIFICATION	we can go straight to the first required row
WITHOUT_CLASSIFICATION	we need to step through the rows one row at a time (slow)
WITHOUT_CLASSIFICATION	synchronized to avoid multi-thread access issues defined as method synch to avoid potential deadlock issues due to nature of code.
WITHOUT_CLASSIFICATION	allows various loaders (ok mainly the queryloader ) to check whether scrolling of their result set should be allowed. by default it is allowed.
WITHOUT_CLASSIFICATION	before adding to collection!
WITHOUT_CLASSIFICATION	if the current depth is 0 the root thing being loaded is the many-to-many collection itself. here it is alright to use an inner join
WITHOUT_CLASSIFICATION	operations which cascade as far as the collection also cascade to collection elements
WITHOUT_CLASSIFICATION	simple because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element
WITHOUT_CLASSIFICATION	a composite key
WITHOUT_CLASSIFICATION	if no batch use "foo = ? and bar = ?"
WITHOUT_CLASSIFICATION	it must be a collection fetch
WITHOUT_CLASSIFICATION	needed later for many-to-many/filter application
WITHOUT_CLASSIFICATION	&& etype.isreferencetoprimarykey()
WITHOUT_CLASSIFICATION	it might still need to apply a collection ordering based on a many-to-many defined order-by
WITHOUT_CLASSIFICATION	if a composite key use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching todo unnecessary for databases with ansi-style joins
WITHOUT_CLASSIFICATION	belong to other persister belong to other persister
WITHOUT_CLASSIFICATION	we found it
WITHOUT_CLASSIFICATION	we can use an inner join for the many-to-many
WITHOUT_CLASSIFICATION	disable a join back to this same association
WITHOUT_CLASSIFICATION	note unlike all other loaders this one is not multithreaded or cacheable!!
WITHOUT_CLASSIFICATION	the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases
WITHOUT_CLASSIFICATION	root entity comes last
WITHOUT_CLASSIFICATION	deliberately ignore return value!
WITHOUT_CLASSIFICATION	alias may be null early exit
WITHOUT_CLASSIFICATION	if it is a compound path
WITHOUT_CLASSIFICATION	otherwise assume the parent is the the criteria that created us
WITHOUT_CLASSIFICATION	if its the root criteria we are done
WITHOUT_CLASSIFICATION	otherwise recurse
WITHOUT_CLASSIFICATION	the criteria instance
WITHOUT_CLASSIFICATION	the entity name
WITHOUT_CLASSIFICATION	not found in inner query try the outer query
WITHOUT_CLASSIFICATION	not found in inner query try the outer query
WITHOUT_CLASSIFICATION	it refers to an alias of a projection
WITHOUT_CLASSIFICATION	should never happen i think
WITHOUT_CLASSIFICATION	detect discriminator values
WITHOUT_CLASSIFICATION	convert the string value into the proper type.
WITHOUT_CLASSIFICATION	and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us
WITHOUT_CLASSIFICATION	it does not refer to an alias of a projection look for a property
WITHOUT_CLASSIFICATION	otherwise this is an ordinary value.
WITHOUT_CLASSIFICATION	currently not cachable if autodiscover types is in effect (e.g. "select ")
WITHOUT_CLASSIFICATION	private final string[] sqlaliases private final string[] sqlaliassuffixes
WITHOUT_CLASSIFICATION	this is only needed (afaict) for resulttransformer processing
WITHOUT_CLASSIFICATION	determine if the collection elements are entities
WITHOUT_CLASSIFICATION	build an array with indices equal to the total number of actual returns in the result hibernate will return for this query (scalars + non-scalars)
WITHOUT_CLASSIFICATION	replace {.} with corresponding column aliases
WITHOUT_CLASSIFICATION	no additional open braces found in the string append the rest of the string in its entirty and quit this loop
WITHOUT_CLASSIFICATION	apend everything up until the next encountered open brace
WITHOUT_CLASSIFICATION	it is a simple table alias {foo}
WITHOUT_CLASSIFICATION	passing through anything we do not know to support jdbc escape sequences hb-898
WITHOUT_CLASSIFICATION	passing through anything we do not know to support jdbc escape sequences hb-898
WITHOUT_CLASSIFICATION	the current alias is referencing the collection to be eagerly fetched
WITHOUT_CLASSIFICATION	it is a property reference {foo.bar}
WITHOUT_CLASSIFICATION	possibly handle something parameters for the query ?
WITHOUT_CLASSIFICATION	let return-propertys override whatever the persister has for aliases.
WITHOUT_CLASSIFICATION	private final list persisters = new arraylist()
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	note early exit!
WITHOUT_CLASSIFICATION	private final list scalartypes = new arraylist() private final list scalarcolumnaliases = new arraylist()
WITHOUT_CLASSIFICATION	now process the returns
WITHOUT_CLASSIFICATION	private list collectionowneraliases = new arraylist() private list collectionaliases = new arraylist() private list collectionpersisters = new arraylist() private list collectionresults = new arraylist()
WITHOUT_CLASSIFICATION	already been processed
WITHOUT_CLASSIFICATION	already been processed
WITHOUT_CLASSIFICATION	make sure the owner alias is known
WITHOUT_CLASSIFICATION	first break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners
WITHOUT_CLASSIFICATION	scalarcolumnaliases.add( typereturn.getcolumnalias() ) scalartypes.add( typereturn.gettype() )
WITHOUT_CLASSIFICATION	if this return's alias has not been processed yet do so b4 further processing of this return
WITHOUT_CLASSIFICATION	collectionowneraliases.add( owneralias )
WITHOUT_CLASSIFICATION	for merging of versioned entities we consider the version having been changed only when 1) the two version values are different and 2) the target actually represents database state! this second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved
WITHOUT_CLASSIFICATION	this is the second pass through on a merge op so here we limit the replacement to associations types (value types were already replaced during the first pass)
WITHOUT_CLASSIFICATION	early exit
WITHOUT_CLASSIFICATION	cascade-save to collections after the collection owner was saved
WITHOUT_CLASSIFICATION	initialize the error handling delegate.
WITHOUT_CLASSIFICATION	use the delegate.
WITHOUT_CLASSIFICATION	currently only the hibernate-supplied dbtimestamptype is supported here
WITHOUT_CLASSIFICATION	this is called when it's time to fully resolve a path expression.
WITHOUT_CLASSIFICATION	make a new one
WITHOUT_CLASSIFICATION	not so sure this is even valid subtree. but if it was it'd represent two unrelated table references
WITHOUT_CLASSIFICATION	(not (gt a b) ) => (le a b)
WITHOUT_CLASSIFICATION	private type[] sqlresulttypes
WITHOUT_CLASSIFICATION	include the discriminator and class-level where but not filters
WITHOUT_CLASSIFICATION	sqlresulttypes = selectclause.getsqlresulttypes()
WITHOUT_CLASSIFICATION	by default
WITHOUT_CLASSIFICATION	this is now handled earlier in this method.
WITHOUT_CLASSIFICATION	-- loader implementation --
WITHOUT_CLASSIFICATION	-- loader overrides --
WITHOUT_CLASSIFICATION	(not (is_null a b) ) => (is_not_null a b)
WITHOUT_CLASSIFICATION	none because its the requested lock mode not the actual!
WITHOUT_CLASSIFICATION	meant to handle dynamic instantiation queries
WITHOUT_CLASSIFICATION	--- query translator methods ---
WITHOUT_CLASSIFICATION	-- implementation private methods --
WITHOUT_CLASSIFICATION	deduplicate unique constraints sharing the same columns this is needed by hibernate annotations since it creates automagically unique constraints for the user
WITHOUT_CLASSIFICATION	try to find out the name of the primary key to create it as identity if the identitygenerator is used
WITHOUT_CLASSIFICATION	to support dialects that have their own identity data type
WITHOUT_CLASSIFICATION	prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	used also for generation of fk names!
WITHOUT_CLASSIFICATION	usually useless
WITHOUT_CLASSIFICATION	added this caching as i noticed that gettype() is being called multiple times
WITHOUT_CLASSIFICATION	do not add unique constraint on db not supporting unique and nullable columns
WITHOUT_CLASSIFICATION	for backward compatibility disable this
WITHOUT_CLASSIFICATION	may be final may be final may be final
WITHOUT_CLASSIFICATION	may be final
WITHOUT_CLASSIFICATION	may be final
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	primary key constraint
WITHOUT_CLASSIFICATION	the root of the incoming property path matched one of the embedded composite identifier properties
WITHOUT_CLASSIFICATION	ignore it
WITHOUT_CLASSIFICATION	flat recursive algorithm
WITHOUT_CLASSIFICATION	an identifier mapper => getkey will be included in the getnonduplicatedpropertyiterator() and checked later so it needs to be excluded
WITHOUT_CLASSIFICATION	if the hibernate-mapping did not specify a schema/catalog use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping or as params they will already be initialized and will override the values set here (they are in identifiergeneratorproperties)
WITHOUT_CLASSIFICATION	pass the entity-name if not a collection-id
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	primary key constraint
WITHOUT_CLASSIFICATION	pass the column name (a generated id almost always has a single column)
WITHOUT_CLASSIFICATION	needed to satisfy keyvalue
WITHOUT_CLASSIFICATION	empty means no scoping
WITHOUT_CLASSIFICATION	index should be last column listed
WITHOUT_CLASSIFICATION	if it is a formula index use the element columns in the pk
WITHOUT_CLASSIFICATION	don't create a unique key 'cos some databases don't like a uk on nullable columns
WITHOUT_CLASSIFICATION	arraylist list = new arraylist()list.addall( getkey().getconstraintcolumns() )list.addall( getindex().getconstraintcolumns() )getcollectiontable().createuniquekey(list)
WITHOUT_CLASSIFICATION	}
WITHOUT_CLASSIFICATION	no foreign key element of for a one-to-many
WITHOUT_CLASSIFICATION	todo we could just return all false
WITHOUT_CLASSIFICATION	the case of a foreign key to something other than the pk is handled in createpropertyrefconstraints
WITHOUT_CLASSIFICATION	todo we could just return all false
WITHOUT_CLASSIFICATION	if the property mapping consists of all formulas make it non-updateable
WITHOUT_CLASSIFICATION	columnupdateability.length==0 ||
WITHOUT_CLASSIFICATION	if the property mapping consists of all formulas make it insertable
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	expected type is intrinsic here
WITHOUT_CLASSIFICATION	}
WITHOUT_CLASSIFICATION	}
WITHOUT_CLASSIFICATION	return memberpersister.getpropertytype(propertyname)
WITHOUT_CLASSIFICATION	return memberpersister.tocolumns(alias propertyname)
WITHOUT_CLASSIFICATION	return memberpersister.gettype()
WITHOUT_CLASSIFICATION	&& !indexisformula
WITHOUT_CLASSIFICATION	return !isonetomany()
WITHOUT_CLASSIFICATION	instanceof associationtype
WITHOUT_CLASSIFICATION	we need to determine the best way to know that two joinables represent a single many-to-many
WITHOUT_CLASSIFICATION	strip leading ''
WITHOUT_CLASSIFICATION	public boolean issubselectloadable()
WITHOUT_CLASSIFICATION	key
WITHOUT_CLASSIFICATION	columns
WITHOUT_CLASSIFICATION	sql statements
WITHOUT_CLASSIFICATION	extra information about the element type
WITHOUT_CLASSIFICATION	types
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	private final string unquotedidentifiercolumnname
WITHOUT_CLASSIFICATION	dynamic filters specifically for many-to-many inside the collection
WITHOUT_CLASSIFICATION	dynamic filters for the collection
WITHOUT_CLASSIFICATION	nativesql collect key column and auto-aliases
WITHOUT_CLASSIFICATION	unquotedkeycolumnnames = stringhelper.unquote(keycolumnaliases)
WITHOUT_CLASSIFICATION	element
WITHOUT_CLASSIFICATION	nativesql collect element column and auto-aliases
WITHOUT_CLASSIFICATION	index and row select
WITHOUT_CLASSIFICATION	nativesql collect index column and auto-aliases
WITHOUT_CLASSIFICATION	unquotedidentifiercolumnname = identifiercolumnalias
WITHOUT_CLASSIFICATION	unquotedidentifiercolumnname = null
WITHOUT_CLASSIFICATION	generate the sql
WITHOUT_CLASSIFICATION	for non-arrays we don't need to know the element class elementtype.returnedclass()
WITHOUT_CLASSIFICATION	not all classpersisters implement propertymapping!
WITHOUT_CLASSIFICATION	handle any filters applied to this collection
WITHOUT_CLASSIFICATION	handle any filters applied to this collection for many-to-many
WITHOUT_CLASSIFICATION	if there is a user-specified loader return that todo filters!?
WITHOUT_CLASSIFICATION	take care of any entities that might have been evicted!
WITHOUT_CLASSIFICATION	strip leading ''
WITHOUT_CLASSIFICATION	run a subquery loader
WITHOUT_CLASSIFICATION	needed by arrays
WITHOUT_CLASSIFICATION	todo something with formulas
WITHOUT_CLASSIFICATION	an assertion
WITHOUT_CLASSIFICATION	remove all the old entries
WITHOUT_CLASSIFICATION	create all the new entries
WITHOUT_CLASSIFICATION	&& !indexisformula
WITHOUT_CLASSIFICATION	&& !indexisformula
WITHOUT_CLASSIFICATION	delete all the deleted entries
WITHOUT_CLASSIFICATION	insert all the new entries
WITHOUT_CLASSIFICATION	==elementtype ??
WITHOUT_CLASSIFICATION	update all the modified entries
WITHOUT_CLASSIFICATION	identifier collections not supported for 1-to-many
WITHOUT_CLASSIFICATION	update removed rows fks to null
WITHOUT_CLASSIFICATION	will still be issued when it used to be null
WITHOUT_CLASSIFICATION	now update all changed or added rows fks
WITHOUT_CLASSIFICATION	buf.append( selectfragment( lhsalias "" ) )ignore suffix for collection columns!
WITHOUT_CLASSIFICATION	use suffix for the entity columns
WITHOUT_CLASSIFICATION	the class hierarchy structure
WITHOUT_CLASSIFICATION	private final string roottablename
WITHOUT_CLASSIFICATION	initialization
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	the class hierarchy structure
WITHOUT_CLASSIFICATION	execute the sql
WITHOUT_CLASSIFICATION	this could also just be true all the time
WITHOUT_CLASSIFICATION	chop the last union (all)
WITHOUT_CLASSIFICATION	todo check this.
WITHOUT_CLASSIFICATION	initialization
WITHOUT_CLASSIFICATION	properties of this class including inherited properties
WITHOUT_CLASSIFICATION	the closure of all properties in the entire hierarchy including subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an sql case
WITHOUT_CLASSIFICATION	multitables
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	subclass closure properties
WITHOUT_CLASSIFICATION	subclasses
WITHOUT_CLASSIFICATION	( (column) model.gettable().getprimarykey().getcolumniterator().next() ).getname()
WITHOUT_CLASSIFICATION	( (column) sc.gettable().getprimarykey().getcolumniterator().next() ).getname()
WITHOUT_CLASSIFICATION	don't need subclass tables because they can't appear in conditions
WITHOUT_CLASSIFICATION	special case where we need to force incloude all subclass joins
WITHOUT_CLASSIFICATION	the class hierarchy structure
WITHOUT_CLASSIFICATION	properties of this class including inherited properties
WITHOUT_CLASSIFICATION	the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	get em on the second pass!
WITHOUT_CLASSIFICATION	now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)
WITHOUT_CLASSIFICATION	discriminator column
WITHOUT_CLASSIFICATION	initialization
WITHOUT_CLASSIFICATION	private final map propertytablenumbersbyname = new hashmap()
WITHOUT_CLASSIFICATION	class + table
WITHOUT_CLASSIFICATION	discriminator
WITHOUT_CLASSIFICATION	properties
WITHOUT_CLASSIFICATION	subclasses
WITHOUT_CLASSIFICATION	execute the sql
WITHOUT_CLASSIFICATION	joins
WITHOUT_CLASSIFICATION	propertytablenumbersbyname.put( prop.getname() join )
WITHOUT_CLASSIFICATION	access cached sql
WITHOUT_CLASSIFICATION	figure out which tables need to be fetched
WITHOUT_CLASSIFICATION	figure out which columns are needed
WITHOUT_CLASSIFICATION	figure out which formulas are needed
WITHOUT_CLASSIFICATION	render the sql
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	the optional sql string defined in the where attribute
WITHOUT_CLASSIFICATION	information about lazy properties of this class
WITHOUT_CLASSIFICATION	information about all properties in class hierarchy
WITHOUT_CLASSIFICATION	information about all columns/formulas in class hierarchy
WITHOUT_CLASSIFICATION	dynamic filters attached to the class-level
WITHOUT_CLASSIFICATION	sql strings
WITHOUT_CLASSIFICATION	for objects that came in via update()
WITHOUT_CLASSIFICATION	properties
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	identifier
WITHOUT_CLASSIFICATION	version
WITHOUT_CLASSIFICATION	where string
WITHOUT_CLASSIFICATION	subclass property closure
WITHOUT_CLASSIFICATION	before add -)
WITHOUT_CLASSIFICATION	handle any filters applied to the class level
WITHOUT_CLASSIFICATION	only one-to-one is lazy fetched
WITHOUT_CLASSIFICATION	note early exit here
WITHOUT_CLASSIFICATION	object have been loaded with setreadonly(true) hhh-2236
WITHOUT_CLASSIFICATION	note this assumes something about how propertyselectfragment is implemented by the subclass!
WITHOUT_CLASSIFICATION	strip leading " "
WITHOUT_CLASSIFICATION	if there is no resulting row return null
WITHOUT_CLASSIFICATION	otherwise return the "hydrated" state (ie. associations are not resolved)
WITHOUT_CLASSIFICATION	null owner ok??
WITHOUT_CLASSIFICATION	null sql means that the only lazy properties are shared pk one-to-one associations which are handled differently in the type#nullsafeget code
WITHOUT_CLASSIFICATION	create a new from node for the referenced class.
WITHOUT_CLASSIFICATION	the difficulty here is exactly what do we update in order to force the version to be incremented in the db
WITHOUT_CLASSIFICATION	performance op to avoid the array search
WITHOUT_CLASSIFICATION	properly handle property-ref-based associations
WITHOUT_CLASSIFICATION	enable for hhh-440 which we don't like
WITHOUT_CLASSIFICATION	aliases
WITHOUT_CLASSIFICATION	aliases named identifier ( alias.idname )
WITHOUT_CLASSIFICATION	aliases for composite-id's
WITHOUT_CLASSIFICATION	fetch embedded identifiers propertynames from the "virtual" identifier component
WITHOUT_CLASSIFICATION	embedded composite ids ( alias.idname1 alias.idname2 )
WITHOUT_CLASSIFICATION	todo skip formulas?
WITHOUT_CLASSIFICATION	don't need filters for the static loaders
WITHOUT_CLASSIFICATION	do two passes for collection property-ref!
WITHOUT_CLASSIFICATION	select the correct row by either pk or rowid
WITHOUT_CLASSIFICATION	todo eventually rowidname[j]
WITHOUT_CLASSIFICATION	this is a property of the table which we are updating
WITHOUT_CLASSIFICATION	special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression
WITHOUT_CLASSIFICATION	we are using "all" or "dirty" property-based optimistic locking
WITHOUT_CLASSIFICATION	nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here
WITHOUT_CLASSIFICATION	this property belongs on the table and is to be inserted
WITHOUT_CLASSIFICATION	add normal properties
WITHOUT_CLASSIFICATION	add the discriminator
WITHOUT_CLASSIFICATION	more specifically "? [op] datetime" 1) if the operator is minus the param needs to be of some datetime type 2) if the operator is plus the param needs to be of some numeric type
WITHOUT_CLASSIFICATION	add normal properties
WITHOUT_CLASSIFICATION	this property belongs on the table and is to be inserted
WITHOUT_CLASSIFICATION	add the discriminator
WITHOUT_CLASSIFICATION	add the primary key
WITHOUT_CLASSIFICATION	delegate already handles pk columns
WITHOUT_CLASSIFICATION	we can't batch joined inserts especially not if it is an identity insert nor can we batch statements where the expectation is based on an output param
WITHOUT_CLASSIFICATION	render the sql query
WITHOUT_CLASSIFICATION	write the values of fields onto the prepared statement - we must use the state at the time the insert was issued (cos of foreign key constraints). not necessarily the object's current state
WITHOUT_CLASSIFICATION	todo shouldnt inserts be expectations.none?
WITHOUT_CLASSIFICATION	don't bother trying to update we know there is no row there yet
WITHOUT_CLASSIFICATION	if all fields are null we might need to delete existing row
WITHOUT_CLASSIFICATION	there is probably a row there so try to update if no rows were updated we will find out
WITHOUT_CLASSIFICATION	note updates to joined tables can't be batched
WITHOUT_CLASSIFICATION	starting index
WITHOUT_CLASSIFICATION	now write the values of fields onto the prepared statement
WITHOUT_CLASSIFICATION	write any appropriate versioning conditional parameters
WITHOUT_CLASSIFICATION	render the sql query
WITHOUT_CLASSIFICATION	do the key. the key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued
WITHOUT_CLASSIFICATION	we should use the _current_ object state (ie. after any updates that occurred during flush)
WITHOUT_CLASSIFICATION	this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	note dirtyfields==null means we had no snapshot and we couldn't get one using select-before-update oldfields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyfields)
WITHOUT_CLASSIFICATION	more specifically "datetime [op] ?" 1) if the operator is minus we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is plus the param needs to be of some numeric type
WITHOUT_CLASSIFICATION	for the case of dynamic-update="true" we need to generate the update sql
WITHOUT_CLASSIFICATION	don't need to check laziness (dirty checking algorithm handles that)
WITHOUT_CLASSIFICATION	for the case of dynamic-update="false" or no snapshot we use the static sql
WITHOUT_CLASSIFICATION	if not "get" then try "is"
WITHOUT_CLASSIFICATION	now update only the tables with dirty properties (and the table with the version number)
WITHOUT_CLASSIFICATION	for the case of dynamic-insert="true" we need to generate the insert sql
WITHOUT_CLASSIFICATION	for the case of dynamic-insert="true" we need to generate the insert sql
WITHOUT_CLASSIFICATION	for the case of dynamic-insert="false" use the static sql
WITHOUT_CLASSIFICATION	for the case of dynamic-insert="false" use the static sql
WITHOUT_CLASSIFICATION	not supported
WITHOUT_CLASSIFICATION	this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	we need to utilize dynamic delete statements
WITHOUT_CLASSIFICATION	otherwise utilize the static delete statements
WITHOUT_CLASSIFICATION	just a performance opt!
WITHOUT_CLASSIFICATION	just a performance opt!
WITHOUT_CLASSIFICATION	all joins join to the pk of the driving table
WITHOUT_CLASSIFICATION	notice that we skip the first table it is the driving table!
WITHOUT_CLASSIFICATION	we can inner join to superclass tables (the row must be there) we can never inner join to subclass tables
WITHOUT_CLASSIFICATION	skip the driving table
WITHOUT_CLASSIFICATION	get 'em in the right order (not that it really matters)
WITHOUT_CLASSIFICATION	here we work under the following assumptions ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime always results in a double 3) datetime - {something other than datetime} always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases
WITHOUT_CLASSIFICATION	render the where and from parts
WITHOUT_CLASSIFICATION	we could regerate this inside each called method!
WITHOUT_CLASSIFICATION	now render the joins
WITHOUT_CLASSIFICATION	this will add the new from element to the origin.
WITHOUT_CLASSIFICATION	now render the select clause
WITHOUT_CLASSIFICATION	now tie it all together
WITHOUT_CLASSIFICATION	insert/update/delete sql
WITHOUT_CLASSIFICATION	select sql
WITHOUT_CLASSIFICATION	no need to check laziness dirty checking handles that
WITHOUT_CLASSIFICATION	fully resolve the map reference create implicit joins.
WITHOUT_CLASSIFICATION	temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	the basic implementation is to simply use the node's text
WITHOUT_CLASSIFICATION	for dialects which are known to not support ansi-sql row-value-constructor syntax we should mutate the tree.
WITHOUT_CLASSIFICATION	due to the complexity in initializing the selectclause do not generate one here. if it is not found simply return null also do not cache since it gets generated well after we are created.
WITHOUT_CLASSIFICATION	check the version unsaved-value if appropriate
WITHOUT_CLASSIFICATION	let this take precedence if defined since it works for assigned identifiers
WITHOUT_CLASSIFICATION	check the id unsaved-value
WITHOUT_CLASSIFICATION	check to see if it is in the second-level cache
WITHOUT_CLASSIFICATION	/
WITHOUT_CLASSIFICATION	for property references generate <tablealias>.<columnname> as <projectionalias>
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	if there is no resulting row return null
WITHOUT_CLASSIFICATION	force immediate execution of the insert
WITHOUT_CLASSIFICATION	if this from element is a collection and the path is a collection property (maxindex etc.) then generate a sub-query.
WITHOUT_CLASSIFICATION	entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	cannot occur
WITHOUT_CLASSIFICATION	cannot occur
WITHOUT_CLASSIFICATION	only carry on if the method has no parameters
WITHOUT_CLASSIFICATION	try "get"
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	should be safe to only ever expect entitypersister references here
WITHOUT_CLASSIFICATION	this page intentionally left blank )
WITHOUT_CLASSIFICATION	do not do anything
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	cant instantiate
WITHOUT_CLASSIFICATION	if it is a property of an embedded component invoke on the "identifier"
WITHOUT_CLASSIFICATION	otherwise
WITHOUT_CLASSIFICATION	skip finalize methods
WITHOUT_CLASSIFICATION	note interfaces is assumed to already contain hibernateproxy.class
WITHOUT_CLASSIFICATION	note interfaces is assumed to already contain hibernateproxy.class
WITHOUT_CLASSIFICATION	hhh-2481 make sure the callback gets cleared otherwise the instance stays in a static thread local.
WITHOUT_CLASSIFICATION	while constructor is running
WITHOUT_CLASSIFICATION	while constructor is running
WITHOUT_CLASSIFICATION	note interface is assumed to already contain hibernateproxy.class
WITHOUT_CLASSIFICATION	interfaces arguments
WITHOUT_CLASSIFICATION	todo!
WITHOUT_CLASSIFICATION	get the caller
WITHOUT_CLASSIFICATION	get the caller principals
WITHOUT_CLASSIFICATION	private static final alias default_alias = new alias(10 null)
WITHOUT_CLASSIFICATION	needed to bump this up to dotnode because that is the only thing which currently knows about the property-ref path in the correct format it is either this or recurse over the dotnodes constructing the property path just like dotnode does internally
WITHOUT_CLASSIFICATION	if the identifier is quoted remove the quotes
WITHOUT_CLASSIFICATION	truncate the identifier to the max alias length less the suffix length
WITHOUT_CLASSIFICATION	full joins are not supported.. yet!
WITHOUT_CLASSIFICATION	null is not considered the same type as integer. $non-nls-1 $non-nls-1
WITHOUT_CLASSIFICATION	the outerjoinsafterwhere needs to come before where clause to properly handle dynamic filters
WITHOUT_CLASSIFICATION	$non-nls-1
WITHOUT_CLASSIFICATION	$non-nls-1
WITHOUT_CLASSIFICATION	$non-nls-1
WITHOUT_CLASSIFICATION	$non-nls-1
WITHOUT_CLASSIFICATION	strip off any leading 'and' token
WITHOUT_CLASSIFICATION	if the condition is not already there
WITHOUT_CLASSIFICATION	dontspace.add("'")
WITHOUT_CLASSIFICATION	for mysql
WITHOUT_CLASSIFICATION	hashmap columnsunique = new hashmap()
WITHOUT_CLASSIFICATION	null caused some problems
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	not sure if this would ever be null but wanted to be careful
WITHOUT_CLASSIFICATION	even on inverse="true"
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	if true then execute db updates otherwise just generate and display updates
WITHOUT_CLASSIFICATION	we only release the connection
WITHOUT_CLASSIFICATION	deprecated option
WITHOUT_CLASSIFICATION	if an exception occurs during flush user must call rollback()
WITHOUT_CLASSIFICATION	actually this last test is probably unnecessary since beforecompletion() doesn't get called during rollback
WITHOUT_CLASSIFICATION	this one only really needed for badly-behaved applications! (if the transactionmanager has a sychronization registered its a noop) (actually we do need it for downgrading locks)
WITHOUT_CLASSIFICATION	create an dotnode ast for the path and resolve it.
WITHOUT_CLASSIFICATION	if an exception occurs during flush user must call rollback()
WITHOUT_CLASSIFICATION	if we could not register a synchronization do the before/after completion callbacks ourself (but we need to let jdbccontext know that this is what we are going to do so it doesn't keep trying to register synchronizations)
WITHOUT_CLASSIFICATION	swallow it and continue to roll back jta transaction
WITHOUT_CLASSIFICATION	so the transaction is already rolled back by jta spec
WITHOUT_CLASSIFICATION	this method is a noop if there is a synchronization!
WITHOUT_CLASSIFICATION	two conditions where we need to transform this to a theta-join syntax 1) 'elem' is the "root from-element" in correlated subqueries 2) the dotnode.usethetastyleimplicitjoins has been set to true and 'elem' represents an implicit join
WITHOUT_CLASSIFICATION	websphere however is not a sane jee/jta container
WITHOUT_CLASSIFICATION	for sane jee/jta containers the transaction itself functions as its identifier
WITHOUT_CLASSIFICATION	swallow the transaction was finished
WITHOUT_CLASSIFICATION	all aliastoentitymapresulttransformer are considered equal ~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	create the join element under the from element.
WITHOUT_CLASSIFICATION	all distinctrootentityresulttransformer are considered equal ~~~~~~~~~~~
WITHOUT_CLASSIFICATION	map of entitymode -> tuplizer
WITHOUT_CLASSIFICATION	this is a virtual id property
WITHOUT_CLASSIFICATION	this one needed only for guessentitymode()
WITHOUT_CLASSIFICATION	create our own copy of the user-supplied tuplizer impl map
WITHOUT_CLASSIFICATION	todo move this to sf per hhh-3517 also see hhh-1907 and componentmetamodel
WITHOUT_CLASSIFICATION	then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available
WITHOUT_CLASSIFICATION	build the dynamic-map tuplizer
WITHOUT_CLASSIFICATION	then dom4j tuplizer if dom4j representation is available
WITHOUT_CLASSIFICATION	build the dynamic-map tuplizer
WITHOUT_CLASSIFICATION	put the "standard" tuplizers into the tuplizer map first
WITHOUT_CLASSIFICATION	found a ctor but it was not publicly accessible so try to request accessibility
WITHOUT_CLASSIFICATION	private final sessionfactoryimplementor sessionfactory
WITHOUT_CLASSIFICATION	cached for efficiency
WITHOUT_CLASSIFICATION	public componentmetamodel(component component sessionfactoryimplementor sessionfactory) {
WITHOUT_CLASSIFICATION	this.sessionfactory = sessionfactory
WITHOUT_CLASSIFICATION	it was not embedded so the argument is just an id
WITHOUT_CLASSIFICATION	then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available
WITHOUT_CLASSIFICATION	then dom4j tuplizer if dom4j representation is available
WITHOUT_CLASSIFICATION	put the "standard" tuplizers into the tuplizer map first
WITHOUT_CLASSIFICATION	then handle any user-defined entity modes
WITHOUT_CLASSIFICATION	return currentid
WITHOUT_CLASSIFICATION	reset the id
WITHOUT_CLASSIFICATION	origin.adddestination( destination ) this was the cause of hhh-242 origin.settype( from_fragment ) set the parent node type so that the ast is properly formed. the destination node will have all the from text. the parent node is a collection join too (voodoo - see joinprocessor)
WITHOUT_CLASSIFICATION	reset the version
WITHOUT_CLASSIFICATION	the default is to simply not lazy fetch properties for now
WITHOUT_CLASSIFICATION	add the second join the one that ends in the destination table.
WITHOUT_CLASSIFICATION	temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	found a ctor but it was not publicly accessible so try to request accessibility
WITHOUT_CLASSIFICATION	determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy
WITHOUT_CLASSIFICATION	return getfactory().getsettings().getbytecodeprovider().getproxyfactoryfactory().buildproxyfactory()
WITHOUT_CLASSIFICATION	not final because proxy factory creation can fail
WITHOUT_CLASSIFICATION	superclass entity-name
WITHOUT_CLASSIFICATION	temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	init the aliases after initing the constructornode
WITHOUT_CLASSIFICATION	temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	legacy behavior (with no abstract attribute specified)
WITHOUT_CLASSIFICATION	get ready to start adding nodes.
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	note this affects the return value!
WITHOUT_CLASSIFICATION	need to account for allowable '_' within the variant
WITHOUT_CLASSIFICATION	add the type to the list of returned sqlresulttypes.
WITHOUT_CLASSIFICATION	collection types
WITHOUT_CLASSIFICATION	convenience methods relating to operations across arrays of types
WITHOUT_CLASSIFICATION	lobs cannot be compared
WITHOUT_CLASSIFICATION	blobs are ignored by merge()
WITHOUT_CLASSIFICATION	value is the entity name
WITHOUT_CLASSIFICATION	early exit!
WITHOUT_CLASSIFICATION	generate id select fragment and then property select fragment for each expression just like generateselectfragments().
WITHOUT_CLASSIFICATION	todo!
WITHOUT_CLASSIFICATION	xml is the entity name
WITHOUT_CLASSIFICATION	special case this is the leaf of the containment graph even though not immutable
WITHOUT_CLASSIFICATION	tolerates nulls
WITHOUT_CLASSIFICATION	sqlresulttypelist
WITHOUT_CLASSIFICATION	metatype is assumed to be single-column type
WITHOUT_CLASSIFICATION	get all the select expressions (that we just generated) and render the select.
WITHOUT_CLASSIFICATION	look through the fromelement's children to find any collections of values that should be fetched
WITHOUT_CLASSIFICATION	return associationtype.foreign_key_to_parent this is better but causes a transient object exception
WITHOUT_CLASSIFICATION	use the lower case function name. remember whether we're in a select clause or not.
WITHOUT_CLASSIFICATION	ident might be the name of a class.
WITHOUT_CLASSIFICATION	todo!!!
WITHOUT_CLASSIFICATION	st.settimestamp( index new timestamp( cal.gettimeinmillis() ) cal ) jdk 1.5 only
WITHOUT_CLASSIFICATION	st.setdate( index new date( cal.gettimeinmillis() ) cal ) jdk 1.5 only
WITHOUT_CLASSIFICATION	both are timestamps
WITHOUT_CLASSIFICATION	at least one is a plain old date
WITHOUT_CLASSIFICATION	noop
WITHOUT_CLASSIFICATION	if the corresponding sql value is null the reader we got is null as well
WITHOUT_CLASSIFICATION	fetch reader content up to the end - and put characters in a stringbuffer
WITHOUT_CLASSIFICATION	return stringbuffer content as a large string
WITHOUT_CLASSIFICATION	or types.longvarchar?
WITHOUT_CLASSIFICATION	not called at runtime so doesn't matter if its slow )
WITHOUT_CLASSIFICATION	todo
WITHOUT_CLASSIFICATION	chop off the rest of the tree.
WITHOUT_CLASSIFICATION	different nullability rules for pk/fk
WITHOUT_CLASSIFICATION	cache this
WITHOUT_CLASSIFICATION	only really need new array during semiresolve!
WITHOUT_CLASSIFICATION	forcefully remove leading ands from where fragments the grammar will handle adding them
WITHOUT_CLASSIFICATION	todo!!!!!!!
WITHOUT_CLASSIFICATION	create a new filters node as a parent of all filters
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	public object instantiate(object parent sessionimplementor session) throws hibernateexception
WITHOUT_CLASSIFICATION	nothing to do
WITHOUT_CLASSIFICATION	nothing to do
WITHOUT_CLASSIFICATION	versiontype impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ note simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the timestamp datatype supported by sybase and sql server which are completely db-generated values
WITHOUT_CLASSIFICATION	lobs cannot be compared
WITHOUT_CLASSIFICATION	not really necessary i guess
WITHOUT_CLASSIFICATION	clobs are ignored by merge() operation
WITHOUT_CLASSIFICATION	we do not have to worry about queued additions to uninitialized collections since they can only occur for inverse collections!
WITHOUT_CLASSIFICATION	collections cannot be compared
WITHOUT_CLASSIFICATION	remember the uk value
WITHOUT_CLASSIFICATION	noop
WITHOUT_CLASSIFICATION	processcollectionproperty(token q.getcollectionpersister(collectionrole) collectionname)
WITHOUT_CLASSIFICATION	we must use the "remembered" uk value since it is not available from the entityentry during assembly
WITHOUT_CLASSIFICATION	collections don't dirty an unversioned parent entity
WITHOUT_CLASSIFICATION	return false
WITHOUT_CLASSIFICATION	this just handles a particular case of component projection perhaps get rid of it and throw an exception
WITHOUT_CLASSIFICATION	note we avoid joining to the next table if the named property is just the foreign key value
WITHOUT_CLASSIFICATION	the key is the owning entity itself so get the id from the key
WITHOUT_CLASSIFICATION	if the original is a persistentcollection and that original was not flagged as dirty then reset the target's dirty flag here after the copy operation. </p> one thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know
WITHOUT_CLASSIFICATION	ignore subselect keywords
WITHOUT_CLASSIFICATION	copy elements into newly empty target collection
WITHOUT_CLASSIFICATION	for a null target or a target which is the same as the original we need to put the merged elements in a new collection
WITHOUT_CLASSIFICATION	by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here
WITHOUT_CLASSIFICATION	get the elements back into the target making sure to handle dirty flag
WITHOUT_CLASSIFICATION	check if collection is currently being loaded
WITHOUT_CLASSIFICATION	check if it is already completely loaded but unowned
WITHOUT_CLASSIFICATION	cache the actual id of the object not the value of the property-ref which might not be initialized
WITHOUT_CLASSIFICATION	todo!!!!!!!
WITHOUT_CLASSIFICATION	create a new collection wrapper to be initialized later
WITHOUT_CLASSIFICATION	some jdbc drivers erroneously return an empty array here for a null db value /
WITHOUT_CLASSIFICATION	our column span is the number of columns in the pk
WITHOUT_CLASSIFICATION	cannot batch fetch by unique key (property-ref associations)
WITHOUT_CLASSIFICATION	we already know current is not null
WITHOUT_CLASSIFICATION	the ids are fully resolved so compare them with isdirty() not ismodified()
WITHOUT_CLASSIFICATION	the owner of the association is not the owner of the id
WITHOUT_CLASSIFICATION	----------------------------------------------------------- constructors
WITHOUT_CLASSIFICATION	----------------------------------------------------- instance variables
WITHOUT_CLASSIFICATION	public static jdbcexception newjdbcexception(string string sqlexception root string sql) { string = string + " [" + sql + ']' log.error(string root) logexceptions(root) return new jdbcexception(string root sql) } public static jdbcexception newjdbcexception(string string sqlexception root) { log.error(string root) logexceptions(root) return new jdbcexception(string root) }
WITHOUT_CLASSIFICATION	--------------------------------------------------------- public methods
WITHOUT_CLASSIFICATION	compare the two maps for equality
WITHOUT_CLASSIFICATION	simple tests that require no synchronization
WITHOUT_CLASSIFICATION	sybase fail if we don't do that sigh
WITHOUT_CLASSIFICATION	handles things like a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a b c ) (overloaded brackets) not not a a is not null (overloaded "not") etc and expressions like foo = bar (maps to foo.id = bar.id) foo.bar = 'foo' (maps to foo.bar = 'foo') foo.bar.baz = 1.0 (maps to foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.bar.baz (maps to bar.baz = 1.0 and foo.bar = bar.id) foo.bar.baz = a.b.c (maps to bar.baz = b.c and foo.bar = bar.id and a.b = b.id) foo.bar.baz + a.b.c (maps to bar.baz + b.c and foo.bar = bar.id and a.b = b.id) ( foo.bar.baz + 1.0 ) < 2.0 (maps to ( bar.baz + 1.0 ) < 2.0 and foo.bar = bar.id)
WITHOUT_CLASSIFICATION	release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders
WITHOUT_CLASSIFICATION	release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders
WITHOUT_CLASSIFICATION	try to "pretty print" it
WITHOUT_CLASSIFICATION	otherwise just dump it
WITHOUT_CLASSIFICATION	its an interface so we can't really tell anything
WITHOUT_CLASSIFICATION	its an interface so we can't really tell anything
WITHOUT_CLASSIFICATION	use default behavior
WITHOUT_CLASSIFICATION	note early return
WITHOUT_CLASSIFICATION	the mru cache used to keep hard references to the most recently used query plans note lru here is a bit of a misnomer it indicates that lru entries are removed the actual kept entries are the mru entries
WITHOUT_CLASSIFICATION	we want to be able to just use the defaults if jndi environment properties are not supplied so don't put null in anywhere
WITHOUT_CLASSIFICATION	clone -----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	serialize -----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	stream closed in the finally
WITHOUT_CLASSIFICATION	stream closed in the finally
WITHOUT_CLASSIFICATION	deserialize -----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	static methods only - hide constructor
WITHOUT_CLASSIFICATION	&& !('_'==character)
WITHOUT_CLASSIFICATION	returnign null!
WITHOUT_CLASSIFICATION	returnign null!
WITHOUT_CLASSIFICATION	includes last '.'
WITHOUT_CLASSIFICATION	+1 to include the following '.'
WITHOUT_CLASSIFICATION	impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method
WITHOUT_CLASSIFICATION	first time we find match!
WITHOUT_CLASSIFICATION	entitynames may now include slashes for the representations classname may be an inner class
WITHOUT_CLASSIFICATION	wrapped iterators
WITHOUT_CLASSIFICATION	index of current iterator in the wrapped iterators array
WITHOUT_CLASSIFICATION	the current iterator
WITHOUT_CLASSIFICATION	the last used iterator
WITHOUT_CLASSIFICATION	it was a boolean expression
WITHOUT_CLASSIFICATION	public static object[] clone(class elementclass object[] array) {object[] result = (object[]) array.newinstance( elementclass array.length )system.arraycopy(array 0 result 0 array.length)return result}
WITHOUT_CLASSIFICATION	call this before any iterator method to make sure that the current iterator is not exhausted
WITHOUT_CLASSIFICATION	doable if needed
WITHOUT_CLASSIFICATION	set last used iterator here in case the user calls remove before calling hasnext() or next() (although they shouldn't)
WITHOUT_CLASSIFICATION	peek ahead
WITHOUT_CLASSIFICATION	if we reach the end of the string w/o finding the matching end that is an exception
WITHOUT_CLASSIFICATION	we have a placeholder spin forward till we find the end
WITHOUT_CLASSIFICATION	make sure spinning forward did not put us past the end of the buffer
WITHOUT_CLASSIFICATION	first try to locate this resource through the current context classloader.
WITHOUT_CLASSIFICATION	next try to locate this resource through this class's classloader
WITHOUT_CLASSIFICATION	next try to locate this resource through the system classloader
WITHOUT_CLASSIFICATION	anywhere else we should look?
WITHOUT_CLASSIFICATION	would need an identityset for this!
WITHOUT_CLASSIFICATION	arrays.aslist doesn't do primitive arrays
WITHOUT_CLASSIFICATION	faster?
WITHOUT_CLASSIFICATION	the name of a class
WITHOUT_CLASSIFICATION	its the listener class name
WITHOUT_CLASSIFICATION	allow 987654321
WITHOUT_CLASSIFICATION	default to element set if no elements() specified
WITHOUT_CLASSIFICATION	look for the instance by uuid
WITHOUT_CLASSIFICATION	in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)
WITHOUT_CLASSIFICATION	first lets determine whether to apply cglib or javassist based instrumentation
WITHOUT_CLASSIFICATION	make sure we don't override previous set values
WITHOUT_CLASSIFICATION	entirely optional!!
WITHOUT_CLASSIFICATION	its the listener instance (or better be)
WITHOUT_CLASSIFICATION	context.unbind(boundname)
WITHOUT_CLASSIFICATION	readresolveobject
WITHOUT_CLASSIFICATION	cfg.setproperty("hibernate.show_sql" "true")
WITHOUT_CLASSIFICATION	defensive convenience methods
WITHOUT_CLASSIFICATION	create the sessionfactory from hibernate.cfg.xml
WITHOUT_CLASSIFICATION	make sure you log the exception as it might be swallowed
WITHOUT_CLASSIFICATION	begin unit of work
WITHOUT_CLASSIFICATION	write html header
WITHOUT_CLASSIFICATION	handle actions
WITHOUT_CLASSIFICATION	print page
WITHOUT_CLASSIFICATION	write html footer
WITHOUT_CLASSIFICATION	end unit of work
WITHOUT_CLASSIFICATION	start the session to be used for this request
WITHOUT_CLASSIFICATION	make the session available to the session factory's "current context"
WITHOUT_CLASSIFICATION	pass control along to the rest of the processing chain
WITHOUT_CLASSIFICATION	remove session from "current context"
WITHOUT_CLASSIFICATION	eager fetch the collection so we can use it detached
WITHOUT_CLASSIFICATION	if we want to handle it bidirectional and detached we also need to load this collection with an eager outer-join fetch this time with criteria and not hql
WITHOUT_CLASSIFICATION	event anevent = (event) session .createcriteria(event.class).setfetchmode("participants" fetchmode.join) .add( expression.eq("id" eventid) ) .uniqueresult() eager fetch the colleciton so we can use it detached
WITHOUT_CLASSIFICATION	end of first unit of work
WITHOUT_CLASSIFICATION	or bidirectional safety method setting both sides aperson.addtoevent(anevent)
WITHOUT_CLASSIFICATION	begin second unit of work
WITHOUT_CLASSIFICATION	reattachment of aperson
WITHOUT_CLASSIFICATION	the getemailaddresses() might trigger a lazy load of the collection
WITHOUT_CLASSIFICATION	we need our tm so get it now and avoid doing other work if there is a problem
WITHOUT_CLASSIFICATION	don't hold the jbc node lock throughout the tx as that prevents reads and other updates
WITHOUT_CLASSIFICATION	don't hold the jbc node lock throughout the tx as that prevents reads and other updates
WITHOUT_CLASSIFICATION	jbc put a version in the node when it created as part of some internal operation. we are always newer but if the jbc version is > 1 something odd has happened
WITHOUT_CLASSIFICATION	swaldman 2006-08-28 define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations
WITHOUT_CLASSIFICATION	not null if the isolation level has been specified in the configuration file. otherwise it is left to the driver's default value.
WITHOUT_CLASSIFICATION	configured outside of hibernate (i.e. servlet container or java bean container already has proxool pools running and this provider is to just borrow one of these
WITHOUT_CLASSIFICATION	if you're closing down the connectionprovider chances are an is not a real big deal just warn
WITHOUT_CLASSIFICATION	(as is always optional for consistency with sql/oql)
WITHOUT_CLASSIFICATION	process the "new" hql style where aliases are assigned _after_ the class name or path expression ie. using the as construction
WITHOUT_CLASSIFICATION	the loaded owner will be set to null after the collection is removed so capture its value as the affected owner so it is accessible to both pre- and post- events
WITHOUT_CLASSIFICATION	is a primitive type invokespecial
WITHOUT_CLASSIFICATION	array of primitive type do nothing
WITHOUT_CLASSIFICATION	handle a path expression or class name that appears at the start in the "new" hql style or an alias that appears at the start in the "old" hql style
WITHOUT_CLASSIFICATION	handle <= >= != is not not between not in
WITHOUT_CLASSIFICATION	the loop ensures atomicity of the select + update even for no transaction or read committed isolation level
WITHOUT_CLASSIFICATION	transfer an explicitly defined entity name handle the lazy attribute
WITHOUT_CLASSIFICATION	keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	get meta's from <joined-subclass>
WITHOUT_CLASSIFICATION	parameters on the property mapping should override parameters in the typedef
WITHOUT_CLASSIFICATION	fetch="join" overrides default laziness fetch="join" overrides default laziness
WITHOUT_CLASSIFICATION	note special case default to join and non-lazy for the "second join" of the many-to-many
WITHOUT_CLASSIFICATION	so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	void setcomponenttuplizerfactory(componenttuplizerfactory componenttuplizerfactory) { this.componenttuplizerfactory = componenttuplizerfactory }
WITHOUT_CLASSIFICATION	element index -> id
WITHOUT_CLASSIFICATION	note that it might be better to iterate the snapshot but this is safe assuming the user implements equals() properly as required by the set contract!
WITHOUT_CLASSIFICATION	collections detect changes made via their public interface and mark themselves as dirty as a performance optimization
WITHOUT_CLASSIFICATION	essentially if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception note that allowing close() above has the same basic effect but we capture that there simply to perform the unbind
WITHOUT_CLASSIFICATION	the default sqlexceptionconverter for all dialects is based on sqlstate since sqlerrorcode is extremely vendor-specific. specific dialects may override to return whatever is most appropriate for that vendor.
WITHOUT_CLASSIFICATION	only necessary for postgre < 7.4 httpanoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml
WITHOUT_CLASSIFICATION	select topic syntax from information_schema.help where section like 'function%' order by section topic see also -> httpwww.h2database.com/html/functions.html
WITHOUT_CLASSIFICATION	registercolumntype(types.varbinary "character($l)") registercolumntype(types.blob "character($l)" ) for use prior to cp 11.0 registercolumntype(types.clob "character($l)" )
WITHOUT_CLASSIFICATION	the blob type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include k - kilobyte m - megabyte g - gigabyte. refer to the pbdevelopers guide for more info.
WITHOUT_CLASSIFICATION	we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400
WITHOUT_CLASSIFICATION	oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.
WITHOUT_CLASSIFICATION	add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list
WITHOUT_CLASSIFICATION	you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed
WITHOUT_CLASSIFICATION	note for object <-> sql datatype mappings see configuration manager | advanced | sql | system ddl datatype mappings tbdregistercolumntype(types.binary "binary($1)") changed 08-11-2005 jsl
WITHOUT_CLASSIFICATION	trim(end_keyword string-expression-1 from string-expression-2) use hibernate implementation "from" is one of the parameters they pass in position ?3 registerfunction( "trim" new sqlfunctiontemplate(hibernate.string "trim(?1 ?2 from ?3)") )
WITHOUT_CLASSIFICATION	whether this dialect has an identity clause added to the data type or a completely seperate identity data type
WITHOUT_CLASSIFICATION	according to both the ansi-sql and jpa specs trim takes a variable number of parameters between 1 and 4. at least one paramer (trimsource) is required. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if <trim specification> is omitted both is assumed. if <trim character> is omitted space is assumed
WITHOUT_CLASSIFICATION	/ prepare persisters and link them up with their cache region/access-strategy
WITHOUT_CLASSIFICATION	named queries
WITHOUT_CLASSIFICATION	this will throw an error if there's something wrong.
WITHOUT_CLASSIFICATION	does not handle arrays (thats ok cos they can't be lazy) or newly instantiated collections so we can do the cast
WITHOUT_CLASSIFICATION	collection deletions are a special case since update() can add deletions of collections not loaded by the session.
WITHOUT_CLASSIFICATION	we can do the cast since orphan-delete does not apply to 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)
WITHOUT_CLASSIFICATION	if the natural-id is marked as non-mutable it is not retrieved during a normal database-snapshot operation
WITHOUT_CLASSIFICATION	watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)
WITHOUT_CLASSIFICATION	slice to get the columns for this component property
WITHOUT_CLASSIFICATION	int result = 17 result = 37 result + type.hashcode() result = 37 result + ( value==null ? 0 value.hashcode() ) return result
WITHOUT_CLASSIFICATION	the collectionentry.isreached() stuff is just to detect any silly users who set up circular or shared references between/to collections.
WITHOUT_CLASSIFICATION	detached collection wrappers that get found + reattached during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	the unique property value represented here may or may not be serializable so we do an explicit check here in order to generate a better error message
WITHOUT_CLASSIFICATION	if the version of a newly instantiated object is not the same as the version seed value use that as the unsaved-value
WITHOUT_CLASSIFICATION	ie. we never have to null out a reference to an uninitialized proxy
WITHOUT_CLASSIFICATION	ignore this row the collection is in process of being loaded somewhere further "up" the stack
WITHOUT_CLASSIFICATION	entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently not yet used
WITHOUT_CLASSIFICATION	should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. besides it makes the code much easier to read than the old transactionhelper stuff
WITHOUT_CLASSIFICATION	this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility
WITHOUT_CLASSIFICATION	this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility
WITHOUT_CLASSIFICATION	wrap up any new collections directly referenced by the object or its components
WITHOUT_CLASSIFICATION	remove any snapshot not really for memory management purposes but rather because it might now be stale and there is no longer any entityentry to take precedence this is now handled by removeentity() session.getpersistencecontext().removedatabasesnapshot(key)
WITHOUT_CLASSIFICATION	skip this check for composite-ids relating to dom4j entity-mode alternatively we could add a check to make sure the incoming id value is an instance of element
WITHOUT_CLASSIFICATION	upgrade the lock if necessary lock(result lockmode)
WITHOUT_CLASSIFICATION	now any collections that are initialized inside this block do not get updated - they are ignored until the next flush
WITHOUT_CLASSIFICATION	we must clone embedded composite identifiers or we will get back the same instance that we pass in
WITHOUT_CLASSIFICATION	sub-insertions should occur before containing insertion so try to do the callback now
WITHOUT_CLASSIFICATION	the entity is not associated with the session so try interceptor and unsaved-value
WITHOUT_CLASSIFICATION	scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface returning multiple query strings (make sure we don't pick up a class in the select clause!)
WITHOUT_CLASSIFICATION	save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	if it is an uninitialized proxy pointing with this session then when it is accessed the underlying instance will be "contained"
WITHOUT_CLASSIFICATION	generate an explicit join for the root dot node. the implied joins will be collected and passed up to the root dot node.
WITHOUT_CLASSIFICATION	a session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed
WITHOUT_CLASSIFICATION	does the collection referenced by this fromelement specify an order-by attribute? if so attach it to the query's order-by
WITHOUT_CLASSIFICATION	and the token could be an identifer and the error is a mismatched token error
WITHOUT_CLASSIFICATION	if a where clause was specified in the update/delete query use it to limit the returned ids here
WITHOUT_CLASSIFICATION	int parameterstart = getwalker().getnumberofparametersinsetclause() list allparams = getidselectparameterspecifications() iterator whereparams = allparams.sublist( parameterstart allparams.size() ).iterator()
WITHOUT_CLASSIFICATION	default implementation if this node has a data type and that data type is not an association then this is scalar.
WITHOUT_CLASSIFICATION	resolve the lhs fully generate implicit joins. pass in the property name so that the resolver can discover foreign key (id) properties.
WITHOUT_CLASSIFICATION	if the propertytype is null and there isn't a parent just stop now there was a problem resolving the node anyway.
WITHOUT_CLASSIFICATION	we do not look for an existing join on the same path because it makes sense to join twice on the same collection role
WITHOUT_CLASSIFICATION	our parent is another dot node meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's pk (because 'our' table would know the fk).
WITHOUT_CLASSIFICATION	public final currency getcurrency(int col) throws hibernateexception {return (currency) get(col)}
WITHOUT_CLASSIFICATION	here we have two possibilities 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name
WITHOUT_CLASSIFICATION	set the unresolved path in this node and the parent. set the text for the parent.
WITHOUT_CLASSIFICATION	get the first child to be considered. sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. distinct).
WITHOUT_CLASSIFICATION	if this is an entity and the property is the identifier property then use getidentifiertype(). note that the propertyname.equals( propertypath ) checks whether we have a component key reference where the component class property name is the same as the entity id property name if the two are not equal this is the case and we'd need to "fall through" to using the property mapping.
WITHOUT_CLASSIFICATION	for a subquery the alias to use depends on a few things (we already know this is not an overall select) 1) if this from_element represents a correlation to the outer-most query a) if the outer query represents a multi-table persister we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) b) otherwise we need to use the persister's table name as the column qualification 2) otherwise (not correlated) use the given alias
WITHOUT_CLASSIFICATION	not a collection? return the entity property mapping.
WITHOUT_CLASSIFICATION	collection of <many-to-any/> mappings used to circumvent the component-collection check below
WITHOUT_CLASSIFICATION	otherwise the destination node was implied by the from clause and the from clause processor will automatically add it in the right place.
WITHOUT_CLASSIFICATION	if the first identifier in the path referrs to the class alias (not the class name) then this is a correlated subselect. if it's a correlated sub-select use the existing table alias. otherwise generate a new one.
WITHOUT_CLASSIFICATION	check to see if our "proppath" actually represents a property on the persister
WITHOUT_CLASSIFICATION	an ident node can represent an index expression if the ident represents a naked property ref note this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrexpr -> resolve()). the other option if that changes is to call resolve from here but it is currently un-needed overhead.
WITHOUT_CLASSIFICATION	this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths
WITHOUT_CLASSIFICATION	if this is an implied join in a from clause then use ansi-style joining and set the flag on the fromelement that indicates that it was implied in the from clause itself.
WITHOUT_CLASSIFICATION	origin.adddestination(destination) add the query spaces.
WITHOUT_CLASSIFICATION	for an explicit many-to-many relationship add a second join from the intermediate (many-to-many) table to the destination table. also make sure that the from element's idea of the destination is the destination table.
WITHOUT_CLASSIFICATION	reset the node type because the rest of the system is expecting from_fragment all we wanted was for the factory to create the right sub-class. this might get reset again later on anyway to make the sql generation simpler.
WITHOUT_CLASSIFICATION	explicit = true this is an explict select. arraylist sqlresulttypelist = new arraylist()
WITHOUT_CLASSIFICATION	sqlresulttypelist.add( type ) generate the select expression.
WITHOUT_CLASSIFICATION	if the expression list has exactly one expression and the type of the expression is a collection then this might be a collection function such as index(c) or size(c).
WITHOUT_CLASSIFICATION	need to parse off the column qualifiers this is assuming (which is true as of now) that this is only used from update and delete hql statement parsing
WITHOUT_CLASSIFICATION	for regression testing against output from the old parser found it easiest to simply reorder the fromelements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser this is definitely another of those "only needed for regression purposes". the syntheticandfactory then simply injects them as it encounters them.
WITHOUT_CLASSIFICATION	the uber-rule here is that we need to include subclass joins if the fromelement is in any way dereferenced by a property from the subclass table otherwise we end up with column references qualified by a non-existent table reference in the resulting sql
WITHOUT_CLASSIFICATION	classic translator does not support collection of ordinal param metadata
WITHOUT_CLASSIFICATION	the following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.
WITHOUT_CLASSIFICATION	the loop ensures atomicity of the select + update even for no transaction or read committed isolation level
WITHOUT_CLASSIFICATION	should not be able to reach last without maxposition being set unless there are no results
WITHOUT_CLASSIFICATION	we found it in the temp pc. should indicate we are in the midst of processing a result set containing eager fetches via join fetch
WITHOUT_CLASSIFICATION	do not use proxiesbykey since not all proxies that point to this session's instances are in that collection!
WITHOUT_CLASSIFICATION	if there is no tm configured we will not be able to access the javax.transaction.transaction object in order to register a synch anyway.
WITHOUT_CLASSIFICATION	since the result set cursor is always left at the first physical row after the "last processed" we need to jump back one position to get the key value we are interested in skipping
WITHOUT_CLASSIFICATION	true if this is a query and we are loading multiple instances of the same collection role otherwise this is a collectioninitializer and we are loading up a single collection or batch
WITHOUT_CLASSIFICATION	we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode none)
WITHOUT_CLASSIFICATION	add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)
WITHOUT_CLASSIFICATION	assume we are in an auto-commit state
WITHOUT_CLASSIFICATION	log a message about potential connection leaks
WITHOUT_CLASSIFICATION	ps.close() just close it do not try to return it to the pool! note early exit!
WITHOUT_CLASSIFICATION	this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through hibernate's registered transaction synchronization on a separate "reaping" thread. in cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these cmes occur. and though it is not "allowed" per-se the end result without handling it specifically is infinite looping. so here we simply break the loop
WITHOUT_CLASSIFICATION	unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance
WITHOUT_CLASSIFICATION	can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode
WITHOUT_CLASSIFICATION	don't create a unique key 'cos some databases don't like a uk on nullable columns getcollectiontable().createuniquekey( getidentifier().getconstraintcolumns() )
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	isset = collection.isset() issorted = collection.issorted()
WITHOUT_CLASSIFICATION	lists arrays sets maps bags
WITHOUT_CLASSIFICATION	we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching
WITHOUT_CLASSIFICATION	use a combination of foreign key columns and pk columns since the ordering of removal and addition is not guaranteed when a child moves from one parent to another
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	information about properties of this class including inherited properties (only really needed for updatable/insertable properties)
WITHOUT_CLASSIFICATION	all this only really needs to consider properties of this class not its subclasses but since we are reusing code used for sequential selects we use the subclass closure
WITHOUT_CLASSIFICATION	here we render the select column list based on the properties defined as being generated. for partial component generation we currently just re-select the whole component rather than trying to handle the individual generated portions.
WITHOUT_CLASSIFICATION	this is the root (versioned) table and we are using version-based optimistic locking if we are not updating the version also don't check it (unless this is a "generated" version column)!
WITHOUT_CLASSIFICATION	optimistic-lock="all" include all updatable properties optimistic-lock="dirty" include all properties we are updating this time
WITHOUT_CLASSIFICATION	this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a jta transaction context so must be autocommit mode)
WITHOUT_CLASSIFICATION	need to treat this as if it where optimistic-lock="all" (dirty does not make sense) first we need to locate the "loaded" state note it potentially could be a proxy so perform the location the safe way
WITHOUT_CLASSIFICATION	we always assume an instance with a null identifier or no identifier property is unsaved!
WITHOUT_CLASSIFICATION	need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys
WITHOUT_CLASSIFICATION	allow any identifier quoted with backtick only recognizes identifiers beginning with a letter
WITHOUT_CLASSIFICATION	following doesn't handle (null not null) but unnecessary since this would mean all rows
WITHOUT_CLASSIFICATION	impl note due to the delayed population of setters (setters cached for performance) we really cannot pro0perly define equality for this transformer
WITHOUT_CLASSIFICATION	we need to dirty check collections since they can cause an owner version number increment
WITHOUT_CLASSIFICATION	return the id so we can use it to reset the proxy id return result
WITHOUT_CLASSIFICATION	optimizer = getfactory().getsettings().getbytecodeprovider().getreflectionoptimizer( mappedclass getternames setternames proptypes )
WITHOUT_CLASSIFICATION	cache the actual id of the object not the value of the property-ref which might not be initialized
WITHOUT_CLASSIFICATION	we now have the value of the property-ref we reference. however we need to dig a little deeper as that property might also be an entity type in which case we need to resolve its identitifier
WITHOUT_CLASSIFICATION	retrieve the value of the designated column in the current row of this resultset object as a java.io.reader object
WITHOUT_CLASSIFICATION	not absolutely necessary but helps for some equals()/hashcode() implementations
WITHOUT_CLASSIFICATION	this should be a call to resolve() not resolveidentifier() 'cos it might be a property-ref and we did not cache the referenced value
WITHOUT_CLASSIFICATION	if we have <tt>not-found="ignore"</tt> association mapped to a formula we always need to dirty check it so we can update the second-level cache
WITHOUT_CLASSIFICATION	can't just return null here since that would cause an owning component to become null
WITHOUT_CLASSIFICATION	for arrays replaceelements() may return a different reference since the array length might not match
WITHOUT_CLASSIFICATION	actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the mru entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).
WITHOUT_CLASSIFICATION	as soon as we encounter our first letter return the substring from that position
WITHOUT_CLASSIFICATION	note expected in the syntax type=listenerclass ({sep}type=listenerclass) where {sep} is any whitespace or comma
WITHOUT_CLASSIFICATION	istransactioncallbackregistered denotes whether any hibernate transaction has registered as a callback against this jdbccontext only one such callback is allowed. directly serializing this value causes problems with jdbctransaction or really any transaction impl where the callback is local to the transaction instance itself since that transaction is not serialized along with the jdbccontext. thus we handle that fact here explicitly
WITHOUT_CLASSIFICATION	note that for sequential scrolling we make the assumption that the first persister element is the "root entity"
WITHOUT_CLASSIFICATION	we call getkeyfromresultset() here so that we can know the key value upon which to perform the breaking logic. however it is also then called from getrowfromresultset() which is certainly not the most efficient. but the call here is needed and there currently is no other way without refactoring of the doquery()/getrowfromresultset() methods
WITHOUT_CLASSIFICATION	this check is needed since processing leaves the cursor after the last physical row for the current logical row thus if we are after the last physical row this might be caused by either 1) scrolling to the last logical row 2) scrolling past the last logical row in the latter scenario the previous logical row really is the last logical row. in all other cases we should process back two logical records (the current logic row plus the previous logical row).
WITHOUT_CLASSIFICATION	and perform the load
WITHOUT_CLASSIFICATION	important reuse the same event instances for performance!
WITHOUT_CLASSIFICATION	this is a query and we are loading multiple instances of the same collection role
WITHOUT_CLASSIFICATION	we found a collection element in the result set
WITHOUT_CLASSIFICATION	we did not find a collection element in the result set so we ensure that a collection is created with the owner's identifier since what we have is an empty collection
WITHOUT_CLASSIFICATION	this is a collection initializer so we must create a collection for each of the passed-in keys to account for the possibility that the collection is empty and has no rows in the result set
WITHOUT_CLASSIFICATION	grab its state from the resultset and keep it in the session (but don't yet initialize the object itself) note that we acquire lockmode.read even if it was not requested
WITHOUT_CLASSIFICATION	a many-to-many decrement currentdepth here to allow join across the association table without exceeding max_fetch_depth (i.e. the "currentdepth - 1" bit)
WITHOUT_CLASSIFICATION	if not a composite key use "foo in (? ? ?)" for batching if no batch and not a composite key use "foo = ?"
WITHOUT_CLASSIFICATION	the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases
WITHOUT_CLASSIFICATION	first look for a reference to a projection alias
WITHOUT_CLASSIFICATION	first look for a reference to a projection alias
WITHOUT_CLASSIFICATION	it does not refer to an alias of a projection look for a property
WITHOUT_CLASSIFICATION	determine if the collection elements are entities
WITHOUT_CLASSIFICATION	let return-propertys override whatever the persister has for aliases.
WITHOUT_CLASSIFICATION	translates an ast join type (i.e. the token type) into a joinfragment.xxx join type. @param astjointype the ast join type (from hqlsqltokentypes or sqltokentypes) @return a joinfragment.xxx join type. @see joinfragment @see sqltokentypes
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	}
WITHOUT_CLASSIFICATION	public list getcollectionaliases() { return collectionaliases } public list getcollectionowners() { return collectionowners } public list getcollectionowneraliases() { return collectionowneraliases } public list getcollectionpersisters() { return collectionpersisters } public map getalias2persister() { return alias2persister } public boolean iscollectioninitializer() { return iscollectioninitializer } public list getpersisters() { return persisters } public map getalias2owneralias() { return alias2owneralias } public list getscalartypes() { return scalartypes } public list getscalarcolumnaliases() { return scalarcolumnaliases } public list getpropertyresults() { return propertyresults } public list getcollectionpropertyresults() { return collectionresults } public map getalias2return() { return alias2return }
WITHOUT_CLASSIFICATION	sqlqueryparser parser = new sqlqueryparser( sqlquery processor.getalias2persister() processor.getalias2return() aliases collaliases collpersisters suffixes collsuffixes ) sql = parser.process() namedparameterbindpoints = parser.getnamedparameters()
WITHOUT_CLASSIFICATION	include the discriminator and class-level where but not filters
WITHOUT_CLASSIFICATION	sqlaliassuffixes[i] = element.getcolumnaliassuffix()
WITHOUT_CLASSIFICATION	none because its the requested lock mode not the actual!
WITHOUT_CLASSIFICATION	at this point we have (drivingsqlalias) the sql alias of the driving table corresponding to the given user alias. however the driving table is not (necessarily) the table against which we want to apply locks. mainly the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies it just happens that driving and root are the same).
WITHOUT_CLASSIFICATION	the column doesnt exist at all.
WITHOUT_CLASSIFICATION	we have a mapped identifier property and the root of the incoming property path matched that identifier property
WITHOUT_CLASSIFICATION	we have an embedded composite identifier
WITHOUT_CLASSIFICATION	both many-to-one and one-to-one are represented as a property. entitypersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. so we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. the other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. if that assertion changes then this check needs to change as well. partially this is an issue with the overloading of the term "lazy" here
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	roottablename = persistentclass.getroottable().getqualifiedname( factory.getdialect() factory.getdefaultcatalog() factory.getdefaultschema() )
WITHOUT_CLASSIFICATION	subclasses
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	protected void initpropertypaths(final string pathfinal type typefinal string[] columnsfinal string[] formulatemplatesfinal mapping factory)throws mappingexception {addformulapropertypath(path type formulatemplates)initpropertypaths(path type columns formulatemplates factory)}
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	custom sql (would be better if these were private)
WITHOUT_CLASSIFICATION	moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	aliases for identifier ( alias.id ) skip if the entity defines a non-id property named 'id'
WITHOUT_CLASSIFICATION	decide which resultset to get the property value from
WITHOUT_CLASSIFICATION	note it is conceptually possible that a usertype could map null to a non-null value so the following is arguable
WITHOUT_CLASSIFICATION	the contract of entitytuplizer.determineconcretesubclassentityname says that returning null is an indication that the specified entity-name (this.getentityname) should be used.
WITHOUT_CLASSIFICATION	need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys
WITHOUT_CLASSIFICATION	cache these since they are stateless this one could even be static
WITHOUT_CLASSIFICATION	"as" is not in keywords
WITHOUT_CLASSIFICATION	--commented out by inspection (12/4/04 910 am) public abstract void addcondition(string alias string[] columns string condition)
WITHOUT_CLASSIFICATION	use the id column alias
WITHOUT_CLASSIFICATION	private list aliases = new arraylist()
WITHOUT_CLASSIFICATION	columns.add(columnname) aliases.add(tablealias)
WITHOUT_CLASSIFICATION	where fragment must be empty!
WITHOUT_CLASSIFICATION	revert to traditional hibernate behavior of setting initialpoolsize to minpoolsize unless otherwise specified with a c3p0.-style parameter.
WITHOUT_CLASSIFICATION	arbitrary on clause ignored!!
WITHOUT_CLASSIFICATION	might happen with a managed connection
WITHOUT_CLASSIFICATION	might happen with a managed connection
WITHOUT_CLASSIFICATION	if an exception occurs during flush user must call rollback()
WITHOUT_CLASSIFICATION	essentially 1) if we have a local (hibernate) transaction in progress and it already has the usertransaction cached use that usertransaction to determine the status. 2) if a transaction manager has been located use that transaction manager to determine the status. 3) finally as the last resort try to lookup the usertransaction via jndi and use that to determine the status.
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	swallow it (the transaction _was_ successful or successfully rolled back)
WITHOUT_CLASSIFICATION	ignore it
WITHOUT_CLASSIFICATION	we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database) since in this case a null entity reference can lose information
WITHOUT_CLASSIFICATION	create our own copy of the user-supplied tuplizer impl map
WITHOUT_CLASSIFICATION	regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed) so suspend any ongoing tx
WITHOUT_CLASSIFICATION	then handle any user-defined entity modes
WITHOUT_CLASSIFICATION	establish the region root node with a non-locking data version
WITHOUT_CLASSIFICATION	temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	note this is being used from the process of shutting down a sessionfactory. specific things to consider (1) this clearing of the region should not propagate to other nodes on the cluster (if any) this is the cache-mode-local option bit (2) really just trying a best effort to cleanup after ourselves lock failures etc are not critical here this is the fail-silently option bit
WITHOUT_CLASSIFICATION	need to extract the component values and check for subtype replacements
WITHOUT_CLASSIFICATION	we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists
WITHOUT_CLASSIFICATION	for now just "re-flatten" the metamodel since this is temporary stuff anyway (hhh-1907)
WITHOUT_CLASSIFICATION	configure the cache to use our tm
WITHOUT_CLASSIFICATION	this solution would allow us to eliminate the owner arg to disassemble() but what if the collection was null and then later had elements added? seems unsafe session.getpersistencecontext().getcollectionentry( (persistentcollection) value ).getkey()
WITHOUT_CLASSIFICATION	make sure jbc doesn't look one up
WITHOUT_CLASSIFICATION	some collections are not lazy
WITHOUT_CLASSIFICATION	here we don't want to suspend the tx. if we do 1) we might be caching query results that reflect uncommitted changes. no tx == no wl on cache node so other threads can prematurely see those query results 2) no tx == immediate replication. more overhead plus we spread issue #1 above around the cluster
WITHOUT_CLASSIFICATION	return the (fully resolved) identifier value but do not resolve to the actual referenced entity instance note the owner of the association is not really the owner of the id!
WITHOUT_CLASSIFICATION	add a zero (or quite low) timeout option so we don't block. ignore any timeoutexception. basically we forego caching the query result in order to avoid blocking. reads are done with suspended tx so they should not hold the lock for long. not caching the query result is ok since any subsequent read will just see the old result with its out-of-date timestamp that result will be discarded and the db query performed again.
WITHOUT_CLASSIFICATION	impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method
WITHOUT_CLASSIFICATION	we have the jbcwritemutex so no other local thread will be trying to write this key. it's possible here some remote thread has come in and changed the values again but since we are reading the values to write to jbc right now we know we are writing the latest values i.e. we don't assume that what we cached in entry.update() above is what we should write to jbc now. our write could be redundant i.e. we are writing what some remote thread just came in an wrote. there is a chance that yet another remote thread will update us and we'll then overwrite that later data in jbc. but all remote nodes will ignore that change in their localcache the only place it will live will be in jbc where it can only effect the initial state transfer values on newly joined nodes (i.e. populatelocalcache()).
WITHOUT_CLASSIFICATION	local cache so we use synchronization
WITHOUT_CLASSIFICATION	local cache so we use synchronization
WITHOUT_CLASSIFICATION	don't need to lock the cache here since if someone else inserted the same pk first the insert would fail
WITHOUT_CLASSIFICATION	we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush
WITHOUT_CLASSIFICATION	we need to obtain the lock before any actions are executed since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)
WITHOUT_CLASSIFICATION	postdelete after actually deleting a row record the fact that the instance no longer exists on the database (needed for identity-column key generation) and remove it from the session cache
WITHOUT_CLASSIFICATION	intentionally empty
