// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9996619558166631	WITHOUT_CLASSIFICATION	3.380441833370116E-4	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9996619558166631	WITHOUT_CLASSIFICATION	3.380441833370116E-4	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9996110851420057	WITHOUT_CLASSIFICATION	3.8891485799430616E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9993320407017847	WITHOUT_CLASSIFICATION	6.679592982153004E-4	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9998668534217952	WITHOUT_CLASSIFICATION	1.3314657820481947E-4	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.8877088856045793	IMPLEMENTATION	0.11229111439542075	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9985950101192924	WITHOUT_CLASSIFICATION	0.0014049898807076105	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.8933486985730207	WITHOUT_CLASSIFICATION	0.10665130142697936	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9996199660029542	WITHOUT_CLASSIFICATION	3.8003399704579965E-4	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9994484121274433	WITHOUT_CLASSIFICATION	5.515878725566829E-4	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9998651533152799	WITHOUT_CLASSIFICATION	1.3484668472005004E-4	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.9964051055355394	WITHOUT_CLASSIFICATION	0.0035948944644606045	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9998802612931511	WITHOUT_CLASSIFICATION	1.1973870684882705E-4	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9998802612931511	WITHOUT_CLASSIFICATION	1.1973870684882705E-4	IMPLEMENTATION
/**	IMPLEMENTATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.6658875198049379	WITHOUT_CLASSIFICATION	0.3341124801950622	IMPLEMENTATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9146331323842246	IMPLEMENTATION	0.08536686761577532	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.8903429835807396	WITHOUT_CLASSIFICATION	0.1096570164192604	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999985715169054	WITHOUT_CLASSIFICATION	1.4284830946928664E-6	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9995953103151671	WITHOUT_CLASSIFICATION	4.046896848328525E-4	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9994090802215868	WITHOUT_CLASSIFICATION	5.909197784132278E-4	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.999980346446304	WITHOUT_CLASSIFICATION	1.9653553696068727E-5	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9994462085903784	WITHOUT_CLASSIFICATION	5.537914096215821E-4	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9959561933263994	WITHOUT_CLASSIFICATION	0.0040438066736006115	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9959561933263994	WITHOUT_CLASSIFICATION	0.0040438066736006115	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9894195770127298	WITHOUT_CLASSIFICATION	0.010580422987270221	IMPLEMENTATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9998016343233381	WITHOUT_CLASSIFICATION	1.983656766619501E-4	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.985277692592137	WITHOUT_CLASSIFICATION	0.014722307407862964	IMPLEMENTATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9995658636898327	WITHOUT_CLASSIFICATION	4.341363101673235E-4	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9992167407398996	WITHOUT_CLASSIFICATION	7.832592601003941E-4	IMPLEMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.999633826012032	WITHOUT_CLASSIFICATION	3.6617398796800446E-4	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9992869372138032	WITHOUT_CLASSIFICATION	7.130627861967184E-4	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9999070022920478	WITHOUT_CLASSIFICATION	9.299770795216646E-5	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9995461350375505	WITHOUT_CLASSIFICATION	4.538649624493565E-4	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9951035280333664	WITHOUT_CLASSIFICATION	0.004896471966633658	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9995787428919121	WITHOUT_CLASSIFICATION	4.2125710808791635E-4	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.508075457256614	WITHOUT_CLASSIFICATION	0.4919245427433861	IMPLEMENTATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9997373979323643	WITHOUT_CLASSIFICATION	2.62602067635746E-4	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9995360370506374	WITHOUT_CLASSIFICATION	4.639629493624945E-4	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.848249627543147	WITHOUT_CLASSIFICATION	0.15175037245685294	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.848249627543147	WITHOUT_CLASSIFICATION	0.15175037245685294	IMPLEMENTATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9929335681808538	WITHOUT_CLASSIFICATION	0.007066431819146205	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.999915289635067	WITHOUT_CLASSIFICATION	8.471036493298549E-5	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9997598929357411	WITHOUT_CLASSIFICATION	2.4010706425882397E-4	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9560212429313822	WITHOUT_CLASSIFICATION	0.043978757068617695	IMPLEMENTATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9992690067508695	WITHOUT_CLASSIFICATION	7.309932491304404E-4	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9993550699935135	WITHOUT_CLASSIFICATION	6.449300064863596E-4	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.999457946338302	WITHOUT_CLASSIFICATION	5.420536616980054E-4	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9998769750828754	WITHOUT_CLASSIFICATION	1.230249171246629E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.999777787673843	WITHOUT_CLASSIFICATION	2.2221232615700202E-4	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9993331977590894	WITHOUT_CLASSIFICATION	6.668022409106459E-4	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9997064165458351	WITHOUT_CLASSIFICATION	2.9358345416481295E-4	IMPLEMENTATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9997335648633767	WITHOUT_CLASSIFICATION	2.664351366233348E-4	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9989790484506007	WITHOUT_CLASSIFICATION	0.0010209515493992732	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9993496250025888	WITHOUT_CLASSIFICATION	6.503749974111461E-4	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9866457656890384	WITHOUT_CLASSIFICATION	0.013354234310961739	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9993496250025888	WITHOUT_CLASSIFICATION	6.503749974111461E-4	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9966263686347447	IMPLEMENTATION	0.003373631365255326	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9153853010040106	IMPLEMENTATION	0.08461469899598943	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.9993496250025888	WITHOUT_CLASSIFICATION	6.503749974111461E-4	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999753025646116	WITHOUT_CLASSIFICATION	2.4697435388335042E-5	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999761706100873	WITHOUT_CLASSIFICATION	2.3829389912720653E-5	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9997696231531684	WITHOUT_CLASSIFICATION	2.3037684683152457E-4	IMPLEMENTATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9999022595637008	WITHOUT_CLASSIFICATION	9.774043629911093E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999003384938421	WITHOUT_CLASSIFICATION	9.966150615793052E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9969140147688751	WITHOUT_CLASSIFICATION	0.0030859852311248574	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9969140147688751	WITHOUT_CLASSIFICATION	0.0030859852311248574	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9969140147688751	WITHOUT_CLASSIFICATION	0.0030859852311248574	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9969140147688751	WITHOUT_CLASSIFICATION	0.0030859852311248574	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9969140147688751	WITHOUT_CLASSIFICATION	0.0030859852311248574	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9969140147688751	WITHOUT_CLASSIFICATION	0.0030859852311248574	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9969140147688751	WITHOUT_CLASSIFICATION	0.0030859852311248574	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990593742387438	WITHOUT_CLASSIFICATION	9.406257612560954E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990593742387438	WITHOUT_CLASSIFICATION	9.406257612560954E-4	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999003194225451	WITHOUT_CLASSIFICATION	9.968057745490709E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999743919689589	WITHOUT_CLASSIFICATION	2.560803104108029E-5	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999582078256503	WITHOUT_CLASSIFICATION	4.179217434982717E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999930987160354	WITHOUT_CLASSIFICATION	6.901283964594776E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999930987160354	WITHOUT_CLASSIFICATION	6.901283964594776E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999694970414551	WITHOUT_CLASSIFICATION	3.0502958544911143E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999853928453716	WITHOUT_CLASSIFICATION	1.4607154628404567E-5	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999838653649378	WITHOUT_CLASSIFICATION	1.6134635062270707E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999306254429067	WITHOUT_CLASSIFICATION	6.937455709339114E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9976750440812383	WITHOUT_CLASSIFICATION	0.0023249559187616606	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9976750440812383	WITHOUT_CLASSIFICATION	0.0023249559187616606	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9970424337914688	WITHOUT_CLASSIFICATION	0.002957566208531218	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998764392746989	WITHOUT_CLASSIFICATION	1.2356072530108478E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999614664287825	WITHOUT_CLASSIFICATION	3.853357121754048E-5	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999635900073113	WITHOUT_CLASSIFICATION	3.640999268866066E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999920244712918	WITHOUT_CLASSIFICATION	7.975528708261283E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9969698860980809	WITHOUT_CLASSIFICATION	0.003030113901919205	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9969153979224464	WITHOUT_CLASSIFICATION	0.0030846020775536606	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999025585085517	WITHOUT_CLASSIFICATION	9.744149144829537E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999027297407517	WITHOUT_CLASSIFICATION	9.727025924840156E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999026732647802	WITHOUT_CLASSIFICATION	9.732673521987737E-5	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999964746304634	WITHOUT_CLASSIFICATION	3.525369536609914E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999073272979715	WITHOUT_CLASSIFICATION	9.267270202860026E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999073272979715	WITHOUT_CLASSIFICATION	9.267270202860026E-5	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.999950920386884	WITHOUT_CLASSIFICATION	4.907961311593506E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9980108836012174	WITHOUT_CLASSIFICATION	0.0019891163987825395	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999650100687686	WITHOUT_CLASSIFICATION	3.4989931231410926E-5	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999496170721246	WITHOUT_CLASSIFICATION	5.038292787533803E-5	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.999991766662497	WITHOUT_CLASSIFICATION	8.233337502985605E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999436304047052	WITHOUT_CLASSIFICATION	5.636959529469643E-5	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9998872744805446	WITHOUT_CLASSIFICATION	1.1272551945534769E-4	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999765583427246	WITHOUT_CLASSIFICATION	2.344165727543695E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999637558377857	WITHOUT_CLASSIFICATION	3.624416221422422E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.999922966612975	WITHOUT_CLASSIFICATION	7.703338702501537E-5	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999224776094048	WITHOUT_CLASSIFICATION	7.752239059520978E-5	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999374565815907	WITHOUT_CLASSIFICATION	6.254341840925036E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999724856992666	WITHOUT_CLASSIFICATION	2.7514300733424716E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9974814923308383	WITHOUT_CLASSIFICATION	0.0025185076691616997	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999740725216039	WITHOUT_CLASSIFICATION	2.592747839614908E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999400210273156	WITHOUT_CLASSIFICATION	5.997897268438329E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9974814923308383	WITHOUT_CLASSIFICATION	0.0025185076691616997	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999400210273156	WITHOUT_CLASSIFICATION	5.997897268438329E-5	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999690931179124	WITHOUT_CLASSIFICATION	3.0906882087657635E-5	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999980692407839	WITHOUT_CLASSIFICATION	1.9307592159718345E-6	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999704467811357	WITHOUT_CLASSIFICATION	2.9553218864353497E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999452180158512	WITHOUT_CLASSIFICATION	5.478198414873259E-5	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999949863308739	WITHOUT_CLASSIFICATION	5.013669126086467E-6	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999873579963412	WITHOUT_CLASSIFICATION	1.264200365881611E-5	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999375828129846	WITHOUT_CLASSIFICATION	6.241718701541644E-5	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999419555215509	WITHOUT_CLASSIFICATION	5.804447844914055E-5	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999860448506683	WITHOUT_CLASSIFICATION	1.3955149331784966E-5	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9998561538521241	WITHOUT_CLASSIFICATION	1.4384614787588622E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999163036377692	WITHOUT_CLASSIFICATION	8.369636223082852E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999400225940874	WITHOUT_CLASSIFICATION	5.9977405912622936E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999949126383344	WITHOUT_CLASSIFICATION	5.08736166556525E-6	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999573914172604	WITHOUT_CLASSIFICATION	4.2608582739700545E-5	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999689980606128	WITHOUT_CLASSIFICATION	3.100193938721544E-5	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999723705310182	WITHOUT_CLASSIFICATION	2.762946898192138E-5	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999784589102371	WITHOUT_CLASSIFICATION	2.1541089762873257E-5	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999424853197983	WITHOUT_CLASSIFICATION	5.751468020171368E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999931709796541	WITHOUT_CLASSIFICATION	6.8290203458465634E-6	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999936199964096	WITHOUT_CLASSIFICATION	6.380003590396457E-6	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999855378725714	WITHOUT_CLASSIFICATION	1.4462127428550696E-5	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999868191822278	WITHOUT_CLASSIFICATION	1.3180817772197718E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999462369288555	WITHOUT_CLASSIFICATION	5.3763071144391675E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999972365485912	WITHOUT_CLASSIFICATION	2.7634514087954806E-5	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9909323499925171	WITHOUT_CLASSIFICATION	0.009067650007482898	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999805695824096	WITHOUT_CLASSIFICATION	1.9430417590453467E-5	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999879492034902	WITHOUT_CLASSIFICATION	1.2050796509914377E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9970315537831292	WITHOUT_CLASSIFICATION	0.0029684462168706777	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999889355669499	WITHOUT_CLASSIFICATION	1.1064433050120998E-5	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999956829198178	WITHOUT_CLASSIFICATION	4.317080182207044E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999984232902828	WITHOUT_CLASSIFICATION	1.5767097171938173E-5	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999678348414038	WITHOUT_CLASSIFICATION	3.216515859620743E-5	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999747255555768	WITHOUT_CLASSIFICATION	2.5274444423156468E-5	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999314594803529	WITHOUT_CLASSIFICATION	6.854051964704515E-5	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999573552439259	WITHOUT_CLASSIFICATION	4.2644756073966734E-5	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999993506144752	WITHOUT_CLASSIFICATION	6.493855247900063E-7	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999314594803529	WITHOUT_CLASSIFICATION	6.854051964704515E-5	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999812274647044	WITHOUT_CLASSIFICATION	1.8772535295539203E-5	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999754583963946	WITHOUT_CLASSIFICATION	2.4541603605491376E-5	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9996698284443639	WITHOUT_CLASSIFICATION	3.301715556361063E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999901436090071	WITHOUT_CLASSIFICATION	9.856390992878602E-6	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.999971327137107	WITHOUT_CLASSIFICATION	2.8672862892957295E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999773714102862	WITHOUT_CLASSIFICATION	2.2628589713734944E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999773714102862	WITHOUT_CLASSIFICATION	2.2628589713734944E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999400225940874	WITHOUT_CLASSIFICATION	5.9977405912622936E-5	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999973536725035	WITHOUT_CLASSIFICATION	2.6463274964843353E-6	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999136316362196	WITHOUT_CLASSIFICATION	8.636836378038182E-5	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999836812104477	WITHOUT_CLASSIFICATION	1.6318789552410714E-5	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999707720481746	WITHOUT_CLASSIFICATION	2.9227951825338812E-5	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999975516254004	WITHOUT_CLASSIFICATION	2.448374599601016E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999913408025738	WITHOUT_CLASSIFICATION	8.659197426203319E-5	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999777910003195	WITHOUT_CLASSIFICATION	2.2208999680440646E-5	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999762960636162	WITHOUT_CLASSIFICATION	2.370393638379259E-5	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999856540673041	WITHOUT_CLASSIFICATION	1.4345932695921973E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999950562576821	WITHOUT_CLASSIFICATION	4.943742317893985E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999950562576821	WITHOUT_CLASSIFICATION	4.943742317893985E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999419266889129	WITHOUT_CLASSIFICATION	5.807331108720669E-5	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999840585084477	WITHOUT_CLASSIFICATION	1.5941491552237508E-5	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999601420043516	WITHOUT_CLASSIFICATION	3.985799564849646E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999950562576821	WITHOUT_CLASSIFICATION	4.943742317893985E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999419266889129	WITHOUT_CLASSIFICATION	5.807331108720669E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999419266889129	WITHOUT_CLASSIFICATION	5.807331108720669E-5	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.999974371520587	WITHOUT_CLASSIFICATION	2.5628479412916605E-5	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999196460352086	WITHOUT_CLASSIFICATION	8.035396479152748E-5	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999803831747015	WITHOUT_CLASSIFICATION	1.96168252985399E-5	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999710788679995	WITHOUT_CLASSIFICATION	2.89211320004772E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999903006142096	WITHOUT_CLASSIFICATION	9.699385790388451E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999903006142096	WITHOUT_CLASSIFICATION	9.699385790388451E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999499425822151	WITHOUT_CLASSIFICATION	5.0057417784851194E-5	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999586056709846	WITHOUT_CLASSIFICATION	4.1394329015353005E-5	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999837264117712	WITHOUT_CLASSIFICATION	1.627358822872541E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999794246348499	WITHOUT_CLASSIFICATION	2.057536515008028E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999794246348499	WITHOUT_CLASSIFICATION	2.057536515008028E-5	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999626930697554	WITHOUT_CLASSIFICATION	3.7306930244730365E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.99996142178181	WITHOUT_CLASSIFICATION	3.85782181898911E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999663057860285	WITHOUT_CLASSIFICATION	3.369421397148626E-5	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.999997559099905	WITHOUT_CLASSIFICATION	2.4409000949944064E-6	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999879356004904	WITHOUT_CLASSIFICATION	1.2064399509606668E-5	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999956832210861	WITHOUT_CLASSIFICATION	4.316778913919145E-6	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999150474221356	WITHOUT_CLASSIFICATION	8.495257786450791E-5	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999419709109304	WITHOUT_CLASSIFICATION	5.8029089069666264E-5	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.999933136487786	WITHOUT_CLASSIFICATION	6.686351221399457E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999663057860285	WITHOUT_CLASSIFICATION	3.369421397148626E-5	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9999026828702774	WITHOUT_CLASSIFICATION	9.731712972260191E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999865425047092	WITHOUT_CLASSIFICATION	1.3457495290739095E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999865425047092	WITHOUT_CLASSIFICATION	1.3457495290739095E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999971698468788	WITHOUT_CLASSIFICATION	2.830153121167436E-6	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999597605074532	WITHOUT_CLASSIFICATION	4.0239492546753585E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999863146315815	WITHOUT_CLASSIFICATION	1.3685368418526906E-5	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999852840294159	WITHOUT_CLASSIFICATION	1.4715970584005508E-5	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999327795371595	WITHOUT_CLASSIFICATION	6.722046284045033E-5	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9999027448505378	WITHOUT_CLASSIFICATION	9.725514946221855E-5	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9999299207314737	WITHOUT_CLASSIFICATION	7.007926852630154E-5	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999501898051609	WITHOUT_CLASSIFICATION	4.981019483907286E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999841689379666	WITHOUT_CLASSIFICATION	1.5831062033354407E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999841689379666	WITHOUT_CLASSIFICATION	1.5831062033354407E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999499409735307	WITHOUT_CLASSIFICATION	5.005902646921198E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999003384938421	WITHOUT_CLASSIFICATION	9.966150615793052E-5	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999978015486176	WITHOUT_CLASSIFICATION	2.198451382393965E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9969140147688751	WITHOUT_CLASSIFICATION	0.0030859852311248574	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999595935739028	WITHOUT_CLASSIFICATION	4.0406426097132695E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990593742387438	WITHOUT_CLASSIFICATION	9.406257612560954E-4	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.999923482664981	WITHOUT_CLASSIFICATION	7.651733501902679E-5	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999627561932636	WITHOUT_CLASSIFICATION	3.724380673634268E-5	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999186650948841	WITHOUT_CLASSIFICATION	8.133490511587188E-5	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999313032811155	WITHOUT_CLASSIFICATION	6.869671888454965E-5	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999877788598435	WITHOUT_CLASSIFICATION	1.2221140156499266E-5	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9972253027283006	WITHOUT_CLASSIFICATION	0.0027746972716993753	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9969423605603805	WITHOUT_CLASSIFICATION	0.0030576394396195196	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999492776329142	WITHOUT_CLASSIFICATION	5.0722367085904154E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999743919689589	WITHOUT_CLASSIFICATION	2.560803104108029E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999559871394867	WITHOUT_CLASSIFICATION	4.4012860513196254E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999559871394867	WITHOUT_CLASSIFICATION	4.4012860513196254E-5	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999372118647861	WITHOUT_CLASSIFICATION	6.278813521386792E-5	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999411400368554	WITHOUT_CLASSIFICATION	5.8859963144664785E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999897965026757	WITHOUT_CLASSIFICATION	1.0203497324240887E-5	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999209508278879	WITHOUT_CLASSIFICATION	7.904917211215375E-5	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999476582877701	WITHOUT_CLASSIFICATION	5.234171222981633E-5	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999801672016869	WITHOUT_CLASSIFICATION	1.9832798313014465E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999930987160354	WITHOUT_CLASSIFICATION	6.901283964594776E-5	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999696894966599	WITHOUT_CLASSIFICATION	3.031050334007262E-5	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999493751441284	WITHOUT_CLASSIFICATION	5.0624855871669647E-5	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999479783827263	WITHOUT_CLASSIFICATION	5.202161727371591E-5	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.99997937615423	WITHOUT_CLASSIFICATION	2.0623845769963497E-5	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999554564345626	WITHOUT_CLASSIFICATION	4.454356543741392E-5	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999852644721743	WITHOUT_CLASSIFICATION	1.4735527825796563E-5	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999725036578587	WITHOUT_CLASSIFICATION	2.749634214133334E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.999930987160354	WITHOUT_CLASSIFICATION	6.901283964594776E-5	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999588776653351	WITHOUT_CLASSIFICATION	4.112233466483373E-5	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999800197997725	WITHOUT_CLASSIFICATION	1.9980200227540672E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9969140147688751	WITHOUT_CLASSIFICATION	0.0030859852311248574	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9969140147688751	WITHOUT_CLASSIFICATION	0.0030859852311248574	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990593742387438	WITHOUT_CLASSIFICATION	9.406257612560954E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990593742387438	WITHOUT_CLASSIFICATION	9.406257612560954E-4	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9969423605603805	WITHOUT_CLASSIFICATION	0.0030576394396195196	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999559871394867	WITHOUT_CLASSIFICATION	4.4012860513196254E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999554564345626	WITHOUT_CLASSIFICATION	4.454356543741392E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999694970414551	WITHOUT_CLASSIFICATION	3.0502958544911143E-5	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999448491858303	WITHOUT_CLASSIFICATION	5.5150814169775264E-5	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999637757595232	WITHOUT_CLASSIFICATION	3.622424047675738E-5	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999556283471741	WITHOUT_CLASSIFICATION	4.4371652825930595E-5	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999812634773864	WITHOUT_CLASSIFICATION	1.8736522613688E-5	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999251464572265	WITHOUT_CLASSIFICATION	7.48535427734975E-5	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9969296775090718	WITHOUT_CLASSIFICATION	0.003070322490928268	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999292111741499	WITHOUT_CLASSIFICATION	7.078882585006408E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999274366338471	WITHOUT_CLASSIFICATION	7.256336615282074E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999274366338471	WITHOUT_CLASSIFICATION	7.256336615282074E-5	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999745520191443	WITHOUT_CLASSIFICATION	2.5447980855709383E-5	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999933519275415	WITHOUT_CLASSIFICATION	6.648072458582031E-6	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999528720004516	WITHOUT_CLASSIFICATION	4.7127999548389666E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999235307565308	WITHOUT_CLASSIFICATION	7.646924346908726E-5	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999603522056	WITHOUT_CLASSIFICATION	3.964779440011962E-5	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999714131023084	WITHOUT_CLASSIFICATION	2.858689769159783E-5	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999509988125121	WITHOUT_CLASSIFICATION	4.900118748778805E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999853928453716	WITHOUT_CLASSIFICATION	1.4607154628404567E-5	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999036548059482	WITHOUT_CLASSIFICATION	9.634519405182867E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999183080287055	WITHOUT_CLASSIFICATION	8.169197129440137E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999183080287055	WITHOUT_CLASSIFICATION	8.169197129440137E-5	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.999901514232864	WITHOUT_CLASSIFICATION	9.848576713601711E-5	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999703371061024	WITHOUT_CLASSIFICATION	2.9662893897629364E-5	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.999901514232864	WITHOUT_CLASSIFICATION	9.848576713601711E-5	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999829399987548	WITHOUT_CLASSIFICATION	1.7060001245296017E-5	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9974130526619909	WITHOUT_CLASSIFICATION	0.0025869473380090453	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990593742387438	WITHOUT_CLASSIFICATION	9.406257612560954E-4	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9969423605603805	WITHOUT_CLASSIFICATION	0.0030576394396195196	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999743919689589	WITHOUT_CLASSIFICATION	2.560803104108029E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999554564345626	WITHOUT_CLASSIFICATION	4.454356543741392E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999554564345626	WITHOUT_CLASSIFICATION	4.454356543741392E-5	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999859519703999	WITHOUT_CLASSIFICATION	1.4048029600208876E-5	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999859519703999	WITHOUT_CLASSIFICATION	1.4048029600208876E-5	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9998981613420294	WITHOUT_CLASSIFICATION	1.018386579706153E-4	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999077992845183	WITHOUT_CLASSIFICATION	9.220071548164754E-5	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999730709460405	WITHOUT_CLASSIFICATION	2.692905395956512E-5	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999220542263536	WITHOUT_CLASSIFICATION	7.794577364635335E-5	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999858687715201	WITHOUT_CLASSIFICATION	1.413122847993164E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999832015650223	WITHOUT_CLASSIFICATION	1.679843497773805E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999306254429067	WITHOUT_CLASSIFICATION	6.937455709339114E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999306254429067	WITHOUT_CLASSIFICATION	6.937455709339114E-5	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9996611243612551	WITHOUT_CLASSIFICATION	3.388756387449231E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999368259766018	WITHOUT_CLASSIFICATION	6.317402339808082E-5	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9979260355476084	WITHOUT_CLASSIFICATION	0.0020739644523916296	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9974635755030948	WITHOUT_CLASSIFICATION	0.002536424496905193	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9978345625320221	WITHOUT_CLASSIFICATION	0.0021654374679779126	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9976750440812383	WITHOUT_CLASSIFICATION	0.0023249559187616606	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9969581590823761	WITHOUT_CLASSIFICATION	0.003041840917623895	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9969581590823761	WITHOUT_CLASSIFICATION	0.003041840917623895	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9970424337914688	WITHOUT_CLASSIFICATION	0.002957566208531218	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9970424337914688	WITHOUT_CLASSIFICATION	0.002957566208531218	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999036257229663	WITHOUT_CLASSIFICATION	9.63742770336498E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999036257229663	WITHOUT_CLASSIFICATION	9.63742770336498E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999421611533585	WITHOUT_CLASSIFICATION	5.78388466415322E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999421611533585	WITHOUT_CLASSIFICATION	5.78388466415322E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999306254429067	WITHOUT_CLASSIFICATION	6.937455709339114E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9976750440812383	WITHOUT_CLASSIFICATION	0.0023249559187616606	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9969581590823761	WITHOUT_CLASSIFICATION	0.003041840917623895	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9969581590823761	WITHOUT_CLASSIFICATION	0.003041840917623895	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9970424337914688	WITHOUT_CLASSIFICATION	0.002957566208531218	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999036257229663	WITHOUT_CLASSIFICATION	9.63742770336498E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999036257229663	WITHOUT_CLASSIFICATION	9.63742770336498E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999421611533585	WITHOUT_CLASSIFICATION	5.78388466415322E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999956268585471	WITHOUT_CLASSIFICATION	4.3731414528981655E-5	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999144615261609	WITHOUT_CLASSIFICATION	8.553847383898698E-5	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999279636126851	WITHOUT_CLASSIFICATION	7.203638731491313E-5	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999909073453283	WITHOUT_CLASSIFICATION	9.09265467171167E-6	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999347801299864	WITHOUT_CLASSIFICATION	6.521987001353898E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9969291609016183	WITHOUT_CLASSIFICATION	0.0030708390983817005	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999272002436467	WITHOUT_CLASSIFICATION	7.279975635335475E-5	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999789640755794	WITHOUT_CLASSIFICATION	2.1035924420707972E-5	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999804019861236	WITHOUT_CLASSIFICATION	1.9598013876406823E-5	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999913590669313	WITHOUT_CLASSIFICATION	8.640933068732769E-6	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999949820666787	WITHOUT_CLASSIFICATION	5.0179333212993746E-5	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999612026674098	WITHOUT_CLASSIFICATION	3.879733259004897E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999400225940874	WITHOUT_CLASSIFICATION	5.9977405912622936E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9969291609016183	WITHOUT_CLASSIFICATION	0.0030708390983817005	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999758584245678	WITHOUT_CLASSIFICATION	2.414157543217385E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999881345675766	WITHOUT_CLASSIFICATION	1.1865432423430826E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999881345675766	WITHOUT_CLASSIFICATION	1.1865432423430826E-5	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999828074065362	WITHOUT_CLASSIFICATION	1.7192593463769983E-5	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999970939311049	WITHOUT_CLASSIFICATION	2.9060688951103384E-5	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.999968107931919	WITHOUT_CLASSIFICATION	3.1892068080910056E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999325142085371	WITHOUT_CLASSIFICATION	6.748579146284865E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999325142085371	WITHOUT_CLASSIFICATION	6.748579146284865E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999920244712918	WITHOUT_CLASSIFICATION	7.975528708261283E-6	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999989083021116	WITHOUT_CLASSIFICATION	1.0916978883991989E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999989083021116	WITHOUT_CLASSIFICATION	1.0916978883991989E-5	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999782551645857	WITHOUT_CLASSIFICATION	2.174483541423636E-5	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999674606611093	WITHOUT_CLASSIFICATION	3.2539338890758305E-5	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.999961031406921	WITHOUT_CLASSIFICATION	3.8968593078992245E-5	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999028076710137	WITHOUT_CLASSIFICATION	9.719232898634031E-5	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9969617795192173	WITHOUT_CLASSIFICATION	0.0030382204807827516	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9969698860980809	WITHOUT_CLASSIFICATION	0.003030113901919205	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9883797368645799	WITHOUT_CLASSIFICATION	0.011620263135420198	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.999897738269184	WITHOUT_CLASSIFICATION	1.0226173081603944E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999602281025405	WITHOUT_CLASSIFICATION	3.9771897459418713E-5	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999696835226538	WITHOUT_CLASSIFICATION	3.031647734626102E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999904238960657	WITHOUT_CLASSIFICATION	9.576103934184116E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999275844633806	WITHOUT_CLASSIFICATION	7.241553661938268E-5	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999407571805806	WITHOUT_CLASSIFICATION	5.924281941931828E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999033730990028	WITHOUT_CLASSIFICATION	9.662690099718232E-5	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9969803618003844	WITHOUT_CLASSIFICATION	0.0030196381996155913	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999035047983268	WITHOUT_CLASSIFICATION	9.649520167319062E-5	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9998981555098789	WITHOUT_CLASSIFICATION	1.0184449012101549E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999026732647802	WITHOUT_CLASSIFICATION	9.732673521987737E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999031201543813	WITHOUT_CLASSIFICATION	9.687984561869149E-5	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999964746304634	WITHOUT_CLASSIFICATION	3.525369536609914E-5	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999363404824151	WITHOUT_CLASSIFICATION	6.365951758498172E-5	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999348468267106	WITHOUT_CLASSIFICATION	6.515317328929408E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9969196363644651	WITHOUT_CLASSIFICATION	0.003080363635534868	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9969698860980809	WITHOUT_CLASSIFICATION	0.003030113901919205	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999031201543813	WITHOUT_CLASSIFICATION	9.687984561869149E-5	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999363404824151	WITHOUT_CLASSIFICATION	6.365951758498172E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9969196363644651	WITHOUT_CLASSIFICATION	0.003080363635534868	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999309469841905	WITHOUT_CLASSIFICATION	6.90530158094319E-5	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999323528019164	WITHOUT_CLASSIFICATION	6.764719808363212E-5	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999076059024483	WITHOUT_CLASSIFICATION	9.239409755166023E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999073272979715	WITHOUT_CLASSIFICATION	9.267270202860026E-5	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999068644165847	WITHOUT_CLASSIFICATION	9.313558341534197E-5	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999539189813225	WITHOUT_CLASSIFICATION	4.608101867755322E-5	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999191174757098	WITHOUT_CLASSIFICATION	8.088252429014376E-5	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999899448779209	WITHOUT_CLASSIFICATION	1.005512207912282E-5	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999327907105487	WITHOUT_CLASSIFICATION	6.72092894512475E-5	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999524273446143	WITHOUT_CLASSIFICATION	4.757265538560798E-5	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999626698998089	WITHOUT_CLASSIFICATION	3.7330100191200764E-5	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999561253926404	WITHOUT_CLASSIFICATION	4.387460735946394E-5	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999616459382016	WITHOUT_CLASSIFICATION	3.835406179837255E-5	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.99997013041434	WITHOUT_CLASSIFICATION	2.9869585659889903E-5	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999027993322236	WITHOUT_CLASSIFICATION	9.720066777650772E-5	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9980108836012174	WITHOUT_CLASSIFICATION	0.0019891163987825395	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999544105667739	WITHOUT_CLASSIFICATION	4.5589433226069405E-5	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999031201543813	WITHOUT_CLASSIFICATION	9.687984561869149E-5	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999241731737879	WITHOUT_CLASSIFICATION	7.582682621210409E-5	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999482137451305	WITHOUT_CLASSIFICATION	5.178625486939796E-5	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999650601619273	WITHOUT_CLASSIFICATION	3.493983807273535E-5	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999451023022949	WITHOUT_CLASSIFICATION	5.489769770513535E-5	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999129167969855	WITHOUT_CLASSIFICATION	8.708320301464574E-5	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999575972911456	WITHOUT_CLASSIFICATION	4.2402708854230134E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999906410431488	WITHOUT_CLASSIFICATION	9.35895685118491E-6	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999809668859435	WITHOUT_CLASSIFICATION	1.9033114056463495E-5	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999206598658992	WITHOUT_CLASSIFICATION	7.934013410083468E-5	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999025130712592	WITHOUT_CLASSIFICATION	9.748692874090347E-5	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998963631104725	WITHOUT_CLASSIFICATION	1.0363688952755752E-4	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9983487497336591	WITHOUT_CLASSIFICATION	0.0016512502663409549	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999496170721246	WITHOUT_CLASSIFICATION	5.038292787533803E-5	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999651548167369	WITHOUT_CLASSIFICATION	3.484518326308951E-5	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999497042086212	WITHOUT_CLASSIFICATION	5.029579137893084E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9999092576353446	WITHOUT_CLASSIFICATION	9.074236465542064E-5	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999080481160132	WITHOUT_CLASSIFICATION	9.195188398682854E-5	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999383836536274	WITHOUT_CLASSIFICATION	6.161634637253057E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999106805066734	WITHOUT_CLASSIFICATION	8.931949332659622E-5	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999987896817338	WITHOUT_CLASSIFICATION	1.210318266130138E-6	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999824485737907	WITHOUT_CLASSIFICATION	1.7551426209299724E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999602712461112	WITHOUT_CLASSIFICATION	3.972875388881702E-5	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999156454313742	WITHOUT_CLASSIFICATION	8.435456862572009E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999115851279679	WITHOUT_CLASSIFICATION	8.841487203212641E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999115851279679	WITHOUT_CLASSIFICATION	8.841487203212641E-5	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999027572448973	WITHOUT_CLASSIFICATION	9.72427551027267E-5	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999931790303357	WITHOUT_CLASSIFICATION	6.820969664291622E-5	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999768590330631	WITHOUT_CLASSIFICATION	2.3140966936791254E-5	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999502533772703	WITHOUT_CLASSIFICATION	4.9746622729640065E-5	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999961335259003	WITHOUT_CLASSIFICATION	3.8664740997038605E-5	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999529826011084	WITHOUT_CLASSIFICATION	4.701739889153203E-5	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999116211343546	WITHOUT_CLASSIFICATION	8.837886564543948E-5	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999924542978726	WITHOUT_CLASSIFICATION	7.54570212746198E-6	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999588915487057	WITHOUT_CLASSIFICATION	4.1108451294421816E-5	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999099009134902	WITHOUT_CLASSIFICATION	9.009908650985933E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999127355304872	WITHOUT_CLASSIFICATION	8.726446951287294E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.99994057487	WITHOUT_CLASSIFICATION	5.942512999994702E-5	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999803059639364	WITHOUT_CLASSIFICATION	1.9694036063560214E-5	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999649812767697	WITHOUT_CLASSIFICATION	3.5018723230369956E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999929572268174	WITHOUT_CLASSIFICATION	7.04277318259598E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999406959355253	WITHOUT_CLASSIFICATION	5.930406447472724E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999932756058207	WITHOUT_CLASSIFICATION	6.724394179286325E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999785867231489	WITHOUT_CLASSIFICATION	2.1413276851130972E-5	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999610322886048	WITHOUT_CLASSIFICATION	3.8967711395218166E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999511303156351	WITHOUT_CLASSIFICATION	4.886968436485141E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9975090560913389	WITHOUT_CLASSIFICATION	0.0024909439086611552	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9975090560913389	WITHOUT_CLASSIFICATION	0.0024909439086611552	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999048390461328	WITHOUT_CLASSIFICATION	9.51609538672042E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999048390461328	WITHOUT_CLASSIFICATION	9.51609538672042E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999602712461112	WITHOUT_CLASSIFICATION	3.972875388881702E-5	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999178723335447	WITHOUT_CLASSIFICATION	8.212766645532278E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999253319571489	WITHOUT_CLASSIFICATION	7.466804285104508E-5	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999175086860772	WITHOUT_CLASSIFICATION	8.249131392286724E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999499409735307	WITHOUT_CLASSIFICATION	5.005902646921198E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999253319571489	WITHOUT_CLASSIFICATION	7.466804285104508E-5	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999175086860772	WITHOUT_CLASSIFICATION	8.249131392286724E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999668599747858	WITHOUT_CLASSIFICATION	3.3140025214158755E-5	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999652480870828	WITHOUT_CLASSIFICATION	3.4751912917232756E-5	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.999979950644088	WITHOUT_CLASSIFICATION	2.0049355912016456E-5	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999737744513666	WITHOUT_CLASSIFICATION	2.6225548633471838E-5	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.999990087172426	WITHOUT_CLASSIFICATION	9.912827574020964E-6	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999840223467411	WITHOUT_CLASSIFICATION	1.5977653258853214E-5	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999354707513644	WITHOUT_CLASSIFICATION	6.452924863563963E-5	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999290076965429	WITHOUT_CLASSIFICATION	7.099230345702588E-5	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999839221753345	WITHOUT_CLASSIFICATION	1.6077824665505865E-5	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999906320260069	WITHOUT_CLASSIFICATION	9.367973993221105E-6	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999905850945089	WITHOUT_CLASSIFICATION	9.414905491183516E-6	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999835004520337	WITHOUT_CLASSIFICATION	1.6499547966341125E-5	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999427017527327	WITHOUT_CLASSIFICATION	5.729824726716859E-5	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9998921538180343	WITHOUT_CLASSIFICATION	1.0784618196559954E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999499409735307	WITHOUT_CLASSIFICATION	5.005902646921198E-5	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.999912885170029	WITHOUT_CLASSIFICATION	8.711482997096172E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999222576808842	WITHOUT_CLASSIFICATION	7.774231911573356E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999222576808842	WITHOUT_CLASSIFICATION	7.774231911573356E-5	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999773180104926	WITHOUT_CLASSIFICATION	2.268198950743794E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999668599747858	WITHOUT_CLASSIFICATION	3.3140025214158755E-5	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999610658707401	WITHOUT_CLASSIFICATION	3.8934129259900327E-5	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999601769958218	WITHOUT_CLASSIFICATION	3.982300417817926E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9971604134895611	WITHOUT_CLASSIFICATION	0.002839586510438936	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999686003161656	WITHOUT_CLASSIFICATION	3.1399683834388016E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998774740096213	WITHOUT_CLASSIFICATION	1.2252599037876967E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999668599747858	WITHOUT_CLASSIFICATION	3.3140025214158755E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999686003161656	WITHOUT_CLASSIFICATION	3.1399683834388016E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998774740096213	WITHOUT_CLASSIFICATION	1.2252599037876967E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999618708656189	WITHOUT_CLASSIFICATION	3.8129134381025507E-5	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999087515375116	WITHOUT_CLASSIFICATION	9.124846248847643E-5	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.99999370358307	WITHOUT_CLASSIFICATION	6.296416929954627E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999668599747858	WITHOUT_CLASSIFICATION	3.3140025214158755E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999668599747858	WITHOUT_CLASSIFICATION	3.3140025214158755E-5	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999248253556148	WITHOUT_CLASSIFICATION	7.517464438515253E-5	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999224601508462	WITHOUT_CLASSIFICATION	7.753984915381965E-5	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999498275121355	WITHOUT_CLASSIFICATION	5.017248786462005E-5	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999765810333451	WITHOUT_CLASSIFICATION	2.3418966654809168E-5	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999476184517199	WITHOUT_CLASSIFICATION	5.23815482801129E-5	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999969969510711	WITHOUT_CLASSIFICATION	3.0030489288838167E-5	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999551008931687	WITHOUT_CLASSIFICATION	4.4899106831287284E-5	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999556794941746	WITHOUT_CLASSIFICATION	4.432050582532097E-5	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999675726790964	WITHOUT_CLASSIFICATION	3.242732090365391E-5	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999278479353002	WITHOUT_CLASSIFICATION	7.215206469981794E-5	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999850877508145	WITHOUT_CLASSIFICATION	1.4912249185392105E-5	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999350530275238	WITHOUT_CLASSIFICATION	6.494697247617694E-5	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999825863112674	WITHOUT_CLASSIFICATION	1.741368873262434E-5	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9998912711663589	WITHOUT_CLASSIFICATION	1.0872883364107832E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999052339646386	WITHOUT_CLASSIFICATION	9.476603536140577E-5	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999872827981969	WITHOUT_CLASSIFICATION	1.271720180313179E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999637558377857	WITHOUT_CLASSIFICATION	3.624416221422422E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999766447538175	WITHOUT_CLASSIFICATION	2.3355246182424065E-5	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999298894136331	WITHOUT_CLASSIFICATION	7.011058636688246E-5	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999510518673348	WITHOUT_CLASSIFICATION	4.894813266514765E-5	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.999914530150129	WITHOUT_CLASSIFICATION	8.546984987105601E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9999071810627462	WITHOUT_CLASSIFICATION	9.281893725376096E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9999071810627462	WITHOUT_CLASSIFICATION	9.281893725376096E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999637558377857	WITHOUT_CLASSIFICATION	3.624416221422422E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999643410159593	WITHOUT_CLASSIFICATION	3.565898404061059E-5	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999816126402042	WITHOUT_CLASSIFICATION	1.8387359795816277E-5	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9998958870611622	WITHOUT_CLASSIFICATION	1.0411293883780937E-4	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999490852413676	WITHOUT_CLASSIFICATION	5.091475863245142E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999916084868448	WITHOUT_CLASSIFICATION	8.391513155230182E-6	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999887477559444	WITHOUT_CLASSIFICATION	1.125224405561901E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999851871585063	WITHOUT_CLASSIFICATION	1.4812841493662232E-5	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999055409636534	WITHOUT_CLASSIFICATION	9.445903634665127E-5	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999930739160445	WITHOUT_CLASSIFICATION	6.926083955421991E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999422826356251	WITHOUT_CLASSIFICATION	5.7717364374788734E-5	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9998332116983026	WITHOUT_CLASSIFICATION	1.667883016973607E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999574219245883	WITHOUT_CLASSIFICATION	4.257807541174699E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999749306801523	WITHOUT_CLASSIFICATION	2.5069319847677532E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999091869686821	WITHOUT_CLASSIFICATION	9.081303131780947E-5	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999895008059075	WITHOUT_CLASSIFICATION	1.0499194092479753E-5	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999982957401678	WITHOUT_CLASSIFICATION	1.704259832204548E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999362013734667	WITHOUT_CLASSIFICATION	6.379862653328883E-5	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999843093535131	WITHOUT_CLASSIFICATION	1.5690646486852523E-5	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999014590467113	WITHOUT_CLASSIFICATION	9.854095328863466E-5	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999953614126369	WITHOUT_CLASSIFICATION	4.638587363095583E-5	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999863995609912	WITHOUT_CLASSIFICATION	1.3600439008823459E-5	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999477551093557	WITHOUT_CLASSIFICATION	5.224489064414649E-5	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999842123153642	WITHOUT_CLASSIFICATION	1.5787684635757523E-5	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997939904823591	WITHOUT_CLASSIFICATION	2.0600951764084837E-4	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997337566318342	WITHOUT_CLASSIFICATION	2.6624336816580805E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999817767488815	WITHOUT_CLASSIFICATION	1.8223251118503432E-4	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999369797215214	WITHOUT_CLASSIFICATION	6.30202784785104E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999776389239763	WITHOUT_CLASSIFICATION	2.2361076023690843E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998146864595252	WITHOUT_CLASSIFICATION	1.853135404748101E-4	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997747587740119	WITHOUT_CLASSIFICATION	2.2524122598809498E-4	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998120751801083	WITHOUT_CLASSIFICATION	1.8792481989161745E-4	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.999930156249429	WITHOUT_CLASSIFICATION	6.984375057088882E-5	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9998751802409264	WITHOUT_CLASSIFICATION	1.248197590736822E-4	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998576349148169	WITHOUT_CLASSIFICATION	1.4236508518299028E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998756298459277	WITHOUT_CLASSIFICATION	1.2437015407239018E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998479161439418	WITHOUT_CLASSIFICATION	1.5208385605832277E-4	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998859059322879	WITHOUT_CLASSIFICATION	1.1409406771216045E-4	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998370532095844	WITHOUT_CLASSIFICATION	1.629467904155214E-4	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997764196585164	WITHOUT_CLASSIFICATION	2.2358034148368258E-4	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998040906349351	WITHOUT_CLASSIFICATION	1.9590936506484546E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997746717689473	WITHOUT_CLASSIFICATION	2.2532823105267098E-4	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999412380766235	WITHOUT_CLASSIFICATION	5.8761923376542656E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999945109022431	WITHOUT_CLASSIFICATION	5.489097756907125E-5	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999165826679147	WITHOUT_CLASSIFICATION	8.341733208528599E-5	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999366736798833	WITHOUT_CLASSIFICATION	6.33263201166852E-5	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999866207633928	WITHOUT_CLASSIFICATION	1.33792366073109E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999173071283128	WITHOUT_CLASSIFICATION	8.269287168712327E-5	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999042003248798	WITHOUT_CLASSIFICATION	9.579967512014404E-5	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999521567949544	WITHOUT_CLASSIFICATION	4.784320504561639E-5	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999531888193569	WITHOUT_CLASSIFICATION	4.681118064305505E-5	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999069263488422	WITHOUT_CLASSIFICATION	9.307365115790625E-5	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999045814739608	WITHOUT_CLASSIFICATION	9.541852603923146E-5	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999901997183218	WITHOUT_CLASSIFICATION	9.800281678187727E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999422826356251	WITHOUT_CLASSIFICATION	5.7717364374788734E-5	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998965641616406	WITHOUT_CLASSIFICATION	1.03435838359416E-4	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999030032450853	WITHOUT_CLASSIFICATION	9.699675491470307E-5	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999786482615388	WITHOUT_CLASSIFICATION	2.1351738461198487E-5	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999410037222941	WITHOUT_CLASSIFICATION	5.8996277705831206E-5	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999354906021651	WITHOUT_CLASSIFICATION	6.450939783492825E-5	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999955075320142	WITHOUT_CLASSIFICATION	4.492467985815171E-6	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999315837827104	WITHOUT_CLASSIFICATION	6.841621728955406E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999622665729908	WITHOUT_CLASSIFICATION	3.773342700924052E-5	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999362535462633	WITHOUT_CLASSIFICATION	6.374645373674052E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999301102902063	WITHOUT_CLASSIFICATION	6.988970979363883E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9988487453786896	WITHOUT_CLASSIFICATION	0.0011512546213102992	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999355615150789	WITHOUT_CLASSIFICATION	6.443848492110411E-5	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999553340865911	WITHOUT_CLASSIFICATION	4.466591340894149E-5	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999564036507045	WITHOUT_CLASSIFICATION	4.359634929539623E-5	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999298517828576	WITHOUT_CLASSIFICATION	7.014821714234541E-5	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999669102179299	WITHOUT_CLASSIFICATION	3.3089782070082734E-5	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999539571941634	WITHOUT_CLASSIFICATION	4.6042805836615505E-5	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999417103208872	WITHOUT_CLASSIFICATION	5.828967911281702E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999651723756526	WITHOUT_CLASSIFICATION	3.4827624347322815E-5	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999219876546622	WITHOUT_CLASSIFICATION	7.801234533776735E-5	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9997037329381229	WITHOUT_CLASSIFICATION	2.962670618772233E-4	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999585267250855	WITHOUT_CLASSIFICATION	4.147327491467452E-5	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999408815341874	WITHOUT_CLASSIFICATION	5.911846581265591E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999422826356251	WITHOUT_CLASSIFICATION	5.7717364374788734E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999173071283128	WITHOUT_CLASSIFICATION	8.269287168712327E-5	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999735281906286	WITHOUT_CLASSIFICATION	2.647180937134987E-5	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999833999008569	WITHOUT_CLASSIFICATION	1.660009914306105E-5	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9998742553775042	WITHOUT_CLASSIFICATION	1.257446224956931E-4	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999366736798833	WITHOUT_CLASSIFICATION	6.33263201166852E-5	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999933581683441	WITHOUT_CLASSIFICATION	6.641831655899343E-5	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.999916603206224	WITHOUT_CLASSIFICATION	8.339679377603106E-5	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999168068929054	WITHOUT_CLASSIFICATION	8.319310709459503E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999336225184079	WITHOUT_CLASSIFICATION	6.637748159211028E-5	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999218811041858	WITHOUT_CLASSIFICATION	7.811889581430888E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999465510282897	WITHOUT_CLASSIFICATION	5.344897171044554E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999271234824438	WITHOUT_CLASSIFICATION	7.287651755618305E-5	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999357055367121	WITHOUT_CLASSIFICATION	6.42944632878761E-5	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999972041844312	WITHOUT_CLASSIFICATION	2.7958155688054512E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999422826356251	WITHOUT_CLASSIFICATION	5.7717364374788734E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999422826356251	WITHOUT_CLASSIFICATION	5.7717364374788734E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999364754147074	WITHOUT_CLASSIFICATION	6.352458529257302E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9998322160213835	WITHOUT_CLASSIFICATION	1.6778397861647926E-4	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999473034469323	WITHOUT_CLASSIFICATION	5.269655306769163E-5	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999126382888889	WITHOUT_CLASSIFICATION	8.736171111121301E-5	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999395248976726	WITHOUT_CLASSIFICATION	6.0475102327388675E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.99996088682368	WITHOUT_CLASSIFICATION	3.911317631989248E-5	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999551842235758	WITHOUT_CLASSIFICATION	4.4815776424204854E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999422826356251	WITHOUT_CLASSIFICATION	5.7717364374788734E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999682820102558	WITHOUT_CLASSIFICATION	3.171798974410019E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999619898183038	WITHOUT_CLASSIFICATION	3.8010181696304666E-5	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999569998674828	WITHOUT_CLASSIFICATION	4.300013251726979E-5	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999272161244266	WITHOUT_CLASSIFICATION	7.278387557334181E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999316778259161	WITHOUT_CLASSIFICATION	6.83221740839582E-5	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999359662504622	WITHOUT_CLASSIFICATION	6.403374953768303E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999123853984415	WITHOUT_CLASSIFICATION	8.761460155839471E-5	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999070152401327	WITHOUT_CLASSIFICATION	9.298475986733072E-5	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999385897758665	WITHOUT_CLASSIFICATION	6.1410224133504E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999173071283128	WITHOUT_CLASSIFICATION	8.269287168712327E-5	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.999951585416031	WITHOUT_CLASSIFICATION	4.84145839690066E-5	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999947737806107	WITHOUT_CLASSIFICATION	5.226219389272037E-6	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999863403504488	WITHOUT_CLASSIFICATION	1.3659649551262875E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999173071283128	WITHOUT_CLASSIFICATION	8.269287168712327E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999421787973464	WITHOUT_CLASSIFICATION	5.7821202653601136E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999682820102558	WITHOUT_CLASSIFICATION	3.171798974410019E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999444934848422	WITHOUT_CLASSIFICATION	5.550651515786539E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999422826356251	WITHOUT_CLASSIFICATION	5.7717364374788734E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.99993868165508	WITHOUT_CLASSIFICATION	6.131834491989568E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999422826356251	WITHOUT_CLASSIFICATION	5.7717364374788734E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999862995959626	WITHOUT_CLASSIFICATION	1.3700404037403094E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999465510282897	WITHOUT_CLASSIFICATION	5.344897171044554E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999271234824438	WITHOUT_CLASSIFICATION	7.287651755618305E-5	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999357055367121	WITHOUT_CLASSIFICATION	6.42944632878761E-5	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999943055906837	WITHOUT_CLASSIFICATION	5.694409316307189E-6	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999678406333907	WITHOUT_CLASSIFICATION	3.21593666093663E-5	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999809380614542	WITHOUT_CLASSIFICATION	1.9061938545786996E-5	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999859651256062	WITHOUT_CLASSIFICATION	1.4034874393887758E-5	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999875816802701	WITHOUT_CLASSIFICATION	1.2418319729761767E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999422826356251	WITHOUT_CLASSIFICATION	5.7717364374788734E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999173071283128	WITHOUT_CLASSIFICATION	8.269287168712327E-5	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999972041844312	WITHOUT_CLASSIFICATION	2.7958155688054512E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999364754147074	WITHOUT_CLASSIFICATION	6.352458529257302E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999513356749444	WITHOUT_CLASSIFICATION	4.866432505560818E-5	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999439684587551	WITHOUT_CLASSIFICATION	5.6031541244837014E-5	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999656398245664	WITHOUT_CLASSIFICATION	3.4360175433528886E-5	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999671287678545	WITHOUT_CLASSIFICATION	3.287123214542774E-5	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999220125511132	WITHOUT_CLASSIFICATION	7.798744888682995E-5	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999517276860412	WITHOUT_CLASSIFICATION	4.827231395877068E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997746717689473	WITHOUT_CLASSIFICATION	2.2532823105267098E-4	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999768884203482	WITHOUT_CLASSIFICATION	2.311157965188166E-5	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999006600277467	WITHOUT_CLASSIFICATION	9.933997225336552E-5	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9998966504371003	WITHOUT_CLASSIFICATION	1.0334956289972614E-4	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999815860104904	WITHOUT_CLASSIFICATION	1.8413989509675557E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999077784921921	WITHOUT_CLASSIFICATION	9.222150780775401E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999776389239763	WITHOUT_CLASSIFICATION	2.2361076023690843E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998146864595252	WITHOUT_CLASSIFICATION	1.853135404748101E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998756298459277	WITHOUT_CLASSIFICATION	1.2437015407239018E-4	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999077784921921	WITHOUT_CLASSIFICATION	9.222150780775401E-5	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999751394914017	WITHOUT_CLASSIFICATION	2.4860508598400377E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999216784353998	WITHOUT_CLASSIFICATION	7.832156460015958E-5	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997254503622088	WITHOUT_CLASSIFICATION	2.7454963779115416E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997750464960078	WITHOUT_CLASSIFICATION	2.2495350399223083E-4	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999643680482634	WITHOUT_CLASSIFICATION	3.5631951736637984E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999422826356251	WITHOUT_CLASSIFICATION	5.7717364374788734E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999422826356251	WITHOUT_CLASSIFICATION	5.7717364374788734E-5	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999072509267434	WITHOUT_CLASSIFICATION	9.274907325668888E-5	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998479161439418	WITHOUT_CLASSIFICATION	1.5208385605832277E-4	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997764196585164	WITHOUT_CLASSIFICATION	2.2358034148368258E-4	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999651723756526	WITHOUT_CLASSIFICATION	3.4827624347322815E-5	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999909541050837	WITHOUT_CLASSIFICATION	9.045894916279317E-6	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999792529134743	WITHOUT_CLASSIFICATION	2.0747086525702527E-5	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999885609024955	WITHOUT_CLASSIFICATION	1.143909750447682E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999821299654186	WITHOUT_CLASSIFICATION	1.7870034581411733E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999901763344217	WITHOUT_CLASSIFICATION	9.823665578356329E-6	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999499969220389	WITHOUT_CLASSIFICATION	5.000307796114558E-5	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999228470179674	WITHOUT_CLASSIFICATION	7.715298203260192E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999051661634842	WITHOUT_CLASSIFICATION	9.483383651582233E-5	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999930739160445	WITHOUT_CLASSIFICATION	6.926083955421991E-6	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9989150669734501	WITHOUT_CLASSIFICATION	0.0010849330265499393	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999777701882229	WITHOUT_CLASSIFICATION	2.222981177707848E-5	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999981680346118	WITHOUT_CLASSIFICATION	1.8319653881943727E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999971274313056	WITHOUT_CLASSIFICATION	2.8725686943938257E-5	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9998884608851732	WITHOUT_CLASSIFICATION	1.1153911482670247E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999289598941113	WITHOUT_CLASSIFICATION	7.104010588865595E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999451673121764	WITHOUT_CLASSIFICATION	5.483268782347219E-5	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992500869051714	WITHOUT_CLASSIFICATION	7.499130948285858E-4	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999837055251026	WITHOUT_CLASSIFICATION	1.6294474897421582E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999260815452183	WITHOUT_CLASSIFICATION	7.391845478168046E-5	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998956085014845	WITHOUT_CLASSIFICATION	1.0439149851549508E-4	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999781354645624	WITHOUT_CLASSIFICATION	2.186453543767921E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999791962217975	WITHOUT_CLASSIFICATION	2.0803778202425657E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999685914785689	WITHOUT_CLASSIFICATION	3.1408521431083954E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999822640245424	WITHOUT_CLASSIFICATION	1.773597545761478E-5	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999316837097083	WITHOUT_CLASSIFICATION	6.831629029166664E-5	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999441047762654	WITHOUT_CLASSIFICATION	5.589522373464261E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999745535015592	WITHOUT_CLASSIFICATION	2.5446498440918514E-5	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999585549982754	WITHOUT_CLASSIFICATION	4.1445001724718174E-5	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999732612415503	WITHOUT_CLASSIFICATION	2.6738758449722596E-5	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999707710291637	WITHOUT_CLASSIFICATION	2.9228970836306334E-5	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999802724287761	WITHOUT_CLASSIFICATION	1.972757122394159E-5	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999989253915752	WITHOUT_CLASSIFICATION	1.0746084247638667E-6	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999787760214547	WITHOUT_CLASSIFICATION	2.122397854533086E-5	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999302413553067	WITHOUT_CLASSIFICATION	6.97586446932286E-5	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999079511742078	WITHOUT_CLASSIFICATION	9.204882579214819E-5	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999079475028897	WITHOUT_CLASSIFICATION	9.205249711034995E-5	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999679881852237	WITHOUT_CLASSIFICATION	3.201181477619271E-5	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999618031469717	WITHOUT_CLASSIFICATION	3.819685302834787E-5	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999120714659593	WITHOUT_CLASSIFICATION	8.792853404069286E-5	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999487056125235	WITHOUT_CLASSIFICATION	5.129438747655275E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999942988086543	WITHOUT_CLASSIFICATION	5.701191345704212E-6	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999740296680931	WITHOUT_CLASSIFICATION	2.5970331906834563E-5	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999918062647792	WITHOUT_CLASSIFICATION	8.19373522064443E-6	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999890475828135	WITHOUT_CLASSIFICATION	1.095241718658702E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999899312952854	WITHOUT_CLASSIFICATION	1.0068704714741077E-5	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999959275885941	WITHOUT_CLASSIFICATION	4.07241140589985E-6	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999859989684736	WITHOUT_CLASSIFICATION	1.4001031526402723E-5	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.99999857255586	WITHOUT_CLASSIFICATION	1.427444139958797E-6	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999951166236025	WITHOUT_CLASSIFICATION	4.8833763974209546E-6	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9998841821324083	WITHOUT_CLASSIFICATION	1.1581786759165004E-4	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999585542610564	WITHOUT_CLASSIFICATION	4.144573894369078E-5	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999569911596677	WITHOUT_CLASSIFICATION	4.30088403322811E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999664887190156	WITHOUT_CLASSIFICATION	3.351128098438349E-5	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999683743592716	WITHOUT_CLASSIFICATION	3.162564072840488E-5	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999026315197619	WITHOUT_CLASSIFICATION	9.736848023812267E-5	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999520581441579	WITHOUT_CLASSIFICATION	4.794185584210329E-5	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999592354852305	WITHOUT_CLASSIFICATION	4.076451476954979E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999916832279906	WITHOUT_CLASSIFICATION	8.316772009405188E-5	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999591896744601	WITHOUT_CLASSIFICATION	4.0810325539891977E-5	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999661463597642	WITHOUT_CLASSIFICATION	3.385364023582956E-5	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999682826646031	WITHOUT_CLASSIFICATION	3.171733539688069E-5	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999672478575781	WITHOUT_CLASSIFICATION	3.275214242196946E-5	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999992602803528	WITHOUT_CLASSIFICATION	7.397196471956739E-6	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999997360296445	WITHOUT_CLASSIFICATION	2.6397035549967273E-6	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999878917679403	WITHOUT_CLASSIFICATION	1.2108232059664538E-5	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999020698250005	WITHOUT_CLASSIFICATION	9.793017499952386E-5	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999212809681439	WITHOUT_CLASSIFICATION	7.871903185605476E-5	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999367958711683	WITHOUT_CLASSIFICATION	6.320412883174581E-5	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999713658029014	WITHOUT_CLASSIFICATION	2.8634197098542593E-5	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999350256797805	WITHOUT_CLASSIFICATION	6.497432021950509E-5	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999377096404276	WITHOUT_CLASSIFICATION	6.229035957237917E-5	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999030927243857	WITHOUT_CLASSIFICATION	9.690727561427023E-5	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999333010692644	WITHOUT_CLASSIFICATION	6.669893073559632E-5	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999326226412834	WITHOUT_CLASSIFICATION	6.737735871665747E-5	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999491925797529	WITHOUT_CLASSIFICATION	5.0807420247109976E-5	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.999984166138141	WITHOUT_CLASSIFICATION	1.5833861859021473E-5	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999681128695002	WITHOUT_CLASSIFICATION	3.188713049990766E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999476208294942	WITHOUT_CLASSIFICATION	5.237917050576301E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999477014323063	WITHOUT_CLASSIFICATION	5.2298567693698345E-5	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999819304516225	WITHOUT_CLASSIFICATION	1.8069548377479523E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999712043474432	WITHOUT_CLASSIFICATION	2.879565255669761E-5	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.99997977628081	WITHOUT_CLASSIFICATION	2.0223719189948104E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999716821835044	WITHOUT_CLASSIFICATION	2.831781649566842E-5	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.999963069383181	WITHOUT_CLASSIFICATION	3.6930616819065666E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9969189038002201	WITHOUT_CLASSIFICATION	0.0030810961997799766	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999661700971416	WITHOUT_CLASSIFICATION	3.382990285832404E-5	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.999975669628552	WITHOUT_CLASSIFICATION	2.4330371447928018E-5	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999990810967618	WITHOUT_CLASSIFICATION	9.189032381021319E-7	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999100287270477	WITHOUT_CLASSIFICATION	8.99712729522172E-5	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998972046815855	WITHOUT_CLASSIFICATION	1.0279531841439233E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999278012687524	WITHOUT_CLASSIFICATION	7.219873124759388E-5	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999359363858928	WITHOUT_CLASSIFICATION	6.406361410714826E-5	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998967787728751	WITHOUT_CLASSIFICATION	1.0322122712493445E-4	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999151372911651	WITHOUT_CLASSIFICATION	8.48627088349573E-5	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999262660393885	WITHOUT_CLASSIFICATION	7.373396061152116E-5	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999192494085196	WITHOUT_CLASSIFICATION	8.075059148038551E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999034075483682	WITHOUT_CLASSIFICATION	9.659245163179399E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999039307879266	WITHOUT_CLASSIFICATION	9.606921207341889E-5	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999899844369686	WITHOUT_CLASSIFICATION	1.0015563031441172E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999203807687153	WITHOUT_CLASSIFICATION	7.961923128483763E-5	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.999913015245241	WITHOUT_CLASSIFICATION	8.698475475902318E-5	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999507994664629	WITHOUT_CLASSIFICATION	4.9200533537162005E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999203807687153	WITHOUT_CLASSIFICATION	7.961923128483763E-5	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999564684643824	WITHOUT_CLASSIFICATION	4.3531535617607586E-5	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999406370418329	WITHOUT_CLASSIFICATION	5.936295816712766E-5	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998858912780295	WITHOUT_CLASSIFICATION	1.1410872197053617E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9997836782214096	WITHOUT_CLASSIFICATION	2.163217785904855E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999693876043093	WITHOUT_CLASSIFICATION	3.061239569067526E-5	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999679409613074	WITHOUT_CLASSIFICATION	3.205903869269138E-5	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999087288665309	WITHOUT_CLASSIFICATION	9.127113346913601E-5	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999944268326935	WITHOUT_CLASSIFICATION	5.573167306517932E-5	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999107305974225	WITHOUT_CLASSIFICATION	8.926940257747369E-5	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999089159984212	WITHOUT_CLASSIFICATION	9.108400157873988E-5	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999788214934424	WITHOUT_CLASSIFICATION	2.1178506557569016E-5	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999837866971543	WITHOUT_CLASSIFICATION	1.6213302845775098E-5	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9924324096340833	WITHOUT_CLASSIFICATION	0.007567590365916712	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999984601879558	WITHOUT_CLASSIFICATION	1.5398120441931618E-6	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999860577766346	WITHOUT_CLASSIFICATION	1.3942223365472753E-5	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999650298369799	WITHOUT_CLASSIFICATION	3.4970163020184014E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999153502469615	WITHOUT_CLASSIFICATION	8.464975303848963E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999153502469615	WITHOUT_CLASSIFICATION	8.464975303848963E-5	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999830188697466	WITHOUT_CLASSIFICATION	1.698113025333291E-5	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9999283014046199	WITHOUT_CLASSIFICATION	7.169859538008859E-5	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999313277713766	WITHOUT_CLASSIFICATION	6.867222862341605E-5	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.99990442475358	WITHOUT_CLASSIFICATION	9.557524641997707E-5	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999587451308845	WITHOUT_CLASSIFICATION	4.1254869115564485E-5	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999702002717973	WITHOUT_CLASSIFICATION	2.9799728202780123E-5	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999214147775395	WITHOUT_CLASSIFICATION	7.858522246052581E-5	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999907166661494	WITHOUT_CLASSIFICATION	9.283333850621533E-6	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999364948546183	WITHOUT_CLASSIFICATION	6.350514538169042E-5	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999792134158293	WITHOUT_CLASSIFICATION	2.078658417077937E-5	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999819961161118	WITHOUT_CLASSIFICATION	1.8003883888187224E-5	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999793903041468	WITHOUT_CLASSIFICATION	2.0609695853210724E-5	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999171322692779	WITHOUT_CLASSIFICATION	8.286773072209585E-5	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999640655183726	WITHOUT_CLASSIFICATION	3.593448162751898E-5	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999908705228143	WITHOUT_CLASSIFICATION	9.129477185766133E-6	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999289598941113	WITHOUT_CLASSIFICATION	7.104010588865595E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999786011894269	WITHOUT_CLASSIFICATION	2.1398810573101787E-5	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999919822066393	WITHOUT_CLASSIFICATION	8.017793360763904E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999527438367587	WITHOUT_CLASSIFICATION	4.725616324136641E-5	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999164845743539	WITHOUT_CLASSIFICATION	8.351542564604492E-5	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999730515584112	WITHOUT_CLASSIFICATION	2.6948441588673265E-5	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999041726439963	WITHOUT_CLASSIFICATION	9.582735600363848E-5	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999968390219293	WITHOUT_CLASSIFICATION	3.1609780706757436E-6	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999939991482885	WITHOUT_CLASSIFICATION	6.000851711583727E-6	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999603871545025	WITHOUT_CLASSIFICATION	3.961284549740619E-5	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999673779838814	WITHOUT_CLASSIFICATION	3.2622016118716984E-5	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999961892299503	WITHOUT_CLASSIFICATION	3.8107700496635623E-6	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999810972321516	WITHOUT_CLASSIFICATION	1.890276784840304E-5	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999929246112997	WITHOUT_CLASSIFICATION	7.075388700254831E-6	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999184925893188	WITHOUT_CLASSIFICATION	8.150741068121979E-5	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999624993048805	WITHOUT_CLASSIFICATION	3.750069511956303E-5	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999110965952653	WITHOUT_CLASSIFICATION	8.890340473459604E-5	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9969171182759657	WITHOUT_CLASSIFICATION	0.0030828817240343216	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999530830276478	WITHOUT_CLASSIFICATION	4.691697235212462E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999030237169775	WITHOUT_CLASSIFICATION	9.697628302256411E-5	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999860199425886	WITHOUT_CLASSIFICATION	1.3980057411372733E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999632776768297	WITHOUT_CLASSIFICATION	3.6722323170323176E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999044578092533	WITHOUT_CLASSIFICATION	9.554219074669687E-5	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999898509743695	WITHOUT_CLASSIFICATION	1.0149025630397223E-5	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999938182403713	WITHOUT_CLASSIFICATION	6.1817596287436E-6	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999740408752511	WITHOUT_CLASSIFICATION	2.5959124748936756E-5	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999781396805538	WITHOUT_CLASSIFICATION	2.1860319446192183E-5	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999851213099549	WITHOUT_CLASSIFICATION	1.4878690045084734E-5	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999606248571177	WITHOUT_CLASSIFICATION	3.937514288243169E-5	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999879303897754	WITHOUT_CLASSIFICATION	1.2069610224583648E-5	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999917608214457	WITHOUT_CLASSIFICATION	8.239178554200537E-6	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999256300087245	WITHOUT_CLASSIFICATION	7.436999127559304E-5	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999469985361125	WITHOUT_CLASSIFICATION	5.3001463887578635E-5	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999555344987072	WITHOUT_CLASSIFICATION	4.446550129282294E-5	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999962506067361	WITHOUT_CLASSIFICATION	3.7493932639372554E-6	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999815538791701	WITHOUT_CLASSIFICATION	1.8446120829853707E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999051661634842	WITHOUT_CLASSIFICATION	9.483383651582233E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999051661634842	WITHOUT_CLASSIFICATION	9.483383651582233E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999570431586267	WITHOUT_CLASSIFICATION	4.295684137330727E-5	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999982722365823	WITHOUT_CLASSIFICATION	1.7277634176547732E-6	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999366086034822	WITHOUT_CLASSIFICATION	6.339139651776847E-5	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999910327850006	WITHOUT_CLASSIFICATION	8.967214999400207E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999366086034822	WITHOUT_CLASSIFICATION	6.339139651776847E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999303044843184	WITHOUT_CLASSIFICATION	6.969551568161429E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999628402316231	WITHOUT_CLASSIFICATION	3.715976837690987E-5	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999534511050234	WITHOUT_CLASSIFICATION	4.654889497665687E-5	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998505133914979	WITHOUT_CLASSIFICATION	1.49486608502188E-4	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999302787663902	WITHOUT_CLASSIFICATION	6.972123360987638E-5	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999514191729039	WITHOUT_CLASSIFICATION	4.8580827096149496E-5	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999609504891929	WITHOUT_CLASSIFICATION	3.904951080714707E-5	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999534745003777	WITHOUT_CLASSIFICATION	4.652549962221009E-5	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.999949144610406	WITHOUT_CLASSIFICATION	5.085538959400436E-5	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999748142991155	WITHOUT_CLASSIFICATION	2.5185700884528943E-5	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.999953101241558	WITHOUT_CLASSIFICATION	4.689875844195564E-5	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999379686668798	WITHOUT_CLASSIFICATION	6.203133312023905E-5	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999159619011861	WITHOUT_CLASSIFICATION	8.403809881389008E-5	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999965906493244	WITHOUT_CLASSIFICATION	3.4093506754776404E-6	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.999956455601722	WITHOUT_CLASSIFICATION	4.354439827792234E-5	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999760696828369	WITHOUT_CLASSIFICATION	2.393031716303806E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999733250536661	WITHOUT_CLASSIFICATION	2.6674946333984153E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999733250536661	WITHOUT_CLASSIFICATION	2.6674946333984153E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999096034858886	WITHOUT_CLASSIFICATION	9.039651411142393E-5	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999762121547633	WITHOUT_CLASSIFICATION	2.378784523671702E-5	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999930033852361	WITHOUT_CLASSIFICATION	6.996614763788949E-6	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999935392521032	WITHOUT_CLASSIFICATION	6.460747896786593E-6	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999940987547807	WITHOUT_CLASSIFICATION	5.901245219246107E-6	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999922978111471	WITHOUT_CLASSIFICATION	7.702188852927908E-6	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999728613594596	WITHOUT_CLASSIFICATION	2.7138640540409356E-5	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999337503975543	WITHOUT_CLASSIFICATION	6.624960244564075E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999550661193334	WITHOUT_CLASSIFICATION	4.493388066659923E-5	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999808496466965	WITHOUT_CLASSIFICATION	1.9150353303476676E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999567073576501	WITHOUT_CLASSIFICATION	4.3292642349941106E-5	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999965744571088	WITHOUT_CLASSIFICATION	3.425542891206374E-6	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999647817855638	WITHOUT_CLASSIFICATION	3.521821443614747E-5	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999561734439844	WITHOUT_CLASSIFICATION	4.3826556015600034E-5	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999964374135474	WITHOUT_CLASSIFICATION	3.562586452598883E-5	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999948319778957	WITHOUT_CLASSIFICATION	5.168022104325951E-6	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999776719524247	WITHOUT_CLASSIFICATION	2.2328047575367227E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9998826988001044	WITHOUT_CLASSIFICATION	1.1730119989555942E-4	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9999562644307469	WITHOUT_CLASSIFICATION	4.373556925305035E-5	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999621278463368	WITHOUT_CLASSIFICATION	3.787215366330807E-5	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999506452726861	WITHOUT_CLASSIFICATION	4.9354727313907494E-5	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999065212325329	WITHOUT_CLASSIFICATION	9.347876746708645E-5	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999181589369951	WITHOUT_CLASSIFICATION	8.184106300483857E-5	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9998790148618163	WITHOUT_CLASSIFICATION	1.20985138183662E-4	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999634343243367	WITHOUT_CLASSIFICATION	3.6565675663292087E-5	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999879830975892	WITHOUT_CLASSIFICATION	1.201690241094498E-5	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999440054226262	WITHOUT_CLASSIFICATION	5.599457737386139E-5	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999684413505635	WITHOUT_CLASSIFICATION	3.1558649436440327E-5	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999262774274355	WITHOUT_CLASSIFICATION	7.37225725646087E-5	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.999990168816804	WITHOUT_CLASSIFICATION	9.831183195974591E-6	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999685076016679	WITHOUT_CLASSIFICATION	3.1492398332118005E-5	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999567393374456	WITHOUT_CLASSIFICATION	4.326066255437561E-5	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999892672714196	WITHOUT_CLASSIFICATION	1.0732728580535379E-5	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999002731729454	WITHOUT_CLASSIFICATION	9.972682705460929E-5	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999963119047391	WITHOUT_CLASSIFICATION	3.688095260777529E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999983250869322	WITHOUT_CLASSIFICATION	1.6749130677946208E-5	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999761153751233	WITHOUT_CLASSIFICATION	2.388462487665548E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999513514830286	WITHOUT_CLASSIFICATION	4.864851697143193E-5	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999444321723873	WITHOUT_CLASSIFICATION	5.556782761273305E-5	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999466316349498	WITHOUT_CLASSIFICATION	5.336836505024217E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999227539247332	WITHOUT_CLASSIFICATION	7.724607526682596E-5	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9999079534643933	WITHOUT_CLASSIFICATION	9.204653560666183E-5	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9984390380451796	WITHOUT_CLASSIFICATION	0.0015609619548202901	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999927149749416	WITHOUT_CLASSIFICATION	7.285025058424124E-6	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999731435600924	WITHOUT_CLASSIFICATION	2.6856439907616534E-5	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.998315405455481	WITHOUT_CLASSIFICATION	0.001684594544518999	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999934582834084	WITHOUT_CLASSIFICATION	6.5417165916775104E-6	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999651952404618	WITHOUT_CLASSIFICATION	3.480475953816511E-5	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999889706778673	WITHOUT_CLASSIFICATION	1.1029322132737611E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999234286032378	WITHOUT_CLASSIFICATION	7.657139676228802E-5	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999963682261996	WITHOUT_CLASSIFICATION	3.6317738004076224E-5	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999990534296741	WITHOUT_CLASSIFICATION	9.465703259982186E-7	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999739831992387	WITHOUT_CLASSIFICATION	2.601680076129914E-5	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999089234030982	WITHOUT_CLASSIFICATION	9.107659690177325E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999421787973464	WITHOUT_CLASSIFICATION	5.7821202653601136E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999421787973464	WITHOUT_CLASSIFICATION	5.7821202653601136E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999979785957126	WITHOUT_CLASSIFICATION	2.021404287377825E-6	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999539858998118	WITHOUT_CLASSIFICATION	4.60141001881129E-5	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999316907663378	WITHOUT_CLASSIFICATION	6.830923366215096E-5	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999536180000215	WITHOUT_CLASSIFICATION	4.63819999785217E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999565484602664	WITHOUT_CLASSIFICATION	4.3451539733655835E-5	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999669219766335	WITHOUT_CLASSIFICATION	3.307802336661191E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999812892731467	WITHOUT_CLASSIFICATION	1.8710726853328203E-5	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999850287188824	WITHOUT_CLASSIFICATION	1.4971281117665727E-5	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999653010292683	WITHOUT_CLASSIFICATION	3.469897073167047E-5	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999901593543151	WITHOUT_CLASSIFICATION	9.840645684911066E-6	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999743598968766	WITHOUT_CLASSIFICATION	2.564010312350683E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998982363198002	WITHOUT_CLASSIFICATION	1.0176368019981224E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999978758361972	WITHOUT_CLASSIFICATION	2.124163802802762E-5	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999926142110986	WITHOUT_CLASSIFICATION	7.3857889013947054E-6	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999940859524572	WITHOUT_CLASSIFICATION	5.914047542856879E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999968567956267	WITHOUT_CLASSIFICATION	3.1432043732225006E-6	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9999035534216831	WITHOUT_CLASSIFICATION	9.644657831683835E-5	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999823590792799	WITHOUT_CLASSIFICATION	1.764092072006292E-5	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999108497303905	WITHOUT_CLASSIFICATION	8.915026960956225E-5	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999958339505448	WITHOUT_CLASSIFICATION	4.166049455111575E-6	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999049050928097	WITHOUT_CLASSIFICATION	9.509490719017471E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999631936669168	WITHOUT_CLASSIFICATION	3.680633308315151E-5	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999973145984492	WITHOUT_CLASSIFICATION	2.6854015507551257E-6	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999951120339758	WITHOUT_CLASSIFICATION	4.887966024134582E-6	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999541557797293	WITHOUT_CLASSIFICATION	4.5844220270682265E-5	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999034723203948	WITHOUT_CLASSIFICATION	9.652767960530133E-5	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.999955223133139	WITHOUT_CLASSIFICATION	4.477686686098626E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999868081869683	WITHOUT_CLASSIFICATION	1.3191813031683318E-5	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999996966201575	WITHOUT_CLASSIFICATION	3.033798425175159E-7	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9969302040603586	WITHOUT_CLASSIFICATION	0.0030697959396414555	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999114968644796	WITHOUT_CLASSIFICATION	8.850313552034813E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999908707796312	WITHOUT_CLASSIFICATION	9.129220368819533E-6	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999868256551164	WITHOUT_CLASSIFICATION	1.3174344883591342E-5	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999687756270209	WITHOUT_CLASSIFICATION	3.122437297898138E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999890680081307	WITHOUT_CLASSIFICATION	1.0931991869277593E-5	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.999965612851566	WITHOUT_CLASSIFICATION	3.438714843397983E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999114968644796	WITHOUT_CLASSIFICATION	8.850313552034813E-5	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999890854499746	WITHOUT_CLASSIFICATION	1.0914550025552282E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999887948103537	WITHOUT_CLASSIFICATION	1.1205189646244394E-5	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999628420804989	WITHOUT_CLASSIFICATION	3.715791950115231E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999478483170768	WITHOUT_CLASSIFICATION	5.2151682923115434E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999567073576501	WITHOUT_CLASSIFICATION	4.3292642349941106E-5	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999431425516129	WITHOUT_CLASSIFICATION	5.685744838713856E-5	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999411482220486	WITHOUT_CLASSIFICATION	5.8851777951404335E-5	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999988727642459	WITHOUT_CLASSIFICATION	1.1272357540920918E-5	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999498735174189	WITHOUT_CLASSIFICATION	5.01264825811056E-5	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999700866105051	WITHOUT_CLASSIFICATION	2.991338949490648E-5	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999549816858042	WITHOUT_CLASSIFICATION	4.501831419581172E-5	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999546416908135	WITHOUT_CLASSIFICATION	4.535830918658434E-5	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999922964611294	WITHOUT_CLASSIFICATION	7.703538870514922E-6	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998983292986544	WITHOUT_CLASSIFICATION	1.0167070134552061E-4	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999584678631669	WITHOUT_CLASSIFICATION	4.1532136833050466E-5	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999561998692696	WITHOUT_CLASSIFICATION	4.3800130730470375E-5	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999789928014922	WITHOUT_CLASSIFICATION	2.100719850786575E-5	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9998988650952932	WITHOUT_CLASSIFICATION	1.0113490470680251E-4	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999558412917585	WITHOUT_CLASSIFICATION	4.415870824151489E-5	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999211221314087	WITHOUT_CLASSIFICATION	7.88778685913449E-5	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999810258686633	WITHOUT_CLASSIFICATION	1.8974131336705195E-5	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999721464084892	WITHOUT_CLASSIFICATION	2.7853591510856137E-5	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999721458840927	WITHOUT_CLASSIFICATION	2.78541159072917E-5	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999140554597392	WITHOUT_CLASSIFICATION	8.59445402607319E-5	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999099253238164	WITHOUT_CLASSIFICATION	9.007467618352182E-5	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999727005139464	WITHOUT_CLASSIFICATION	2.729948605358026E-5	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999559082001941	WITHOUT_CLASSIFICATION	4.40917998059419E-5	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999860774213519	WITHOUT_CLASSIFICATION	1.392257864804273E-5	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999379175080638	WITHOUT_CLASSIFICATION	6.208249193615715E-5	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9998742985982952	WITHOUT_CLASSIFICATION	1.2570140170474462E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.999989655177659	WITHOUT_CLASSIFICATION	1.0344822341029417E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998957721755648	WITHOUT_CLASSIFICATION	1.042278244351996E-4	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998577231627223	WITHOUT_CLASSIFICATION	1.42276837277737E-4	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999816983035744	WITHOUT_CLASSIFICATION	1.830169642562539E-5	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.999910188250786	WITHOUT_CLASSIFICATION	8.981174921394538E-5	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999958813366613	WITHOUT_CLASSIFICATION	4.118663338762619E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999520276427832	WITHOUT_CLASSIFICATION	4.7972357216677E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999520276427832	WITHOUT_CLASSIFICATION	4.7972357216677E-5	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999979610164448	WITHOUT_CLASSIFICATION	2.0389835551944166E-6	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999359124053505	WITHOUT_CLASSIFICATION	6.408759464950386E-5	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999575076261439	WITHOUT_CLASSIFICATION	4.2492373856052086E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999847389715393	WITHOUT_CLASSIFICATION	1.5261028460724823E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999718696113926	WITHOUT_CLASSIFICATION	2.8130388607294872E-5	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9998909944681637	WITHOUT_CLASSIFICATION	1.0900553183644301E-4	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999625373816585	WITHOUT_CLASSIFICATION	3.7462618341458583E-5	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999725566630796	WITHOUT_CLASSIFICATION	2.7443336920360278E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999285981653988	WITHOUT_CLASSIFICATION	7.140183460116052E-5	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999959081401716	WITHOUT_CLASSIFICATION	4.091859828411883E-6	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999528147684235	WITHOUT_CLASSIFICATION	4.718523157654509E-5	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999780912295686	WITHOUT_CLASSIFICATION	2.1908770431418255E-5	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999633222417768	WITHOUT_CLASSIFICATION	3.6677758223203835E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999520276427832	WITHOUT_CLASSIFICATION	4.7972357216677E-5	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999222953013779	WITHOUT_CLASSIFICATION	7.77046986221676E-5	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9998940760794	WITHOUT_CLASSIFICATION	1.0592392060005244E-4	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999702639460494	WITHOUT_CLASSIFICATION	2.9736053950590067E-5	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999451189057613	WITHOUT_CLASSIFICATION	5.488109423863559E-5	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999828796821165	WITHOUT_CLASSIFICATION	1.712031788341612E-5	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999546723719479	WITHOUT_CLASSIFICATION	4.532762805205241E-5	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999949340639448	WITHOUT_CLASSIFICATION	5.065936055210064E-6	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999641392822973	WITHOUT_CLASSIFICATION	3.586071770264578E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999831164236909	WITHOUT_CLASSIFICATION	1.6883576309150807E-5	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999522757547428	WITHOUT_CLASSIFICATION	4.772424525712825E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999603212784113	WITHOUT_CLASSIFICATION	3.967872158874627E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998957721755648	WITHOUT_CLASSIFICATION	1.042278244351996E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999520276427832	WITHOUT_CLASSIFICATION	4.7972357216677E-5	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.999928976289022	WITHOUT_CLASSIFICATION	7.102371097807549E-5	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999975608683384	WITHOUT_CLASSIFICATION	2.4391316616033607E-5	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9997821377502757	WITHOUT_CLASSIFICATION	2.1786224972430345E-4	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999435993449053	WITHOUT_CLASSIFICATION	5.640065509463606E-5	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999854582839752	WITHOUT_CLASSIFICATION	1.4541716024690304E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999610826530656	WITHOUT_CLASSIFICATION	3.891734693442466E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999946610738956	WITHOUT_CLASSIFICATION	5.338926104406977E-5	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999867494888233	WITHOUT_CLASSIFICATION	1.325051117684684E-5	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999889163208968	WITHOUT_CLASSIFICATION	1.1083679103291986E-5	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999654594979859	WITHOUT_CLASSIFICATION	3.4540502014098394E-5	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999857183228956	WITHOUT_CLASSIFICATION	1.4281677104424085E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999801208916375	WITHOUT_CLASSIFICATION	1.987910836255863E-5	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.999977275890172	WITHOUT_CLASSIFICATION	2.2724109827921102E-5	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999918099168268	WITHOUT_CLASSIFICATION	8.190083173203836E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999303044843184	WITHOUT_CLASSIFICATION	6.969551568161429E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999881930025222	WITHOUT_CLASSIFICATION	1.1806997477907138E-5	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999996161486744	WITHOUT_CLASSIFICATION	3.8385132559832995E-6	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999747542484271	WITHOUT_CLASSIFICATION	2.524575157286811E-5	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999239829365345	WITHOUT_CLASSIFICATION	7.60170634655265E-5	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999972653837614	WITHOUT_CLASSIFICATION	2.734616238543718E-6	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999340128688115	WITHOUT_CLASSIFICATION	6.598713118851524E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999340128688115	WITHOUT_CLASSIFICATION	6.598713118851524E-5	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999570535775016	WITHOUT_CLASSIFICATION	4.294642249844311E-5	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999716380050457	WITHOUT_CLASSIFICATION	2.83619949543703E-5	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999792566818534	WITHOUT_CLASSIFICATION	2.0743318146544158E-5	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999789828597775	WITHOUT_CLASSIFICATION	2.1017140222475218E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999399196377352	WITHOUT_CLASSIFICATION	6.008036226471161E-5	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999410317465678	WITHOUT_CLASSIFICATION	5.896825343229023E-5	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999218373402229	WITHOUT_CLASSIFICATION	7.816265977722755E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999742609713602	WITHOUT_CLASSIFICATION	2.573902863976936E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999742609713602	WITHOUT_CLASSIFICATION	2.573902863976936E-5	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999328846449878	WITHOUT_CLASSIFICATION	6.711535501222563E-5	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999282316959394	WITHOUT_CLASSIFICATION	7.176830406062064E-5	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999679222820657	WITHOUT_CLASSIFICATION	3.207771793430715E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999580393806966	WITHOUT_CLASSIFICATION	4.1960619303383605E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999580393806966	WITHOUT_CLASSIFICATION	4.1960619303383605E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999580393806966	WITHOUT_CLASSIFICATION	4.1960619303383605E-5	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999629853876235	WITHOUT_CLASSIFICATION	3.701461237643648E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999785142568629	WITHOUT_CLASSIFICATION	2.1485743137080205E-5	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999427768987645	WITHOUT_CLASSIFICATION	5.7223101235514584E-5	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999242155495176	WITHOUT_CLASSIFICATION	7.578445048237551E-5	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999825050152957	WITHOUT_CLASSIFICATION	1.7494984704269275E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999520276427832	WITHOUT_CLASSIFICATION	4.7972357216677E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999520276427832	WITHOUT_CLASSIFICATION	4.7972357216677E-5	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999765237462355	WITHOUT_CLASSIFICATION	2.3476253764536653E-5	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999966349207782	WITHOUT_CLASSIFICATION	3.3650792218844588E-6	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999331584274149	WITHOUT_CLASSIFICATION	6.684157258508227E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999842684169774	WITHOUT_CLASSIFICATION	1.573158302250562E-5	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999291164455054	WITHOUT_CLASSIFICATION	7.088355449462466E-5	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999618317704521	WITHOUT_CLASSIFICATION	3.816822954792345E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999384558296132	WITHOUT_CLASSIFICATION	6.154417038682706E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999506198074243	WITHOUT_CLASSIFICATION	4.93801925757525E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999810616011783	WITHOUT_CLASSIFICATION	1.893839882166068E-5	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999948690935566	WITHOUT_CLASSIFICATION	5.1309064433932175E-5	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999754324434039	WITHOUT_CLASSIFICATION	2.456755659611411E-5	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9998963631104725	WITHOUT_CLASSIFICATION	1.0363688952755752E-4	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9998963631104725	WITHOUT_CLASSIFICATION	1.0363688952755752E-4	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9998963631104725	WITHOUT_CLASSIFICATION	1.0363688952755752E-4	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9998963631104725	WITHOUT_CLASSIFICATION	1.0363688952755752E-4	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9998963631104725	WITHOUT_CLASSIFICATION	1.0363688952755752E-4	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999086961357135	WITHOUT_CLASSIFICATION	9.130386428637896E-5	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999086961357135	WITHOUT_CLASSIFICATION	9.130386428637896E-5	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999088684353549	WITHOUT_CLASSIFICATION	9.113156464517487E-5	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999086961357135	WITHOUT_CLASSIFICATION	9.130386428637896E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999692264616499	WITHOUT_CLASSIFICATION	3.0773538350087076E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999340128688115	WITHOUT_CLASSIFICATION	6.598713118851524E-5	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.99990133310646	WITHOUT_CLASSIFICATION	9.866689354004628E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999086961357135	WITHOUT_CLASSIFICATION	9.130386428637896E-5	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.999940578897097	WITHOUT_CLASSIFICATION	5.942110290313246E-5	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999252758471396	WITHOUT_CLASSIFICATION	7.472415286042505E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998966170332939	WITHOUT_CLASSIFICATION	1.0338296670600746E-4	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9998965924871543	WITHOUT_CLASSIFICATION	1.0340751284558873E-4	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999901057097047	WITHOUT_CLASSIFICATION	9.89429029535752E-6	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999362167291668	WITHOUT_CLASSIFICATION	6.378327083326896E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999890700195361	WITHOUT_CLASSIFICATION	1.0929980463997082E-5	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999513425319938	WITHOUT_CLASSIFICATION	4.865746800620298E-5	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999656879262995	WITHOUT_CLASSIFICATION	3.43120737005611E-5	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.999994134314978	WITHOUT_CLASSIFICATION	5.865685021963393E-6	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999828935532484	WITHOUT_CLASSIFICATION	1.7106446751605743E-5	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.999043676514189	WITHOUT_CLASSIFICATION	9.563234858109311E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9997459802637068	WITHOUT_CLASSIFICATION	2.5401973629329513E-4	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.999933851687979	WITHOUT_CLASSIFICATION	6.614831202108081E-5	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.999984061417996	WITHOUT_CLASSIFICATION	1.5938582004025637E-5	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999708537081683	WITHOUT_CLASSIFICATION	2.914629183180207E-5	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9997425592837689	WITHOUT_CLASSIFICATION	2.5744071623109765E-4	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999168715281135	WITHOUT_CLASSIFICATION	8.312847188655684E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999168715281135	WITHOUT_CLASSIFICATION	8.312847188655684E-5	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999665111822652	WITHOUT_CLASSIFICATION	3.348881773476197E-5	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999893112071182	WITHOUT_CLASSIFICATION	1.068879288186666E-5	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999708972794866	WITHOUT_CLASSIFICATION	2.9102720513355176E-5	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999433170121629	WITHOUT_CLASSIFICATION	5.6682987837067825E-5	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999357542856212	WITHOUT_CLASSIFICATION	6.424571437880961E-5	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999711821166745	WITHOUT_CLASSIFICATION	2.8817883325499943E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999214978131316	WITHOUT_CLASSIFICATION	7.850218686848752E-5	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999790250080469	WITHOUT_CLASSIFICATION	2.097499195305896E-5	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999604208980065	WITHOUT_CLASSIFICATION	3.957910199353845E-5	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999786850869797	WITHOUT_CLASSIFICATION	2.131491302020032E-5	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999238804749968	WITHOUT_CLASSIFICATION	7.61195250032036E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999801208916375	WITHOUT_CLASSIFICATION	1.987910836255863E-5	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999956487733985	WITHOUT_CLASSIFICATION	4.3512266014644E-6	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999953147003219	WITHOUT_CLASSIFICATION	4.685299678202705E-6	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999807869074996	WITHOUT_CLASSIFICATION	1.9213092500420356E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999879425461133	WITHOUT_CLASSIFICATION	1.2057453886686069E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999879878816649	WITHOUT_CLASSIFICATION	1.2012118335155176E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999879878816649	WITHOUT_CLASSIFICATION	1.2012118335155176E-5	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999564001731526	WITHOUT_CLASSIFICATION	4.359982684741219E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999983309301771	WITHOUT_CLASSIFICATION	1.669069822993163E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999868824314397	WITHOUT_CLASSIFICATION	1.3117568560368164E-5	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999903968365631	WITHOUT_CLASSIFICATION	9.603163436888539E-6	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999863229940799	WITHOUT_CLASSIFICATION	1.3677005920210898E-5	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999550919377639	WITHOUT_CLASSIFICATION	4.490806223608201E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999048769139081	WITHOUT_CLASSIFICATION	9.512308609199569E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999989375464974	WITHOUT_CLASSIFICATION	1.0624535026101548E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999600949200774	WITHOUT_CLASSIFICATION	3.9905079922579E-5	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.999985025041947	WITHOUT_CLASSIFICATION	1.497495805311932E-5	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999961239906762	WITHOUT_CLASSIFICATION	3.876009323903585E-6	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999989375464974	WITHOUT_CLASSIFICATION	1.0624535026101548E-5	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999842852209138	WITHOUT_CLASSIFICATION	1.571477908624147E-5	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999520936942944	WITHOUT_CLASSIFICATION	4.790630570559035E-5	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999857261350331	WITHOUT_CLASSIFICATION	1.4273864966928229E-5	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999210382250495	WITHOUT_CLASSIFICATION	7.896177495046722E-5	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999936622167922	WITHOUT_CLASSIFICATION	6.337783207747764E-6	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999994491365997	WITHOUT_CLASSIFICATION	5.508634002831708E-6	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.99994392587952	WITHOUT_CLASSIFICATION	5.607412047995353E-5	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999865165711882	WITHOUT_CLASSIFICATION	1.3483428811838297E-5	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999940817238407	WITHOUT_CLASSIFICATION	5.918276159276098E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999832368530701	WITHOUT_CLASSIFICATION	1.6763146929952006E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999437918415551	WITHOUT_CLASSIFICATION	5.620815844484801E-5	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999792835380159	WITHOUT_CLASSIFICATION	2.071646198409518E-5	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999484201744986	WITHOUT_CLASSIFICATION	5.157982550138606E-5	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999701556320653	WITHOUT_CLASSIFICATION	2.984436793473969E-5	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999913749081528	WITHOUT_CLASSIFICATION	8.625091847195415E-5	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999971294142047	WITHOUT_CLASSIFICATION	2.8705857952734577E-6	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999741852265701	WITHOUT_CLASSIFICATION	2.581477342980572E-5	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9998614746432265	WITHOUT_CLASSIFICATION	1.3852535677344119E-4	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9998614746432265	WITHOUT_CLASSIFICATION	1.3852535677344119E-4	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999424078601742	WITHOUT_CLASSIFICATION	5.759213982570493E-5	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999729085939401	WITHOUT_CLASSIFICATION	2.7091406059940523E-5	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999353525705864	WITHOUT_CLASSIFICATION	6.464742941360788E-5	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999308816897556	WITHOUT_CLASSIFICATION	6.91183102444215E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999778200121163	WITHOUT_CLASSIFICATION	2.217998788374675E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999865425047092	WITHOUT_CLASSIFICATION	1.3457495290739095E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999940783301595	WITHOUT_CLASSIFICATION	5.921669840485435E-6	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999903358375365	WITHOUT_CLASSIFICATION	9.664162463483268E-6	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999752168546806	WITHOUT_CLASSIFICATION	2.478314531941337E-5	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999735694823094	WITHOUT_CLASSIFICATION	2.643051769059886E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999929144638383	WITHOUT_CLASSIFICATION	7.0855361616844E-6	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999755050375229	WITHOUT_CLASSIFICATION	2.4494962477081297E-5	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999421133904015	WITHOUT_CLASSIFICATION	5.78866095984318E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999792040085574	WITHOUT_CLASSIFICATION	2.0795991442597182E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999431159203337	WITHOUT_CLASSIFICATION	5.688407966635148E-5	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999894953962799	WITHOUT_CLASSIFICATION	1.050460372010956E-5	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999955828791698	WITHOUT_CLASSIFICATION	4.417120830240939E-6	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999884128285867	WITHOUT_CLASSIFICATION	1.1587171413174615E-5	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999955819045458	WITHOUT_CLASSIFICATION	4.41809545419393E-5	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999683630608496	WITHOUT_CLASSIFICATION	3.1636939150342075E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999957131728456	WITHOUT_CLASSIFICATION	4.2868271544466144E-6	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999857087366755	WITHOUT_CLASSIFICATION	1.4291263324609751E-5	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999783351531001	WITHOUT_CLASSIFICATION	2.1664846899866592E-5	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999986216447685	WITHOUT_CLASSIFICATION	1.3783552314125475E-6	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999841739552526	WITHOUT_CLASSIFICATION	1.582604474738504E-5	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999675233466989	WITHOUT_CLASSIFICATION	3.247665330105881E-5	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999894042083047	WITHOUT_CLASSIFICATION	1.0595791695287733E-5	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999785584671118	WITHOUT_CLASSIFICATION	2.1441532888193696E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999778412443076	WITHOUT_CLASSIFICATION	2.2158755692510657E-5	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999572204198539	WITHOUT_CLASSIFICATION	4.27795801461061E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999508071282219	WITHOUT_CLASSIFICATION	4.919287177804307E-5	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999434615373266	WITHOUT_CLASSIFICATION	5.6538462673359084E-5	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999860408458899	WITHOUT_CLASSIFICATION	1.3959154109988046E-5	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999852486134924	WITHOUT_CLASSIFICATION	1.4751386507593024E-5	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999973214716918	WITHOUT_CLASSIFICATION	2.6785283082164415E-6	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999671561635286	WITHOUT_CLASSIFICATION	3.28438364714046E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999651309350629	WITHOUT_CLASSIFICATION	3.486906493709973E-5	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999924002157857	WITHOUT_CLASSIFICATION	7.599784214361613E-6	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999713132866287	WITHOUT_CLASSIFICATION	2.868671337131434E-5	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999625184098422	WITHOUT_CLASSIFICATION	3.7481590157811274E-5	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999775170141778	WITHOUT_CLASSIFICATION	2.248298582218625E-5	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999730877570038	WITHOUT_CLASSIFICATION	2.691224299616848E-5	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999326410738014	WITHOUT_CLASSIFICATION	6.735892619855981E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999922425313014	WITHOUT_CLASSIFICATION	7.757468698600847E-6	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999621696638613	WITHOUT_CLASSIFICATION	3.7830336138624024E-5	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999972249675152	WITHOUT_CLASSIFICATION	2.775032484802746E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999508071282219	WITHOUT_CLASSIFICATION	4.919287177804307E-5	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999332777010986	WITHOUT_CLASSIFICATION	6.672229890137863E-5	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9998530268334084	WITHOUT_CLASSIFICATION	1.4697316659153492E-4	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999746411989084	WITHOUT_CLASSIFICATION	2.5358801091551056E-5	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999877971906698	WITHOUT_CLASSIFICATION	1.2202809330304346E-5	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999875659478484	WITHOUT_CLASSIFICATION	1.2434052151600586E-4	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999802698149892	WITHOUT_CLASSIFICATION	1.9730185010715287E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999600949200774	WITHOUT_CLASSIFICATION	3.9905079922579E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999889563020707	WITHOUT_CLASSIFICATION	1.1043697929249134E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999431159203337	WITHOUT_CLASSIFICATION	5.688407966635148E-5	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.999915761779086	WITHOUT_CLASSIFICATION	8.423822091395056E-5	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999198703995925	WITHOUT_CLASSIFICATION	8.012960040743233E-5	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999719061242826	WITHOUT_CLASSIFICATION	2.8093875717532046E-5	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999722020880489	WITHOUT_CLASSIFICATION	2.7797911951120473E-5	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999284737918606	WITHOUT_CLASSIFICATION	7.152620813955227E-5	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999700097693426	WITHOUT_CLASSIFICATION	2.9990230657424644E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999642409968075	WITHOUT_CLASSIFICATION	3.575900319240924E-5	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999682724926052	WITHOUT_CLASSIFICATION	3.172750739481615E-5	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999868857026847	WITHOUT_CLASSIFICATION	1.3114297315305064E-5	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999865451706559	WITHOUT_CLASSIFICATION	1.345482934400704E-5	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999820431026294	WITHOUT_CLASSIFICATION	1.795689737061424E-5	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999817500863435	WITHOUT_CLASSIFICATION	1.824991365651979E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999590773283338	WITHOUT_CLASSIFICATION	4.092267166622466E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999590773283338	WITHOUT_CLASSIFICATION	4.092267166622466E-5	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999731202579665	WITHOUT_CLASSIFICATION	2.6879742033442905E-5	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999984225426889	WITHOUT_CLASSIFICATION	1.5774573110959808E-5	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999848502566182	WITHOUT_CLASSIFICATION	1.514974338185706E-5	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999982892072516	WITHOUT_CLASSIFICATION	1.7107927484276684E-6	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999959190598522	WITHOUT_CLASSIFICATION	4.080940147787029E-6	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999704332167385	WITHOUT_CLASSIFICATION	2.956678326158854E-5	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999949643190957	WITHOUT_CLASSIFICATION	5.035680904263424E-6	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999913997719156	WITHOUT_CLASSIFICATION	8.60022808430122E-6	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999781898407649	WITHOUT_CLASSIFICATION	2.1810159235007575E-5	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.999939763038456	WITHOUT_CLASSIFICATION	6.023696154407445E-5	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999285331890385	WITHOUT_CLASSIFICATION	7.146681096142739E-5	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999686047203887	WITHOUT_CLASSIFICATION	3.139527961136996E-5	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999555223391027	WITHOUT_CLASSIFICATION	4.447766089739258E-5	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999989147277916	WITHOUT_CLASSIFICATION	1.0852722084092181E-6	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.999961610009616	WITHOUT_CLASSIFICATION	3.838999038399165E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999536916473364	WITHOUT_CLASSIFICATION	4.6308352663554803E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.999933408294214	WITHOUT_CLASSIFICATION	6.659170578612206E-5	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999981821556891	WITHOUT_CLASSIFICATION	1.817844310959045E-6	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999860647592491	WITHOUT_CLASSIFICATION	1.3935240750907082E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999422826356251	WITHOUT_CLASSIFICATION	5.7717364374788734E-5	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999943431044526	WITHOUT_CLASSIFICATION	5.6568955473402125E-6	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999900451306717	WITHOUT_CLASSIFICATION	9.954869328257441E-6	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999956057290933	WITHOUT_CLASSIFICATION	4.394270906733655E-6	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999722094612907	WITHOUT_CLASSIFICATION	2.779053870923518E-5	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9999034204686932	WITHOUT_CLASSIFICATION	9.657953130677017E-5	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999548025707448	WITHOUT_CLASSIFICATION	4.519742925516098E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999422826356251	WITHOUT_CLASSIFICATION	5.7717364374788734E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999422826356251	WITHOUT_CLASSIFICATION	5.7717364374788734E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999574219245883	WITHOUT_CLASSIFICATION	4.257807541174699E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999932518371886	WITHOUT_CLASSIFICATION	6.748162811464261E-6	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999959081773859	WITHOUT_CLASSIFICATION	4.0918226141015944E-5	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999429790719904	WITHOUT_CLASSIFICATION	5.70209280096525E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999217544672933	WITHOUT_CLASSIFICATION	7.824553270677787E-5	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999936550872408	WITHOUT_CLASSIFICATION	6.344912759179581E-6	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.998109307024137	WITHOUT_CLASSIFICATION	0.0018906929758629614	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.999941956595995	WITHOUT_CLASSIFICATION	5.8043404004900775E-5	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999712233636363	WITHOUT_CLASSIFICATION	2.877663636359343E-5	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999189054608066	WITHOUT_CLASSIFICATION	8.109453919336528E-5	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999445762722843	WITHOUT_CLASSIFICATION	5.5423727715782187E-5	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999686338029599	WITHOUT_CLASSIFICATION	3.136619704018069E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999572122957	WITHOUT_CLASSIFICATION	4.278770429994803E-5	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996504698703913	WITHOUT_CLASSIFICATION	3.4953012960878846E-4	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999974821452241	WITHOUT_CLASSIFICATION	2.5178547758991916E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999013381123294	WITHOUT_CLASSIFICATION	9.866188767058285E-5	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999145854798849	WITHOUT_CLASSIFICATION	8.541452011516255E-5	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999028956063661	WITHOUT_CLASSIFICATION	9.710439363385537E-5	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997254503622088	WITHOUT_CLASSIFICATION	2.7454963779115416E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9973481223513078	WITHOUT_CLASSIFICATION	0.002651877648692213	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999848009313336	WITHOUT_CLASSIFICATION	1.5199068666319402E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999981228513123	WITHOUT_CLASSIFICATION	1.877148687661888E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999712417581658	WITHOUT_CLASSIFICATION	2.875824183421702E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998544847134588	WITHOUT_CLASSIFICATION	1.4551528654116545E-4	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999722553025577	WITHOUT_CLASSIFICATION	2.774469744225337E-5	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999873165869557	WITHOUT_CLASSIFICATION	1.268341304431128E-5	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999820263867952	WITHOUT_CLASSIFICATION	1.797361320479636E-5	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999928121721166	WITHOUT_CLASSIFICATION	7.187827883399733E-5	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999510359422822	WITHOUT_CLASSIFICATION	4.896405771789008E-5	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999877465334512	WITHOUT_CLASSIFICATION	1.2253466548848633E-5	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999228616485487	WITHOUT_CLASSIFICATION	7.713835145128189E-5	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.999913476453186	WITHOUT_CLASSIFICATION	8.65235468140828E-5	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999598114511202	WITHOUT_CLASSIFICATION	4.0188548879822536E-5	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999402383761367	WITHOUT_CLASSIFICATION	5.9761623863355174E-5	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999751136503433	WITHOUT_CLASSIFICATION	2.4886349656672548E-5	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.999954053273346	WITHOUT_CLASSIFICATION	4.5946726654050805E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999162543904209	WITHOUT_CLASSIFICATION	8.374560957911943E-5	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999747717863781	WITHOUT_CLASSIFICATION	2.5228213621940686E-5	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.999971865022463	WITHOUT_CLASSIFICATION	2.813497753696917E-5	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999495595791629	WITHOUT_CLASSIFICATION	5.0440420836994584E-5	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999898648622176	WITHOUT_CLASSIFICATION	1.0135137782370569E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999693656246231	WITHOUT_CLASSIFICATION	3.0634375376822974E-5	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999459024734834	WITHOUT_CLASSIFICATION	5.4097526516557E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999693656246231	WITHOUT_CLASSIFICATION	3.0634375376822974E-5	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999959578960259	WITHOUT_CLASSIFICATION	4.042103974114788E-6	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999764011924298	WITHOUT_CLASSIFICATION	2.3598807570205806E-5	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999879833210558	WITHOUT_CLASSIFICATION	1.2016678944291503E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999907454972262	WITHOUT_CLASSIFICATION	9.254502773897934E-6	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999985191523899	WITHOUT_CLASSIFICATION	1.480847610097064E-5	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999879986990298	WITHOUT_CLASSIFICATION	1.200130097022482E-5	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999875170376394	WITHOUT_CLASSIFICATION	1.2482962360505955E-5	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999456579584484	WITHOUT_CLASSIFICATION	5.434204155167606E-5	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999711697771475	WITHOUT_CLASSIFICATION	2.8830222852495904E-5	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999277384696198	WITHOUT_CLASSIFICATION	7.226153038024033E-5	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999743530347942	WITHOUT_CLASSIFICATION	2.564696520578178E-5	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999942404752186	WITHOUT_CLASSIFICATION	5.7595247813291355E-6	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999973970622154	WITHOUT_CLASSIFICATION	2.6029377845300024E-6	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999329760384881	WITHOUT_CLASSIFICATION	6.702396151187262E-5	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999759436076572	WITHOUT_CLASSIFICATION	2.405639234288633E-5	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999876263903644	WITHOUT_CLASSIFICATION	1.2373609635529309E-5	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999853539165523	WITHOUT_CLASSIFICATION	1.4646083447728066E-5	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999969417636375	WITHOUT_CLASSIFICATION	3.0582363625015426E-5	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999789833993196	WITHOUT_CLASSIFICATION	2.1016600680443083E-5	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999856430924189	WITHOUT_CLASSIFICATION	1.4356907581017517E-5	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999881144813466	WITHOUT_CLASSIFICATION	1.1885518653301163E-5	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999256620828917	WITHOUT_CLASSIFICATION	7.433791710829999E-5	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999673476128886	WITHOUT_CLASSIFICATION	3.2652387111408255E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999647205830128	WITHOUT_CLASSIFICATION	3.527941698724319E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999204175227505	WITHOUT_CLASSIFICATION	7.958247724948658E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999946777697077	WITHOUT_CLASSIFICATION	5.322230292311334E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999321295497983	WITHOUT_CLASSIFICATION	6.787045020163674E-5	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999472703341115	WITHOUT_CLASSIFICATION	5.272966588862338E-5	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999225365661615	WITHOUT_CLASSIFICATION	7.746343383842378E-5	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999566247922628	WITHOUT_CLASSIFICATION	4.337520773730949E-5	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999009581494357	WITHOUT_CLASSIFICATION	9.90418505642935E-5	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999915545079604	WITHOUT_CLASSIFICATION	8.445492039581577E-6	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999944524143349	WITHOUT_CLASSIFICATION	5.547585665037497E-6	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999181664069615	WITHOUT_CLASSIFICATION	8.183359303849545E-5	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999033386766234	WITHOUT_CLASSIFICATION	9.666132337664727E-5	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999442358169316	WITHOUT_CLASSIFICATION	5.576418306834047E-5	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999205477331214	WITHOUT_CLASSIFICATION	7.945226687849199E-5	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9999049729203665	WITHOUT_CLASSIFICATION	9.50270796335553E-5	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999405475984966	WITHOUT_CLASSIFICATION	5.94524015032938E-5	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999275357606356	WITHOUT_CLASSIFICATION	7.246423936431642E-5	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999049567868629	WITHOUT_CLASSIFICATION	9.504321313715549E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999863403504488	WITHOUT_CLASSIFICATION	1.3659649551262875E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999946777697077	WITHOUT_CLASSIFICATION	5.322230292311334E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999668751857173	WITHOUT_CLASSIFICATION	3.3124814282810766E-5	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999140788059948	WITHOUT_CLASSIFICATION	8.592119400516975E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999674440938745	WITHOUT_CLASSIFICATION	3.2555906125495874E-5	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999119260511709	WITHOUT_CLASSIFICATION	8.807394882915188E-5	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999621451432987	WITHOUT_CLASSIFICATION	3.7854856701280385E-5	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999474204762926	WITHOUT_CLASSIFICATION	5.257952370741755E-5	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999113349828898	WITHOUT_CLASSIFICATION	8.866501711029257E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999201368739243	WITHOUT_CLASSIFICATION	7.986312607560412E-5	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.999988927997912	WITHOUT_CLASSIFICATION	1.1072002088031728E-5	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9999436751870806	WITHOUT_CLASSIFICATION	5.632481291941491E-5	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.999981408441877	WITHOUT_CLASSIFICATION	1.859155812302518E-5	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999342939398902	WITHOUT_CLASSIFICATION	6.570606010979768E-5	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998969682875871	WITHOUT_CLASSIFICATION	1.0303171241284055E-4	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999366586055269	WITHOUT_CLASSIFICATION	6.334139447304311E-5	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999898635038025	WITHOUT_CLASSIFICATION	1.0136496197549175E-5	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999362675405175	WITHOUT_CLASSIFICATION	6.373245948257825E-5	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999397068688622	WITHOUT_CLASSIFICATION	6.02931311379113E-5	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999932859762141	WITHOUT_CLASSIFICATION	6.714023785944527E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999356477885248	WITHOUT_CLASSIFICATION	6.435221147519922E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999316129801649	WITHOUT_CLASSIFICATION	6.838701983508558E-5	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999441359840291	WITHOUT_CLASSIFICATION	5.5864015970784644E-5	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999635444675699	WITHOUT_CLASSIFICATION	3.645553243015243E-5	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999874285724523	WITHOUT_CLASSIFICATION	1.257142754780509E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9995563486588306	WITHOUT_CLASSIFICATION	4.436513411693163E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9995563486588306	WITHOUT_CLASSIFICATION	4.436513411693163E-4	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999888391093946	WITHOUT_CLASSIFICATION	1.1160890605453971E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9995563486588306	WITHOUT_CLASSIFICATION	4.436513411693163E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9995563486588306	WITHOUT_CLASSIFICATION	4.436513411693163E-4	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999524409786676	WITHOUT_CLASSIFICATION	4.75590213322564E-5	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999663646251692	WITHOUT_CLASSIFICATION	3.363537483086853E-5	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999309513533524	WITHOUT_CLASSIFICATION	6.904864664764623E-5	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999270893123585	WITHOUT_CLASSIFICATION	7.291068764145614E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999852118997835	WITHOUT_CLASSIFICATION	1.4788100216511086E-5	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999901934319724	WITHOUT_CLASSIFICATION	9.806568027594939E-6	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999098360829485	WITHOUT_CLASSIFICATION	9.016391705143926E-5	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999906652759932	WITHOUT_CLASSIFICATION	9.334724006710879E-6	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999023753772948	WITHOUT_CLASSIFICATION	9.76246227051691E-5	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999095402998458	WITHOUT_CLASSIFICATION	9.045970015428409E-5	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999369594355478	WITHOUT_CLASSIFICATION	6.304056445222406E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999376634300653	WITHOUT_CLASSIFICATION	6.233656993469099E-5	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999193416924835	WITHOUT_CLASSIFICATION	8.065830751655176E-5	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999325012961074	WITHOUT_CLASSIFICATION	6.749870389249045E-5	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999919029586033	WITHOUT_CLASSIFICATION	8.097041396699495E-5	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999696959081776	WITHOUT_CLASSIFICATION	3.0304091822303592E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999570431586267	WITHOUT_CLASSIFICATION	4.295684137330727E-5	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999420057160067	WITHOUT_CLASSIFICATION	5.799428399333952E-5	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999019694027131	WITHOUT_CLASSIFICATION	9.803059728680287E-5	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999325012961074	WITHOUT_CLASSIFICATION	6.749870389249045E-5	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999575077215264	WITHOUT_CLASSIFICATION	4.24922784736229E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999493503386239	WITHOUT_CLASSIFICATION	5.064966137619492E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999570431586267	WITHOUT_CLASSIFICATION	4.295684137330727E-5	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999321295497983	WITHOUT_CLASSIFICATION	6.787045020163674E-5	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9999011288369268	WITHOUT_CLASSIFICATION	9.887116307321007E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999822640245424	WITHOUT_CLASSIFICATION	1.773597545761478E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999745535015592	WITHOUT_CLASSIFICATION	2.5446498440918514E-5	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999112884778971	WITHOUT_CLASSIFICATION	8.871152210286185E-5	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999633229501173	WITHOUT_CLASSIFICATION	3.6677049882738546E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9998666663656439	WITHOUT_CLASSIFICATION	1.3333363435602262E-4	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999529317558277	WITHOUT_CLASSIFICATION	4.706824417220312E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998717748718736	WITHOUT_CLASSIFICATION	1.2822512812642913E-4	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999380816461457	WITHOUT_CLASSIFICATION	6.191835385433192E-5	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999620556822599	WITHOUT_CLASSIFICATION	3.794431774016303E-5	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999676913248816	WITHOUT_CLASSIFICATION	3.2308675118387216E-5	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999282963617394	WITHOUT_CLASSIFICATION	7.170363826063075E-5	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999986910599755	WITHOUT_CLASSIFICATION	1.3089400245090154E-5	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999660523811409	WITHOUT_CLASSIFICATION	3.394761885910694E-5	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999893362024443	WITHOUT_CLASSIFICATION	1.0663797555738028E-5	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999446235975357	WITHOUT_CLASSIFICATION	5.537640246425784E-5	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999192669393899	WITHOUT_CLASSIFICATION	8.073306061014326E-5	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999803582462755	WITHOUT_CLASSIFICATION	1.9641753724555043E-5	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999638450522547	WITHOUT_CLASSIFICATION	3.6154947745299246E-5	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999223000767872	WITHOUT_CLASSIFICATION	7.769992321281996E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9998995049704834	WITHOUT_CLASSIFICATION	1.0049502951662114E-4	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999663471332447	WITHOUT_CLASSIFICATION	3.365286675532714E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998717748718736	WITHOUT_CLASSIFICATION	1.2822512812642913E-4	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999366874373177	WITHOUT_CLASSIFICATION	6.331256268231659E-5	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9999147579171728	WITHOUT_CLASSIFICATION	8.524208282715996E-5	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999005822610129	WITHOUT_CLASSIFICATION	9.941773898715065E-5	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9998945933508474	WITHOUT_CLASSIFICATION	1.0540664915252343E-4	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999382823274501	WITHOUT_CLASSIFICATION	6.171767254988325E-5	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9999059566904275	WITHOUT_CLASSIFICATION	9.404330957252482E-5	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9999046665752821	WITHOUT_CLASSIFICATION	9.533342471792412E-5	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9998888449764075	WITHOUT_CLASSIFICATION	1.111550235924842E-4	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999222171165951	WITHOUT_CLASSIFICATION	7.778288340487294E-5	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9998962948618556	WITHOUT_CLASSIFICATION	1.0370513814443282E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999969337177076	WITHOUT_CLASSIFICATION	3.066282292393052E-5	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999672205481357	WITHOUT_CLASSIFICATION	3.2779451864302885E-5	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999672485086022	WITHOUT_CLASSIFICATION	3.275149139772046E-5	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999905316618543	WITHOUT_CLASSIFICATION	9.468338145855558E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999499409735307	WITHOUT_CLASSIFICATION	5.005902646921198E-5	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999977386896399	WITHOUT_CLASSIFICATION	2.2613103600368364E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999556576632441	WITHOUT_CLASSIFICATION	4.434233675593494E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999969337177076	WITHOUT_CLASSIFICATION	3.066282292393052E-5	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999958399957196	WITHOUT_CLASSIFICATION	4.160004280390271E-6	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999389179257155	WITHOUT_CLASSIFICATION	6.108207428450633E-5	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999519842556093	WITHOUT_CLASSIFICATION	4.801574439066455E-5	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999461816992083	WITHOUT_CLASSIFICATION	5.381830079173705E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999760495353045	WITHOUT_CLASSIFICATION	2.3950464695490105E-5	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.999993320419884	WITHOUT_CLASSIFICATION	6.679580116047727E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999499409735307	WITHOUT_CLASSIFICATION	5.005902646921198E-5	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999693658295574	WITHOUT_CLASSIFICATION	3.063417044252137E-5	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999772557020785	WITHOUT_CLASSIFICATION	2.2744297921440533E-5	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999499335307714	WITHOUT_CLASSIFICATION	5.0066469228661146E-5	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974686610782929	WITHOUT_CLASSIFICATION	0.0025313389217070806	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983356550959497	WITHOUT_CLASSIFICATION	0.001664344904050288	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998470635260169	WITHOUT_CLASSIFICATION	0.0015293647398310025	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999729022481103	WITHOUT_CLASSIFICATION	2.7097751889729435E-5	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999729022481103	WITHOUT_CLASSIFICATION	2.7097751889729435E-5	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.999924609959409	WITHOUT_CLASSIFICATION	7.53900405910463E-5	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999726907665564	WITHOUT_CLASSIFICATION	2.7309233443535938E-5	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999171686222431	WITHOUT_CLASSIFICATION	8.283137775687956E-5	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999232515523664	WITHOUT_CLASSIFICATION	7.674844763361905E-5	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9998581482844449	WITHOUT_CLASSIFICATION	1.418517155551093E-4	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999466130430208	WITHOUT_CLASSIFICATION	5.3386956979185566E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999520772479921	WITHOUT_CLASSIFICATION	4.792275200784796E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999166615993067	WITHOUT_CLASSIFICATION	8.333840069324374E-5	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999875280887708	WITHOUT_CLASSIFICATION	1.2471911229068304E-5	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999602686430752	WITHOUT_CLASSIFICATION	3.9731356924933826E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999466130430208	WITHOUT_CLASSIFICATION	5.3386956979185566E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999520772479921	WITHOUT_CLASSIFICATION	4.792275200784796E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999166615993067	WITHOUT_CLASSIFICATION	8.333840069324374E-5	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9977966743755758	WITHOUT_CLASSIFICATION	0.002203325624424111	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9999235022648509	WITHOUT_CLASSIFICATION	7.649773514902484E-5	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999883904227783	WITHOUT_CLASSIFICATION	1.1609577221620353E-5	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999808899517436	WITHOUT_CLASSIFICATION	1.9110048256427115E-5	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999671237639229	WITHOUT_CLASSIFICATION	3.287623607705177E-5	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999841427098894	WITHOUT_CLASSIFICATION	1.5857290110578234E-5	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999158531500382	WITHOUT_CLASSIFICATION	8.414684996176165E-5	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9998928688181926	WITHOUT_CLASSIFICATION	1.0713118180727964E-4	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9969153692374679	WITHOUT_CLASSIFICATION	0.003084630762532144	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999100416823538	WITHOUT_CLASSIFICATION	8.995831764630449E-5	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999553977928606	WITHOUT_CLASSIFICATION	4.460220713939427E-5	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999758380690916	WITHOUT_CLASSIFICATION	2.4161930908484132E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999474927705396	WITHOUT_CLASSIFICATION	5.250722946025931E-5	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999466985381397	WITHOUT_CLASSIFICATION	5.3301461860228966E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999662608647821	WITHOUT_CLASSIFICATION	3.373913521790226E-5	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999108261213057	WITHOUT_CLASSIFICATION	8.917387869443248E-5	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999380113159964	WITHOUT_CLASSIFICATION	6.198868400368762E-5	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999303418662311	WITHOUT_CLASSIFICATION	6.965813376882798E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999923028701733	WITHOUT_CLASSIFICATION	7.697129826673005E-6	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999760914474151	WITHOUT_CLASSIFICATION	2.390855258486894E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999874044893807	WITHOUT_CLASSIFICATION	1.2595510619160755E-5	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999948189764242	WITHOUT_CLASSIFICATION	5.181023575803412E-5	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999828607122826	WITHOUT_CLASSIFICATION	1.7139287717330534E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999939971703332	WITHOUT_CLASSIFICATION	6.002829666819973E-6	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9997774232452282	WITHOUT_CLASSIFICATION	2.2257675477172653E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401703046156	WITHOUT_CLASSIFICATION	5.982969538439559E-5	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999476099426637	WITHOUT_CLASSIFICATION	5.239005733635734E-5	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999942725580948	WITHOUT_CLASSIFICATION	5.727441905218848E-6	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999498170629209	WITHOUT_CLASSIFICATION	5.018293707920828E-5	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999305565416193	WITHOUT_CLASSIFICATION	6.94434583807065E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999278012687524	WITHOUT_CLASSIFICATION	7.219873124759388E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999278012687524	WITHOUT_CLASSIFICATION	7.219873124759388E-5	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999813924344543	WITHOUT_CLASSIFICATION	1.8607565545683133E-5	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999961123599205	WITHOUT_CLASSIFICATION	3.887640079527061E-6	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999604974680882	WITHOUT_CLASSIFICATION	3.950253191174876E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999801208916375	WITHOUT_CLASSIFICATION	1.987910836255863E-5	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9998949675739852	WITHOUT_CLASSIFICATION	1.0503242601481988E-4	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999849424520374	WITHOUT_CLASSIFICATION	1.5057547962660227E-5	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.99693940712195	WITHOUT_CLASSIFICATION	0.003060592878050017	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999662899748057	WITHOUT_CLASSIFICATION	3.3710025194356E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999039307879266	WITHOUT_CLASSIFICATION	9.606921207341889E-5	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999588167222776	WITHOUT_CLASSIFICATION	4.118327772242967E-5	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700804526898	WITHOUT_CLASSIFICATION	2.991954731025625E-5	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494311048815	WITHOUT_CLASSIFICATION	5.056889511851679E-5	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999955808507741	WITHOUT_CLASSIFICATION	4.4191492258947815E-5	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999558050877416	WITHOUT_CLASSIFICATION	4.4194912258303286E-5	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999466578923714	WITHOUT_CLASSIFICATION	5.33421076287532E-5	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999585683900337	WITHOUT_CLASSIFICATION	4.1431609966271364E-5	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999667748711019	WITHOUT_CLASSIFICATION	3.322512889817718E-5	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999564920677222	WITHOUT_CLASSIFICATION	4.350793227791705E-5	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999415587979793	WITHOUT_CLASSIFICATION	5.844120202055566E-5	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999532897603002	WITHOUT_CLASSIFICATION	4.671023969982378E-5	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999679895643494	WITHOUT_CLASSIFICATION	3.201043565063266E-5	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999678067271085	WITHOUT_CLASSIFICATION	3.219327289153223E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998794053555385	WITHOUT_CLASSIFICATION	1.2059464446139102E-4	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.999994523677439	WITHOUT_CLASSIFICATION	5.476322561002797E-6	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999918796670461	WITHOUT_CLASSIFICATION	8.120332953941871E-6	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9996950660060321	WITHOUT_CLASSIFICATION	3.049339939678686E-4	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999897578624887	WITHOUT_CLASSIFICATION	1.0242137511229858E-5	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999785579502914	WITHOUT_CLASSIFICATION	2.1442049708592263E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998794053555385	WITHOUT_CLASSIFICATION	1.2059464446139102E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998794053555385	WITHOUT_CLASSIFICATION	1.2059464446139102E-4	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999933542433249	WITHOUT_CLASSIFICATION	6.645756675073475E-6	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999934769228845	WITHOUT_CLASSIFICATION	6.523077115497561E-5	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999968182736644	WITHOUT_CLASSIFICATION	3.1817263356535214E-6	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999863205754218	WITHOUT_CLASSIFICATION	1.3679424578105339E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9997459802637068	WITHOUT_CLASSIFICATION	2.5401973629329513E-4	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999923028701733	WITHOUT_CLASSIFICATION	7.697129826673005E-6	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999382833087072	WITHOUT_CLASSIFICATION	6.171669129277016E-5	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999352891805691	WITHOUT_CLASSIFICATION	6.471081943096226E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.999966863497863	WITHOUT_CLASSIFICATION	3.3136502137046044E-5	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999273074276777	WITHOUT_CLASSIFICATION	7.269257232235857E-5	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999931767070217	WITHOUT_CLASSIFICATION	6.8232929784168665E-6	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999477672048979	WITHOUT_CLASSIFICATION	5.2232795102130807E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999556001593299	WITHOUT_CLASSIFICATION	4.439984067001021E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999556001593299	WITHOUT_CLASSIFICATION	4.439984067001021E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999559590616609	WITHOUT_CLASSIFICATION	4.4040938339136885E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999559590616609	WITHOUT_CLASSIFICATION	4.4040938339136885E-5	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999131519127356	WITHOUT_CLASSIFICATION	8.684808726437398E-5	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999404881598045	WITHOUT_CLASSIFICATION	5.9511840195449774E-5	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999801535364734	WITHOUT_CLASSIFICATION	1.9846463526621765E-5	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999145021969962	WITHOUT_CLASSIFICATION	8.549780300385339E-5	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999895636727694	WITHOUT_CLASSIFICATION	1.043632723065381E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999735907748317	WITHOUT_CLASSIFICATION	2.6409225168284707E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999935920999859	WITHOUT_CLASSIFICATION	6.407900014110354E-5	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999945932042473	WITHOUT_CLASSIFICATION	5.406795752697855E-5	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.99993999195264	WITHOUT_CLASSIFICATION	6.000804735999179E-5	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999446367029089	WITHOUT_CLASSIFICATION	5.536329709105678E-5	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999622113016294	WITHOUT_CLASSIFICATION	3.7788698370491677E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999051661634842	WITHOUT_CLASSIFICATION	9.483383651582233E-5	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999619769501761	WITHOUT_CLASSIFICATION	3.802304982397243E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999420087522009	WITHOUT_CLASSIFICATION	5.7991247799247485E-5	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999368521171262	WITHOUT_CLASSIFICATION	6.314788287370556E-5	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999031662596565	WITHOUT_CLASSIFICATION	9.683374034353885E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999352631256617	WITHOUT_CLASSIFICATION	6.473687433821465E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999352631256617	WITHOUT_CLASSIFICATION	6.473687433821465E-5	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999637665049597	WITHOUT_CLASSIFICATION	3.6233495040251444E-5	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9998893279250466	WITHOUT_CLASSIFICATION	1.1067207495346932E-4	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999868722505377	WITHOUT_CLASSIFICATION	1.3127749462250933E-5	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999360189144267	WITHOUT_CLASSIFICATION	6.398108557328847E-5	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999319758657318	WITHOUT_CLASSIFICATION	6.802413426819801E-5	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999944648431117	WITHOUT_CLASSIFICATION	5.535156888304391E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985468318455023	WITHOUT_CLASSIFICATION	0.0014531681544976873	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999696623401638	WITHOUT_CLASSIFICATION	3.0337659836075516E-5	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999996266356893	WITHOUT_CLASSIFICATION	3.7336431068743506E-6	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999927776771618	WITHOUT_CLASSIFICATION	7.222322838311876E-6	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999835033455003	WITHOUT_CLASSIFICATION	1.6496654499680302E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999052339646386	WITHOUT_CLASSIFICATION	9.476603536140577E-5	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999937853296078	WITHOUT_CLASSIFICATION	6.214670392148618E-6	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998543450480031	WITHOUT_CLASSIFICATION	1.4565495199695362E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999003211061187	WITHOUT_CLASSIFICATION	9.96788938812142E-5	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999806810500568	WITHOUT_CLASSIFICATION	1.9318949943181944E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999538327710289	WITHOUT_CLASSIFICATION	4.616722897102821E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999569129331208	WITHOUT_CLASSIFICATION	4.308706687918131E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999729587846539	WITHOUT_CLASSIFICATION	2.7041215346110902E-5	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999997302548849	WITHOUT_CLASSIFICATION	2.697451151569579E-7	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999931989567962	WITHOUT_CLASSIFICATION	6.801043203871067E-6	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999964661227017	WITHOUT_CLASSIFICATION	3.533877298221637E-6	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999892319132981	WITHOUT_CLASSIFICATION	1.0768086701899386E-5	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999376905741908	WITHOUT_CLASSIFICATION	6.230942580917023E-5	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.99997962734146	WITHOUT_CLASSIFICATION	2.0372658539978704E-5	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999546501342206	WITHOUT_CLASSIFICATION	4.534986577954926E-5	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999397882897165	WITHOUT_CLASSIFICATION	6.0211710283519396E-5	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999996854089645	WITHOUT_CLASSIFICATION	3.1459103550254836E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999530830276478	WITHOUT_CLASSIFICATION	4.691697235212462E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999997938164995	WITHOUT_CLASSIFICATION	2.061835004442978E-7	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999407031252561	WITHOUT_CLASSIFICATION	5.929687474387755E-5	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999359513370001	WITHOUT_CLASSIFICATION	6.404866299998606E-5	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9998767665633228	WITHOUT_CLASSIFICATION	1.2323343667723367E-4	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999187160319094	WITHOUT_CLASSIFICATION	8.128396809052623E-5	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999246041444079	WITHOUT_CLASSIFICATION	7.539585559215689E-5	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999968567956267	WITHOUT_CLASSIFICATION	3.1432043732225006E-6	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999308240379877	WITHOUT_CLASSIFICATION	6.917596201230433E-5	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999412933364721	WITHOUT_CLASSIFICATION	5.870666352786802E-5	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.999923976777138	WITHOUT_CLASSIFICATION	7.602322286203967E-5	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999988139907783	WITHOUT_CLASSIFICATION	1.1860092217460796E-6	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999221044136672	WITHOUT_CLASSIFICATION	7.789558633275593E-5	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999736490857217	WITHOUT_CLASSIFICATION	2.6350914278319208E-5	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999995716345577	WITHOUT_CLASSIFICATION	4.283654422961629E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999800719622328	WITHOUT_CLASSIFICATION	1.992803776711148E-5	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999088073326611	WITHOUT_CLASSIFICATION	9.11926673388981E-5	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999206898372943	WITHOUT_CLASSIFICATION	7.931016270576436E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999733250536661	WITHOUT_CLASSIFICATION	2.6674946333984153E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999488342239922	WITHOUT_CLASSIFICATION	5.1165776007779786E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.999943974639605	WITHOUT_CLASSIFICATION	5.602536039485765E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999977311269935	WITHOUT_CLASSIFICATION	2.2688730064978514E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999423219667923	WITHOUT_CLASSIFICATION	5.7678033207815904E-5	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999953284640331	WITHOUT_CLASSIFICATION	4.67153596690002E-5	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999665735400624	WITHOUT_CLASSIFICATION	3.342645993753494E-5	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999883985528576	WITHOUT_CLASSIFICATION	1.1601447142388869E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999347827139854	WITHOUT_CLASSIFICATION	6.521728601458641E-5	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999175566862414	WITHOUT_CLASSIFICATION	8.244331375866321E-5	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999433106798258	WITHOUT_CLASSIFICATION	5.668932017433469E-5	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999787473898712	WITHOUT_CLASSIFICATION	2.1252610128791012E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998670947730381	WITHOUT_CLASSIFICATION	1.329052269618191E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999845870139802	WITHOUT_CLASSIFICATION	1.541298601979022E-5	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999917128587993	WITHOUT_CLASSIFICATION	8.287141200657892E-6	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999966730182799	WITHOUT_CLASSIFICATION	3.326981720076718E-6	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999897096264889	WITHOUT_CLASSIFICATION	1.0290373511119367E-5	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999858155442117	WITHOUT_CLASSIFICATION	1.4184455788322271E-5	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999695124218307	WITHOUT_CLASSIFICATION	3.0487578169232625E-5	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999988357640626	WITHOUT_CLASSIFICATION	1.1642359373929229E-5	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999592314048721	WITHOUT_CLASSIFICATION	4.0768595127944626E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999222478713471	WITHOUT_CLASSIFICATION	7.775212865298472E-5	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999279962526152	WITHOUT_CLASSIFICATION	7.200374738487284E-5	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999070635285091	WITHOUT_CLASSIFICATION	9.293647149092197E-5	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999771547526888	WITHOUT_CLASSIFICATION	2.2845247311267133E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999846524985911	WITHOUT_CLASSIFICATION	1.5347501408824058E-5	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9998959530068463	WITHOUT_CLASSIFICATION	1.0404699315377177E-4	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999725933311103	WITHOUT_CLASSIFICATION	2.740666888960236E-5	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999919577348703	WITHOUT_CLASSIFICATION	8.042265129788672E-6	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.999910875929167	WITHOUT_CLASSIFICATION	8.91240708328487E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999892882580413	WITHOUT_CLASSIFICATION	1.0711741958599453E-5	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999756269528769	WITHOUT_CLASSIFICATION	2.43730471230024E-5	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999794836474637	WITHOUT_CLASSIFICATION	2.0516352536285945E-5	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999038505914044	WITHOUT_CLASSIFICATION	9.614940859553072E-5	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999354182833998	WITHOUT_CLASSIFICATION	6.4581716600222E-5	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999534917536108	WITHOUT_CLASSIFICATION	4.650824638918531E-5	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9998216710999448	WITHOUT_CLASSIFICATION	1.7832890005522363E-4	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999270141879453	WITHOUT_CLASSIFICATION	7.298581205474585E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9997338960813138	WITHOUT_CLASSIFICATION	2.6610391868625094E-4	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.999841056093847	WITHOUT_CLASSIFICATION	1.5894390615295723E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999217414216947	WITHOUT_CLASSIFICATION	7.82585783054333E-5	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.999942674423284	WITHOUT_CLASSIFICATION	5.7325576715987064E-5	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999547842982462	WITHOUT_CLASSIFICATION	4.521570175373187E-5	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999612143694134	WITHOUT_CLASSIFICATION	3.878563058648451E-5	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999277097746392	WITHOUT_CLASSIFICATION	7.229022536082736E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999932790380808	WITHOUT_CLASSIFICATION	6.720961919240605E-6	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999115769889858	WITHOUT_CLASSIFICATION	8.842301101425388E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999025985447773	WITHOUT_CLASSIFICATION	9.740145522276054E-5	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999406636527643	WITHOUT_CLASSIFICATION	5.933634723570163E-5	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999569842596787	WITHOUT_CLASSIFICATION	4.301574032142386E-5	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999888235711867	WITHOUT_CLASSIFICATION	1.117642881330329E-5	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999635725562332	WITHOUT_CLASSIFICATION	3.64274437668087E-5	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999258764163881	WITHOUT_CLASSIFICATION	7.412358361195074E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.999938857063336	WITHOUT_CLASSIFICATION	6.114293666410246E-5	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999467229911216	WITHOUT_CLASSIFICATION	5.327700887831086E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999514884569055	WITHOUT_CLASSIFICATION	4.851154309452674E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999514884569055	WITHOUT_CLASSIFICATION	4.851154309452674E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999195915947188	WITHOUT_CLASSIFICATION	8.040840528128075E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.999941916814286	WITHOUT_CLASSIFICATION	5.8083185714048163E-5	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999954890701229	WITHOUT_CLASSIFICATION	4.5109298770939634E-5	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999795571049921	WITHOUT_CLASSIFICATION	2.0442895007924346E-5	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999830460567378	WITHOUT_CLASSIFICATION	1.6953943262189608E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999797897022977	WITHOUT_CLASSIFICATION	2.0210297702198662E-5	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999462992475044	WITHOUT_CLASSIFICATION	5.3700752495615384E-5	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999340478938913	WITHOUT_CLASSIFICATION	6.595210610878565E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999774861966191	WITHOUT_CLASSIFICATION	2.2513803380943035E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999888540319709	WITHOUT_CLASSIFICATION	1.1145968029112165E-5	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999974026567346	WITHOUT_CLASSIFICATION	2.5973432653664555E-6	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999583508237992	WITHOUT_CLASSIFICATION	4.1649176200859994E-5	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999700722672945	WITHOUT_CLASSIFICATION	2.9927732705488167E-5	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999594495004481	WITHOUT_CLASSIFICATION	4.0550499551762894E-5	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999571470822556	WITHOUT_CLASSIFICATION	4.2852917744322834E-5	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999900200998992	WITHOUT_CLASSIFICATION	9.979900100790307E-5	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999900200998992	WITHOUT_CLASSIFICATION	9.979900100790307E-5	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999903389178909	WITHOUT_CLASSIFICATION	9.661082109094434E-6	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999722999435103	WITHOUT_CLASSIFICATION	2.7700056489685446E-5	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999110490099873	WITHOUT_CLASSIFICATION	8.895099001267407E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999735161378233	WITHOUT_CLASSIFICATION	2.6483862176828758E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999051661634842	WITHOUT_CLASSIFICATION	9.483383651582233E-5	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999034723203948	WITHOUT_CLASSIFICATION	9.652767960530133E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999405795500227	WITHOUT_CLASSIFICATION	5.9420449977297004E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999596613210252	WITHOUT_CLASSIFICATION	4.033867897468852E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999596613210252	WITHOUT_CLASSIFICATION	4.033867897468852E-5	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999626792545249	WITHOUT_CLASSIFICATION	3.73207454751518E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999949876493304	WITHOUT_CLASSIFICATION	5.012350669589758E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999864014610376	WITHOUT_CLASSIFICATION	1.35985389625171E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999028635702	WITHOUT_CLASSIFICATION	9.713642972327078E-8	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999985706491635	WITHOUT_CLASSIFICATION	1.4293508364402354E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999624206273323	WITHOUT_CLASSIFICATION	3.7579372667714586E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999692264616499	WITHOUT_CLASSIFICATION	3.0773538350087076E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999520276427832	WITHOUT_CLASSIFICATION	4.7972357216677E-5	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999359132733401	WITHOUT_CLASSIFICATION	6.408672665992292E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999702639460494	WITHOUT_CLASSIFICATION	2.9736053950590067E-5	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999435993449053	WITHOUT_CLASSIFICATION	5.640065509463606E-5	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998900273176734	WITHOUT_CLASSIFICATION	1.0997268232668496E-4	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9998963631104725	WITHOUT_CLASSIFICATION	1.0363688952755752E-4	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999959081773859	WITHOUT_CLASSIFICATION	4.0918226141015944E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999720235678669	WITHOUT_CLASSIFICATION	2.797643213308531E-5	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999417725335286	WITHOUT_CLASSIFICATION	5.8227466471487085E-5	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.999960261074981	WITHOUT_CLASSIFICATION	3.973892501892834E-5	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999227662760026	WITHOUT_CLASSIFICATION	7.723372399741386E-5	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9985652835148495	WITHOUT_CLASSIFICATION	0.0014347164851504803	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999117015141996	WITHOUT_CLASSIFICATION	8.829848580036837E-5	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999088684353549	WITHOUT_CLASSIFICATION	9.113156464517487E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999801893313253	WITHOUT_CLASSIFICATION	1.9810668674749874E-5	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999400664590178	WITHOUT_CLASSIFICATION	5.993354098221449E-5	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999467531631254	WITHOUT_CLASSIFICATION	5.324683687452679E-5	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999796300385247	WITHOUT_CLASSIFICATION	2.0369961475308871E-4	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999981513624808	WITHOUT_CLASSIFICATION	1.8486375191997052E-6	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999947595889881	WITHOUT_CLASSIFICATION	5.240411011876464E-6	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9998909455231327	WITHOUT_CLASSIFICATION	1.0905447686728285E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999879878816649	WITHOUT_CLASSIFICATION	1.2012118335155176E-5	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999500092277923	WITHOUT_CLASSIFICATION	4.9990772207787054E-5	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999041698391118	WITHOUT_CLASSIFICATION	9.583016088819258E-5	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999460730672098	WITHOUT_CLASSIFICATION	5.3926932790186263E-5	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999791137784144	WITHOUT_CLASSIFICATION	2.08862215855438E-5	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9998886807064747	WITHOUT_CLASSIFICATION	1.1131929352521396E-4	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999177161096113	WITHOUT_CLASSIFICATION	8.228389038862868E-5	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9999093972388228	WITHOUT_CLASSIFICATION	9.060276117720075E-5	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999169942309247	WITHOUT_CLASSIFICATION	8.300576907535418E-5	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.999904093548276	WITHOUT_CLASSIFICATION	9.590645172388028E-5	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999958829388191	WITHOUT_CLASSIFICATION	4.117061180900359E-5	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999865828894957	WITHOUT_CLASSIFICATION	1.3417110504403517E-5	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999901915558901	WITHOUT_CLASSIFICATION	9.808444109809449E-6	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9998941064392951	WITHOUT_CLASSIFICATION	1.0589356070497096E-4	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999788564630073	WITHOUT_CLASSIFICATION	2.1143536992660178E-5	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999997562881622	WITHOUT_CLASSIFICATION	2.4371183785060536E-7	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999481083086873	WITHOUT_CLASSIFICATION	5.189169131272338E-5	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.999904093548276	WITHOUT_CLASSIFICATION	9.590645172388028E-5	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999958829388191	WITHOUT_CLASSIFICATION	4.117061180900359E-5	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.999958317242784	WITHOUT_CLASSIFICATION	4.168275721604731E-5	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999184887248558	WITHOUT_CLASSIFICATION	8.151127514424249E-5	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999712574129987	WITHOUT_CLASSIFICATION	2.8742587001334283E-5	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999560231730422	WITHOUT_CLASSIFICATION	4.397682695782728E-5	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999880026113629	WITHOUT_CLASSIFICATION	1.1997388637188226E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999923854365075	WITHOUT_CLASSIFICATION	7.614563492445278E-6	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999127676250795	WITHOUT_CLASSIFICATION	8.723237492041353E-5	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999424652359359	WITHOUT_CLASSIFICATION	5.753476406409118E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9998416608978855	WITHOUT_CLASSIFICATION	1.5833910211437538E-4	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999838354176888	WITHOUT_CLASSIFICATION	1.616458231126274E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9998416608978855	WITHOUT_CLASSIFICATION	1.5833910211437538E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999860452200111	WITHOUT_CLASSIFICATION	1.3954779988909458E-5	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999224363032204	WITHOUT_CLASSIFICATION	7.756369677957478E-5	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999856444061055	WITHOUT_CLASSIFICATION	1.4355593894448787E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999127840563515	WITHOUT_CLASSIFICATION	8.721594364852091E-5	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999659829824842	WITHOUT_CLASSIFICATION	3.401701751576179E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999561627753004	WITHOUT_CLASSIFICATION	4.3837224699486726E-5	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999651234255844	WITHOUT_CLASSIFICATION	3.487657441565611E-5	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999367112651065	WITHOUT_CLASSIFICATION	6.328873489345553E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998964857836049	WITHOUT_CLASSIFICATION	1.0351421639509695E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999250851651723	WITHOUT_CLASSIFICATION	7.491483482774515E-5	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999136281207531	WITHOUT_CLASSIFICATION	8.637187924681003E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999134836262884	WITHOUT_CLASSIFICATION	8.651637371158957E-5	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999552134496904	WITHOUT_CLASSIFICATION	4.478655030958159E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9969196363644651	WITHOUT_CLASSIFICATION	0.003080363635534868	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.997860242201542	WITHOUT_CLASSIFICATION	0.0021397577984579854	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9999300600813787	WITHOUT_CLASSIFICATION	6.993991862130008E-5	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999567483890216	WITHOUT_CLASSIFICATION	4.3251610978432306E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9969221306922258	WITHOUT_CLASSIFICATION	0.003077869307774105	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9999138832325181	WITHOUT_CLASSIFICATION	8.611676748194747E-5	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999839757816916	WITHOUT_CLASSIFICATION	1.602421830835628E-5	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999734328282167	WITHOUT_CLASSIFICATION	2.6567171783276536E-5	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999619960171653	WITHOUT_CLASSIFICATION	3.800398283481735E-5	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999564239536285	WITHOUT_CLASSIFICATION	4.357604637147582E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999418266284309	WITHOUT_CLASSIFICATION	5.817337156896746E-5	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9969233123459447	WITHOUT_CLASSIFICATION	0.0030766876540553527	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999631013754233	WITHOUT_CLASSIFICATION	3.6898624576658125E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999271472460691	WITHOUT_CLASSIFICATION	7.285275393080802E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999584883048986	WITHOUT_CLASSIFICATION	4.151169510142934E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999330663958436	WITHOUT_CLASSIFICATION	6.693360415635426E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999374521190669	WITHOUT_CLASSIFICATION	6.254788093310455E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999055469566281	WITHOUT_CLASSIFICATION	9.445304337186228E-5	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.99998409582458	WITHOUT_CLASSIFICATION	1.5904175420042576E-5	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.998244477870737	WITHOUT_CLASSIFICATION	0.001755522129263002	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999299486972222	WITHOUT_CLASSIFICATION	7.005130277781321E-5	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999463649052885	WITHOUT_CLASSIFICATION	5.363509471156903E-5	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999016798238803	WITHOUT_CLASSIFICATION	9.832017611972272E-5	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999432397680375	WITHOUT_CLASSIFICATION	5.6760231962622584E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999134836262884	WITHOUT_CLASSIFICATION	8.651637371158957E-5	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999031546979902	WITHOUT_CLASSIFICATION	9.684530200983938E-5	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999382487812037	WITHOUT_CLASSIFICATION	6.17512187962408E-5	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9995336933185507	WITHOUT_CLASSIFICATION	4.663066814493423E-4	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999278280814496	WITHOUT_CLASSIFICATION	7.21719185503671E-5	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999760312412757	WITHOUT_CLASSIFICATION	2.3968758724305244E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999744562625626	WITHOUT_CLASSIFICATION	2.5543737437337743E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998964857836049	WITHOUT_CLASSIFICATION	1.0351421639509695E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998964857836049	WITHOUT_CLASSIFICATION	1.0351421639509695E-4	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999653484186533	WITHOUT_CLASSIFICATION	3.465158134676798E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999613753344064	WITHOUT_CLASSIFICATION	3.862466559356233E-5	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999033776851342	WITHOUT_CLASSIFICATION	9.662231486582209E-5	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999688107473009	WITHOUT_CLASSIFICATION	3.118925269898127E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999240901549801	WITHOUT_CLASSIFICATION	7.590984501998601E-5	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999564238243253	WITHOUT_CLASSIFICATION	4.35761756747333E-5	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999563710280572	WITHOUT_CLASSIFICATION	4.362897194265635E-5	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999826595998365	WITHOUT_CLASSIFICATION	1.7340400163544682E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999731817663796	WITHOUT_CLASSIFICATION	2.681823362033806E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999980589155873	WITHOUT_CLASSIFICATION	1.94108441270513E-5	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999817103701467	WITHOUT_CLASSIFICATION	1.828962985318706E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999903024772407	WITHOUT_CLASSIFICATION	9.69752275929828E-5	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999052846096164	WITHOUT_CLASSIFICATION	9.471539038372845E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999980589155873	WITHOUT_CLASSIFICATION	1.94108441270513E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999586014016518	WITHOUT_CLASSIFICATION	4.139859834827393E-5	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999587029264588	WITHOUT_CLASSIFICATION	4.1297073541275155E-5	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999365904497821	WITHOUT_CLASSIFICATION	6.340955021788214E-5	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9866874755502699	WITHOUT_CLASSIFICATION	0.013312524449730126	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999903024772407	WITHOUT_CLASSIFICATION	9.69752275929828E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999964994562665	WITHOUT_CLASSIFICATION	3.5005437335094904E-5	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999997155227792	WITHOUT_CLASSIFICATION	2.8447722081237217E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999978693071243	WITHOUT_CLASSIFICATION	2.1306928756348536E-6	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999952295096258	WITHOUT_CLASSIFICATION	4.770490374243095E-6	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999020983719136	WITHOUT_CLASSIFICATION	9.790162808646603E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999042076873048	WITHOUT_CLASSIFICATION	9.57923126950807E-5	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999455742203	WITHOUT_CLASSIFICATION	5.442577970007093E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999509295101183	WITHOUT_CLASSIFICATION	4.907048988167718E-5	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999422216648376	WITHOUT_CLASSIFICATION	5.777833516238259E-5	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.999986939504193	WITHOUT_CLASSIFICATION	1.3060495806958097E-5	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999234920502685	WITHOUT_CLASSIFICATION	7.6507949731521E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999980589155873	WITHOUT_CLASSIFICATION	1.94108441270513E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999964994562665	WITHOUT_CLASSIFICATION	3.5005437335094904E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999978693071243	WITHOUT_CLASSIFICATION	2.1306928756348536E-6	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999450623160802	WITHOUT_CLASSIFICATION	5.4937683919753403E-5	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999877447148695	WITHOUT_CLASSIFICATION	1.2255285130434285E-5	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999460874476954	WITHOUT_CLASSIFICATION	5.391255230451439E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999903024772407	WITHOUT_CLASSIFICATION	9.69752275929828E-5	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999786213170905	WITHOUT_CLASSIFICATION	2.1378682909471415E-5	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999141855172017	WITHOUT_CLASSIFICATION	8.581448279833846E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999073272979715	WITHOUT_CLASSIFICATION	9.267270202860026E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999586014016518	WITHOUT_CLASSIFICATION	4.139859834827393E-5	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999366518854494	WITHOUT_CLASSIFICATION	6.334811455059169E-5	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999056375249041	WITHOUT_CLASSIFICATION	9.436247509589352E-5	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9998709294813315	WITHOUT_CLASSIFICATION	1.290705186684617E-4	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9995576084632504	WITHOUT_CLASSIFICATION	4.4239153674966526E-4	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9994853915442801	WITHOUT_CLASSIFICATION	5.146084557199936E-4	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9999200658776776	WITHOUT_CLASSIFICATION	7.99341223223687E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999127840563515	WITHOUT_CLASSIFICATION	8.721594364852091E-5	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999553051762992	WITHOUT_CLASSIFICATION	4.4694823700830806E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999086961357135	WITHOUT_CLASSIFICATION	9.130386428637896E-5	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999931241480579	WITHOUT_CLASSIFICATION	6.875851942209905E-6	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999632561903885	WITHOUT_CLASSIFICATION	3.67438096114704E-5	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999751619698101	WITHOUT_CLASSIFICATION	2.4838030190004713E-5	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999742415999675	WITHOUT_CLASSIFICATION	2.575840003242992E-5	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999759793295865	WITHOUT_CLASSIFICATION	2.4020670413524863E-5	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999200874830271	WITHOUT_CLASSIFICATION	7.991251697291961E-5	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999577854155446	WITHOUT_CLASSIFICATION	4.221458445549384E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999073272979715	WITHOUT_CLASSIFICATION	9.267270202860026E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999086961357135	WITHOUT_CLASSIFICATION	9.130386428637896E-5	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999026206990262	WITHOUT_CLASSIFICATION	9.73793009737759E-5	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999035498334844	WITHOUT_CLASSIFICATION	9.645016651557589E-5	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9998980323020851	WITHOUT_CLASSIFICATION	1.019676979148816E-4	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9999057816182517	WITHOUT_CLASSIFICATION	9.421838174820931E-5	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999811975768158	WITHOUT_CLASSIFICATION	1.8802423184187942E-5	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999375824461249	WITHOUT_CLASSIFICATION	6.241755387515433E-5	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998976148111789	WITHOUT_CLASSIFICATION	1.023851888210507E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999325152345543	WITHOUT_CLASSIFICATION	6.74847654457539E-5	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.997859889805551	WITHOUT_CLASSIFICATION	0.0021401101944491623	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999140752491266	WITHOUT_CLASSIFICATION	8.592475087334725E-5	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999793046941753	WITHOUT_CLASSIFICATION	2.0695305824707285E-5	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.999957224957519	WITHOUT_CLASSIFICATION	4.2775042480839114E-5	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999055021635801	WITHOUT_CLASSIFICATION	9.449783641991296E-5	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.999986651435562	WITHOUT_CLASSIFICATION	1.3348564437943921E-5	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999969926908757	WITHOUT_CLASSIFICATION	3.0073091243670876E-6	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999973551986703	WITHOUT_CLASSIFICATION	2.6448013296570436E-6	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999545786408062	WITHOUT_CLASSIFICATION	4.542135919379271E-5	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999046501697075	WITHOUT_CLASSIFICATION	9.5349830292554E-5	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999536135918177	WITHOUT_CLASSIFICATION	4.6386408182399826E-5	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999244048091976	WITHOUT_CLASSIFICATION	7.559519080243063E-5	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999251561492164	WITHOUT_CLASSIFICATION	7.484385078358581E-5	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999890654327728	WITHOUT_CLASSIFICATION	1.0934567227220056E-5	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999208312877575	WITHOUT_CLASSIFICATION	7.916871224245693E-5	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.82827257648986	WITHOUT_CLASSIFICATION	0.17172742351014	IMPLEMENTATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999501950776224	WITHOUT_CLASSIFICATION	4.980492237762851E-5	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999494558320339	WITHOUT_CLASSIFICATION	5.054416796608506E-5	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999825802059792	WITHOUT_CLASSIFICATION	1.7419794020824223E-5	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9997097337987504	WITHOUT_CLASSIFICATION	2.9026620124959995E-4	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999929448203139	WITHOUT_CLASSIFICATION	7.055179686118153E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999832368530701	WITHOUT_CLASSIFICATION	1.6763146929952006E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999696896772685	WITHOUT_CLASSIFICATION	3.0310322731525758E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999889563020707	WITHOUT_CLASSIFICATION	1.1043697929249134E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999866324774938	WITHOUT_CLASSIFICATION	1.3367522506188379E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999685063451589	WITHOUT_CLASSIFICATION	3.149365484115622E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999701824186266	WITHOUT_CLASSIFICATION	2.981758137354163E-5	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999758374726828	WITHOUT_CLASSIFICATION	2.416252731717753E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999685063451589	WITHOUT_CLASSIFICATION	3.149365484115622E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999866324774938	WITHOUT_CLASSIFICATION	1.3367522506188379E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999701824186266	WITHOUT_CLASSIFICATION	2.981758137354163E-5	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999673134281232	WITHOUT_CLASSIFICATION	3.2686571876865204E-5	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999858868909094	WITHOUT_CLASSIFICATION	1.411310909053521E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999937715638206	WITHOUT_CLASSIFICATION	6.228436179425514E-6	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999163678018396	WITHOUT_CLASSIFICATION	8.363219816047994E-5	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999997469083947	WITHOUT_CLASSIFICATION	2.530916053119714E-7	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9862532254031828	WITHOUT_CLASSIFICATION	0.013746774596817094	IMPLEMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999718971218969	WITHOUT_CLASSIFICATION	2.810287810302486E-5	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999482613262508	WITHOUT_CLASSIFICATION	5.1738673749278155E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999773765764373	WITHOUT_CLASSIFICATION	2.2623423562788914E-5	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999557477517226	WITHOUT_CLASSIFICATION	4.425224827738521E-5	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999479220309989	WITHOUT_CLASSIFICATION	5.207796900099343E-5	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999872488160843	WITHOUT_CLASSIFICATION	1.2751183915771136E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998886469378976	WITHOUT_CLASSIFICATION	1.1135306210238238E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999147134369094	WITHOUT_CLASSIFICATION	8.528656309059699E-5	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999870998472007	WITHOUT_CLASSIFICATION	1.290015279923041E-5	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999820920450067	WITHOUT_CLASSIFICATION	1.7907954993361585E-5	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999956534650793	WITHOUT_CLASSIFICATION	4.346534920664302E-6	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999665615256734	WITHOUT_CLASSIFICATION	3.343847432655827E-5	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999939967784799	WITHOUT_CLASSIFICATION	6.003221520137113E-6	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999386820174205	WITHOUT_CLASSIFICATION	6.131798257946951E-5	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.999874848744899	WITHOUT_CLASSIFICATION	1.2515125510103963E-4	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999785531483678	WITHOUT_CLASSIFICATION	2.1446851632136564E-5	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999317904554311	WITHOUT_CLASSIFICATION	6.820954456891284E-5	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999891947495948	WITHOUT_CLASSIFICATION	1.0805250405093007E-5	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999340674892843	WITHOUT_CLASSIFICATION	6.593251071581445E-5	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999340674892843	WITHOUT_CLASSIFICATION	6.593251071581445E-5	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999733571735557	WITHOUT_CLASSIFICATION	2.6642826444216627E-5	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999733571735557	WITHOUT_CLASSIFICATION	2.6642826444216627E-5	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9997421346372256	WITHOUT_CLASSIFICATION	2.5786536277447276E-4	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999956534650793	WITHOUT_CLASSIFICATION	4.346534920664302E-6	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999225435097289	WITHOUT_CLASSIFICATION	7.745649027111212E-5	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999696254248213	WITHOUT_CLASSIFICATION	3.0374575178827233E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998474147533389	WITHOUT_CLASSIFICATION	1.5258524666117136E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998474147533389	WITHOUT_CLASSIFICATION	1.5258524666117136E-4	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999733260400672	WITHOUT_CLASSIFICATION	2.6673959932867783E-5	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999853229014211	WITHOUT_CLASSIFICATION	1.4677098578938874E-5	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999787901124603	WITHOUT_CLASSIFICATION	2.120988753966002E-5	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999269559119415	WITHOUT_CLASSIFICATION	7.304408805844361E-5	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999545920089544	WITHOUT_CLASSIFICATION	4.540799104553326E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999962433097925	WITHOUT_CLASSIFICATION	3.7566902075120553E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999431800053568	WITHOUT_CLASSIFICATION	5.681999464322819E-5	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9998752564355071	WITHOUT_CLASSIFICATION	1.2474356449280636E-4	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9999199785354413	WITHOUT_CLASSIFICATION	8.002146455866829E-5	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999873941684131	WITHOUT_CLASSIFICATION	1.2605831586805026E-5	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999589510126741	WITHOUT_CLASSIFICATION	4.1048987325973566E-5	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999036255352142	WITHOUT_CLASSIFICATION	9.637446478585359E-5	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999161946001788	WITHOUT_CLASSIFICATION	8.380539982125507E-5	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999187507766549	WITHOUT_CLASSIFICATION	8.124922334500575E-5	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9998062276935998	WITHOUT_CLASSIFICATION	1.9377230640022628E-4	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999609021951568	WITHOUT_CLASSIFICATION	3.9097804843287565E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999284701787625	WITHOUT_CLASSIFICATION	7.152982123745536E-5	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9994753146337407	WITHOUT_CLASSIFICATION	5.24685366259289E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.999959194502331	WITHOUT_CLASSIFICATION	4.0805497669089485E-5	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999978005861377	WITHOUT_CLASSIFICATION	2.199413862242748E-6	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999938062947412	WITHOUT_CLASSIFICATION	6.193705258791814E-5	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999414399513737	WITHOUT_CLASSIFICATION	5.856004862620276E-5	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999509161055756	WITHOUT_CLASSIFICATION	4.908389442431921E-5	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999934524127826	WITHOUT_CLASSIFICATION	6.5475872174097415E-6	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999801208916375	WITHOUT_CLASSIFICATION	1.987910836255863E-5	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999743567790527	WITHOUT_CLASSIFICATION	2.5643220947315817E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999086961357135	WITHOUT_CLASSIFICATION	9.130386428637896E-5	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999793046941753	WITHOUT_CLASSIFICATION	2.0695305824707285E-5	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999760087726693	WITHOUT_CLASSIFICATION	2.3991227330659777E-5	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.999993217763827	WITHOUT_CLASSIFICATION	6.782236173096796E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999138877835704	WITHOUT_CLASSIFICATION	8.611221642963477E-5	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999421386716928	WITHOUT_CLASSIFICATION	5.786132830712294E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999192993399937	WITHOUT_CLASSIFICATION	8.07006600063303E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999192993399937	WITHOUT_CLASSIFICATION	8.07006600063303E-5	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999841950244085	WITHOUT_CLASSIFICATION	1.5804975591551493E-5	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999325346148091	WITHOUT_CLASSIFICATION	6.746538519079691E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999834094634557	WITHOUT_CLASSIFICATION	1.659053654434787E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999834094634557	WITHOUT_CLASSIFICATION	1.659053654434787E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999651309350629	WITHOUT_CLASSIFICATION	3.486906493709973E-5	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999952611810369	WITHOUT_CLASSIFICATION	4.738818963105591E-5	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999617071653051	WITHOUT_CLASSIFICATION	3.829283469492733E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9997459802637068	WITHOUT_CLASSIFICATION	2.5401973629329513E-4	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.999954887993972	WITHOUT_CLASSIFICATION	4.511200602801594E-5	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999874549943484	WITHOUT_CLASSIFICATION	1.2545005651659136E-5	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9999169695816503	WITHOUT_CLASSIFICATION	8.303041834974694E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999956268585471	WITHOUT_CLASSIFICATION	4.3731414528981655E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999749147022111	WITHOUT_CLASSIFICATION	2.5085297788828015E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999749147022111	WITHOUT_CLASSIFICATION	2.5085297788828015E-5	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999671987829097	WITHOUT_CLASSIFICATION	3.2801217090263226E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999249394376868	WITHOUT_CLASSIFICATION	7.506056231324951E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999249394376868	WITHOUT_CLASSIFICATION	7.506056231324951E-5	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999757153080282	WITHOUT_CLASSIFICATION	2.428469197184655E-5	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999879485470952	WITHOUT_CLASSIFICATION	1.2051452904824264E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9964446708039794	WITHOUT_CLASSIFICATION	0.003555329196020638	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999765099198741	WITHOUT_CLASSIFICATION	2.349008012588646E-5	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999743614995259	WITHOUT_CLASSIFICATION	2.5638500474015153E-5	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999835942272796	WITHOUT_CLASSIFICATION	1.6405772720518068E-5	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999994363188983	WITHOUT_CLASSIFICATION	5.636811017595475E-7	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999967584451473	WITHOUT_CLASSIFICATION	3.241554852703008E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999748410284717	WITHOUT_CLASSIFICATION	2.5158971528368766E-5	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.999907990707271	WITHOUT_CLASSIFICATION	9.200929272897048E-5	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999955154440919	WITHOUT_CLASSIFICATION	4.4845559080835055E-6	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9996965963540025	WITHOUT_CLASSIFICATION	3.0340364599747583E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999916084868448	WITHOUT_CLASSIFICATION	8.391513155230182E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999916084868448	WITHOUT_CLASSIFICATION	8.391513155230182E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999916084868448	WITHOUT_CLASSIFICATION	8.391513155230182E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999916084868448	WITHOUT_CLASSIFICATION	8.391513155230182E-6	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999467338725307	WITHOUT_CLASSIFICATION	5.326612746931653E-5	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999939460427523	WITHOUT_CLASSIFICATION	6.053957247658937E-6	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998981701608869	WITHOUT_CLASSIFICATION	1.018298391131412E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999040756194265	WITHOUT_CLASSIFICATION	9.592438057343195E-5	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999564525105785	WITHOUT_CLASSIFICATION	4.354748942144707E-5	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999019517376961	WITHOUT_CLASSIFICATION	9.804826230387748E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999051661634842	WITHOUT_CLASSIFICATION	9.483383651582233E-5	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999517270670145	WITHOUT_CLASSIFICATION	4.827293298558655E-5	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.999896067439213	WITHOUT_CLASSIFICATION	1.0393256078696955E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999051661634842	WITHOUT_CLASSIFICATION	9.483383651582233E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999051661634842	WITHOUT_CLASSIFICATION	9.483383651582233E-5	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999729974372827	WITHOUT_CLASSIFICATION	2.7002562717295195E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999704884645725	WITHOUT_CLASSIFICATION	2.951153542751307E-5	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999087423485856	WITHOUT_CLASSIFICATION	9.12576514143475E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999616224315301	WITHOUT_CLASSIFICATION	3.837756846993692E-5	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999781084817487	WITHOUT_CLASSIFICATION	2.1891518251213016E-5	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999863812782862	WITHOUT_CLASSIFICATION	1.3618721713859498E-5	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999747414380952	WITHOUT_CLASSIFICATION	2.5258561904847607E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999616224315301	WITHOUT_CLASSIFICATION	3.837756846993692E-5	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999848730596105	WITHOUT_CLASSIFICATION	1.51269403894537E-5	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999434364589569	WITHOUT_CLASSIFICATION	5.656354104299195E-5	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999590815100824	WITHOUT_CLASSIFICATION	4.0918489917630787E-5	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999369681690817	WITHOUT_CLASSIFICATION	6.303183091818594E-5	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999645470132635	WITHOUT_CLASSIFICATION	3.5452986736469936E-5	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999650881621094	WITHOUT_CLASSIFICATION	3.4911837890668224E-5	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999780482494619	WITHOUT_CLASSIFICATION	2.1951750538095625E-5	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999009576052257	WITHOUT_CLASSIFICATION	9.904239477427615E-5	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999955562128836	WITHOUT_CLASSIFICATION	4.443787116407022E-5	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999875888680179	WITHOUT_CLASSIFICATION	1.2411131982171723E-5	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999558141768582	WITHOUT_CLASSIFICATION	4.418582314170433E-5	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999189508332168	WITHOUT_CLASSIFICATION	8.104916678320121E-5	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999660589238935	WITHOUT_CLASSIFICATION	3.394107610650457E-5	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.999912002350621	WITHOUT_CLASSIFICATION	8.799764937899988E-5	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999885158998174	WITHOUT_CLASSIFICATION	1.1484100182649444E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999205892651846	WITHOUT_CLASSIFICATION	7.941073481541747E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999588451557228	WITHOUT_CLASSIFICATION	4.1154844277146295E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999499797880286	WITHOUT_CLASSIFICATION	5.002021197133684E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998660125900866	WITHOUT_CLASSIFICATION	1.3398740991342118E-4	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999499797880286	WITHOUT_CLASSIFICATION	5.002021197133684E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999627407357806	WITHOUT_CLASSIFICATION	3.7259264219384934E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999833131310253	WITHOUT_CLASSIFICATION	1.668686897465092E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999221917931013	WITHOUT_CLASSIFICATION	7.780820689874466E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999821660645198	WITHOUT_CLASSIFICATION	1.7833935480134945E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999588451557228	WITHOUT_CLASSIFICATION	4.1154844277146295E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998660125900866	WITHOUT_CLASSIFICATION	1.3398740991342118E-4	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999627407357806	WITHOUT_CLASSIFICATION	3.7259264219384934E-5	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999198240132925	WITHOUT_CLASSIFICATION	8.017598670754248E-5	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999415825351293	WITHOUT_CLASSIFICATION	5.8417464870790855E-5	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9999217387881377	WITHOUT_CLASSIFICATION	7.826121186234551E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9999391148086704	WITHOUT_CLASSIFICATION	6.0885191329567326E-5	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999990284162998	WITHOUT_CLASSIFICATION	9.71583700212155E-6	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999903873681051	WITHOUT_CLASSIFICATION	9.612631894903841E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999284701787625	WITHOUT_CLASSIFICATION	7.152982123745536E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999833131310253	WITHOUT_CLASSIFICATION	1.668686897465092E-5	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999982343571174	WITHOUT_CLASSIFICATION	1.765642882570889E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999724930872961	WITHOUT_CLASSIFICATION	2.7506912703917114E-5	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999555290387522	WITHOUT_CLASSIFICATION	4.447096124780269E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999284701787625	WITHOUT_CLASSIFICATION	7.152982123745536E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999086961357135	WITHOUT_CLASSIFICATION	9.130386428637896E-5	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999600671137031	WITHOUT_CLASSIFICATION	3.9932886296929616E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999284701787625	WITHOUT_CLASSIFICATION	7.152982123745536E-5	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999716287623617	WITHOUT_CLASSIFICATION	2.8371237638262224E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999572122957	WITHOUT_CLASSIFICATION	4.278770429994803E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999086961357135	WITHOUT_CLASSIFICATION	9.130386428637896E-5	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9994481410240703	WITHOUT_CLASSIFICATION	5.518589759296277E-4	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999189827400095	WITHOUT_CLASSIFICATION	8.101725999054229E-5	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999848009313336	WITHOUT_CLASSIFICATION	1.5199068666319402E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999359333736372	WITHOUT_CLASSIFICATION	6.406662636279745E-5	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.999985735231867	WITHOUT_CLASSIFICATION	1.426476813303637E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999943285957978	WITHOUT_CLASSIFICATION	5.671404202193394E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999658738421263	WITHOUT_CLASSIFICATION	3.412615787372487E-5	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.999948860348212	WITHOUT_CLASSIFICATION	5.113965178799809E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999899651843434	WITHOUT_CLASSIFICATION	1.0034815656768565E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9964446708039794	WITHOUT_CLASSIFICATION	0.003555329196020638	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999372572104037	WITHOUT_CLASSIFICATION	6.274278959628274E-5	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999879625019636	WITHOUT_CLASSIFICATION	1.203749803640007E-5	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999061236423361	WITHOUT_CLASSIFICATION	9.387635766393615E-5	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999013381123294	WITHOUT_CLASSIFICATION	9.866188767058285E-5	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999548507283604	WITHOUT_CLASSIFICATION	4.514927163953009E-5	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999877778693657	WITHOUT_CLASSIFICATION	1.2222130634329496E-5	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999600631666268	WITHOUT_CLASSIFICATION	3.993683337313903E-5	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999817071683103	WITHOUT_CLASSIFICATION	1.8292831689772204E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999490541438579	WITHOUT_CLASSIFICATION	5.0945856141955975E-5	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999744114218415	WITHOUT_CLASSIFICATION	2.5588578158474952E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9964446708039794	WITHOUT_CLASSIFICATION	0.003555329196020638	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999322126555987	WITHOUT_CLASSIFICATION	6.778734440124929E-5	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999228679995326	WITHOUT_CLASSIFICATION	7.713200046737942E-5	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999233653320998	WITHOUT_CLASSIFICATION	7.663466790019213E-5	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999553060208716	WITHOUT_CLASSIFICATION	4.4693979128473274E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999830190837232	WITHOUT_CLASSIFICATION	1.6980916276788943E-5	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999772610928802	WITHOUT_CLASSIFICATION	2.2738907119781127E-5	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999318080799492	WITHOUT_CLASSIFICATION	6.81919200507797E-5	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999067150670851	WITHOUT_CLASSIFICATION	9.328493291490921E-5	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999629540698797	WITHOUT_CLASSIFICATION	3.704593012039284E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9964446708039794	WITHOUT_CLASSIFICATION	0.003555329196020638	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999495595791629	WITHOUT_CLASSIFICATION	5.0440420836994584E-5	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999275659570303	WITHOUT_CLASSIFICATION	7.243404296970691E-5	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9998993774747167	WITHOUT_CLASSIFICATION	1.0062252528326392E-4	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.999911123238481	WITHOUT_CLASSIFICATION	8.887676151912657E-5	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999616111835069	WITHOUT_CLASSIFICATION	3.838881649314143E-5	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998875323133768	WITHOUT_CLASSIFICATION	1.1246768662316655E-4	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999907791960384	WITHOUT_CLASSIFICATION	9.220803961569249E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999086961357135	WITHOUT_CLASSIFICATION	9.130386428637896E-5	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999572596780271	WITHOUT_CLASSIFICATION	4.274032197305562E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999659593246406	WITHOUT_CLASSIFICATION	3.4040675359419884E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999659593246406	WITHOUT_CLASSIFICATION	3.4040675359419884E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999269831058314	WITHOUT_CLASSIFICATION	7.301689416852054E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999943285957978	WITHOUT_CLASSIFICATION	5.671404202193394E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999304477493335	WITHOUT_CLASSIFICATION	6.955225066656193E-5	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999812244670594	WITHOUT_CLASSIFICATION	1.8775532940556085E-5	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999992844659311	WITHOUT_CLASSIFICATION	7.1553406889019445E-6	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.999968992146338	WITHOUT_CLASSIFICATION	3.1007853661890095E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999375066200511	WITHOUT_CLASSIFICATION	6.249337994887611E-5	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9979644570582794	WITHOUT_CLASSIFICATION	0.0020355429417205652	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999639780486508	WITHOUT_CLASSIFICATION	3.6021951349250516E-5	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999838202583454	WITHOUT_CLASSIFICATION	1.6179741654543496E-5	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999525841336535	WITHOUT_CLASSIFICATION	4.7415866346401545E-5	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999738857011676	WITHOUT_CLASSIFICATION	2.6114298832350905E-5	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999875842046567	WITHOUT_CLASSIFICATION	1.2415795343142597E-5	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999974706163998	WITHOUT_CLASSIFICATION	2.5293836003331864E-6	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999868614013199	WITHOUT_CLASSIFICATION	1.3138598680186114E-5	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998211274642	WITHOUT_CLASSIFICATION	1.7887253573172863E-7	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999411033202583	WITHOUT_CLASSIFICATION	5.889667974160507E-5	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999816696211729	WITHOUT_CLASSIFICATION	1.833037882709727E-5	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999956086231457	WITHOUT_CLASSIFICATION	4.39137685427546E-6	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999914087233618	WITHOUT_CLASSIFICATION	8.591276638206242E-6	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999914082276027	WITHOUT_CLASSIFICATION	8.591772397238259E-6	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999808369078192	WITHOUT_CLASSIFICATION	1.9163092180734186E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999629837363515	WITHOUT_CLASSIFICATION	3.7016263648452705E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999984134455261	WITHOUT_CLASSIFICATION	1.5865544739638959E-6	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998875323133768	WITHOUT_CLASSIFICATION	1.1246768662316655E-4	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999970511657154	WITHOUT_CLASSIFICATION	2.94883428467087E-6	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999879569401432	WITHOUT_CLASSIFICATION	1.2043059856695489E-5	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999907159900735	WITHOUT_CLASSIFICATION	9.284009926558632E-6	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999551582928599	WITHOUT_CLASSIFICATION	4.4841707140100944E-5	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999788415002507	WITHOUT_CLASSIFICATION	2.11584997492497E-5	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999444260135281	WITHOUT_CLASSIFICATION	5.557398647203376E-5	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.999990258727709	WITHOUT_CLASSIFICATION	9.741272290944321E-6	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999906551259324	WITHOUT_CLASSIFICATION	9.344874067497502E-6	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999910316467645	WITHOUT_CLASSIFICATION	8.968353235504631E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999913278924908	WITHOUT_CLASSIFICATION	8.672107509186826E-6	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999607016694239	WITHOUT_CLASSIFICATION	3.929833057619198E-5	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999653454571914	WITHOUT_CLASSIFICATION	3.465454280859941E-5	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.999934195510861	WITHOUT_CLASSIFICATION	6.580448913890395E-5	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999678782247473	WITHOUT_CLASSIFICATION	3.2121775252655115E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999621962100164	WITHOUT_CLASSIFICATION	3.780378998352698E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999621962100164	WITHOUT_CLASSIFICATION	3.780378998352698E-5	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999478449480284	WITHOUT_CLASSIFICATION	5.2155051971617986E-5	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999279153067716	WITHOUT_CLASSIFICATION	7.208469322835398E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999765783216639	WITHOUT_CLASSIFICATION	2.3421678336142382E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999765783216639	WITHOUT_CLASSIFICATION	2.3421678336142382E-5	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999797844865891	WITHOUT_CLASSIFICATION	2.0215513410868966E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999376634300653	WITHOUT_CLASSIFICATION	6.233656993469099E-5	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999889628019553	WITHOUT_CLASSIFICATION	1.1037198044785252E-5	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999969870048809	WITHOUT_CLASSIFICATION	3.012995119186727E-6	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999588002260758	WITHOUT_CLASSIFICATION	4.119977392417071E-5	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999588937149849	WITHOUT_CLASSIFICATION	4.1106285015085794E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999854850229394	WITHOUT_CLASSIFICATION	1.4514977060579586E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999854850229394	WITHOUT_CLASSIFICATION	1.4514977060579586E-5	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999571062602993	WITHOUT_CLASSIFICATION	4.289373970071462E-5	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999578725595122	WITHOUT_CLASSIFICATION	4.212744048776711E-5	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999173562358343	WITHOUT_CLASSIFICATION	8.264376416571763E-5	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999663428393955	WITHOUT_CLASSIFICATION	3.365716060454923E-5	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999663428393955	WITHOUT_CLASSIFICATION	3.365716060454923E-5	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999419583930511	WITHOUT_CLASSIFICATION	5.804160694875735E-5	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999635716330901	WITHOUT_CLASSIFICATION	3.6428366909857996E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999784336845393	WITHOUT_CLASSIFICATION	2.1566315460743526E-5	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.999966966336818	WITHOUT_CLASSIFICATION	3.3033663181953696E-5	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999438451582382	WITHOUT_CLASSIFICATION	5.6154841761745964E-5	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999192371169148	WITHOUT_CLASSIFICATION	8.076288308529052E-5	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999717322625842	WITHOUT_CLASSIFICATION	2.8267737415858525E-5	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999628889608246	WITHOUT_CLASSIFICATION	3.711103917530518E-5	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999635471559952	WITHOUT_CLASSIFICATION	3.645284400487269E-5	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999435918077818	WITHOUT_CLASSIFICATION	5.640819221817811E-5	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999680914846073	WITHOUT_CLASSIFICATION	3.190851539270815E-5	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.99996158140059	WITHOUT_CLASSIFICATION	3.841859940992336E-5	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9995352655743694	WITHOUT_CLASSIFICATION	4.6473442563053853E-4	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999607996655578	WITHOUT_CLASSIFICATION	3.9200334442141215E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999026918714825	WITHOUT_CLASSIFICATION	9.730812851755785E-5	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999894301230465	WITHOUT_CLASSIFICATION	1.0569876953527514E-5	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999529480566111	WITHOUT_CLASSIFICATION	4.7051943388933284E-5	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999799612377143	WITHOUT_CLASSIFICATION	2.003876228575423E-5	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999841107375179	WITHOUT_CLASSIFICATION	1.5889262482065227E-5	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999649194003281	WITHOUT_CLASSIFICATION	3.5080599671992784E-5	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999588180205996	WITHOUT_CLASSIFICATION	4.118197940027389E-5	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999422577248603	WITHOUT_CLASSIFICATION	5.774227513962125E-5	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999132033429207	WITHOUT_CLASSIFICATION	8.679665707925497E-5	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999590472241189	WITHOUT_CLASSIFICATION	4.095277588109025E-5	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9968746396262461	WITHOUT_CLASSIFICATION	0.0031253603737538384	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999747241999974	WITHOUT_CLASSIFICATION	2.5275800002658904E-5	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999736141273065	WITHOUT_CLASSIFICATION	2.638587269363589E-5	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998917654023148	WITHOUT_CLASSIFICATION	1.0823459768523009E-4	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999936362228854	WITHOUT_CLASSIFICATION	6.363777114631847E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999662608647821	WITHOUT_CLASSIFICATION	3.373913521790226E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999874044893807	WITHOUT_CLASSIFICATION	1.2595510619160755E-5	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999396711261239	WITHOUT_CLASSIFICATION	6.032887387611615E-5	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999903061238024	WITHOUT_CLASSIFICATION	9.69387619777759E-6	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999026444486818	WITHOUT_CLASSIFICATION	9.735555131820953E-5	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999581788136871	WITHOUT_CLASSIFICATION	4.182118631290312E-5	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999034332671978	WITHOUT_CLASSIFICATION	9.656673280227411E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999127740912391	WITHOUT_CLASSIFICATION	8.722590876082407E-5	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999418039291719	WITHOUT_CLASSIFICATION	5.8196070828123467E-5	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999564548268031	WITHOUT_CLASSIFICATION	4.3545173196935544E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999868338464807	WITHOUT_CLASSIFICATION	1.3166153519213732E-5	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999545790323613	WITHOUT_CLASSIFICATION	4.542096763872548E-5	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9998996925143436	WITHOUT_CLASSIFICATION	1.0030748565635019E-4	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999424962880535	WITHOUT_CLASSIFICATION	5.7503711946403756E-5	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999339233374891	WITHOUT_CLASSIFICATION	6.607666251089269E-5	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999049522527012	WITHOUT_CLASSIFICATION	9.50477472988443E-5	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.999920165519073	WITHOUT_CLASSIFICATION	7.983448092704027E-5	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999089447743837	WITHOUT_CLASSIFICATION	9.105522561617039E-5	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999909683167941	WITHOUT_CLASSIFICATION	9.031683205907726E-6	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999804596297798	WITHOUT_CLASSIFICATION	1.9540370220144474E-5	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999981512532379	WITHOUT_CLASSIFICATION	1.8487467621019697E-5	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999827098971615	WITHOUT_CLASSIFICATION	1.729010283842643E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999200579487143	WITHOUT_CLASSIFICATION	7.99420512857377E-5	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9998891182681025	WITHOUT_CLASSIFICATION	1.10881731897475E-4	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999853153198888	WITHOUT_CLASSIFICATION	1.4684680111308956E-5	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999336232630074	WITHOUT_CLASSIFICATION	6.637673699264229E-5	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999441967394627	WITHOUT_CLASSIFICATION	5.580326053728676E-5	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999239933380003	WITHOUT_CLASSIFICATION	7.60066619997306E-5	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999377181663978	WITHOUT_CLASSIFICATION	6.22818336022309E-5	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999802762555653	WITHOUT_CLASSIFICATION	1.972374443475492E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999656326514493	WITHOUT_CLASSIFICATION	3.4367348550570396E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999715020480477	WITHOUT_CLASSIFICATION	2.849795195231881E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999715020480477	WITHOUT_CLASSIFICATION	2.849795195231881E-5	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999991109165062	WITHOUT_CLASSIFICATION	8.890834938130783E-6	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999918698458435	WITHOUT_CLASSIFICATION	8.130154156551502E-6	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999992832617105	WITHOUT_CLASSIFICATION	7.16738289459093E-7	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999903684334839	WITHOUT_CLASSIFICATION	9.631566516057176E-6	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999730227446635	WITHOUT_CLASSIFICATION	2.6977255336476134E-5	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999635562100102	WITHOUT_CLASSIFICATION	3.644378998985486E-5	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999962663271743	WITHOUT_CLASSIFICATION	3.7336728257059146E-6	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999949562516407	WITHOUT_CLASSIFICATION	5.043748359342468E-6	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999712016823904	WITHOUT_CLASSIFICATION	2.879831760954267E-5	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999906361750701	WITHOUT_CLASSIFICATION	9.363824929908527E-6	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999924720956025	WITHOUT_CLASSIFICATION	7.527904397446348E-6	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999115152239185	WITHOUT_CLASSIFICATION	8.848477608147826E-5	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999949153998553	WITHOUT_CLASSIFICATION	5.084600144738696E-6	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999770667806086	WITHOUT_CLASSIFICATION	2.293321939134466E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999556576632441	WITHOUT_CLASSIFICATION	4.434233675593494E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999556576632441	WITHOUT_CLASSIFICATION	4.434233675593494E-5	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999683367264379	WITHOUT_CLASSIFICATION	3.166327356216958E-5	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999823734713886	WITHOUT_CLASSIFICATION	1.7626528611455766E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999672894276642	WITHOUT_CLASSIFICATION	3.271057233575372E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999929536901794	WITHOUT_CLASSIFICATION	7.046309820651522E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999969337177076	WITHOUT_CLASSIFICATION	3.066282292393052E-5	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999527442231918	WITHOUT_CLASSIFICATION	4.725577680813598E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9998959518692213	WITHOUT_CLASSIFICATION	1.0404813077868834E-4	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9995330341471395	WITHOUT_CLASSIFICATION	4.6696585286050136E-4	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999827516103824	WITHOUT_CLASSIFICATION	1.724838961757678E-5	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999878563610854	WITHOUT_CLASSIFICATION	1.2143638914523646E-5	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999967351836221	WITHOUT_CLASSIFICATION	3.264816377855277E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999533979731309	WITHOUT_CLASSIFICATION	4.660202686907214E-5	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999872700625072	WITHOUT_CLASSIFICATION	1.2729937492695524E-5	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999815254283151	WITHOUT_CLASSIFICATION	1.8474571684910324E-5	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999941580517091	WITHOUT_CLASSIFICATION	5.8419482908539265E-6	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999735281906286	WITHOUT_CLASSIFICATION	2.647180937134987E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999862995959626	WITHOUT_CLASSIFICATION	1.3700404037403094E-5	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999966009098407	WITHOUT_CLASSIFICATION	3.3990901594209345E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999425181529397	WITHOUT_CLASSIFICATION	5.748184706034044E-5	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999286878448813	WITHOUT_CLASSIFICATION	7.131215511861656E-5	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999832195677852	WITHOUT_CLASSIFICATION	1.6780432214708382E-5	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999982508580142	WITHOUT_CLASSIFICATION	1.7491419857634306E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999969835447715	WITHOUT_CLASSIFICATION	3.0164552283377926E-6	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999029791017302	WITHOUT_CLASSIFICATION	9.702089826979659E-5	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999758380690916	WITHOUT_CLASSIFICATION	2.4161930908484132E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999757697399461	WITHOUT_CLASSIFICATION	2.423026005385757E-5	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999913872598006	WITHOUT_CLASSIFICATION	8.61274019930793E-6	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.999997003050735	WITHOUT_CLASSIFICATION	2.9969492650200352E-6	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999964574814693	WITHOUT_CLASSIFICATION	3.5425185307034406E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999905117017232	WITHOUT_CLASSIFICATION	9.488298276833349E-6	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999926018325035	WITHOUT_CLASSIFICATION	7.3981674965355726E-6	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999712792418671	WITHOUT_CLASSIFICATION	2.8720758132858994E-5	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999730884478186	WITHOUT_CLASSIFICATION	2.69115521813558E-5	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999817574325081	WITHOUT_CLASSIFICATION	1.8242567491872487E-5	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999957142378456	WITHOUT_CLASSIFICATION	4.285762154485289E-6	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999986823218863	WITHOUT_CLASSIFICATION	1.3176781136615181E-6	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999836253490422	WITHOUT_CLASSIFICATION	1.6374650957887257E-5	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999969978148183	WITHOUT_CLASSIFICATION	3.0021851815750678E-6	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999364880374827	WITHOUT_CLASSIFICATION	6.351196251730107E-5	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999956150550494	WITHOUT_CLASSIFICATION	4.384944950597442E-6	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9993673586155708	WITHOUT_CLASSIFICATION	6.32641384429281E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9993673586155708	WITHOUT_CLASSIFICATION	6.32641384429281E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.999995389908037	WITHOUT_CLASSIFICATION	4.610091962920765E-6	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999998407392148	WITHOUT_CLASSIFICATION	1.5926078520792803E-6	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999713002834372	WITHOUT_CLASSIFICATION	2.869971656279122E-5	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999941019665582	WITHOUT_CLASSIFICATION	5.898033441799273E-5	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.999993755963748	WITHOUT_CLASSIFICATION	6.244036252045829E-6	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999789137983076	WITHOUT_CLASSIFICATION	2.1086201692331847E-5	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999608533066594	WITHOUT_CLASSIFICATION	3.9146693340590935E-5	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999742021595951	WITHOUT_CLASSIFICATION	2.579784040487211E-5	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999837459290999	WITHOUT_CLASSIFICATION	1.6254070900107593E-5	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999560038630977	WITHOUT_CLASSIFICATION	4.399613690235871E-5	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999454187845677	WITHOUT_CLASSIFICATION	5.458121543247909E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998794053555385	WITHOUT_CLASSIFICATION	1.2059464446139102E-4	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999912341219989	WITHOUT_CLASSIFICATION	8.765878001197908E-6	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999888651503553	WITHOUT_CLASSIFICATION	1.1134849644622405E-5	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999973348432116	WITHOUT_CLASSIFICATION	2.66515678845106E-6	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999874018000534	WITHOUT_CLASSIFICATION	1.259819994654571E-5	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999441885615505	WITHOUT_CLASSIFICATION	5.58114384495909E-5	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999958079076192	WITHOUT_CLASSIFICATION	4.192092380684879E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999581706868521	WITHOUT_CLASSIFICATION	4.182931314796158E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999870522292519	WITHOUT_CLASSIFICATION	1.2947770748051284E-5	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.99999208789705	WITHOUT_CLASSIFICATION	7.912102950009776E-6	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999818485129603	WITHOUT_CLASSIFICATION	1.8151487039756232E-5	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999813331897879	WITHOUT_CLASSIFICATION	1.8666810212152866E-5	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999664020072063	WITHOUT_CLASSIFICATION	3.359799279368697E-5	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999227959533024	WITHOUT_CLASSIFICATION	7.720404669770308E-5	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999861690685747	WITHOUT_CLASSIFICATION	1.3830931425280174E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999967339842485	WITHOUT_CLASSIFICATION	3.26601575155671E-6	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999831695812	WITHOUT_CLASSIFICATION	1.683041888029988E-8	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999997002196191	WITHOUT_CLASSIFICATION	2.997803808889416E-7	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999591566642356	WITHOUT_CLASSIFICATION	4.0843335764296204E-5	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999885118443024	WITHOUT_CLASSIFICATION	1.1488155697690518E-5	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999894985498256	WITHOUT_CLASSIFICATION	1.050145017442711E-5	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999997780217336	WITHOUT_CLASSIFICATION	2.2197826636292362E-7	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999865451706559	WITHOUT_CLASSIFICATION	1.345482934400704E-5	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999993374308372	WITHOUT_CLASSIFICATION	6.62569162699972E-7	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999647205830128	WITHOUT_CLASSIFICATION	3.527941698724319E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999818516399397	WITHOUT_CLASSIFICATION	1.814836006031818E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999979193500256	WITHOUT_CLASSIFICATION	2.0806499744203366E-6	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999963568166523	WITHOUT_CLASSIFICATION	3.6431833477349717E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999174436600016	WITHOUT_CLASSIFICATION	8.25563399985395E-5	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999732725671763	WITHOUT_CLASSIFICATION	2.672743282362715E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999929097922183	WITHOUT_CLASSIFICATION	7.090207781669344E-6	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999561274836946	WITHOUT_CLASSIFICATION	4.3872516305460444E-5	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999998923675903	WITHOUT_CLASSIFICATION	1.0763240957994393E-7	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999971082199283	WITHOUT_CLASSIFICATION	2.891780071691204E-6	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999383322182473	WITHOUT_CLASSIFICATION	6.16677817526364E-5	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999982083819964	WITHOUT_CLASSIFICATION	1.791618003655343E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999949153998553	WITHOUT_CLASSIFICATION	5.084600144738696E-6	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999967527226091	WITHOUT_CLASSIFICATION	3.247277390864435E-6	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999916056259655	WITHOUT_CLASSIFICATION	8.394374034621729E-6	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.999963352260516	WITHOUT_CLASSIFICATION	3.664773948401061E-5	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.999998108129573	WITHOUT_CLASSIFICATION	1.8918704270159638E-6	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.999998559636056	WITHOUT_CLASSIFICATION	1.4403639440804134E-6	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999928919680348	WITHOUT_CLASSIFICATION	7.108031965235721E-6	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999950686986102	WITHOUT_CLASSIFICATION	4.931301389784312E-6	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999932112529416	WITHOUT_CLASSIFICATION	6.7887470583240775E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999622113016294	WITHOUT_CLASSIFICATION	3.7788698370491677E-5	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999380072073253	WITHOUT_CLASSIFICATION	6.199279267472307E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999990479752389	WITHOUT_CLASSIFICATION	9.520247611791072E-7	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999635444675699	WITHOUT_CLASSIFICATION	3.645553243015243E-5	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999949083121195	WITHOUT_CLASSIFICATION	5.091687880541734E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999971386223429	WITHOUT_CLASSIFICATION	2.8613776570319954E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999212574051002	WITHOUT_CLASSIFICATION	7.874259489976881E-5	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999299399638089	WITHOUT_CLASSIFICATION	7.00600361911226E-5	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999194096063094	WITHOUT_CLASSIFICATION	8.059039369061465E-5	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.999989295664136	WITHOUT_CLASSIFICATION	1.0704335864010612E-5	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999947521037336	WITHOUT_CLASSIFICATION	5.2478962664414685E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999212574051002	WITHOUT_CLASSIFICATION	7.874259489976881E-5	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999705280207903	WITHOUT_CLASSIFICATION	2.9471979209648092E-5	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999958383538456	WITHOUT_CLASSIFICATION	4.161646154299781E-6	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999997748181877	WITHOUT_CLASSIFICATION	2.2518181230489013E-6	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999975219160568	WITHOUT_CLASSIFICATION	2.47808394322501E-6	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999954792005401	WITHOUT_CLASSIFICATION	4.520799459902892E-5	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999951163265274	WITHOUT_CLASSIFICATION	4.8836734726057715E-6	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.999994929650558	WITHOUT_CLASSIFICATION	5.070349442023401E-6	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999490634889777	WITHOUT_CLASSIFICATION	5.0936511022344146E-5	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999897374208124	WITHOUT_CLASSIFICATION	1.0262579187485805E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.999990642723652	WITHOUT_CLASSIFICATION	9.357276347993947E-6	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999402768067753	WITHOUT_CLASSIFICATION	5.972319322479234E-5	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9997947384129552	WITHOUT_CLASSIFICATION	2.0526158704476475E-4	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999639968410953	WITHOUT_CLASSIFICATION	3.6003158904726556E-5	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999110573101067	WITHOUT_CLASSIFICATION	8.894268989330145E-5	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.999971652477907	WITHOUT_CLASSIFICATION	2.834752209295421E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999984134455261	WITHOUT_CLASSIFICATION	1.5865544739638959E-6	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999934276247434	WITHOUT_CLASSIFICATION	6.5723752565631405E-6	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999982096422905	WITHOUT_CLASSIFICATION	1.7903577095269475E-6	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9983219874239483	WITHOUT_CLASSIFICATION	0.0016780125760517536	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999885274996243	WITHOUT_CLASSIFICATION	1.1472500375740479E-5	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999873636193652	WITHOUT_CLASSIFICATION	1.2636380634692728E-5	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999943201635132	WITHOUT_CLASSIFICATION	5.679836486819177E-6	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999839295513117	WITHOUT_CLASSIFICATION	1.607044868831197E-5	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999988329343614	WITHOUT_CLASSIFICATION	1.167065638576926E-6	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999857562852325	WITHOUT_CLASSIFICATION	1.4243714767538128E-5	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999953158366784	WITHOUT_CLASSIFICATION	4.684163321518417E-6	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999987153313988	WITHOUT_CLASSIFICATION	1.2846686012325555E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999806810500568	WITHOUT_CLASSIFICATION	1.9318949943181944E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999978386097789	WITHOUT_CLASSIFICATION	2.161390221241779E-6	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999998351384294	WITHOUT_CLASSIFICATION	1.648615705460723E-7	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999385250628225	WITHOUT_CLASSIFICATION	6.147493717752077E-5	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.999949185831741	WITHOUT_CLASSIFICATION	5.0814168259152716E-5	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999854429120009	WITHOUT_CLASSIFICATION	1.455708799898415E-5	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.999986799824854	WITHOUT_CLASSIFICATION	1.3200175145963404E-5	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999975695122585	WITHOUT_CLASSIFICATION	2.4304877414754592E-6	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999489771232	WITHOUT_CLASSIFICATION	5.1022876836144385E-8	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999991075718427	WITHOUT_CLASSIFICATION	8.924281572285836E-7	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999682134030358	WITHOUT_CLASSIFICATION	3.178659696426255E-5	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999544584099381	WITHOUT_CLASSIFICATION	4.55415900618439E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999932790380808	WITHOUT_CLASSIFICATION	6.720961919240605E-6	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999624648293258	WITHOUT_CLASSIFICATION	3.7535170674173734E-5	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999624648293258	WITHOUT_CLASSIFICATION	3.7535170674173734E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999797897022977	WITHOUT_CLASSIFICATION	2.0210297702198662E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999888540319709	WITHOUT_CLASSIFICATION	1.1145968029112165E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999735161378233	WITHOUT_CLASSIFICATION	2.6483862176828758E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9997459802637068	WITHOUT_CLASSIFICATION	2.5401973629329513E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9997459802637068	WITHOUT_CLASSIFICATION	2.5401973629329513E-4	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999663689120178	WITHOUT_CLASSIFICATION	3.363108798219367E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999720235678669	WITHOUT_CLASSIFICATION	2.797643213308531E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9969131651455666	WITHOUT_CLASSIFICATION	0.0030868348544332816	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999801893313253	WITHOUT_CLASSIFICATION	1.9810668674749874E-5	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999997184342042	WITHOUT_CLASSIFICATION	2.815657957888944E-6	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999738839647379	WITHOUT_CLASSIFICATION	2.611603526213679E-5	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999901560548666	WITHOUT_CLASSIFICATION	9.84394513344694E-6	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999513319243298	WITHOUT_CLASSIFICATION	4.866807567011039E-5	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999999975582264	WITHOUT_CLASSIFICATION	2.4417736127060702E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999385343458759	WITHOUT_CLASSIFICATION	6.146565412419706E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999385343458759	WITHOUT_CLASSIFICATION	6.146565412419706E-5	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999180553667394	WITHOUT_CLASSIFICATION	8.194463326062172E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999023968909209	WITHOUT_CLASSIFICATION	9.760310907916574E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999042076873048	WITHOUT_CLASSIFICATION	9.57923126950807E-5	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999386216926649	WITHOUT_CLASSIFICATION	6.13783073351582E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999086961357135	WITHOUT_CLASSIFICATION	9.130386428637896E-5	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9998967466747787	WITHOUT_CLASSIFICATION	1.0325332522124399E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999553051762992	WITHOUT_CLASSIFICATION	4.4694823700830806E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999086961357135	WITHOUT_CLASSIFICATION	9.130386428637896E-5	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999844853278353	WITHOUT_CLASSIFICATION	1.55146721647349E-5	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999887530025652	WITHOUT_CLASSIFICATION	1.1246997434710462E-5	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9998524156266596	WITHOUT_CLASSIFICATION	1.4758437334041777E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999867309238789	WITHOUT_CLASSIFICATION	1.3269076121045801E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.999990642723652	WITHOUT_CLASSIFICATION	9.357276347993947E-6	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999373328037969	WITHOUT_CLASSIFICATION	6.266719620301906E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999083169366558	WITHOUT_CLASSIFICATION	9.168306334413035E-5	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999915733338564	WITHOUT_CLASSIFICATION	8.426666143727834E-6	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999468494109858	WITHOUT_CLASSIFICATION	5.31505890143182E-5	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999623290778501	WITHOUT_CLASSIFICATION	3.767092214988609E-5	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999437255006829	WITHOUT_CLASSIFICATION	5.627449931705318E-5	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999417067779014	WITHOUT_CLASSIFICATION	5.829322209859321E-5	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999913222912952	WITHOUT_CLASSIFICATION	8.677708704958637E-6	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999677052460053	WITHOUT_CLASSIFICATION	3.2294753994696885E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999918364873264	WITHOUT_CLASSIFICATION	8.163512673609089E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999918364873264	WITHOUT_CLASSIFICATION	8.163512673609089E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999616224315301	WITHOUT_CLASSIFICATION	3.837756846993692E-5	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999981970854513	WITHOUT_CLASSIFICATION	1.8029145486526058E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999051661634842	WITHOUT_CLASSIFICATION	9.483383651582233E-5	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999603009848603	WITHOUT_CLASSIFICATION	3.969901513969772E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999901436090071	WITHOUT_CLASSIFICATION	9.856390992878602E-6	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.999994525637866	WITHOUT_CLASSIFICATION	5.47436213400592E-6	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999885158998174	WITHOUT_CLASSIFICATION	1.1484100182649444E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999988993403923	WITHOUT_CLASSIFICATION	1.1006596076658183E-6	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999198240132925	WITHOUT_CLASSIFICATION	8.017598670754248E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999452180158512	WITHOUT_CLASSIFICATION	5.478198414873259E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999284701787625	WITHOUT_CLASSIFICATION	7.152982123745536E-5	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999991653178467	WITHOUT_CLASSIFICATION	8.346821532333665E-7	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999804105347828	WITHOUT_CLASSIFICATION	1.9589465217139712E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999949126383344	WITHOUT_CLASSIFICATION	5.08736166556525E-6	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999677352426399	WITHOUT_CLASSIFICATION	3.226475736013398E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999462369288555	WITHOUT_CLASSIFICATION	5.3763071144391675E-5	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999939003707266	WITHOUT_CLASSIFICATION	6.099629273498092E-6	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999972365485912	WITHOUT_CLASSIFICATION	2.7634514087954806E-5	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.999936633112999	WITHOUT_CLASSIFICATION	6.336688700099569E-5	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999928967221312	WITHOUT_CLASSIFICATION	7.10327786869418E-6	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999998095788635	WITHOUT_CLASSIFICATION	1.904211364840535E-7	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999086846021	WITHOUT_CLASSIFICATION	9.13153979110109E-8	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999784336845393	WITHOUT_CLASSIFICATION	2.1566315460743526E-5	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999992873102	WITHOUT_CLASSIFICATION	7.126897655777872E-10	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999773714102862	WITHOUT_CLASSIFICATION	2.2628589713734944E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999773714102862	WITHOUT_CLASSIFICATION	2.2628589713734944E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.99996142178181	WITHOUT_CLASSIFICATION	3.85782181898911E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999863146315815	WITHOUT_CLASSIFICATION	1.3685368418526906E-5	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999990742762089	WITHOUT_CLASSIFICATION	9.257237910735495E-7	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999997038849815	WITHOUT_CLASSIFICATION	2.961150185668503E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999499409735307	WITHOUT_CLASSIFICATION	5.005902646921198E-5	IMPLEMENTATION
