// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9982810238496517	WITHOUT_CLASSIFICATION	0.0017189761503484185	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9982810238496517	WITHOUT_CLASSIFICATION	0.0017189761503484185	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9992450371471151	WITHOUT_CLASSIFICATION	7.549628528848562E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9982916359139185	WITHOUT_CLASSIFICATION	0.0017083640860814564	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9994431608884914	WITHOUT_CLASSIFICATION	5.568391115085951E-4	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.8600361153403433	IMPLEMENTATION	0.1399638846596567	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9951255534897198	WITHOUT_CLASSIFICATION	0.004874446510280232	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.8541948485497117	WITHOUT_CLASSIFICATION	0.14580515145028827	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9997129718244556	WITHOUT_CLASSIFICATION	2.870281755443956E-4	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9983384769122936	WITHOUT_CLASSIFICATION	0.0016615230877063513	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9989421979865187	WITHOUT_CLASSIFICATION	0.0010578020134811943	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.9945191018268307	WITHOUT_CLASSIFICATION	0.0054808981731693076	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.999629956446864	WITHOUT_CLASSIFICATION	3.700435531359478E-4	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.999629956446864	WITHOUT_CLASSIFICATION	3.700435531359478E-4	IMPLEMENTATION
/**	IMPLEMENTATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.6536363774349927	WITHOUT_CLASSIFICATION	0.3463636225650073	IMPLEMENTATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9835260026181087	IMPLEMENTATION	0.016473997381891214	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.8050232860654263	WITHOUT_CLASSIFICATION	0.19497671393457372	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999884162010076	WITHOUT_CLASSIFICATION	1.1583798992420447E-5	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9991452784744478	WITHOUT_CLASSIFICATION	8.547215255522144E-4	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9991522183028654	WITHOUT_CLASSIFICATION	8.477816971347532E-4	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9999277712621302	WITHOUT_CLASSIFICATION	7.222873786977681E-5	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9988104995336538	WITHOUT_CLASSIFICATION	0.0011895004663463101	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9958522337911014	WITHOUT_CLASSIFICATION	0.004147766208898619	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9958522337911014	WITHOUT_CLASSIFICATION	0.004147766208898619	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9766962606830512	WITHOUT_CLASSIFICATION	0.023303739316948773	IMPLEMENTATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9994257326810528	WITHOUT_CLASSIFICATION	5.742673189472084E-4	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9670274932420512	WITHOUT_CLASSIFICATION	0.03297250675794881	IMPLEMENTATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9992087497593402	WITHOUT_CLASSIFICATION	7.912502406598958E-4	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9984235841682262	WITHOUT_CLASSIFICATION	0.0015764158317737303	IMPLEMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9991382936532471	WITHOUT_CLASSIFICATION	8.617063467529162E-4	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9989370058065945	WITHOUT_CLASSIFICATION	0.001062994193405562	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9995686057770581	WITHOUT_CLASSIFICATION	4.313942229418699E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9989178124778267	WITHOUT_CLASSIFICATION	0.0010821875221732446	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9991136910997628	WITHOUT_CLASSIFICATION	8.863089002372716E-4	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9987836641487647	WITHOUT_CLASSIFICATION	0.0012163358512352572	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.5661084693614133	WITHOUT_CLASSIFICATION	0.4338915306385866	IMPLEMENTATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9990338452607805	WITHOUT_CLASSIFICATION	9.661547392194677E-4	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9989639772748994	WITHOUT_CLASSIFICATION	0.0010360227251006169	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.7012348325019357	WITHOUT_CLASSIFICATION	0.2987651674980643	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.7012348325019357	WITHOUT_CLASSIFICATION	0.2987651674980643	IMPLEMENTATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9818508199872903	WITHOUT_CLASSIFICATION	0.018149180012709643	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9996150031996476	WITHOUT_CLASSIFICATION	3.849968003523948E-4	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9995902426707763	WITHOUT_CLASSIFICATION	4.0975732922356715E-4	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.8951383133447309	WITHOUT_CLASSIFICATION	0.10486168665526903	IMPLEMENTATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9986609472407278	WITHOUT_CLASSIFICATION	0.0013390527592720704	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9983405811754209	WITHOUT_CLASSIFICATION	0.0016594188245790589	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9987041510153404	WITHOUT_CLASSIFICATION	0.0012958489846595959	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9993119092156659	WITHOUT_CLASSIFICATION	6.880907843339859E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9996634282614277	WITHOUT_CLASSIFICATION	3.3657173857226875E-4	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9989946394293405	WITHOUT_CLASSIFICATION	0.0010053605706594282	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9998866976336017	WITHOUT_CLASSIFICATION	1.1330236639823378E-4	IMPLEMENTATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9979486691801717	WITHOUT_CLASSIFICATION	0.002051330819828333	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9987563669691306	WITHOUT_CLASSIFICATION	0.0012436330308693633	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.998214030462774	WITHOUT_CLASSIFICATION	0.0017859695372259984	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9542353056319718	WITHOUT_CLASSIFICATION	0.04576469436802815	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.998214030462774	WITHOUT_CLASSIFICATION	0.0017859695372259984	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9959154998499576	IMPLEMENTATION	0.004084500150042324	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.6141316850549711	IMPLEMENTATION	0.3858683149450289	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.998214030462774	WITHOUT_CLASSIFICATION	0.0017859695372259984	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999212032698223	WITHOUT_CLASSIFICATION	7.879673017767536E-5	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999281867470231	WITHOUT_CLASSIFICATION	7.181325297691627E-5	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9993633105227412	WITHOUT_CLASSIFICATION	6.366894772588917E-4	IMPLEMENTATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9992397431409179	WITHOUT_CLASSIFICATION	7.602568590822352E-4	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9995041674745108	WITHOUT_CLASSIFICATION	4.958325254892882E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.999751339159434	WITHOUT_CLASSIFICATION	2.486608405660452E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.999751339159434	WITHOUT_CLASSIFICATION	2.486608405660452E-4	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.99944406851626	WITHOUT_CLASSIFICATION	5.559314837400443E-4	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9995526377314377	WITHOUT_CLASSIFICATION	4.4736226856230757E-4	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9996554385379133	WITHOUT_CLASSIFICATION	3.445614620867642E-4	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9995453899449281	WITHOUT_CLASSIFICATION	4.5461005507183385E-4	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9995453899449281	WITHOUT_CLASSIFICATION	4.5461005507183385E-4	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9996105925327228	WITHOUT_CLASSIFICATION	3.894074672772165E-4	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997204083403785	WITHOUT_CLASSIFICATION	2.795916596215136E-4	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9998301869670162	WITHOUT_CLASSIFICATION	1.6981303298378665E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9993582035502502	WITHOUT_CLASSIFICATION	6.417964497498626E-4	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9996269349980187	WITHOUT_CLASSIFICATION	3.730650019813283E-4	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9996269349980187	WITHOUT_CLASSIFICATION	3.730650019813283E-4	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.999572899167223	WITHOUT_CLASSIFICATION	4.2710083277688356E-4	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9991826887267006	WITHOUT_CLASSIFICATION	8.173112732994059E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9996212213147607	WITHOUT_CLASSIFICATION	3.787786852392195E-4	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9996444632921804	WITHOUT_CLASSIFICATION	3.55536707819653E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999257928611812	WITHOUT_CLASSIFICATION	7.420713881875799E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9995998936818904	WITHOUT_CLASSIFICATION	4.001063181095089E-4	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9995933605517432	WITHOUT_CLASSIFICATION	4.0663944825671054E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9994845837715078	WITHOUT_CLASSIFICATION	5.154162284921952E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.99965464164158	WITHOUT_CLASSIFICATION	3.4535835842000205E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9994568525109785	WITHOUT_CLASSIFICATION	5.43147489021405E-4	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999093608554047	WITHOUT_CLASSIFICATION	9.063914459525178E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9995755157552675	WITHOUT_CLASSIFICATION	4.2448424473242295E-4	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9993788673610208	WITHOUT_CLASSIFICATION	6.211326389791837E-4	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9997714702312628	WITHOUT_CLASSIFICATION	2.2852976873724792E-4	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996328389216145	WITHOUT_CLASSIFICATION	3.671610783855151E-4	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9994062891927559	WITHOUT_CLASSIFICATION	5.937108072440362E-4	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994519002530221	WITHOUT_CLASSIFICATION	5.480997469778225E-4	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999486480894708	WITHOUT_CLASSIFICATION	5.135191052920143E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9998209051191437	WITHOUT_CLASSIFICATION	1.7909488085635444E-4	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9996165287884792	WITHOUT_CLASSIFICATION	3.8347121152079874E-4	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.999778466908364	WITHOUT_CLASSIFICATION	2.2153309163582457E-4	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.999331747748926	WITHOUT_CLASSIFICATION	6.682522510740256E-4	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9996165287884792	WITHOUT_CLASSIFICATION	3.8347121152079874E-4	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.999331747748926	WITHOUT_CLASSIFICATION	6.682522510740256E-4	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9998038663479172	WITHOUT_CLASSIFICATION	1.9613365208275346E-4	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9998899914356648	WITHOUT_CLASSIFICATION	1.1000856433528912E-4	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9997808487900116	WITHOUT_CLASSIFICATION	2.1915120998832193E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9995149396399174	WITHOUT_CLASSIFICATION	4.850603600826063E-4	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.999951320080261	WITHOUT_CLASSIFICATION	4.867991973898619E-5	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9998342674398214	WITHOUT_CLASSIFICATION	1.6573256017861067E-4	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9995495894926162	WITHOUT_CLASSIFICATION	4.504105073838391E-4	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9997371059215101	WITHOUT_CLASSIFICATION	2.628940784899041E-4	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999277758298998	WITHOUT_CLASSIFICATION	7.222417010029295E-5	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9993764669141879	WITHOUT_CLASSIFICATION	6.235330858121769E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9995145975649937	WITHOUT_CLASSIFICATION	4.8540243500627613E-4	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.999331747748926	WITHOUT_CLASSIFICATION	6.682522510740256E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999559110395576	WITHOUT_CLASSIFICATION	4.4088960442475E-5	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9997217991219265	WITHOUT_CLASSIFICATION	2.7820087807346717E-4	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9997575428070286	WITHOUT_CLASSIFICATION	2.4245719297156487E-4	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9997429583935868	WITHOUT_CLASSIFICATION	2.5704160641313076E-4	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9997804125142542	WITHOUT_CLASSIFICATION	2.1958748574588078E-4	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9998395717741778	WITHOUT_CLASSIFICATION	1.6042822582215842E-4	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998924754146296	WITHOUT_CLASSIFICATION	1.0752458537054211E-4	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999234778754612	WITHOUT_CLASSIFICATION	7.652212453879964E-5	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9998233964850757	WITHOUT_CLASSIFICATION	1.766035149241876E-4	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999082717699375	WITHOUT_CLASSIFICATION	9.172823006260032E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999508353355302	WITHOUT_CLASSIFICATION	4.916466446980025E-4	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999878742931195	WITHOUT_CLASSIFICATION	1.2125706880503023E-4	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9502777126351443	WITHOUT_CLASSIFICATION	0.04972228736485576	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999369825082925	WITHOUT_CLASSIFICATION	6.301749170739513E-5	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9998145794248873	WITHOUT_CLASSIFICATION	1.8542057511270317E-4	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.984286231507042	WITHOUT_CLASSIFICATION	0.01571376849295814	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9998905879469235	WITHOUT_CLASSIFICATION	1.0941205307655299E-4	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999308139227119	WITHOUT_CLASSIFICATION	6.918607728813994E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999883229785749	WITHOUT_CLASSIFICATION	1.1677021425108388E-4	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9998256501013736	WITHOUT_CLASSIFICATION	1.7434989862641714E-4	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998469540994244	WITHOUT_CLASSIFICATION	1.5304590057551974E-4	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995046009957405	WITHOUT_CLASSIFICATION	4.953990042594943E-4	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9996078143133235	WITHOUT_CLASSIFICATION	3.921856866765268E-4	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999875350268446	WITHOUT_CLASSIFICATION	1.2464973155499445E-5	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995046009957405	WITHOUT_CLASSIFICATION	4.953990042594943E-4	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9998510751111938	WITHOUT_CLASSIFICATION	1.489248888061743E-4	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998406834889877	WITHOUT_CLASSIFICATION	1.593165110123483E-4	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9998400273346301	WITHOUT_CLASSIFICATION	1.599726653699768E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9997783800339564	WITHOUT_CLASSIFICATION	2.2161996604373835E-4	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9997670595935974	WITHOUT_CLASSIFICATION	2.3294040640279247E-4	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9996911857981033	WITHOUT_CLASSIFICATION	3.088142018966739E-4	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9996911857981033	WITHOUT_CLASSIFICATION	3.088142018966739E-4	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999331747748926	WITHOUT_CLASSIFICATION	6.682522510740256E-4	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999871761933208	WITHOUT_CLASSIFICATION	1.2823806679151524E-5	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9994575186776332	WITHOUT_CLASSIFICATION	5.424813223668535E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999889293130814	WITHOUT_CLASSIFICATION	1.107068691860061E-4	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9996183745529227	WITHOUT_CLASSIFICATION	3.816254470773846E-4	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998468017267128	WITHOUT_CLASSIFICATION	1.5319827328712864E-4	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999496724731902	WITHOUT_CLASSIFICATION	5.032752680980189E-4	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9995277843844661	WITHOUT_CLASSIFICATION	4.722156155339221E-4	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999883369866841	WITHOUT_CLASSIFICATION	1.1663013315895307E-4	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9998626495013923	WITHOUT_CLASSIFICATION	1.373504986077063E-4	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9996132693239972	WITHOUT_CLASSIFICATION	3.8673067600283846E-4	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9996132693239972	WITHOUT_CLASSIFICATION	3.8673067600283846E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9997285729484237	WITHOUT_CLASSIFICATION	2.7142705157629144E-4	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998794237435686	WITHOUT_CLASSIFICATION	1.2057625643144707E-4	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9996963633871196	WITHOUT_CLASSIFICATION	3.036366128802865E-4	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9996132693239972	WITHOUT_CLASSIFICATION	3.8673067600283846E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9997285729484237	WITHOUT_CLASSIFICATION	2.7142705157629144E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9997285729484237	WITHOUT_CLASSIFICATION	2.7142705157629144E-4	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9997453072441741	WITHOUT_CLASSIFICATION	2.5469275582595146E-4	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.999603615159848	WITHOUT_CLASSIFICATION	3.9638484015194184E-4	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9998447249275867	WITHOUT_CLASSIFICATION	1.552750724132407E-4	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9997940597261459	WITHOUT_CLASSIFICATION	2.0594027385403255E-4	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9996329602004194	WITHOUT_CLASSIFICATION	3.6703979958074763E-4	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9996329602004194	WITHOUT_CLASSIFICATION	3.6703979958074763E-4	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9995635996755656	WITHOUT_CLASSIFICATION	4.364003244344141E-4	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9995843833218752	WITHOUT_CLASSIFICATION	4.156166781248628E-4	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9997029158761953	WITHOUT_CLASSIFICATION	2.970841238046766E-4	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9997697709234916	WITHOUT_CLASSIFICATION	2.3022907650836375E-4	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9997697709234916	WITHOUT_CLASSIFICATION	2.3022907650836375E-4	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9995467296011453	WITHOUT_CLASSIFICATION	4.5327039885466005E-4	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9994633572835413	WITHOUT_CLASSIFICATION	5.366427164586678E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996202804570182	WITHOUT_CLASSIFICATION	3.7971954298182534E-4	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999412147774815	WITHOUT_CLASSIFICATION	5.878522251840323E-5	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9997499176451191	WITHOUT_CLASSIFICATION	2.5008235488090585E-4	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999379558564937	WITHOUT_CLASSIFICATION	6.204414350631292E-5	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9995102483415723	WITHOUT_CLASSIFICATION	4.897516584276924E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.999502374989748	WITHOUT_CLASSIFICATION	4.976250102519604E-4	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9995561362714137	WITHOUT_CLASSIFICATION	4.438637285862741E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996202804570182	WITHOUT_CLASSIFICATION	3.7971954298182534E-4	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9993237022293583	WITHOUT_CLASSIFICATION	6.762977706417248E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9996601187166371	WITHOUT_CLASSIFICATION	3.3988128336282696E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9996601187166371	WITHOUT_CLASSIFICATION	3.3988128336282696E-4	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999664378210033	WITHOUT_CLASSIFICATION	3.35621789967164E-5	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9993356623020571	WITHOUT_CLASSIFICATION	6.643376979430006E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.99984601955309	WITHOUT_CLASSIFICATION	1.5398044690989886E-4	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999194322892008	WITHOUT_CLASSIFICATION	8.056771079917911E-5	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9994816569983083	WITHOUT_CLASSIFICATION	5.183430016917498E-4	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9993235081068081	WITHOUT_CLASSIFICATION	6.764918931917953E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9993744443163015	WITHOUT_CLASSIFICATION	6.255556836984576E-4	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9995924697712645	WITHOUT_CLASSIFICATION	4.075302287354222E-4	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999840791295068	WITHOUT_CLASSIFICATION	1.5920870493215696E-4	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999840791295068	WITHOUT_CLASSIFICATION	1.5920870493215696E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9994560041518562	WITHOUT_CLASSIFICATION	5.439958481439153E-4	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9995041674745108	WITHOUT_CLASSIFICATION	4.958325254892882E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9998741171196	WITHOUT_CLASSIFICATION	1.2588288039997649E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9993277451424293	WITHOUT_CLASSIFICATION	6.722548575707419E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.999751339159434	WITHOUT_CLASSIFICATION	2.486608405660452E-4	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9994632661807726	WITHOUT_CLASSIFICATION	5.367338192273268E-4	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9995641451771415	WITHOUT_CLASSIFICATION	4.358548228583737E-4	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.999482551271863	WITHOUT_CLASSIFICATION	5.174487281369289E-4	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9993225241211784	WITHOUT_CLASSIFICATION	6.774758788215192E-4	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9995541435633019	WITHOUT_CLASSIFICATION	4.4585643669806146E-4	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9995780772609699	WITHOUT_CLASSIFICATION	4.219227390301561E-4	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9995736603547497	WITHOUT_CLASSIFICATION	4.2633964525029273E-4	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9996385873157564	WITHOUT_CLASSIFICATION	3.6141268424369347E-4	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9995526377314377	WITHOUT_CLASSIFICATION	4.4736226856230757E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9993408344041516	WITHOUT_CLASSIFICATION	6.591655958484395E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9993408344041516	WITHOUT_CLASSIFICATION	6.591655958484395E-4	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9993622170568508	WITHOUT_CLASSIFICATION	6.37782943149186E-4	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9995351442251451	WITHOUT_CLASSIFICATION	4.648557748549992E-4	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9995805719938592	WITHOUT_CLASSIFICATION	4.194280061407884E-4	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.99948424179104	WITHOUT_CLASSIFICATION	5.157582089601029E-4	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9996116916653225	WITHOUT_CLASSIFICATION	3.883083346775302E-4	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9997436114946179	WITHOUT_CLASSIFICATION	2.563885053821891E-4	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9995453899449281	WITHOUT_CLASSIFICATION	4.5461005507183385E-4	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9995166098177476	WITHOUT_CLASSIFICATION	4.833901822524703E-4	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.999640998152015	WITHOUT_CLASSIFICATION	3.590018479849895E-4	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9996261860172908	WITHOUT_CLASSIFICATION	3.738139827090892E-4	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9993246128849216	WITHOUT_CLASSIFICATION	6.753871150784933E-4	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9994225615215849	WITHOUT_CLASSIFICATION	5.774384784151123E-4	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9997521794756451	WITHOUT_CLASSIFICATION	2.47820524354866E-4	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9996165758092858	WITHOUT_CLASSIFICATION	3.834241907141706E-4	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9995453899449281	WITHOUT_CLASSIFICATION	4.5461005507183385E-4	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9995539707742552	WITHOUT_CLASSIFICATION	4.4602922574474757E-4	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9997388138121515	WITHOUT_CLASSIFICATION	2.611861878484881E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.999751339159434	WITHOUT_CLASSIFICATION	2.486608405660452E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.999751339159434	WITHOUT_CLASSIFICATION	2.486608405660452E-4	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9995736603547497	WITHOUT_CLASSIFICATION	4.2633964525029273E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9993408344041516	WITHOUT_CLASSIFICATION	6.591655958484395E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9994225615215849	WITHOUT_CLASSIFICATION	5.774384784151123E-4	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9996105925327228	WITHOUT_CLASSIFICATION	3.894074672772165E-4	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9994685454743711	WITHOUT_CLASSIFICATION	5.314545256288379E-4	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9996568291566602	WITHOUT_CLASSIFICATION	3.4317084333979753E-4	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9995490084367078	WITHOUT_CLASSIFICATION	4.5099156329219314E-4	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9996265045202006	WITHOUT_CLASSIFICATION	3.7349547979942247E-4	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9995194697917864	WITHOUT_CLASSIFICATION	4.805302082136465E-4	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9993385679609988	WITHOUT_CLASSIFICATION	6.614320390012257E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9995027030183173	WITHOUT_CLASSIFICATION	4.972969816827145E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9995027030183173	WITHOUT_CLASSIFICATION	4.972969816827145E-4	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9997297358164463	WITHOUT_CLASSIFICATION	2.7026418355375454E-4	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9998912011478244	WITHOUT_CLASSIFICATION	1.0879885217563249E-4	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9994302659843002	WITHOUT_CLASSIFICATION	5.697340156997402E-4	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9994556823108296	WITHOUT_CLASSIFICATION	5.443176891704375E-4	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9997115485146048	WITHOUT_CLASSIFICATION	2.884514853952704E-4	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9997244843164325	WITHOUT_CLASSIFICATION	2.7551568356755195E-4	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9994872159830556	WITHOUT_CLASSIFICATION	5.127840169445397E-4	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997204083403785	WITHOUT_CLASSIFICATION	2.795916596215136E-4	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9994971772412674	WITHOUT_CLASSIFICATION	5.028227587326726E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9994971772412674	WITHOUT_CLASSIFICATION	5.028227587326726E-4	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9994021485670131	WITHOUT_CLASSIFICATION	5.978514329868643E-4	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9997765847619638	WITHOUT_CLASSIFICATION	2.2341523803606035E-4	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9994021485670131	WITHOUT_CLASSIFICATION	5.978514329868643E-4	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9996995479260505	WITHOUT_CLASSIFICATION	3.004520739494899E-4	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9995737068569676	WITHOUT_CLASSIFICATION	4.262931430324087E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.999751339159434	WITHOUT_CLASSIFICATION	2.486608405660452E-4	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9995736603547497	WITHOUT_CLASSIFICATION	4.2633964525029273E-4	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9995526377314377	WITHOUT_CLASSIFICATION	4.4736226856230757E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9994225615215849	WITHOUT_CLASSIFICATION	5.774384784151123E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9994225615215849	WITHOUT_CLASSIFICATION	5.774384784151123E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997219257870557	WITHOUT_CLASSIFICATION	2.780742129443863E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997219257870557	WITHOUT_CLASSIFICATION	2.780742129443863E-4	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9993916601417394	WITHOUT_CLASSIFICATION	6.083398582606088E-4	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9993286200353925	WITHOUT_CLASSIFICATION	6.713799646075924E-4	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.999660523167611	WITHOUT_CLASSIFICATION	3.3947683238904844E-4	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9993630776704575	WITHOUT_CLASSIFICATION	6.369223295424459E-4	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9998302727111618	WITHOUT_CLASSIFICATION	1.6972728883816858E-4	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9996936810658014	WITHOUT_CLASSIFICATION	3.0631893419868936E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9993582035502502	WITHOUT_CLASSIFICATION	6.417964497498626E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9993582035502502	WITHOUT_CLASSIFICATION	6.417964497498626E-4	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9976975156584155	WITHOUT_CLASSIFICATION	0.002302484341584571	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9994589395873323	WITHOUT_CLASSIFICATION	5.410604126676906E-4	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9996009532330321	WITHOUT_CLASSIFICATION	3.990467669678842E-4	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9995703134258754	WITHOUT_CLASSIFICATION	4.29686574124562E-4	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9996034982194038	WITHOUT_CLASSIFICATION	3.965017805962962E-4	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9996269349980187	WITHOUT_CLASSIFICATION	3.730650019813283E-4	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.999572899167223	WITHOUT_CLASSIFICATION	4.2710083277688356E-4	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.999572899167223	WITHOUT_CLASSIFICATION	4.2710083277688356E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9993218403380645	WITHOUT_CLASSIFICATION	6.781596619355475E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9993218403380645	WITHOUT_CLASSIFICATION	6.781596619355475E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9995188221474767	WITHOUT_CLASSIFICATION	4.8117785252328743E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9995188221474767	WITHOUT_CLASSIFICATION	4.8117785252328743E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9993582035502502	WITHOUT_CLASSIFICATION	6.417964497498626E-4	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9996269349980187	WITHOUT_CLASSIFICATION	3.730650019813283E-4	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.999572899167223	WITHOUT_CLASSIFICATION	4.2710083277688356E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9993218403380645	WITHOUT_CLASSIFICATION	6.781596619355475E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9993218403380645	WITHOUT_CLASSIFICATION	6.781596619355475E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9995188221474767	WITHOUT_CLASSIFICATION	4.8117785252328743E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9995316629897617	WITHOUT_CLASSIFICATION	4.6833701023819515E-4	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9993363421993369	WITHOUT_CLASSIFICATION	6.636578006630397E-4	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9993083394595095	WITHOUT_CLASSIFICATION	6.91660540490539E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998352208498961	WITHOUT_CLASSIFICATION	1.6477915010395207E-4	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.999482672070257	WITHOUT_CLASSIFICATION	5.173279297429957E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9995797186150417	WITHOUT_CLASSIFICATION	4.202813849583207E-4	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9993087998647239	WITHOUT_CLASSIFICATION	6.912001352760179E-4	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9998158326530865	WITHOUT_CLASSIFICATION	1.8416734691344616E-4	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999800679985339	WITHOUT_CLASSIFICATION	1.9932001466105545E-4	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999071738374901	WITHOUT_CLASSIFICATION	9.282616250995998E-5	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9996521418882502	WITHOUT_CLASSIFICATION	3.478581117498016E-4	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9997818564795788	WITHOUT_CLASSIFICATION	2.181435204211054E-4	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999331747748926	WITHOUT_CLASSIFICATION	6.682522510740256E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9995797186150417	WITHOUT_CLASSIFICATION	4.202813849583207E-4	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9996975283978836	WITHOUT_CLASSIFICATION	3.024716021162714E-4	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999637918783282	WITHOUT_CLASSIFICATION	3.6208121671816234E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999637918783282	WITHOUT_CLASSIFICATION	3.6208121671816234E-5	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9998338313577021	WITHOUT_CLASSIFICATION	1.6616864229801687E-4	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9996718875133481	WITHOUT_CLASSIFICATION	3.2811248665197315E-4	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.999747607989397	WITHOUT_CLASSIFICATION	2.523920106029759E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9995981809179313	WITHOUT_CLASSIFICATION	4.018190820686682E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9995981809179313	WITHOUT_CLASSIFICATION	4.018190820686682E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999257928611812	WITHOUT_CLASSIFICATION	7.420713881875799E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999372958987234	WITHOUT_CLASSIFICATION	6.270410127661798E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999372958987234	WITHOUT_CLASSIFICATION	6.270410127661798E-5	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9998351714451786	WITHOUT_CLASSIFICATION	1.6482855482142893E-4	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9995954402485643	WITHOUT_CLASSIFICATION	4.045597514357244E-4	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9995624953971675	WITHOUT_CLASSIFICATION	4.3750460283259555E-4	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9995998936818904	WITHOUT_CLASSIFICATION	4.001063181095089E-4	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9939863667455474	WITHOUT_CLASSIFICATION	0.0060136332544525285	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9993916601417394	WITHOUT_CLASSIFICATION	6.083398582606088E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9997962256198477	WITHOUT_CLASSIFICATION	2.0377438015234604E-4	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9997437655857031	WITHOUT_CLASSIFICATION	2.562344142969174E-4	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.999836493011812	WITHOUT_CLASSIFICATION	1.63506988188012E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999428701558351	WITHOUT_CLASSIFICATION	5.712984416490246E-4	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9997227249014091	WITHOUT_CLASSIFICATION	2.7727509859085364E-4	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.999573821307548	WITHOUT_CLASSIFICATION	4.2617869245190965E-4	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9993933308764553	WITHOUT_CLASSIFICATION	6.066691235447249E-4	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9993916601417394	WITHOUT_CLASSIFICATION	6.083398582606088E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9993248890796156	WITHOUT_CLASSIFICATION	6.75110920384501E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9995933605517432	WITHOUT_CLASSIFICATION	4.0663944825671054E-4	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9995001769230952	WITHOUT_CLASSIFICATION	4.998230769047797E-4	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9995044856191014	WITHOUT_CLASSIFICATION	4.955143808985469E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9995998936818904	WITHOUT_CLASSIFICATION	4.001063181095089E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9993248890796156	WITHOUT_CLASSIFICATION	6.75110920384501E-4	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9995001769230952	WITHOUT_CLASSIFICATION	4.998230769047797E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999501569771189	WITHOUT_CLASSIFICATION	4.984302288110636E-4	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9993787666108258	WITHOUT_CLASSIFICATION	6.212333891741803E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9993593592226511	WITHOUT_CLASSIFICATION	6.406407773488715E-4	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9992939584983085	WITHOUT_CLASSIFICATION	7.060415016914134E-4	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9998297492691702	WITHOUT_CLASSIFICATION	1.7025073082966403E-4	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9994491385905946	WITHOUT_CLASSIFICATION	5.508614094054418E-4	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999729126102527	WITHOUT_CLASSIFICATION	2.7087389747294555E-4	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9998610586307153	WITHOUT_CLASSIFICATION	1.3894136928464454E-4	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9995052524854598	WITHOUT_CLASSIFICATION	4.947475145401274E-4	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9997899800362365	WITHOUT_CLASSIFICATION	2.1001996376356582E-4	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9998807755993392	WITHOUT_CLASSIFICATION	1.1922440066092328E-4	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9996465194978386	WITHOUT_CLASSIFICATION	3.534805021614496E-4	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9993248890796156	WITHOUT_CLASSIFICATION	6.75110920384501E-4	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9995242687858662	WITHOUT_CLASSIFICATION	4.757312141337997E-4	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9995872752311337	WITHOUT_CLASSIFICATION	4.127247688662423E-4	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9995298670119063	WITHOUT_CLASSIFICATION	4.701329880937278E-4	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9996133998589989	WITHOUT_CLASSIFICATION	3.866001410011304E-4	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9996964706964263	WITHOUT_CLASSIFICATION	3.035293035736968E-4	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9995335770396666	WITHOUT_CLASSIFICATION	4.664229603333661E-4	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9998919206362733	WITHOUT_CLASSIFICATION	1.0807936372661214E-4	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999753307651573	WITHOUT_CLASSIFICATION	2.4669234842693863E-4	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9993226663668324	WITHOUT_CLASSIFICATION	6.773336331675578E-4	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9993916601417394	WITHOUT_CLASSIFICATION	6.083398582606088E-4	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9858359780792566	WITHOUT_CLASSIFICATION	0.014164021920743265	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9994568525109785	WITHOUT_CLASSIFICATION	5.43147489021405E-4	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9997918016668692	WITHOUT_CLASSIFICATION	2.081983331307353E-4	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9996345009668651	WITHOUT_CLASSIFICATION	3.6549903313487064E-4	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9993781017306744	WITHOUT_CLASSIFICATION	6.21898269325616E-4	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9993627601927186	WITHOUT_CLASSIFICATION	6.372398072814032E-4	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9995219939159892	WITHOUT_CLASSIFICATION	4.780060840108071E-4	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9992964346379702	WITHOUT_CLASSIFICATION	7.035653620297247E-4	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999928960048267	WITHOUT_CLASSIFICATION	7.103995173300501E-5	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9997940866981994	WITHOUT_CLASSIFICATION	2.059133018006891E-4	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9996521454976662	WITHOUT_CLASSIFICATION	3.478545023337322E-4	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9994177295830801	WITHOUT_CLASSIFICATION	5.822704169199015E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9994871480931042	WITHOUT_CLASSIFICATION	5.128519068958195E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9994871480931042	WITHOUT_CLASSIFICATION	5.128519068958195E-4	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9993916601417394	WITHOUT_CLASSIFICATION	6.083398582606088E-4	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9992579564918471	WITHOUT_CLASSIFICATION	7.420435081528575E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9997787275052669	WITHOUT_CLASSIFICATION	2.212724947331342E-4	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9997979390024175	WITHOUT_CLASSIFICATION	2.02060997582398E-4	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998251919417724	WITHOUT_CLASSIFICATION	1.7480805822758474E-4	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.999712862199976	WITHOUT_CLASSIFICATION	2.8713780002402335E-4	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999404127199411	WITHOUT_CLASSIFICATION	5.958728005890206E-4	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9996718375047928	WITHOUT_CLASSIFICATION	3.2816249520716266E-4	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9996961725540084	WITHOUT_CLASSIFICATION	3.038274459916342E-4	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9994052699068865	WITHOUT_CLASSIFICATION	5.947300931135858E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9995736746725886	WITHOUT_CLASSIFICATION	4.2632532741137684E-4	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9998164323131485	WITHOUT_CLASSIFICATION	1.8356768685143346E-4	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.999719480554333	WITHOUT_CLASSIFICATION	2.8051944566699535E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995009671035924	WITHOUT_CLASSIFICATION	4.990328964075523E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995605439507476	WITHOUT_CLASSIFICATION	4.394560492524582E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9998980321296987	WITHOUT_CLASSIFICATION	1.0196787030132114E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9997454969736851	WITHOUT_CLASSIFICATION	2.5450302631495016E-4	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9996614287392117	WITHOUT_CLASSIFICATION	3.385712607882257E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9995156738043715	WITHOUT_CLASSIFICATION	4.843261956285235E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9996074077194602	WITHOUT_CLASSIFICATION	3.9259228053981196E-4	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9996074077194602	WITHOUT_CLASSIFICATION	3.9259228053981196E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9992891795517084	WITHOUT_CLASSIFICATION	7.108204482917232E-4	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9992891795517084	WITHOUT_CLASSIFICATION	7.108204482917232E-4	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9996521454976662	WITHOUT_CLASSIFICATION	3.478545023337322E-4	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9995033659979813	WITHOUT_CLASSIFICATION	4.966340020187725E-4	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995111315340346	WITHOUT_CLASSIFICATION	4.888684659654464E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999536162702139	WITHOUT_CLASSIFICATION	4.6383729786103915E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9994560041518562	WITHOUT_CLASSIFICATION	5.439958481439153E-4	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995111315340346	WITHOUT_CLASSIFICATION	4.888684659654464E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999536162702139	WITHOUT_CLASSIFICATION	4.6383729786103915E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9995546009792022	WITHOUT_CLASSIFICATION	4.4539902079772527E-4	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9996696429281409	WITHOUT_CLASSIFICATION	3.3035707185922927E-4	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999451585538334	WITHOUT_CLASSIFICATION	5.484144616666621E-5	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999091918015417	WITHOUT_CLASSIFICATION	9.080819845831566E-5	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.999923494060743	WITHOUT_CLASSIFICATION	7.650593925700807E-5	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9998389657424829	WITHOUT_CLASSIFICATION	1.6103425751712587E-4	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9996307518035172	WITHOUT_CLASSIFICATION	3.692481964827754E-4	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9996109035286436	WITHOUT_CLASSIFICATION	3.8909647135631646E-4	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999095172444007	WITHOUT_CLASSIFICATION	9.04827555994035E-5	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9998637702906231	WITHOUT_CLASSIFICATION	1.3622970937679586E-4	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999137533941483	WITHOUT_CLASSIFICATION	8.624660585174475E-5	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9998806578000313	WITHOUT_CLASSIFICATION	1.1934219996865036E-4	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9994954858194003	WITHOUT_CLASSIFICATION	5.045141805997749E-4	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9994622915143156	WITHOUT_CLASSIFICATION	5.377084856843918E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9994560041518562	WITHOUT_CLASSIFICATION	5.439958481439153E-4	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9994573343093202	WITHOUT_CLASSIFICATION	5.426656906798704E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9994931633629571	WITHOUT_CLASSIFICATION	5.068366370428776E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9994931633629571	WITHOUT_CLASSIFICATION	5.068366370428776E-4	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9996607461437544	WITHOUT_CLASSIFICATION	3.392538562455373E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9995546009792022	WITHOUT_CLASSIFICATION	4.4539902079772527E-4	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9995175514727156	WITHOUT_CLASSIFICATION	4.824485272844058E-4	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9997300364868601	WITHOUT_CLASSIFICATION	2.6996351313985387E-4	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9878594946759842	WITHOUT_CLASSIFICATION	0.012140505324015886	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998070512667087	WITHOUT_CLASSIFICATION	1.929487332913849E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9993712739252221	WITHOUT_CLASSIFICATION	6.287260747779043E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9995546009792022	WITHOUT_CLASSIFICATION	4.4539902079772527E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998070512667087	WITHOUT_CLASSIFICATION	1.929487332913849E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9993712739252221	WITHOUT_CLASSIFICATION	6.287260747779043E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9995418589897425	WITHOUT_CLASSIFICATION	4.58141010257496E-4	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9993105322607541	WITHOUT_CLASSIFICATION	6.894677392459312E-4	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999574688641923	WITHOUT_CLASSIFICATION	4.2531135807628106E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9995546009792022	WITHOUT_CLASSIFICATION	4.4539902079772527E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9995546009792022	WITHOUT_CLASSIFICATION	4.4539902079772527E-4	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9993961873391461	WITHOUT_CLASSIFICATION	6.038126608538352E-4	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9993993302347993	WITHOUT_CLASSIFICATION	6.006697652006393E-4	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9994888894117845	WITHOUT_CLASSIFICATION	5.111105882155138E-4	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.999675693729948	WITHOUT_CLASSIFICATION	3.243062700519957E-4	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9996076873908827	WITHOUT_CLASSIFICATION	3.923126091173094E-4	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999644570297066	WITHOUT_CLASSIFICATION	3.5542970293404917E-4	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9996735128102422	WITHOUT_CLASSIFICATION	3.264871897578753E-4	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9996199808165251	WITHOUT_CLASSIFICATION	3.800191834748079E-4	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9997875327892346	WITHOUT_CLASSIFICATION	2.1246721076549215E-4	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9995239149817965	WITHOUT_CLASSIFICATION	4.760850182035404E-4	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9998669815674723	WITHOUT_CLASSIFICATION	1.330184325275447E-4	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9995863187967078	WITHOUT_CLASSIFICATION	4.1368120329223114E-4	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9998962271437994	WITHOUT_CLASSIFICATION	1.0377285620050546E-4	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9994674176902638	WITHOUT_CLASSIFICATION	5.325823097361301E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99976950549642	WITHOUT_CLASSIFICATION	2.304945035801885E-4	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999267442743439	WITHOUT_CLASSIFICATION	7.325572565613149E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996328389216145	WITHOUT_CLASSIFICATION	3.671610783855151E-4	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9996572039484476	WITHOUT_CLASSIFICATION	3.4279605155245146E-4	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9996618524327582	WITHOUT_CLASSIFICATION	3.3814756724182254E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9994350509215695	WITHOUT_CLASSIFICATION	5.649490784305752E-4	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9993480029002314	WITHOUT_CLASSIFICATION	6.519970997685885E-4	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9992519747204136	WITHOUT_CLASSIFICATION	7.480252795864801E-4	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9992519747204136	WITHOUT_CLASSIFICATION	7.480252795864801E-4	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996328389216145	WITHOUT_CLASSIFICATION	3.671610783855151E-4	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9992915553674836	WITHOUT_CLASSIFICATION	7.084446325163671E-4	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9997889180508676	WITHOUT_CLASSIFICATION	2.110819491325636E-4	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9990102792229354	WITHOUT_CLASSIFICATION	9.89720777064628E-4	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9996465148812522	WITHOUT_CLASSIFICATION	3.53485118747773E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999391189691383	WITHOUT_CLASSIFICATION	6.088103086169735E-5	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999030954333145	WITHOUT_CLASSIFICATION	9.690456668551174E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9998350569821598	WITHOUT_CLASSIFICATION	1.6494301784012076E-4	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9992903865803164	WITHOUT_CLASSIFICATION	7.096134196835316E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999681156962955	WITHOUT_CLASSIFICATION	3.188430370453486E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995711886701618	WITHOUT_CLASSIFICATION	4.288113298381702E-4	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.998774661906955	WITHOUT_CLASSIFICATION	0.0012253380930449822	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999665262245057	WITHOUT_CLASSIFICATION	3.347377549429859E-4	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9996785483885657	WITHOUT_CLASSIFICATION	3.214516114342155E-4	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9994799434172595	WITHOUT_CLASSIFICATION	5.200565827404251E-4	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999043984009763	WITHOUT_CLASSIFICATION	9.560159902369081E-5	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998704519696874	WITHOUT_CLASSIFICATION	1.2954803031261166E-4	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9995176629943308	WITHOUT_CLASSIFICATION	4.8233700566913736E-4	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9996938289920625	WITHOUT_CLASSIFICATION	3.0617100793748524E-4	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9993102682296316	WITHOUT_CLASSIFICATION	6.897317703684047E-4	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996939409734334	WITHOUT_CLASSIFICATION	3.0605902656663785E-4	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9996217737238102	WITHOUT_CLASSIFICATION	3.782262761897934E-4	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9996199264251501	WITHOUT_CLASSIFICATION	3.800735748499359E-4	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9998488724376744	WITHOUT_CLASSIFICATION	1.5112756232565227E-4	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984224682063844	WITHOUT_CLASSIFICATION	0.001577531793615717	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984619133037356	WITHOUT_CLASSIFICATION	0.0015380866962644481	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986321959523562	WITHOUT_CLASSIFICATION	0.0013678040476438212	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99942886325782	WITHOUT_CLASSIFICATION	5.711367421801038E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984906922411926	WITHOUT_CLASSIFICATION	0.001509307758807393	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984906922411926	WITHOUT_CLASSIFICATION	0.001509307758807393	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984914505812212	WITHOUT_CLASSIFICATION	0.0015085494187787906	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998593712079365	WITHOUT_CLASSIFICATION	0.0014062879206350424	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9993253139796382	WITHOUT_CLASSIFICATION	6.74686020361713E-4	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9990357779539931	WITHOUT_CLASSIFICATION	9.642220460067926E-4	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985727790765079	WITHOUT_CLASSIFICATION	0.0014272209234920971	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987268033401359	WITHOUT_CLASSIFICATION	0.0012731966598642415	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984546863841658	WITHOUT_CLASSIFICATION	0.001545313615834247	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989064370102151	WITHOUT_CLASSIFICATION	0.001093562989784954	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990217357259765	WITHOUT_CLASSIFICATION	9.78264274023484E-4	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984785304908973	WITHOUT_CLASSIFICATION	0.0015214695091026991	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982361373018304	WITHOUT_CLASSIFICATION	0.0017638626981697093	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984906922411926	WITHOUT_CLASSIFICATION	0.001509307758807393	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9996732084422408	WITHOUT_CLASSIFICATION	3.267915577591377E-4	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994168841743774	WITHOUT_CLASSIFICATION	5.831158256226396E-4	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9995233570751982	WITHOUT_CLASSIFICATION	4.766429248018622E-4	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996466712209169	WITHOUT_CLASSIFICATION	3.5332877908307884E-4	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9998315765398225	WITHOUT_CLASSIFICATION	1.6842346017742095E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994772658654876	WITHOUT_CLASSIFICATION	5.227341345124577E-4	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9993209131757681	WITHOUT_CLASSIFICATION	6.790868242318107E-4	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9996083953695747	WITHOUT_CLASSIFICATION	3.916046304253377E-4	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9995542671316898	WITHOUT_CLASSIFICATION	4.4573286831012184E-4	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9993631635959375	WITHOUT_CLASSIFICATION	6.368364040624857E-4	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9993916601417394	WITHOUT_CLASSIFICATION	6.083398582606088E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995711886701618	WITHOUT_CLASSIFICATION	4.288113298381702E-4	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9994297366820281	WITHOUT_CLASSIFICATION	5.7026331797191E-4	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.999900169262534	WITHOUT_CLASSIFICATION	9.983073746599223E-5	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9995720870822411	WITHOUT_CLASSIFICATION	4.2791291775891386E-4	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9996157032630181	WITHOUT_CLASSIFICATION	3.842967369819146E-4	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999097632686367	WITHOUT_CLASSIFICATION	9.023673136328037E-5	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994470470912291	WITHOUT_CLASSIFICATION	5.529529087709082E-4	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995359375925207	WITHOUT_CLASSIFICATION	4.6406240747928686E-4	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994752366478744	WITHOUT_CLASSIFICATION	5.247633521255844E-4	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994514132143223	WITHOUT_CLASSIFICATION	5.485867856776981E-4	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9930273763897391	WITHOUT_CLASSIFICATION	0.006972623610260823	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9998497284327328	WITHOUT_CLASSIFICATION	1.5027156726714827E-4	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9995533916606608	WITHOUT_CLASSIFICATION	4.4660833933915625E-4	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.999632557438425	WITHOUT_CLASSIFICATION	3.6744256157500665E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994081754709434	WITHOUT_CLASSIFICATION	5.918245290565724E-4	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9996600685000727	WITHOUT_CLASSIFICATION	3.399314999272591E-4	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9996869568998747	WITHOUT_CLASSIFICATION	3.130431001252301E-4	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9996008355095417	WITHOUT_CLASSIFICATION	3.991644904582891E-4	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9997509484091254	WITHOUT_CLASSIFICATION	2.490515908746168E-4	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999400191722472	WITHOUT_CLASSIFICATION	5.99808277527989E-4	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9957624599014178	WITHOUT_CLASSIFICATION	0.0042375400985823	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9997219117198853	WITHOUT_CLASSIFICATION	2.780882801146967E-4	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9995772246909123	WITHOUT_CLASSIFICATION	4.227753090877554E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995711886701618	WITHOUT_CLASSIFICATION	4.288113298381702E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994772658654876	WITHOUT_CLASSIFICATION	5.227341345124577E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9996244599749161	WITHOUT_CLASSIFICATION	3.7554002508384976E-4	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9998398101382016	WITHOUT_CLASSIFICATION	1.6018986179842362E-4	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9991122801710828	WITHOUT_CLASSIFICATION	8.877198289172992E-4	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996466712209169	WITHOUT_CLASSIFICATION	3.5332877908307884E-4	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999429977036156	WITHOUT_CLASSIFICATION	5.700229638438758E-4	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9991992849551499	WITHOUT_CLASSIFICATION	8.007150448501899E-4	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9994241954661769	WITHOUT_CLASSIFICATION	5.758045338230093E-4	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.99938493285988	WITHOUT_CLASSIFICATION	6.150671401200711E-4	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9994921015575785	WITHOUT_CLASSIFICATION	5.078984424215109E-4	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9995725910990509	WITHOUT_CLASSIFICATION	4.274089009490652E-4	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999414251110789	WITHOUT_CLASSIFICATION	5.857488892110439E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9994228502594141	WITHOUT_CLASSIFICATION	5.771497405859855E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998235237669477	WITHOUT_CLASSIFICATION	1.764762330523463E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995711886701618	WITHOUT_CLASSIFICATION	4.288113298381702E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995711886701618	WITHOUT_CLASSIFICATION	4.288113298381702E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9987689256869223	WITHOUT_CLASSIFICATION	0.001231074313077694	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9979669213767149	WITHOUT_CLASSIFICATION	0.0020330786232851256	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9994805796930747	WITHOUT_CLASSIFICATION	5.194203069253951E-4	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9991489633500902	WITHOUT_CLASSIFICATION	8.510366499099009E-4	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996506957494117	WITHOUT_CLASSIFICATION	3.4930425058824947E-4	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9996226892436646	WITHOUT_CLASSIFICATION	3.7731075633543987E-4	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9996124401223949	WITHOUT_CLASSIFICATION	3.875598776050489E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995711886701618	WITHOUT_CLASSIFICATION	4.288113298381702E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9997583450330061	WITHOUT_CLASSIFICATION	2.4165496699391056E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9994860377064103	WITHOUT_CLASSIFICATION	5.139622935898037E-4	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9997362153065579	WITHOUT_CLASSIFICATION	2.6378469344209404E-4	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999557296732413	WITHOUT_CLASSIFICATION	4.4270326758707014E-4	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9994753290516125	WITHOUT_CLASSIFICATION	5.246709483874802E-4	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.999512718406272	WITHOUT_CLASSIFICATION	4.8728159372799944E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9993384046404359	WITHOUT_CLASSIFICATION	6.615953595640275E-4	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9994086412526613	WITHOUT_CLASSIFICATION	5.913587473386993E-4	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999656085017789	WITHOUT_CLASSIFICATION	3.4391498221095223E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994772658654876	WITHOUT_CLASSIFICATION	5.227341345124577E-4	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9994701361051287	WITHOUT_CLASSIFICATION	5.298638948713489E-4	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999157267421617	WITHOUT_CLASSIFICATION	8.427325783830462E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998684715444836	WITHOUT_CLASSIFICATION	1.315284555163183E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994772658654876	WITHOUT_CLASSIFICATION	5.227341345124577E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9995214480988138	WITHOUT_CLASSIFICATION	4.785519011860753E-4	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9997583450330061	WITHOUT_CLASSIFICATION	2.4165496699391056E-4	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9992684622853037	WITHOUT_CLASSIFICATION	7.315377146961187E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995711886701618	WITHOUT_CLASSIFICATION	4.288113298381702E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9995376102885968	WITHOUT_CLASSIFICATION	4.623897114032407E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995711886701618	WITHOUT_CLASSIFICATION	4.288113298381702E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9997117250992652	WITHOUT_CLASSIFICATION	2.882749007347698E-4	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9995725910990509	WITHOUT_CLASSIFICATION	4.274089009490652E-4	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999414251110789	WITHOUT_CLASSIFICATION	5.857488892110439E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9994228502594141	WITHOUT_CLASSIFICATION	5.771497405859855E-4	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9998811153869636	WITHOUT_CLASSIFICATION	1.18884613036461E-4	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9997601007479904	WITHOUT_CLASSIFICATION	2.398992520096722E-4	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9998144455209108	WITHOUT_CLASSIFICATION	1.8555447908917642E-4	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9998819417253012	WITHOUT_CLASSIFICATION	1.18058274698787E-4	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.999730808973682	WITHOUT_CLASSIFICATION	2.691910263180287E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995711886701618	WITHOUT_CLASSIFICATION	4.288113298381702E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994772658654876	WITHOUT_CLASSIFICATION	5.227341345124577E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998235237669477	WITHOUT_CLASSIFICATION	1.764762330523463E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9987689256869223	WITHOUT_CLASSIFICATION	0.001231074313077694	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997159892361119	WITHOUT_CLASSIFICATION	2.8401076388809727E-4	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996757079333592	WITHOUT_CLASSIFICATION	3.242920666406763E-4	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9996079789245594	WITHOUT_CLASSIFICATION	3.9202107544068266E-4	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9996527561196136	WITHOUT_CLASSIFICATION	3.4724388038638034E-4	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9994674525495847	WITHOUT_CLASSIFICATION	5.325474504153173E-4	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9996524293771127	WITHOUT_CLASSIFICATION	3.475706228872479E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984906922411926	WITHOUT_CLASSIFICATION	0.001509307758807393	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9998245134219098	WITHOUT_CLASSIFICATION	1.7548657809016683E-4	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9990813516589089	WITHOUT_CLASSIFICATION	9.186483410911045E-4	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9992532867546527	WITHOUT_CLASSIFICATION	7.467132453473172E-4	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9998622973229853	WITHOUT_CLASSIFICATION	1.3770267701487276E-4	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9993344957744306	WITHOUT_CLASSIFICATION	6.655042255694163E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984906922411926	WITHOUT_CLASSIFICATION	0.001509307758807393	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984906922411926	WITHOUT_CLASSIFICATION	0.001509307758807393	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987268033401359	WITHOUT_CLASSIFICATION	0.0012731966598642415	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9993344957744306	WITHOUT_CLASSIFICATION	6.655042255694163E-4	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9996133768563108	WITHOUT_CLASSIFICATION	3.8662314368917E-4	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999412853687028	WITHOUT_CLASSIFICATION	5.871463129719037E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986442410433096	WITHOUT_CLASSIFICATION	0.001355758956690405	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984906922411926	WITHOUT_CLASSIFICATION	0.001509307758807393	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.999717968325996	WITHOUT_CLASSIFICATION	2.8203167400393315E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995711886701618	WITHOUT_CLASSIFICATION	4.288113298381702E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995711886701618	WITHOUT_CLASSIFICATION	4.288113298381702E-4	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.999334209698965	WITHOUT_CLASSIFICATION	6.657903010349655E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984546863841658	WITHOUT_CLASSIFICATION	0.001545313615834247	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984785304908973	WITHOUT_CLASSIFICATION	0.0015214695091026991	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9997509484091254	WITHOUT_CLASSIFICATION	2.490515908746168E-4	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9998989328349913	WITHOUT_CLASSIFICATION	1.0106716500865775E-4	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9997432946699509	WITHOUT_CLASSIFICATION	2.567053300490244E-4	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999110940141792	WITHOUT_CLASSIFICATION	8.890598582082942E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9998987667218195	WITHOUT_CLASSIFICATION	1.012332781805023E-4	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9998612658094106	WITHOUT_CLASSIFICATION	1.38734190589447E-4	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9995265289017999	WITHOUT_CLASSIFICATION	4.73471098199999E-4	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9995533164622751	WITHOUT_CLASSIFICATION	4.466835377249529E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9993585969451096	WITHOUT_CLASSIFICATION	6.414030548903055E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999681156962955	WITHOUT_CLASSIFICATION	3.188430370453486E-5	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9879086705670932	WITHOUT_CLASSIFICATION	0.012091329432906826	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9998506722457032	WITHOUT_CLASSIFICATION	1.4932775429681732E-4	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999790383291794	WITHOUT_CLASSIFICATION	2.0961670820594753E-4	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9997486291510029	WITHOUT_CLASSIFICATION	2.513708489970592E-4	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9996183482876194	WITHOUT_CLASSIFICATION	3.816517123804826E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999383554906967	WITHOUT_CLASSIFICATION	6.16445093032917E-4	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996965017566535	WITHOUT_CLASSIFICATION	3.034982433464988E-4	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9929188285021562	WITHOUT_CLASSIFICATION	0.007081171497843788	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998035307622468	WITHOUT_CLASSIFICATION	1.9646923775315297E-4	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9994843722720255	WITHOUT_CLASSIFICATION	5.1562772797444E-4	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.999297134845558	WITHOUT_CLASSIFICATION	7.02865154442067E-4	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997919406816309	WITHOUT_CLASSIFICATION	2.080593183691249E-4	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999801765960462	WITHOUT_CLASSIFICATION	1.9823403953806004E-4	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997506601440385	WITHOUT_CLASSIFICATION	2.4933985596152893E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998248014162888	WITHOUT_CLASSIFICATION	1.751985837112214E-4	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9994888245691385	WITHOUT_CLASSIFICATION	5.111754308616453E-4	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9995105830171903	WITHOUT_CLASSIFICATION	4.894169828097027E-4	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997637775139508	WITHOUT_CLASSIFICATION	2.3622248604923793E-4	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9996221576990902	WITHOUT_CLASSIFICATION	3.778423009097356E-4	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997136645749729	WITHOUT_CLASSIFICATION	2.863354250271099E-4	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995748820984659	WITHOUT_CLASSIFICATION	4.2511790153404715E-4	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9997239536080462	WITHOUT_CLASSIFICATION	2.760463919537238E-4	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999796628061617	WITHOUT_CLASSIFICATION	2.0337193838299956E-5	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9997151988116606	WITHOUT_CLASSIFICATION	2.848011883394323E-4	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9994299620836992	WITHOUT_CLASSIFICATION	5.70037916300924E-4	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9995546925570578	WITHOUT_CLASSIFICATION	4.4530744294226987E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9995546925570578	WITHOUT_CLASSIFICATION	4.4530744294226987E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999743941644601	WITHOUT_CLASSIFICATION	2.560583553990841E-4	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9997225605564766	WITHOUT_CLASSIFICATION	2.774394435234328E-4	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9995505691962895	WITHOUT_CLASSIFICATION	4.494308037104461E-4	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9997142785735814	WITHOUT_CLASSIFICATION	2.8572142641855895E-4	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999501236135558	WITHOUT_CLASSIFICATION	4.98763864442256E-5	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9998328592642819	WITHOUT_CLASSIFICATION	1.6714073571808585E-4	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999844592185873	WITHOUT_CLASSIFICATION	1.55407814127873E-5	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999276722010414	WITHOUT_CLASSIFICATION	7.232779895858927E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999161073497028	WITHOUT_CLASSIFICATION	8.389265029711565E-5	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999412730369087	WITHOUT_CLASSIFICATION	5.872696309125187E-5	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999190124077028	WITHOUT_CLASSIFICATION	8.09875922972761E-5	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999810796026533	WITHOUT_CLASSIFICATION	1.8920397346821294E-5	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998910809416338	WITHOUT_CLASSIFICATION	1.0891905836611511E-4	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9987552463242915	WITHOUT_CLASSIFICATION	0.0012447536757086105	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9997414503877574	WITHOUT_CLASSIFICATION	2.585496122425687E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.999705564559157	WITHOUT_CLASSIFICATION	2.944354408430107E-4	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9997961215556761	WITHOUT_CLASSIFICATION	2.0387844432380922E-4	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9996600264622337	WITHOUT_CLASSIFICATION	3.3997353776632093E-4	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9993294836073421	WITHOUT_CLASSIFICATION	6.705163926578711E-4	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9996018781599758	WITHOUT_CLASSIFICATION	3.9812184002411714E-4	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9996464718116775	WITHOUT_CLASSIFICATION	3.535281883225046E-4	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9994630670583373	WITHOUT_CLASSIFICATION	5.369329416625975E-4	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9996870230692833	WITHOUT_CLASSIFICATION	3.129769307167076E-4	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9996529976865994	WITHOUT_CLASSIFICATION	3.4700231340063087E-4	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9996390997666996	WITHOUT_CLASSIFICATION	3.6090023330041603E-4	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9996864377897725	WITHOUT_CLASSIFICATION	3.135622102275043E-4	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9998853867225469	WITHOUT_CLASSIFICATION	1.1461327745312561E-4	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9998967870603956	WITHOUT_CLASSIFICATION	1.032129396043947E-4	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9998533835984738	WITHOUT_CLASSIFICATION	1.466164015262906E-4	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9993248209717978	WITHOUT_CLASSIFICATION	6.751790282023051E-4	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9994825573370439	WITHOUT_CLASSIFICATION	5.174426629560683E-4	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9993638162349503	WITHOUT_CLASSIFICATION	6.361837650496491E-4	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9997578976084464	WITHOUT_CLASSIFICATION	2.4210239155366106E-4	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.999540222936209	WITHOUT_CLASSIFICATION	4.5977706379100034E-4	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9995188362509381	WITHOUT_CLASSIFICATION	4.811637490619075E-4	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9993282879171511	WITHOUT_CLASSIFICATION	6.717120828489598E-4	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9993581791789027	WITHOUT_CLASSIFICATION	6.418208210972755E-4	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.999478645734826	WITHOUT_CLASSIFICATION	5.213542651739633E-4	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9995935073734687	WITHOUT_CLASSIFICATION	4.06492626531223E-4	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999337856213751	WITHOUT_CLASSIFICATION	6.621437862486646E-5	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9995386027518788	WITHOUT_CLASSIFICATION	4.613972481212161E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9995216096330377	WITHOUT_CLASSIFICATION	4.783903669622136E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9995216219130297	WITHOUT_CLASSIFICATION	4.7837808697032635E-4	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9998388981714718	WITHOUT_CLASSIFICATION	1.6110182852827884E-4	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9997834027368556	WITHOUT_CLASSIFICATION	2.1659726314447996E-4	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9998964886739762	WITHOUT_CLASSIFICATION	1.0351132602382857E-4	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9998832588898952	WITHOUT_CLASSIFICATION	1.167411101048055E-4	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9997309071393405	WITHOUT_CLASSIFICATION	2.690928606593935E-4	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9997173734995422	WITHOUT_CLASSIFICATION	2.826265004577768E-4	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9998561237320489	WITHOUT_CLASSIFICATION	1.4387626795097128E-4	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999980705762135	WITHOUT_CLASSIFICATION	1.929423786571233E-6	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9995139342626584	WITHOUT_CLASSIFICATION	4.8606573734157293E-4	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9993969033883497	WITHOUT_CLASSIFICATION	6.030966116502836E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9995138359686944	WITHOUT_CLASSIFICATION	4.8616403130560473E-4	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9994956430118667	WITHOUT_CLASSIFICATION	5.043569881332973E-4	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9995024308450028	WITHOUT_CLASSIFICATION	4.975691549972394E-4	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9994694136360099	WITHOUT_CLASSIFICATION	5.305863639900648E-4	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9995158856895173	WITHOUT_CLASSIFICATION	4.8411431048270666E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9993785301732097	WITHOUT_CLASSIFICATION	6.21469826790446E-4	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9993016593516052	WITHOUT_CLASSIFICATION	6.983406483947005E-4	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9993116229078334	WITHOUT_CLASSIFICATION	6.883770921666401E-4	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999063105137257	WITHOUT_CLASSIFICATION	9.368948627430202E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9992882247930157	WITHOUT_CLASSIFICATION	7.117752069843048E-4	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9994330750823083	WITHOUT_CLASSIFICATION	5.669249176916846E-4	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9995900781259828	WITHOUT_CLASSIFICATION	4.099218740171382E-4	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9992882247930157	WITHOUT_CLASSIFICATION	7.117752069843048E-4	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9996145580591123	WITHOUT_CLASSIFICATION	3.8544194088764865E-4	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9996396217152359	WITHOUT_CLASSIFICATION	3.603782847641437E-4	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9993074098558088	WITHOUT_CLASSIFICATION	6.925901441911424E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9981360043710316	WITHOUT_CLASSIFICATION	0.001863995628968456	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9997168544300651	WITHOUT_CLASSIFICATION	2.83145569934923E-4	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9998753725495543	WITHOUT_CLASSIFICATION	1.2462745044568055E-4	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9994554575863202	WITHOUT_CLASSIFICATION	5.445424136798588E-4	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9995574147512094	WITHOUT_CLASSIFICATION	4.4258524879057875E-4	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9995891499567319	WITHOUT_CLASSIFICATION	4.108500432681446E-4	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9994585540648013	WITHOUT_CLASSIFICATION	5.41445935198642E-4	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9997467425450917	WITHOUT_CLASSIFICATION	2.532574549082982E-4	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9997287272922476	WITHOUT_CLASSIFICATION	2.7127270775242196E-4	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9201248021222028	WITHOUT_CLASSIFICATION	0.07987519787779715	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999511104248848	WITHOUT_CLASSIFICATION	4.888957511515249E-5	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9998320330821064	WITHOUT_CLASSIFICATION	1.6796691789350323E-4	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9995906407217983	WITHOUT_CLASSIFICATION	4.0935927820168677E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9993921137955417	WITHOUT_CLASSIFICATION	6.078862044582499E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9993921137955417	WITHOUT_CLASSIFICATION	6.078862044582499E-4	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.99982830326036	WITHOUT_CLASSIFICATION	1.7169673963992018E-4	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9994689681295719	WITHOUT_CLASSIFICATION	5.310318704281962E-4	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.999595096595975	WITHOUT_CLASSIFICATION	4.049034040250085E-4	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9997171541686533	WITHOUT_CLASSIFICATION	2.828458313468011E-4	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9996993928014959	WITHOUT_CLASSIFICATION	3.0060719850411396E-4	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9995110866134795	WITHOUT_CLASSIFICATION	4.889133865203974E-4	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9998429715345866	WITHOUT_CLASSIFICATION	1.5702846541337554E-4	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9994499766259293	WITHOUT_CLASSIFICATION	5.50023374070804E-4	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9996774575334652	WITHOUT_CLASSIFICATION	3.2254246653483625E-4	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9998379789658911	WITHOUT_CLASSIFICATION	1.6202103410888885E-4	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999959509719475	WITHOUT_CLASSIFICATION	4.049028052491134E-5	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9994278126928445	WITHOUT_CLASSIFICATION	5.721873071555053E-4	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.999562017658249	WITHOUT_CLASSIFICATION	4.3798234175103514E-4	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999107626286167	WITHOUT_CLASSIFICATION	8.923737138323138E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999383554906967	WITHOUT_CLASSIFICATION	6.16445093032917E-4	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9996965272726532	WITHOUT_CLASSIFICATION	3.0347272734686714E-4	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9998818612587492	WITHOUT_CLASSIFICATION	1.1813874125077365E-4	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9996301427546028	WITHOUT_CLASSIFICATION	3.6985724539718995E-4	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9994545749513831	WITHOUT_CLASSIFICATION	5.454250486168639E-4	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9997930064488596	WITHOUT_CLASSIFICATION	2.0699355114036616E-4	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9993200791766409	WITHOUT_CLASSIFICATION	6.79920823359037E-4	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999727872181504	WITHOUT_CLASSIFICATION	2.721278184966387E-5	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999705430899601	WITHOUT_CLASSIFICATION	2.9456910039856522E-5	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999800277712272	WITHOUT_CLASSIFICATION	1.9972228772812287E-4	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9998209577749777	WITHOUT_CLASSIFICATION	1.7904222502239029E-4	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999216903340481	WITHOUT_CLASSIFICATION	7.830966595189592E-5	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9997667201588194	WITHOUT_CLASSIFICATION	2.332798411804914E-4	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9998961511636851	WITHOUT_CLASSIFICATION	1.0384883631491065E-4	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9993493851531318	WITHOUT_CLASSIFICATION	6.506148468682166E-4	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9996760628056058	WITHOUT_CLASSIFICATION	3.2393719439416765E-4	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9994440014301943	WITHOUT_CLASSIFICATION	5.559985698056322E-4	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9995813154332773	WITHOUT_CLASSIFICATION	4.1868456672263475E-4	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9993934333353787	WITHOUT_CLASSIFICATION	6.06566664621301E-4	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999277940202127	WITHOUT_CLASSIFICATION	7.22059797872525E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9996750624681484	WITHOUT_CLASSIFICATION	3.2493753185152834E-4	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9993913375977165	WITHOUT_CLASSIFICATION	6.086624022835244E-4	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9998251161807858	WITHOUT_CLASSIFICATION	1.74883819214104E-4	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998658277269636	WITHOUT_CLASSIFICATION	1.3417227303634725E-4	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9998719829814104	WITHOUT_CLASSIFICATION	1.2801701858948248E-4	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9996847117429131	WITHOUT_CLASSIFICATION	3.1528825708693626E-4	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999206873687004	WITHOUT_CLASSIFICATION	7.931263129962682E-5	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9997602056148971	WITHOUT_CLASSIFICATION	2.397943851029217E-4	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.999953191728962	WITHOUT_CLASSIFICATION	4.680827103804992E-5	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9998749130487006	WITHOUT_CLASSIFICATION	1.250869512993527E-4	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994223534897816	WITHOUT_CLASSIFICATION	5.776465102183762E-4	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995101804355272	WITHOUT_CLASSIFICATION	4.898195644729047E-4	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995161881528095	WITHOUT_CLASSIFICATION	4.838118471905076E-4	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.999878590908279	WITHOUT_CLASSIFICATION	1.2140909172091662E-4	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9998838568780832	WITHOUT_CLASSIFICATION	1.1614312191679787E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9993585969451096	WITHOUT_CLASSIFICATION	6.414030548903055E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9993585969451096	WITHOUT_CLASSIFICATION	6.414030548903055E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9997030083160444	WITHOUT_CLASSIFICATION	2.969916839554902E-4	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999768750163256	WITHOUT_CLASSIFICATION	2.3124983674326148E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9994688296953627	WITHOUT_CLASSIFICATION	5.311703046373595E-4	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995148578387233	WITHOUT_CLASSIFICATION	4.8514216127675273E-4	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9994688296953627	WITHOUT_CLASSIFICATION	5.311703046373595E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9995331984986751	WITHOUT_CLASSIFICATION	4.668015013248478E-4	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9993962756179854	WITHOUT_CLASSIFICATION	6.037243820146014E-4	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9996475980237836	WITHOUT_CLASSIFICATION	3.5240197621643095E-4	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9994699280428592	WITHOUT_CLASSIFICATION	5.300719571408653E-4	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9996757144826289	WITHOUT_CLASSIFICATION	3.242855173709625E-4	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9997561759138306	WITHOUT_CLASSIFICATION	2.4382408616934617E-4	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9996186038587002	WITHOUT_CLASSIFICATION	3.8139614129989794E-4	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9995519386444445	WITHOUT_CLASSIFICATION	4.480613555555843E-4	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9997448392113194	WITHOUT_CLASSIFICATION	2.5516078868060774E-4	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9997183075444496	WITHOUT_CLASSIFICATION	2.816924555504628E-4	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9991278610041704	WITHOUT_CLASSIFICATION	8.721389958296646E-4	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9995212866014689	WITHOUT_CLASSIFICATION	4.787133985311391E-4	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9993873328175835	WITHOUT_CLASSIFICATION	6.126671824164769E-4	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9998538631814996	WITHOUT_CLASSIFICATION	1.4613681850037335E-4	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9995085917855215	WITHOUT_CLASSIFICATION	4.914082144784426E-4	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999721020127023	WITHOUT_CLASSIFICATION	2.789798729769971E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9998463403738459	WITHOUT_CLASSIFICATION	1.5365962615404902E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9998463403738459	WITHOUT_CLASSIFICATION	1.5365962615404902E-4	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9993979844139987	WITHOUT_CLASSIFICATION	6.020155860012604E-4	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9997765551496149	WITHOUT_CLASSIFICATION	2.2344485038500544E-4	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9998409656203637	WITHOUT_CLASSIFICATION	1.5903437963619055E-4	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.999848141792869	WITHOUT_CLASSIFICATION	1.5185820713095117E-4	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.999908943327428	WITHOUT_CLASSIFICATION	9.1056672572045E-5	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999105566516665	WITHOUT_CLASSIFICATION	8.944334833350366E-5	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.999357921820718	WITHOUT_CLASSIFICATION	6.420781792818634E-4	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9996119063287271	WITHOUT_CLASSIFICATION	3.880936712728559E-4	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9996501233640891	WITHOUT_CLASSIFICATION	3.498766359108512E-4	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9997571966927034	WITHOUT_CLASSIFICATION	2.428033072966564E-4	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9995750067364465	WITHOUT_CLASSIFICATION	4.2499326355344657E-4	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999940209055024	WITHOUT_CLASSIFICATION	5.979094497595167E-5	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9996036536475413	WITHOUT_CLASSIFICATION	3.9634635245868697E-4	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9994839293559259	WITHOUT_CLASSIFICATION	5.160706440740394E-4	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9995694743868926	WITHOUT_CLASSIFICATION	4.305256131073973E-4	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9997639952837056	WITHOUT_CLASSIFICATION	2.360047162943246E-4	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9998224629625265	WITHOUT_CLASSIFICATION	1.7753703747352536E-4	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9994595524618602	WITHOUT_CLASSIFICATION	5.40447538139672E-4	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9996318863322694	WITHOUT_CLASSIFICATION	3.681136677305917E-4	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9996494012504932	WITHOUT_CLASSIFICATION	3.505987495068149E-4	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9995123222206078	WITHOUT_CLASSIFICATION	4.8767777939225993E-4	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9996376988759219	WITHOUT_CLASSIFICATION	3.6230112407814304E-4	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9994109285843955	WITHOUT_CLASSIFICATION	5.890714156045916E-4	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9996986206630739	WITHOUT_CLASSIFICATION	3.01379336926063E-4	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9994693616104836	WITHOUT_CLASSIFICATION	5.306383895164168E-4	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9998238940441013	WITHOUT_CLASSIFICATION	1.7610595589857565E-4	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9998464886437888	WITHOUT_CLASSIFICATION	1.5351135621134729E-4	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.999662836396334	WITHOUT_CLASSIFICATION	3.371636036659221E-4	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9994193814613045	WITHOUT_CLASSIFICATION	5.80618538695456E-4	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999434751997189	WITHOUT_CLASSIFICATION	5.652480028106411E-5	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9996546502925995	WITHOUT_CLASSIFICATION	3.4534970740043603E-4	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996470367455065	WITHOUT_CLASSIFICATION	3.5296325449346913E-4	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999053661035281	WITHOUT_CLASSIFICATION	9.463389647190256E-5	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9995918673057017	WITHOUT_CLASSIFICATION	4.0813269429832886E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999381416671709	WITHOUT_CLASSIFICATION	6.185833282914626E-5	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998711208978283	WITHOUT_CLASSIFICATION	1.2887910217173875E-4	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.999826293737709	WITHOUT_CLASSIFICATION	1.737062622908528E-4	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9995567912649174	WITHOUT_CLASSIFICATION	4.4320873508260346E-4	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9996016739138089	WITHOUT_CLASSIFICATION	3.9832608619104026E-4	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9995290501525311	WITHOUT_CLASSIFICATION	4.7094984746886675E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995043291336864	WITHOUT_CLASSIFICATION	4.956708663136371E-4	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9993126696044932	WITHOUT_CLASSIFICATION	6.873303955067968E-4	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9909748795511764	WITHOUT_CLASSIFICATION	0.009025120448823526	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.999925107435138	WITHOUT_CLASSIFICATION	7.489256486204222E-5	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9995660715986799	WITHOUT_CLASSIFICATION	4.3392840132006305E-4	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9918266264953236	WITHOUT_CLASSIFICATION	0.00817337350467643	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999932511621575	WITHOUT_CLASSIFICATION	6.748837842497206E-5	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9994999368100485	WITHOUT_CLASSIFICATION	5.000631899514582E-4	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9998203517995464	WITHOUT_CLASSIFICATION	1.7964820045361958E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995049059344334	WITHOUT_CLASSIFICATION	4.950940655665186E-4	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999300666888443	WITHOUT_CLASSIFICATION	6.993331115569418E-4	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999569002442484	WITHOUT_CLASSIFICATION	4.30997557515345E-5	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998628509271668	WITHOUT_CLASSIFICATION	1.3714907283324774E-4	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.999333925017173	WITHOUT_CLASSIFICATION	6.660749828269786E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9995214480988138	WITHOUT_CLASSIFICATION	4.785519011860753E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9995214480988138	WITHOUT_CLASSIFICATION	4.785519011860753E-4	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999706717454034	WITHOUT_CLASSIFICATION	2.9328254596677925E-5	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9995933979465991	WITHOUT_CLASSIFICATION	4.0660205340095135E-4	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9995223420522041	WITHOUT_CLASSIFICATION	4.7765794779588055E-4	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999451550652079	WITHOUT_CLASSIFICATION	5.484493479209989E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9996740928010385	WITHOUT_CLASSIFICATION	3.259071989614705E-4	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9998487851806723	WITHOUT_CLASSIFICATION	1.5121481932770135E-4	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9998247845282185	WITHOUT_CLASSIFICATION	1.752154717813742E-4	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9998853493283635	WITHOUT_CLASSIFICATION	1.1465067163648346E-4	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9996338489902528	WITHOUT_CLASSIFICATION	3.6615100974717496E-4	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999368419674396	WITHOUT_CLASSIFICATION	6.315803256036755E-5	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9997583620657169	WITHOUT_CLASSIFICATION	2.4163793428306118E-4	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9993916601417394	WITHOUT_CLASSIFICATION	6.083398582606088E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9997237466207819	WITHOUT_CLASSIFICATION	2.7625337921814117E-4	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9998985415665305	WITHOUT_CLASSIFICATION	1.0145843346943988E-4	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999281149831559	WITHOUT_CLASSIFICATION	7.188501684403733E-5	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999248217770809	WITHOUT_CLASSIFICATION	7.517822291919111E-5	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9993212707487786	WITHOUT_CLASSIFICATION	6.787292512213672E-4	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9998187917409116	WITHOUT_CLASSIFICATION	1.8120825908834152E-4	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9993001601167725	WITHOUT_CLASSIFICATION	6.998398832275737E-4	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999209230145507	WITHOUT_CLASSIFICATION	7.907698544926792E-5	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9994786192017879	WITHOUT_CLASSIFICATION	5.213807982120736E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.999433323740518	WITHOUT_CLASSIFICATION	5.666762594820743E-4	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999107700484903	WITHOUT_CLASSIFICATION	8.922995150967828E-5	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999026691382736	WITHOUT_CLASSIFICATION	9.733086172636484E-5	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9997414676569103	WITHOUT_CLASSIFICATION	2.585323430897149E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9993315647537339	WITHOUT_CLASSIFICATION	6.68435246266231E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9995587331521235	WITHOUT_CLASSIFICATION	4.4126684787647676E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9997659827758533	WITHOUT_CLASSIFICATION	2.3401722414662421E-4	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999962459550374	WITHOUT_CLASSIFICATION	3.754044962654513E-6	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9993371356129214	WITHOUT_CLASSIFICATION	6.628643870786665E-4	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999854304125241	WITHOUT_CLASSIFICATION	1.456958747590303E-4	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.99968450566341	WITHOUT_CLASSIFICATION	3.1549433658997696E-4	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9996705103393434	WITHOUT_CLASSIFICATION	3.2948966065658795E-4	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998429019977492	WITHOUT_CLASSIFICATION	1.5709800225074125E-4	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9993457013308767	WITHOUT_CLASSIFICATION	6.542986691232837E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9993371356129214	WITHOUT_CLASSIFICATION	6.628643870786665E-4	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9998782769594615	WITHOUT_CLASSIFICATION	1.2172304053839968E-4	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998414957781487	WITHOUT_CLASSIFICATION	1.5850422185120785E-4	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9996743788126732	WITHOUT_CLASSIFICATION	3.2562118732680414E-4	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9993048932542046	WITHOUT_CLASSIFICATION	6.951067457954224E-4	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9995750067364465	WITHOUT_CLASSIFICATION	4.2499326355344657E-4	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9995079791810112	WITHOUT_CLASSIFICATION	4.920208189888812E-4	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9995700953659602	WITHOUT_CLASSIFICATION	4.299046340398028E-4	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999856663671296	WITHOUT_CLASSIFICATION	1.4333632870406154E-4	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.999781656768617	WITHOUT_CLASSIFICATION	2.1834323138301973E-4	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9997487741571455	WITHOUT_CLASSIFICATION	2.51225842854569E-4	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9996163290663362	WITHOUT_CLASSIFICATION	3.836709336637223E-4	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9995661641498991	WITHOUT_CLASSIFICATION	4.338358501009253E-4	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999641160680318	WITHOUT_CLASSIFICATION	3.588393196821054E-5	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9993939072855179	WITHOUT_CLASSIFICATION	6.060927144820554E-4	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9996796961114235	WITHOUT_CLASSIFICATION	3.203038885764767E-4	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9997638823806417	WITHOUT_CLASSIFICATION	2.3611761935835116E-4	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9998064108382899	WITHOUT_CLASSIFICATION	1.9358916171018897E-4	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9994001758674415	WITHOUT_CLASSIFICATION	5.998241325584723E-4	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9996588942111947	WITHOUT_CLASSIFICATION	3.41105788805256E-4	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9995162135538962	WITHOUT_CLASSIFICATION	4.837864461037043E-4	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9998315214990161	WITHOUT_CLASSIFICATION	1.6847850098392848E-4	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9997909538539993	WITHOUT_CLASSIFICATION	2.0904614600068287E-4	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9997916758577055	WITHOUT_CLASSIFICATION	2.0832414229458643E-4	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9994830535848831	WITHOUT_CLASSIFICATION	5.169464151169242E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9994660781809142	WITHOUT_CLASSIFICATION	5.339218190857613E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9996855714300149	WITHOUT_CLASSIFICATION	3.1442856998517706E-4	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9997326019200036	WITHOUT_CLASSIFICATION	2.673980799964421E-4	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9997793614405461	WITHOUT_CLASSIFICATION	2.2063855945384368E-4	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9995772695058505	WITHOUT_CLASSIFICATION	4.227304941494788E-4	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9993223060183063	WITHOUT_CLASSIFICATION	6.776939816936789E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.99963057934544	WITHOUT_CLASSIFICATION	3.694206545600711E-4	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993277983233645	WITHOUT_CLASSIFICATION	6.722016766354849E-4	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992069884416608	WITHOUT_CLASSIFICATION	7.930115583392789E-4	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9998010755079577	WITHOUT_CLASSIFICATION	1.9892449204235844E-4	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9995267216977093	WITHOUT_CLASSIFICATION	4.732783022907835E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999802333281553	WITHOUT_CLASSIFICATION	1.976667184461823E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994860089633263	WITHOUT_CLASSIFICATION	5.139910366736306E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994860089633263	WITHOUT_CLASSIFICATION	5.139910366736306E-4	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999863341372907	WITHOUT_CLASSIFICATION	1.3665862709379263E-5	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9995075339116929	WITHOUT_CLASSIFICATION	4.924660883070797E-4	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9997226522968238	WITHOUT_CLASSIFICATION	2.773477031763013E-4	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999373561600279	WITHOUT_CLASSIFICATION	6.264383997218221E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999501323748697	WITHOUT_CLASSIFICATION	4.986762513030101E-4	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9995694765303769	WITHOUT_CLASSIFICATION	4.305234696231483E-4	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9997405101951706	WITHOUT_CLASSIFICATION	2.594898048293555E-4	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9997592365078066	WITHOUT_CLASSIFICATION	2.4076349219343394E-4	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9995260011450767	WITHOUT_CLASSIFICATION	4.739988549233278E-4	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999197476163499	WITHOUT_CLASSIFICATION	8.025238365002381E-5	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9992521236549576	WITHOUT_CLASSIFICATION	7.478763450423824E-4	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9998370675095185	WITHOUT_CLASSIFICATION	1.6293249048147555E-4	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9993723942102383	WITHOUT_CLASSIFICATION	6.276057897617015E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994860089633263	WITHOUT_CLASSIFICATION	5.139910366736306E-4	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9991692300572464	WITHOUT_CLASSIFICATION	8.307699427536368E-4	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9994336153855151	WITHOUT_CLASSIFICATION	5.663846144849782E-4	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9997270471914579	WITHOUT_CLASSIFICATION	2.729528085421793E-4	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9996088805704909	WITHOUT_CLASSIFICATION	3.9111942950911555E-4	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9998444962345936	WITHOUT_CLASSIFICATION	1.5550376540631705E-4	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9997124147284194	WITHOUT_CLASSIFICATION	2.8758527158056205E-4	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999487741631258	WITHOUT_CLASSIFICATION	5.122583687411923E-5	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9996873331586706	WITHOUT_CLASSIFICATION	3.1266684132931727E-4	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9996828110706224	WITHOUT_CLASSIFICATION	3.171889293775333E-4	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.999653616888368	WITHOUT_CLASSIFICATION	3.463831116319985E-4	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998464090338155	WITHOUT_CLASSIFICATION	1.5359096618450363E-4	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993277983233645	WITHOUT_CLASSIFICATION	6.722016766354849E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994860089633263	WITHOUT_CLASSIFICATION	5.139910366736306E-4	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9994591784642117	WITHOUT_CLASSIFICATION	5.408215357883181E-4	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9996802721938489	WITHOUT_CLASSIFICATION	3.1972780615112254E-4	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9995740207351816	WITHOUT_CLASSIFICATION	4.2597926481841784E-4	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9996504982691308	WITHOUT_CLASSIFICATION	3.4950173086912976E-4	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.999808452631656	WITHOUT_CLASSIFICATION	1.9154736834408963E-4	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9997601307044377	WITHOUT_CLASSIFICATION	2.3986929556243583E-4	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995726775874535	WITHOUT_CLASSIFICATION	4.2732241254654494E-4	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9997360171450527	WITHOUT_CLASSIFICATION	2.639828549473227E-4	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9997127771129332	WITHOUT_CLASSIFICATION	2.872228870668538E-4	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9996769232319608	WITHOUT_CLASSIFICATION	3.2307676803919647E-4	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999845429014178	WITHOUT_CLASSIFICATION	1.5457098582194253E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999168604677933	WITHOUT_CLASSIFICATION	8.313953220680152E-5	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9997313776408598	WITHOUT_CLASSIFICATION	2.686223591401249E-4	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999512126123905	WITHOUT_CLASSIFICATION	4.878738760949592E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9995331984986751	WITHOUT_CLASSIFICATION	4.668015013248478E-4	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9998044067544166	WITHOUT_CLASSIFICATION	1.9559324558340329E-4	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9998601945191388	WITHOUT_CLASSIFICATION	1.398054808612282E-4	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9996128767287038	WITHOUT_CLASSIFICATION	3.871232712961724E-4	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9993561020775821	WITHOUT_CLASSIFICATION	6.438979224180156E-4	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9998999643653866	WITHOUT_CLASSIFICATION	1.0003563461343376E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9994849851245889	WITHOUT_CLASSIFICATION	5.150148754110457E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9994849851245889	WITHOUT_CLASSIFICATION	5.150148754110457E-4	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9997991912176446	WITHOUT_CLASSIFICATION	2.0080878235542444E-4	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9998415923977966	WITHOUT_CLASSIFICATION	1.5840760220342656E-4	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9998617837161229	WITHOUT_CLASSIFICATION	1.3821628387709838E-4	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999321320358407	WITHOUT_CLASSIFICATION	6.786796415925429E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9995905735083479	WITHOUT_CLASSIFICATION	4.0942649165211475E-4	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9995756093892488	WITHOUT_CLASSIFICATION	4.2439061075124555E-4	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9995085402760141	WITHOUT_CLASSIFICATION	4.914597239858015E-4	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9996975863872442	WITHOUT_CLASSIFICATION	3.024136127558812E-4	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9996975863872442	WITHOUT_CLASSIFICATION	3.024136127558812E-4	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9992931710062937	WITHOUT_CLASSIFICATION	7.068289937063095E-4	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9995819491601777	WITHOUT_CLASSIFICATION	4.180508398223439E-4	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9997671443514478	WITHOUT_CLASSIFICATION	2.3285564855226844E-4	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996727197622151	WITHOUT_CLASSIFICATION	3.272802377849014E-4	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996727197622151	WITHOUT_CLASSIFICATION	3.272802377849014E-4	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996727197622151	WITHOUT_CLASSIFICATION	3.272802377849014E-4	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9997138114917024	WITHOUT_CLASSIFICATION	2.861885082976931E-4	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9997918953305128	WITHOUT_CLASSIFICATION	2.0810466948726998E-4	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9994393078504145	WITHOUT_CLASSIFICATION	5.60692149585517E-4	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9993886648087141	WITHOUT_CLASSIFICATION	6.113351912858818E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9997123649000732	WITHOUT_CLASSIFICATION	2.87635099926772E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994860089633263	WITHOUT_CLASSIFICATION	5.139910366736306E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994860089633263	WITHOUT_CLASSIFICATION	5.139910366736306E-4	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9997818862836129	WITHOUT_CLASSIFICATION	2.1811371638710887E-4	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999512364659028	WITHOUT_CLASSIFICATION	4.8763534097258486E-5	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9996407753795246	WITHOUT_CLASSIFICATION	3.5922462047547975E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9997962236457552	WITHOUT_CLASSIFICATION	2.037763542448047E-4	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9993990480083634	WITHOUT_CLASSIFICATION	6.009519916364588E-4	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9996749853281298	WITHOUT_CLASSIFICATION	3.2501467187011455E-4	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.999525728964336	WITHOUT_CLASSIFICATION	4.7427103566395043E-4	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9996461089213388	WITHOUT_CLASSIFICATION	3.5389107866124153E-4	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9997825733951712	WITHOUT_CLASSIFICATION	2.1742660482888947E-4	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9995609524242421	WITHOUT_CLASSIFICATION	4.3904757575778647E-4	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9997890851599722	WITHOUT_CLASSIFICATION	2.1091484002772374E-4	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9993916601417394	WITHOUT_CLASSIFICATION	6.083398582606088E-4	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9993916601417394	WITHOUT_CLASSIFICATION	6.083398582606088E-4	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9993916601417394	WITHOUT_CLASSIFICATION	6.083398582606088E-4	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9993916601417394	WITHOUT_CLASSIFICATION	6.083398582606088E-4	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9993916601417394	WITHOUT_CLASSIFICATION	6.083398582606088E-4	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9994554575863202	WITHOUT_CLASSIFICATION	5.445424136798588E-4	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9994554575863202	WITHOUT_CLASSIFICATION	5.445424136798588E-4	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9994554575863202	WITHOUT_CLASSIFICATION	5.445424136798588E-4	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9994554575863202	WITHOUT_CLASSIFICATION	5.445424136798588E-4	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998126494224492	WITHOUT_CLASSIFICATION	1.873505775508122E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9994849851245889	WITHOUT_CLASSIFICATION	5.150148754110457E-4	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999583156004533	WITHOUT_CLASSIFICATION	4.168439954670071E-4	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9994554575863202	WITHOUT_CLASSIFICATION	5.445424136798588E-4	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9998817428779874	WITHOUT_CLASSIFICATION	1.1825712201267625E-4	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9995690960769825	WITHOUT_CLASSIFICATION	4.3090392301753464E-4	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9993916601417394	WITHOUT_CLASSIFICATION	6.083398582606088E-4	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9993916601417394	WITHOUT_CLASSIFICATION	6.083398582606088E-4	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9998675728382611	WITHOUT_CLASSIFICATION	1.3242716173896056E-4	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9995696427041548	WITHOUT_CLASSIFICATION	4.3035729584523777E-4	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9998830337329989	WITHOUT_CLASSIFICATION	1.1696626700100748E-4	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9996187736061214	WITHOUT_CLASSIFICATION	3.812263938785916E-4	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9996771968757967	WITHOUT_CLASSIFICATION	3.2280312420326847E-4	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999643447271465	WITHOUT_CLASSIFICATION	3.565527285362101E-5	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9998202309075611	WITHOUT_CLASSIFICATION	1.7976909243878228E-4	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9996937385069735	WITHOUT_CLASSIFICATION	3.062614930263852E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9998475597253548	WITHOUT_CLASSIFICATION	1.5244027464530156E-4	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9994388575060336	WITHOUT_CLASSIFICATION	5.611424939663993E-4	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9997600017471707	WITHOUT_CLASSIFICATION	2.3999825282928662E-4	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9996619910590455	WITHOUT_CLASSIFICATION	3.3800894095453005E-4	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9989605517514311	WITHOUT_CLASSIFICATION	0.0010394482485690105	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9994686136076344	WITHOUT_CLASSIFICATION	5.3138639236557E-4	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9994686136076344	WITHOUT_CLASSIFICATION	5.3138639236557E-4	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9996548971588378	WITHOUT_CLASSIFICATION	3.451028411621781E-4	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9998803907516758	WITHOUT_CLASSIFICATION	1.1960924832415396E-4	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9997299265930245	WITHOUT_CLASSIFICATION	2.700734069755144E-4	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9996530157758609	WITHOUT_CLASSIFICATION	3.469842241390782E-4	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9995535683583823	WITHOUT_CLASSIFICATION	4.464316416177499E-4	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9997722138923051	WITHOUT_CLASSIFICATION	2.2778610769492004E-4	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9989785999381038	WITHOUT_CLASSIFICATION	0.0010214000618961876	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999882279145861	WITHOUT_CLASSIFICATION	1.1772085413900463E-4	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9997887593842045	WITHOUT_CLASSIFICATION	2.1124061579556769E-4	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9998448536580984	WITHOUT_CLASSIFICATION	1.5514634190166122E-4	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9994839531904244	WITHOUT_CLASSIFICATION	5.160468095756558E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999168604677933	WITHOUT_CLASSIFICATION	8.313953220680152E-5	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999292755853472	WITHOUT_CLASSIFICATION	7.072441465279156E-5	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999614070184895	WITHOUT_CLASSIFICATION	3.859298151053237E-5	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999878223119949	WITHOUT_CLASSIFICATION	1.2177688005098436E-4	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999560892105757	WITHOUT_CLASSIFICATION	4.3910789424334236E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9997880978105419	WITHOUT_CLASSIFICATION	2.1190218945819393E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9997880978105419	WITHOUT_CLASSIFICATION	2.1190218945819393E-4	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.999789886701428	WITHOUT_CLASSIFICATION	2.101132985719957E-4	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999902410746986	WITHOUT_CLASSIFICATION	9.758925301399702E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9998549467585007	WITHOUT_CLASSIFICATION	1.4505324149925337E-4	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.999904158656394	WITHOUT_CLASSIFICATION	9.5841343605955E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9998878122650767	WITHOUT_CLASSIFICATION	1.1218773492331574E-4	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9997696384310985	WITHOUT_CLASSIFICATION	2.3036156890151948E-4	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9994743682578713	WITHOUT_CLASSIFICATION	5.256317421287392E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999231935505242	WITHOUT_CLASSIFICATION	7.680644947588691E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9996730449752768	WITHOUT_CLASSIFICATION	3.2695502472329863E-4	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9997374222109073	WITHOUT_CLASSIFICATION	2.625777890926738E-4	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999968902146204	WITHOUT_CLASSIFICATION	3.109785379591382E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999231935505242	WITHOUT_CLASSIFICATION	7.680644947588691E-5	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9998878354724456	WITHOUT_CLASSIFICATION	1.1216452755446565E-4	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9996671924898411	WITHOUT_CLASSIFICATION	3.328075101588499E-4	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9998085881731921	WITHOUT_CLASSIFICATION	1.9141182680797894E-4	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9994733673161295	WITHOUT_CLASSIFICATION	5.266326838705078E-4	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999560291179898	WITHOUT_CLASSIFICATION	4.3970882010235296E-5	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999151868173483	WITHOUT_CLASSIFICATION	8.481318265169279E-5	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9995925043193271	WITHOUT_CLASSIFICATION	4.0749568067288385E-4	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9998504714266154	WITHOUT_CLASSIFICATION	1.495285733844964E-4	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999063558196	WITHOUT_CLASSIFICATION	9.364418040006579E-5	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999849536094906	WITHOUT_CLASSIFICATION	1.5046390509392544E-4	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9996019349386717	WITHOUT_CLASSIFICATION	3.9806506132834265E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9998095911138427	WITHOUT_CLASSIFICATION	1.9040888615724303E-4	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998267812689985	WITHOUT_CLASSIFICATION	1.732187310014998E-4	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9996861457707923	WITHOUT_CLASSIFICATION	3.138542292076851E-4	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9993699219924111	WITHOUT_CLASSIFICATION	6.300780075888374E-4	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.999988575865473	WITHOUT_CLASSIFICATION	1.1424134527104164E-5	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9996710327496212	WITHOUT_CLASSIFICATION	3.289672503788609E-4	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.999289402601668	WITHOUT_CLASSIFICATION	7.105973983319968E-4	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999289402601668	WITHOUT_CLASSIFICATION	7.105973983319968E-4	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9995762718960238	WITHOUT_CLASSIFICATION	4.2372810397615316E-4	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9997943881476081	WITHOUT_CLASSIFICATION	2.0561185239179332E-4	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.998876068368103	WITHOUT_CLASSIFICATION	0.0011239316318968906	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9995161441260721	WITHOUT_CLASSIFICATION	4.8385587392780794E-4	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9997811537262771	WITHOUT_CLASSIFICATION	2.188462737228619E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9996601187166371	WITHOUT_CLASSIFICATION	3.3988128336282696E-4	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999654012641661	WITHOUT_CLASSIFICATION	3.459873583386782E-5	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999062234422874	WITHOUT_CLASSIFICATION	9.3776557712681E-5	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9997863927186997	WITHOUT_CLASSIFICATION	2.136072813003452E-4	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999138258776329	WITHOUT_CLASSIFICATION	8.61741223672135E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999490159152925	WITHOUT_CLASSIFICATION	5.098408470760165E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9998399601590185	WITHOUT_CLASSIFICATION	1.600398409814942E-4	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9997178919408306	WITHOUT_CLASSIFICATION	2.821080591694607E-4	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9998915338329428	WITHOUT_CLASSIFICATION	1.0846616705712208E-4	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9995585854905908	WITHOUT_CLASSIFICATION	4.414145094092023E-4	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9998881763506353	WITHOUT_CLASSIFICATION	1.1182364936472106E-4	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999489217863686	WITHOUT_CLASSIFICATION	5.1078213631365434E-5	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9998840991010116	WITHOUT_CLASSIFICATION	1.1590089898840608E-4	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9998428861555433	WITHOUT_CLASSIFICATION	1.5711384445673524E-4	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9997636594378275	WITHOUT_CLASSIFICATION	2.3634056217241778E-4	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999564660181016	WITHOUT_CLASSIFICATION	4.3533981898453195E-5	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999545989432581	WITHOUT_CLASSIFICATION	4.54010567418488E-5	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998132686409946	WITHOUT_CLASSIFICATION	1.8673135900533155E-4	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999688128255025	WITHOUT_CLASSIFICATION	3.118717449751549E-5	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9997746435322025	WITHOUT_CLASSIFICATION	2.25356467797569E-4	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9995826943422765	WITHOUT_CLASSIFICATION	4.173056577234118E-4	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999102199865132	WITHOUT_CLASSIFICATION	8.978001348677186E-5	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998692999156873	WITHOUT_CLASSIFICATION	1.3070008431263476E-4	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9998780426890544	WITHOUT_CLASSIFICATION	1.2195731094563436E-4	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9997311015715389	WITHOUT_CLASSIFICATION	2.6889842846115284E-4	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999710808523018	WITHOUT_CLASSIFICATION	2.8919147698202414E-4	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9995585854905908	WITHOUT_CLASSIFICATION	4.414145094092023E-4	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9998185719449368	WITHOUT_CLASSIFICATION	1.8142805506319855E-4	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9998301985308286	WITHOUT_CLASSIFICATION	1.6980146917152547E-4	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999425938953775	WITHOUT_CLASSIFICATION	5.740610462248579E-5	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9997749053813036	WITHOUT_CLASSIFICATION	2.2509461869643182E-4	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9995172283962918	WITHOUT_CLASSIFICATION	4.8277160370825445E-4	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9998822047658494	WITHOUT_CLASSIFICATION	1.1779523415062706E-4	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9996693203036809	WITHOUT_CLASSIFICATION	3.306796963190466E-4	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9997856896337077	WITHOUT_CLASSIFICATION	2.14310366292243E-4	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9997093257597757	WITHOUT_CLASSIFICATION	2.906742402243252E-4	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9998493736497027	WITHOUT_CLASSIFICATION	1.506263502972276E-4	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9996319591978167	WITHOUT_CLASSIFICATION	3.680408021832502E-4	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999525170052431	WITHOUT_CLASSIFICATION	4.748299475691067E-5	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9997368784722985	WITHOUT_CLASSIFICATION	2.631215277014385E-4	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998577567102116	WITHOUT_CLASSIFICATION	1.4224328978845415E-4	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999710808523018	WITHOUT_CLASSIFICATION	2.8919147698202414E-4	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9995090085468837	WITHOUT_CLASSIFICATION	4.909914531162877E-4	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9995731915115844	WITHOUT_CLASSIFICATION	4.26808488415557E-4	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9998990506112896	WITHOUT_CLASSIFICATION	1.0094938871039194E-4	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999849640960201	WITHOUT_CLASSIFICATION	1.503590397984451E-5	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9992424428305183	WITHOUT_CLASSIFICATION	7.575571694815272E-4	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9997715176598342	WITHOUT_CLASSIFICATION	2.2848234016587625E-4	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9996730449752768	WITHOUT_CLASSIFICATION	3.2695502472329863E-4	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999543616988761	WITHOUT_CLASSIFICATION	4.5638301123993015E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9995585854905908	WITHOUT_CLASSIFICATION	4.414145094092023E-4	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9994010251331842	WITHOUT_CLASSIFICATION	5.989748668158618E-4	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999472090633819	WITHOUT_CLASSIFICATION	5.279093661810319E-4	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9997367626964483	WITHOUT_CLASSIFICATION	2.6323730355176536E-4	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9997362479403851	WITHOUT_CLASSIFICATION	2.637520596150087E-4	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9994670648825995	WITHOUT_CLASSIFICATION	5.329351174005728E-4	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9998495940191144	WITHOUT_CLASSIFICATION	1.504059808855718E-4	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9997528959486401	WITHOUT_CLASSIFICATION	2.471040513598385E-4	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999741208696975	WITHOUT_CLASSIFICATION	2.5879130302503385E-4	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9998614528332518	WITHOUT_CLASSIFICATION	1.3854716674826527E-4	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9996836615094775	WITHOUT_CLASSIFICATION	3.163384905224623E-4	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9996202358959404	WITHOUT_CLASSIFICATION	3.7976410405963693E-4	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999531355285765	WITHOUT_CLASSIFICATION	4.686447142346403E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9996600898959741	WITHOUT_CLASSIFICATION	3.3991010402595654E-4	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9996600898959741	WITHOUT_CLASSIFICATION	3.3991010402595654E-4	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9997698856326183	WITHOUT_CLASSIFICATION	2.3011436738184455E-4	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9996177997247885	WITHOUT_CLASSIFICATION	3.82200275211441E-4	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9998518572550209	WITHOUT_CLASSIFICATION	1.481427449791015E-4	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999661118277655	WITHOUT_CLASSIFICATION	3.3888172234406124E-5	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999953512580906	WITHOUT_CLASSIFICATION	4.648741909396664E-5	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9997442124534069	WITHOUT_CLASSIFICATION	2.557875465931028E-4	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999778224777268	WITHOUT_CLASSIFICATION	2.2177522273252015E-5	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999944443446963	WITHOUT_CLASSIFICATION	5.5556553037119424E-5	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9998020730429583	WITHOUT_CLASSIFICATION	1.9792695704170512E-4	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9995527818461694	WITHOUT_CLASSIFICATION	4.4721815383066857E-4	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9994449991246647	WITHOUT_CLASSIFICATION	5.550008753352671E-4	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9996485634323831	WITHOUT_CLASSIFICATION	3.514365676168835E-4	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9997526702038132	WITHOUT_CLASSIFICATION	2.4732979618671017E-4	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999984464499619	WITHOUT_CLASSIFICATION	1.5535500381063437E-5	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9995566840380748	WITHOUT_CLASSIFICATION	4.4331596192502743E-4	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9997897071178605	WITHOUT_CLASSIFICATION	2.1029288213959154E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9997007190844288	WITHOUT_CLASSIFICATION	2.9928091557117586E-4	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999949228172622	WITHOUT_CLASSIFICATION	5.077182737737931E-6	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999306554368775	WITHOUT_CLASSIFICATION	6.934456312246445E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995711886701618	WITHOUT_CLASSIFICATION	4.288113298381702E-4	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999291657273752	WITHOUT_CLASSIFICATION	7.083427262485388E-5	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999173489517683	WITHOUT_CLASSIFICATION	8.2651048231703E-5	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999702959510456	WITHOUT_CLASSIFICATION	2.9704048954404518E-5	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.999580012601621	WITHOUT_CLASSIFICATION	4.199873983790029E-4	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9993298667986209	WITHOUT_CLASSIFICATION	6.701332013791548E-4	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9996778861830748	WITHOUT_CLASSIFICATION	3.2211381692516175E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995711886701618	WITHOUT_CLASSIFICATION	4.288113298381702E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995711886701618	WITHOUT_CLASSIFICATION	4.288113298381702E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999665262245057	WITHOUT_CLASSIFICATION	3.347377549429859E-4	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999935542438432	WITHOUT_CLASSIFICATION	6.445756156795682E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9995477911028806	WITHOUT_CLASSIFICATION	4.5220889711939055E-4	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996560015781665	WITHOUT_CLASSIFICATION	3.439984218335624E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9994806826746716	WITHOUT_CLASSIFICATION	5.19317325328356E-4	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999381624339753	WITHOUT_CLASSIFICATION	6.183756602472774E-5	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9960409566441939	WITHOUT_CLASSIFICATION	0.003959043355806114	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9996470929151651	WITHOUT_CLASSIFICATION	3.529070848348479E-4	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9998257769293148	WITHOUT_CLASSIFICATION	1.7422307068519982E-4	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9995167314682606	WITHOUT_CLASSIFICATION	4.8326853173933206E-4	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9998031200803472	WITHOUT_CLASSIFICATION	1.9687991965272922E-4	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9997339696994039	WITHOUT_CLASSIFICATION	2.6603030059610156E-4	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9996944936629386	WITHOUT_CLASSIFICATION	3.0550633706142265E-4	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978218829954534	WITHOUT_CLASSIFICATION	0.0021781170045465674	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999392400273767	WITHOUT_CLASSIFICATION	6.075997262344824E-5	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9993928637195449	WITHOUT_CLASSIFICATION	6.071362804550308E-4	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9994352125538845	WITHOUT_CLASSIFICATION	5.647874461155584E-4	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.999461790146483	WITHOUT_CLASSIFICATION	5.382098535171503E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986442410433096	WITHOUT_CLASSIFICATION	0.001355758956690405	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9995981318769029	WITHOUT_CLASSIFICATION	4.018681230971097E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999106129644553	WITHOUT_CLASSIFICATION	8.938703554471664E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999356168542045	WITHOUT_CLASSIFICATION	6.438314579551243E-5	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9997927447824755	WITHOUT_CLASSIFICATION	2.0725521752453592E-4	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988474670082398	WITHOUT_CLASSIFICATION	0.0011525329917602644	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9997342520190172	WITHOUT_CLASSIFICATION	2.657479809827804E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9998860444032902	WITHOUT_CLASSIFICATION	1.1395559670978425E-4	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9998548705379834	WITHOUT_CLASSIFICATION	1.4512946201657585E-4	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9995116285836365	WITHOUT_CLASSIFICATION	4.883714163634388E-4	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9996291218522168	WITHOUT_CLASSIFICATION	3.708781477831878E-4	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999551373513367	WITHOUT_CLASSIFICATION	4.486264866328365E-5	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9997540150761629	WITHOUT_CLASSIFICATION	2.459849238371478E-4	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9991494984438972	WITHOUT_CLASSIFICATION	8.505015561028632E-4	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9995392122042911	WITHOUT_CLASSIFICATION	4.6078779570889373E-4	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9997351967974683	WITHOUT_CLASSIFICATION	2.6480320253172086E-4	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9998033752100204	WITHOUT_CLASSIFICATION	1.9662478997966817E-4	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9994932603901525	WITHOUT_CLASSIFICATION	5.067396098475443E-4	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9994497744918409	WITHOUT_CLASSIFICATION	5.502255081590822E-4	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9998547847349579	WITHOUT_CLASSIFICATION	1.452152650419421E-4	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.999744283816413	WITHOUT_CLASSIFICATION	2.5571618358708115E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9996466623883501	WITHOUT_CLASSIFICATION	3.5333761164989887E-4	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9998061383823367	WITHOUT_CLASSIFICATION	1.9386161766342099E-4	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998251837596087	WITHOUT_CLASSIFICATION	1.7481624039121976E-4	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9995328011661117	WITHOUT_CLASSIFICATION	4.6719883388822734E-4	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998251837596087	WITHOUT_CLASSIFICATION	1.7481624039121976E-4	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999276370578158	WITHOUT_CLASSIFICATION	7.236294218410773E-5	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9998156415734064	WITHOUT_CLASSIFICATION	1.8435842659345923E-4	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9998870621755022	WITHOUT_CLASSIFICATION	1.1293782449780578E-4	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999957270159361	WITHOUT_CLASSIFICATION	4.27298406389537E-5	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9998421752240506	WITHOUT_CLASSIFICATION	1.5782477594928075E-4	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9998865404841892	WITHOUT_CLASSIFICATION	1.1345951581074995E-4	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.99990551131512	WITHOUT_CLASSIFICATION	9.448868487998475E-5	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9996279562559072	WITHOUT_CLASSIFICATION	3.7204374409289853E-4	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9998122953787202	WITHOUT_CLASSIFICATION	1.8770462127972958E-4	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9995168182616931	WITHOUT_CLASSIFICATION	4.8318173830679445E-4	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9997274456100704	WITHOUT_CLASSIFICATION	2.72554389929543E-4	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999952820854742	WITHOUT_CLASSIFICATION	4.7179145257969386E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999574538861918	WITHOUT_CLASSIFICATION	4.2546113808167265E-5	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9998315897697713	WITHOUT_CLASSIFICATION	1.684102302287117E-4	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999881781992545	WITHOUT_CLASSIFICATION	1.1821800745501134E-4	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9998655130909821	WITHOUT_CLASSIFICATION	1.3448690901784343E-4	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9998993892262078	WITHOUT_CLASSIFICATION	1.0061077379224115E-4	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9995244482051818	WITHOUT_CLASSIFICATION	4.75551794818182E-4	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9998803221612984	WITHOUT_CLASSIFICATION	1.196778387015287E-4	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9997501648068805	WITHOUT_CLASSIFICATION	2.4983519311943555E-4	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999457104742769	WITHOUT_CLASSIFICATION	5.428952572306901E-5	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9994674739331558	WITHOUT_CLASSIFICATION	5.3252606684415E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9997814671747042	WITHOUT_CLASSIFICATION	2.185328252957658E-4	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997296547133259	WITHOUT_CLASSIFICATION	2.7034528667413274E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9994575410286656	WITHOUT_CLASSIFICATION	5.424589713344228E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999145554091093	WITHOUT_CLASSIFICATION	8.544459089069044E-5	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9996724791543524	WITHOUT_CLASSIFICATION	3.2752084564763057E-4	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.999551130094858	WITHOUT_CLASSIFICATION	4.488699051419927E-4	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9994941568425159	WITHOUT_CLASSIFICATION	5.05843157484233E-4	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9997486708802749	WITHOUT_CLASSIFICATION	2.513291197250643E-4	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9993021360127443	WITHOUT_CLASSIFICATION	6.978639872557549E-4	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999165156171598	WITHOUT_CLASSIFICATION	8.348438284015015E-5	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9998893182105197	WITHOUT_CLASSIFICATION	1.1068178948029228E-4	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9994337540955022	WITHOUT_CLASSIFICATION	5.662459044978264E-4	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9993240740923315	WITHOUT_CLASSIFICATION	6.75925907668469E-4	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9995872365637254	WITHOUT_CLASSIFICATION	4.12763436274627E-4	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9994917596529124	WITHOUT_CLASSIFICATION	5.082403470876464E-4	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9993051473433232	WITHOUT_CLASSIFICATION	6.948526566767856E-4	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9995106277749486	WITHOUT_CLASSIFICATION	4.893722250513997E-4	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.999751647887316	WITHOUT_CLASSIFICATION	2.483521126841105E-4	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9993138242468826	WITHOUT_CLASSIFICATION	6.861757531174285E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998684715444836	WITHOUT_CLASSIFICATION	1.315284555163183E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999145554091093	WITHOUT_CLASSIFICATION	8.544459089069044E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9996091071864737	WITHOUT_CLASSIFICATION	3.9089281352636763E-4	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9994681788349906	WITHOUT_CLASSIFICATION	5.31821165009456E-4	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9996775801352906	WITHOUT_CLASSIFICATION	3.2241986470943866E-4	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9991083376402878	WITHOUT_CLASSIFICATION	8.916623597121269E-4	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9997816724179115	WITHOUT_CLASSIFICATION	2.1832758208855537E-4	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9996327576032397	WITHOUT_CLASSIFICATION	3.6724239676032934E-4	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9995510633313861	WITHOUT_CLASSIFICATION	4.489366686138607E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9994574617424113	WITHOUT_CLASSIFICATION	5.425382575886459E-4	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9997679846649554	WITHOUT_CLASSIFICATION	2.3201533504462848E-4	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9994784252493834	WITHOUT_CLASSIFICATION	5.21574750616761E-4	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9998313689901411	WITHOUT_CLASSIFICATION	1.6863100985889946E-4	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9996207215649886	WITHOUT_CLASSIFICATION	3.792784350114349E-4	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9993913169553549	WITHOUT_CLASSIFICATION	6.08683044645043E-4	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9995505396076667	WITHOUT_CLASSIFICATION	4.494603923332688E-4	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999179837728408	WITHOUT_CLASSIFICATION	8.201622715913583E-5	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.999539178859043	WITHOUT_CLASSIFICATION	4.608211409570824E-4	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9995610476562224	WITHOUT_CLASSIFICATION	4.389523437776059E-4	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.999887408113961	WITHOUT_CLASSIFICATION	1.1259188603899758E-4	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999482629508437	WITHOUT_CLASSIFICATION	5.173704915629628E-4	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9993199893870462	WITHOUT_CLASSIFICATION	6.800106129536547E-4	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9994128603494715	WITHOUT_CLASSIFICATION	5.871396505284102E-4	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9997198159570222	WITHOUT_CLASSIFICATION	2.801840429777522E-4	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999013535458664	WITHOUT_CLASSIFICATION	9.864645413361897E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9972251218401589	WITHOUT_CLASSIFICATION	0.0027748781598411574	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9972251218401589	WITHOUT_CLASSIFICATION	0.0027748781598411574	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999023583959816	WITHOUT_CLASSIFICATION	9.764160401833971E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9972251218401589	WITHOUT_CLASSIFICATION	0.0027748781598411574	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9972251218401589	WITHOUT_CLASSIFICATION	0.0027748781598411574	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9996586602220526	WITHOUT_CLASSIFICATION	3.4133977794737294E-4	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9996483169474819	WITHOUT_CLASSIFICATION	3.516830525180862E-4	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9995217170602431	WITHOUT_CLASSIFICATION	4.782829397569121E-4	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9995174599800101	WITHOUT_CLASSIFICATION	4.825400199900022E-4	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998350569821598	WITHOUT_CLASSIFICATION	1.6494301784012095E-4	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.999765299225232	WITHOUT_CLASSIFICATION	2.347007747680439E-4	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9995226089111787	WITHOUT_CLASSIFICATION	4.7739108882125354E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9998735078514426	WITHOUT_CLASSIFICATION	1.2649214855736234E-4	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9993204471809756	WITHOUT_CLASSIFICATION	6.795528190245644E-4	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9993525195107136	WITHOUT_CLASSIFICATION	6.474804892864923E-4	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9996508233774933	WITHOUT_CLASSIFICATION	3.491766225066434E-4	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9994956535505715	WITHOUT_CLASSIFICATION	5.043464494284844E-4	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.999480361934281	WITHOUT_CLASSIFICATION	5.196380657189008E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9993289268575767	WITHOUT_CLASSIFICATION	6.710731424232656E-4	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9995044356246898	WITHOUT_CLASSIFICATION	4.955643753101031E-4	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9997109134106553	WITHOUT_CLASSIFICATION	2.8908658934469574E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9997030083160444	WITHOUT_CLASSIFICATION	2.969916839554902E-4	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9995336847132049	WITHOUT_CLASSIFICATION	4.6631528679504683E-4	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.999378454533589	WITHOUT_CLASSIFICATION	6.215454664110671E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9993289268575767	WITHOUT_CLASSIFICATION	6.710731424232656E-4	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9997521707668062	WITHOUT_CLASSIFICATION	2.478292331937839E-4	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9995535112474861	WITHOUT_CLASSIFICATION	4.4648875251377144E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9997030083160444	WITHOUT_CLASSIFICATION	2.969916839554902E-4	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9996724791543524	WITHOUT_CLASSIFICATION	3.2752084564763057E-4	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9993926526169726	WITHOUT_CLASSIFICATION	6.073473830273793E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998248014162888	WITHOUT_CLASSIFICATION	1.751985837112214E-4	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997637775139508	WITHOUT_CLASSIFICATION	2.3622248604923793E-4	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9994186646177952	WITHOUT_CLASSIFICATION	5.813353822048795E-4	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9998161792925688	WITHOUT_CLASSIFICATION	1.8382070743106692E-4	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9993234836103648	WITHOUT_CLASSIFICATION	6.76516389635295E-4	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998252245463091	WITHOUT_CLASSIFICATION	1.7477545369091132E-4	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9993903946419753	WITHOUT_CLASSIFICATION	6.096053580247428E-4	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9994106811718343	WITHOUT_CLASSIFICATION	5.893188281657631E-4	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9995980150327787	WITHOUT_CLASSIFICATION	4.0198496722128297E-4	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9996621687520204	WITHOUT_CLASSIFICATION	3.378312479796374E-4	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9994938812942651	WITHOUT_CLASSIFICATION	5.061187057349228E-4	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998003093302213	WITHOUT_CLASSIFICATION	1.9969066977869917E-4	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.999710550629184	WITHOUT_CLASSIFICATION	2.894493708159436E-4	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.999819011477108	WITHOUT_CLASSIFICATION	1.8098852289207372E-4	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9995116811481837	WITHOUT_CLASSIFICATION	4.883188518164442E-4	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9994666955824627	WITHOUT_CLASSIFICATION	5.333044175373133E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9998321479612134	WITHOUT_CLASSIFICATION	1.6785203878652251E-4	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9996677545623142	WITHOUT_CLASSIFICATION	3.32245437685887E-4	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9995338091781026	WITHOUT_CLASSIFICATION	4.6619082189736555E-4	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9994156000301845	WITHOUT_CLASSIFICATION	5.84399969815549E-4	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9995494651911371	WITHOUT_CLASSIFICATION	4.505348088629263E-4	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9993903946419753	WITHOUT_CLASSIFICATION	6.096053580247428E-4	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9994662296874431	WITHOUT_CLASSIFICATION	5.337703125568369E-4	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9994148768875167	WITHOUT_CLASSIFICATION	5.851231124833448E-4	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9993475582791596	WITHOUT_CLASSIFICATION	6.524417208404048E-4	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9992621851892113	WITHOUT_CLASSIFICATION	7.37814810788686E-4	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995496425731734	WITHOUT_CLASSIFICATION	4.503574268266459E-4	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.99937482206905	WITHOUT_CLASSIFICATION	6.251779309499156E-4	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9993222079571537	WITHOUT_CLASSIFICATION	6.777920428463507E-4	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9990621748228036	WITHOUT_CLASSIFICATION	9.378251771964977E-4	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9993991648147289	WITHOUT_CLASSIFICATION	6.008351852710371E-4	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9993109263913463	WITHOUT_CLASSIFICATION	6.890736086536223E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996765556630997	WITHOUT_CLASSIFICATION	3.2344433690032674E-4	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.99964577206765	WITHOUT_CLASSIFICATION	3.542279323499273E-4	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9997802693185667	WITHOUT_CLASSIFICATION	2.1973068143335656E-4	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999237029388502	WITHOUT_CLASSIFICATION	7.629706114967001E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9994560041518562	WITHOUT_CLASSIFICATION	5.439958481439153E-4	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999987177857384	WITHOUT_CLASSIFICATION	1.2822142616076018E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996026143518042	WITHOUT_CLASSIFICATION	3.973856481958849E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996765556630997	WITHOUT_CLASSIFICATION	3.2344433690032674E-4	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999766944638401	WITHOUT_CLASSIFICATION	2.3305536159949342E-5	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9993788855536228	WITHOUT_CLASSIFICATION	6.211144463773155E-4	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9996018679393457	WITHOUT_CLASSIFICATION	3.9813206065433435E-4	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999586305112318	WITHOUT_CLASSIFICATION	4.1369488768195E-4	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9997900079754717	WITHOUT_CLASSIFICATION	2.0999202452841025E-4	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9998317124147263	WITHOUT_CLASSIFICATION	1.6828758527359327E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9994560041518562	WITHOUT_CLASSIFICATION	5.439958481439153E-4	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9997204595050929	WITHOUT_CLASSIFICATION	2.795404949071454E-4	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998371156946884	WITHOUT_CLASSIFICATION	1.6288430531169023E-4	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997410819382871	WITHOUT_CLASSIFICATION	2.589180617128579E-4	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9880996054514884	WITHOUT_CLASSIFICATION	0.011900394548511592	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9864874475697331	WITHOUT_CLASSIFICATION	0.013512552430267041	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9878230644912348	WITHOUT_CLASSIFICATION	0.012176935508765203	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9995882962804916	WITHOUT_CLASSIFICATION	4.11703719508337E-4	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9995882962804916	WITHOUT_CLASSIFICATION	4.11703719508337E-4	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9994430502086188	WITHOUT_CLASSIFICATION	5.569497913811787E-4	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9998336699496603	WITHOUT_CLASSIFICATION	1.663300503397083E-4	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9993688567250636	WITHOUT_CLASSIFICATION	6.311432749364111E-4	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9993687017860662	WITHOUT_CLASSIFICATION	6.312982139337755E-4	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9997679792500023	WITHOUT_CLASSIFICATION	2.3202074999765265E-4	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995471388157458	WITHOUT_CLASSIFICATION	4.5286118425422596E-4	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995289533712991	WITHOUT_CLASSIFICATION	4.7104662870080667E-4	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994912762522477	WITHOUT_CLASSIFICATION	5.08723747752385E-4	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999482528680033	WITHOUT_CLASSIFICATION	5.174713199675755E-5	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996954718303376	WITHOUT_CLASSIFICATION	3.0452816966247616E-4	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995471388157458	WITHOUT_CLASSIFICATION	4.5286118425422596E-4	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995289533712991	WITHOUT_CLASSIFICATION	4.7104662870080667E-4	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994912762522477	WITHOUT_CLASSIFICATION	5.08723747752385E-4	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9995924872557872	WITHOUT_CLASSIFICATION	4.075127442128328E-4	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9993210511698251	WITHOUT_CLASSIFICATION	6.789488301749742E-4	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9998954122619789	WITHOUT_CLASSIFICATION	1.045877380210865E-4	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9998998685300541	WITHOUT_CLASSIFICATION	1.0013146994589786E-4	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9997029132495207	WITHOUT_CLASSIFICATION	2.9708675047938806E-4	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9998728632225424	WITHOUT_CLASSIFICATION	1.2713677745763231E-4	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9997100246901826	WITHOUT_CLASSIFICATION	2.899753098174325E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9994035201014146	WITHOUT_CLASSIFICATION	5.9647989858528E-4	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9994038587301184	WITHOUT_CLASSIFICATION	5.961412698815367E-4	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9995475755640126	WITHOUT_CLASSIFICATION	4.524244359872553E-4	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997526003118065	WITHOUT_CLASSIFICATION	2.473996881935698E-4	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9996373570478521	WITHOUT_CLASSIFICATION	3.62642952147955E-4	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999531770644676	WITHOUT_CLASSIFICATION	4.682293553239425E-4	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9997589938957446	WITHOUT_CLASSIFICATION	2.4100610425530945E-4	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9994044605992289	WITHOUT_CLASSIFICATION	5.955394007709376E-4	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9996280318565065	WITHOUT_CLASSIFICATION	3.7196814349356385E-4	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9995144240557948	WITHOUT_CLASSIFICATION	4.8557594420516986E-4	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9998346078491297	WITHOUT_CLASSIFICATION	1.6539215087028034E-4	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9997679578579122	WITHOUT_CLASSIFICATION	2.3204214208773205E-4	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998943684136162	WITHOUT_CLASSIFICATION	1.0563158638389395E-4	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9998445537331572	WITHOUT_CLASSIFICATION	1.5544626684274032E-4	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999584778830963	WITHOUT_CLASSIFICATION	4.152211690376199E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999648269043259	WITHOUT_CLASSIFICATION	3.517309567415303E-5	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9992735508574331	WITHOUT_CLASSIFICATION	7.26449142566904E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994629525751386	WITHOUT_CLASSIFICATION	5.370474248612945E-4	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995812960134577	WITHOUT_CLASSIFICATION	4.1870398654237316E-4	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999856400291987	WITHOUT_CLASSIFICATION	1.435997080137378E-5	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995941834246131	WITHOUT_CLASSIFICATION	4.058165753867516E-4	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995253449213483	WITHOUT_CLASSIFICATION	4.7465507865180934E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9995138359686944	WITHOUT_CLASSIFICATION	4.8616403130560473E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9995138359686944	WITHOUT_CLASSIFICATION	4.8616403130560473E-4	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998644202996814	WITHOUT_CLASSIFICATION	1.355797003185693E-4	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.999909429832407	WITHOUT_CLASSIFICATION	9.057016759292986E-5	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.999573918580491	WITHOUT_CLASSIFICATION	4.260814195090529E-4	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999168604677933	WITHOUT_CLASSIFICATION	8.313953220680152E-5	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9986116289977177	WITHOUT_CLASSIFICATION	0.0013883710022823275	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9998170795461488	WITHOUT_CLASSIFICATION	1.829204538511746E-4	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.999572726072591	WITHOUT_CLASSIFICATION	4.272739274090923E-4	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9996216390234092	WITHOUT_CLASSIFICATION	3.783609765909005E-4	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9993116229078334	WITHOUT_CLASSIFICATION	6.883770921666401E-4	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997988962522844	WITHOUT_CLASSIFICATION	2.0110374771574734E-4	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998207470206614	WITHOUT_CLASSIFICATION	1.7925297933856478E-4	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99975678418409	WITHOUT_CLASSIFICATION	2.4321581591004818E-4	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997680349258576	WITHOUT_CLASSIFICATION	2.319650741424385E-4	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997684238183225	WITHOUT_CLASSIFICATION	2.3157618167749327E-4	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997556564129887	WITHOUT_CLASSIFICATION	2.4434358701139793E-4	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997985788331831	WITHOUT_CLASSIFICATION	2.0142116681692211E-4	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998115274419157	WITHOUT_CLASSIFICATION	1.8847255808430844E-4	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997820776516145	WITHOUT_CLASSIFICATION	2.1792234838544745E-4	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997596560124025	WITHOUT_CLASSIFICATION	2.4034398759746763E-4	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997611157071697	WITHOUT_CLASSIFICATION	2.388842928303024E-4	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9998017951164826	WITHOUT_CLASSIFICATION	1.982048835174989E-4	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9997153094652664	WITHOUT_CLASSIFICATION	2.8469053473358574E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9984171450750895	WITHOUT_CLASSIFICATION	0.0015828549249105696	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9998806960847773	WITHOUT_CLASSIFICATION	1.1930391522277156E-4	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9996538601224609	WITHOUT_CLASSIFICATION	3.4613987753906884E-4	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9980871379708581	WITHOUT_CLASSIFICATION	0.0019128620291418345	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9998164231536857	WITHOUT_CLASSIFICATION	1.835768463143873E-4	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9995643255277785	WITHOUT_CLASSIFICATION	4.3567447222141945E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9984171450750895	WITHOUT_CLASSIFICATION	0.0015828549249105696	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9984171450750895	WITHOUT_CLASSIFICATION	0.0015828549249105696	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.999920426485749	WITHOUT_CLASSIFICATION	7.957351425100855E-5	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9994599335916119	WITHOUT_CLASSIFICATION	5.40066408388103E-4	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999474771393411	WITHOUT_CLASSIFICATION	5.252286065887101E-5	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999676880635281	WITHOUT_CLASSIFICATION	3.2311936471895016E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9998475597253548	WITHOUT_CLASSIFICATION	1.5244027464530156E-4	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9998346078491297	WITHOUT_CLASSIFICATION	1.6539215087028034E-4	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9995230552468326	WITHOUT_CLASSIFICATION	4.7694475316736716E-4	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9996590939324208	WITHOUT_CLASSIFICATION	3.4090606757916864E-4	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9997727528963379	WITHOUT_CLASSIFICATION	2.2724710366193779E-4	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995474576283956	WITHOUT_CLASSIFICATION	4.5254237160441326E-4	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9998309046841338	WITHOUT_CLASSIFICATION	1.6909531586616145E-4	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995903613399619	WITHOUT_CLASSIFICATION	4.096386600380842E-4	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9995652125650529	WITHOUT_CLASSIFICATION	4.347874349471389E-4	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9995652125650529	WITHOUT_CLASSIFICATION	4.347874349471389E-4	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9995652125650529	WITHOUT_CLASSIFICATION	4.347874349471389E-4	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9995652125650529	WITHOUT_CLASSIFICATION	4.347874349471389E-4	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994799834325938	WITHOUT_CLASSIFICATION	5.200165674061304E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995638428526207	WITHOUT_CLASSIFICATION	4.361571473792528E-4	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9998443954896279	WITHOUT_CLASSIFICATION	1.556045103721318E-4	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994854898375265	WITHOUT_CLASSIFICATION	5.14510162473588E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9998514506143374	WITHOUT_CLASSIFICATION	1.4854938566260145E-4	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9997747737479485	WITHOUT_CLASSIFICATION	2.252262520516129E-4	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996079122519855	WITHOUT_CLASSIFICATION	3.920877480144513E-4	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996712830890079	WITHOUT_CLASSIFICATION	3.287169109921671E-4	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9995680531701602	WITHOUT_CLASSIFICATION	4.319468298399335E-4	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9994491758116378	WITHOUT_CLASSIFICATION	5.508241883622234E-4	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999652683801193	WITHOUT_CLASSIFICATION	3.473161988069486E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9993585969451096	WITHOUT_CLASSIFICATION	6.414030548903055E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9996780273803665	WITHOUT_CLASSIFICATION	3.2197261963355227E-4	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9997188109309018	WITHOUT_CLASSIFICATION	2.811890690982836E-4	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9993854828797624	WITHOUT_CLASSIFICATION	6.14517120237616E-4	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9994010607864638	WITHOUT_CLASSIFICATION	5.989392135362E-4	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9994010607864638	WITHOUT_CLASSIFICATION	5.989392135362E-4	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9997765500535918	WITHOUT_CLASSIFICATION	2.2344994640820874E-4	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9994022830189179	WITHOUT_CLASSIFICATION	5.977169810820749E-4	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9998512592426377	WITHOUT_CLASSIFICATION	1.4874075736222146E-4	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994837920156348	WITHOUT_CLASSIFICATION	5.162079843651958E-4	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999463414313222	WITHOUT_CLASSIFICATION	5.365856867779982E-4	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9996481720064733	WITHOUT_CLASSIFICATION	3.518279935267425E-4	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9879669701756468	WITHOUT_CLASSIFICATION	0.01203302982435315	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9998596953969071	WITHOUT_CLASSIFICATION	1.403046030929249E-4	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999955602203055	WITHOUT_CLASSIFICATION	4.439779694497598E-5	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999078305499058	WITHOUT_CLASSIFICATION	9.216945009408802E-5	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9997965386713321	WITHOUT_CLASSIFICATION	2.0346132866790886E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99976950549642	WITHOUT_CLASSIFICATION	2.304945035801885E-4	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999667643960829	WITHOUT_CLASSIFICATION	3.323560391714331E-5	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9992777509999863	WITHOUT_CLASSIFICATION	7.222490000137747E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9993114188326638	WITHOUT_CLASSIFICATION	6.885811673361652E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999262403996498	WITHOUT_CLASSIFICATION	7.375960035013877E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9995949914985491	WITHOUT_CLASSIFICATION	4.0500850145086336E-4	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999619738436487	WITHOUT_CLASSIFICATION	3.802615635130192E-4	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9998076704376013	WITHOUT_CLASSIFICATION	1.9232956239877602E-4	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999902317860403	WITHOUT_CLASSIFICATION	9.768213959701742E-6	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999894270380654	WITHOUT_CLASSIFICATION	1.0572961934589601E-4	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999517471228491	WITHOUT_CLASSIFICATION	4.825287715101898E-5	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999034350700322	WITHOUT_CLASSIFICATION	9.656492996784109E-5	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9995458302899682	WITHOUT_CLASSIFICATION	4.54169710031665E-4	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.99974041700251	WITHOUT_CLASSIFICATION	2.595829974899992E-4	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9994552346241877	WITHOUT_CLASSIFICATION	5.447653758123258E-4	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9994377383063298	WITHOUT_CLASSIFICATION	5.622616936703677E-4	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9998615506622534	WITHOUT_CLASSIFICATION	1.3844933774669635E-4	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9995813154332773	WITHOUT_CLASSIFICATION	4.1868456672263475E-4	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999778442050499	WITHOUT_CLASSIFICATION	2.215579495022448E-5	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9995075960253991	WITHOUT_CLASSIFICATION	4.924039746009134E-4	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9996728042658178	WITHOUT_CLASSIFICATION	3.2719573418210244E-4	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9990477139716554	WITHOUT_CLASSIFICATION	9.522860283446719E-4	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9994129448406184	WITHOUT_CLASSIFICATION	5.870551593816015E-4	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9992761692304719	WITHOUT_CLASSIFICATION	7.238307695280995E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999248217770809	WITHOUT_CLASSIFICATION	7.517822291919111E-5	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.999315528930588	WITHOUT_CLASSIFICATION	6.844710694120633E-4	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9997172370671514	WITHOUT_CLASSIFICATION	2.827629328485683E-4	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9993914617914212	WITHOUT_CLASSIFICATION	6.085382085787329E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999695486763287	WITHOUT_CLASSIFICATION	3.045132367127431E-5	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9995565446359008	WITHOUT_CLASSIFICATION	4.434553640991682E-4	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9997163419408258	WITHOUT_CLASSIFICATION	2.836580591740855E-4	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999076373984509	WITHOUT_CLASSIFICATION	9.236260154909426E-5	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9996271486556296	WITHOUT_CLASSIFICATION	3.7285134437034707E-4	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9994750438456788	WITHOUT_CLASSIFICATION	5.249561543212844E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9994286939147077	WITHOUT_CLASSIFICATION	5.713060852922223E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9998463403738459	WITHOUT_CLASSIFICATION	1.5365962615404902E-4	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9996770580008498	WITHOUT_CLASSIFICATION	3.229419991502386E-4	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9995470915771771	WITHOUT_CLASSIFICATION	4.529084228227743E-4	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9997670369331729	WITHOUT_CLASSIFICATION	2.3296306682717605E-4	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.99949079206357	WITHOUT_CLASSIFICATION	5.092079364299944E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9996758775343674	WITHOUT_CLASSIFICATION	3.241224656327094E-4	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996684925623572	WITHOUT_CLASSIFICATION	3.3150743764273405E-4	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9992792885143214	WITHOUT_CLASSIFICATION	7.207114856786791E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9994686825370132	WITHOUT_CLASSIFICATION	5.313174629868507E-4	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9996340445749845	WITHOUT_CLASSIFICATION	3.659554250155927E-4	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9994965348250692	WITHOUT_CLASSIFICATION	5.03465174930755E-4	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9998293421677246	WITHOUT_CLASSIFICATION	1.7065783227540078E-4	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9992128292385901	WITHOUT_CLASSIFICATION	7.871707614097873E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9997776752125896	WITHOUT_CLASSIFICATION	2.223247874103115E-4	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9998635718880934	WITHOUT_CLASSIFICATION	1.364281119066303E-4	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999654400223036	WITHOUT_CLASSIFICATION	3.455997769639379E-5	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999595659635011	WITHOUT_CLASSIFICATION	4.043403649884317E-5	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999178628668401	WITHOUT_CLASSIFICATION	8.213713315984204E-5	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999701349927151	WITHOUT_CLASSIFICATION	2.986500728490152E-4	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9998737038085506	WITHOUT_CLASSIFICATION	1.2629619144940952E-4	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9996956163016295	WITHOUT_CLASSIFICATION	3.043836983705417E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9994751697890651	WITHOUT_CLASSIFICATION	5.248302109349358E-4	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9994303509171079	WITHOUT_CLASSIFICATION	5.696490828921314E-4	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9995353799119878	WITHOUT_CLASSIFICATION	4.646200880122095E-4	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998747397151495	WITHOUT_CLASSIFICATION	1.2526028485044204E-4	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9997964544058632	WITHOUT_CLASSIFICATION	2.0354559413685488E-4	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9990939400832966	WITHOUT_CLASSIFICATION	9.060599167034502E-4	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9994812020782327	WITHOUT_CLASSIFICATION	5.187979217674244E-4	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9998805175164363	WITHOUT_CLASSIFICATION	1.1948248356371884E-4	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9992440205744795	WITHOUT_CLASSIFICATION	7.559794255204539E-4	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9998536895718355	WITHOUT_CLASSIFICATION	1.463104281645139E-4	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999900369324735	WITHOUT_CLASSIFICATION	9.963067526491559E-5	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9998251798009643	WITHOUT_CLASSIFICATION	1.7482019903574628E-4	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9994075141014248	WITHOUT_CLASSIFICATION	5.924858985751986E-4	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9995024569460734	WITHOUT_CLASSIFICATION	4.975430539265733E-4	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9995117137759436	WITHOUT_CLASSIFICATION	4.882862240563508E-4	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9982730503970998	WITHOUT_CLASSIFICATION	0.0017269496029001757	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9994618943179079	WITHOUT_CLASSIFICATION	5.381056820922058E-4	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9983527343161047	WITHOUT_CLASSIFICATION	0.0016472656838952711	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9992657303160716	WITHOUT_CLASSIFICATION	7.342696839283835E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9995391707371654	WITHOUT_CLASSIFICATION	4.6082926283460846E-4	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9995293969563	WITHOUT_CLASSIFICATION	4.706030436999079E-4	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9996725417345546	WITHOUT_CLASSIFICATION	3.2745826544538093E-4	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9998719635983137	WITHOUT_CLASSIFICATION	1.2803640168634236E-4	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.999751427263463	WITHOUT_CLASSIFICATION	2.4857273653692923E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999314990484681	WITHOUT_CLASSIFICATION	6.850095153191061E-5	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9993973027369801	WITHOUT_CLASSIFICATION	6.026972630198998E-4	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9993643804237339	WITHOUT_CLASSIFICATION	6.35619576266198E-4	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9994569069751207	WITHOUT_CLASSIFICATION	5.430930248793276E-4	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9996202469371456	WITHOUT_CLASSIFICATION	3.7975306285434974E-4	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999184241558274	WITHOUT_CLASSIFICATION	8.157584417262622E-5	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9996620687954583	WITHOUT_CLASSIFICATION	3.3793120454178637E-4	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9992418398363058	WITHOUT_CLASSIFICATION	7.581601636942246E-4	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9995766870262104	WITHOUT_CLASSIFICATION	4.2331297378961255E-4	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9995804104072208	WITHOUT_CLASSIFICATION	4.1958959277917167E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9995917222342634	WITHOUT_CLASSIFICATION	4.0827776573668876E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9995917222342634	WITHOUT_CLASSIFICATION	4.0827776573668876E-4	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9995804145289917	WITHOUT_CLASSIFICATION	4.1958547100827615E-4	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9994565099749309	WITHOUT_CLASSIFICATION	5.43490025069189E-4	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9996250934493013	WITHOUT_CLASSIFICATION	3.749065506987334E-4	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9998610452969837	WITHOUT_CLASSIFICATION	1.3895470301621845E-4	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9998952440705435	WITHOUT_CLASSIFICATION	1.0475592945651353E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9998552116439583	WITHOUT_CLASSIFICATION	1.4478835604172987E-4	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9996267305563367	WITHOUT_CLASSIFICATION	3.7326944366331986E-4	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9995293867037123	WITHOUT_CLASSIFICATION	4.7061329628773896E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.999506533041875	WITHOUT_CLASSIFICATION	4.934669581249816E-4	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999154463687375	WITHOUT_CLASSIFICATION	8.45536312625001E-5	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999538948043045	WITHOUT_CLASSIFICATION	4.610519569545171E-5	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.999522457167304	WITHOUT_CLASSIFICATION	4.775428326959559E-4	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9997935834212804	WITHOUT_CLASSIFICATION	2.064165787194456E-4	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998081683855162	WITHOUT_CLASSIFICATION	1.918316144836878E-4	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9996153483075331	WITHOUT_CLASSIFICATION	3.846516924669048E-4	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9984619416513449	WITHOUT_CLASSIFICATION	0.0015380583486551218	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9984619416513449	WITHOUT_CLASSIFICATION	0.0015380583486551218	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9998634653366664	WITHOUT_CLASSIFICATION	1.365346633336171E-4	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9997429891113359	WITHOUT_CLASSIFICATION	2.5701088866423097E-4	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9997446993964876	WITHOUT_CLASSIFICATION	2.553006035124789E-4	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998149419409051	WITHOUT_CLASSIFICATION	1.8505805909477998E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9993585969451096	WITHOUT_CLASSIFICATION	6.414030548903055E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9993315647537339	WITHOUT_CLASSIFICATION	6.68435246266231E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9994727451805727	WITHOUT_CLASSIFICATION	5.272548194272614E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9996464787742648	WITHOUT_CLASSIFICATION	3.535212257351663E-4	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9996464787742648	WITHOUT_CLASSIFICATION	3.535212257351663E-4	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999874964097709	WITHOUT_CLASSIFICATION	1.2503590229099155E-4	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9995197006076465	WITHOUT_CLASSIFICATION	4.8029939235353096E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999811388634838	WITHOUT_CLASSIFICATION	1.886113651619807E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999966468990124	WITHOUT_CLASSIFICATION	3.353100987669627E-6	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.999991318119866	WITHOUT_CLASSIFICATION	8.681880134025357E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9996860600295037	WITHOUT_CLASSIFICATION	3.1393997049626045E-4	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998126494224492	WITHOUT_CLASSIFICATION	1.873505775508122E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994860089633263	WITHOUT_CLASSIFICATION	5.139910366736306E-4	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9995243931642483	WITHOUT_CLASSIFICATION	4.756068357516284E-4	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9997270471914579	WITHOUT_CLASSIFICATION	2.729528085421793E-4	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9996504982691308	WITHOUT_CLASSIFICATION	3.4950173086912976E-4	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9985929819476805	WITHOUT_CLASSIFICATION	0.00140701805231936	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9993916601417394	WITHOUT_CLASSIFICATION	6.083398582606088E-4	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9995477911028806	WITHOUT_CLASSIFICATION	4.5220889711939055E-4	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998286932281393	WITHOUT_CLASSIFICATION	1.7130677186068675E-4	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9995527883035713	WITHOUT_CLASSIFICATION	4.4721169642867643E-4	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9995388868404961	WITHOUT_CLASSIFICATION	4.6111315950390463E-4	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9995734717997149	WITHOUT_CLASSIFICATION	4.265282002851575E-4	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9929458891440565	WITHOUT_CLASSIFICATION	0.007054110855943607	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9994195963289694	WITHOUT_CLASSIFICATION	5.804036710307068E-4	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9994554575863202	WITHOUT_CLASSIFICATION	5.445424136798588E-4	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9997807260158292	WITHOUT_CLASSIFICATION	2.1927398417076664E-4	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9996988134966357	WITHOUT_CLASSIFICATION	3.0118650336440723E-4	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9995676415546304	WITHOUT_CLASSIFICATION	4.323584453695995E-4	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9985351866365344	WITHOUT_CLASSIFICATION	0.0014648133634656186	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999482499607234	WITHOUT_CLASSIFICATION	5.175003927660056E-5	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999720970316197	WITHOUT_CLASSIFICATION	2.7902968380318562E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9987780398031779	WITHOUT_CLASSIFICATION	0.001221960196822065	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9997880978105419	WITHOUT_CLASSIFICATION	2.1190218945819393E-4	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9997551322881433	WITHOUT_CLASSIFICATION	2.4486771185676593E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9993171424511911	WITHOUT_CLASSIFICATION	6.828575488089724E-4	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9996845472555678	WITHOUT_CLASSIFICATION	3.154527444322017E-4	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9996565769938364	WITHOUT_CLASSIFICATION	3.4342300616357153E-4	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9994321602030397	WITHOUT_CLASSIFICATION	5.678397969603306E-4	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.999476959117673	WITHOUT_CLASSIFICATION	5.230408823269908E-4	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.999350918053073	WITHOUT_CLASSIFICATION	6.490819469270212E-4	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9993826561322177	WITHOUT_CLASSIFICATION	6.173438677822873E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9993338429410199	WITHOUT_CLASSIFICATION	6.661570589801789E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9997962256198477	WITHOUT_CLASSIFICATION	2.0377438015234604E-4	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999073854487011	WITHOUT_CLASSIFICATION	9.261455129897006E-5	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9997740724335891	WITHOUT_CLASSIFICATION	2.2592756641080496E-4	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9993148281247278	WITHOUT_CLASSIFICATION	6.851718752722227E-4	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9994802763344264	WITHOUT_CLASSIFICATION	5.1972366557366E-4	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999880099736383	WITHOUT_CLASSIFICATION	1.199002636171597E-5	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9995434848385463	WITHOUT_CLASSIFICATION	4.5651516145377196E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9993338429410199	WITHOUT_CLASSIFICATION	6.661570589801789E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9997962256198477	WITHOUT_CLASSIFICATION	2.0377438015234604E-4	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9994180453827838	WITHOUT_CLASSIFICATION	5.819546172161844E-4	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9993208283529974	WITHOUT_CLASSIFICATION	6.791716470024984E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9997818963295898	WITHOUT_CLASSIFICATION	2.1810367041013478E-4	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9994699759330202	WITHOUT_CLASSIFICATION	5.300240669797729E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999877899143729	WITHOUT_CLASSIFICATION	1.221008562709442E-4	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9997967582408509	WITHOUT_CLASSIFICATION	2.032417591490924E-4	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9993087144711947	WITHOUT_CLASSIFICATION	6.91285528805268E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9997238136329085	WITHOUT_CLASSIFICATION	2.7618636709143834E-4	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9996070001494268	WITHOUT_CLASSIFICATION	3.929998505732581E-4	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999568701450497	WITHOUT_CLASSIFICATION	4.312985495021436E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9996070001494268	WITHOUT_CLASSIFICATION	3.929998505732581E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9998848650876011	WITHOUT_CLASSIFICATION	1.1513491239892808E-4	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9994732123072241	WITHOUT_CLASSIFICATION	5.267876927758514E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9998817058240809	WITHOUT_CLASSIFICATION	1.1829417591915328E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999454750942717	WITHOUT_CLASSIFICATION	5.452490572830498E-4	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9998046773380296	WITHOUT_CLASSIFICATION	1.9532266197042032E-4	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9997041244729653	WITHOUT_CLASSIFICATION	2.958755270346369E-4	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9997284570655434	WITHOUT_CLASSIFICATION	2.715429344566196E-4	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9996211751296337	WITHOUT_CLASSIFICATION	3.788248703662666E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9993942468201991	WITHOUT_CLASSIFICATION	6.057531798010025E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9997886644649365	WITHOUT_CLASSIFICATION	2.113355350634948E-4	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9991724517013737	WITHOUT_CLASSIFICATION	8.275482986262781E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9993714085553388	WITHOUT_CLASSIFICATION	6.285914446610974E-4	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9995558828297948	WITHOUT_CLASSIFICATION	4.441171702052744E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9995750286360878	WITHOUT_CLASSIFICATION	4.249713639121739E-4	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9994211510335427	WITHOUT_CLASSIFICATION	5.788489664573424E-4	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9998708968318812	WITHOUT_CLASSIFICATION	1.2910316811876298E-4	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9993794448883104	WITHOUT_CLASSIFICATION	6.205551116897014E-4	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9995308142245232	WITHOUT_CLASSIFICATION	4.691857754767863E-4	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9996796117692857	WITHOUT_CLASSIFICATION	3.203882307143546E-4	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9996178314155393	WITHOUT_CLASSIFICATION	3.8216858446075313E-4	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9994877354203571	WITHOUT_CLASSIFICATION	5.122645796428059E-4	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999468826619089	WITHOUT_CLASSIFICATION	5.311733809109274E-4	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9995725650266936	WITHOUT_CLASSIFICATION	4.274349733064563E-4	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9996893410629262	WITHOUT_CLASSIFICATION	3.1065893707380766E-4	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9993921618444022	WITHOUT_CLASSIFICATION	6.078381555978688E-4	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9994933348513975	WITHOUT_CLASSIFICATION	5.066651486026279E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9993805948196602	WITHOUT_CLASSIFICATION	6.194051803396643E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9994269819438533	WITHOUT_CLASSIFICATION	5.730180561467576E-4	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9998618965659241	WITHOUT_CLASSIFICATION	1.3810343407600438E-4	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9931109502094213	WITHOUT_CLASSIFICATION	0.0068890497905787565	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9996771568844056	WITHOUT_CLASSIFICATION	3.22843115594435E-4	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9997295112882432	WITHOUT_CLASSIFICATION	2.704887117568685E-4	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9997831312623645	WITHOUT_CLASSIFICATION	2.168687376353407E-4	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9996331255601003	WITHOUT_CLASSIFICATION	3.66874439899669E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9993714085553388	WITHOUT_CLASSIFICATION	6.285914446610974E-4	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9994017186374932	WITHOUT_CLASSIFICATION	5.982813625068355E-4	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9992173907538315	WITHOUT_CLASSIFICATION	7.82609246168463E-4	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9992255783090692	WITHOUT_CLASSIFICATION	7.744216909308932E-4	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9994512603724547	WITHOUT_CLASSIFICATION	5.487396275453235E-4	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9998439385520146	WITHOUT_CLASSIFICATION	1.5606144798537304E-4	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.999820317083307	WITHOUT_CLASSIFICATION	1.7968291669294705E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9993942468201991	WITHOUT_CLASSIFICATION	6.057531798010025E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9993942468201991	WITHOUT_CLASSIFICATION	6.057531798010025E-4	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9997530959939155	WITHOUT_CLASSIFICATION	2.469040060845814E-4	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9996975291029429	WITHOUT_CLASSIFICATION	3.024708970572495E-4	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9994313236059211	WITHOUT_CLASSIFICATION	5.686763940788297E-4	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9997885133563207	WITHOUT_CLASSIFICATION	2.114866436793254E-4	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9987900531063831	WITHOUT_CLASSIFICATION	0.0012099468936168764	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9995944700303522	WITHOUT_CLASSIFICATION	4.055299696479012E-4	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.999352091823984	WITHOUT_CLASSIFICATION	6.479081760159565E-4	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9998425749353901	WITHOUT_CLASSIFICATION	1.5742506460987744E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9996231315574617	WITHOUT_CLASSIFICATION	3.768684425382745E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998638197035159	WITHOUT_CLASSIFICATION	1.3618029648416197E-4	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9995821256580092	WITHOUT_CLASSIFICATION	4.178743419907808E-4	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9993700742592724	WITHOUT_CLASSIFICATION	6.299257407274934E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998638197035159	WITHOUT_CLASSIFICATION	1.3618029648416197E-4	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9994340860350602	WITHOUT_CLASSIFICATION	5.65913964939807E-4	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9998015915731059	WITHOUT_CLASSIFICATION	1.9840842689418134E-4	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9995863157654368	WITHOUT_CLASSIFICATION	4.1368423456324447E-4	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9892493969799563	WITHOUT_CLASSIFICATION	0.0107506030200438	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9997022892672277	WITHOUT_CLASSIFICATION	2.9771073277236684E-4	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999672662596408	WITHOUT_CLASSIFICATION	3.273374035917027E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999546459950136	WITHOUT_CLASSIFICATION	4.535400498636946E-5	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9998840293416298	WITHOUT_CLASSIFICATION	1.1597065837025194E-4	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9993338429410199	WITHOUT_CLASSIFICATION	6.661570589801789E-4	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9996271117572562	WITHOUT_CLASSIFICATION	3.728882427437845E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996001281254615	WITHOUT_CLASSIFICATION	3.9987187453852785E-4	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9995087600771835	WITHOUT_CLASSIFICATION	4.91239922816465E-4	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9997572613293815	WITHOUT_CLASSIFICATION	2.4273867061862426E-4	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9990668941967082	WITHOUT_CLASSIFICATION	9.331058032918544E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998638197035159	WITHOUT_CLASSIFICATION	1.3618029648416197E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9997022892672277	WITHOUT_CLASSIFICATION	2.9771073277236684E-4	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999546459950136	WITHOUT_CLASSIFICATION	4.535400498636946E-5	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9995081100872091	WITHOUT_CLASSIFICATION	4.918899127909314E-4	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9998107071101907	WITHOUT_CLASSIFICATION	1.8929288980936134E-4	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9994640012342157	WITHOUT_CLASSIFICATION	5.35998765784316E-4	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.999674943276219	WITHOUT_CLASSIFICATION	3.250567237809884E-4	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9994340860350602	WITHOUT_CLASSIFICATION	5.65913964939807E-4	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9995968885403144	WITHOUT_CLASSIFICATION	4.031114596855242E-4	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9993507158322673	WITHOUT_CLASSIFICATION	6.492841677326102E-4	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9988326652684291	WITHOUT_CLASSIFICATION	0.0011673347315709769	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9979837268530605	WITHOUT_CLASSIFICATION	0.002016273146939552	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9979014172935035	WITHOUT_CLASSIFICATION	0.0020985827064965486	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9993760908595991	WITHOUT_CLASSIFICATION	6.239091404009501E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999454750942717	WITHOUT_CLASSIFICATION	5.452490572830498E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996096298783941	WITHOUT_CLASSIFICATION	3.903701216058203E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994554575863202	WITHOUT_CLASSIFICATION	5.445424136798588E-4	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999255271526561	WITHOUT_CLASSIFICATION	7.447284734392445E-5	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9997916596046584	WITHOUT_CLASSIFICATION	2.0834039534161765E-4	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9998330408478576	WITHOUT_CLASSIFICATION	1.669591521423614E-4	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9997685714719508	WITHOUT_CLASSIFICATION	2.3142852804925178E-4	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9997675382494574	WITHOUT_CLASSIFICATION	2.3246175054254448E-4	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9993920221666586	WITHOUT_CLASSIFICATION	6.079778333413691E-4	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9995697721199945	WITHOUT_CLASSIFICATION	4.302278800054645E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994554575863202	WITHOUT_CLASSIFICATION	5.445424136798588E-4	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9993916601417394	WITHOUT_CLASSIFICATION	6.083398582606088E-4	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9993032117059428	WITHOUT_CLASSIFICATION	6.967882940572533E-4	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9998703564030005	WITHOUT_CLASSIFICATION	1.296435969995961E-4	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9995327387771611	WITHOUT_CLASSIFICATION	4.672612228389109E-4	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9993975765272564	WITHOUT_CLASSIFICATION	6.024234727437329E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9994950849589025	WITHOUT_CLASSIFICATION	5.049150410975509E-4	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9948910780196702	WITHOUT_CLASSIFICATION	0.005108921980329794	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9993714085553388	WITHOUT_CLASSIFICATION	6.285914446610974E-4	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998976846888534	WITHOUT_CLASSIFICATION	1.023153111465345E-4	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9998595449175735	WITHOUT_CLASSIFICATION	1.4045508242649683E-4	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9993776532876785	WITHOUT_CLASSIFICATION	6.22346712321504E-4	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999566485412933	WITHOUT_CLASSIFICATION	4.3351458706623594E-5	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999981304495817	WITHOUT_CLASSIFICATION	1.8695504183010882E-5	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9998939277263986	WITHOUT_CLASSIFICATION	1.0607227360143293E-4	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9993775267802514	WITHOUT_CLASSIFICATION	6.224732197485394E-4	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9998372231030712	WITHOUT_CLASSIFICATION	1.6277689692872023E-4	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9996728291396092	WITHOUT_CLASSIFICATION	3.2717086039077013E-4	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9994175482016645	WITHOUT_CLASSIFICATION	5.824517983354425E-4	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9995424643299168	WITHOUT_CLASSIFICATION	4.5753567008322325E-4	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9998405777652156	WITHOUT_CLASSIFICATION	1.5942223478438816E-4	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9995213016652819	WITHOUT_CLASSIFICATION	4.7869833471814855E-4	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8292968256814013	WITHOUT_CLASSIFICATION	0.17070317431859877	IMPLEMENTATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9995250208179342	WITHOUT_CLASSIFICATION	4.749791820658577E-4	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9995649241031219	WITHOUT_CLASSIFICATION	4.35075896878095E-4	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9997993902462682	WITHOUT_CLASSIFICATION	2.0060975373171558E-4	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9988098322850015	WITHOUT_CLASSIFICATION	0.0011901677149984695	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999454559205149	WITHOUT_CLASSIFICATION	5.4544079485237285E-5	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999849536094906	WITHOUT_CLASSIFICATION	1.5046390509392544E-4	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9997032003868919	WITHOUT_CLASSIFICATION	2.9679961310812215E-4	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999543616988761	WITHOUT_CLASSIFICATION	4.5638301123993015E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9998268159016158	WITHOUT_CLASSIFICATION	1.731840983842025E-4	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9996625438764496	WITHOUT_CLASSIFICATION	3.374561235503709E-4	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9997665919340648	WITHOUT_CLASSIFICATION	2.334080659351364E-4	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9998974559845836	WITHOUT_CLASSIFICATION	1.0254401541648073E-4	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9996625438764496	WITHOUT_CLASSIFICATION	3.374561235503709E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9998268159016158	WITHOUT_CLASSIFICATION	1.731840983842025E-4	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9997665919340648	WITHOUT_CLASSIFICATION	2.334080659351364E-4	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9997913439617211	WITHOUT_CLASSIFICATION	2.0865603827900634E-4	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9997642811784729	WITHOUT_CLASSIFICATION	2.3571882152704035E-4	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9998602243579182	WITHOUT_CLASSIFICATION	1.3977564208175915E-4	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9994306868210017	WITHOUT_CLASSIFICATION	5.693131789983457E-4	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999936712695973	WITHOUT_CLASSIFICATION	6.328730402697911E-6	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9677518957407625	WITHOUT_CLASSIFICATION	0.032248104259237576	IMPLEMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9997735426862356	WITHOUT_CLASSIFICATION	2.2645731376434266E-4	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9993576300383641	WITHOUT_CLASSIFICATION	6.423699616359855E-4	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9997707437460579	WITHOUT_CLASSIFICATION	2.292562539421979E-4	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9995873046173065	WITHOUT_CLASSIFICATION	4.126953826935406E-4	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9994370565440123	WITHOUT_CLASSIFICATION	5.629434559877085E-4	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998572582406642	WITHOUT_CLASSIFICATION	1.4274175933571157E-4	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9995814961383319	WITHOUT_CLASSIFICATION	4.185038616681591E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9994306186241146	WITHOUT_CLASSIFICATION	5.693813758854559E-4	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9998753103839769	WITHOUT_CLASSIFICATION	1.2468961602303343E-4	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9997476292426226	WITHOUT_CLASSIFICATION	2.523707573773787E-4	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999248376289238	WITHOUT_CLASSIFICATION	7.516237107622035E-5	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9996975233980522	WITHOUT_CLASSIFICATION	3.024766019478878E-4	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999524836663346	WITHOUT_CLASSIFICATION	4.751633366536105E-5	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9996190945934659	WITHOUT_CLASSIFICATION	3.80905406534195E-4	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9990686304981286	WITHOUT_CLASSIFICATION	9.31369501871423E-4	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9997536629890886	WITHOUT_CLASSIFICATION	2.463370109113058E-4	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9995351961864849	WITHOUT_CLASSIFICATION	4.6480381351511423E-4	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9998333964551998	WITHOUT_CLASSIFICATION	1.6660354480023106E-4	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9996070599555279	WITHOUT_CLASSIFICATION	3.929400444720497E-4	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9996070599555279	WITHOUT_CLASSIFICATION	3.929400444720497E-4	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9997270434606162	WITHOUT_CLASSIFICATION	2.729565393837546E-4	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9997270434606162	WITHOUT_CLASSIFICATION	2.729565393837546E-4	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9955256184689761	WITHOUT_CLASSIFICATION	0.004474381531023825	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999248376289238	WITHOUT_CLASSIFICATION	7.516237107622035E-5	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9993951406244543	WITHOUT_CLASSIFICATION	6.048593755456297E-4	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999612830280351	WITHOUT_CLASSIFICATION	3.8716971964905707E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9991020826821916	WITHOUT_CLASSIFICATION	8.979173178083647E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9991020826821916	WITHOUT_CLASSIFICATION	8.979173178083647E-4	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.999813238777825	WITHOUT_CLASSIFICATION	1.8676122217487398E-4	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9998161060385842	WITHOUT_CLASSIFICATION	1.8389396141582295E-4	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9997624951120112	WITHOUT_CLASSIFICATION	2.3750488798878584E-4	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9994543665080224	WITHOUT_CLASSIFICATION	5.456334919776648E-4	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9997068098781586	WITHOUT_CLASSIFICATION	2.9319012184133935E-4	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999983675442598	WITHOUT_CLASSIFICATION	1.6324557401973697E-5	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9995551713568472	WITHOUT_CLASSIFICATION	4.448286431526619E-4	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9993691155943487	WITHOUT_CLASSIFICATION	6.308844056512683E-4	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9994736146460884	WITHOUT_CLASSIFICATION	5.263853539115787E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999111469106168	WITHOUT_CLASSIFICATION	8.885308938325592E-5	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9996688506366049	WITHOUT_CLASSIFICATION	3.311493633950697E-4	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9994124313064034	WITHOUT_CLASSIFICATION	5.875686935966469E-4	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9994823942572534	WITHOUT_CLASSIFICATION	5.176057427466319E-4	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9993789816957642	WITHOUT_CLASSIFICATION	6.210183042356922E-4	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9993209973397122	WITHOUT_CLASSIFICATION	6.790026602877486E-4	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9996711408292459	WITHOUT_CLASSIFICATION	3.2885917075406066E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995142390809129	WITHOUT_CLASSIFICATION	4.85760919087139E-4	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9969115708032057	WITHOUT_CLASSIFICATION	0.0030884291967943375	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9990983406690435	WITHOUT_CLASSIFICATION	9.016593309564536E-4	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999703112448327	WITHOUT_CLASSIFICATION	2.9688755167278063E-5	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9993317136789949	WITHOUT_CLASSIFICATION	6.682863210051413E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9995112933470256	WITHOUT_CLASSIFICATION	4.887066529743879E-4	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9992747079104943	WITHOUT_CLASSIFICATION	7.252920895056119E-4	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9997272984266437	WITHOUT_CLASSIFICATION	2.727015733564028E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999168604677933	WITHOUT_CLASSIFICATION	8.313953220680152E-5	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9996768499249523	WITHOUT_CLASSIFICATION	3.23150075047681E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994554575863202	WITHOUT_CLASSIFICATION	5.445424136798588E-4	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998976846888534	WITHOUT_CLASSIFICATION	1.023153111465345E-4	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9997837949470255	WITHOUT_CLASSIFICATION	2.1620505297457595E-4	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999649192817199	WITHOUT_CLASSIFICATION	3.508071828011501E-5	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994525127058899	WITHOUT_CLASSIFICATION	5.47487294110121E-4	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999457508968629	WITHOUT_CLASSIFICATION	5.424910313710205E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9993489847336232	WITHOUT_CLASSIFICATION	6.51015266376843E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9993489847336232	WITHOUT_CLASSIFICATION	6.51015266376843E-4	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999088884238605	WITHOUT_CLASSIFICATION	9.111157613946477E-5	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9993524394287293	WITHOUT_CLASSIFICATION	6.475605712705832E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999050150692497	WITHOUT_CLASSIFICATION	9.498493075039937E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999050150692497	WITHOUT_CLASSIFICATION	9.498493075039937E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9995172283962918	WITHOUT_CLASSIFICATION	4.8277160370825445E-4	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9996000024418157	WITHOUT_CLASSIFICATION	3.999975581843051E-4	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.999622521503679	WITHOUT_CLASSIFICATION	3.774784963209686E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9998475597253548	WITHOUT_CLASSIFICATION	1.5244027464530156E-4	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9995775391439867	WITHOUT_CLASSIFICATION	4.224608560132016E-4	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9998030508756278	WITHOUT_CLASSIFICATION	1.9694912437208007E-4	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9991262627016017	WITHOUT_CLASSIFICATION	8.737372983982743E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9995316629897617	WITHOUT_CLASSIFICATION	4.6833701023819515E-4	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997410349085131	WITHOUT_CLASSIFICATION	2.5896509148687965E-4	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997410349085131	WITHOUT_CLASSIFICATION	2.5896509148687965E-4	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999841074845505	WITHOUT_CLASSIFICATION	1.5892515449497034E-4	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.999409699108675	WITHOUT_CLASSIFICATION	5.903008913249243E-4	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.999409699108675	WITHOUT_CLASSIFICATION	5.903008913249243E-4	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997710644695808	WITHOUT_CLASSIFICATION	2.2893553041925844E-4	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9997623768739189	WITHOUT_CLASSIFICATION	2.3762312608104294E-4	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9995805535008171	WITHOUT_CLASSIFICATION	4.194464991829282E-4	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9997851623808758	WITHOUT_CLASSIFICATION	2.1483761912417673E-4	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9998101662624427	WITHOUT_CLASSIFICATION	1.8983373755729772E-4	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9996405560180739	WITHOUT_CLASSIFICATION	3.5944398192606507E-4	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999909431399855	WITHOUT_CLASSIFICATION	9.056860014561142E-6	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9997390477985774	WITHOUT_CLASSIFICATION	2.6095220142265335E-4	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9997641238342039	WITHOUT_CLASSIFICATION	2.3587616579616642E-4	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9991124025080393	WITHOUT_CLASSIFICATION	8.87597491960706E-4	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999554559016601	WITHOUT_CLASSIFICATION	4.454409833985568E-5	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9995423361013446	WITHOUT_CLASSIFICATION	4.576638986553853E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999391189691383	WITHOUT_CLASSIFICATION	6.088103086169735E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999391189691383	WITHOUT_CLASSIFICATION	6.088103086169735E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999391189691383	WITHOUT_CLASSIFICATION	6.088103086169735E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999391189691383	WITHOUT_CLASSIFICATION	6.088103086169735E-5	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9995121848759334	WITHOUT_CLASSIFICATION	4.878151240666284E-4	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999479335979281	WITHOUT_CLASSIFICATION	5.206640207179696E-5	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999407015524727	WITHOUT_CLASSIFICATION	5.929844752729908E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9993199327187894	WITHOUT_CLASSIFICATION	6.800672812106666E-4	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9994772411031221	WITHOUT_CLASSIFICATION	5.227588968778965E-4	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9994320133316844	WITHOUT_CLASSIFICATION	5.679866683155201E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9993585969451096	WITHOUT_CLASSIFICATION	6.414030548903055E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9991448698925275	WITHOUT_CLASSIFICATION	8.551301074724827E-4	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.999384510131486	WITHOUT_CLASSIFICATION	6.154898685139462E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9993585969451096	WITHOUT_CLASSIFICATION	6.414030548903055E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9993585969451096	WITHOUT_CLASSIFICATION	6.414030548903055E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9996254988561395	WITHOUT_CLASSIFICATION	3.7450114386055705E-4	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9996036232327102	WITHOUT_CLASSIFICATION	3.9637676728976665E-4	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9993174960773555	WITHOUT_CLASSIFICATION	6.825039226444195E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9996242413126989	WITHOUT_CLASSIFICATION	3.757586873011075E-4	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9997577084416597	WITHOUT_CLASSIFICATION	2.4229155834020816E-4	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9996906072786419	WITHOUT_CLASSIFICATION	3.0939272135813384E-4	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999131112044329	WITHOUT_CLASSIFICATION	8.68887955669806E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9996242413126989	WITHOUT_CLASSIFICATION	3.757586873011075E-4	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9996167361846698	WITHOUT_CLASSIFICATION	3.8326381533017095E-4	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9997139793774557	WITHOUT_CLASSIFICATION	2.860206225443974E-4	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9998675895352981	WITHOUT_CLASSIFICATION	1.3241046470187145E-4	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9993794989233465	WITHOUT_CLASSIFICATION	6.205010766534225E-4	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999918667100971	WITHOUT_CLASSIFICATION	8.133289902907304E-5	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9997379421739343	WITHOUT_CLASSIFICATION	2.6205782606569296E-4	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9997855932892284	WITHOUT_CLASSIFICATION	2.1440671077147233E-4	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9996745292539618	WITHOUT_CLASSIFICATION	3.2547074603825544E-4	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994346180759629	WITHOUT_CLASSIFICATION	5.65381924037077E-4	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999503224899888	WITHOUT_CLASSIFICATION	4.9677510011049064E-5	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994340414388968	WITHOUT_CLASSIFICATION	5.659585611031583E-4	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9994594297497197	WITHOUT_CLASSIFICATION	5.40570250280431E-4	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9997858704437391	WITHOUT_CLASSIFICATION	2.1412955626081082E-4	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9991668518838911	WITHOUT_CLASSIFICATION	8.331481161088409E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998840422804935	WITHOUT_CLASSIFICATION	1.1595771950645753E-4	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9996276656633574	WITHOUT_CLASSIFICATION	3.7233433664275045E-4	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9996842568805764	WITHOUT_CLASSIFICATION	3.1574311942366725E-4	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9996415876201802	WITHOUT_CLASSIFICATION	3.584123798199143E-4	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9991963963291778	WITHOUT_CLASSIFICATION	8.036036708221796E-4	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9996415876201802	WITHOUT_CLASSIFICATION	3.584123798199143E-4	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996955336275679	WITHOUT_CLASSIFICATION	3.0446637243207686E-4	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9997591153128548	WITHOUT_CLASSIFICATION	2.4088468714527129E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9994793859113339	WITHOUT_CLASSIFICATION	5.20614088665995E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9997973845618966	WITHOUT_CLASSIFICATION	2.0261543810336387E-4	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9996842568805764	WITHOUT_CLASSIFICATION	3.1574311942366725E-4	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9991963963291778	WITHOUT_CLASSIFICATION	8.036036708221796E-4	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996955336275679	WITHOUT_CLASSIFICATION	3.0446637243207686E-4	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9995877713604849	WITHOUT_CLASSIFICATION	4.122286395150685E-4	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.99957601632333	WITHOUT_CLASSIFICATION	4.239836766699341E-4	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.999530567558512	WITHOUT_CLASSIFICATION	4.6943244148789517E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9995804147668685	WITHOUT_CLASSIFICATION	4.1958523313154693E-4	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999909470876531	WITHOUT_CLASSIFICATION	9.052912346890684E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999300859362799	WITHOUT_CLASSIFICATION	6.991406372011512E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995142390809129	WITHOUT_CLASSIFICATION	4.85760919087139E-4	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9997591153128548	WITHOUT_CLASSIFICATION	2.4088468714527129E-4	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999299312570648	WITHOUT_CLASSIFICATION	7.006874293528604E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9997574256489385	WITHOUT_CLASSIFICATION	2.4257435106143758E-4	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9996314174939814	WITHOUT_CLASSIFICATION	3.6858250601855096E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995142390809129	WITHOUT_CLASSIFICATION	4.85760919087139E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994554575863202	WITHOUT_CLASSIFICATION	5.445424136798588E-4	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9997998672709736	WITHOUT_CLASSIFICATION	2.0013272902633046E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995142390809129	WITHOUT_CLASSIFICATION	4.85760919087139E-4	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9997936857549253	WITHOUT_CLASSIFICATION	2.0631424507464052E-4	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9996944936629386	WITHOUT_CLASSIFICATION	3.0550633706142265E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994554575863202	WITHOUT_CLASSIFICATION	5.445424136798588E-4	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9981459874850087	WITHOUT_CLASSIFICATION	0.0018540125149912588	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9991749867517511	WITHOUT_CLASSIFICATION	8.250132482489683E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999106129644553	WITHOUT_CLASSIFICATION	8.938703554471664E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9993742149337816	WITHOUT_CLASSIFICATION	6.257850662184468E-4	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.999906446141382	WITHOUT_CLASSIFICATION	9.355385861792501E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9995556952400831	WITHOUT_CLASSIFICATION	4.443047599168553E-4	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9996532719691622	WITHOUT_CLASSIFICATION	3.4672803083779405E-4	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9995704171737805	WITHOUT_CLASSIFICATION	4.29582826219554E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999888336744051	WITHOUT_CLASSIFICATION	1.1166325594902351E-4	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9995805535008171	WITHOUT_CLASSIFICATION	4.194464991829282E-4	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9995515273112863	WITHOUT_CLASSIFICATION	4.484726887136325E-4	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9998887388906093	WITHOUT_CLASSIFICATION	1.1126110939076858E-4	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9993214919816917	WITHOUT_CLASSIFICATION	6.78508018308224E-4	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9993928637195449	WITHOUT_CLASSIFICATION	6.071362804550308E-4	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9995487545673549	WITHOUT_CLASSIFICATION	4.512454326449776E-4	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9998615473545113	WITHOUT_CLASSIFICATION	1.3845264548873956E-4	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9993597158530939	WITHOUT_CLASSIFICATION	6.402841469061761E-4	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9998842956511215	WITHOUT_CLASSIFICATION	1.1570434887852007E-4	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9996466381939814	WITHOUT_CLASSIFICATION	3.5336180601869906E-4	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9998162284733353	WITHOUT_CLASSIFICATION	1.8377152666466213E-4	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9995805535008171	WITHOUT_CLASSIFICATION	4.194464991829282E-4	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994687747096076	WITHOUT_CLASSIFICATION	5.312252903924689E-4	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994734502183048	WITHOUT_CLASSIFICATION	5.265497816952927E-4	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9994308519371194	WITHOUT_CLASSIFICATION	5.691480628805389E-4	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9996386829293701	WITHOUT_CLASSIFICATION	3.6131707062989115E-4	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9997332523084403	WITHOUT_CLASSIFICATION	2.6674769155962804E-4	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9996671821669745	WITHOUT_CLASSIFICATION	3.328178330254687E-4	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9993813614635915	WITHOUT_CLASSIFICATION	6.186385364084361E-4	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9993951332493066	WITHOUT_CLASSIFICATION	6.048667506933968E-4	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.99971680763618	WITHOUT_CLASSIFICATION	2.831923638200817E-4	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9995805535008171	WITHOUT_CLASSIFICATION	4.194464991829282E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9996466623883501	WITHOUT_CLASSIFICATION	3.5333761164989887E-4	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9995119248987743	WITHOUT_CLASSIFICATION	4.8807510122575546E-4	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9992972132636958	WITHOUT_CLASSIFICATION	7.027867363041413E-4	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9993771549476277	WITHOUT_CLASSIFICATION	6.228450523722716E-4	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9997237968119904	WITHOUT_CLASSIFICATION	2.762031880095816E-4	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9993323880920483	WITHOUT_CLASSIFICATION	6.676119079517045E-4	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999957363477499	WITHOUT_CLASSIFICATION	4.263652250099384E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994554575863202	WITHOUT_CLASSIFICATION	5.445424136798588E-4	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9993699717360306	WITHOUT_CLASSIFICATION	6.300282639695107E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.999663804913642	WITHOUT_CLASSIFICATION	3.361950863580028E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.999663804913642	WITHOUT_CLASSIFICATION	3.361950863580028E-4	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9982218119200713	WITHOUT_CLASSIFICATION	0.0017781880799287307	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9995556952400831	WITHOUT_CLASSIFICATION	4.443047599168553E-4	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9995421733328328	WITHOUT_CLASSIFICATION	4.578266671671842E-4	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.999861786622911	WITHOUT_CLASSIFICATION	1.3821337708892943E-4	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999892691021618	WITHOUT_CLASSIFICATION	1.0730897838190186E-4	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9996104780004769	WITHOUT_CLASSIFICATION	3.895219995231837E-4	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9996264804437449	WITHOUT_CLASSIFICATION	3.735195562550089E-4	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9996280126913297	WITHOUT_CLASSIFICATION	3.71987308670217E-4	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9997929113362792	WITHOUT_CLASSIFICATION	2.0708866372081398E-4	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9994772836757101	WITHOUT_CLASSIFICATION	5.227163242898668E-4	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9996771883351695	WITHOUT_CLASSIFICATION	3.228116648304395E-4	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999142080288448	WITHOUT_CLASSIFICATION	8.579197115522838E-5	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999670832871109	WITHOUT_CLASSIFICATION	3.2916712888951146E-5	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999201235229415	WITHOUT_CLASSIFICATION	7.987647705851727E-5	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999931305034689	WITHOUT_CLASSIFICATION	6.869496530972692E-6	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9995754773232858	WITHOUT_CLASSIFICATION	4.2452267671427314E-4	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9998379430580461	WITHOUT_CLASSIFICATION	1.620569419540295E-4	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999449186717696	WITHOUT_CLASSIFICATION	5.5081328230354974E-5	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9998438619264851	WITHOUT_CLASSIFICATION	1.561380735148935E-4	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999577839488412	WITHOUT_CLASSIFICATION	4.221605115874235E-5	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9996790435329933	WITHOUT_CLASSIFICATION	3.2095646700676665E-4	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9996626120171497	WITHOUT_CLASSIFICATION	3.3738798285029803E-4	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999719451495771	WITHOUT_CLASSIFICATION	2.805485042298693E-5	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9993323880920483	WITHOUT_CLASSIFICATION	6.676119079517045E-4	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999436307869335	WITHOUT_CLASSIFICATION	5.636921306648544E-5	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9998170327446957	WITHOUT_CLASSIFICATION	1.8296725530435898E-4	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9998433236320005	WITHOUT_CLASSIFICATION	1.5667636799952562E-4	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998407273780696	WITHOUT_CLASSIFICATION	1.5927262193036055E-4	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9997727869535478	WITHOUT_CLASSIFICATION	2.2721304645227544E-4	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9997315006465163	WITHOUT_CLASSIFICATION	2.6849935348378104E-4	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999765374407353	WITHOUT_CLASSIFICATION	2.3462559264708027E-5	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999875690655363	WITHOUT_CLASSIFICATION	1.2430934463702713E-4	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9998816511803792	WITHOUT_CLASSIFICATION	1.183488196206916E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998570902710645	WITHOUT_CLASSIFICATION	1.4290972893539212E-4	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9996762250094272	WITHOUT_CLASSIFICATION	3.2377499057281164E-4	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9995735864702905	WITHOUT_CLASSIFICATION	4.264135297095961E-4	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9996927385727576	WITHOUT_CLASSIFICATION	3.072614272423574E-4	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9994398687128238	WITHOUT_CLASSIFICATION	5.601312871762932E-4	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9996256309759471	WITHOUT_CLASSIFICATION	3.7436902405290934E-4	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9996256309759471	WITHOUT_CLASSIFICATION	3.7436902405290934E-4	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9994745121719179	WITHOUT_CLASSIFICATION	5.254878280821494E-4	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9992493022123191	WITHOUT_CLASSIFICATION	7.506977876807801E-4	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9997944460791428	WITHOUT_CLASSIFICATION	2.0555392085721405E-4	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9997944460791428	WITHOUT_CLASSIFICATION	2.0555392085721405E-4	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9996957832409906	WITHOUT_CLASSIFICATION	3.0421675900938806E-4	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9994956535505715	WITHOUT_CLASSIFICATION	5.043464494284844E-4	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9998987850750346	WITHOUT_CLASSIFICATION	1.0121492496538873E-4	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999108073281489	WITHOUT_CLASSIFICATION	8.91926718512183E-5	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9996788420922907	WITHOUT_CLASSIFICATION	3.211579077093286E-4	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997113029948116	WITHOUT_CLASSIFICATION	2.8869700518838117E-4	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9997637486514169	WITHOUT_CLASSIFICATION	2.362513485830193E-4	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9997637486514169	WITHOUT_CLASSIFICATION	2.362513485830193E-4	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997133443272265	WITHOUT_CLASSIFICATION	2.866556727735321E-4	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9996240628025558	WITHOUT_CLASSIFICATION	3.7593719744421003E-4	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9994725274823537	WITHOUT_CLASSIFICATION	5.274725176463822E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9996021661941309	WITHOUT_CLASSIFICATION	3.978338058691419E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9996021661941309	WITHOUT_CLASSIFICATION	3.978338058691419E-4	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9994521129119462	WITHOUT_CLASSIFICATION	5.478870880537402E-4	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9996569979610668	WITHOUT_CLASSIFICATION	3.430020389331888E-4	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998717993107917	WITHOUT_CLASSIFICATION	1.282006892082552E-4	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9996353341206607	WITHOUT_CLASSIFICATION	3.6466587933920434E-4	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9993399235609097	WITHOUT_CLASSIFICATION	6.600764390902146E-4	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9993053822603509	WITHOUT_CLASSIFICATION	6.946177396490153E-4	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9996338742783208	WITHOUT_CLASSIFICATION	3.661257216792373E-4	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.999759708088914	WITHOUT_CLASSIFICATION	2.402919110859092E-4	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9997556169153775	WITHOUT_CLASSIFICATION	2.4438308462247036E-4	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9995520789530448	WITHOUT_CLASSIFICATION	4.479210469553029E-4	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9997696933739436	WITHOUT_CLASSIFICATION	2.3030662605633885E-4	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9995903468736607	WITHOUT_CLASSIFICATION	4.096531263393078E-4	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9973864029246943	WITHOUT_CLASSIFICATION	0.0026135970753056485	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9996977012254855	WITHOUT_CLASSIFICATION	3.0229877451444753E-4	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9993199834223987	WITHOUT_CLASSIFICATION	6.80016577601253E-4	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999347420842071	WITHOUT_CLASSIFICATION	6.525791579293595E-5	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9994656597004238	WITHOUT_CLASSIFICATION	5.343402995763091E-4	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9998936396777267	WITHOUT_CLASSIFICATION	1.0636032227326811E-4	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9996746687745083	WITHOUT_CLASSIFICATION	3.253312254916834E-4	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999480344090199	WITHOUT_CLASSIFICATION	5.196559098010059E-4	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9994228671003579	WITHOUT_CLASSIFICATION	5.771328996422315E-4	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9994983887186398	WITHOUT_CLASSIFICATION	5.016112813602464E-4	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9994885650226263	WITHOUT_CLASSIFICATION	5.11434977373759E-4	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9996928346187648	WITHOUT_CLASSIFICATION	3.071653812352668E-4	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9998587465414478	WITHOUT_CLASSIFICATION	1.412534585521567E-4	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9998580258850276	WITHOUT_CLASSIFICATION	1.4197411497237118E-4	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.999401258198706	WITHOUT_CLASSIFICATION	5.987418012939319E-4	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999928098512566	WITHOUT_CLASSIFICATION	7.190148743393532E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9997589938957446	WITHOUT_CLASSIFICATION	2.4100610425530945E-4	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998943684136162	WITHOUT_CLASSIFICATION	1.0563158638389395E-4	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9994833444002743	WITHOUT_CLASSIFICATION	5.166555997256801E-4	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999571346878858	WITHOUT_CLASSIFICATION	4.286531211405916E-5	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9994110978667389	WITHOUT_CLASSIFICATION	5.889021332611386E-4	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9998214075761713	WITHOUT_CLASSIFICATION	1.7859242382872102E-4	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.999388703135537	WITHOUT_CLASSIFICATION	6.112968644631766E-4	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9993488572424966	WITHOUT_CLASSIFICATION	6.511427575035307E-4	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9995672162791317	WITHOUT_CLASSIFICATION	4.327837208682876E-4	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999754205301963	WITHOUT_CLASSIFICATION	2.457946980369733E-4	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999164767317649	WITHOUT_CLASSIFICATION	8.352326823508099E-5	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9997151181310172	WITHOUT_CLASSIFICATION	2.8488186898285796E-4	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.999401761712979	WITHOUT_CLASSIFICATION	5.982382870208815E-4	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9994024488325279	WITHOUT_CLASSIFICATION	5.975511674720686E-4	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9995862160558404	WITHOUT_CLASSIFICATION	4.137839441595876E-4	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.999321406802824	WITHOUT_CLASSIFICATION	6.785931971759167E-4	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.999393471350717	WITHOUT_CLASSIFICATION	6.065286492829158E-4	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9993630699837559	WITHOUT_CLASSIFICATION	6.369300162441365E-4	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9997771790664738	WITHOUT_CLASSIFICATION	2.228209335262649E-4	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9998538067232332	WITHOUT_CLASSIFICATION	1.4619327676675622E-4	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9997282359917863	WITHOUT_CLASSIFICATION	2.7176400821377506E-4	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9997877673381189	WITHOUT_CLASSIFICATION	2.1223266188106504E-4	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9995619309931696	WITHOUT_CLASSIFICATION	4.3806900683052006E-4	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9991659855322054	WITHOUT_CLASSIFICATION	8.340144677946627E-4	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.99990857617867	WITHOUT_CLASSIFICATION	9.142382132995488E-5	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9995564779154638	WITHOUT_CLASSIFICATION	4.435220845363262E-4	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9996774437498137	WITHOUT_CLASSIFICATION	3.2255625018629035E-4	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9994127389336376	WITHOUT_CLASSIFICATION	5.872610663624041E-4	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9994140084322408	WITHOUT_CLASSIFICATION	5.859915677592472E-4	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9998386080329235	WITHOUT_CLASSIFICATION	1.6139196707651478E-4	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9997966286076719	WITHOUT_CLASSIFICATION	2.033713923279979E-4	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999745576585612	WITHOUT_CLASSIFICATION	2.544234143879997E-4	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999745576585612	WITHOUT_CLASSIFICATION	2.544234143879997E-4	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999276469870308	WITHOUT_CLASSIFICATION	7.235301296909985E-5	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.999972269664428	WITHOUT_CLASSIFICATION	2.7730335571946248E-5	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999912304561307	WITHOUT_CLASSIFICATION	8.769543869243461E-6	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9998835721921722	WITHOUT_CLASSIFICATION	1.1642780782783909E-4	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9996735174954431	WITHOUT_CLASSIFICATION	3.2648250455693395E-4	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9997836297228179	WITHOUT_CLASSIFICATION	2.1637027718214095E-4	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999109000985946	WITHOUT_CLASSIFICATION	8.909990140534492E-5	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9998921495345489	WITHOUT_CLASSIFICATION	1.078504654511599E-4	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9997248518576313	WITHOUT_CLASSIFICATION	2.7514814236874105E-4	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999568310289246	WITHOUT_CLASSIFICATION	4.316897107533059E-5	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999914780171518	WITHOUT_CLASSIFICATION	8.521982848195766E-5	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9995210312831799	WITHOUT_CLASSIFICATION	4.789687168201495E-4	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999436416945717	WITHOUT_CLASSIFICATION	5.635830542828006E-5	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9997967054323644	WITHOUT_CLASSIFICATION	2.032945676356516E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996026143518042	WITHOUT_CLASSIFICATION	3.973856481958849E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996026143518042	WITHOUT_CLASSIFICATION	3.973856481958849E-4	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9996275006213311	WITHOUT_CLASSIFICATION	3.7249937866886025E-4	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999346669336826	WITHOUT_CLASSIFICATION	6.533306631741054E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999686556148749	WITHOUT_CLASSIFICATION	3.1344385125095514E-4	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999006048008036	WITHOUT_CLASSIFICATION	9.939519919645912E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996765556630997	WITHOUT_CLASSIFICATION	3.2344433690032674E-4	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995067263069524	WITHOUT_CLASSIFICATION	4.932736930475982E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9994951309161951	WITHOUT_CLASSIFICATION	5.048690838048033E-4	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9969948804804355	WITHOUT_CLASSIFICATION	0.0030051195195644597	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9997617016226706	WITHOUT_CLASSIFICATION	2.3829837732928282E-4	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9998120570366337	WITHOUT_CLASSIFICATION	1.8794296336643241E-4	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999723146175477	WITHOUT_CLASSIFICATION	2.768538245236791E-5	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9995816277367855	WITHOUT_CLASSIFICATION	4.1837226321440207E-4	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9997256769475372	WITHOUT_CLASSIFICATION	2.743230524628227E-4	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9996669151164461	WITHOUT_CLASSIFICATION	3.330848835538872E-4	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.99980203995282	WITHOUT_CLASSIFICATION	1.9796004717987105E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9996244599749161	WITHOUT_CLASSIFICATION	3.7554002508384976E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9997117250992652	WITHOUT_CLASSIFICATION	2.882749007347698E-4	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999584821545373	WITHOUT_CLASSIFICATION	4.151784546263629E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9996036149797979	WITHOUT_CLASSIFICATION	3.963850202020845E-4	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9993818114399327	WITHOUT_CLASSIFICATION	6.181885600673343E-4	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9996110173102928	WITHOUT_CLASSIFICATION	3.8898268970723144E-4	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999670081429518	WITHOUT_CLASSIFICATION	3.299185704822396E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999927329491798	WITHOUT_CLASSIFICATION	7.26705082026536E-6	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9993194406806216	WITHOUT_CLASSIFICATION	6.80559319378299E-4	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997526003118065	WITHOUT_CLASSIFICATION	2.473996881935698E-4	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9998443739079124	WITHOUT_CLASSIFICATION	1.5562609208767062E-4	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9996359886967209	WITHOUT_CLASSIFICATION	3.6401130327911083E-4	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.99991071489696	WITHOUT_CLASSIFICATION	8.928510304005943E-5	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999404819716368	WITHOUT_CLASSIFICATION	5.951802836322691E-5	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9998328985271107	WITHOUT_CLASSIFICATION	1.6710147288933583E-4	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999289696913681	WITHOUT_CLASSIFICATION	7.103030863182701E-5	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.999690820122417	WITHOUT_CLASSIFICATION	3.091798775831275E-4	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9996709751207611	WITHOUT_CLASSIFICATION	3.2902487923890155E-4	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9998150058873758	WITHOUT_CLASSIFICATION	1.8499411262411217E-4	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9998204651049336	WITHOUT_CLASSIFICATION	1.7953489506638824E-4	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999628473083252	WITHOUT_CLASSIFICATION	3.715269167487171E-5	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999795110182653	WITHOUT_CLASSIFICATION	2.0488981734689208E-4	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9998823396597301	WITHOUT_CLASSIFICATION	1.1766034026997456E-4	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9994692722282227	WITHOUT_CLASSIFICATION	5.307277717773485E-4	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9998057036037743	WITHOUT_CLASSIFICATION	1.9429639622564731E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9973175822743878	WITHOUT_CLASSIFICATION	0.0026824177256122217	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9973175822743878	WITHOUT_CLASSIFICATION	0.0026824177256122217	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9997995152139082	WITHOUT_CLASSIFICATION	2.0048478609177955E-4	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999842981393553	WITHOUT_CLASSIFICATION	1.570186064470633E-5	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9998776613299232	WITHOUT_CLASSIFICATION	1.223386700768046E-4	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9996625635197476	WITHOUT_CLASSIFICATION	3.3743648025248685E-4	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999224606015749	WITHOUT_CLASSIFICATION	7.753939842508161E-5	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9998241495038644	WITHOUT_CLASSIFICATION	1.758504961354905E-4	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9994821844306979	WITHOUT_CLASSIFICATION	5.17815569302018E-4	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9997420821723343	WITHOUT_CLASSIFICATION	2.579178276656235E-4	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.999942041131392	WITHOUT_CLASSIFICATION	5.795886860798142E-5	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997903614352455	WITHOUT_CLASSIFICATION	2.0963856475458552E-4	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997550076370812	WITHOUT_CLASSIFICATION	2.4499236291874614E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9984171450750895	WITHOUT_CLASSIFICATION	0.0015828549249105696	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9998480402265435	WITHOUT_CLASSIFICATION	1.5195977345658834E-4	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9998471845474144	WITHOUT_CLASSIFICATION	1.528154525856634E-4	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999523204605869	WITHOUT_CLASSIFICATION	4.7679539413029775E-5	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9998595827176419	WITHOUT_CLASSIFICATION	1.4041728235818013E-4	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9995864261372671	WITHOUT_CLASSIFICATION	4.1357386273282976E-4	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999499456826866	WITHOUT_CLASSIFICATION	5.0054317313309037E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9997155541465229	WITHOUT_CLASSIFICATION	2.8444585347708716E-4	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999054100766603	WITHOUT_CLASSIFICATION	9.458992333969977E-5	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999351630633001	WITHOUT_CLASSIFICATION	6.483693669984719E-5	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9998360584477342	WITHOUT_CLASSIFICATION	1.6394155226580575E-4	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9998904541158535	WITHOUT_CLASSIFICATION	1.0954588414650371E-4	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9996444970686592	WITHOUT_CLASSIFICATION	3.555029313407464E-4	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9995212602092258	WITHOUT_CLASSIFICATION	4.787397907741233E-4	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999679084701248	WITHOUT_CLASSIFICATION	3.2091529875173396E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999483443198948	WITHOUT_CLASSIFICATION	5.16556801052759E-5	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999994109362907	WITHOUT_CLASSIFICATION	5.890637093471546E-7	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999936077199019	WITHOUT_CLASSIFICATION	6.392280098110249E-6	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9997178792618684	WITHOUT_CLASSIFICATION	2.8212073813161227E-4	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9998028868192835	WITHOUT_CLASSIFICATION	1.9711318071654279E-4	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999363686591414	WITHOUT_CLASSIFICATION	6.363134085860885E-5	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999931084470467	WITHOUT_CLASSIFICATION	6.891552953319486E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9996836615094775	WITHOUT_CLASSIFICATION	3.163384905224623E-4	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999946533729408	WITHOUT_CLASSIFICATION	5.346627059241424E-6	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997296547133259	WITHOUT_CLASSIFICATION	2.7034528667413274E-4	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.999903269573329	WITHOUT_CLASSIFICATION	9.673042667100716E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999936880451695	WITHOUT_CLASSIFICATION	6.311954830461184E-6	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999841333812469	WITHOUT_CLASSIFICATION	1.5866618753121246E-5	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9994174800469161	WITHOUT_CLASSIFICATION	5.825199530839255E-4	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998145093234999	WITHOUT_CLASSIFICATION	1.8549067650003648E-4	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999600474266022	WITHOUT_CLASSIFICATION	3.995257339780438E-5	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9993164669765386	WITHOUT_CLASSIFICATION	6.835330234613895E-4	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999877046951107	WITHOUT_CLASSIFICATION	1.2295304889314238E-5	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999054553601607	WITHOUT_CLASSIFICATION	9.454463983926707E-5	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9992271198850681	WITHOUT_CLASSIFICATION	7.728801149319682E-4	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999729237030994	WITHOUT_CLASSIFICATION	2.7076296900544402E-5	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999436416945717	WITHOUT_CLASSIFICATION	5.635830542828006E-5	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999246182325836	WITHOUT_CLASSIFICATION	7.538176741643548E-5	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9997751407872069	WITHOUT_CLASSIFICATION	2.2485921279313852E-4	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9996981447978497	WITHOUT_CLASSIFICATION	3.018552021502905E-4	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999780619863763	WITHOUT_CLASSIFICATION	2.1938013623705987E-5	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999624647255958	WITHOUT_CLASSIFICATION	3.7535274404132296E-5	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999416761113292	WITHOUT_CLASSIFICATION	5.8323888670786966E-5	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999025040225789	WITHOUT_CLASSIFICATION	9.749597742111287E-5	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9998691056647248	WITHOUT_CLASSIFICATION	1.3089433527521522E-4	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999652683801193	WITHOUT_CLASSIFICATION	3.473161988069486E-4	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9991791476720372	WITHOUT_CLASSIFICATION	8.208523279628452E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999906362486677	WITHOUT_CLASSIFICATION	9.363751332305651E-6	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9997198159570222	WITHOUT_CLASSIFICATION	2.801840429777522E-4	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999091029351137	WITHOUT_CLASSIFICATION	9.089706488635282E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9998805877946053	WITHOUT_CLASSIFICATION	1.1941220539466098E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995114549839103	WITHOUT_CLASSIFICATION	4.885450160897318E-4	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9994467433646438	WITHOUT_CLASSIFICATION	5.532566353563069E-4	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.999486700471375	WITHOUT_CLASSIFICATION	5.132995286249943E-4	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.999938967427848	WITHOUT_CLASSIFICATION	6.103257215206896E-5	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9998710057335128	WITHOUT_CLASSIFICATION	1.2899426648712157E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995114549839103	WITHOUT_CLASSIFICATION	4.885450160897318E-4	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9996871056526343	WITHOUT_CLASSIFICATION	3.1289434736565857E-4	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9998780315440058	WITHOUT_CLASSIFICATION	1.2196845599431068E-4	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999684290512874	WITHOUT_CLASSIFICATION	3.157094871269231E-5	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999498371050395	WITHOUT_CLASSIFICATION	5.0162894960610684E-5	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9997973910672592	WITHOUT_CLASSIFICATION	2.0260893274078276E-4	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999219342597079	WITHOUT_CLASSIFICATION	7.806574029204928E-5	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9998553486070859	WITHOUT_CLASSIFICATION	1.4465139291407807E-4	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999480138734494	WITHOUT_CLASSIFICATION	5.198612655059276E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999015466863197	WITHOUT_CLASSIFICATION	9.84533136802126E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9998633021010919	WITHOUT_CLASSIFICATION	1.3669789890806855E-4	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.999550669419205	WITHOUT_CLASSIFICATION	4.493305807949336E-4	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9992228509990742	WITHOUT_CLASSIFICATION	7.771490009258712E-4	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9997782424426251	WITHOUT_CLASSIFICATION	2.2175755737481137E-4	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9988850410913329	WITHOUT_CLASSIFICATION	0.001114958908667082	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9997833295989691	WITHOUT_CLASSIFICATION	2.1667040103087005E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999719451495771	WITHOUT_CLASSIFICATION	2.805485042298693E-5	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999850741201242	WITHOUT_CLASSIFICATION	1.4925879875810053E-4	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999508184496233	WITHOUT_CLASSIFICATION	4.9181550376778124E-5	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.983855053181763	WITHOUT_CLASSIFICATION	0.01614494681823688	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9996285131790021	WITHOUT_CLASSIFICATION	3.7148682099783734E-4	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999451749270443	WITHOUT_CLASSIFICATION	5.4825072955828754E-5	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9998926264914293	WITHOUT_CLASSIFICATION	1.0737350857078025E-4	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9998012838581232	WITHOUT_CLASSIFICATION	1.9871614187679163E-4	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999049918779044	WITHOUT_CLASSIFICATION	9.500812209566399E-5	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9998603821985603	WITHOUT_CLASSIFICATION	1.3961780143968743E-4	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999794672696939	WITHOUT_CLASSIFICATION	2.053273030610416E-5	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999790910632386	WITHOUT_CLASSIFICATION	2.0908936761467987E-5	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999262403996498	WITHOUT_CLASSIFICATION	7.375960035013877E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999236290234523	WITHOUT_CLASSIFICATION	7.63709765477053E-5	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999941570678266	WITHOUT_CLASSIFICATION	5.842932173459444E-6	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9995658064950709	WITHOUT_CLASSIFICATION	4.341935049290461E-4	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9996676376378392	WITHOUT_CLASSIFICATION	3.3236236216087545E-4	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9998839212413972	WITHOUT_CLASSIFICATION	1.1607875860275548E-4	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9998791749365591	WITHOUT_CLASSIFICATION	1.2082506344095148E-4	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999071745250523	WITHOUT_CLASSIFICATION	9.282547494766723E-5	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999990868420715	WITHOUT_CLASSIFICATION	9.131579284538099E-7	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999632082717845	WITHOUT_CLASSIFICATION	3.679172821548472E-5	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.99994471672253	WITHOUT_CLASSIFICATION	5.528327747003378E-5	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9996985243110941	WITHOUT_CLASSIFICATION	3.014756889059136E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999314990484681	WITHOUT_CLASSIFICATION	6.850095153191061E-5	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9996882937944596	WITHOUT_CLASSIFICATION	3.1170620554044325E-4	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9996882937944596	WITHOUT_CLASSIFICATION	3.1170620554044325E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9998552116439583	WITHOUT_CLASSIFICATION	1.4478835604172987E-4	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999154463687375	WITHOUT_CLASSIFICATION	8.45536312625001E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998149419409051	WITHOUT_CLASSIFICATION	1.8505805909477998E-4	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9998475597253548	WITHOUT_CLASSIFICATION	1.5244027464530156E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9998475597253548	WITHOUT_CLASSIFICATION	1.5244027464530156E-4	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9998233050586807	WITHOUT_CLASSIFICATION	1.7669494131937743E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998286932281393	WITHOUT_CLASSIFICATION	1.7130677186068675E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9995723963364651	WITHOUT_CLASSIFICATION	4.2760366353484917E-4	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9997807260158292	WITHOUT_CLASSIFICATION	2.1927398417076664E-4	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999379637046488	WITHOUT_CLASSIFICATION	6.203629535115704E-5	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999747339076246	WITHOUT_CLASSIFICATION	2.5266092375399147E-4	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999007909224987	WITHOUT_CLASSIFICATION	9.920907750127835E-5	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9995004767887776	WITHOUT_CLASSIFICATION	4.99523211222396E-4	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999995084391436	WITHOUT_CLASSIFICATION	4.915608563508158E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994979709972913	WITHOUT_CLASSIFICATION	5.020290027087557E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994979709972913	WITHOUT_CLASSIFICATION	5.020290027087557E-4	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9993941910382681	WITHOUT_CLASSIFICATION	6.058089617317844E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9993194080296354	WITHOUT_CLASSIFICATION	6.805919703646653E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9993338429410199	WITHOUT_CLASSIFICATION	6.661570589801789E-4	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9996018378927406	WITHOUT_CLASSIFICATION	3.981621072594022E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994554575863202	WITHOUT_CLASSIFICATION	5.445424136798588E-4	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9992583319845654	WITHOUT_CLASSIFICATION	7.416680154346139E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996096298783941	WITHOUT_CLASSIFICATION	3.903701216058203E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994554575863202	WITHOUT_CLASSIFICATION	5.445424136798588E-4	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9997367529316442	WITHOUT_CLASSIFICATION	2.6324706835587617E-4	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999033578418618	WITHOUT_CLASSIFICATION	9.664215813827082E-5	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9994152421349137	WITHOUT_CLASSIFICATION	5.847578650862758E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999340192660607	WITHOUT_CLASSIFICATION	6.598073393922835E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9998633021010919	WITHOUT_CLASSIFICATION	1.3669789890806855E-4	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9996190591758389	WITHOUT_CLASSIFICATION	3.809408241610805E-4	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9995119588627018	WITHOUT_CLASSIFICATION	4.880411372982748E-4	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9997558015971116	WITHOUT_CLASSIFICATION	2.4419840288842547E-4	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9994290248766751	WITHOUT_CLASSIFICATION	5.709751233249502E-4	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9994503162473674	WITHOUT_CLASSIFICATION	5.496837526326487E-4	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9994589285905078	WITHOUT_CLASSIFICATION	5.410714094922232E-4	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.999545345271349	WITHOUT_CLASSIFICATION	4.54654728651022E-4	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999188589441516	WITHOUT_CLASSIFICATION	8.114105584838069E-5	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9997346089822199	WITHOUT_CLASSIFICATION	2.65391017780033E-4	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9992477831892453	WITHOUT_CLASSIFICATION	7.522168107547366E-4	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9992477831892453	WITHOUT_CLASSIFICATION	7.522168107547366E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9996242413126989	WITHOUT_CLASSIFICATION	3.757586873011075E-4	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999937063322866	WITHOUT_CLASSIFICATION	6.293667713375235E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9993585969451096	WITHOUT_CLASSIFICATION	6.414030548903055E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9997345111755709	WITHOUT_CLASSIFICATION	2.6548882442908466E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9997783800339564	WITHOUT_CLASSIFICATION	2.2161996604373835E-4	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9998660920685082	WITHOUT_CLASSIFICATION	1.3390793149190767E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998840422804935	WITHOUT_CLASSIFICATION	1.1595771950645753E-4	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999597531168177	WITHOUT_CLASSIFICATION	4.0246883182229526E-5	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9995877713604849	WITHOUT_CLASSIFICATION	4.122286395150685E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9995149396399174	WITHOUT_CLASSIFICATION	4.850603600826063E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995142390809129	WITHOUT_CLASSIFICATION	4.85760919087139E-4	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999819984456324	WITHOUT_CLASSIFICATION	1.80015543676659E-5	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9997979168069246	WITHOUT_CLASSIFICATION	2.020831930754485E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999559110395576	WITHOUT_CLASSIFICATION	4.4088960442475E-5	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9998059343208471	WITHOUT_CLASSIFICATION	1.9406567915288E-4	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999508353355302	WITHOUT_CLASSIFICATION	4.916466446980025E-4	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999589047577933	WITHOUT_CLASSIFICATION	4.1095242206675884E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999878742931195	WITHOUT_CLASSIFICATION	1.2125706880503023E-4	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9995397970560349	WITHOUT_CLASSIFICATION	4.60202943965181E-4	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999050749276542	WITHOUT_CLASSIFICATION	9.49250723457409E-5	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999967867328162	WITHOUT_CLASSIFICATION	3.213267183822281E-6	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999842277645954	WITHOUT_CLASSIFICATION	1.577223540458139E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998717993107917	WITHOUT_CLASSIFICATION	1.282006892082552E-4	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999998626381195	WITHOUT_CLASSIFICATION	1.3736188050397235E-7	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9996911857981033	WITHOUT_CLASSIFICATION	3.088142018966739E-4	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9996911857981033	WITHOUT_CLASSIFICATION	3.088142018966739E-4	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9994633572835413	WITHOUT_CLASSIFICATION	5.366427164586678E-4	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.99984601955309	WITHOUT_CLASSIFICATION	1.5398044690989886E-4	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999789357896928	WITHOUT_CLASSIFICATION	2.106421030730365E-5	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999837811372737	WITHOUT_CLASSIFICATION	1.621886272628078E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9994560041518562	WITHOUT_CLASSIFICATION	5.439958481439153E-4	IMPLEMENTATION
