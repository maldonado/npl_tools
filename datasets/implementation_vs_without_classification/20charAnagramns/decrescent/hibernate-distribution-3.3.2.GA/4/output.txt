// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9996878783990787	WITHOUT_CLASSIFICATION	3.1212160092142184E-4	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9996878783990787	WITHOUT_CLASSIFICATION	3.1212160092142184E-4	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9994659158925004	WITHOUT_CLASSIFICATION	5.340841074995966E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9991722372730754	WITHOUT_CLASSIFICATION	8.277627269245221E-4	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9998077639239014	WITHOUT_CLASSIFICATION	1.9223607609863296E-4	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.8674970921421165	IMPLEMENTATION	0.13250290785788352	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9976377337984136	WITHOUT_CLASSIFICATION	0.002362266201586509	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.8819619721194314	WITHOUT_CLASSIFICATION	0.11803802788056861	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.999495308234892	WITHOUT_CLASSIFICATION	5.046917651079388E-4	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9992728979147363	WITHOUT_CLASSIFICATION	7.271020852637327E-4	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9998594938436234	WITHOUT_CLASSIFICATION	1.4050615637661322E-4	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.995873342831238	WITHOUT_CLASSIFICATION	0.004126657168762043	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9998018079928497	WITHOUT_CLASSIFICATION	1.9819200715039364E-4	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9998018079928497	WITHOUT_CLASSIFICATION	1.9819200715039364E-4	IMPLEMENTATION
/**	IMPLEMENTATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.6479570399579422	WITHOUT_CLASSIFICATION	0.3520429600420579	IMPLEMENTATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9341082536785617	IMPLEMENTATION	0.06589174632143842	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.8736029854893819	WITHOUT_CLASSIFICATION	0.12639701451061808	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999976766713369	WITHOUT_CLASSIFICATION	2.323328663037154E-6	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9995767744092464	WITHOUT_CLASSIFICATION	4.232255907534801E-4	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9993253146302161	WITHOUT_CLASSIFICATION	6.746853697839213E-4	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9999775074509132	WITHOUT_CLASSIFICATION	2.249254908674497E-5	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9993625761081676	WITHOUT_CLASSIFICATION	6.37423891832348E-4	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9957460423774325	WITHOUT_CLASSIFICATION	0.004253957622567506	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9957460423774325	WITHOUT_CLASSIFICATION	0.004253957622567506	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9872040212125599	WITHOUT_CLASSIFICATION	0.012795978787440059	IMPLEMENTATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9998016950630749	WITHOUT_CLASSIFICATION	1.9830493692507255E-4	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9850945280318936	WITHOUT_CLASSIFICATION	0.014905471968106314	IMPLEMENTATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9995878223726142	WITHOUT_CLASSIFICATION	4.1217762738580423E-4	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9986103445503557	WITHOUT_CLASSIFICATION	0.0013896554496443255	IMPLEMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9995120638882921	WITHOUT_CLASSIFICATION	4.8793611170795095E-4	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9990600340961369	WITHOUT_CLASSIFICATION	9.399659038632435E-4	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9998708366958073	WITHOUT_CLASSIFICATION	1.291633041926577E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9994272496126826	WITHOUT_CLASSIFICATION	5.727503873173389E-4	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9980000601091207	WITHOUT_CLASSIFICATION	0.0019999398908793313	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9995169775543429	WITHOUT_CLASSIFICATION	4.830224456571012E-4	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.5012871409030181	WITHOUT_CLASSIFICATION	0.49871285909698193	IMPLEMENTATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9996641824148959	WITHOUT_CLASSIFICATION	3.3581758510415813E-4	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9994293895299258	WITHOUT_CLASSIFICATION	5.706104700741763E-4	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9199562044087312	WITHOUT_CLASSIFICATION	0.08004379559126887	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9199562044087312	WITHOUT_CLASSIFICATION	0.08004379559126887	IMPLEMENTATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9924487779278285	WITHOUT_CLASSIFICATION	0.007551222072171519	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999248601465921	WITHOUT_CLASSIFICATION	7.513985340781329E-5	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9999296404286723	WITHOUT_CLASSIFICATION	7.035957132776583E-5	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9404751738547484	WITHOUT_CLASSIFICATION	0.05952482614525158	IMPLEMENTATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9990593495901817	WITHOUT_CLASSIFICATION	9.406504098182568E-4	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.999159912065791	WITHOUT_CLASSIFICATION	8.400879342090253E-4	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9991293073792372	WITHOUT_CLASSIFICATION	8.706926207627018E-4	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9998153252294576	WITHOUT_CLASSIFICATION	1.8467477054245483E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9997173900372363	WITHOUT_CLASSIFICATION	2.8260996276370553E-4	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9992339995849643	WITHOUT_CLASSIFICATION	7.660004150356562E-4	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9998298230610961	WITHOUT_CLASSIFICATION	1.7017693890385453E-4	IMPLEMENTATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9995723700873611	WITHOUT_CLASSIFICATION	4.276299126388559E-4	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9996221436966308	WITHOUT_CLASSIFICATION	3.7785630336911654E-4	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9991279827863888	WITHOUT_CLASSIFICATION	8.720172136111603E-4	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9801959869635742	WITHOUT_CLASSIFICATION	0.019804013036425795	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9991279827863888	WITHOUT_CLASSIFICATION	8.720172136111603E-4	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9946457144159813	IMPLEMENTATION	0.005354285584018649	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9180687976883471	IMPLEMENTATION	0.08193120231165285	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.9991279827863888	WITHOUT_CLASSIFICATION	8.720172136111603E-4	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999690452366896	WITHOUT_CLASSIFICATION	3.0954763310369524E-5	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.999969974872352	WITHOUT_CLASSIFICATION	3.002512764814849E-5	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9999259699169654	WITHOUT_CLASSIFICATION	7.40300830346647E-5	IMPLEMENTATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9998961314352334	WITHOUT_CLASSIFICATION	1.0386856476668846E-4	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998319977177542	WITHOUT_CLASSIFICATION	1.6800228224582051E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9989708896509724	WITHOUT_CLASSIFICATION	0.0010291103490276626	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9989708896509724	WITHOUT_CLASSIFICATION	0.0010291103490276626	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9998587407851316	WITHOUT_CLASSIFICATION	1.4125921486833813E-4	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999629225741159	WITHOUT_CLASSIFICATION	3.707742588415921E-5	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999265872915596	WITHOUT_CLASSIFICATION	7.341270844035818E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999888291131328	WITHOUT_CLASSIFICATION	1.1170886867197113E-4	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999888291131328	WITHOUT_CLASSIFICATION	1.1170886867197113E-4	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999432530819552	WITHOUT_CLASSIFICATION	5.674691804481559E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999801453690051	WITHOUT_CLASSIFICATION	1.9854630994843073E-5	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999675452799688	WITHOUT_CLASSIFICATION	3.245472003129865E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999893931823511	WITHOUT_CLASSIFICATION	1.0606817648889698E-4	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.997121431801746	WITHOUT_CLASSIFICATION	0.002878568198253939	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.997121431801746	WITHOUT_CLASSIFICATION	0.002878568198253939	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9965324740177322	WITHOUT_CLASSIFICATION	0.003467525982267845	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999824012522901	WITHOUT_CLASSIFICATION	1.759874770989369E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999382777543308	WITHOUT_CLASSIFICATION	6.172224566921204E-5	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999369592272097	WITHOUT_CLASSIFICATION	6.304077279027172E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999866269961879	WITHOUT_CLASSIFICATION	1.3373003812094582E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9964396358804821	WITHOUT_CLASSIFICATION	0.003560364119517952	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9963465389182524	WITHOUT_CLASSIFICATION	0.0036534610817476115	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.999843585293374	WITHOUT_CLASSIFICATION	1.5641470662590857E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9998439349279166	WITHOUT_CLASSIFICATION	1.5606507208351365E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999457145626407	WITHOUT_CLASSIFICATION	5.4285437359217635E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999135834852814	WITHOUT_CLASSIFICATION	8.64165147186873E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.997803844823737	WITHOUT_CLASSIFICATION	0.0021961551762629964	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999445145100604	WITHOUT_CLASSIFICATION	5.5485489939707194E-5	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999253262043015	WITHOUT_CLASSIFICATION	7.467379569846128E-5	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999928087712351	WITHOUT_CLASSIFICATION	7.191228764975855E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999074832118172	WITHOUT_CLASSIFICATION	9.25167881827841E-5	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9998816325438227	WITHOUT_CLASSIFICATION	1.1836745617723981E-4	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999589757992128	WITHOUT_CLASSIFICATION	4.1024200787166E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999166455071975	WITHOUT_CLASSIFICATION	8.335449280245866E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9998629901687417	WITHOUT_CLASSIFICATION	1.3700983125830153E-4	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998844374116491	WITHOUT_CLASSIFICATION	1.1556258835094475E-4	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99990712335518	WITHOUT_CLASSIFICATION	9.287664482006331E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999953661105562	WITHOUT_CLASSIFICATION	4.633889443791004E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9969938409658292	WITHOUT_CLASSIFICATION	0.0030061590341707444	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999592976341163	WITHOUT_CLASSIFICATION	4.0702365883755576E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9998906187261515	WITHOUT_CLASSIFICATION	1.0938127384846963E-4	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9969938409658292	WITHOUT_CLASSIFICATION	0.0030061590341707444	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9998906187261515	WITHOUT_CLASSIFICATION	1.0938127384846963E-4	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999472047774544	WITHOUT_CLASSIFICATION	5.279522254561436E-5	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999947110754593	WITHOUT_CLASSIFICATION	5.288924540728222E-6	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999525624461602	WITHOUT_CLASSIFICATION	4.7437553839898923E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999158040627348	WITHOUT_CLASSIFICATION	8.419593726516118E-5	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999935860147967	WITHOUT_CLASSIFICATION	6.413985203411639E-6	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999684464191623	WITHOUT_CLASSIFICATION	3.155358083774934E-5	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.999872774136415	WITHOUT_CLASSIFICATION	1.2722586358500764E-4	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999125392694371	WITHOUT_CLASSIFICATION	8.746073056281104E-5	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999800426183422	WITHOUT_CLASSIFICATION	1.9957381657840567E-5	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9997750764373943	WITHOUT_CLASSIFICATION	2.2492356260577534E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9998711541815475	WITHOUT_CLASSIFICATION	1.288458184525698E-4	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9998906187261515	WITHOUT_CLASSIFICATION	1.0938127384846962E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999905058459905	WITHOUT_CLASSIFICATION	9.494154009529313E-6	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9998977914603822	WITHOUT_CLASSIFICATION	1.0220853961785003E-4	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999539071275083	WITHOUT_CLASSIFICATION	4.609287249168698E-5	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999612496091396	WITHOUT_CLASSIFICATION	3.875039086054569E-5	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.99993822315913	WITHOUT_CLASSIFICATION	6.177684087009697E-5	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999528011549083	WITHOUT_CLASSIFICATION	4.7198845091702114E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999750462435719	WITHOUT_CLASSIFICATION	2.495375642818714E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999822788470349	WITHOUT_CLASSIFICATION	1.7721152965045238E-5	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999765617681984	WITHOUT_CLASSIFICATION	2.3438231801532784E-5	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999698284183774	WITHOUT_CLASSIFICATION	3.0171581622596832E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999027553302965	WITHOUT_CLASSIFICATION	9.724466970352187E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999603481101376	WITHOUT_CLASSIFICATION	3.965188986246329E-5	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9785250071276796	WITHOUT_CLASSIFICATION	0.02147499287232038	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999678943891417	WITHOUT_CLASSIFICATION	3.2105610858312384E-5	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999712483422487	WITHOUT_CLASSIFICATION	2.875165775126221E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9964255876222499	WITHOUT_CLASSIFICATION	0.003574412377750074	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999744684812489	WITHOUT_CLASSIFICATION	2.5531518751024765E-5	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999893823305895	WITHOUT_CLASSIFICATION	1.0617669410526392E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999973680023679	WITHOUT_CLASSIFICATION	2.6319976320936877E-5	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.999940262440992	WITHOUT_CLASSIFICATION	5.9737559007949936E-5	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999636597143509	WITHOUT_CLASSIFICATION	3.6340285649191876E-5	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9998880009376666	WITHOUT_CLASSIFICATION	1.1199906233336977E-4	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999350286514546	WITHOUT_CLASSIFICATION	6.497134854538477E-5	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999981454233737	WITHOUT_CLASSIFICATION	1.8545766262271854E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9998880009376666	WITHOUT_CLASSIFICATION	1.1199906233336977E-4	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999640805794099	WITHOUT_CLASSIFICATION	3.591942059013632E-5	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999683337370682	WITHOUT_CLASSIFICATION	3.166626293175635E-5	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9995616518108549	WITHOUT_CLASSIFICATION	4.383481891451137E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999825400456345	WITHOUT_CLASSIFICATION	1.7459954365523926E-5	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999558108489432	WITHOUT_CLASSIFICATION	4.418915105673479E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999552019970257	WITHOUT_CLASSIFICATION	4.479800297432004E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999552019970257	WITHOUT_CLASSIFICATION	4.479800297432004E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998906187261515	WITHOUT_CLASSIFICATION	1.0938127384846962E-4	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999970696982473	WITHOUT_CLASSIFICATION	2.930301752633815E-6	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9998680161487935	WITHOUT_CLASSIFICATION	1.3198385120645863E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999628265725532	WITHOUT_CLASSIFICATION	3.71734274467669E-5	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999573637520438	WITHOUT_CLASSIFICATION	4.2636247956194676E-5	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999607713264268	WITHOUT_CLASSIFICATION	3.922867357316403E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9998656937182054	WITHOUT_CLASSIFICATION	1.34306281794642E-4	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.999945925986137	WITHOUT_CLASSIFICATION	5.4074013862940334E-5	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999732627326107	WITHOUT_CLASSIFICATION	2.6737267389365144E-5	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999764180500232	WITHOUT_CLASSIFICATION	2.358194997679494E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999123736025037	WITHOUT_CLASSIFICATION	8.762639749635004E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999123736025037	WITHOUT_CLASSIFICATION	8.762639749635004E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999909380995775	WITHOUT_CLASSIFICATION	9.061900422506978E-5	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999688070607408	WITHOUT_CLASSIFICATION	3.1192939259217856E-5	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999945179274291	WITHOUT_CLASSIFICATION	5.482072570884805E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999123736025037	WITHOUT_CLASSIFICATION	8.762639749635004E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999909380995775	WITHOUT_CLASSIFICATION	9.061900422506978E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999909380995775	WITHOUT_CLASSIFICATION	9.061900422506978E-5	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999632282776949	WITHOUT_CLASSIFICATION	3.677172230512239E-5	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998699347955925	WITHOUT_CLASSIFICATION	1.3006520440747183E-4	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999625218580295	WITHOUT_CLASSIFICATION	3.747814197042638E-5	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999444685436871	WITHOUT_CLASSIFICATION	5.5531456312888585E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999278704006529	WITHOUT_CLASSIFICATION	7.212959934719866E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999278704006529	WITHOUT_CLASSIFICATION	7.212959934719866E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999253498672933	WITHOUT_CLASSIFICATION	7.465013270678471E-5	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999310046420975	WITHOUT_CLASSIFICATION	6.899535790245594E-5	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999689872117802	WITHOUT_CLASSIFICATION	3.1012788219861316E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999554098082563	WITHOUT_CLASSIFICATION	4.459019174364777E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999554098082563	WITHOUT_CLASSIFICATION	4.459019174364777E-5	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999352781857889	WITHOUT_CLASSIFICATION	6.472181421114828E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999158512709116	WITHOUT_CLASSIFICATION	8.41487290883487E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999457232340584	WITHOUT_CLASSIFICATION	5.427676594161045E-5	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999964180432016	WITHOUT_CLASSIFICATION	3.581956798353225E-6	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999655567761251	WITHOUT_CLASSIFICATION	3.444322387494238E-5	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999927019539614	WITHOUT_CLASSIFICATION	7.298046038668449E-6	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.999863010191458	WITHOUT_CLASSIFICATION	1.3698980854213977E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.999884691192351	WITHOUT_CLASSIFICATION	1.1530880764892425E-4	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9998886161764807	WITHOUT_CLASSIFICATION	1.1138382351917832E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999457232340584	WITHOUT_CLASSIFICATION	5.427676594161045E-5	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9998435888905494	WITHOUT_CLASSIFICATION	1.5641110945056422E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999801236412966	WITHOUT_CLASSIFICATION	1.987635870345387E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999801236412966	WITHOUT_CLASSIFICATION	1.987635870345387E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999923003566655	WITHOUT_CLASSIFICATION	7.699643334396113E-6	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999346729347948	WITHOUT_CLASSIFICATION	6.532706520528798E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999692892669917	WITHOUT_CLASSIFICATION	3.071073300832197E-5	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999764459667152	WITHOUT_CLASSIFICATION	2.3554033284757005E-5	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9998783688731114	WITHOUT_CLASSIFICATION	1.2163112688863796E-4	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9998435709306276	WITHOUT_CLASSIFICATION	1.5642906937233568E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9998708538022546	WITHOUT_CLASSIFICATION	1.2914619774551404E-4	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999347465968752	WITHOUT_CLASSIFICATION	6.525340312478498E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999760267153334	WITHOUT_CLASSIFICATION	2.3973284666569243E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999760267153334	WITHOUT_CLASSIFICATION	2.3973284666569243E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99988332400697	WITHOUT_CLASSIFICATION	1.1667599303003373E-4	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998319977177542	WITHOUT_CLASSIFICATION	1.6800228224582051E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999684614621315	WITHOUT_CLASSIFICATION	3.1538537868599996E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999381374956421	WITHOUT_CLASSIFICATION	6.186250435789616E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9989708896509724	WITHOUT_CLASSIFICATION	0.0010291103490276626	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.999883837254615	WITHOUT_CLASSIFICATION	1.161627453849655E-4	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999202477088668	WITHOUT_CLASSIFICATION	7.975229113323353E-5	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9998697134729742	WITHOUT_CLASSIFICATION	1.3028652702580594E-4	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9998954726606939	WITHOUT_CLASSIFICATION	1.045273393062161E-4	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999833040057909	WITHOUT_CLASSIFICATION	1.6695994209109078E-5	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9967517372097284	WITHOUT_CLASSIFICATION	0.0032482627902714807	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9963765599737068	WITHOUT_CLASSIFICATION	0.003623440026293161	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999233184119893	WITHOUT_CLASSIFICATION	7.668158801068922E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999629225741159	WITHOUT_CLASSIFICATION	3.707742588415921E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.999934570038248	WITHOUT_CLASSIFICATION	6.542996175201117E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.999934570038248	WITHOUT_CLASSIFICATION	6.542996175201117E-5	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999042028752968	WITHOUT_CLASSIFICATION	9.579712470325458E-5	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999109677600101	WITHOUT_CLASSIFICATION	8.903223998992997E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999831211685664	WITHOUT_CLASSIFICATION	1.6878831433675922E-5	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9998732092303736	WITHOUT_CLASSIFICATION	1.2679076962640815E-4	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999142413793842	WITHOUT_CLASSIFICATION	8.575862061583649E-5	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999585645857312	WITHOUT_CLASSIFICATION	4.143541426877389E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999888291131328	WITHOUT_CLASSIFICATION	1.1170886867197113E-4	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999433880713171	WITHOUT_CLASSIFICATION	5.661192868286608E-5	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999235052951352	WITHOUT_CLASSIFICATION	7.649470486475194E-5	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999174362945148	WITHOUT_CLASSIFICATION	8.256370548520974E-5	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999711000461036	WITHOUT_CLASSIFICATION	2.8899953896468574E-5	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999057254616714	WITHOUT_CLASSIFICATION	9.42745383284761E-5	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999742104814914	WITHOUT_CLASSIFICATION	2.5789518508520062E-5	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999487082297749	WITHOUT_CLASSIFICATION	5.1291770225231096E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.999888291131328	WITHOUT_CLASSIFICATION	1.1170886867197113E-4	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999362357865437	WITHOUT_CLASSIFICATION	6.376421345630769E-5	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999678174133	WITHOUT_CLASSIFICATION	3.2182586700046094E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9989708896509724	WITHOUT_CLASSIFICATION	0.0010291103490276626	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9989708896509724	WITHOUT_CLASSIFICATION	0.0010291103490276626	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9963765599737068	WITHOUT_CLASSIFICATION	0.003623440026293161	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.999934570038248	WITHOUT_CLASSIFICATION	6.542996175201117E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999057254616714	WITHOUT_CLASSIFICATION	9.42745383284761E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999432530819552	WITHOUT_CLASSIFICATION	5.674691804481559E-5	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999020905688181	WITHOUT_CLASSIFICATION	9.790943118201108E-5	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.999941823145984	WITHOUT_CLASSIFICATION	5.817685401607566E-5	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999257005651285	WITHOUT_CLASSIFICATION	7.429943487146584E-5	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.99997078785405	WITHOUT_CLASSIFICATION	2.921214595003225E-5	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9998760404361364	WITHOUT_CLASSIFICATION	1.2395956386356167E-4	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9963495897454974	WITHOUT_CLASSIFICATION	0.003650410254502721	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9998789794010262	WITHOUT_CLASSIFICATION	1.2102059897367563E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998912894902425	WITHOUT_CLASSIFICATION	1.0871050975735375E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998912894902425	WITHOUT_CLASSIFICATION	1.0871050975735375E-4	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999654889944295	WITHOUT_CLASSIFICATION	3.451100557049567E-5	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999848822647702	WITHOUT_CLASSIFICATION	1.51177352296456E-5	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999224497353616	WITHOUT_CLASSIFICATION	7.755026463842127E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9998862343173728	WITHOUT_CLASSIFICATION	1.1376568262719729E-4	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.99994190312588	WITHOUT_CLASSIFICATION	5.809687411995206E-5	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999539105811849	WITHOUT_CLASSIFICATION	4.608941881512255E-5	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999232578987401	WITHOUT_CLASSIFICATION	7.674210125982724E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999801453690051	WITHOUT_CLASSIFICATION	1.9854630994843073E-5	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9998460902394596	WITHOUT_CLASSIFICATION	1.5390976054048623E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.999865569629085	WITHOUT_CLASSIFICATION	1.3443037091496457E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.999865569629085	WITHOUT_CLASSIFICATION	1.3443037091496457E-4	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9998365134228459	WITHOUT_CLASSIFICATION	1.6348657715418972E-4	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999495691596693	WITHOUT_CLASSIFICATION	5.0430840330805195E-5	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9998365134228459	WITHOUT_CLASSIFICATION	1.6348657715418972E-4	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999767813991293	WITHOUT_CLASSIFICATION	2.3218600870725626E-5	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9965026515853428	WITHOUT_CLASSIFICATION	0.003497348414657183	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9989708896509724	WITHOUT_CLASSIFICATION	0.0010291103490276626	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9963765599737068	WITHOUT_CLASSIFICATION	0.003623440026293161	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999629225741159	WITHOUT_CLASSIFICATION	3.707742588415921E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999057254616714	WITHOUT_CLASSIFICATION	9.42745383284761E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999057254616714	WITHOUT_CLASSIFICATION	9.42745383284761E-5	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999810134868587	WITHOUT_CLASSIFICATION	1.8986513141231794E-5	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999810134868587	WITHOUT_CLASSIFICATION	1.8986513141231794E-5	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9998347390173479	WITHOUT_CLASSIFICATION	1.6526098265204583E-4	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9998536106583042	WITHOUT_CLASSIFICATION	1.4638934169566677E-4	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999592170687653	WITHOUT_CLASSIFICATION	4.078293123464846E-5	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9998736091936435	WITHOUT_CLASSIFICATION	1.263908063564849E-4	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999719787067866	WITHOUT_CLASSIFICATION	2.802129321332507E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999776755092685	WITHOUT_CLASSIFICATION	2.2324490731494023E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999893931823511	WITHOUT_CLASSIFICATION	1.0606817648889698E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999893931823511	WITHOUT_CLASSIFICATION	1.0606817648889698E-4	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9996389834431122	WITHOUT_CLASSIFICATION	3.610165568878064E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999036150785233	WITHOUT_CLASSIFICATION	9.638492147671023E-5	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9968671933650549	WITHOUT_CLASSIFICATION	0.003132806634944976	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9963857953403693	WITHOUT_CLASSIFICATION	0.0036142046596308207	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9975132698735919	WITHOUT_CLASSIFICATION	0.0024867301264081664	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.997121431801746	WITHOUT_CLASSIFICATION	0.002878568198253939	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9964241093836252	WITHOUT_CLASSIFICATION	0.0035758906163748266	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9964241093836252	WITHOUT_CLASSIFICATION	0.0035758906163748266	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9965324740177322	WITHOUT_CLASSIFICATION	0.003467525982267845	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9965324740177322	WITHOUT_CLASSIFICATION	0.003467525982267845	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9998446108827589	WITHOUT_CLASSIFICATION	1.5538911724114922E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9998446108827589	WITHOUT_CLASSIFICATION	1.5538911724114922E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998892426616798	WITHOUT_CLASSIFICATION	1.1075733832026384E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998892426616798	WITHOUT_CLASSIFICATION	1.1075733832026384E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999893931823511	WITHOUT_CLASSIFICATION	1.0606817648889698E-4	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.997121431801746	WITHOUT_CLASSIFICATION	0.002878568198253939	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9964241093836252	WITHOUT_CLASSIFICATION	0.0035758906163748266	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9964241093836252	WITHOUT_CLASSIFICATION	0.0035758906163748266	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9965324740177322	WITHOUT_CLASSIFICATION	0.003467525982267845	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9998446108827589	WITHOUT_CLASSIFICATION	1.5538911724114922E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9998446108827589	WITHOUT_CLASSIFICATION	1.5538911724114922E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998892426616798	WITHOUT_CLASSIFICATION	1.1075733832026384E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999331496128765	WITHOUT_CLASSIFICATION	6.685038712347709E-5	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9998527992916207	WITHOUT_CLASSIFICATION	1.4720070837932755E-4	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9998696602356194	WITHOUT_CLASSIFICATION	1.3033976438052647E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999881666287422	WITHOUT_CLASSIFICATION	1.183337125772319E-5	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9998860573800917	WITHOUT_CLASSIFICATION	1.1394261990828643E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9963735876626817	WITHOUT_CLASSIFICATION	0.0036264123373184283	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9998597744933753	WITHOUT_CLASSIFICATION	1.4022550662477415E-4	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999704781798522	WITHOUT_CLASSIFICATION	2.952182014783933E-5	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999708662594079	WITHOUT_CLASSIFICATION	2.913374059211278E-5	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999851844765612	WITHOUT_CLASSIFICATION	1.4815523438771756E-5	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999146987636324	WITHOUT_CLASSIFICATION	8.530123636755547E-5	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999345701279129	WITHOUT_CLASSIFICATION	6.542987208713173E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998906187261515	WITHOUT_CLASSIFICATION	1.0938127384846962E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9963735876626817	WITHOUT_CLASSIFICATION	0.0036264123373184283	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999598789630001	WITHOUT_CLASSIFICATION	4.012103699995076E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999821585520842	WITHOUT_CLASSIFICATION	1.7841447915758016E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999821585520842	WITHOUT_CLASSIFICATION	1.7841447915758016E-5	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999781975553326	WITHOUT_CLASSIFICATION	2.1802444667423904E-5	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999487971317998	WITHOUT_CLASSIFICATION	5.1202868200109945E-5	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.999948243830673	WITHOUT_CLASSIFICATION	5.175616932692198E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9998941034910479	WITHOUT_CLASSIFICATION	1.0589650895214921E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9998941034910479	WITHOUT_CLASSIFICATION	1.0589650895214921E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999866269961879	WITHOUT_CLASSIFICATION	1.3373003812094582E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999867038459622	WITHOUT_CLASSIFICATION	1.3296154037711334E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999867038459622	WITHOUT_CLASSIFICATION	1.3296154037711334E-5	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999657255532459	WITHOUT_CLASSIFICATION	3.42744467540411E-5	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999551861000276	WITHOUT_CLASSIFICATION	4.481389997239506E-5	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999416735162735	WITHOUT_CLASSIFICATION	5.832648372656308E-5	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.999844137862545	WITHOUT_CLASSIFICATION	1.5586213745493268E-4	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9964154704660193	WITHOUT_CLASSIFICATION	0.0035845295339806474	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9964396358804821	WITHOUT_CLASSIFICATION	0.003560364119517952	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9886967436208655	WITHOUT_CLASSIFICATION	0.011303256379134595	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9998338038887169	WITHOUT_CLASSIFICATION	1.661961112832404E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999430564721032	WITHOUT_CLASSIFICATION	5.6943527896681175E-5	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999542041994326	WITHOUT_CLASSIFICATION	4.5795800567444684E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999869818588148	WITHOUT_CLASSIFICATION	1.3018141185184562E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9998888762981607	WITHOUT_CLASSIFICATION	1.1112370183939139E-4	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9998968214456713	WITHOUT_CLASSIFICATION	1.0317855432866464E-4	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9998448747675753	WITHOUT_CLASSIFICATION	1.551252324247146E-4	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9964503263376316	WITHOUT_CLASSIFICATION	0.003549673662368348	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.999844518421216	WITHOUT_CLASSIFICATION	1.554815787839432E-4	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9998311604163063	WITHOUT_CLASSIFICATION	1.688395836937266E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998437439508392	WITHOUT_CLASSIFICATION	1.5625604916086832E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999457145626407	WITHOUT_CLASSIFICATION	5.4285437359217635E-5	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9998771074707563	WITHOUT_CLASSIFICATION	1.2289252924361873E-4	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9998865684067703	WITHOUT_CLASSIFICATION	1.1343159322974777E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9963454740980985	WITHOUT_CLASSIFICATION	0.0036545259019014004	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9964396358804821	WITHOUT_CLASSIFICATION	0.003560364119517952	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998437439508392	WITHOUT_CLASSIFICATION	1.5625604916086832E-4	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9998771074707563	WITHOUT_CLASSIFICATION	1.2289252924361873E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9963454740980985	WITHOUT_CLASSIFICATION	0.0036545259019014004	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999058532031042	WITHOUT_CLASSIFICATION	9.414679689584002E-5	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9998986172182127	WITHOUT_CLASSIFICATION	1.0138278178724341E-4	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999864034438322	WITHOUT_CLASSIFICATION	1.359655616781175E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9998525052313703	WITHOUT_CLASSIFICATION	1.474947686298277E-4	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999210345847439	WITHOUT_CLASSIFICATION	7.89654152561587E-5	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9998705205737314	WITHOUT_CLASSIFICATION	1.2947942626861456E-4	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999857112994432	WITHOUT_CLASSIFICATION	1.4288700556670643E-5	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9998887409680101	WITHOUT_CLASSIFICATION	1.1125903198994127E-4	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999107027837774	WITHOUT_CLASSIFICATION	8.929721622273924E-5	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999607358058176	WITHOUT_CLASSIFICATION	3.9264194182334724E-5	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999190213285141	WITHOUT_CLASSIFICATION	8.097867148596755E-5	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.99994476763081	WITHOUT_CLASSIFICATION	5.5232369190081713E-5	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999688396078357	WITHOUT_CLASSIFICATION	3.116039216435016E-5	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9998441439511466	WITHOUT_CLASSIFICATION	1.5585604885341982E-4	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.997803844823737	WITHOUT_CLASSIFICATION	0.0021961551762629964	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999293615059437	WITHOUT_CLASSIFICATION	7.063849405633662E-5	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998437439508392	WITHOUT_CLASSIFICATION	1.5625604916086832E-4	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998818901116159	WITHOUT_CLASSIFICATION	1.1810988838408762E-4	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999129292406174	WITHOUT_CLASSIFICATION	8.707075938263641E-5	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999371163459824	WITHOUT_CLASSIFICATION	6.28836540176226E-5	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999554813142231	WITHOUT_CLASSIFICATION	4.451868577695496E-5	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9998727833176447	WITHOUT_CLASSIFICATION	1.2721668235524241E-4	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999159405985879	WITHOUT_CLASSIFICATION	8.405940141207463E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999852127855798	WITHOUT_CLASSIFICATION	1.4787214420122082E-5	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999699007426484	WITHOUT_CLASSIFICATION	3.0099257351633064E-5	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9998486570493205	WITHOUT_CLASSIFICATION	1.5134295067961977E-4	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998434349844377	WITHOUT_CLASSIFICATION	1.5656501556219506E-4	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998311604163063	WITHOUT_CLASSIFICATION	1.688395836937266E-4	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.998037835699157	WITHOUT_CLASSIFICATION	0.001962164300842939	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999253262043015	WITHOUT_CLASSIFICATION	7.467379569846128E-5	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999482298755787	WITHOUT_CLASSIFICATION	5.177012442128318E-5	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999224842302028	WITHOUT_CLASSIFICATION	7.751576979710832E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9998544137880735	WITHOUT_CLASSIFICATION	1.4558621192643765E-4	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9998403519296275	WITHOUT_CLASSIFICATION	1.596480703724606E-4	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9998925744653162	WITHOUT_CLASSIFICATION	1.0742553468372013E-4	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9998291050919206	WITHOUT_CLASSIFICATION	1.7089490807938352E-4	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999997202626945	WITHOUT_CLASSIFICATION	2.7973730550213066E-6	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999624669377968	WITHOUT_CLASSIFICATION	3.753306220332454E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999403607765894	WITHOUT_CLASSIFICATION	5.963922341053132E-5	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9998680081429436	WITHOUT_CLASSIFICATION	1.3199185705629882E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998774204665423	WITHOUT_CLASSIFICATION	1.2257953345769416E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998774204665423	WITHOUT_CLASSIFICATION	1.2257953345769416E-4	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998450985638855	WITHOUT_CLASSIFICATION	1.5490143611452968E-4	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9998880424692863	WITHOUT_CLASSIFICATION	1.1195753071367282E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999559072739567	WITHOUT_CLASSIFICATION	4.409272604329334E-5	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999254730259268	WITHOUT_CLASSIFICATION	7.452697407321844E-5	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999375375518903	WITHOUT_CLASSIFICATION	6.246244810974647E-5	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999223895354007	WITHOUT_CLASSIFICATION	7.761046459931805E-5	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998595007330033	WITHOUT_CLASSIFICATION	1.4049926699659542E-4	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999813690324048	WITHOUT_CLASSIFICATION	1.8630967595322448E-5	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.999937422896079	WITHOUT_CLASSIFICATION	6.257710392103375E-5	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998515622204203	WITHOUT_CLASSIFICATION	1.4843777957976287E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9998626742032919	WITHOUT_CLASSIFICATION	1.373257967080311E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999081110734287	WITHOUT_CLASSIFICATION	9.188892657132314E-5	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999601912132694	WITHOUT_CLASSIFICATION	3.9808786730511584E-5	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999248406431328	WITHOUT_CLASSIFICATION	7.515935686719606E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998929007101567	WITHOUT_CLASSIFICATION	1.0709928984327464E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998729741139935	WITHOUT_CLASSIFICATION	1.2702588600650128E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999858744397832	WITHOUT_CLASSIFICATION	1.4125560216800066E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999654008601726	WITHOUT_CLASSIFICATION	3.459913982739038E-5	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999308029986254	WITHOUT_CLASSIFICATION	6.919700137460365E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999141078860789	WITHOUT_CLASSIFICATION	8.589211392106476E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9971139192481081	WITHOUT_CLASSIFICATION	0.0028860807518919533	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9971139192481081	WITHOUT_CLASSIFICATION	0.0028860807518919533	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9998493100292867	WITHOUT_CLASSIFICATION	1.506899707134128E-4	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9998493100292867	WITHOUT_CLASSIFICATION	1.506899707134128E-4	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999403607765894	WITHOUT_CLASSIFICATION	5.963922341053132E-5	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9998744783420753	WITHOUT_CLASSIFICATION	1.2552165792469085E-4	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999460243292461	WITHOUT_CLASSIFICATION	5.397567075398884E-5	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998723931628208	WITHOUT_CLASSIFICATION	1.2760683717918088E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99988332400697	WITHOUT_CLASSIFICATION	1.1667599303003373E-4	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999460243292461	WITHOUT_CLASSIFICATION	5.397567075398884E-5	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998723931628208	WITHOUT_CLASSIFICATION	1.2760683717918088E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999066433169823	WITHOUT_CLASSIFICATION	9.3356683017642E-5	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999434944256544	WITHOUT_CLASSIFICATION	5.650557434559287E-5	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999759858047388	WITHOUT_CLASSIFICATION	2.4014195261158202E-5	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999615811599377	WITHOUT_CLASSIFICATION	3.841884006219619E-5	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999800891626344	WITHOUT_CLASSIFICATION	1.991083736571183E-5	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999766292350482	WITHOUT_CLASSIFICATION	2.3370764951907293E-5	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9998784521644075	WITHOUT_CLASSIFICATION	1.215478355924832E-4	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9998713966477627	WITHOUT_CLASSIFICATION	1.2860335223732625E-4	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999777481771436	WITHOUT_CLASSIFICATION	2.2251822856521735E-5	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999838223503942	WITHOUT_CLASSIFICATION	1.6177649605845807E-5	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999777174189907	WITHOUT_CLASSIFICATION	2.228258100934956E-5	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999684660349406	WITHOUT_CLASSIFICATION	3.153396505938703E-5	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999005813327061	WITHOUT_CLASSIFICATION	9.941866729391803E-5	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9998379341032353	WITHOUT_CLASSIFICATION	1.6206589676468977E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99988332400697	WITHOUT_CLASSIFICATION	1.1667599303003373E-4	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9998686149291686	WITHOUT_CLASSIFICATION	1.313850708315126E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998747157639206	WITHOUT_CLASSIFICATION	1.2528423607930327E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998747157639206	WITHOUT_CLASSIFICATION	1.2528423607930327E-4	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999528089336331	WITHOUT_CLASSIFICATION	4.7191066366796366E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999066433169823	WITHOUT_CLASSIFICATION	9.3356683017642E-5	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999478256520965	WITHOUT_CLASSIFICATION	5.2174347903525425E-5	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999942095621016	WITHOUT_CLASSIFICATION	5.7904378984036834E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9966851496786528	WITHOUT_CLASSIFICATION	0.003314850321347159	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999564700029573	WITHOUT_CLASSIFICATION	4.352999704271175E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999850010033383	WITHOUT_CLASSIFICATION	1.4998996661684915E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999066433169823	WITHOUT_CLASSIFICATION	9.3356683017642E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999564700029573	WITHOUT_CLASSIFICATION	4.352999704271175E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999850010033383	WITHOUT_CLASSIFICATION	1.4998996661684915E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.999936131752759	WITHOUT_CLASSIFICATION	6.386824724106479E-5	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998471088464256	WITHOUT_CLASSIFICATION	1.5289115357443789E-4	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999914556785674	WITHOUT_CLASSIFICATION	8.544321432606348E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999066433169823	WITHOUT_CLASSIFICATION	9.3356683017642E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999066433169823	WITHOUT_CLASSIFICATION	9.3356683017642E-5	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9998790979175951	WITHOUT_CLASSIFICATION	1.2090208240495884E-4	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.999875055232714	WITHOUT_CLASSIFICATION	1.2494476728597652E-4	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999048230106575	WITHOUT_CLASSIFICATION	9.51769893424578E-5	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999454925951688	WITHOUT_CLASSIFICATION	5.4507404831099895E-5	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999110153802383	WITHOUT_CLASSIFICATION	8.898461976166083E-5	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999462251043372	WITHOUT_CLASSIFICATION	5.3774895662814454E-5	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999416793290452	WITHOUT_CLASSIFICATION	5.832067095475978E-5	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999343438365792	WITHOUT_CLASSIFICATION	6.565616342087382E-5	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999554925777973	WITHOUT_CLASSIFICATION	4.450742220261362E-5	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9998789258111384	WITHOUT_CLASSIFICATION	1.2107418886170049E-4	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999781928978174	WITHOUT_CLASSIFICATION	2.180710218256966E-5	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999229100965289	WITHOUT_CLASSIFICATION	7.708990347114339E-5	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999969493880875	WITHOUT_CLASSIFICATION	3.050611912499728E-5	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9998565242864328	WITHOUT_CLASSIFICATION	1.4347571356727436E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999339995782479	WITHOUT_CLASSIFICATION	6.600042175212912E-5	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999841282987328	WITHOUT_CLASSIFICATION	1.5871701267095643E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999166455071975	WITHOUT_CLASSIFICATION	8.335449280245866E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999420609969831	WITHOUT_CLASSIFICATION	5.7939003016965125E-5	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9998933369260341	WITHOUT_CLASSIFICATION	1.0666307396589328E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999157081114616	WITHOUT_CLASSIFICATION	8.429188853839282E-5	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998225174665083	WITHOUT_CLASSIFICATION	1.7748253349170296E-4	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.999875562550274	WITHOUT_CLASSIFICATION	1.2443744972609241E-4	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.999875562550274	WITHOUT_CLASSIFICATION	1.2443744972609241E-4	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999166455071975	WITHOUT_CLASSIFICATION	8.335449280245866E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999280734375904	WITHOUT_CLASSIFICATION	7.19265624095583E-5	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999618270506401	WITHOUT_CLASSIFICATION	3.8172949359913606E-5	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9998782924059443	WITHOUT_CLASSIFICATION	1.2170759405582702E-4	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999156130442375	WITHOUT_CLASSIFICATION	8.43869557624854E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999808637233946	WITHOUT_CLASSIFICATION	1.9136276605362985E-5	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999771332991927	WITHOUT_CLASSIFICATION	2.286670080731408E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999722745532964	WITHOUT_CLASSIFICATION	2.77254467035446E-5	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998348093436078	WITHOUT_CLASSIFICATION	1.651906563921298E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999935447963575	WITHOUT_CLASSIFICATION	6.455203642518067E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999884261716267	WITHOUT_CLASSIFICATION	1.1573828373303172E-4	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9998541059434295	WITHOUT_CLASSIFICATION	1.4589405657051586E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999203657835077	WITHOUT_CLASSIFICATION	7.963421649233253E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999649742079884	WITHOUT_CLASSIFICATION	3.502579201167328E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998625237673384	WITHOUT_CLASSIFICATION	1.3747623266168726E-4	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999854824310994	WITHOUT_CLASSIFICATION	1.4517568900571893E-5	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999740518292205	WITHOUT_CLASSIFICATION	2.5948170779497287E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999062473752783	WITHOUT_CLASSIFICATION	9.37526247215999E-5	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999763563879018	WITHOUT_CLASSIFICATION	2.364361209821195E-5	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998461378300401	WITHOUT_CLASSIFICATION	1.5386216995992585E-4	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999938088682252	WITHOUT_CLASSIFICATION	6.191131774806264E-5	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999685103160947	WITHOUT_CLASSIFICATION	3.1489683905207846E-5	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999111984011821	WITHOUT_CLASSIFICATION	8.88015988178592E-5	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999777039357713	WITHOUT_CLASSIFICATION	2.2296064228661548E-5	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996385377656647	WITHOUT_CLASSIFICATION	3.614622343353598E-4	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996950657342166	WITHOUT_CLASSIFICATION	3.0493426578329834E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997634331449576	WITHOUT_CLASSIFICATION	2.3656685504232363E-4	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999039794035562	WITHOUT_CLASSIFICATION	9.602059644376599E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997299928938067	WITHOUT_CLASSIFICATION	2.7000710619331955E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997891377363991	WITHOUT_CLASSIFICATION	2.1086226360082582E-4	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997274063239722	WITHOUT_CLASSIFICATION	2.725936760278545E-4	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999767224022322	WITHOUT_CLASSIFICATION	2.3277597767813044E-4	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999078119799184	WITHOUT_CLASSIFICATION	9.218802008164211E-5	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9998857066986239	WITHOUT_CLASSIFICATION	1.1429330137609961E-4	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998374591086553	WITHOUT_CLASSIFICATION	1.6254089134474882E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998522285458264	WITHOUT_CLASSIFICATION	1.4777145417353983E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998403215260578	WITHOUT_CLASSIFICATION	1.5967847394227373E-4	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998583209309847	WITHOUT_CLASSIFICATION	1.4167906901535124E-4	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998518034711079	WITHOUT_CLASSIFICATION	1.4819652889207598E-4	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997300071022555	WITHOUT_CLASSIFICATION	2.6999289774448713E-4	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997790630770859	WITHOUT_CLASSIFICATION	2.2093692291406635E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997273503282073	WITHOUT_CLASSIFICATION	2.7264967179276164E-4	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999141933251025	WITHOUT_CLASSIFICATION	8.580667489766493E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999176298766594	WITHOUT_CLASSIFICATION	8.237012334058499E-5	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999480785253868	WITHOUT_CLASSIFICATION	5.192147461318504E-5	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999096255024783	WITHOUT_CLASSIFICATION	9.0374497521648E-5	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999762791285294	WITHOUT_CLASSIFICATION	2.3720871470632074E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998627371294904	WITHOUT_CLASSIFICATION	1.3726287050957054E-4	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9998467040459353	WITHOUT_CLASSIFICATION	1.5329595406460628E-4	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.999928708844661	WITHOUT_CLASSIFICATION	7.129115533898253E-5	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.999915407447816	WITHOUT_CLASSIFICATION	8.459255218400279E-5	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9998519806926762	WITHOUT_CLASSIFICATION	1.4801930732376696E-4	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9998472538993247	WITHOUT_CLASSIFICATION	1.5274610067531286E-4	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999841509501214	WITHOUT_CLASSIFICATION	1.584904987860421E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999884261716267	WITHOUT_CLASSIFICATION	1.1573828373303172E-4	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998323792874549	WITHOUT_CLASSIFICATION	1.6762071254499124E-4	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999732799318687	WITHOUT_CLASSIFICATION	2.6720068131212503E-5	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999083586289678	WITHOUT_CLASSIFICATION	9.16413710321299E-5	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9998986010174175	WITHOUT_CLASSIFICATION	1.0139898258248405E-4	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999915742582035	WITHOUT_CLASSIFICATION	8.42574179650083E-6	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998911626137613	WITHOUT_CLASSIFICATION	1.0883738623863735E-4	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999396617861095	WITHOUT_CLASSIFICATION	6.033821389059026E-5	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999896901252416	WITHOUT_CLASSIFICATION	1.030987475840337E-4	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998883619586816	WITHOUT_CLASSIFICATION	1.1163804131846122E-4	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9985864308556496	WITHOUT_CLASSIFICATION	0.0014135691443503966	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999052226671891	WITHOUT_CLASSIFICATION	9.477733281083236E-5	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.999934031071805	WITHOUT_CLASSIFICATION	6.596892819502105E-5	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999373124561727	WITHOUT_CLASSIFICATION	6.26875438272884E-5	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998848211648357	WITHOUT_CLASSIFICATION	1.1517883516433268E-4	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999481315584025	WITHOUT_CLASSIFICATION	5.186844159750791E-5	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.999934195060163	WITHOUT_CLASSIFICATION	6.580493983697468E-5	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999127772280669	WITHOUT_CLASSIFICATION	8.72227719330097E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999371471466656	WITHOUT_CLASSIFICATION	6.28528533344169E-5	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9998767140108709	WITHOUT_CLASSIFICATION	1.2328598912922427E-4	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9994202453760463	WITHOUT_CLASSIFICATION	5.797546239537656E-4	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999429275432685	WITHOUT_CLASSIFICATION	5.7072456731510615E-5	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999047207038873	WITHOUT_CLASSIFICATION	9.5279296112721E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999884261716267	WITHOUT_CLASSIFICATION	1.1573828373303172E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998627371294904	WITHOUT_CLASSIFICATION	1.3726287050957054E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.999950095386788	WITHOUT_CLASSIFICATION	4.9904613211920276E-5	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999771759102847	WITHOUT_CLASSIFICATION	2.282408971533681E-5	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9998408484529309	WITHOUT_CLASSIFICATION	1.591515470692141E-4	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999096255024783	WITHOUT_CLASSIFICATION	9.0374497521648E-5	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998897202132427	WITHOUT_CLASSIFICATION	1.1027978675732818E-4	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9998459059643072	WITHOUT_CLASSIFICATION	1.5409403569282298E-4	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.999844861297865	WITHOUT_CLASSIFICATION	1.5513870213509597E-4	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999071104179604	WITHOUT_CLASSIFICATION	9.288958203962068E-5	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999094589484293	WITHOUT_CLASSIFICATION	9.054105157067992E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999163693888311	WITHOUT_CLASSIFICATION	8.363061116881968E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998791718002503	WITHOUT_CLASSIFICATION	1.2082819974974617E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998937701269157	WITHOUT_CLASSIFICATION	1.0622987308432214E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999958910594183	WITHOUT_CLASSIFICATION	4.1089405817023614E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999884261716267	WITHOUT_CLASSIFICATION	1.1573828373303172E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999884261716267	WITHOUT_CLASSIFICATION	1.1573828373303172E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999210426825043	WITHOUT_CLASSIFICATION	7.895731749573754E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9997623467941941	WITHOUT_CLASSIFICATION	2.3765320580586724E-4	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999030827386021	WITHOUT_CLASSIFICATION	9.691726139790273E-5	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9998737327226629	WITHOUT_CLASSIFICATION	1.2626727733709307E-4	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999140888893295	WITHOUT_CLASSIFICATION	8.591111067050901E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999246905386691	WITHOUT_CLASSIFICATION	7.530946133092244E-5	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999287665209946	WITHOUT_CLASSIFICATION	7.123347900542006E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999884261716267	WITHOUT_CLASSIFICATION	1.1573828373303172E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999535554699918	WITHOUT_CLASSIFICATION	4.644453000820374E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999457666722562	WITHOUT_CLASSIFICATION	5.4233327743677664E-5	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999420855755407	WITHOUT_CLASSIFICATION	5.791442445938693E-5	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9998933692869456	WITHOUT_CLASSIFICATION	1.0663071305442417E-4	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9998877789006921	WITHOUT_CLASSIFICATION	1.1222109930788468E-4	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9998916794627272	WITHOUT_CLASSIFICATION	1.0832053727282372E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9998501955508462	WITHOUT_CLASSIFICATION	1.4980444915386085E-4	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998387246002902	WITHOUT_CLASSIFICATION	1.612753997097175E-4	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999127978945893	WITHOUT_CLASSIFICATION	8.720210541070303E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998627371294904	WITHOUT_CLASSIFICATION	1.3726287050957054E-4	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999590577252337	WITHOUT_CLASSIFICATION	4.094227476631136E-5	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999937564974197	WITHOUT_CLASSIFICATION	6.243502580279837E-6	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999762716193658	WITHOUT_CLASSIFICATION	2.372838063429964E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998627371294904	WITHOUT_CLASSIFICATION	1.3726287050957054E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999105648682128	WITHOUT_CLASSIFICATION	8.943513178718177E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999535554699918	WITHOUT_CLASSIFICATION	4.644453000820374E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.999874317844336	WITHOUT_CLASSIFICATION	1.2568215566395558E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999884261716267	WITHOUT_CLASSIFICATION	1.1573828373303172E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.99989720369283	WITHOUT_CLASSIFICATION	1.0279630717008655E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999884261716267	WITHOUT_CLASSIFICATION	1.1573828373303172E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999808241059613	WITHOUT_CLASSIFICATION	1.9175894038627512E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999163693888311	WITHOUT_CLASSIFICATION	8.363061116881968E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998791718002503	WITHOUT_CLASSIFICATION	1.2082819974974617E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998937701269157	WITHOUT_CLASSIFICATION	1.0622987308432214E-4	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999870089526536	WITHOUT_CLASSIFICATION	1.2991047346358205E-5	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999408759806715	WITHOUT_CLASSIFICATION	5.912401932839088E-5	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999696705279149	WITHOUT_CLASSIFICATION	3.0329472085057966E-5	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.999977296925584	WITHOUT_CLASSIFICATION	2.2703074415923032E-5	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999764795263206	WITHOUT_CLASSIFICATION	2.3520473679418882E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999884261716267	WITHOUT_CLASSIFICATION	1.1573828373303172E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998627371294904	WITHOUT_CLASSIFICATION	1.3726287050957054E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999958910594183	WITHOUT_CLASSIFICATION	4.1089405817023614E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999210426825043	WITHOUT_CLASSIFICATION	7.895731749573754E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999919744250841	WITHOUT_CLASSIFICATION	8.02557491590673E-5	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999212508008768	WITHOUT_CLASSIFICATION	7.874919912327744E-5	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999463906632714	WITHOUT_CLASSIFICATION	5.3609336728568986E-5	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999445274554375	WITHOUT_CLASSIFICATION	5.547254456256365E-5	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999885575336169	WITHOUT_CLASSIFICATION	1.144246638310086E-4	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999239401545222	WITHOUT_CLASSIFICATION	7.60598454777681E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997273503282073	WITHOUT_CLASSIFICATION	2.7264967179276164E-4	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999628117299152	WITHOUT_CLASSIFICATION	3.718827008475876E-5	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998552763026991	WITHOUT_CLASSIFICATION	1.4472369730094648E-4	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9998160003191204	WITHOUT_CLASSIFICATION	1.8399968087957214E-4	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999715360410557	WITHOUT_CLASSIFICATION	2.8463958944262408E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9998587384869249	WITHOUT_CLASSIFICATION	1.412615130751683E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997299928938067	WITHOUT_CLASSIFICATION	2.7000710619331955E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997891377363991	WITHOUT_CLASSIFICATION	2.1086226360082582E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998522285458264	WITHOUT_CLASSIFICATION	1.4777145417353983E-4	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9998587384869249	WITHOUT_CLASSIFICATION	1.412615130751683E-4	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999591239594936	WITHOUT_CLASSIFICATION	4.0876040506362485E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9998784633247791	WITHOUT_CLASSIFICATION	1.2153667522091687E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997515279944135	WITHOUT_CLASSIFICATION	2.4847200558656546E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997277709594309	WITHOUT_CLASSIFICATION	2.722290405691053E-4	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999536761614992	WITHOUT_CLASSIFICATION	4.632383850082483E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999884261716267	WITHOUT_CLASSIFICATION	1.1573828373303172E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999884261716267	WITHOUT_CLASSIFICATION	1.1573828373303172E-4	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998514610801544	WITHOUT_CLASSIFICATION	1.4853891984563603E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998403215260578	WITHOUT_CLASSIFICATION	1.5967847394227373E-4	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997300071022555	WITHOUT_CLASSIFICATION	2.6999289774448713E-4	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999371471466656	WITHOUT_CLASSIFICATION	6.28528533344169E-5	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999821309050264	WITHOUT_CLASSIFICATION	1.7869094973617174E-5	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999611164110476	WITHOUT_CLASSIFICATION	3.8883588952496635E-5	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999849262710135	WITHOUT_CLASSIFICATION	1.5073728986495144E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999701690330931	WITHOUT_CLASSIFICATION	2.9830966906943886E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999808082771245	WITHOUT_CLASSIFICATION	1.919172287541126E-5	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999217235022775	WITHOUT_CLASSIFICATION	7.82764977224683E-5	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998839516432177	WITHOUT_CLASSIFICATION	1.1604835678228108E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998495449541668	WITHOUT_CLASSIFICATION	1.5045504583324027E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999935447963575	WITHOUT_CLASSIFICATION	6.455203642518067E-6	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9976488189558833	WITHOUT_CLASSIFICATION	0.0023511810441167232	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999682535062033	WITHOUT_CLASSIFICATION	3.174649379668258E-5	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999712641643226	WITHOUT_CLASSIFICATION	2.8735835677330444E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999531793886087	WITHOUT_CLASSIFICATION	4.682061139138688E-5	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9998457189076803	WITHOUT_CLASSIFICATION	1.5428109231975602E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998784188432621	WITHOUT_CLASSIFICATION	1.2158115673799579E-4	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999118222525175	WITHOUT_CLASSIFICATION	8.817774748247924E-5	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977506089136298	WITHOUT_CLASSIFICATION	0.0022493910863702503	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999974359512345	WITHOUT_CLASSIFICATION	2.564048765496275E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9998951739044528	WITHOUT_CLASSIFICATION	1.0482609554725154E-4	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998169583226967	WITHOUT_CLASSIFICATION	1.8304167730338552E-4	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999591059649322	WITHOUT_CLASSIFICATION	4.089403506775828E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999636129115219	WITHOUT_CLASSIFICATION	3.6387088478098406E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999430116948267	WITHOUT_CLASSIFICATION	5.698830517326683E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999698237649236	WITHOUT_CLASSIFICATION	3.0176235076462298E-5	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999028967930501	WITHOUT_CLASSIFICATION	9.710320694987413E-5	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.999901307508143	WITHOUT_CLASSIFICATION	9.869249185696942E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999505459521891	WITHOUT_CLASSIFICATION	4.945404781087676E-5	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999354238902247	WITHOUT_CLASSIFICATION	6.457610977532933E-5	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999948709425148	WITHOUT_CLASSIFICATION	5.129057485200561E-5	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999468058725495	WITHOUT_CLASSIFICATION	5.3194127450563096E-5	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999560813851426	WITHOUT_CLASSIFICATION	4.391861485748097E-5	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.999997985668981	WITHOUT_CLASSIFICATION	2.0143310189199693E-6	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.999969780371892	WITHOUT_CLASSIFICATION	3.021962810796312E-5	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9998858980227203	WITHOUT_CLASSIFICATION	1.1410197727978494E-4	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998586158738112	WITHOUT_CLASSIFICATION	1.4138412618884633E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998586083774258	WITHOUT_CLASSIFICATION	1.41391622574231E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999390625513707	WITHOUT_CLASSIFICATION	6.0937448629340725E-5	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999287251960024	WITHOUT_CLASSIFICATION	7.127480399761358E-5	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998658550811299	WITHOUT_CLASSIFICATION	1.3414491887013105E-4	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9998945766524687	WITHOUT_CLASSIFICATION	1.0542334753135422E-4	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999903615858329	WITHOUT_CLASSIFICATION	9.638414167086706E-6	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999629983540542	WITHOUT_CLASSIFICATION	3.70016459458751E-5	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999869293452384	WITHOUT_CLASSIFICATION	1.3070654761542187E-5	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999818209548269	WITHOUT_CLASSIFICATION	1.8179045173089844E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999804198024811	WITHOUT_CLASSIFICATION	1.958019751888218E-5	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999912905652045	WITHOUT_CLASSIFICATION	8.70943479555636E-6	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999789732565366	WITHOUT_CLASSIFICATION	2.1026743463406075E-5	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999980636867523	WITHOUT_CLASSIFICATION	1.9363132478034987E-6	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999992358526933	WITHOUT_CLASSIFICATION	7.641473067035274E-6	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9997221273059355	WITHOUT_CLASSIFICATION	2.7787269406450316E-4	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999204066073468	WITHOUT_CLASSIFICATION	7.959339265311378E-5	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999302909245665	WITHOUT_CLASSIFICATION	6.970907543345714E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999375368925877	WITHOUT_CLASSIFICATION	6.246310741221996E-5	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999178901454394	WITHOUT_CLASSIFICATION	8.210985456063553E-5	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9998695188973997	WITHOUT_CLASSIFICATION	1.304811026002537E-4	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999247729159226	WITHOUT_CLASSIFICATION	7.52270840773434E-5	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999280630577969	WITHOUT_CLASSIFICATION	7.193694220316134E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9998729650997433	WITHOUT_CLASSIFICATION	1.2703490025667988E-4	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999386091141375	WITHOUT_CLASSIFICATION	6.13908858625379E-5	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999455130397034	WITHOUT_CLASSIFICATION	5.448696029672222E-5	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999355776199857	WITHOUT_CLASSIFICATION	6.442238001432266E-5	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999383707989558	WITHOUT_CLASSIFICATION	6.162920104427292E-5	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999845609310162	WITHOUT_CLASSIFICATION	1.543906898381465E-5	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999994361539696	WITHOUT_CLASSIFICATION	5.638460304011999E-6	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999757184048228	WITHOUT_CLASSIFICATION	2.428159517710116E-5	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9998433282102474	WITHOUT_CLASSIFICATION	1.5667178975265064E-4	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998773209053868	WITHOUT_CLASSIFICATION	1.226790946131373E-4	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9998982768251646	WITHOUT_CLASSIFICATION	1.0172317483537554E-4	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999590322325288	WITHOUT_CLASSIFICATION	4.0967767471081006E-5	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9998855130047044	WITHOUT_CLASSIFICATION	1.1448699529569622E-4	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999015421697786	WITHOUT_CLASSIFICATION	9.845783022143164E-5	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9998444325922191	WITHOUT_CLASSIFICATION	1.5556740778090538E-4	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9998855325957038	WITHOUT_CLASSIFICATION	1.1446740429613563E-4	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9998719646163894	WITHOUT_CLASSIFICATION	1.2803538361070646E-4	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999173720684639	WITHOUT_CLASSIFICATION	8.262793153611054E-5	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999780133566575	WITHOUT_CLASSIFICATION	2.1986643342452444E-5	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999328286173097	WITHOUT_CLASSIFICATION	6.717138269029793E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999049006799259	WITHOUT_CLASSIFICATION	9.50993200741619E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999050235655205	WITHOUT_CLASSIFICATION	9.497643447952296E-5	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999782004506971	WITHOUT_CLASSIFICATION	2.1799549302926034E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999620573322308	WITHOUT_CLASSIFICATION	3.7942667769214046E-5	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999636822785191	WITHOUT_CLASSIFICATION	3.6317721480997346E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999843401119819	WITHOUT_CLASSIFICATION	1.565988801805543E-5	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999501936312879	WITHOUT_CLASSIFICATION	4.980636871206687E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999463569941935	WITHOUT_CLASSIFICATION	5.364300580650177E-5	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999687735384484	WITHOUT_CLASSIFICATION	3.122646155162981E-5	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999983223020605	WITHOUT_CLASSIFICATION	1.6776979394828946E-6	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9998585760808238	WITHOUT_CLASSIFICATION	1.4142391917603553E-4	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.999833620101064	WITHOUT_CLASSIFICATION	1.663798989360842E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998652221250021	WITHOUT_CLASSIFICATION	1.347778749979219E-4	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.99990548132967	WITHOUT_CLASSIFICATION	9.4518670329888E-5	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998411641146646	WITHOUT_CLASSIFICATION	1.5883588533533192E-4	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998730510588727	WITHOUT_CLASSIFICATION	1.269489411272666E-4	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9998857766530693	WITHOUT_CLASSIFICATION	1.1422334693062435E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998830609138694	WITHOUT_CLASSIFICATION	1.1693908613063163E-4	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9998463563926978	WITHOUT_CLASSIFICATION	1.5364360730204727E-4	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9998361209337384	WITHOUT_CLASSIFICATION	1.638790662615801E-4	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999858070859667	WITHOUT_CLASSIFICATION	1.4192914033257565E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9998735822005921	WITHOUT_CLASSIFICATION	1.2641779940790723E-4	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9998556790869024	WITHOUT_CLASSIFICATION	1.4432091309748673E-4	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999921354325261	WITHOUT_CLASSIFICATION	7.864567473906313E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9998735822005921	WITHOUT_CLASSIFICATION	1.2641779940790723E-4	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999240078261011	WITHOUT_CLASSIFICATION	7.599217389888217E-5	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999030459819757	WITHOUT_CLASSIFICATION	9.695401802433682E-5	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9997500619175664	WITHOUT_CLASSIFICATION	2.499380824336342E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9995588508042976	WITHOUT_CLASSIFICATION	4.4114919570230815E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999518990258796	WITHOUT_CLASSIFICATION	4.8100974120532614E-5	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999540025258288	WITHOUT_CLASSIFICATION	4.599747417113339E-5	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998616554158226	WITHOUT_CLASSIFICATION	1.3834458417732052E-4	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999153035450591	WITHOUT_CLASSIFICATION	8.469645494084925E-5	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998982085026067	WITHOUT_CLASSIFICATION	1.0179149739318923E-4	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998619476446757	WITHOUT_CLASSIFICATION	1.380523553243693E-4	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.999964687918338	WITHOUT_CLASSIFICATION	3.5312081662007556E-5	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999714092308164	WITHOUT_CLASSIFICATION	2.859076918356144E-5	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9858381903198641	WITHOUT_CLASSIFICATION	0.014161809680135942	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999957388257064	WITHOUT_CLASSIFICATION	4.261174293684086E-6	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999680723737999	WITHOUT_CLASSIFICATION	3.1927626199989656E-5	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999293402307616	WITHOUT_CLASSIFICATION	7.065976923831048E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998370608301946	WITHOUT_CLASSIFICATION	1.6293916980545322E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998370608301946	WITHOUT_CLASSIFICATION	1.6293916980545322E-4	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999961745068538	WITHOUT_CLASSIFICATION	3.8254931462012756E-5	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9998944632876631	WITHOUT_CLASSIFICATION	1.0553671233690866E-4	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999019036797225	WITHOUT_CLASSIFICATION	9.80963202774453E-5	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998472737443115	WITHOUT_CLASSIFICATION	1.5272625568851924E-4	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999458038570718	WITHOUT_CLASSIFICATION	5.419614292821445E-5	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999512101152018	WITHOUT_CLASSIFICATION	4.878988479823808E-5	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9998843894951969	WITHOUT_CLASSIFICATION	1.1561050480305756E-4	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999976002990014	WITHOUT_CLASSIFICATION	2.399700998601321E-5	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9998971877727799	WITHOUT_CLASSIFICATION	1.0281222722009191E-4	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999598469550315	WITHOUT_CLASSIFICATION	4.0153044968538984E-5	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999700153046187	WITHOUT_CLASSIFICATION	2.998469538126078E-5	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999835935649811	WITHOUT_CLASSIFICATION	1.6406435018836514E-5	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9998698339794218	WITHOUT_CLASSIFICATION	1.3016602057828634E-4	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999329608176571	WITHOUT_CLASSIFICATION	6.703918234286763E-5	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999816711297476	WITHOUT_CLASSIFICATION	1.8328870252418937E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998784188432621	WITHOUT_CLASSIFICATION	1.2158115673799579E-4	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999553103446639	WITHOUT_CLASSIFICATION	4.468965533606719E-5	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999777099086221	WITHOUT_CLASSIFICATION	2.2290091377904326E-5	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999260788779588	WITHOUT_CLASSIFICATION	7.392112204118402E-5	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9998744063656216	WITHOUT_CLASSIFICATION	1.2559363437834192E-4	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999611006041266	WITHOUT_CLASSIFICATION	3.889939587341764E-5	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9998479185553517	WITHOUT_CLASSIFICATION	1.5208144464834623E-4	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999950404727349	WITHOUT_CLASSIFICATION	4.959527265153585E-6	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999913872722721	WITHOUT_CLASSIFICATION	8.612727727940933E-6	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999453164802179	WITHOUT_CLASSIFICATION	5.46835197820344E-5	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999507424672168	WITHOUT_CLASSIFICATION	4.9257532783195396E-5	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999851549379567	WITHOUT_CLASSIFICATION	1.4845062043323064E-5	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999677840796591	WITHOUT_CLASSIFICATION	3.221592034086943E-5	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999893103456143	WITHOUT_CLASSIFICATION	1.0689654385562777E-5	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9998602099932973	WITHOUT_CLASSIFICATION	1.397900067026663E-4	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999435595640027	WITHOUT_CLASSIFICATION	5.644043599716571E-5	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9998562288511501	WITHOUT_CLASSIFICATION	1.4377114884993653E-4	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9963501767405116	WITHOUT_CLASSIFICATION	0.0036498232594884533	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999266474563809	WITHOUT_CLASSIFICATION	7.335254361905831E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999841481898382	WITHOUT_CLASSIFICATION	1.5851810161806974E-4	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.999979508453121	WITHOUT_CLASSIFICATION	2.0491546878996794E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999443384106772	WITHOUT_CLASSIFICATION	5.566158932266717E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9998413657714765	WITHOUT_CLASSIFICATION	1.5863422852339902E-4	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999776328670044	WITHOUT_CLASSIFICATION	2.2367132995627336E-5	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999891607358373	WITHOUT_CLASSIFICATION	1.0839264162803262E-5	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999672438722458	WITHOUT_CLASSIFICATION	3.275612775429031E-5	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999681062092187	WITHOUT_CLASSIFICATION	3.1893790781260096E-5	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999830579857121	WITHOUT_CLASSIFICATION	1.6942014287929863E-5	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999282532467292	WITHOUT_CLASSIFICATION	7.174675327082141E-5	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.999987880327842	WITHOUT_CLASSIFICATION	1.2119672158017234E-5	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.999983054079277	WITHOUT_CLASSIFICATION	1.6945920723081444E-5	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998954036162349	WITHOUT_CLASSIFICATION	1.0459638376508529E-4	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999899016896429	WITHOUT_CLASSIFICATION	1.009831035710564E-4	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272097550659	WITHOUT_CLASSIFICATION	7.279024493413494E-5	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999891604010869	WITHOUT_CLASSIFICATION	1.0839598913221994E-5	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999675006930768	WITHOUT_CLASSIFICATION	3.249930692315416E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998495449541668	WITHOUT_CLASSIFICATION	1.5045504583324027E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998495449541668	WITHOUT_CLASSIFICATION	1.5045504583324027E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999355691814917	WITHOUT_CLASSIFICATION	6.443081850825086E-5	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999966113291646	WITHOUT_CLASSIFICATION	3.388670835272117E-6	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9998975652962623	WITHOUT_CLASSIFICATION	1.0243470373760883E-4	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998618890789238	WITHOUT_CLASSIFICATION	1.3811092107619713E-4	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9998975652962623	WITHOUT_CLASSIFICATION	1.0243470373760883E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998871708765474	WITHOUT_CLASSIFICATION	1.1282912345261198E-4	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999399976187611	WITHOUT_CLASSIFICATION	6.000238123896765E-5	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999131892034885	WITHOUT_CLASSIFICATION	8.681079651154586E-5	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998752832545247	WITHOUT_CLASSIFICATION	1.2471674547530652E-4	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999002775481324	WITHOUT_CLASSIFICATION	9.972245186764331E-5	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999409673879038	WITHOUT_CLASSIFICATION	5.90326120961636E-5	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999312090157773	WITHOUT_CLASSIFICATION	6.879098422273249E-5	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9998968140057897	WITHOUT_CLASSIFICATION	1.0318599421040862E-4	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999461841131134	WITHOUT_CLASSIFICATION	5.381588688658552E-5	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999737099049518	WITHOUT_CLASSIFICATION	2.6290095048236162E-5	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999435102790186	WITHOUT_CLASSIFICATION	5.6489720981285884E-5	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9998766536731262	WITHOUT_CLASSIFICATION	1.233463268737572E-4	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9998617512399794	WITHOUT_CLASSIFICATION	1.382487600205775E-4	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999846657356154	WITHOUT_CLASSIFICATION	1.5334264384622982E-5	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999313905092541	WITHOUT_CLASSIFICATION	6.860949074594172E-5	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999496746067185	WITHOUT_CLASSIFICATION	5.032539328150167E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.999961155755139	WITHOUT_CLASSIFICATION	3.8844244861120444E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.999961155755139	WITHOUT_CLASSIFICATION	3.8844244861120444E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9998488928405447	WITHOUT_CLASSIFICATION	1.5110715945543162E-4	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999583513075371	WITHOUT_CLASSIFICATION	4.164869246285579E-5	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999832738222821	WITHOUT_CLASSIFICATION	1.6726177717867856E-5	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999845871102556	WITHOUT_CLASSIFICATION	1.5412889744395437E-5	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999865236824347	WITHOUT_CLASSIFICATION	1.3476317565331673E-5	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999831202051823	WITHOUT_CLASSIFICATION	1.6879794817700133E-5	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999373386564356	WITHOUT_CLASSIFICATION	6.266134356442153E-5	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999032774129314	WITHOUT_CLASSIFICATION	9.672258706860289E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999255829906376	WITHOUT_CLASSIFICATION	7.44170093624338E-5	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999680920307807	WITHOUT_CLASSIFICATION	3.1907969219316585E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999924349231261	WITHOUT_CLASSIFICATION	7.565076873906523E-5	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999989579706671	WITHOUT_CLASSIFICATION	1.0420293328913702E-5	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999308337471845	WITHOUT_CLASSIFICATION	6.916625281540745E-5	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999905827529341	WITHOUT_CLASSIFICATION	9.417247065899585E-5	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999189688599212	WITHOUT_CLASSIFICATION	8.103114007884654E-5	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999880364355824	WITHOUT_CLASSIFICATION	1.1963564417655798E-5	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999476271019456	WITHOUT_CLASSIFICATION	5.2372898054288906E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999578918522013	WITHOUT_CLASSIFICATION	4.2108147798708065E-4	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9999171656828608	WITHOUT_CLASSIFICATION	8.283431713920746E-5	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.999938882023793	WITHOUT_CLASSIFICATION	6.111797620695599E-5	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999207069604266	WITHOUT_CLASSIFICATION	7.929303957339961E-5	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9998265383159416	WITHOUT_CLASSIFICATION	1.7346168405835493E-4	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9998227317433761	WITHOUT_CLASSIFICATION	1.7726825662391118E-4	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9998954772381566	WITHOUT_CLASSIFICATION	1.0452276184326069E-4	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.99991793841762	WITHOUT_CLASSIFICATION	8.206158238005133E-5	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999799564977722	WITHOUT_CLASSIFICATION	2.0043502227856438E-5	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999200170102793	WITHOUT_CLASSIFICATION	7.998298972072072E-5	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999465909504776	WITHOUT_CLASSIFICATION	5.340904952230807E-5	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9998762306110461	WITHOUT_CLASSIFICATION	1.237693889537864E-4	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999870411244064	WITHOUT_CLASSIFICATION	1.2958875593544505E-5	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999515965168675	WITHOUT_CLASSIFICATION	4.8403483132614336E-5	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999158942997272	WITHOUT_CLASSIFICATION	8.41057002728468E-5	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999848298791524	WITHOUT_CLASSIFICATION	1.5170120847486408E-5	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998293279065511	WITHOUT_CLASSIFICATION	1.7067209344888556E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999951781849488	WITHOUT_CLASSIFICATION	4.821815051159697E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999773188260604	WITHOUT_CLASSIFICATION	2.2681173939533575E-5	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.999972024116591	WITHOUT_CLASSIFICATION	2.7975883408992465E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999202782768197	WITHOUT_CLASSIFICATION	7.972172318030807E-5	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999227083276	WITHOUT_CLASSIFICATION	7.729167240007457E-5	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999103121705621	WITHOUT_CLASSIFICATION	8.968782943788266E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998757381195668	WITHOUT_CLASSIFICATION	1.2426188043323738E-4	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9998481646752172	WITHOUT_CLASSIFICATION	1.5183532478286462E-4	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9976346698625187	WITHOUT_CLASSIFICATION	0.002365330137481368	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.999989057771659	WITHOUT_CLASSIFICATION	1.09422283408775E-5	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999508910175712	WITHOUT_CLASSIFICATION	4.9108982428894995E-5	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9968200398871657	WITHOUT_CLASSIFICATION	0.003179960112834317	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999883408710833	WITHOUT_CLASSIFICATION	1.1659128916683121E-5	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999273228013934	WITHOUT_CLASSIFICATION	7.267719860655465E-5	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999726816056675	WITHOUT_CLASSIFICATION	2.7318394332475613E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999878200739523	WITHOUT_CLASSIFICATION	1.2179926047697532E-4	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999159416267188	WITHOUT_CLASSIFICATION	8.405837328114742E-5	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999975027869846	WITHOUT_CLASSIFICATION	2.4972130154057384E-6	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999260291015581	WITHOUT_CLASSIFICATION	7.397089844194208E-5	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.999852302656764	WITHOUT_CLASSIFICATION	1.476973432361076E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999105648682128	WITHOUT_CLASSIFICATION	8.943513178718177E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999105648682128	WITHOUT_CLASSIFICATION	8.943513178718177E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999937011644763	WITHOUT_CLASSIFICATION	6.298835523815581E-6	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999247294436848	WITHOUT_CLASSIFICATION	7.52705563151673E-5	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999046684920606	WITHOUT_CLASSIFICATION	9.533150793935544E-5	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999917752395347	WITHOUT_CLASSIFICATION	8.224760465303973E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999922221890225	WITHOUT_CLASSIFICATION	7.777810977504455E-5	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.999956085369089	WITHOUT_CLASSIFICATION	4.391463091107389E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999776887598342	WITHOUT_CLASSIFICATION	2.2311240165786147E-5	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999697827393373	WITHOUT_CLASSIFICATION	3.0217260662542856E-5	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999451042306555	WITHOUT_CLASSIFICATION	5.4895769344590824E-5	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999833401342649	WITHOUT_CLASSIFICATION	1.665986573505416E-5	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.999958217729084	WITHOUT_CLASSIFICATION	4.17822709159887E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998323539373022	WITHOUT_CLASSIFICATION	1.6764606269782412E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999687300023101	WITHOUT_CLASSIFICATION	3.126999768987553E-5	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999848415370686	WITHOUT_CLASSIFICATION	1.5158462931441097E-5	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999917403584561	WITHOUT_CLASSIFICATION	8.25964154392634E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999913488751974	WITHOUT_CLASSIFICATION	8.65112480268512E-6	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9998459178706421	WITHOUT_CLASSIFICATION	1.54082129357802E-4	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999756620522676	WITHOUT_CLASSIFICATION	2.4337947732369946E-5	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998152940044213	WITHOUT_CLASSIFICATION	1.8470599557877167E-4	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999883744989655	WITHOUT_CLASSIFICATION	1.1625501034451068E-5	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9998499450316058	WITHOUT_CLASSIFICATION	1.5005496839425454E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999351956123222	WITHOUT_CLASSIFICATION	6.480438767779928E-5	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999962144230587	WITHOUT_CLASSIFICATION	3.7855769412595376E-6	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999936281259078	WITHOUT_CLASSIFICATION	6.371874092281936E-6	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999331371168794	WITHOUT_CLASSIFICATION	6.686288312065072E-5	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998454948906158	WITHOUT_CLASSIFICATION	1.5450510938417057E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999120988337278	WITHOUT_CLASSIFICATION	8.790116627229793E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999687744158641	WITHOUT_CLASSIFICATION	3.122558413602787E-5	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999993739921743	WITHOUT_CLASSIFICATION	6.260078255908939E-7	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9963541769748253	WITHOUT_CLASSIFICATION	0.003645823025174782	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9998569739126147	WITHOUT_CLASSIFICATION	1.4302608738531468E-4	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999876643164486	WITHOUT_CLASSIFICATION	1.2335683551407203E-5	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999764603332908	WITHOUT_CLASSIFICATION	2.3539666709293906E-5	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.999946284726937	WITHOUT_CLASSIFICATION	5.3715273062967816E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999857850035779	WITHOUT_CLASSIFICATION	1.42149964219623E-5	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999071654282383	WITHOUT_CLASSIFICATION	9.283457176174614E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9998569739126147	WITHOUT_CLASSIFICATION	1.4302608738531468E-4	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999848408548756	WITHOUT_CLASSIFICATION	1.5159145124294762E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999854840730515	WITHOUT_CLASSIFICATION	1.4515926948607213E-5	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999352821240315	WITHOUT_CLASSIFICATION	6.47178759684945E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9998947933071388	WITHOUT_CLASSIFICATION	1.0520669286117118E-4	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999924349231261	WITHOUT_CLASSIFICATION	7.565076873906523E-5	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999059768946444	WITHOUT_CLASSIFICATION	9.402310535545326E-5	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999097347379616	WITHOUT_CLASSIFICATION	9.026526203844258E-5	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999979610710807	WITHOUT_CLASSIFICATION	2.0389289192988303E-5	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999208476694567	WITHOUT_CLASSIFICATION	7.915233054340171E-5	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999358888662346	WITHOUT_CLASSIFICATION	6.411113376542475E-5	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999250395969234	WITHOUT_CLASSIFICATION	7.496040307661318E-5	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999369763864323	WITHOUT_CLASSIFICATION	6.30236135676775E-5	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999890429725349	WITHOUT_CLASSIFICATION	1.0957027465102379E-5	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998356342570229	WITHOUT_CLASSIFICATION	1.6436574297716122E-4	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999355284753207	WITHOUT_CLASSIFICATION	6.447152467923177E-5	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999363549964553	WITHOUT_CLASSIFICATION	6.364500354471986E-5	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999731110459922	WITHOUT_CLASSIFICATION	2.6888954007861625E-5	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.999833579458512	WITHOUT_CLASSIFICATION	1.664205414879178E-4	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999462619284664	WITHOUT_CLASSIFICATION	5.373807153354412E-5	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998801744453819	WITHOUT_CLASSIFICATION	1.1982555461809234E-4	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999969164130253	WITHOUT_CLASSIFICATION	3.083586974691077E-5	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999580885947758	WITHOUT_CLASSIFICATION	4.1911405224306034E-5	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999581597732055	WITHOUT_CLASSIFICATION	4.18402267945631E-5	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9998698286438027	WITHOUT_CLASSIFICATION	1.3017135619731768E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9998638372138707	WITHOUT_CLASSIFICATION	1.3616278612932925E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999481138380281	WITHOUT_CLASSIFICATION	5.188616197192575E-5	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999323135862775	WITHOUT_CLASSIFICATION	6.768641372241855E-5	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999975572245995	WITHOUT_CLASSIFICATION	2.442775400491092E-5	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999104114085943	WITHOUT_CLASSIFICATION	8.958859140582253E-5	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9997899463357637	WITHOUT_CLASSIFICATION	2.1005366423632976E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999872951500849	WITHOUT_CLASSIFICATION	1.270484991498188E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998689488407009	WITHOUT_CLASSIFICATION	1.3105115929913113E-4	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997913451732933	WITHOUT_CLASSIFICATION	2.086548267067714E-4	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999672113315257	WITHOUT_CLASSIFICATION	3.278866847441654E-5	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9998588542813195	WITHOUT_CLASSIFICATION	1.4114571868052402E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999926963399259	WITHOUT_CLASSIFICATION	7.303660074075818E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998821368853947	WITHOUT_CLASSIFICATION	1.178631146052075E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998821368853947	WITHOUT_CLASSIFICATION	1.178631146052075E-4	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999952596036965	WITHOUT_CLASSIFICATION	4.740396303468478E-6	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9998816321187086	WITHOUT_CLASSIFICATION	1.1836788129135752E-4	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999282586201926	WITHOUT_CLASSIFICATION	7.174137980743419E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999556476944134	WITHOUT_CLASSIFICATION	4.435230558677808E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999906634092116	WITHOUT_CLASSIFICATION	9.336590788397793E-5	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9998314894567355	WITHOUT_CLASSIFICATION	1.6851054326453148E-4	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999343994323714	WITHOUT_CLASSIFICATION	6.560056762861121E-5	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999515035299109	WITHOUT_CLASSIFICATION	4.849647008904294E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9998882295657784	WITHOUT_CLASSIFICATION	1.1177043422156654E-4	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999935345157741	WITHOUT_CLASSIFICATION	6.465484225897515E-6	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999009045294673	WITHOUT_CLASSIFICATION	9.909547053261444E-5	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999703950371056	WITHOUT_CLASSIFICATION	2.9604962894476572E-5	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999951432506293	WITHOUT_CLASSIFICATION	4.856749370707673E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998821368853947	WITHOUT_CLASSIFICATION	1.178631146052075E-4	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9998617743746263	WITHOUT_CLASSIFICATION	1.3822562537372604E-4	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9998047240543456	WITHOUT_CLASSIFICATION	1.9527594565434565E-4	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999590871252174	WITHOUT_CLASSIFICATION	4.091287478255772E-5	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998733364796853	WITHOUT_CLASSIFICATION	1.2666352031454566E-4	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999745056715469	WITHOUT_CLASSIFICATION	2.5494328453115997E-5	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999193973163327	WITHOUT_CLASSIFICATION	8.060268366735547E-5	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999914355778717	WITHOUT_CLASSIFICATION	8.564422128278697E-6	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999318236398876	WITHOUT_CLASSIFICATION	6.817636011235056E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999769243072472	WITHOUT_CLASSIFICATION	2.307569275287179E-5	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.999809966336317	WITHOUT_CLASSIFICATION	1.900336636829858E-4	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999407970401405	WITHOUT_CLASSIFICATION	5.920295985943769E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998689488407009	WITHOUT_CLASSIFICATION	1.3105115929913113E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998821368853947	WITHOUT_CLASSIFICATION	1.178631146052075E-4	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998842716221672	WITHOUT_CLASSIFICATION	1.1572837783282163E-4	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999649105208238	WITHOUT_CLASSIFICATION	3.508947917624984E-5	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9997815663814289	WITHOUT_CLASSIFICATION	2.1843361857113347E-4	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999165554810194	WITHOUT_CLASSIFICATION	8.344451898053863E-5	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999726074215294	WITHOUT_CLASSIFICATION	2.7392578470564355E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999459599618004	WITHOUT_CLASSIFICATION	5.4040038199583834E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999195473754277	WITHOUT_CLASSIFICATION	8.045262457235019E-5	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999731845228663	WITHOUT_CLASSIFICATION	2.6815477133589593E-5	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999734567290757	WITHOUT_CLASSIFICATION	2.6543270924326196E-5	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.999946152500303	WITHOUT_CLASSIFICATION	5.3847499697034254E-5	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999649636355488	WITHOUT_CLASSIFICATION	3.503636445127542E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999687955893435	WITHOUT_CLASSIFICATION	3.1204410656498174E-5	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999673295250053	WITHOUT_CLASSIFICATION	3.267047499467128E-5	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9998634059707381	WITHOUT_CLASSIFICATION	1.3659402926190144E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998871708765474	WITHOUT_CLASSIFICATION	1.1282912345261198E-4	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999792850663505	WITHOUT_CLASSIFICATION	2.0714933649548805E-5	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999844878904071	WITHOUT_CLASSIFICATION	1.551210959289535E-5	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999635815230644	WITHOUT_CLASSIFICATION	3.641847693555388E-5	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9998736344660432	WITHOUT_CLASSIFICATION	1.2636553395682027E-4	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999950805136036	WITHOUT_CLASSIFICATION	4.919486396374726E-6	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998888682075615	WITHOUT_CLASSIFICATION	1.1113179243837745E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998888682075615	WITHOUT_CLASSIFICATION	1.1113179243837745E-4	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999403720026462	WITHOUT_CLASSIFICATION	5.962799735386996E-5	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999615996095822	WITHOUT_CLASSIFICATION	3.8400390417777736E-5	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999718400725681	WITHOUT_CLASSIFICATION	2.8159927431811056E-5	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999737294122952	WITHOUT_CLASSIFICATION	2.6270587704724832E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999029743070621	WITHOUT_CLASSIFICATION	9.702569293792937E-5	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999093573189407	WITHOUT_CLASSIFICATION	9.064268105922843E-5	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.99982571324195	WITHOUT_CLASSIFICATION	1.7428675804992736E-4	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999611272169993	WITHOUT_CLASSIFICATION	3.8872783000722036E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999611272169993	WITHOUT_CLASSIFICATION	3.8872783000722036E-5	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9998915264930845	WITHOUT_CLASSIFICATION	1.0847350691539385E-4	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9998788205635173	WITHOUT_CLASSIFICATION	1.211794364827303E-4	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999451566086988	WITHOUT_CLASSIFICATION	5.484339130118052E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999259171836498	WITHOUT_CLASSIFICATION	7.408281635023698E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999259171836498	WITHOUT_CLASSIFICATION	7.408281635023698E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999259171836498	WITHOUT_CLASSIFICATION	7.408281635023698E-5	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999945591990595	WITHOUT_CLASSIFICATION	5.440800940500183E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999599944368256	WITHOUT_CLASSIFICATION	4.000556317435677E-5	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.999679210688878	WITHOUT_CLASSIFICATION	3.207893111220945E-4	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998565019075275	WITHOUT_CLASSIFICATION	1.4349809247237726E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999632687395034	WITHOUT_CLASSIFICATION	3.6731260496556676E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998821368853947	WITHOUT_CLASSIFICATION	1.178631146052075E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998821368853947	WITHOUT_CLASSIFICATION	1.178631146052075E-4	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.999951917921446	WITHOUT_CLASSIFICATION	4.808207855398803E-5	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999908986900702	WITHOUT_CLASSIFICATION	9.101309929756585E-6	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999286171348701	WITHOUT_CLASSIFICATION	7.13828651298506E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999767840015503	WITHOUT_CLASSIFICATION	2.3215998449721464E-5	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9998831629275081	WITHOUT_CLASSIFICATION	1.1683707249181979E-4	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999368012295642	WITHOUT_CLASSIFICATION	6.319877043574672E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999081872113373	WITHOUT_CLASSIFICATION	9.18127886626429E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999313974341104	WITHOUT_CLASSIFICATION	6.860256588954401E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999717436839864	WITHOUT_CLASSIFICATION	2.8256316013593916E-5	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999165629121296	WITHOUT_CLASSIFICATION	8.343708787031258E-5	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999958804215689	WITHOUT_CLASSIFICATION	4.1195784310984466E-5	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9998311604163063	WITHOUT_CLASSIFICATION	1.688395836937266E-4	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9998311604163063	WITHOUT_CLASSIFICATION	1.688395836937266E-4	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9998311604163063	WITHOUT_CLASSIFICATION	1.688395836937266E-4	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9998311604163063	WITHOUT_CLASSIFICATION	1.688395836937266E-4	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9998311604163063	WITHOUT_CLASSIFICATION	1.688395836937266E-4	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998615900485961	WITHOUT_CLASSIFICATION	1.3840995140383203E-4	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998615900485961	WITHOUT_CLASSIFICATION	1.3840995140383203E-4	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998619749775327	WITHOUT_CLASSIFICATION	1.380250224673391E-4	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998615900485961	WITHOUT_CLASSIFICATION	1.3840995140383203E-4	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999656746376394	WITHOUT_CLASSIFICATION	3.432536236060908E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998888682075615	WITHOUT_CLASSIFICATION	1.1113179243837745E-4	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999311087500499	WITHOUT_CLASSIFICATION	6.889124995018512E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998615900485961	WITHOUT_CLASSIFICATION	1.3840995140383203E-4	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999083626659862	WITHOUT_CLASSIFICATION	9.16373340138459E-5	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9998781485792942	WITHOUT_CLASSIFICATION	1.2185142070577531E-4	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998315940014935	WITHOUT_CLASSIFICATION	1.6840599850650388E-4	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9998316295054577	WITHOUT_CLASSIFICATION	1.6837049454228092E-4	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999982013235146	WITHOUT_CLASSIFICATION	1.7986764853893965E-5	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999017914044641	WITHOUT_CLASSIFICATION	9.820859553585348E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999830073334721	WITHOUT_CLASSIFICATION	1.699266652795534E-5	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999398851603304	WITHOUT_CLASSIFICATION	6.0114839669537426E-5	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999438049071128	WITHOUT_CLASSIFICATION	5.619509288719915E-5	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999888755264925	WITHOUT_CLASSIFICATION	1.1124473507398754E-5	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999731603427469	WITHOUT_CLASSIFICATION	2.6839657253150005E-5	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9972119511946107	WITHOUT_CLASSIFICATION	0.0027880488053892588	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.99964931778562	WITHOUT_CLASSIFICATION	3.5068221437996083E-4	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9998672816891079	WITHOUT_CLASSIFICATION	1.327183108922046E-4	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999735458266595	WITHOUT_CLASSIFICATION	2.6454173340414875E-5	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999434596733617	WITHOUT_CLASSIFICATION	5.654032663828507E-5	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9995209741453617	WITHOUT_CLASSIFICATION	4.7902585463837727E-4	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998553854227131	WITHOUT_CLASSIFICATION	1.4461457728691065E-4	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998553854227131	WITHOUT_CLASSIFICATION	1.4461457728691065E-4	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.999952921774672	WITHOUT_CLASSIFICATION	4.707822532793516E-5	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999828567995777	WITHOUT_CLASSIFICATION	1.714320042235034E-5	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.999958949268723	WITHOUT_CLASSIFICATION	4.105073127699849E-5	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999242444823727	WITHOUT_CLASSIFICATION	7.575551762734418E-5	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9998889573058635	WITHOUT_CLASSIFICATION	1.1104269413646524E-4	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999544550066581	WITHOUT_CLASSIFICATION	4.554499334191279E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9998706794783192	WITHOUT_CLASSIFICATION	1.293205216809174E-4	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999569593238576	WITHOUT_CLASSIFICATION	4.3040676142270477E-5	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999385293700376	WITHOUT_CLASSIFICATION	6.147062996246053E-5	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999589679432831	WITHOUT_CLASSIFICATION	4.103205671695257E-5	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9998847934981624	WITHOUT_CLASSIFICATION	1.1520650183760834E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999687955893435	WITHOUT_CLASSIFICATION	3.1204410656498174E-5	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999899847871874	WITHOUT_CLASSIFICATION	1.0015212812701462E-5	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999882290078	WITHOUT_CLASSIFICATION	1.177099219989807E-5	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999601154214045	WITHOUT_CLASSIFICATION	3.9884578595400717E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999754544272054	WITHOUT_CLASSIFICATION	2.454557279459033E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999708018607529	WITHOUT_CLASSIFICATION	2.9198139247057086E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999708018607529	WITHOUT_CLASSIFICATION	2.9198139247057086E-5	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999418195544506	WITHOUT_CLASSIFICATION	5.8180445549456035E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999973878559498	WITHOUT_CLASSIFICATION	2.6121440501604224E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999624657177771	WITHOUT_CLASSIFICATION	3.7534282222892954E-5	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999808794334867	WITHOUT_CLASSIFICATION	1.9120566513249475E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999701011551954	WITHOUT_CLASSIFICATION	2.989884480464025E-5	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999447262382951	WITHOUT_CLASSIFICATION	5.527376170485288E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9998923533997746	WITHOUT_CLASSIFICATION	1.076466002254763E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999848739817772	WITHOUT_CLASSIFICATION	1.5126018222779396E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999115352622436	WITHOUT_CLASSIFICATION	8.846473775634123E-5	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999615224468581	WITHOUT_CLASSIFICATION	3.8477553141919324E-5	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999994361733858	WITHOUT_CLASSIFICATION	5.6382661420316994E-6	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999848739817772	WITHOUT_CLASSIFICATION	1.5126018222779396E-5	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999765318008991	WITHOUT_CLASSIFICATION	2.3468199100856993E-5	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999173643452208	WITHOUT_CLASSIFICATION	8.263565477917864E-5	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999688105886163	WITHOUT_CLASSIFICATION	3.118941138364823E-5	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9998623979689072	WITHOUT_CLASSIFICATION	1.376020310927941E-4	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999904269559647	WITHOUT_CLASSIFICATION	9.573044035269991E-6	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999917048701636	WITHOUT_CLASSIFICATION	8.295129836277098E-6	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999047959160631	WITHOUT_CLASSIFICATION	9.52040839368992E-5	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999756922681975	WITHOUT_CLASSIFICATION	2.430773180245119E-5	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999911232485782	WITHOUT_CLASSIFICATION	8.876751421793094E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999712926177475	WITHOUT_CLASSIFICATION	2.8707382252396543E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998979762274853	WITHOUT_CLASSIFICATION	1.0202377251474802E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999535888572006	WITHOUT_CLASSIFICATION	4.641114279947146E-5	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999176075669155	WITHOUT_CLASSIFICATION	8.239243308456552E-5	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.999945776986108	WITHOUT_CLASSIFICATION	5.422301389194974E-5	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998410932066917	WITHOUT_CLASSIFICATION	1.5890679330838144E-4	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999932053213727	WITHOUT_CLASSIFICATION	6.794678627288428E-6	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999937018814696	WITHOUT_CLASSIFICATION	6.298118530400283E-5	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9997608037662368	WITHOUT_CLASSIFICATION	2.3919623376318218E-4	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9997608037662368	WITHOUT_CLASSIFICATION	2.3919623376318218E-4	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999015618212599	WITHOUT_CLASSIFICATION	9.843817874011365E-5	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999604950121278	WITHOUT_CLASSIFICATION	3.950498787222969E-5	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9998450216389589	WITHOUT_CLASSIFICATION	1.5497836104100173E-4	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999025807066698	WITHOUT_CLASSIFICATION	9.74192933302106E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999216192900637	WITHOUT_CLASSIFICATION	7.838070993635584E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999801236412966	WITHOUT_CLASSIFICATION	1.987635870345387E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999882603645804	WITHOUT_CLASSIFICATION	1.1739635419558678E-5	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999865179286684	WITHOUT_CLASSIFICATION	1.3482071331559832E-5	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999576628934466	WITHOUT_CLASSIFICATION	4.2337106553431326E-5	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999653942270411	WITHOUT_CLASSIFICATION	3.460577295892217E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999790831701987	WITHOUT_CLASSIFICATION	2.0916829801310443E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999633377584456	WITHOUT_CLASSIFICATION	3.6662241554375103E-5	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999921586268083	WITHOUT_CLASSIFICATION	7.841373191694077E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999837510113474	WITHOUT_CLASSIFICATION	1.6248988652527295E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999057084121731	WITHOUT_CLASSIFICATION	9.429158782690627E-5	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999844460763211	WITHOUT_CLASSIFICATION	1.5553923678849944E-5	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999992802507704	WITHOUT_CLASSIFICATION	7.197492296098287E-6	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999838802791093	WITHOUT_CLASSIFICATION	1.611972089074976E-5	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999554396171497	WITHOUT_CLASSIFICATION	4.4560382850189824E-5	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999339700069232	WITHOUT_CLASSIFICATION	6.602999307677652E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999934634294017	WITHOUT_CLASSIFICATION	6.5365705983275295E-6	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999861614426876	WITHOUT_CLASSIFICATION	1.3838557312539436E-5	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999646554800332	WITHOUT_CLASSIFICATION	3.534451996680674E-5	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999978347901665	WITHOUT_CLASSIFICATION	2.1652098334848226E-6	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999721646433689	WITHOUT_CLASSIFICATION	2.7835356631097162E-5	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999450718049088	WITHOUT_CLASSIFICATION	5.492819509127054E-5	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999805447529255	WITHOUT_CLASSIFICATION	1.9455247074425097E-5	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999579454891658	WITHOUT_CLASSIFICATION	4.2054510834176514E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999551692459292	WITHOUT_CLASSIFICATION	4.4830754070833895E-5	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999398216714988	WITHOUT_CLASSIFICATION	6.0178328501236506E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999164161946548	WITHOUT_CLASSIFICATION	8.358380534523259E-5	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999063195404428	WITHOUT_CLASSIFICATION	9.368045955708797E-5	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999812934658557	WITHOUT_CLASSIFICATION	1.8706534144274733E-5	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999780492823995	WITHOUT_CLASSIFICATION	2.1950717600480114E-5	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999942920016566	WITHOUT_CLASSIFICATION	5.707998343464497E-6	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999938641861888	WITHOUT_CLASSIFICATION	6.135813811197771E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999401855470018	WITHOUT_CLASSIFICATION	5.981445299818315E-5	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999750471834159	WITHOUT_CLASSIFICATION	2.495281658409573E-5	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999508597628028	WITHOUT_CLASSIFICATION	4.914023719716007E-5	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999498510081082	WITHOUT_CLASSIFICATION	5.014899189191173E-5	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999606740445893	WITHOUT_CLASSIFICATION	3.932595541072552E-5	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999681065294379	WITHOUT_CLASSIFICATION	3.189347056207992E-5	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999105750710808	WITHOUT_CLASSIFICATION	8.94249289192109E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999802174598292	WITHOUT_CLASSIFICATION	1.9782540170682226E-5	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999418988041959	WITHOUT_CLASSIFICATION	5.810119580397667E-5	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999623012957293	WITHOUT_CLASSIFICATION	3.7698704270759194E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999164161946548	WITHOUT_CLASSIFICATION	8.358380534523259E-5	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998799017977261	WITHOUT_CLASSIFICATION	1.2009820227379477E-4	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9998290707784786	WITHOUT_CLASSIFICATION	1.7092922152145805E-4	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999669374450156	WITHOUT_CLASSIFICATION	3.306255498438782E-5	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999847421405389	WITHOUT_CLASSIFICATION	1.52578594610726E-5	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999723846831414	WITHOUT_CLASSIFICATION	2.761531685859657E-4	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999613648990245	WITHOUT_CLASSIFICATION	3.863510097534969E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999115352622436	WITHOUT_CLASSIFICATION	8.846473775634123E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999842543260362	WITHOUT_CLASSIFICATION	1.574567396370985E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999057084121731	WITHOUT_CLASSIFICATION	9.429158782690627E-5	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.999847514011684	WITHOUT_CLASSIFICATION	1.5248598831592137E-4	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998816961103609	WITHOUT_CLASSIFICATION	1.1830388963909352E-4	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999568537433103	WITHOUT_CLASSIFICATION	4.314625668964811E-5	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999571683125692	WITHOUT_CLASSIFICATION	4.283168743073821E-5	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9998882354783645	WITHOUT_CLASSIFICATION	1.1176452163549989E-4	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999661140386186	WITHOUT_CLASSIFICATION	3.388596138132478E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999415883551571	WITHOUT_CLASSIFICATION	5.841164484277995E-5	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999519150327442	WITHOUT_CLASSIFICATION	4.8084967255785425E-5	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999849151668402	WITHOUT_CLASSIFICATION	1.5084833159795478E-5	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999683393998512	WITHOUT_CLASSIFICATION	3.1660600148815794E-5	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999945375987691	WITHOUT_CLASSIFICATION	5.4624012309041946E-5	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999683696946163	WITHOUT_CLASSIFICATION	3.163030538367598E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999268057531631	WITHOUT_CLASSIFICATION	7.319424683690707E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999268057531631	WITHOUT_CLASSIFICATION	7.319424683690707E-5	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999520863810429	WITHOUT_CLASSIFICATION	4.79136189571628E-5	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999508979021561	WITHOUT_CLASSIFICATION	4.9102097843933705E-5	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999741336969433	WITHOUT_CLASSIFICATION	2.586630305675142E-5	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999973256629502	WITHOUT_CLASSIFICATION	2.674337049735671E-6	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999931971543806	WITHOUT_CLASSIFICATION	6.802845619361597E-6	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999544197981184	WITHOUT_CLASSIFICATION	4.558020188170447E-5	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999922860136112	WITHOUT_CLASSIFICATION	7.713986388701787E-6	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999818914231908	WITHOUT_CLASSIFICATION	1.8108576809199878E-5	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999656892526338	WITHOUT_CLASSIFICATION	3.431074736614978E-5	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998998032473685	WITHOUT_CLASSIFICATION	1.0019675263151724E-4	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9998519188200715	WITHOUT_CLASSIFICATION	1.4808117992853233E-4	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999399759187009	WITHOUT_CLASSIFICATION	6.002408129925237E-5	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999179235105836	WITHOUT_CLASSIFICATION	8.207648941640347E-5	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999997688969052	WITHOUT_CLASSIFICATION	2.3110309480942134E-6	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999049041240768	WITHOUT_CLASSIFICATION	9.509587592311302E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999217931738509	WITHOUT_CLASSIFICATION	7.820682614910163E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999020315028997	WITHOUT_CLASSIFICATION	9.796849710035546E-5	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999964249886802	WITHOUT_CLASSIFICATION	3.5750113196308703E-6	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999742618273856	WITHOUT_CLASSIFICATION	2.5738172614436315E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999884261716267	WITHOUT_CLASSIFICATION	1.1573828373303172E-4	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999855731399284	WITHOUT_CLASSIFICATION	1.4426860071614694E-5	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999803907543229	WITHOUT_CLASSIFICATION	1.9609245677039837E-5	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999927486925507	WITHOUT_CLASSIFICATION	7.2513074493789614E-6	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999601510879452	WITHOUT_CLASSIFICATION	3.9848912054721435E-5	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9998451641202016	WITHOUT_CLASSIFICATION	1.5483587979833814E-4	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999214972233287	WITHOUT_CLASSIFICATION	7.850277667122821E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999884261716267	WITHOUT_CLASSIFICATION	1.1573828373303172E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999884261716267	WITHOUT_CLASSIFICATION	1.1573828373303172E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999203657835077	WITHOUT_CLASSIFICATION	7.963421649233253E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999824357968419	WITHOUT_CLASSIFICATION	1.756420315815769E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999284231469223	WITHOUT_CLASSIFICATION	7.157685307771186E-5	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999209557557106	WITHOUT_CLASSIFICATION	7.90442442894438E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9998806377072043	WITHOUT_CLASSIFICATION	1.1936229279568729E-4	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999897864882489	WITHOUT_CLASSIFICATION	1.0213511751207092E-5	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9985641713057455	WITHOUT_CLASSIFICATION	0.001435828694254509	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999137407226425	WITHOUT_CLASSIFICATION	8.625927735740747E-5	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999608441308029	WITHOUT_CLASSIFICATION	3.915586919703701E-5	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.99988079544109	WITHOUT_CLASSIFICATION	1.1920455890995446E-4	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999237463324501	WITHOUT_CLASSIFICATION	7.625366754989855E-5	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999435526559813	WITHOUT_CLASSIFICATION	5.644734401865167E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999264944971925	WITHOUT_CLASSIFICATION	7.350550280746764E-5	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996786770538529	WITHOUT_CLASSIFICATION	3.2132294614713706E-4	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999992266016508	WITHOUT_CLASSIFICATION	7.733983491875503E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998383479399944	WITHOUT_CLASSIFICATION	1.6165206000569974E-4	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998692498924775	WITHOUT_CLASSIFICATION	1.3075010752247246E-4	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998533015791586	WITHOUT_CLASSIFICATION	1.4669842084136093E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997515279944135	WITHOUT_CLASSIFICATION	2.4847200558656546E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9972140280604365	WITHOUT_CLASSIFICATION	0.0027859719395636113	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999782291463635	WITHOUT_CLASSIFICATION	2.1770853636523705E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.99999683916229	WITHOUT_CLASSIFICATION	3.1608377101002837E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999364555383231	WITHOUT_CLASSIFICATION	6.354446167683732E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997963961676155	WITHOUT_CLASSIFICATION	2.0360383238451815E-4	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999951789572746	WITHOUT_CLASSIFICATION	4.8210427253955306E-5	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999829035124295	WITHOUT_CLASSIFICATION	1.70964875704554E-5	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999495395178356	WITHOUT_CLASSIFICATION	5.046048216437941E-5	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9998498062036759	WITHOUT_CLASSIFICATION	1.501937963240954E-4	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999107898306206	WITHOUT_CLASSIFICATION	8.921016937939355E-5	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.999983610208075	WITHOUT_CLASSIFICATION	1.638979192492425E-5	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.999863821643558	WITHOUT_CLASSIFICATION	1.3617835644195525E-4	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.999854710726355	WITHOUT_CLASSIFICATION	1.452892736450254E-4	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999218722736818	WITHOUT_CLASSIFICATION	7.8127726318127E-5	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998956410472679	WITHOUT_CLASSIFICATION	1.0435895273208518E-4	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999631305196625	WITHOUT_CLASSIFICATION	3.686948033757443E-5	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999270632141326	WITHOUT_CLASSIFICATION	7.293678586741773E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9998837894287141	WITHOUT_CLASSIFICATION	1.1621057128582534E-4	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999575575209678	WITHOUT_CLASSIFICATION	4.2442479032217516E-5	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.999951418809005	WITHOUT_CLASSIFICATION	4.858119099500838E-5	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999241558838142	WITHOUT_CLASSIFICATION	7.584411618573561E-5	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999820424019116	WITHOUT_CLASSIFICATION	1.795759808845718E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999951996711911	WITHOUT_CLASSIFICATION	4.800328808899751E-5	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999253398298865	WITHOUT_CLASSIFICATION	7.466017011342449E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999951996711911	WITHOUT_CLASSIFICATION	4.800328808899751E-5	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999915229383796	WITHOUT_CLASSIFICATION	8.477061620510835E-6	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999604604189967	WITHOUT_CLASSIFICATION	3.9539581003352446E-5	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999777821017645	WITHOUT_CLASSIFICATION	2.221789823546814E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999878951301341	WITHOUT_CLASSIFICATION	1.2104869865943602E-5	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999747156172335	WITHOUT_CLASSIFICATION	2.528438276650024E-5	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999776558346447	WITHOUT_CLASSIFICATION	2.2344165355240407E-5	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999818968948527	WITHOUT_CLASSIFICATION	1.810310514723657E-5	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999203653357539	WITHOUT_CLASSIFICATION	7.963466424604122E-5	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999954210090645	WITHOUT_CLASSIFICATION	4.578990935497865E-5	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9998924723210505	WITHOUT_CLASSIFICATION	1.0752767894949499E-4	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999450348193845	WITHOUT_CLASSIFICATION	5.496518061562656E-5	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999886483561439	WITHOUT_CLASSIFICATION	1.1351643856150926E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999993857357562	WITHOUT_CLASSIFICATION	6.142642437992487E-6	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9998902150049788	WITHOUT_CLASSIFICATION	1.0978499502119642E-4	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999629493956067	WITHOUT_CLASSIFICATION	3.705060439325416E-5	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999797835662736	WITHOUT_CLASSIFICATION	2.0216433726425754E-5	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999661673660075	WITHOUT_CLASSIFICATION	3.383263399253813E-5	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999318754942426	WITHOUT_CLASSIFICATION	6.81245057574951E-5	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999974671969148	WITHOUT_CLASSIFICATION	2.5328030852005994E-5	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999713060409818	WITHOUT_CLASSIFICATION	2.869395901809336E-5	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999721886870783	WITHOUT_CLASSIFICATION	2.7811312921767913E-5	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.999885231371606	WITHOUT_CLASSIFICATION	1.1476862839403627E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.999940807179245	WITHOUT_CLASSIFICATION	5.919282075500725E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999550243993839	WITHOUT_CLASSIFICATION	4.49756006160914E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998818974514725	WITHOUT_CLASSIFICATION	1.1810254852755186E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999942471064156	WITHOUT_CLASSIFICATION	5.752893584418113E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9998824137410134	WITHOUT_CLASSIFICATION	1.1758625898663819E-4	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999129200137864	WITHOUT_CLASSIFICATION	8.707998621369002E-5	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998793920561331	WITHOUT_CLASSIFICATION	1.2060794386690394E-4	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999286445168338	WITHOUT_CLASSIFICATION	7.13554831660936E-5	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9998361057983808	WITHOUT_CLASSIFICATION	1.6389420161925613E-4	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999875005999895	WITHOUT_CLASSIFICATION	1.2499400010365033E-5	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999846467813132	WITHOUT_CLASSIFICATION	1.535321868686568E-5	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9998641114071252	WITHOUT_CLASSIFICATION	1.3588859287474788E-4	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9998453983029086	WITHOUT_CLASSIFICATION	1.5460169709141362E-4	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9998836909320784	WITHOUT_CLASSIFICATION	1.1630906792153899E-4	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998773206411294	WITHOUT_CLASSIFICATION	1.226793588705649E-4	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9998495849340208	WITHOUT_CLASSIFICATION	1.5041506597918754E-4	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999148298933684	WITHOUT_CLASSIFICATION	8.517010663150785E-5	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999018610313989	WITHOUT_CLASSIFICATION	9.81389686011398E-5	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9998368134012336	WITHOUT_CLASSIFICATION	1.631865987663728E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999762716193658	WITHOUT_CLASSIFICATION	2.372838063429964E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999942471064156	WITHOUT_CLASSIFICATION	5.752893584418113E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999152591336006	WITHOUT_CLASSIFICATION	8.474086639937242E-5	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9998683709621988	WITHOUT_CLASSIFICATION	1.316290378012288E-4	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999948174254741	WITHOUT_CLASSIFICATION	5.182574525898483E-5	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9998303206200595	WITHOUT_CLASSIFICATION	1.6967937994050798E-4	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999381945904089	WITHOUT_CLASSIFICATION	6.180540959105726E-5	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999299735990622	WITHOUT_CLASSIFICATION	7.002640093776733E-5	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9998654532820946	WITHOUT_CLASSIFICATION	1.345467179053816E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998813646113612	WITHOUT_CLASSIFICATION	1.186353886388277E-4	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999870263056736	WITHOUT_CLASSIFICATION	1.2973694326425318E-5	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9998833968362473	WITHOUT_CLASSIFICATION	1.166031637527313E-4	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999711340717632	WITHOUT_CLASSIFICATION	2.8865928236745933E-5	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9998882181790313	WITHOUT_CLASSIFICATION	1.1178182096876173E-4	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998323336463636	WITHOUT_CLASSIFICATION	1.6766635363645667E-4	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999013139014206	WITHOUT_CLASSIFICATION	9.86860985794102E-5	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999868941415493	WITHOUT_CLASSIFICATION	1.3105858450624802E-5	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999028976667006	WITHOUT_CLASSIFICATION	9.710233329937744E-5	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999069209199246	WITHOUT_CLASSIFICATION	9.307908007531615E-5	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999897050397402	WITHOUT_CLASSIFICATION	1.0294960259775387E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999876192964788	WITHOUT_CLASSIFICATION	1.2380703521192165E-4	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9998914784113232	WITHOUT_CLASSIFICATION	1.0852158867679892E-4	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999164133501116	WITHOUT_CLASSIFICATION	8.358664988836369E-5	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999477681477478	WITHOUT_CLASSIFICATION	5.223185225231315E-5	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999774280505178	WITHOUT_CLASSIFICATION	2.257194948218115E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9995399461936495	WITHOUT_CLASSIFICATION	4.6005380635045926E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9995399461936495	WITHOUT_CLASSIFICATION	4.6005380635045926E-4	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999774234848973	WITHOUT_CLASSIFICATION	2.2576515102704965E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9995399461936495	WITHOUT_CLASSIFICATION	4.6005380635045926E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9995399461936495	WITHOUT_CLASSIFICATION	4.6005380635045926E-4	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999357501540398	WITHOUT_CLASSIFICATION	6.424984596019307E-5	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999329923628111	WITHOUT_CLASSIFICATION	6.7007637188993E-5	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998832525796227	WITHOUT_CLASSIFICATION	1.16747420377218E-4	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998818585710104	WITHOUT_CLASSIFICATION	1.1814142898966166E-4	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999723233536072	WITHOUT_CLASSIFICATION	2.767664639291792E-5	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999786236735835	WITHOUT_CLASSIFICATION	2.137632641655432E-5	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9998675707177298	WITHOUT_CLASSIFICATION	1.3242928227020096E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999800542308631	WITHOUT_CLASSIFICATION	1.994576913693393E-5	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999843295045351	WITHOUT_CLASSIFICATION	1.5670495464891433E-4	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998559132851059	WITHOUT_CLASSIFICATION	1.4408671489417503E-4	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999094156247939	WITHOUT_CLASSIFICATION	9.05843752061315E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999013079656203	WITHOUT_CLASSIFICATION	9.869203437974334E-5	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998762066188563	WITHOUT_CLASSIFICATION	1.2379338114372175E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9998740869307368	WITHOUT_CLASSIFICATION	1.2591306926321296E-4	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9998787798592391	WITHOUT_CLASSIFICATION	1.2122014076086136E-4	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999471251782357	WITHOUT_CLASSIFICATION	5.287482176434954E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999355691814917	WITHOUT_CLASSIFICATION	6.443081850825086E-5	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.99991353398114	WITHOUT_CLASSIFICATION	8.646601885991039E-5	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9998514738375691	WITHOUT_CLASSIFICATION	1.4852616243082685E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9998740869307368	WITHOUT_CLASSIFICATION	1.2591306926321296E-4	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999368272825584	WITHOUT_CLASSIFICATION	6.317271744163149E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999162553060287	WITHOUT_CLASSIFICATION	8.374469397134044E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999355691814917	WITHOUT_CLASSIFICATION	6.443081850825086E-5	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9998824137410134	WITHOUT_CLASSIFICATION	1.1758625898663819E-4	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9998458479324561	WITHOUT_CLASSIFICATION	1.541520675439425E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999698237649236	WITHOUT_CLASSIFICATION	3.0176235076462298E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999505459521891	WITHOUT_CLASSIFICATION	4.945404781087676E-5	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9998480683985614	WITHOUT_CLASSIFICATION	1.5193160143852502E-4	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999425762443932	WITHOUT_CLASSIFICATION	5.742375560693663E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9998033663366247	WITHOUT_CLASSIFICATION	1.9663366337535477E-4	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999297996157538	WITHOUT_CLASSIFICATION	7.020038424619256E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9997900040105375	WITHOUT_CLASSIFICATION	2.0999598946245686E-4	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999151763769274	WITHOUT_CLASSIFICATION	8.482362307257587E-5	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999149233282433	WITHOUT_CLASSIFICATION	8.507667175669498E-5	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999446100701026	WITHOUT_CLASSIFICATION	5.538992989739591E-5	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9998866220296395	WITHOUT_CLASSIFICATION	1.1337797036046297E-4	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999759254598256	WITHOUT_CLASSIFICATION	2.4074540174416468E-5	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999414414455771	WITHOUT_CLASSIFICATION	5.855855442305907E-5	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999830775578545	WITHOUT_CLASSIFICATION	1.6922442145399142E-5	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999111593761124	WITHOUT_CLASSIFICATION	8.884062388764045E-5	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998852098469154	WITHOUT_CLASSIFICATION	1.1479015308457237E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999750031956022	WITHOUT_CLASSIFICATION	2.499680439772979E-5	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999420562931947	WITHOUT_CLASSIFICATION	5.7943706805322804E-5	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998856019988929	WITHOUT_CLASSIFICATION	1.1439800110714764E-4	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.999865814090317	WITHOUT_CLASSIFICATION	1.341859096830414E-4	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999613739956379	WITHOUT_CLASSIFICATION	3.8626004362107476E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9997900040105375	WITHOUT_CLASSIFICATION	2.0999598946245686E-4	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999047890097519	WITHOUT_CLASSIFICATION	9.521099024817989E-5	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9998651212652224	WITHOUT_CLASSIFICATION	1.3487873477764016E-4	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9998452285738298	WITHOUT_CLASSIFICATION	1.5477142617013195E-4	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9998141495839449	WITHOUT_CLASSIFICATION	1.858504160551769E-4	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998976023201981	WITHOUT_CLASSIFICATION	1.0239767980193564E-4	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.999849639168743	WITHOUT_CLASSIFICATION	1.50360831256923E-4	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9998469430486316	WITHOUT_CLASSIFICATION	1.5305695136842343E-4	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9998008399916334	WITHOUT_CLASSIFICATION	1.991600083665972E-4	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9998774843552346	WITHOUT_CLASSIFICATION	1.225156447653346E-4	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9998489976580468	WITHOUT_CLASSIFICATION	1.5100234195329325E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999490764434757	WITHOUT_CLASSIFICATION	5.0923556524279026E-5	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999622325290756	WITHOUT_CLASSIFICATION	3.776747092444247E-5	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999506241453455	WITHOUT_CLASSIFICATION	4.937585465450561E-5	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999868203597819	WITHOUT_CLASSIFICATION	1.3179640217986281E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99988332400697	WITHOUT_CLASSIFICATION	1.1667599303003373E-4	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999969469741277	WITHOUT_CLASSIFICATION	3.053025872258989E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999189311658602	WITHOUT_CLASSIFICATION	8.106883413982018E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999490764434757	WITHOUT_CLASSIFICATION	5.0923556524279026E-5	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999931260539153	WITHOUT_CLASSIFICATION	6.873946084690327E-6	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9998932381088502	WITHOUT_CLASSIFICATION	1.0676189114985256E-4	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999246755811697	WITHOUT_CLASSIFICATION	7.532441883025821E-5	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999146843827388	WITHOUT_CLASSIFICATION	8.531561726116302E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999551447337787	WITHOUT_CLASSIFICATION	4.4855266221368345E-5	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999900589126817	WITHOUT_CLASSIFICATION	9.941087318296001E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99988332400697	WITHOUT_CLASSIFICATION	1.1667599303003373E-4	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999344292528188	WITHOUT_CLASSIFICATION	6.55707471811723E-5	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999682409966945	WITHOUT_CLASSIFICATION	3.1759003305553E-5	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999301003859987	WITHOUT_CLASSIFICATION	6.989961400124368E-5	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977161616892182	WITHOUT_CLASSIFICATION	0.002283838310781726	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964541463080272	WITHOUT_CLASSIFICATION	0.0035458536919727363	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9967800579095664	WITHOUT_CLASSIFICATION	0.0032199420904337078	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999581483579446	WITHOUT_CLASSIFICATION	4.185164205545437E-5	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999581483579446	WITHOUT_CLASSIFICATION	4.185164205545437E-5	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9998726200006713	WITHOUT_CLASSIFICATION	1.273799993287137E-4	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999563854914734	WITHOUT_CLASSIFICATION	4.3614508526499006E-5	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.999870548579493	WITHOUT_CLASSIFICATION	1.294514205069811E-4	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9998842885274136	WITHOUT_CLASSIFICATION	1.1571147258637439E-4	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999472118888671	WITHOUT_CLASSIFICATION	5.278811113276915E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999127509195902	WITHOUT_CLASSIFICATION	8.724908040971032E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931702967584	WITHOUT_CLASSIFICATION	6.829703241597907E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998753743970561	WITHOUT_CLASSIFICATION	1.246256029439793E-4	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999682442593594	WITHOUT_CLASSIFICATION	3.1755740640569304E-5	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999341607653129	WITHOUT_CLASSIFICATION	6.583923468705182E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999127509195902	WITHOUT_CLASSIFICATION	8.724908040971032E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931702967584	WITHOUT_CLASSIFICATION	6.829703241597907E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998753743970561	WITHOUT_CLASSIFICATION	1.246256029439793E-4	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9974837956564027	WITHOUT_CLASSIFICATION	0.002516204343597245	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9998431845323736	WITHOUT_CLASSIFICATION	1.568154676263537E-4	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999799703608598	WITHOUT_CLASSIFICATION	2.002963914010988E-5	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999664624349119	WITHOUT_CLASSIFICATION	3.3537565088077894E-5	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999462228209989	WITHOUT_CLASSIFICATION	5.37771790012009E-5	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999755824812735	WITHOUT_CLASSIFICATION	2.441751872645383E-5	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999115908070398	WITHOUT_CLASSIFICATION	8.84091929602064E-5	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9998271706529992	WITHOUT_CLASSIFICATION	1.728293470007548E-4	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9963477858884258	WITHOUT_CLASSIFICATION	0.0036522141115742303	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9998435026342343	WITHOUT_CLASSIFICATION	1.5649736576574106E-4	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9998985781601415	WITHOUT_CLASSIFICATION	1.0142183985851226E-4	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999593133884241	WITHOUT_CLASSIFICATION	4.068661157597663E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999286791445567	WITHOUT_CLASSIFICATION	7.132085544335096E-5	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999106983966709	WITHOUT_CLASSIFICATION	8.930160332907053E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999502993638066	WITHOUT_CLASSIFICATION	4.970063619335814E-5	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.99985592485588	WITHOUT_CLASSIFICATION	1.4407514411991947E-4	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999265495709899	WITHOUT_CLASSIFICATION	7.34504290100816E-5	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9998892291516908	WITHOUT_CLASSIFICATION	1.1077084830925539E-4	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999873345224346	WITHOUT_CLASSIFICATION	1.2665477565466915E-5	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999958777474186	WITHOUT_CLASSIFICATION	4.1222525813992146E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999980346504047	WITHOUT_CLASSIFICATION	1.9653495953004654E-5	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.99996739869484	WITHOUT_CLASSIFICATION	3.2601305160046804E-5	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999671074256306	WITHOUT_CLASSIFICATION	3.289257436952749E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999881746379022	WITHOUT_CLASSIFICATION	1.1825362097797756E-5	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9997930961191009	WITHOUT_CLASSIFICATION	2.0690388089901967E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998852734902225	WITHOUT_CLASSIFICATION	1.1472650977754299E-4	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999276091338671	WITHOUT_CLASSIFICATION	7.239086613289071E-5	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999951836837981	WITHOUT_CLASSIFICATION	4.8163162018861605E-6	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999288308669397	WITHOUT_CLASSIFICATION	7.11691330602647E-5	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999898983114709	WITHOUT_CLASSIFICATION	1.010168852908838E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998652221250021	WITHOUT_CLASSIFICATION	1.347778749979219E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998652221250021	WITHOUT_CLASSIFICATION	1.347778749979219E-4	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999763297788942	WITHOUT_CLASSIFICATION	2.3670221105835323E-5	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999908833469924	WITHOUT_CLASSIFICATION	9.116653007624565E-6	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999469187806924	WITHOUT_CLASSIFICATION	5.308121930769912E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999687955893435	WITHOUT_CLASSIFICATION	3.1204410656498174E-5	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9998725165470899	WITHOUT_CLASSIFICATION	1.2748345291002013E-4	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999710306411517	WITHOUT_CLASSIFICATION	2.8969358848354145E-5	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9963440960928273	WITHOUT_CLASSIFICATION	0.0036559039071727625	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999474381992953	WITHOUT_CLASSIFICATION	5.2561800704718275E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9998361209337384	WITHOUT_CLASSIFICATION	1.638790662615801E-4	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999473681318897	WITHOUT_CLASSIFICATION	5.2631868110321494E-5	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999630426951972	WITHOUT_CLASSIFICATION	3.695730480272017E-5	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999928773117732	WITHOUT_CLASSIFICATION	7.122688226806873E-5	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999369615144291	WITHOUT_CLASSIFICATION	6.303848557080861E-5	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999370087161868	WITHOUT_CLASSIFICATION	6.299128381315358E-5	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999291564493069	WITHOUT_CLASSIFICATION	7.084355069309953E-5	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999468524079356	WITHOUT_CLASSIFICATION	5.314759206432405E-5	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999588521922759	WITHOUT_CLASSIFICATION	4.114780772409735E-5	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999450370374197	WITHOUT_CLASSIFICATION	5.496296258037738E-5	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999235226888041	WITHOUT_CLASSIFICATION	7.647731119586489E-5	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999361295632679	WITHOUT_CLASSIFICATION	6.38704367320337E-5	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999509313694699	WITHOUT_CLASSIFICATION	4.9068630530143416E-5	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999593221533261	WITHOUT_CLASSIFICATION	4.06778466739817E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998392689693871	WITHOUT_CLASSIFICATION	1.6073103061280754E-4	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999896738492438	WITHOUT_CLASSIFICATION	1.0326150756247323E-5	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999858149021762	WITHOUT_CLASSIFICATION	1.4185097823730147E-5	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9996831749909538	WITHOUT_CLASSIFICATION	3.168250090461582E-4	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999785375555676	WITHOUT_CLASSIFICATION	2.1462444432452244E-5	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999333858524558	WITHOUT_CLASSIFICATION	6.661414754416082E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998392689693871	WITHOUT_CLASSIFICATION	1.6073103061280754E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998392689693871	WITHOUT_CLASSIFICATION	1.6073103061280754E-4	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999908937562526	WITHOUT_CLASSIFICATION	9.106243747413374E-6	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999004885005639	WITHOUT_CLASSIFICATION	9.951149943609538E-5	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999953586390163	WITHOUT_CLASSIFICATION	4.641360983733352E-6	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999818881587345	WITHOUT_CLASSIFICATION	1.8111841265477585E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.99964931778562	WITHOUT_CLASSIFICATION	3.5068221437996083E-4	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999873345224346	WITHOUT_CLASSIFICATION	1.2665477565466915E-5	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999001659961403	WITHOUT_CLASSIFICATION	9.983400385977997E-5	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9998920765271914	WITHOUT_CLASSIFICATION	1.0792347280860899E-4	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.999922699038708	WITHOUT_CLASSIFICATION	7.730096129201139E-5	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998769325910596	WITHOUT_CLASSIFICATION	1.230674089403415E-4	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999861416536953	WITHOUT_CLASSIFICATION	1.3858346304876497E-5	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999217798635929	WITHOUT_CLASSIFICATION	7.822013640716691E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999162433661896	WITHOUT_CLASSIFICATION	8.375663381035425E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999162433661896	WITHOUT_CLASSIFICATION	8.375663381035425E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999917064237333	WITHOUT_CLASSIFICATION	8.29357626671058E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999917064237333	WITHOUT_CLASSIFICATION	8.29357626671058E-5	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998667283649537	WITHOUT_CLASSIFICATION	1.3327163504628158E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998957481015703	WITHOUT_CLASSIFICATION	1.0425189842971017E-4	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999604915255652	WITHOUT_CLASSIFICATION	3.9508474434901164E-5	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998693666102345	WITHOUT_CLASSIFICATION	1.306333897654406E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999794132784587	WITHOUT_CLASSIFICATION	2.0586721541171493E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999479192791425	WITHOUT_CLASSIFICATION	5.208072085760245E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999906082103071	WITHOUT_CLASSIFICATION	9.391789692907526E-5	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999255322918076	WITHOUT_CLASSIFICATION	7.446770819239771E-5	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999018089979583	WITHOUT_CLASSIFICATION	9.819100204172015E-5	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9998900460663599	WITHOUT_CLASSIFICATION	1.0995393364015215E-4	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999371801784799	WITHOUT_CLASSIFICATION	6.281982152009157E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998495449541668	WITHOUT_CLASSIFICATION	1.5045504583324027E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999448544333881	WITHOUT_CLASSIFICATION	5.514556661193351E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999177631533835	WITHOUT_CLASSIFICATION	8.223684661640842E-5	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999019158196356	WITHOUT_CLASSIFICATION	9.808418036444967E-5	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.99984486338237	WITHOUT_CLASSIFICATION	1.5513661763004552E-4	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9998959104076842	WITHOUT_CLASSIFICATION	1.0408959231576256E-4	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9998959104076842	WITHOUT_CLASSIFICATION	1.0408959231576256E-4	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999675076774929	WITHOUT_CLASSIFICATION	3.249232250712955E-5	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9998251537674709	WITHOUT_CLASSIFICATION	1.7484623252892272E-4	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999764933657728	WITHOUT_CLASSIFICATION	2.3506634227264523E-5	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998961747039231	WITHOUT_CLASSIFICATION	1.0382529607690658E-4	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998800449072235	WITHOUT_CLASSIFICATION	1.1995509277646374E-4	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999910347349932	WITHOUT_CLASSIFICATION	8.965265006802066E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975228155972102	WITHOUT_CLASSIFICATION	0.0024771844027897372	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999622828471145	WITHOUT_CLASSIFICATION	3.7717152885443134E-5	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999994352517743	WITHOUT_CLASSIFICATION	5.647482257008072E-6	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999940084937002	WITHOUT_CLASSIFICATION	5.991506299812188E-6	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999726426440356	WITHOUT_CLASSIFICATION	2.7357355964376416E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999339995782479	WITHOUT_CLASSIFICATION	6.600042175212912E-5	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999927802607048	WITHOUT_CLASSIFICATION	7.2197392952231E-6	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998823938349394	WITHOUT_CLASSIFICATION	1.1760616506061726E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.999840064067321	WITHOUT_CLASSIFICATION	1.5993593267914967E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999754978900444	WITHOUT_CLASSIFICATION	2.4502109955681614E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999222673932434	WITHOUT_CLASSIFICATION	7.773260675658034E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999266378206266	WITHOUT_CLASSIFICATION	7.336217937340852E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999582429299267	WITHOUT_CLASSIFICATION	4.175707007319794E-5	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999994290064154	WITHOUT_CLASSIFICATION	5.709935846550742E-7	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999886767528792	WITHOUT_CLASSIFICATION	1.1323247120896776E-5	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999943630972371	WITHOUT_CLASSIFICATION	5.636902762884286E-6	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999725313998109	WITHOUT_CLASSIFICATION	2.7468600189118798E-5	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9998941459835389	WITHOUT_CLASSIFICATION	1.0585401646105926E-4	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999724047458332	WITHOUT_CLASSIFICATION	2.7595254166867775E-5	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999116015581545	WITHOUT_CLASSIFICATION	8.839844184544981E-5	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998796657734388	WITHOUT_CLASSIFICATION	1.2033422656122222E-4	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999940436598607	WITHOUT_CLASSIFICATION	5.956340139385549E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999266474563809	WITHOUT_CLASSIFICATION	7.335254361905831E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999991728563358	WITHOUT_CLASSIFICATION	8.271436642592931E-7	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9998974810235266	WITHOUT_CLASSIFICATION	1.025189764734034E-4	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999024507175652	WITHOUT_CLASSIFICATION	9.754928243473497E-5	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9997834371726051	WITHOUT_CLASSIFICATION	2.1656282739486665E-4	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998634726595275	WITHOUT_CLASSIFICATION	1.365273404725041E-4	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9998648139902725	WITHOUT_CLASSIFICATION	1.3518600972748976E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999913488751974	WITHOUT_CLASSIFICATION	8.65112480268512E-6	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9998582762917271	WITHOUT_CLASSIFICATION	1.4172370827287564E-4	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9998904402173466	WITHOUT_CLASSIFICATION	1.0955978265339942E-4	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9998367957981414	WITHOUT_CLASSIFICATION	1.632042018585963E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999975988112855	WITHOUT_CLASSIFICATION	2.4011887145564955E-6	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9998729875955111	WITHOUT_CLASSIFICATION	1.2701240448886197E-4	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999509698749989	WITHOUT_CLASSIFICATION	4.903012500111189E-5	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999923519103457	WITHOUT_CLASSIFICATION	7.648089654214054E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999688981547186	WITHOUT_CLASSIFICATION	3.110184528146603E-5	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998622394322828	WITHOUT_CLASSIFICATION	1.3776056771721304E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9998614708900458	WITHOUT_CLASSIFICATION	1.3852910995421742E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.999961155755139	WITHOUT_CLASSIFICATION	3.8844244861120444E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999303110243597	WITHOUT_CLASSIFICATION	6.96889756402503E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.999888468071841	WITHOUT_CLASSIFICATION	1.1153192815897362E-4	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999676875490899	WITHOUT_CLASSIFICATION	3.2312450910012716E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998962438800951	WITHOUT_CLASSIFICATION	1.0375611990491812E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999235656510641	WITHOUT_CLASSIFICATION	7.643434893589084E-5	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999340807035362	WITHOUT_CLASSIFICATION	6.591929646387003E-5	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9997943688217351	WITHOUT_CLASSIFICATION	2.0563117826487057E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9998957120724903	WITHOUT_CLASSIFICATION	1.0428792750966358E-4	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998470440136035	WITHOUT_CLASSIFICATION	1.529559863965386E-4	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999134382260583	WITHOUT_CLASSIFICATION	8.656177394171742E-5	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999535090340027	WITHOUT_CLASSIFICATION	4.649096599733551E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9997598374962371	WITHOUT_CLASSIFICATION	2.401625037628208E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999778199733137	WITHOUT_CLASSIFICATION	2.2180026686280485E-5	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999828676424738	WITHOUT_CLASSIFICATION	1.713235752615901E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999900510001494	WITHOUT_CLASSIFICATION	9.94899985060624E-6	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999870451857678	WITHOUT_CLASSIFICATION	1.2954814232141478E-5	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999757055453303	WITHOUT_CLASSIFICATION	2.4294454669720356E-5	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999627791778476	WITHOUT_CLASSIFICATION	3.7220822152425064E-5	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999985048760904	WITHOUT_CLASSIFICATION	1.4951239096053548E-5	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999301473482723	WITHOUT_CLASSIFICATION	6.985265172760413E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9998697092415951	WITHOUT_CLASSIFICATION	1.302907584048439E-4	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999214755073355	WITHOUT_CLASSIFICATION	7.852449266453582E-5	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998878722932231	WITHOUT_CLASSIFICATION	1.1212770677688588E-4	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999632786117869	WITHOUT_CLASSIFICATION	3.6721388213016356E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999702958159845	WITHOUT_CLASSIFICATION	2.970418401554698E-5	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9997961475887727	WITHOUT_CLASSIFICATION	2.0385241122739765E-4	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999932851674965	WITHOUT_CLASSIFICATION	6.714832503492634E-5	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999823303259117	WITHOUT_CLASSIFICATION	1.766967408833895E-5	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998033534792666	WITHOUT_CLASSIFICATION	1.9664652073342654E-4	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999699891055298	WITHOUT_CLASSIFICATION	3.0010894470243823E-5	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999520079868945	WITHOUT_CLASSIFICATION	4.799201310556711E-5	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999536249778338	WITHOUT_CLASSIFICATION	4.637502216618998E-5	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9998511611507434	WITHOUT_CLASSIFICATION	1.4883884925669146E-4	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999013985836532	WITHOUT_CLASSIFICATION	9.860141634682343E-5	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999022577541243	WITHOUT_CLASSIFICATION	9.77422458755957E-5	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9996860976099659	WITHOUT_CLASSIFICATION	3.139023900340817E-4	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9998906162570936	WITHOUT_CLASSIFICATION	1.0938374290637951E-4	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9995504158981943	WITHOUT_CLASSIFICATION	4.4958410180574325E-4	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9997919735532076	WITHOUT_CLASSIFICATION	2.0802644679238487E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9998816419389857	WITHOUT_CLASSIFICATION	1.1835806101434094E-4	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999058352909065	WITHOUT_CLASSIFICATION	9.416470909349435E-5	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999288846784334	WITHOUT_CLASSIFICATION	7.111532156659521E-5	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999567701109939	WITHOUT_CLASSIFICATION	4.322988900600689E-5	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999117541898184	WITHOUT_CLASSIFICATION	8.824581018165552E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999864879011173	WITHOUT_CLASSIFICATION	1.3512098882599915E-5	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9998401071995583	WITHOUT_CLASSIFICATION	1.5989280044173768E-4	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9998182823290266	WITHOUT_CLASSIFICATION	1.8171767097342937E-4	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.99987371651286	WITHOUT_CLASSIFICATION	1.2628348714013857E-4	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999238553066028	WITHOUT_CLASSIFICATION	7.61446933972335E-5	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999812579349386	WITHOUT_CLASSIFICATION	1.8742065061426445E-5	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999461054474235	WITHOUT_CLASSIFICATION	5.389455257642983E-5	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9998924334190266	WITHOUT_CLASSIFICATION	1.0756658097334836E-4	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999031700194614	WITHOUT_CLASSIFICATION	9.682998053858748E-5	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.999903003310313	WITHOUT_CLASSIFICATION	9.699668968707018E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999195048794867	WITHOUT_CLASSIFICATION	8.049512051334028E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999195048794867	WITHOUT_CLASSIFICATION	8.049512051334028E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998788038779767	WITHOUT_CLASSIFICATION	1.2119612202329881E-4	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9998856525924177	WITHOUT_CLASSIFICATION	1.1434740758232577E-4	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999168736414894	WITHOUT_CLASSIFICATION	8.312635851053779E-5	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.999954225676407	WITHOUT_CLASSIFICATION	4.57743235930466E-5	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999810786398552	WITHOUT_CLASSIFICATION	1.8921360144886533E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999587091292576	WITHOUT_CLASSIFICATION	4.1290870742416734E-5	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999210501299934	WITHOUT_CLASSIFICATION	7.894987000656506E-5	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.999913209202523	WITHOUT_CLASSIFICATION	8.679079747696774E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999551159605503	WITHOUT_CLASSIFICATION	4.4884039449743486E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999745854652569	WITHOUT_CLASSIFICATION	2.5414534743204758E-5	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999960553563398	WITHOUT_CLASSIFICATION	3.944643660162765E-6	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999400441395272	WITHOUT_CLASSIFICATION	5.995586047270261E-5	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999516814306252	WITHOUT_CLASSIFICATION	4.8318569374671435E-5	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999491169477195	WITHOUT_CLASSIFICATION	5.08830522806693E-5	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999345538862195	WITHOUT_CLASSIFICATION	6.544611378050329E-5	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998792402069153	WITHOUT_CLASSIFICATION	1.2075979308467037E-4	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998792402069153	WITHOUT_CLASSIFICATION	1.2075979308467037E-4	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999775850012231	WITHOUT_CLASSIFICATION	2.2414998776780745E-5	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999503027117002	WITHOUT_CLASSIFICATION	4.9697288299978185E-5	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999223761820747	WITHOUT_CLASSIFICATION	7.762381792528779E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999559991416437	WITHOUT_CLASSIFICATION	4.4000858356421685E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998495449541668	WITHOUT_CLASSIFICATION	1.5045504583324027E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998454948906158	WITHOUT_CLASSIFICATION	1.5450510938417057E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9998954759314974	WITHOUT_CLASSIFICATION	1.0452406850261191E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999316691001873	WITHOUT_CLASSIFICATION	6.8330899812694E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999316691001873	WITHOUT_CLASSIFICATION	6.8330899812694E-5	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.99994731356819	WITHOUT_CLASSIFICATION	5.2686431809987435E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999235141920557	WITHOUT_CLASSIFICATION	7.648580794425497E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999769306736891	WITHOUT_CLASSIFICATION	2.306932631094896E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999997300290312	WITHOUT_CLASSIFICATION	2.6997096882879727E-7	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.99999795994106	WITHOUT_CLASSIFICATION	2.0400589400026477E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.999922326068194	WITHOUT_CLASSIFICATION	7.767393180595646E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999656746376394	WITHOUT_CLASSIFICATION	3.432536236060908E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998821368853947	WITHOUT_CLASSIFICATION	1.178631146052075E-4	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999401369936657	WITHOUT_CLASSIFICATION	5.986300633437881E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999590871252174	WITHOUT_CLASSIFICATION	4.091287478255772E-5	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999165554810194	WITHOUT_CLASSIFICATION	8.344451898053863E-5	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999065126681823	WITHOUT_CLASSIFICATION	9.348733181771124E-5	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9998311604163063	WITHOUT_CLASSIFICATION	1.688395836937266E-4	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999284231469223	WITHOUT_CLASSIFICATION	7.157685307771186E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999557943627438	WITHOUT_CLASSIFICATION	4.420563725627197E-5	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999915459519407	WITHOUT_CLASSIFICATION	8.45404805931237E-5	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999327909605386	WITHOUT_CLASSIFICATION	6.720903946149166E-5	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999420406136702	WITHOUT_CLASSIFICATION	5.7959386329891185E-5	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9976911596100116	WITHOUT_CLASSIFICATION	0.0023088403899884343	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9998469510354868	WITHOUT_CLASSIFICATION	1.5304896451318035E-4	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998619749775327	WITHOUT_CLASSIFICATION	1.380250224673391E-4	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999577387776917	WITHOUT_CLASSIFICATION	4.226122230840236E-5	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.999925651296811	WITHOUT_CLASSIFICATION	7.43487031890124E-5	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999163521858019	WITHOUT_CLASSIFICATION	8.36478141981622E-5	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9995663399846814	WITHOUT_CLASSIFICATION	4.336600153186712E-4	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999970641152327	WITHOUT_CLASSIFICATION	2.9358847672415785E-6	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999884789107999	WITHOUT_CLASSIFICATION	1.1521089200105564E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9998663935638682	WITHOUT_CLASSIFICATION	1.336064361317972E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999708018607529	WITHOUT_CLASSIFICATION	2.9198139247057086E-5	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999277189427997	WITHOUT_CLASSIFICATION	7.228105720025774E-5	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9998455335248997	WITHOUT_CLASSIFICATION	1.5446647510022885E-4	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999356828882633	WITHOUT_CLASSIFICATION	6.43171117366909E-5	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999777668304887	WITHOUT_CLASSIFICATION	2.22331695113508E-5	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9998416037658684	WITHOUT_CLASSIFICATION	1.5839623413160085E-4	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9998672127941913	WITHOUT_CLASSIFICATION	1.3278720580861778E-4	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9998491350669518	WITHOUT_CLASSIFICATION	1.50864933048138E-4	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9998465121875277	WITHOUT_CLASSIFICATION	1.5348781247226585E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9998465687621432	WITHOUT_CLASSIFICATION	1.534312378568964E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999401040760181	WITHOUT_CLASSIFICATION	5.989592398188204E-5	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999749406248039	WITHOUT_CLASSIFICATION	2.5059375196144686E-5	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999824221363376	WITHOUT_CLASSIFICATION	1.7577863662444687E-5	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9998281462711405	WITHOUT_CLASSIFICATION	1.7185372885955815E-4	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999284753684033	WITHOUT_CLASSIFICATION	7.15246315965815E-5	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999991052716647	WITHOUT_CLASSIFICATION	8.947283353042172E-7	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9998900139062362	WITHOUT_CLASSIFICATION	1.0998609376385341E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9998465687621432	WITHOUT_CLASSIFICATION	1.534312378568964E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999401040760181	WITHOUT_CLASSIFICATION	5.989592398188204E-5	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999283580200561	WITHOUT_CLASSIFICATION	7.16419799438524E-5	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998450609529232	WITHOUT_CLASSIFICATION	1.5493904707670559E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999401181891935	WITHOUT_CLASSIFICATION	5.98818108066422E-5	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999315345902933	WITHOUT_CLASSIFICATION	6.846540970670732E-5	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999817424840406	WITHOUT_CLASSIFICATION	1.8257515959403835E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999865835035471	WITHOUT_CLASSIFICATION	1.3416496452894798E-5	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998722344533516	WITHOUT_CLASSIFICATION	1.2776554664838634E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999206165638741	WITHOUT_CLASSIFICATION	7.938343612594276E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9998302036196133	WITHOUT_CLASSIFICATION	1.697963803866573E-4	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999850317242481	WITHOUT_CLASSIFICATION	1.4968275751813681E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9998302036196133	WITHOUT_CLASSIFICATION	1.697963803866573E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999706079896514	WITHOUT_CLASSIFICATION	2.9392010348590084E-5	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9998852388426804	WITHOUT_CLASSIFICATION	1.147611573195281E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999697577776339	WITHOUT_CLASSIFICATION	3.0242222366102148E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998699899270185	WITHOUT_CLASSIFICATION	1.3001007298153166E-4	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999431408274576	WITHOUT_CLASSIFICATION	5.6859172542493286E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999927656715817	WITHOUT_CLASSIFICATION	7.234328418310243E-5	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999433861933448	WITHOUT_CLASSIFICATION	5.661380665513877E-5	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.999906879175803	WITHOUT_CLASSIFICATION	9.312082419697224E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998313931779977	WITHOUT_CLASSIFICATION	1.6860682200235208E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998955940686265	WITHOUT_CLASSIFICATION	1.0440593137350671E-4	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9998224982494193	WITHOUT_CLASSIFICATION	1.7750175058082074E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998561092375783	WITHOUT_CLASSIFICATION	1.4389076242159754E-4	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999209858824896	WITHOUT_CLASSIFICATION	7.901411751040417E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9963454740980985	WITHOUT_CLASSIFICATION	0.0036545259019014004	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9975468340621011	WITHOUT_CLASSIFICATION	0.002453165937898881	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9998920994013267	WITHOUT_CLASSIFICATION	1.0790059867325465E-4	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.999931000153121	WITHOUT_CLASSIFICATION	6.899984687897162E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9963569836641943	WITHOUT_CLASSIFICATION	0.003643016335805715	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9998602634039038	WITHOUT_CLASSIFICATION	1.3973659609624087E-4	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999666450656834	WITHOUT_CLASSIFICATION	3.335493431652345E-5	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999391829054547	WITHOUT_CLASSIFICATION	6.0817094545334415E-5	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999277983170407	WITHOUT_CLASSIFICATION	7.220168295919379E-5	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999925927312753	WITHOUT_CLASSIFICATION	7.407268724702431E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999912733099539	WITHOUT_CLASSIFICATION	8.726690046099007E-5	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9963552037675776	WITHOUT_CLASSIFICATION	0.003644796232422407	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999395305322593	WITHOUT_CLASSIFICATION	6.046946774064569E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998878882572371	WITHOUT_CLASSIFICATION	1.121117427628938E-4	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999289649379173	WITHOUT_CLASSIFICATION	7.103506208274009E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999064667606391	WITHOUT_CLASSIFICATION	9.353323936086091E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999068038289276	WITHOUT_CLASSIFICATION	9.319617107231122E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998442986622356	WITHOUT_CLASSIFICATION	1.5570133776437225E-4	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999708821441403	WITHOUT_CLASSIFICATION	2.9117855859782766E-5	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9977678243775332	WITHOUT_CLASSIFICATION	0.00223217562246669	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998943798148335	WITHOUT_CLASSIFICATION	1.0562018516648431E-4	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999219475807083	WITHOUT_CLASSIFICATION	7.805241929165878E-5	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9998391814942665	WITHOUT_CLASSIFICATION	1.6081850573342846E-4	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999089378330926	WITHOUT_CLASSIFICATION	9.106216690742648E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998561092375783	WITHOUT_CLASSIFICATION	1.4389076242159754E-4	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9998425125950179	WITHOUT_CLASSIFICATION	1.5748740498213996E-4	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998893948962159	WITHOUT_CLASSIFICATION	1.1060510378421348E-4	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9994610078955598	WITHOUT_CLASSIFICATION	5.389921044400998E-4	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9998761804912464	WITHOUT_CLASSIFICATION	1.2381950875353006E-4	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999583196263677	WITHOUT_CLASSIFICATION	4.168037363230843E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999560666967008	WITHOUT_CLASSIFICATION	4.393330329921779E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998313931779977	WITHOUT_CLASSIFICATION	1.6860682200235208E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998313931779977	WITHOUT_CLASSIFICATION	1.6860682200235208E-4	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999496765473215	WITHOUT_CLASSIFICATION	5.032345267862745E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999348037974385	WITHOUT_CLASSIFICATION	6.51962025615155E-5	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9998491326990012	WITHOUT_CLASSIFICATION	1.5086730099881827E-4	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999525550669882	WITHOUT_CLASSIFICATION	4.7444933011702737E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9998801413410549	WITHOUT_CLASSIFICATION	1.1985865894509084E-4	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999388952217884	WITHOUT_CLASSIFICATION	6.110477821164511E-5	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9998913564576604	WITHOUT_CLASSIFICATION	1.086435423395739E-4	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.999972641503155	WITHOUT_CLASSIFICATION	2.7358496844992595E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999581795693717	WITHOUT_CLASSIFICATION	4.182043062831498E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999726356258133	WITHOUT_CLASSIFICATION	2.7364374186708888E-5	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999611491809773	WITHOUT_CLASSIFICATION	3.885081902266018E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998433062276935	WITHOUT_CLASSIFICATION	1.5669377230648497E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9998493636848459	WITHOUT_CLASSIFICATION	1.5063631515404308E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999726356258133	WITHOUT_CLASSIFICATION	2.7364374186708888E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999267645129414	WITHOUT_CLASSIFICATION	7.323548705855512E-5	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999420518638759	WITHOUT_CLASSIFICATION	5.794813612416064E-5	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.99988815484083	WITHOUT_CLASSIFICATION	1.1184515917000671E-4	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9850216897443875	WITHOUT_CLASSIFICATION	0.014978310255612312	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998433062276935	WITHOUT_CLASSIFICATION	1.5669377230648497E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999366240617155	WITHOUT_CLASSIFICATION	6.337593828460936E-5	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999942305588227	WITHOUT_CLASSIFICATION	5.7694411772059814E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999960854083335	WITHOUT_CLASSIFICATION	3.91459166647811E-6	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999832536046104	WITHOUT_CLASSIFICATION	1.67463953895457E-5	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998428258703277	WITHOUT_CLASSIFICATION	1.5717412967238955E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.999846814191277	WITHOUT_CLASSIFICATION	1.5318580872303607E-4	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.999885133774195	WITHOUT_CLASSIFICATION	1.1486622580508576E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999294152602428	WITHOUT_CLASSIFICATION	7.058473975713519E-5	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999135507147712	WITHOUT_CLASSIFICATION	8.644928522887731E-5	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999771639061931	WITHOUT_CLASSIFICATION	2.283609380698248E-5	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9998230083472023	WITHOUT_CLASSIFICATION	1.769916527976516E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999726356258133	WITHOUT_CLASSIFICATION	2.7364374186708888E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999366240617155	WITHOUT_CLASSIFICATION	6.337593828460936E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999960854083335	WITHOUT_CLASSIFICATION	3.91459166647811E-6	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9998954574046817	WITHOUT_CLASSIFICATION	1.0454259531837076E-4	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999857985020149	WITHOUT_CLASSIFICATION	1.4201497985199121E-5	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999163644784885	WITHOUT_CLASSIFICATION	8.363552151155678E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998433062276935	WITHOUT_CLASSIFICATION	1.5669377230648497E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999566628058303	WITHOUT_CLASSIFICATION	4.333719416976365E-5	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9998667750811909	WITHOUT_CLASSIFICATION	1.3322491880911596E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999267645129414	WITHOUT_CLASSIFICATION	7.323548705855512E-5	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9998942380642591	WITHOUT_CLASSIFICATION	1.0576193574086483E-4	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9998469265815331	WITHOUT_CLASSIFICATION	1.5307341846690193E-4	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9997762845329256	WITHOUT_CLASSIFICATION	2.2371546707442838E-4	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9993902700615475	WITHOUT_CLASSIFICATION	6.097299384524768E-4	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9992346752396818	WITHOUT_CLASSIFICATION	7.653247603181884E-4	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9998650648604421	WITHOUT_CLASSIFICATION	1.3493513955785337E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998699899270185	WITHOUT_CLASSIFICATION	1.3001007298153166E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99993414591731	WITHOUT_CLASSIFICATION	6.585408269000763E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998615900485961	WITHOUT_CLASSIFICATION	1.3840995140383203E-4	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999880793964232	WITHOUT_CLASSIFICATION	1.1920603576777298E-5	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999385812909332	WITHOUT_CLASSIFICATION	6.141870906679259E-5	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999549468515698	WITHOUT_CLASSIFICATION	4.5053148430220647E-5	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999621139800592	WITHOUT_CLASSIFICATION	3.788601994086527E-5	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999675940514051	WITHOUT_CLASSIFICATION	3.2405948594873996E-5	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9998773564604791	WITHOUT_CLASSIFICATION	1.2264353952082369E-4	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999341875126259	WITHOUT_CLASSIFICATION	6.581248737417737E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998615900485961	WITHOUT_CLASSIFICATION	1.3840995140383203E-4	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9998437195563211	WITHOUT_CLASSIFICATION	1.5628044367889702E-4	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9998456592367179	WITHOUT_CLASSIFICATION	1.5434076328222558E-4	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9998319284130799	WITHOUT_CLASSIFICATION	1.6807158692016714E-4	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9998474067444122	WITHOUT_CLASSIFICATION	1.5259325558779233E-4	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.999973999735188	WITHOUT_CLASSIFICATION	2.6000264812097904E-5	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999074914780032	WITHOUT_CLASSIFICATION	9.25085219967433E-5	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998350200023505	WITHOUT_CLASSIFICATION	1.6497999764950835E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999083093912824	WITHOUT_CLASSIFICATION	9.16906087175176E-5	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9953581947944623	WITHOUT_CLASSIFICATION	0.00464180520553769	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9998569681074877	WITHOUT_CLASSIFICATION	1.4303189251223098E-4	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999577540501656	WITHOUT_CLASSIFICATION	4.2245949834240895E-5	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.99995211938618	WITHOUT_CLASSIFICATION	4.788061381998472E-5	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9998498336153995	WITHOUT_CLASSIFICATION	1.5016638460053737E-4	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999835840989173	WITHOUT_CLASSIFICATION	1.6415901082690652E-5	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999955704245228	WITHOUT_CLASSIFICATION	4.429575477274768E-6	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999936752511206	WITHOUT_CLASSIFICATION	6.324748879378599E-6	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999193769842718	WITHOUT_CLASSIFICATION	8.06230157282616E-5	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999018372233542	WITHOUT_CLASSIFICATION	9.816277664583431E-5	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999321701534196	WITHOUT_CLASSIFICATION	6.782984658037171E-5	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9998899905441961	WITHOUT_CLASSIFICATION	1.1000945580387115E-4	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9998847851802325	WITHOUT_CLASSIFICATION	1.1521481976756223E-4	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999808122437303	WITHOUT_CLASSIFICATION	1.918775626974506E-5	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9998781633843752	WITHOUT_CLASSIFICATION	1.2183661562483184E-4	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8146844141114665	WITHOUT_CLASSIFICATION	0.18531558588853358	IMPLEMENTATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999233430602936	WITHOUT_CLASSIFICATION	7.665693970635484E-5	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998945876696209	WITHOUT_CLASSIFICATION	1.054123303790392E-4	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999753241183774	WITHOUT_CLASSIFICATION	2.4675881622656854E-5	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9994268175890114	WITHOUT_CLASSIFICATION	5.731824109886559E-4	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999906909620363	WITHOUT_CLASSIFICATION	9.309037963641018E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999712926177475	WITHOUT_CLASSIFICATION	2.8707382252396543E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999416090132892	WITHOUT_CLASSIFICATION	5.839098671077605E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999842543260362	WITHOUT_CLASSIFICATION	1.574567396370985E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999750750212066	WITHOUT_CLASSIFICATION	2.4924978793397455E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999428553227325	WITHOUT_CLASSIFICATION	5.714467726739042E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999479636359755	WITHOUT_CLASSIFICATION	5.203636402447938E-5	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999466949071026	WITHOUT_CLASSIFICATION	5.3305092897452255E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999428553227325	WITHOUT_CLASSIFICATION	5.714467726739042E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999750750212066	WITHOUT_CLASSIFICATION	2.4924978793397455E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999479636359755	WITHOUT_CLASSIFICATION	5.203636402447938E-5	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999427447477525	WITHOUT_CLASSIFICATION	5.7255252247608536E-5	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999770269458518	WITHOUT_CLASSIFICATION	2.2973054148230847E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999833805076297	WITHOUT_CLASSIFICATION	1.661949237025296E-5	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9998643250771707	WITHOUT_CLASSIFICATION	1.3567492282922784E-4	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999993871822964	WITHOUT_CLASSIFICATION	6.128177035379629E-7	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9850592284816531	WITHOUT_CLASSIFICATION	0.01494077151834708	IMPLEMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999485799384966	WITHOUT_CLASSIFICATION	5.142006150329254E-5	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999079373214401	WITHOUT_CLASSIFICATION	9.20626785599095E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999552203503586	WITHOUT_CLASSIFICATION	4.477964964138496E-5	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999277579993108	WITHOUT_CLASSIFICATION	7.224200068923767E-5	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999039118054878	WITHOUT_CLASSIFICATION	9.608819451224571E-5	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999744682060508	WITHOUT_CLASSIFICATION	2.553179394912708E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997831922119068	WITHOUT_CLASSIFICATION	2.1680778809312796E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9998605438080849	WITHOUT_CLASSIFICATION	1.39456191915192E-4	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.99998108427317	WITHOUT_CLASSIFICATION	1.891572682997334E-5	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999663573880867	WITHOUT_CLASSIFICATION	3.364261191326151E-5	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999927360620985	WITHOUT_CLASSIFICATION	7.2639379016047055E-6	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999489574374385	WITHOUT_CLASSIFICATION	5.104256256140578E-5	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999826512844538	WITHOUT_CLASSIFICATION	1.7348715546125397E-5	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998635988477748	WITHOUT_CLASSIFICATION	1.3640115222521076E-4	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9997600171946062	WITHOUT_CLASSIFICATION	2.399828053938314E-4	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999630466949333	WITHOUT_CLASSIFICATION	3.695330506665312E-5	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998888953803102	WITHOUT_CLASSIFICATION	1.1110461968975533E-4	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999842702364736	WITHOUT_CLASSIFICATION	1.5729763526351496E-5	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998543901560153	WITHOUT_CLASSIFICATION	1.4560984398474775E-4	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998543901560153	WITHOUT_CLASSIFICATION	1.4560984398474775E-4	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999539053453608	WITHOUT_CLASSIFICATION	4.6094654639244854E-5	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999539053453608	WITHOUT_CLASSIFICATION	4.6094654639244854E-5	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9997739004482652	WITHOUT_CLASSIFICATION	2.2609955173474584E-4	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999927360620985	WITHOUT_CLASSIFICATION	7.2639379016047055E-6	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998845445933926	WITHOUT_CLASSIFICATION	1.1545540660738475E-4	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999619411544903	WITHOUT_CLASSIFICATION	3.805884550965604E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999753304836105	WITHOUT_CLASSIFICATION	2.4669516389500554E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999753304836105	WITHOUT_CLASSIFICATION	2.4669516389500554E-4	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999620562929483	WITHOUT_CLASSIFICATION	3.794370705172223E-5	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999746235671562	WITHOUT_CLASSIFICATION	2.5376432843872465E-5	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999597927580742	WITHOUT_CLASSIFICATION	4.020724192578416E-5	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9998796144723131	WITHOUT_CLASSIFICATION	1.2038552768687165E-4	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.999928710749595	WITHOUT_CLASSIFICATION	7.128925040501507E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999944872743223	WITHOUT_CLASSIFICATION	5.512725677714346E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999048643239713	WITHOUT_CLASSIFICATION	9.513567602880339E-5	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9998088898858264	WITHOUT_CLASSIFICATION	1.9111011417359338E-4	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9998556378495677	WITHOUT_CLASSIFICATION	1.4436215043220956E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999798623844193	WITHOUT_CLASSIFICATION	2.0137615580717243E-5	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999301972806494	WITHOUT_CLASSIFICATION	6.9802719350615E-5	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9998466161617103	WITHOUT_CLASSIFICATION	1.5338383828971137E-4	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9998749091882742	WITHOUT_CLASSIFICATION	1.250908117258276E-4	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9998729425191818	WITHOUT_CLASSIFICATION	1.2705748081827506E-4	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9996941218864486	WITHOUT_CLASSIFICATION	3.058781135514572E-4	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999359866565443	WITHOUT_CLASSIFICATION	6.401334345573289E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998907581492182	WITHOUT_CLASSIFICATION	1.0924185078171197E-4	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.999093964037996	WITHOUT_CLASSIFICATION	9.060359620040279E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9998593368684645	WITHOUT_CLASSIFICATION	1.4066313153557976E-4	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999965356586891	WITHOUT_CLASSIFICATION	3.464341310863207E-6	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9998191605206737	WITHOUT_CLASSIFICATION	1.808394793264119E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999277099314559	WITHOUT_CLASSIFICATION	7.229006854410269E-5	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998601257653058	WITHOUT_CLASSIFICATION	1.398742346941328E-4	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999817101460969	WITHOUT_CLASSIFICATION	1.8289853903114545E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999687955893435	WITHOUT_CLASSIFICATION	3.1204410656498174E-5	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999492068018484	WITHOUT_CLASSIFICATION	5.0793198151519295E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998615900485961	WITHOUT_CLASSIFICATION	1.3840995140383203E-4	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999577540501656	WITHOUT_CLASSIFICATION	4.2245949834240895E-5	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999677211817742	WITHOUT_CLASSIFICATION	3.227881822572355E-5	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.999984858191505	WITHOUT_CLASSIFICATION	1.5141808494926923E-5	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998668556937568	WITHOUT_CLASSIFICATION	1.33144306243262E-4	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998822346251375	WITHOUT_CLASSIFICATION	1.1776537486260598E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9998748201069159	WITHOUT_CLASSIFICATION	1.2517989308409455E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9998748201069159	WITHOUT_CLASSIFICATION	1.2517989308409455E-4	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999676700583253	WITHOUT_CLASSIFICATION	3.232994167472739E-5	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9998720731830308	WITHOUT_CLASSIFICATION	1.2792681696914614E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999749621138303	WITHOUT_CLASSIFICATION	2.503788616966045E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999749621138303	WITHOUT_CLASSIFICATION	2.503788616966045E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999401855470018	WITHOUT_CLASSIFICATION	5.981445299818315E-5	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999201094701229	WITHOUT_CLASSIFICATION	7.989052987713491E-5	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999275041311606	WITHOUT_CLASSIFICATION	7.249586883940051E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.99964931778562	WITHOUT_CLASSIFICATION	3.5068221437996083E-4	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999047720883391	WITHOUT_CLASSIFICATION	9.522791166094303E-5	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999765888786846	WITHOUT_CLASSIFICATION	2.3411121315330096E-5	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9998752195248517	WITHOUT_CLASSIFICATION	1.247804751482871E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999331496128765	WITHOUT_CLASSIFICATION	6.685038712347709E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999713982677682	WITHOUT_CLASSIFICATION	2.8601732231916484E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999713982677682	WITHOUT_CLASSIFICATION	2.8601732231916484E-5	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999578622243643	WITHOUT_CLASSIFICATION	4.213777563569622E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999004358551894	WITHOUT_CLASSIFICATION	9.956414481050855E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999004358551894	WITHOUT_CLASSIFICATION	9.956414481050855E-5	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999721219008658	WITHOUT_CLASSIFICATION	2.7878099134207346E-5	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999732088836143	WITHOUT_CLASSIFICATION	2.6791116385758983E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9959712723705239	WITHOUT_CLASSIFICATION	0.004028727629476129	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999588029102174	WITHOUT_CLASSIFICATION	4.119708978244874E-5	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999542257171169	WITHOUT_CLASSIFICATION	4.577428288302763E-5	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999583173802346	WITHOUT_CLASSIFICATION	4.1682619765493936E-5	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999989658074325	WITHOUT_CLASSIFICATION	1.0341925674132469E-6	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999528228552187	WITHOUT_CLASSIFICATION	4.7177144781316126E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999597318399959	WITHOUT_CLASSIFICATION	4.026816000414744E-5	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999040591531966	WITHOUT_CLASSIFICATION	9.594084680331577E-5	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999853627061537	WITHOUT_CLASSIFICATION	1.4637293846299124E-5	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9996454885610194	WITHOUT_CLASSIFICATION	3.545114389806585E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999808637233946	WITHOUT_CLASSIFICATION	1.9136276605362985E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999808637233946	WITHOUT_CLASSIFICATION	1.9136276605362985E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999808637233946	WITHOUT_CLASSIFICATION	1.9136276605362985E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999808637233946	WITHOUT_CLASSIFICATION	1.9136276605362985E-5	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999049505120713	WITHOUT_CLASSIFICATION	9.504948792868792E-5	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999908122757127	WITHOUT_CLASSIFICATION	9.187724287345E-6	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998345013329863	WITHOUT_CLASSIFICATION	1.654986670135888E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9998449696618422	WITHOUT_CLASSIFICATION	1.5503033815775412E-4	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999358442088667	WITHOUT_CLASSIFICATION	6.415579113337871E-5	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9998358217685572	WITHOUT_CLASSIFICATION	1.6417823144282068E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998495449541668	WITHOUT_CLASSIFICATION	1.5045504583324027E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998897762153683	WITHOUT_CLASSIFICATION	1.1022378463177096E-4	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9998275835585079	WITHOUT_CLASSIFICATION	1.724164414921824E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998495449541668	WITHOUT_CLASSIFICATION	1.5045504583324027E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998495449541668	WITHOUT_CLASSIFICATION	1.5045504583324027E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999584193826182	WITHOUT_CLASSIFICATION	4.1580617381862584E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999194332019937	WITHOUT_CLASSIFICATION	8.056679800631636E-5	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9998232107060058	WITHOUT_CLASSIFICATION	1.7678929399430086E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999334680151237	WITHOUT_CLASSIFICATION	6.653198487623293E-5	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.999960806421251	WITHOUT_CLASSIFICATION	3.919357874901873E-5	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.999966391464157	WITHOUT_CLASSIFICATION	3.360853584302947E-5	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999640985107984	WITHOUT_CLASSIFICATION	3.590148920158923E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999334680151237	WITHOUT_CLASSIFICATION	6.653198487623293E-5	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999841425022044	WITHOUT_CLASSIFICATION	1.585749779565694E-5	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999159351586063	WITHOUT_CLASSIFICATION	8.406484139370581E-5	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999470797218496	WITHOUT_CLASSIFICATION	5.292027815044403E-5	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.999888998674542	WITHOUT_CLASSIFICATION	1.1100132545806436E-4	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999577595628668	WITHOUT_CLASSIFICATION	4.2240437133179706E-5	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999458198534572	WITHOUT_CLASSIFICATION	5.418014654279298E-5	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999688676094914	WITHOUT_CLASSIFICATION	3.1132390508658226E-5	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9998662077254937	WITHOUT_CLASSIFICATION	1.337922745063899E-4	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998821498688859	WITHOUT_CLASSIFICATION	1.178501311140713E-4	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999792279121607	WITHOUT_CLASSIFICATION	2.0772087839306392E-5	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998820477059576	WITHOUT_CLASSIFICATION	1.179522940424787E-4	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9998655513059561	WITHOUT_CLASSIFICATION	1.3444869404391718E-4	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999482062408018	WITHOUT_CLASSIFICATION	5.179375919826726E-5	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998475773357521	WITHOUT_CLASSIFICATION	1.524226642478774E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999842215569449	WITHOUT_CLASSIFICATION	1.5778443055070622E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999886246435078	WITHOUT_CLASSIFICATION	1.1375356492206584E-4	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999328007140011	WITHOUT_CLASSIFICATION	6.719928599879937E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999303913701473	WITHOUT_CLASSIFICATION	6.960862985271698E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998008581444208	WITHOUT_CLASSIFICATION	1.9914185557929834E-4	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999303913701473	WITHOUT_CLASSIFICATION	6.960862985271698E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999453278494521	WITHOUT_CLASSIFICATION	5.467215054773729E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999672134404173	WITHOUT_CLASSIFICATION	3.2786559582765014E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9998601324774946	WITHOUT_CLASSIFICATION	1.398675225053319E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999641168499919	WITHOUT_CLASSIFICATION	3.588315000808135E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999328007140011	WITHOUT_CLASSIFICATION	6.719928599879937E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998008581444208	WITHOUT_CLASSIFICATION	1.9914185557929834E-4	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999453278494521	WITHOUT_CLASSIFICATION	5.467215054773729E-5	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999116090250483	WITHOUT_CLASSIFICATION	8.839097495181763E-5	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999099380779535	WITHOUT_CLASSIFICATION	9.006192204656444E-5	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9998729754488864	WITHOUT_CLASSIFICATION	1.270245511135776E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9999031403286266	WITHOUT_CLASSIFICATION	9.685967137331522E-5	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999979618946548	WITHOUT_CLASSIFICATION	2.0381053452029566E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999827884484945	WITHOUT_CLASSIFICATION	1.7211551505429068E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998907581492182	WITHOUT_CLASSIFICATION	1.0924185078171197E-4	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999672134404173	WITHOUT_CLASSIFICATION	3.2786559582765014E-5	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999961575833861	WITHOUT_CLASSIFICATION	3.8424166138762605E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999590981296691	WITHOUT_CLASSIFICATION	4.0901870330976654E-5	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999063924425465	WITHOUT_CLASSIFICATION	9.360755745347356E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998907581492182	WITHOUT_CLASSIFICATION	1.0924185078171197E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998615900485961	WITHOUT_CLASSIFICATION	1.3840995140383203E-4	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999411365153479	WITHOUT_CLASSIFICATION	5.886348465210494E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998907581492182	WITHOUT_CLASSIFICATION	1.0924185078171197E-4	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999547692336924	WITHOUT_CLASSIFICATION	4.523076630748448E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999264944971925	WITHOUT_CLASSIFICATION	7.350550280746764E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998615900485961	WITHOUT_CLASSIFICATION	1.3840995140383203E-4	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9990823578044935	WITHOUT_CLASSIFICATION	9.176421955065424E-4	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9998606396922043	WITHOUT_CLASSIFICATION	1.39360307795687E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999782291463635	WITHOUT_CLASSIFICATION	2.1770853636523705E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9998878359768454	WITHOUT_CLASSIFICATION	1.1216402315458745E-4	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999807373720807	WITHOUT_CLASSIFICATION	1.926262791924223E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999056110886916	WITHOUT_CLASSIFICATION	9.438891130840967E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.999934416875759	WITHOUT_CLASSIFICATION	6.558312424097574E-5	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9998913673166772	WITHOUT_CLASSIFICATION	1.0863268332287041E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999819511943931	WITHOUT_CLASSIFICATION	1.80488056068254E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9959712723705239	WITHOUT_CLASSIFICATION	0.004028727629476129	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9998830347319267	WITHOUT_CLASSIFICATION	1.1696526807326402E-4	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999783836626706	WITHOUT_CLASSIFICATION	2.161633732947248E-5	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9998475562176089	WITHOUT_CLASSIFICATION	1.524437823911879E-4	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998383479399944	WITHOUT_CLASSIFICATION	1.6165206000569974E-4	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999231265519323	WITHOUT_CLASSIFICATION	7.68734480676765E-5	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999778379231105	WITHOUT_CLASSIFICATION	2.216207688955244E-5	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9998881518531354	WITHOUT_CLASSIFICATION	1.1184814686459911E-4	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999706572589571	WITHOUT_CLASSIFICATION	2.934274104302178E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9998997072652998	WITHOUT_CLASSIFICATION	1.0029273470025743E-4	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999619272797011	WITHOUT_CLASSIFICATION	3.807272029888698E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9959712723705239	WITHOUT_CLASSIFICATION	0.004028727629476129	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998967426330286	WITHOUT_CLASSIFICATION	1.0325736697126668E-4	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998810047171731	WITHOUT_CLASSIFICATION	1.1899528282686973E-4	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9998710457295117	WITHOUT_CLASSIFICATION	1.289542704883563E-4	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999354688988212	WITHOUT_CLASSIFICATION	6.45311011787949E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999555623425358	WITHOUT_CLASSIFICATION	4.4437657464255755E-5	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999592947435151	WITHOUT_CLASSIFICATION	4.070525648490047E-5	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9998873661518067	WITHOUT_CLASSIFICATION	1.1263384819321765E-4	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998508219249855	WITHOUT_CLASSIFICATION	1.4917807501445556E-4	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999397537038801	WITHOUT_CLASSIFICATION	6.02462961199923E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9959712723705239	WITHOUT_CLASSIFICATION	0.004028727629476129	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999241558838142	WITHOUT_CLASSIFICATION	7.584411618573561E-5	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9998919645009733	WITHOUT_CLASSIFICATION	1.0803549902663344E-4	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9998417732418943	WITHOUT_CLASSIFICATION	1.5822675810576049E-4	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998733725780513	WITHOUT_CLASSIFICATION	1.2662742194876071E-4	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999498662423968	WITHOUT_CLASSIFICATION	5.0133757603162594E-5	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998272576980993	WITHOUT_CLASSIFICATION	1.727423019007632E-4	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999879631668817	WITHOUT_CLASSIFICATION	1.2036833118260619E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998615900485961	WITHOUT_CLASSIFICATION	1.3840995140383203E-4	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999914789391584	WITHOUT_CLASSIFICATION	8.521060841602491E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999445612524395	WITHOUT_CLASSIFICATION	5.543874756066275E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999445612524395	WITHOUT_CLASSIFICATION	5.543874756066275E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999291254325147	WITHOUT_CLASSIFICATION	7.087456748530151E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999056110886916	WITHOUT_CLASSIFICATION	9.438891130840967E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9998987046217873	WITHOUT_CLASSIFICATION	1.0129537821272252E-4	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999702475269886	WITHOUT_CLASSIFICATION	2.975247301140323E-5	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999984907021928	WITHOUT_CLASSIFICATION	1.5092978072007122E-5	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999357861479603	WITHOUT_CLASSIFICATION	6.421385203973428E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.999886481083656	WITHOUT_CLASSIFICATION	1.1351891634399123E-4	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999263563733884	WITHOUT_CLASSIFICATION	7.364362661152471E-5	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999717328376347	WITHOUT_CLASSIFICATION	2.8267162365244377E-5	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998952919348842	WITHOUT_CLASSIFICATION	1.0470806511576831E-4	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999606162472641	WITHOUT_CLASSIFICATION	3.9383752736022865E-5	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999890747144526	WITHOUT_CLASSIFICATION	1.0925285547381448E-5	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999942074060901	WITHOUT_CLASSIFICATION	5.7925939099140045E-6	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999753089093559	WITHOUT_CLASSIFICATION	2.4691090644109156E-5	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999993708594669	WITHOUT_CLASSIFICATION	6.291405330930554E-7	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999081475028703	WITHOUT_CLASSIFICATION	9.185249712969861E-5	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999640288988049	WITHOUT_CLASSIFICATION	3.597110119504378E-5	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999846406556634	WITHOUT_CLASSIFICATION	1.5359344336661797E-5	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999839931340104	WITHOUT_CLASSIFICATION	1.6006865989581164E-5	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999930468043462	WITHOUT_CLASSIFICATION	6.95319565379894E-6	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999952800774547	WITHOUT_CLASSIFICATION	4.719922545308901E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999275307034926	WITHOUT_CLASSIFICATION	7.246929650729986E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999959008507822	WITHOUT_CLASSIFICATION	4.0991492178094505E-6	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998272576980993	WITHOUT_CLASSIFICATION	1.727423019007632E-4	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999943825550301	WITHOUT_CLASSIFICATION	5.617444969855281E-6	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999703329114774	WITHOUT_CLASSIFICATION	2.9667088522524017E-5	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999853851790239	WITHOUT_CLASSIFICATION	1.4614820976078662E-5	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999379071425121	WITHOUT_CLASSIFICATION	6.20928574879295E-5	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999664253524403	WITHOUT_CLASSIFICATION	3.357464755974278E-5	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999185439152336	WITHOUT_CLASSIFICATION	8.145608476636285E-5	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999872965546251	WITHOUT_CLASSIFICATION	1.2703445374743176E-5	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999871961458342	WITHOUT_CLASSIFICATION	1.280385416587424E-5	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999865637010322	WITHOUT_CLASSIFICATION	1.3436298967898628E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999882141676366	WITHOUT_CLASSIFICATION	1.1785832363286731E-5	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999335392203947	WITHOUT_CLASSIFICATION	6.646077960526085E-5	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999944826842942	WITHOUT_CLASSIFICATION	5.517315705812562E-5	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999010958527957	WITHOUT_CLASSIFICATION	9.890414720424927E-5	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999353010967494	WITHOUT_CLASSIFICATION	6.469890325058485E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999387755253921	WITHOUT_CLASSIFICATION	6.122447460788627E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999387755253921	WITHOUT_CLASSIFICATION	6.122447460788627E-5	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999055721785901	WITHOUT_CLASSIFICATION	9.442782140984037E-5	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9998945523734877	WITHOUT_CLASSIFICATION	1.054476265124213E-4	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.99996002986286	WITHOUT_CLASSIFICATION	3.9970137139914E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.99996002986286	WITHOUT_CLASSIFICATION	3.9970137139914E-5	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999654768910179	WITHOUT_CLASSIFICATION	3.4523108982221306E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999013079656203	WITHOUT_CLASSIFICATION	9.869203437974334E-5	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.999980919308105	WITHOUT_CLASSIFICATION	1.9080691894953918E-5	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999918931518162	WITHOUT_CLASSIFICATION	8.106848183767154E-6	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999392895418565	WITHOUT_CLASSIFICATION	6.0710458143384795E-5	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999392454335206	WITHOUT_CLASSIFICATION	6.0754566479387075E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999739771964877	WITHOUT_CLASSIFICATION	2.6022803512297587E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999739771964877	WITHOUT_CLASSIFICATION	2.6022803512297587E-5	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999391705491422	WITHOUT_CLASSIFICATION	6.082945085773122E-5	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999385456439256	WITHOUT_CLASSIFICATION	6.145435607450805E-5	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9998638417598276	WITHOUT_CLASSIFICATION	1.3615824017246164E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999492321059379	WITHOUT_CLASSIFICATION	5.076789406209888E-5	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999492321059379	WITHOUT_CLASSIFICATION	5.076789406209888E-5	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9998878672898333	WITHOUT_CLASSIFICATION	1.1213271016673101E-4	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999930320859992	WITHOUT_CLASSIFICATION	6.967914000794345E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999807543085057	WITHOUT_CLASSIFICATION	1.9245691494211656E-5	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999429355331413	WITHOUT_CLASSIFICATION	5.7064466858717525E-5	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9998915505343671	WITHOUT_CLASSIFICATION	1.0844946563291432E-4	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.999858002862053	WITHOUT_CLASSIFICATION	1.419971379471063E-4	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999515969162308	WITHOUT_CLASSIFICATION	4.840308376922231E-5	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999264669797799	WITHOUT_CLASSIFICATION	7.353302022004091E-5	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999318721738268	WITHOUT_CLASSIFICATION	6.812782617314714E-5	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998875545608762	WITHOUT_CLASSIFICATION	1.1244543912383563E-4	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.999944949196956	WITHOUT_CLASSIFICATION	5.505080304398644E-5	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999391568716953	WITHOUT_CLASSIFICATION	6.084312830460931E-5	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.99913717120403	WITHOUT_CLASSIFICATION	8.628287959700345E-4	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999425301724949	WITHOUT_CLASSIFICATION	5.746982750510471E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9998439025100544	WITHOUT_CLASSIFICATION	1.56097489945528E-4	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999890667240583	WITHOUT_CLASSIFICATION	1.0933275941788137E-5	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998969311703093	WITHOUT_CLASSIFICATION	1.0306882969069131E-4	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.999974378245412	WITHOUT_CLASSIFICATION	2.5621754587962926E-5	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999758267093434	WITHOUT_CLASSIFICATION	2.417329065665581E-5	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999533679512788	WITHOUT_CLASSIFICATION	4.663204872122971E-5	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999940181766543	WITHOUT_CLASSIFICATION	5.981823345692326E-5	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9998729472050258	WITHOUT_CLASSIFICATION	1.2705279497416191E-4	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9998664650092197	WITHOUT_CLASSIFICATION	1.3353499078021746E-4	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999393338163161	WITHOUT_CLASSIFICATION	6.0666183683904104E-5	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.996304636349555	WITHOUT_CLASSIFICATION	0.003695363650445018	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.999963767518575	WITHOUT_CLASSIFICATION	3.623248142504961E-5	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.999955218180087	WITHOUT_CLASSIFICATION	4.4781819913049276E-5	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.999829137164882	WITHOUT_CLASSIFICATION	1.708628351180012E-4	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999990263743653	WITHOUT_CLASSIFICATION	9.736256346972071E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999502993638066	WITHOUT_CLASSIFICATION	4.970063619335814E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999980346504047	WITHOUT_CLASSIFICATION	1.9653495953004654E-5	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999037125272563	WITHOUT_CLASSIFICATION	9.628747274370149E-5	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999815782616951	WITHOUT_CLASSIFICATION	1.842173830493665E-5	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998345722733173	WITHOUT_CLASSIFICATION	1.654277266827001E-4	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999336081896567	WITHOUT_CLASSIFICATION	6.639181034325915E-5	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998435434578461	WITHOUT_CLASSIFICATION	1.5645654215382682E-4	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9998592427944322	WITHOUT_CLASSIFICATION	1.407572055678461E-4	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999042830534861	WITHOUT_CLASSIFICATION	9.571694651389342E-5	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999365311491899	WITHOUT_CLASSIFICATION	6.346885081004601E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999781232304067	WITHOUT_CLASSIFICATION	2.1876769593392867E-5	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999218032308695	WITHOUT_CLASSIFICATION	7.819676913044013E-5	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9998349075293659	WITHOUT_CLASSIFICATION	1.6509247063414262E-4	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999016504291194	WITHOUT_CLASSIFICATION	9.834957088067973E-5	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9998979441864121	WITHOUT_CLASSIFICATION	1.0205581358781592E-4	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9998488529140327	WITHOUT_CLASSIFICATION	1.511470859671944E-4	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.999856279384173	WITHOUT_CLASSIFICATION	1.4372061582704852E-4	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.999850613274016	WITHOUT_CLASSIFICATION	1.4938672598391008E-4	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.999981258448258	WITHOUT_CLASSIFICATION	1.8741551741954827E-5	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999779061339362	WITHOUT_CLASSIFICATION	2.20938660638305E-5	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999719371918567	WITHOUT_CLASSIFICATION	2.8062808143229074E-5	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999764176500044	WITHOUT_CLASSIFICATION	2.3582349995606382E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9998627599458415	WITHOUT_CLASSIFICATION	1.3724005415853384E-4	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9998217101717656	WITHOUT_CLASSIFICATION	1.7828982823432868E-4	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999824941370202	WITHOUT_CLASSIFICATION	1.7505862979775764E-5	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9998896627803144	WITHOUT_CLASSIFICATION	1.1033721968554073E-4	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999120313929335	WITHOUT_CLASSIFICATION	8.796860706640718E-5	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9998627131535781	WITHOUT_CLASSIFICATION	1.3728684642196168E-4	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999069026129678	WITHOUT_CLASSIFICATION	9.309738703226708E-5	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999643943216275	WITHOUT_CLASSIFICATION	3.560567837248729E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.999928792725514	WITHOUT_CLASSIFICATION	7.120727448597237E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999475466693292	WITHOUT_CLASSIFICATION	5.2453330670794166E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999475466693292	WITHOUT_CLASSIFICATION	5.2453330670794166E-5	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999892251351468	WITHOUT_CLASSIFICATION	1.0774864853214191E-5	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999902802025313	WITHOUT_CLASSIFICATION	9.719797468691227E-6	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999990589234099	WITHOUT_CLASSIFICATION	9.410765901549945E-7	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999865123557071	WITHOUT_CLASSIFICATION	1.3487644292836562E-5	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999579670619221	WITHOUT_CLASSIFICATION	4.203293807792128E-5	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999408841970092	WITHOUT_CLASSIFICATION	5.9115802990650697E-5	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999944827898721	WITHOUT_CLASSIFICATION	5.51721012781321E-6	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999792038577583	WITHOUT_CLASSIFICATION	2.079614224172433E-5	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999623976729003	WITHOUT_CLASSIFICATION	3.760232709967514E-5	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999884511410636	WITHOUT_CLASSIFICATION	1.1548858936313702E-5	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999891180750269	WITHOUT_CLASSIFICATION	1.088192497305911E-5	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9998808906827947	WITHOUT_CLASSIFICATION	1.1910931720530274E-4	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999992876548841	WITHOUT_CLASSIFICATION	7.123451159009087E-6	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999651361709389	WITHOUT_CLASSIFICATION	3.486382906109359E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999189311658602	WITHOUT_CLASSIFICATION	8.106883413982018E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999189311658602	WITHOUT_CLASSIFICATION	8.106883413982018E-5	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999551003559564	WITHOUT_CLASSIFICATION	4.489964404363688E-5	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.999961058257009	WITHOUT_CLASSIFICATION	3.894174299102138E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999416323831807	WITHOUT_CLASSIFICATION	5.836761681931328E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999867733797249	WITHOUT_CLASSIFICATION	1.3226620275095232E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999490764434757	WITHOUT_CLASSIFICATION	5.0923556524279026E-5	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999170524894093	WITHOUT_CLASSIFICATION	8.294751059066501E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9998425886205236	WITHOUT_CLASSIFICATION	1.574113794763596E-4	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9989977767216348	WITHOUT_CLASSIFICATION	0.0010022232783652252	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999676922708229	WITHOUT_CLASSIFICATION	3.230772917698447E-5	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.999966981516727	WITHOUT_CLASSIFICATION	3.301848327295512E-5	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999927868322835	WITHOUT_CLASSIFICATION	7.213167716576579E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999246110802866	WITHOUT_CLASSIFICATION	7.538891971330401E-5	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999977956881056	WITHOUT_CLASSIFICATION	2.2043118944072753E-5	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999718857128729	WITHOUT_CLASSIFICATION	2.8114287127130837E-5	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999858321323666	WITHOUT_CLASSIFICATION	1.4167867633354641E-5	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.999950095386788	WITHOUT_CLASSIFICATION	4.9904613211920276E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999808241059613	WITHOUT_CLASSIFICATION	1.9175894038627512E-5	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999941484195759	WITHOUT_CLASSIFICATION	5.8515804240469885E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999054247500025	WITHOUT_CLASSIFICATION	9.457524999754095E-5	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9998918930533104	WITHOUT_CLASSIFICATION	1.0810694668959782E-4	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999652501881833	WITHOUT_CLASSIFICATION	3.4749811816728386E-5	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999995897987231	WITHOUT_CLASSIFICATION	4.102012769030119E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999965488371108	WITHOUT_CLASSIFICATION	3.4511628892984788E-6	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998442592623842	WITHOUT_CLASSIFICATION	1.557407376158142E-4	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999593133884241	WITHOUT_CLASSIFICATION	4.068661157597663E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999548183434174	WITHOUT_CLASSIFICATION	4.5181656582698245E-5	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.999975666545312	WITHOUT_CLASSIFICATION	2.433345468792361E-5	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999864906081016	WITHOUT_CLASSIFICATION	1.3509391898255401E-5	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999945766609193	WITHOUT_CLASSIFICATION	5.423339080692857E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999822266659226	WITHOUT_CLASSIFICATION	1.7773334077470156E-5	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999910149793957	WITHOUT_CLASSIFICATION	8.985020604377614E-6	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.999952607137687	WITHOUT_CLASSIFICATION	4.739286231302255E-5	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999429169303429	WITHOUT_CLASSIFICATION	5.708306965722457E-5	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999569928807617	WITHOUT_CLASSIFICATION	4.300711923828283E-5	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.999987086408803	WITHOUT_CLASSIFICATION	1.2913591197059442E-5	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999965188798129	WITHOUT_CLASSIFICATION	3.4811201871764624E-6	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999751294134686	WITHOUT_CLASSIFICATION	2.4870586531427824E-5	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999933572200267	WITHOUT_CLASSIFICATION	6.6427799733292E-6	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999049720075102	WITHOUT_CLASSIFICATION	9.502799248977484E-5	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999845843192477	WITHOUT_CLASSIFICATION	1.5415680752237334E-5	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9985946734761123	WITHOUT_CLASSIFICATION	0.0014053265238876686	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9985946734761123	WITHOUT_CLASSIFICATION	0.0014053265238876686	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999892385256568	WITHOUT_CLASSIFICATION	1.076147434313915E-5	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999990211611518	WITHOUT_CLASSIFICATION	9.788388482421707E-7	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999589915599362	WITHOUT_CLASSIFICATION	4.100844006379285E-5	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998954196026998	WITHOUT_CLASSIFICATION	1.0458039730013343E-4	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999892565102642	WITHOUT_CLASSIFICATION	1.0743489735873442E-5	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999653929917076	WITHOUT_CLASSIFICATION	3.460700829238754E-5	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999395431015478	WITHOUT_CLASSIFICATION	6.045689845227784E-5	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999680670016377	WITHOUT_CLASSIFICATION	3.193299836232309E-5	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999829843408995	WITHOUT_CLASSIFICATION	1.7015659100477225E-5	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999433694472916	WITHOUT_CLASSIFICATION	5.6630552708554656E-5	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999273531376973	WITHOUT_CLASSIFICATION	7.26468623026125E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998392689693871	WITHOUT_CLASSIFICATION	1.6073103061280754E-4	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999858859179511	WITHOUT_CLASSIFICATION	1.4114082048777294E-5	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999723537616133	WITHOUT_CLASSIFICATION	2.7646238386667336E-5	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999914964739705	WITHOUT_CLASSIFICATION	8.503526029590642E-6	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999677532609307	WITHOUT_CLASSIFICATION	3.2246739069296E-5	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999464200529108	WITHOUT_CLASSIFICATION	5.3579947089285594E-5	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999943776089948	WITHOUT_CLASSIFICATION	5.622391005198764E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999286202082291	WITHOUT_CLASSIFICATION	7.137979177093501E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999608277283331	WITHOUT_CLASSIFICATION	3.917227166698535E-5	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999834396347872	WITHOUT_CLASSIFICATION	1.6560365212749712E-5	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.999963572172781	WITHOUT_CLASSIFICATION	3.642782721906331E-5	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999688997330772	WITHOUT_CLASSIFICATION	3.110026692278959E-5	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999398423734492	WITHOUT_CLASSIFICATION	6.015762655073816E-5	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9998838395916007	WITHOUT_CLASSIFICATION	1.1616040839942979E-4	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999978634674828	WITHOUT_CLASSIFICATION	2.1365325172050364E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999932762971647	WITHOUT_CLASSIFICATION	6.723702835264865E-6	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999323454953	WITHOUT_CLASSIFICATION	6.765450468322418E-8	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999996659420758	WITHOUT_CLASSIFICATION	3.3405792419343506E-7	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9998771289260324	WITHOUT_CLASSIFICATION	1.2287107396767458E-4	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999686599016855	WITHOUT_CLASSIFICATION	3.134009831459014E-5	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.999982584162872	WITHOUT_CLASSIFICATION	1.741583712792293E-5	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999996656887749	WITHOUT_CLASSIFICATION	3.3431122519731916E-7	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999683393998512	WITHOUT_CLASSIFICATION	3.1660600148815794E-5	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999987071243579	WITHOUT_CLASSIFICATION	1.2928756420972947E-6	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999550243993839	WITHOUT_CLASSIFICATION	4.49756006160914E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.999975965240729	WITHOUT_CLASSIFICATION	2.403475927102755E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999963994447895	WITHOUT_CLASSIFICATION	3.6005552104340322E-6	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999936999590531	WITHOUT_CLASSIFICATION	6.300040946915785E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9998605836541237	WITHOUT_CLASSIFICATION	1.3941634587626945E-4	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999448569852974	WITHOUT_CLASSIFICATION	5.5143014702432214E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999863927442502	WITHOUT_CLASSIFICATION	1.3607255749700674E-5	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.999958647425866	WITHOUT_CLASSIFICATION	4.135257413387192E-5	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999996407994143	WITHOUT_CLASSIFICATION	3.5920058569608616E-7	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999935773934017	WITHOUT_CLASSIFICATION	6.4226065983603995E-6	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9998575920318665	WITHOUT_CLASSIFICATION	1.4240796813354354E-4	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999967865319698	WITHOUT_CLASSIFICATION	3.2134680303663097E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999992876548841	WITHOUT_CLASSIFICATION	7.123451159009087E-6	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.99998856210674	WITHOUT_CLASSIFICATION	1.1437893259951149E-5	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999846308665135	WITHOUT_CLASSIFICATION	1.536913348644187E-5	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.99994640526572	WITHOUT_CLASSIFICATION	5.359473427997397E-5	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999965084272316	WITHOUT_CLASSIFICATION	3.491572768406717E-6	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999961033717004	WITHOUT_CLASSIFICATION	3.896628299638593E-6	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999903485366989	WITHOUT_CLASSIFICATION	9.651463301232112E-6	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999914021835858	WITHOUT_CLASSIFICATION	8.597816414149233E-6	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999872048128219	WITHOUT_CLASSIFICATION	1.2795187178213007E-5	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999371801784799	WITHOUT_CLASSIFICATION	6.281982152009157E-5	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999115433944994	WITHOUT_CLASSIFICATION	8.845660550059058E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999989417924974	WITHOUT_CLASSIFICATION	1.05820750259352E-6	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999477681477478	WITHOUT_CLASSIFICATION	5.223185225231315E-5	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999930077867123	WITHOUT_CLASSIFICATION	6.9922132876629856E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999948983082987	WITHOUT_CLASSIFICATION	5.101691701330353E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998832836479699	WITHOUT_CLASSIFICATION	1.16716352030103E-4	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998635039250269	WITHOUT_CLASSIFICATION	1.364960749731263E-4	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9998770429152607	WITHOUT_CLASSIFICATION	1.2295708473937855E-4	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999819179846443	WITHOUT_CLASSIFICATION	1.8082015355659402E-5	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999904286444232	WITHOUT_CLASSIFICATION	9.571355576814737E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998832836479699	WITHOUT_CLASSIFICATION	1.16716352030103E-4	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9998854659206794	WITHOUT_CLASSIFICATION	1.1453407932054281E-4	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999909454499267	WITHOUT_CLASSIFICATION	9.054550073259733E-6	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999970425707347	WITHOUT_CLASSIFICATION	2.9574292651627417E-6	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999955308781098	WITHOUT_CLASSIFICATION	4.469121890137143E-6	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999200229069994	WITHOUT_CLASSIFICATION	7.997709300055356E-5	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999918105530967	WITHOUT_CLASSIFICATION	8.189446903376606E-6	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999850267835004	WITHOUT_CLASSIFICATION	1.4973216499508464E-5	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9998986579250437	WITHOUT_CLASSIFICATION	1.0134207495620591E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999979675893428	WITHOUT_CLASSIFICATION	2.0324106571999144E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999714039994773	WITHOUT_CLASSIFICATION	2.8596000522731386E-5	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999291365168843	WITHOUT_CLASSIFICATION	7.086348311562608E-5	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998608389133111	WITHOUT_CLASSIFICATION	1.391610866888988E-4	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999507504343408	WITHOUT_CLASSIFICATION	4.924956565924633E-5	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9997422836844192	WITHOUT_CLASSIFICATION	2.577163155808492E-4	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999412367548947	WITHOUT_CLASSIFICATION	5.8763245105424265E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999959008507822	WITHOUT_CLASSIFICATION	4.0991492178094505E-6	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999741756659936	WITHOUT_CLASSIFICATION	2.5824334006454414E-5	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999960314562008	WITHOUT_CLASSIFICATION	3.96854379919078E-6	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9955580768689145	WITHOUT_CLASSIFICATION	0.004441923131085506	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.999971798414294	WITHOUT_CLASSIFICATION	2.8201585705992678E-5	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999704498391384	WITHOUT_CLASSIFICATION	2.9550160861603948E-5	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999887578137253	WITHOUT_CLASSIFICATION	1.124218627462973E-5	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999748907282102	WITHOUT_CLASSIFICATION	2.510927178983637E-5	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999953860785502	WITHOUT_CLASSIFICATION	4.613921449812416E-6	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999738395610942	WITHOUT_CLASSIFICATION	2.6160438905820644E-5	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999936768662034	WITHOUT_CLASSIFICATION	6.323133796577E-6	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999988940116596	WITHOUT_CLASSIFICATION	1.1059883404267146E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999754978900444	WITHOUT_CLASSIFICATION	2.4502109955681614E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999942802175539	WITHOUT_CLASSIFICATION	5.719782446140224E-6	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999993203801517	WITHOUT_CLASSIFICATION	6.796198483042197E-7	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9998816614728033	WITHOUT_CLASSIFICATION	1.1833852719668937E-4	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999160014099965	WITHOUT_CLASSIFICATION	8.399859000343506E-5	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999767863053081	WITHOUT_CLASSIFICATION	2.3213694691911177E-5	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999745028566887	WITHOUT_CLASSIFICATION	2.5497143311315062E-5	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999929877623182	WITHOUT_CLASSIFICATION	7.012237681878404E-6	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999998680264561	WITHOUT_CLASSIFICATION	1.3197354383501945E-7	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999983045233584	WITHOUT_CLASSIFICATION	1.6954766417133597E-6	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999745999808995	WITHOUT_CLASSIFICATION	2.5400019100421156E-5	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999329580888178	WITHOUT_CLASSIFICATION	6.704191118225703E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999864879011173	WITHOUT_CLASSIFICATION	1.3512098882599915E-5	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999451591162561	WITHOUT_CLASSIFICATION	5.484088374385007E-5	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999451591162561	WITHOUT_CLASSIFICATION	5.484088374385007E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999587091292576	WITHOUT_CLASSIFICATION	4.1290870742416734E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999745854652569	WITHOUT_CLASSIFICATION	2.5414534743204758E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999559991416437	WITHOUT_CLASSIFICATION	4.4000858356421685E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.99964931778562	WITHOUT_CLASSIFICATION	3.5068221437996083E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.99964931778562	WITHOUT_CLASSIFICATION	3.5068221437996083E-4	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999513850973591	WITHOUT_CLASSIFICATION	4.861490264075946E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999557943627438	WITHOUT_CLASSIFICATION	4.420563725627197E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9963432259203702	WITHOUT_CLASSIFICATION	0.0036567740796299166	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999577387776917	WITHOUT_CLASSIFICATION	4.226122230840236E-5	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999954810306364	WITHOUT_CLASSIFICATION	4.5189693635664704E-6	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999601997758915	WITHOUT_CLASSIFICATION	3.980022410854049E-5	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999784306310501	WITHOUT_CLASSIFICATION	2.1569368949993186E-5	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999192473271429	WITHOUT_CLASSIFICATION	8.075267285718578E-5	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999695623576	WITHOUT_CLASSIFICATION	3.0437642472301445E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999070320909481	WITHOUT_CLASSIFICATION	9.296790905189259E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999070320909481	WITHOUT_CLASSIFICATION	9.296790905189259E-5	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9998818633383247	WITHOUT_CLASSIFICATION	1.1813666167522123E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998432622107958	WITHOUT_CLASSIFICATION	1.5673778920429534E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.999846814191277	WITHOUT_CLASSIFICATION	1.5318580872303607E-4	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9998980774947792	WITHOUT_CLASSIFICATION	1.0192250522081835E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998615900485961	WITHOUT_CLASSIFICATION	1.3840995140383203E-4	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9998155158871201	WITHOUT_CLASSIFICATION	1.844841128798083E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99993414591731	WITHOUT_CLASSIFICATION	6.585408269000763E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998615900485961	WITHOUT_CLASSIFICATION	1.3840995140383203E-4	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.999968560338884	WITHOUT_CLASSIFICATION	3.143966111586585E-5	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999683496544386	WITHOUT_CLASSIFICATION	3.1650345561383216E-5	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.999867115601291	WITHOUT_CLASSIFICATION	1.3288439870887754E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999739051471448	WITHOUT_CLASSIFICATION	2.6094852855230168E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999714039994773	WITHOUT_CLASSIFICATION	2.8596000522731386E-5	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999219975375512	WITHOUT_CLASSIFICATION	7.800246244886131E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9998553513021616	WITHOUT_CLASSIFICATION	1.4464869783844487E-4	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999880989834032	WITHOUT_CLASSIFICATION	1.1901016596673476E-5	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999108881354393	WITHOUT_CLASSIFICATION	8.911186456079909E-5	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999930879653865	WITHOUT_CLASSIFICATION	6.91203461351063E-5	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999196295474161	WITHOUT_CLASSIFICATION	8.037045258388675E-5	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999024152123684	WITHOUT_CLASSIFICATION	9.758478763162845E-5	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999813742709573	WITHOUT_CLASSIFICATION	1.862572904259943E-5	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999467443902929	WITHOUT_CLASSIFICATION	5.325560970708854E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998549257665748	WITHOUT_CLASSIFICATION	1.4507423342525414E-4	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998549257665748	WITHOUT_CLASSIFICATION	1.4507423342525414E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999334680151237	WITHOUT_CLASSIFICATION	6.653198487623293E-5	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999986488372903	WITHOUT_CLASSIFICATION	1.3511627097376274E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998495449541668	WITHOUT_CLASSIFICATION	1.5045504583324027E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999948144589816	WITHOUT_CLASSIFICATION	5.185541018401876E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999825400456345	WITHOUT_CLASSIFICATION	1.7459954365523926E-5	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999803634731728	WITHOUT_CLASSIFICATION	1.963652682722281E-5	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999842215569449	WITHOUT_CLASSIFICATION	1.5778443055070622E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999970973978108	WITHOUT_CLASSIFICATION	2.902602189180504E-6	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999116090250483	WITHOUT_CLASSIFICATION	8.839097495181763E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999158040627348	WITHOUT_CLASSIFICATION	8.419593726516118E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998907581492182	WITHOUT_CLASSIFICATION	1.0924185078171197E-4	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999986326696273	WITHOUT_CLASSIFICATION	1.367330372731562E-6	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999506213987193	WITHOUT_CLASSIFICATION	4.937860128071539E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999905058459905	WITHOUT_CLASSIFICATION	9.494154009529313E-6	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999567377509759	WITHOUT_CLASSIFICATION	4.326224902410979E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999027553302965	WITHOUT_CLASSIFICATION	9.724466970352187E-5	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999819048942731	WITHOUT_CLASSIFICATION	1.809510572699176E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999603481101376	WITHOUT_CLASSIFICATION	3.965188986246329E-5	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998925225023778	WITHOUT_CLASSIFICATION	1.074774976221918E-4	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.999980440291392	WITHOUT_CLASSIFICATION	1.9559708608028537E-5	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999997385271283	WITHOUT_CLASSIFICATION	2.614728717508281E-7	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999997840370524	WITHOUT_CLASSIFICATION	2.159629476258997E-7	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999807543085057	WITHOUT_CLASSIFICATION	1.9245691494211656E-5	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999958236843	WITHOUT_CLASSIFICATION	4.176315737204128E-9	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999552019970257	WITHOUT_CLASSIFICATION	4.479800297432004E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999552019970257	WITHOUT_CLASSIFICATION	4.479800297432004E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999158512709116	WITHOUT_CLASSIFICATION	8.41487290883487E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999692892669917	WITHOUT_CLASSIFICATION	3.071073300832197E-5	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999975607959214	WITHOUT_CLASSIFICATION	2.4392040786374224E-6	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999989662848984	WITHOUT_CLASSIFICATION	1.0337151017140795E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99988332400697	WITHOUT_CLASSIFICATION	1.1667599303003373E-4	IMPLEMENTATION
