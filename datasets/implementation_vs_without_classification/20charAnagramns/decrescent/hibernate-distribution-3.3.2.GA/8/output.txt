// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9997952197723067	WITHOUT_CLASSIFICATION	2.047802276932713E-4	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9997952197723067	WITHOUT_CLASSIFICATION	2.047802276932713E-4	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9996694389712435	WITHOUT_CLASSIFICATION	3.305610287564485E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9994800586393185	WITHOUT_CLASSIFICATION	5.199413606814313E-4	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9999033951379538	WITHOUT_CLASSIFICATION	9.660486204623089E-5	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.8842102457790333	IMPLEMENTATION	0.11578975422096664	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9990120210547301	WITHOUT_CLASSIFICATION	9.879789452699151E-4	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9040143764412163	WITHOUT_CLASSIFICATION	0.0959856235587838	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.999819092435855	WITHOUT_CLASSIFICATION	1.8090756414496477E-4	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9995596274638531	WITHOUT_CLASSIFICATION	4.403725361469051E-4	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9998852899068927	WITHOUT_CLASSIFICATION	1.1471009310730708E-4	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.9973988061873806	WITHOUT_CLASSIFICATION	0.002601193812619301	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9999162138067006	WITHOUT_CLASSIFICATION	8.37861932994456E-5	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9999162138067006	WITHOUT_CLASSIFICATION	8.37861932994456E-5	IMPLEMENTATION
/**	IMPLEMENTATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.6713559992776802	WITHOUT_CLASSIFICATION	0.3286440007223198	IMPLEMENTATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9241543783654367	IMPLEMENTATION	0.07584562163456325	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.891225948006363	WITHOUT_CLASSIFICATION	0.10877405199363692	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999993607323603	WITHOUT_CLASSIFICATION	6.392676397362261E-7	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9996061730690297	WITHOUT_CLASSIFICATION	3.9382693097037865E-4	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.999541991665527	WITHOUT_CLASSIFICATION	4.5800833447283933E-4	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.99998103443274	WITHOUT_CLASSIFICATION	1.8965567260088127E-5	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9995997232732801	WITHOUT_CLASSIFICATION	4.002767267198676E-4	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9970825543099963	WITHOUT_CLASSIFICATION	0.0029174456900036977	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9970825543099963	WITHOUT_CLASSIFICATION	0.0029174456900036977	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9843087121095037	WITHOUT_CLASSIFICATION	0.015691287890496307	IMPLEMENTATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9997762744073062	WITHOUT_CLASSIFICATION	2.2372559269371713E-4	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9731357123892234	WITHOUT_CLASSIFICATION	0.02686428761077671	IMPLEMENTATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9996607355474415	WITHOUT_CLASSIFICATION	3.3926445255843033E-4	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9991598927401204	WITHOUT_CLASSIFICATION	8.401072598795025E-4	IMPLEMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.999696684456685	WITHOUT_CLASSIFICATION	3.033155433149562E-4	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9994268965583297	WITHOUT_CLASSIFICATION	5.731034416701673E-4	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9999349679357079	WITHOUT_CLASSIFICATION	6.503206429207047E-5	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9996505633457489	WITHOUT_CLASSIFICATION	3.494366542511543E-4	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9965119544865164	WITHOUT_CLASSIFICATION	0.0034880455134836627	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9996506042878811	WITHOUT_CLASSIFICATION	3.493957121188665E-4	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.502952393605075	WITHOUT_CLASSIFICATION	0.4970476063949248	IMPLEMENTATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9997934413761436	WITHOUT_CLASSIFICATION	2.0655862385640764E-4	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9996342824368936	WITHOUT_CLASSIFICATION	3.657175631064588E-4	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8808515187864525	WITHOUT_CLASSIFICATION	0.11914848121354747	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8808515187864525	WITHOUT_CLASSIFICATION	0.11914848121354747	IMPLEMENTATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9884083720200287	WITHOUT_CLASSIFICATION	0.011591627979971281	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999305807828506	WITHOUT_CLASSIFICATION	6.941921714938229E-5	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9997856490849504	WITHOUT_CLASSIFICATION	2.1435091504959846E-4	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9387502167027398	WITHOUT_CLASSIFICATION	0.061249783297260135	IMPLEMENTATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9993591988435931	WITHOUT_CLASSIFICATION	6.408011564069597E-4	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9994800852949233	WITHOUT_CLASSIFICATION	5.199147050766425E-4	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9995356508303567	WITHOUT_CLASSIFICATION	4.643491696433333E-4	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9999049868208577	WITHOUT_CLASSIFICATION	9.501317914229237E-5	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9998427627678755	WITHOUT_CLASSIFICATION	1.5723723212440874E-4	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9994831067343332	WITHOUT_CLASSIFICATION	5.168932656667952E-4	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9995443948241154	WITHOUT_CLASSIFICATION	4.556051758846444E-4	IMPLEMENTATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9997615268721892	WITHOUT_CLASSIFICATION	2.3847312781074666E-4	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9995353925439322	WITHOUT_CLASSIFICATION	4.6460745606784556E-4	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9994766319949839	WITHOUT_CLASSIFICATION	5.233680050161563E-4	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9909820153542304	WITHOUT_CLASSIFICATION	0.009017984645769726	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9994766319949839	WITHOUT_CLASSIFICATION	5.233680050161563E-4	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9955495862569421	IMPLEMENTATION	0.004450413743057916	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9138967920936331	IMPLEMENTATION	0.08610320790636695	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.9994766319949839	WITHOUT_CLASSIFICATION	5.233680050161563E-4	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999848650908124	WITHOUT_CLASSIFICATION	1.5134909187597541E-5	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999840231812056	WITHOUT_CLASSIFICATION	1.597681879441748E-5	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9998440947586307	WITHOUT_CLASSIFICATION	1.5590524136940254E-4	IMPLEMENTATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9999230939046363	WITHOUT_CLASSIFICATION	7.690609536365753E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999247508893991	WITHOUT_CLASSIFICATION	7.524911060082892E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9973096112725585	WITHOUT_CLASSIFICATION	0.0026903887274415204	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9973096112725585	WITHOUT_CLASSIFICATION	0.0026903887274415204	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9973096112725585	WITHOUT_CLASSIFICATION	0.0026903887274415204	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9973096112725585	WITHOUT_CLASSIFICATION	0.0026903887274415204	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9973096112725585	WITHOUT_CLASSIFICATION	0.0026903887274415204	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9973096112725585	WITHOUT_CLASSIFICATION	0.0026903887274415204	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9973096112725585	WITHOUT_CLASSIFICATION	0.0026903887274415204	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9991517520191772	WITHOUT_CLASSIFICATION	8.482479808228699E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9991517520191772	WITHOUT_CLASSIFICATION	8.482479808228699E-4	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999271723512616	WITHOUT_CLASSIFICATION	7.282764873839816E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999809824363067	WITHOUT_CLASSIFICATION	1.9017563693293965E-5	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999700021548473	WITHOUT_CLASSIFICATION	2.999784515265999E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999450544062959	WITHOUT_CLASSIFICATION	5.4945593704152196E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999450544062959	WITHOUT_CLASSIFICATION	5.4945593704152196E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999791434084779	WITHOUT_CLASSIFICATION	2.085659152207781E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999889763203367	WITHOUT_CLASSIFICATION	1.102367966321773E-5	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999867159527256	WITHOUT_CLASSIFICATION	1.3284047274418607E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999518987777177	WITHOUT_CLASSIFICATION	4.8101222282373544E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9979231648338642	WITHOUT_CLASSIFICATION	0.0020768351661357267	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9979231648338642	WITHOUT_CLASSIFICATION	0.0020768351661357267	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9974088285750096	WITHOUT_CLASSIFICATION	0.0025911714249903573	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998785040872734	WITHOUT_CLASSIFICATION	1.2149591272662834E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999705451509655	WITHOUT_CLASSIFICATION	2.9454849034407344E-5	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999746244389003	WITHOUT_CLASSIFICATION	2.5375561099752842E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999939853898328	WITHOUT_CLASSIFICATION	6.014610167207149E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9973462578637102	WITHOUT_CLASSIFICATION	0.002653742136289819	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9973104805145632	WITHOUT_CLASSIFICATION	0.002689519485436778	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999285345136301	WITHOUT_CLASSIFICATION	7.146548636998175E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999286415458076	WITHOUT_CLASSIFICATION	7.135845419236681E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999285945309119	WITHOUT_CLASSIFICATION	7.140546908811537E-5	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999721008397967	WITHOUT_CLASSIFICATION	2.7899160203177457E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999312757918448	WITHOUT_CLASSIFICATION	6.872420815512884E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999312757918448	WITHOUT_CLASSIFICATION	6.872420815512884E-5	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999728476517084	WITHOUT_CLASSIFICATION	2.7152348291536396E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9981693080237413	WITHOUT_CLASSIFICATION	0.001830691976258722	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999772259293819	WITHOUT_CLASSIFICATION	2.2774070618128454E-5	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999961786509649	WITHOUT_CLASSIFICATION	3.821349035108032E-5	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999960086737122	WITHOUT_CLASSIFICATION	3.991326287839525E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999619021217537	WITHOUT_CLASSIFICATION	3.809787824614474E-5	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999316389524576	WITHOUT_CLASSIFICATION	6.836104754239886E-5	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999827746161116	WITHOUT_CLASSIFICATION	1.722538388835635E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999971067059764	WITHOUT_CLASSIFICATION	2.893294023594091E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999425085996616	WITHOUT_CLASSIFICATION	5.7491400338343736E-5	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999483896397526	WITHOUT_CLASSIFICATION	5.161036024726373E-5	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999536415871343	WITHOUT_CLASSIFICATION	4.635841286575944E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999980960419734	WITHOUT_CLASSIFICATION	1.9039580265912484E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9994056321252549	WITHOUT_CLASSIFICATION	5.943678747450986E-4	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999809220139867	WITHOUT_CLASSIFICATION	1.9077986013359503E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999549435356926	WITHOUT_CLASSIFICATION	4.505646430751223E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9994056321252549	WITHOUT_CLASSIFICATION	5.943678747450986E-4	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999549435356926	WITHOUT_CLASSIFICATION	4.505646430751223E-5	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999785339777628	WITHOUT_CLASSIFICATION	2.1466022237189406E-5	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999983787626395	WITHOUT_CLASSIFICATION	1.6212373604064422E-6	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999764356313624	WITHOUT_CLASSIFICATION	2.356436863766437E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999640622183834	WITHOUT_CLASSIFICATION	3.593778161663081E-5	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.999996237061426	WITHOUT_CLASSIFICATION	3.762938574008899E-6	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999911216599597	WITHOUT_CLASSIFICATION	8.878340040210814E-6	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999665770941194	WITHOUT_CLASSIFICATION	3.3422905880561955E-5	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999567100140542	WITHOUT_CLASSIFICATION	4.328998594586392E-5	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999934228787486	WITHOUT_CLASSIFICATION	6.5771212513524294E-6	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9998900918176374	WITHOUT_CLASSIFICATION	1.0990818236258148E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999407225773971	WITHOUT_CLASSIFICATION	5.927742260282944E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999549449939603	WITHOUT_CLASSIFICATION	4.505500603958442E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999974073942886	WITHOUT_CLASSIFICATION	2.592605711326312E-6	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999869321918186	WITHOUT_CLASSIFICATION	1.3067808181383168E-5	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999777305646633	WITHOUT_CLASSIFICATION	2.226943533673125E-5	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999803467723135	WITHOUT_CLASSIFICATION	1.9653227686486974E-5	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999879975993646	WITHOUT_CLASSIFICATION	1.2002400635448983E-5	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999606810547116	WITHOUT_CLASSIFICATION	3.93189452883483E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999955575719849	WITHOUT_CLASSIFICATION	4.442428015066322E-6	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999956516615036	WITHOUT_CLASSIFICATION	4.348338496444799E-6	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999903777850208	WITHOUT_CLASSIFICATION	9.622214979200986E-6	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999924318305593	WITHOUT_CLASSIFICATION	7.568169440775881E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999704295190657	WITHOUT_CLASSIFICATION	2.9570480934325072E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999818181046217	WITHOUT_CLASSIFICATION	1.81818953782807E-5	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9837442726935716	WITHOUT_CLASSIFICATION	0.016255727306428377	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999884850119578	WITHOUT_CLASSIFICATION	1.1514988042136541E-5	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999924209459958	WITHOUT_CLASSIFICATION	7.579054004196784E-6	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9974000715849564	WITHOUT_CLASSIFICATION	0.0025999284150437126	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999936614787757	WITHOUT_CLASSIFICATION	6.33852122437598E-6	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999969252912289	WITHOUT_CLASSIFICATION	3.07470877124571E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999881516839944	WITHOUT_CLASSIFICATION	1.1848316005635785E-5	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999785663807845	WITHOUT_CLASSIFICATION	2.143361921543992E-5	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.999978144509291	WITHOUT_CLASSIFICATION	2.1855490709080276E-5	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999536414223766	WITHOUT_CLASSIFICATION	4.635857762330198E-5	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999690220357327	WITHOUT_CLASSIFICATION	3.097796426720175E-5	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999995679031292	WITHOUT_CLASSIFICATION	4.320968709072898E-7	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999536414223766	WITHOUT_CLASSIFICATION	4.635857762330198E-5	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999876315056563	WITHOUT_CLASSIFICATION	1.2368494343810233E-5	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999674948221668	WITHOUT_CLASSIFICATION	3.25051778331493E-5	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9998345938087453	WITHOUT_CLASSIFICATION	1.6540619125476286E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999957748526412	WITHOUT_CLASSIFICATION	4.225147358760302E-6	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999781312303897	WITHOUT_CLASSIFICATION	2.186876961028754E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999819804321997	WITHOUT_CLASSIFICATION	1.8019567800378958E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999819804321997	WITHOUT_CLASSIFICATION	1.8019567800378958E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999549449939603	WITHOUT_CLASSIFICATION	4.505500603958442E-5	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999984926406351	WITHOUT_CLASSIFICATION	1.5073593648720754E-6	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999402576246033	WITHOUT_CLASSIFICATION	5.9742375396747363E-5	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999893021843144	WITHOUT_CLASSIFICATION	1.0697815685682524E-5	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999780785351788	WITHOUT_CLASSIFICATION	2.192146482126212E-5	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999811840395396	WITHOUT_CLASSIFICATION	1.8815960460360745E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999378914917082	WITHOUT_CLASSIFICATION	6.210850829179865E-5	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999827155670439	WITHOUT_CLASSIFICATION	1.7284432956078215E-5	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999843289135467	WITHOUT_CLASSIFICATION	1.567108645331127E-5	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.999989509781824	WITHOUT_CLASSIFICATION	1.0490218176110636E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999689617366914	WITHOUT_CLASSIFICATION	3.103826330860211E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999689617366914	WITHOUT_CLASSIFICATION	3.103826330860211E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999612700242839	WITHOUT_CLASSIFICATION	3.8729975715972246E-5	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999891160449597	WITHOUT_CLASSIFICATION	1.088395504034617E-5	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999725607625943	WITHOUT_CLASSIFICATION	2.743923740558117E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999689617366914	WITHOUT_CLASSIFICATION	3.103826330860211E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999612700242839	WITHOUT_CLASSIFICATION	3.8729975715972246E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999612700242839	WITHOUT_CLASSIFICATION	3.8729975715972246E-5	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999840461997201	WITHOUT_CLASSIFICATION	1.5953800279907634E-5	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999497324634067	WITHOUT_CLASSIFICATION	5.0267536593279994E-5	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999882279552517	WITHOUT_CLASSIFICATION	1.1772044748319338E-5	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999820811494529	WITHOUT_CLASSIFICATION	1.791885054715877E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999241965483455	WITHOUT_CLASSIFICATION	7.580345165442655E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999241965483455	WITHOUT_CLASSIFICATION	7.580345165442655E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.999965496720407	WITHOUT_CLASSIFICATION	3.450327959300839E-5	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999612490731591	WITHOUT_CLASSIFICATION	3.87509268409227E-5	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999877218215709	WITHOUT_CLASSIFICATION	1.2278178429088614E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999844981421736	WITHOUT_CLASSIFICATION	1.550185782645371E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999844981421736	WITHOUT_CLASSIFICATION	1.550185782645371E-5	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999714730612246	WITHOUT_CLASSIFICATION	2.852693877535913E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999816165207679	WITHOUT_CLASSIFICATION	1.8383479232112937E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999753284399713	WITHOUT_CLASSIFICATION	2.4671560028725218E-5	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999981382481488	WITHOUT_CLASSIFICATION	1.8617518511771415E-6	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.99999104566413	WITHOUT_CLASSIFICATION	8.954335869889556E-6	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999962446817078	WITHOUT_CLASSIFICATION	3.755318292153252E-6	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999517689212185	WITHOUT_CLASSIFICATION	4.82310787814452E-5	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999630186628036	WITHOUT_CLASSIFICATION	3.6981337196384364E-5	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.99995097053676	WITHOUT_CLASSIFICATION	4.902946324000894E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999753284399713	WITHOUT_CLASSIFICATION	2.4671560028725218E-5	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9999296843806292	WITHOUT_CLASSIFICATION	7.031561937067597E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.999988134309629	WITHOUT_CLASSIFICATION	1.1865690371025544E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.999988134309629	WITHOUT_CLASSIFICATION	1.1865690371025544E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999986837100027	WITHOUT_CLASSIFICATION	1.3162899973050282E-6	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999698737008933	WITHOUT_CLASSIFICATION	3.0126299106807345E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999910966308257	WITHOUT_CLASSIFICATION	8.903369174255267E-6	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999991370437416	WITHOUT_CLASSIFICATION	8.629562583872722E-6	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999497439007214	WITHOUT_CLASSIFICATION	5.025609927864206E-5	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9999297238727033	WITHOUT_CLASSIFICATION	7.027612729670447E-5	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9999474308381948	WITHOUT_CLASSIFICATION	5.256916180513539E-5	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999706267416597	WITHOUT_CLASSIFICATION	2.937325834036405E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999900404321352	WITHOUT_CLASSIFICATION	9.959567864769602E-6	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999900404321352	WITHOUT_CLASSIFICATION	9.959567864769602E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999659709069213	WITHOUT_CLASSIFICATION	3.402909307868068E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999247508893991	WITHOUT_CLASSIFICATION	7.524911060082892E-5	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999830721431178	WITHOUT_CLASSIFICATION	1.6927856882201187E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9973096112725585	WITHOUT_CLASSIFICATION	0.0026903887274415204	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.999968722227855	WITHOUT_CLASSIFICATION	3.1277772144925336E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9991517520191772	WITHOUT_CLASSIFICATION	8.482479808228699E-4	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999401848701169	WITHOUT_CLASSIFICATION	5.981512988295979E-5	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999701426468688	WITHOUT_CLASSIFICATION	2.9857353131276074E-5	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999373017297315	WITHOUT_CLASSIFICATION	6.2698270268557E-5	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999475422373821	WITHOUT_CLASSIFICATION	5.245776261794549E-5	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999922105338114	WITHOUT_CLASSIFICATION	7.7894661886808E-6	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9975541663255625	WITHOUT_CLASSIFICATION	0.002445833674437487	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9973330335538824	WITHOUT_CLASSIFICATION	0.0026669664461176274	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999621973456668	WITHOUT_CLASSIFICATION	3.780265433324546E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999809824363067	WITHOUT_CLASSIFICATION	1.9017563693293965E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999656441125853	WITHOUT_CLASSIFICATION	3.435588741470617E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999656441125853	WITHOUT_CLASSIFICATION	3.435588741470617E-5	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999518143178782	WITHOUT_CLASSIFICATION	4.818568212195779E-5	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999170094642583	WITHOUT_CLASSIFICATION	8.29905357417474E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999873484005936	WITHOUT_CLASSIFICATION	1.2651599406430858E-5	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.999938717166603	WITHOUT_CLASSIFICATION	6.128283339694606E-5	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999585828262427	WITHOUT_CLASSIFICATION	4.141717375727899E-5	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999844293182536	WITHOUT_CLASSIFICATION	1.5570681746384502E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999450544062959	WITHOUT_CLASSIFICATION	5.4945593704152196E-5	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999604091092142	WITHOUT_CLASSIFICATION	3.959089078578311E-5	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999622634876534	WITHOUT_CLASSIFICATION	3.77365123465621E-5	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999588932920099	WITHOUT_CLASSIFICATION	4.110670799017652E-5	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999851723898181	WITHOUT_CLASSIFICATION	1.4827610182007508E-5	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999656493650632	WITHOUT_CLASSIFICATION	3.4350634936840926E-5	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999887922313327	WITHOUT_CLASSIFICATION	1.1207768667241517E-5	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999803922983387	WITHOUT_CLASSIFICATION	1.9607701661312877E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999450544062959	WITHOUT_CLASSIFICATION	5.4945593704152196E-5	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999479853882537	WITHOUT_CLASSIFICATION	5.201461174634777E-5	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999670094086824	WITHOUT_CLASSIFICATION	3.299059131750123E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9973096112725585	WITHOUT_CLASSIFICATION	0.0026903887274415204	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9973096112725585	WITHOUT_CLASSIFICATION	0.0026903887274415204	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9991517520191772	WITHOUT_CLASSIFICATION	8.482479808228699E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9991517520191772	WITHOUT_CLASSIFICATION	8.482479808228699E-4	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9973330335538824	WITHOUT_CLASSIFICATION	0.0026669664461176274	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999656441125853	WITHOUT_CLASSIFICATION	3.435588741470617E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999656493650632	WITHOUT_CLASSIFICATION	3.4350634936840926E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999791434084779	WITHOUT_CLASSIFICATION	2.085659152207781E-5	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999253942899992	WITHOUT_CLASSIFICATION	7.460571000079092E-5	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999673081314104	WITHOUT_CLASSIFICATION	3.269186858947722E-5	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9998835498491987	WITHOUT_CLASSIFICATION	1.1645015080130749E-4	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999284503971321	WITHOUT_CLASSIFICATION	7.15496028679191E-5	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999821203404372	WITHOUT_CLASSIFICATION	1.78796595627182E-5	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999442123049815	WITHOUT_CLASSIFICATION	5.578769501845401E-5	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9981033867947474	WITHOUT_CLASSIFICATION	0.00189661320525259	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999431639088551	WITHOUT_CLASSIFICATION	5.683609114505626E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999426654040984	WITHOUT_CLASSIFICATION	5.733459590154091E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999426654040984	WITHOUT_CLASSIFICATION	5.733459590154091E-5	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999792800253998	WITHOUT_CLASSIFICATION	2.071997460014326E-5	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999936379588915	WITHOUT_CLASSIFICATION	6.362041108496101E-6	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999648039573739	WITHOUT_CLASSIFICATION	3.5196042626124574E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999392903596436	WITHOUT_CLASSIFICATION	6.070964035642521E-5	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999686457621692	WITHOUT_CLASSIFICATION	3.1354237830865026E-5	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999776962328587	WITHOUT_CLASSIFICATION	2.230376714135026E-5	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999596799157597	WITHOUT_CLASSIFICATION	4.0320084240239086E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999889763203367	WITHOUT_CLASSIFICATION	1.102367966321773E-5	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999291906606785	WITHOUT_CLASSIFICATION	7.080933932145501E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999391071188168	WITHOUT_CLASSIFICATION	6.0892881183191884E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999391071188168	WITHOUT_CLASSIFICATION	6.0892881183191884E-5	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999258601217351	WITHOUT_CLASSIFICATION	7.41398782648737E-5	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999747658224598	WITHOUT_CLASSIFICATION	2.5234177540160615E-5	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999258601217351	WITHOUT_CLASSIFICATION	7.41398782648737E-5	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999874025003047	WITHOUT_CLASSIFICATION	1.2597499695194161E-5	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9976852565125565	WITHOUT_CLASSIFICATION	0.0023147434874435944	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9991517520191772	WITHOUT_CLASSIFICATION	8.482479808228699E-4	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9973330335538824	WITHOUT_CLASSIFICATION	0.0026669664461176274	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999809824363067	WITHOUT_CLASSIFICATION	1.9017563693293965E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999656493650632	WITHOUT_CLASSIFICATION	3.4350634936840926E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999656493650632	WITHOUT_CLASSIFICATION	3.4350634936840926E-5	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999891204141581	WITHOUT_CLASSIFICATION	1.0879585841831786E-5	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999891204141581	WITHOUT_CLASSIFICATION	1.0879585841831786E-5	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999233307638844	WITHOUT_CLASSIFICATION	7.666923611559997E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999321227946463	WITHOUT_CLASSIFICATION	6.787720535376431E-5	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999787978195478	WITHOUT_CLASSIFICATION	2.1202180452200818E-5	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999399056269785	WITHOUT_CLASSIFICATION	6.009437302138239E-5	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999883356280853	WITHOUT_CLASSIFICATION	1.1664371914627781E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999873426624707	WITHOUT_CLASSIFICATION	1.2657337529435295E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999518987777177	WITHOUT_CLASSIFICATION	4.8101222282373544E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999518987777177	WITHOUT_CLASSIFICATION	4.8101222282373544E-5	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9997459085239653	WITHOUT_CLASSIFICATION	2.5409147603471866E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999555836107609	WITHOUT_CLASSIFICATION	4.44163892390491E-5	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9982920605135056	WITHOUT_CLASSIFICATION	0.001707939486494484	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.997333040087612	WITHOUT_CLASSIFICATION	0.002666959912388012	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9977367652714322	WITHOUT_CLASSIFICATION	0.0022632347285677984	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9980668765751406	WITHOUT_CLASSIFICATION	0.0019331234248594225	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9979231648338642	WITHOUT_CLASSIFICATION	0.0020768351661357267	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.997344233094929	WITHOUT_CLASSIFICATION	0.002655766905070886	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.997344233094929	WITHOUT_CLASSIFICATION	0.002655766905070886	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9974088285750096	WITHOUT_CLASSIFICATION	0.0025911714249903573	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9974088285750096	WITHOUT_CLASSIFICATION	0.0025911714249903573	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.999928729432726	WITHOUT_CLASSIFICATION	7.127056727391418E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.999928729432726	WITHOUT_CLASSIFICATION	7.127056727391418E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999959517188539	WITHOUT_CLASSIFICATION	4.0482811460952675E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999959517188539	WITHOUT_CLASSIFICATION	4.0482811460952675E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999518987777177	WITHOUT_CLASSIFICATION	4.8101222282373544E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9979231648338642	WITHOUT_CLASSIFICATION	0.0020768351661357267	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.997344233094929	WITHOUT_CLASSIFICATION	0.002655766905070886	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.997344233094929	WITHOUT_CLASSIFICATION	0.002655766905070886	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9974088285750096	WITHOUT_CLASSIFICATION	0.0025911714249903573	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.999928729432726	WITHOUT_CLASSIFICATION	7.127056727391418E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.999928729432726	WITHOUT_CLASSIFICATION	7.127056727391418E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999959517188539	WITHOUT_CLASSIFICATION	4.0482811460952675E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999967191048523	WITHOUT_CLASSIFICATION	3.280895147699818E-5	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999359991769536	WITHOUT_CLASSIFICATION	6.400082304632513E-5	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999447546668672	WITHOUT_CLASSIFICATION	5.524533313275796E-5	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999927128220347	WITHOUT_CLASSIFICATION	7.287177965208711E-6	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999492311999892	WITHOUT_CLASSIFICATION	5.076880001079294E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9973201135853734	WITHOUT_CLASSIFICATION	0.002679886414626549	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999492091322502	WITHOUT_CLASSIFICATION	5.0790867749946354E-5	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999834202225606	WITHOUT_CLASSIFICATION	1.657977743941765E-5	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999883127233612	WITHOUT_CLASSIFICATION	1.1687276638752016E-5	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.999993532072431	WITHOUT_CLASSIFICATION	6.467927568928289E-6	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999655286224179	WITHOUT_CLASSIFICATION	3.447137758201856E-5	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999739246349603	WITHOUT_CLASSIFICATION	2.607536503977531E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999549449939603	WITHOUT_CLASSIFICATION	4.505500603958442E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9973201135853734	WITHOUT_CLASSIFICATION	0.002679886414626549	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9973115180489505	WITHOUT_CLASSIFICATION	0.0026884819510494856	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9973115180489505	WITHOUT_CLASSIFICATION	0.0026884819510494856	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999837020321113	WITHOUT_CLASSIFICATION	1.62979678887721E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999974672202464	WITHOUT_CLASSIFICATION	2.532779753617668E-6	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999974672202464	WITHOUT_CLASSIFICATION	2.532779753617668E-6	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999873658403445	WITHOUT_CLASSIFICATION	1.263415965549428E-5	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999789435201821	WITHOUT_CLASSIFICATION	2.105647981782444E-5	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999762047768864	WITHOUT_CLASSIFICATION	2.379522311350602E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999847734963019	WITHOUT_CLASSIFICATION	1.5226503698090662E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999847734963019	WITHOUT_CLASSIFICATION	1.5226503698090662E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999939853898328	WITHOUT_CLASSIFICATION	6.014610167207149E-6	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999935658204541	WITHOUT_CLASSIFICATION	6.434179545937559E-6	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999935658204541	WITHOUT_CLASSIFICATION	6.434179545937559E-6	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999839997181699	WITHOUT_CLASSIFICATION	1.6000281830089074E-5	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999763950062108	WITHOUT_CLASSIFICATION	2.3604993789169368E-5	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999689120017764	WITHOUT_CLASSIFICATION	3.108799822363061E-5	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999287057123833	WITHOUT_CLASSIFICATION	7.12942876166479E-5	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.997345037825044	WITHOUT_CLASSIFICATION	0.0026549621749558903	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9973462578637102	WITHOUT_CLASSIFICATION	0.002653742136289819	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9880630508496547	WITHOUT_CLASSIFICATION	0.01193694915034535	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999232744972489	WITHOUT_CLASSIFICATION	7.672550275113206E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999685178014551	WITHOUT_CLASSIFICATION	3.14821985448405E-5	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999855578024632	WITHOUT_CLASSIFICATION	1.4442197536787234E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999955522592171	WITHOUT_CLASSIFICATION	4.447740782838601E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999464070930315	WITHOUT_CLASSIFICATION	5.359290696857398E-5	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999615896841866	WITHOUT_CLASSIFICATION	3.8410315813447564E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999291648478598	WITHOUT_CLASSIFICATION	7.083515214023075E-5	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9973580043546466	WITHOUT_CLASSIFICATION	0.0026419956453533444	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999269434616482	WITHOUT_CLASSIFICATION	7.305653835174258E-5	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999232542081884	WITHOUT_CLASSIFICATION	7.674579181162837E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999285945309119	WITHOUT_CLASSIFICATION	7.140546908811537E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999288554756082	WITHOUT_CLASSIFICATION	7.114452439180458E-5	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999721008397967	WITHOUT_CLASSIFICATION	2.7899160203177457E-5	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999605128738349	WITHOUT_CLASSIFICATION	3.9487126165050775E-5	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999525396091651	WITHOUT_CLASSIFICATION	4.746039083482724E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9973134258809635	WITHOUT_CLASSIFICATION	0.002686574119036461	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9973462578637102	WITHOUT_CLASSIFICATION	0.002653742136289819	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999288554756082	WITHOUT_CLASSIFICATION	7.114452439180458E-5	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999605128738349	WITHOUT_CLASSIFICATION	3.9487126165050775E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9973134258809635	WITHOUT_CLASSIFICATION	0.002686574119036461	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999498760373274	WITHOUT_CLASSIFICATION	5.012396267251517E-5	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999479236886962	WITHOUT_CLASSIFICATION	5.2076311303829686E-5	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999353593888572	WITHOUT_CLASSIFICATION	6.46406111428063E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999312757918448	WITHOUT_CLASSIFICATION	6.872420815512884E-5	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999310575370542	WITHOUT_CLASSIFICATION	6.894246294577612E-5	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999621190452511	WITHOUT_CLASSIFICATION	3.788095474893516E-5	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999386196877252	WITHOUT_CLASSIFICATION	6.138031227476999E-5	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999934955228109	WITHOUT_CLASSIFICATION	6.50447718914965E-6	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999538030662732	WITHOUT_CLASSIFICATION	4.619693372679345E-5	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999565735850282	WITHOUT_CLASSIFICATION	4.342641497182044E-5	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999975015625357	WITHOUT_CLASSIFICATION	2.4984374643162694E-5	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999725129119257	WITHOUT_CLASSIFICATION	2.7487088074222106E-5	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999630535973539	WITHOUT_CLASSIFICATION	3.6946402646173586E-5	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999792990623899	WITHOUT_CLASSIFICATION	2.0700937610168516E-5	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999286614239481	WITHOUT_CLASSIFICATION	7.133857605192352E-5	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9981693080237413	WITHOUT_CLASSIFICATION	0.001830691976258722	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999733682125335	WITHOUT_CLASSIFICATION	2.6631787466636243E-5	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999288554756082	WITHOUT_CLASSIFICATION	7.114452439180458E-5	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999332368865266	WITHOUT_CLASSIFICATION	6.676311347335376E-5	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999597922819798	WITHOUT_CLASSIFICATION	4.020771802015941E-5	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999727535707549	WITHOUT_CLASSIFICATION	2.724642924509689E-5	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999556239741121	WITHOUT_CLASSIFICATION	4.437602588796078E-5	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999402449735478	WITHOUT_CLASSIFICATION	5.975502645210856E-5	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999721243189621	WITHOUT_CLASSIFICATION	2.787568103800137E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999993457148618	WITHOUT_CLASSIFICATION	6.542851382103378E-6	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999905326289514	WITHOUT_CLASSIFICATION	9.467371048493047E-6	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.999939848362196	WITHOUT_CLASSIFICATION	6.015163780400893E-5	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999285671850757	WITHOUT_CLASSIFICATION	7.143281492430146E-5	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999223785201838	WITHOUT_CLASSIFICATION	7.762147981611264E-5	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9991337898183192	WITHOUT_CLASSIFICATION	8.662101816807693E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999961786509649	WITHOUT_CLASSIFICATION	3.821349035108032E-5	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999755165874722	WITHOUT_CLASSIFICATION	2.4483412527799856E-5	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999611666669681	WITHOUT_CLASSIFICATION	3.883333303188205E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9999336195768758	WITHOUT_CLASSIFICATION	6.638042312431606E-5	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999322644234505	WITHOUT_CLASSIFICATION	6.77355765494264E-5	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999466796677741	WITHOUT_CLASSIFICATION	5.3320332226034326E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999563956178878	WITHOUT_CLASSIFICATION	4.3604382112109584E-5	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999995465083955	WITHOUT_CLASSIFICATION	4.534916045277244E-7	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999901162960664	WITHOUT_CLASSIFICATION	9.883703933580175E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999720806086815	WITHOUT_CLASSIFICATION	2.79193913184969E-5	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.999939417578864	WITHOUT_CLASSIFICATION	6.058242113595025E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999355240460609	WITHOUT_CLASSIFICATION	6.447595393909403E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999355240460609	WITHOUT_CLASSIFICATION	6.447595393909403E-5	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999267845334959	WITHOUT_CLASSIFICATION	7.32154665040686E-5	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999498183042209	WITHOUT_CLASSIFICATION	5.0181695779003714E-5	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999864422101259	WITHOUT_CLASSIFICATION	1.3557789874066154E-5	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999606996174001	WITHOUT_CLASSIFICATION	3.930038259997026E-5	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999724732833387	WITHOUT_CLASSIFICATION	2.752671666131798E-5	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999651116247148	WITHOUT_CLASSIFICATION	3.4888375285226244E-5	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999341300110967	WITHOUT_CLASSIFICATION	6.586998890329895E-5	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999959499341085	WITHOUT_CLASSIFICATION	4.050065891491664E-6	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999665120191099	WITHOUT_CLASSIFICATION	3.348798088999987E-5	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999336887445336	WITHOUT_CLASSIFICATION	6.63112554663941E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999365683517704	WITHOUT_CLASSIFICATION	6.343164822964722E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.999964031179005	WITHOUT_CLASSIFICATION	3.5968820994952196E-5	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999887694620749	WITHOUT_CLASSIFICATION	1.1230537925115309E-5	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999801461341221	WITHOUT_CLASSIFICATION	1.9853865877868373E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999509417182044	WITHOUT_CLASSIFICATION	4.90582817954835E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999605759979314	WITHOUT_CLASSIFICATION	3.942400206851702E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999994275847306	WITHOUT_CLASSIFICATION	5.724152694013941E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999985129374323	WITHOUT_CLASSIFICATION	1.4870625676976282E-5	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999698822729793	WITHOUT_CLASSIFICATION	3.0117727020609333E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999626311234033	WITHOUT_CLASSIFICATION	3.736887659663671E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9977892603212409	WITHOUT_CLASSIFICATION	0.0022107396787590166	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9977892603212409	WITHOUT_CLASSIFICATION	0.0022107396787590166	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999309264601983	WITHOUT_CLASSIFICATION	6.907353980168739E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999309264601983	WITHOUT_CLASSIFICATION	6.907353980168739E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999720806086815	WITHOUT_CLASSIFICATION	2.79193913184969E-5	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999392255703534	WITHOUT_CLASSIFICATION	6.077442964665987E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999436722254366	WITHOUT_CLASSIFICATION	5.6327774563482565E-5	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999400619773589	WITHOUT_CLASSIFICATION	5.993802264128593E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999659709069213	WITHOUT_CLASSIFICATION	3.402909307868068E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999436722254366	WITHOUT_CLASSIFICATION	5.6327774563482565E-5	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999400619773589	WITHOUT_CLASSIFICATION	5.993802264128593E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999749834232802	WITHOUT_CLASSIFICATION	2.501657671978645E-5	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999750198880818	WITHOUT_CLASSIFICATION	2.4980111918158597E-5	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.999986234696211	WITHOUT_CLASSIFICATION	1.3765303789132353E-5	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999804376279156	WITHOUT_CLASSIFICATION	1.9562372084422914E-5	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999933963027557	WITHOUT_CLASSIFICATION	6.603697244300795E-6	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999890012168589	WITHOUT_CLASSIFICATION	1.0998783141222838E-5	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999553401883227	WITHOUT_CLASSIFICATION	4.465981167739878E-5	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999483581371991	WITHOUT_CLASSIFICATION	5.164186280105884E-5	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999874099869546	WITHOUT_CLASSIFICATION	1.2590013045491831E-5	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999944139734844	WITHOUT_CLASSIFICATION	5.586026515484296E-6	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999944035334983	WITHOUT_CLASSIFICATION	5.596466501637724E-6	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999886892723325	WITHOUT_CLASSIFICATION	1.1310727667455307E-5	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.999963387121289	WITHOUT_CLASSIFICATION	3.661287871113534E-5	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999222181210681	WITHOUT_CLASSIFICATION	7.778187893188882E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999659709069213	WITHOUT_CLASSIFICATION	3.402909307868068E-5	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999371513504598	WITHOUT_CLASSIFICATION	6.284864954022933E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999383747144461	WITHOUT_CLASSIFICATION	6.162528555381446E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999383747144461	WITHOUT_CLASSIFICATION	6.162528555381446E-5	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999831215581582	WITHOUT_CLASSIFICATION	1.6878441841808726E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999749834232802	WITHOUT_CLASSIFICATION	2.501657671978645E-5	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999712687265521	WITHOUT_CLASSIFICATION	2.8731273447962465E-5	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999730094782401	WITHOUT_CLASSIFICATION	2.699052175995625E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9982140714817307	WITHOUT_CLASSIFICATION	0.0017859285182692023	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999975681270989	WITHOUT_CLASSIFICATION	2.431872901099392E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999011562518668	WITHOUT_CLASSIFICATION	9.884374813310797E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999749834232802	WITHOUT_CLASSIFICATION	2.501657671978645E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999975681270989	WITHOUT_CLASSIFICATION	2.431872901099392E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999011562518668	WITHOUT_CLASSIFICATION	9.884374813310797E-5	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999767948962649	WITHOUT_CLASSIFICATION	2.3205103735064062E-5	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999335309905729	WITHOUT_CLASSIFICATION	6.646900942714991E-5	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999954631915612	WITHOUT_CLASSIFICATION	4.5368084387345095E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999749834232802	WITHOUT_CLASSIFICATION	2.501657671978645E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999749834232802	WITHOUT_CLASSIFICATION	2.501657671978645E-5	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999439711412491	WITHOUT_CLASSIFICATION	5.6028858750974254E-5	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999419863627343	WITHOUT_CLASSIFICATION	5.801363726562551E-5	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999621663250358	WITHOUT_CLASSIFICATION	3.783367496423152E-5	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999805994327481	WITHOUT_CLASSIFICATION	1.9400567251863368E-5	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.999981311740277	WITHOUT_CLASSIFICATION	1.868825972299747E-5	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999775747308092	WITHOUT_CLASSIFICATION	2.242526919082401E-5	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999676424284226	WITHOUT_CLASSIFICATION	3.235757157742337E-5	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999654211160217	WITHOUT_CLASSIFICATION	3.457888397820254E-5	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999734362180893	WITHOUT_CLASSIFICATION	2.6563781910668482E-5	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999475729797225	WITHOUT_CLASSIFICATION	5.242702027761775E-5	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999898925028909	WITHOUT_CLASSIFICATION	1.010749710908829E-5	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999956353915211	WITHOUT_CLASSIFICATION	4.364608478900128E-5	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999844824873381	WITHOUT_CLASSIFICATION	1.5517512661944954E-5	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999177443393095	WITHOUT_CLASSIFICATION	8.225566069052377E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999240533189899	WITHOUT_CLASSIFICATION	7.594668101015279E-5	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.999988344297873	WITHOUT_CLASSIFICATION	1.1655702127039861E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999971067059764	WITHOUT_CLASSIFICATION	2.893294023594091E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999828403631468	WITHOUT_CLASSIFICATION	1.715963685315498E-5	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999641864301227	WITHOUT_CLASSIFICATION	3.581356987723224E-5	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999670904786321	WITHOUT_CLASSIFICATION	3.29095213678786E-5	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999407514197776	WITHOUT_CLASSIFICATION	5.924858022236665E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9999357280282314	WITHOUT_CLASSIFICATION	6.427197176855711E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9999357280282314	WITHOUT_CLASSIFICATION	6.427197176855711E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999971067059764	WITHOUT_CLASSIFICATION	2.893294023594091E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999764120392725	WITHOUT_CLASSIFICATION	2.358796072750725E-5	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999828529990847	WITHOUT_CLASSIFICATION	1.7147000915346067E-5	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999385507710363	WITHOUT_CLASSIFICATION	6.14492289636896E-5	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999614890659211	WITHOUT_CLASSIFICATION	3.8510934078947595E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999933861147287	WITHOUT_CLASSIFICATION	6.61388527132613E-6	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999911194455321	WITHOUT_CLASSIFICATION	8.880554467918691E-6	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999873802016884	WITHOUT_CLASSIFICATION	1.2619798311577561E-5	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999311618410568	WITHOUT_CLASSIFICATION	6.883815894322457E-5	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999961058746226	WITHOUT_CLASSIFICATION	3.894125377383533E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597176826899	WITHOUT_CLASSIFICATION	4.0282317310089924E-5	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999009172682057	WITHOUT_CLASSIFICATION	9.908273179430622E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999604018024805	WITHOUT_CLASSIFICATION	3.959819751962884E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999807314129139	WITHOUT_CLASSIFICATION	1.9268587086123896E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999347736459961	WITHOUT_CLASSIFICATION	6.522635400389472E-5	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999911217404647	WITHOUT_CLASSIFICATION	8.8782595353277E-6	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999863488858336	WITHOUT_CLASSIFICATION	1.3651114166361744E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999528081211425	WITHOUT_CLASSIFICATION	4.719187885756047E-5	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999887391036157	WITHOUT_CLASSIFICATION	1.1260896384184473E-5	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999272880408769	WITHOUT_CLASSIFICATION	7.27119591230208E-5	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966403837973	WITHOUT_CLASSIFICATION	3.359616202690832E-5	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999889491956624	WITHOUT_CLASSIFICATION	1.1050804337714105E-5	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999640783718123	WITHOUT_CLASSIFICATION	3.592162818768403E-5	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999988688336784	WITHOUT_CLASSIFICATION	1.1311663215941015E-5	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998765054430497	WITHOUT_CLASSIFICATION	1.2349455695027033E-4	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998549244146336	WITHOUT_CLASSIFICATION	1.4507558536634585E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998868136441865	WITHOUT_CLASSIFICATION	1.1318635581351163E-4	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999547000230522	WITHOUT_CLASSIFICATION	4.529997694792304E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999859362616372	WITHOUT_CLASSIFICATION	1.4063738362798947E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998795223921773	WITHOUT_CLASSIFICATION	1.2047760782267562E-4	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998584630296455	WITHOUT_CLASSIFICATION	1.415369703545763E-4	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998835230553438	WITHOUT_CLASSIFICATION	1.1647694465613324E-4	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999570939754724	WITHOUT_CLASSIFICATION	4.290602452770337E-5	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999264417758176	WITHOUT_CLASSIFICATION	7.355822418243439E-5	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999044472579104	WITHOUT_CLASSIFICATION	9.555274208966229E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999220901585909	WITHOUT_CLASSIFICATION	7.79098414090057E-5	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998997709020182	WITHOUT_CLASSIFICATION	1.0022909798182752E-4	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999231768019664	WITHOUT_CLASSIFICATION	7.682319803357603E-5	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998797087562558	WITHOUT_CLASSIFICATION	1.2029124374414553E-4	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998628980424362	WITHOUT_CLASSIFICATION	1.371019575638172E-4	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998785940773557	WITHOUT_CLASSIFICATION	1.2140592264433136E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998584234889738	WITHOUT_CLASSIFICATION	1.415765110262724E-4	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999592159547497	WITHOUT_CLASSIFICATION	4.078404525039475E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999610601938564	WITHOUT_CLASSIFICATION	3.893980614352039E-5	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999427585946787	WITHOUT_CLASSIFICATION	5.724140532118867E-5	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999541600645289	WITHOUT_CLASSIFICATION	4.583993547118581E-5	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999895938232299	WITHOUT_CLASSIFICATION	1.0406176769970333E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999944270705781	WITHOUT_CLASSIFICATION	5.5729294218953984E-5	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999295528471752	WITHOUT_CLASSIFICATION	7.044715282468097E-5	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999668870806424	WITHOUT_CLASSIFICATION	3.3112919357645674E-5	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999733011764408	WITHOUT_CLASSIFICATION	2.6698823559174E-5	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999314750086494	WITHOUT_CLASSIFICATION	6.852499135063598E-5	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999299247546375	WITHOUT_CLASSIFICATION	7.007524536245717E-5	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999260125862331	WITHOUT_CLASSIFICATION	7.398741376691644E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597176826899	WITHOUT_CLASSIFICATION	4.0282317310089924E-5	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999214018400445	WITHOUT_CLASSIFICATION	7.859815995551104E-5	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999288132258753	WITHOUT_CLASSIFICATION	7.11867741247159E-5	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999874617917416	WITHOUT_CLASSIFICATION	1.2538208258319809E-5	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.999958354345637	WITHOUT_CLASSIFICATION	4.1645654363078404E-5	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999530486458709	WITHOUT_CLASSIFICATION	4.695135412920792E-5	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999985554926966	WITHOUT_CLASSIFICATION	1.4445073033701032E-6	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999949060288479	WITHOUT_CLASSIFICATION	5.0939711521066554E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999974633677001	WITHOUT_CLASSIFICATION	2.536632299900193E-5	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999518137053571	WITHOUT_CLASSIFICATION	4.818629464284396E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999497538431394	WITHOUT_CLASSIFICATION	5.024615686048002E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9991364163171466	WITHOUT_CLASSIFICATION	8.635836828533913E-4	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999464575235736	WITHOUT_CLASSIFICATION	5.3542476426371705E-5	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.999966263878914	WITHOUT_CLASSIFICATION	3.373612108605212E-5	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999739128359695	WITHOUT_CLASSIFICATION	2.6087164030541712E-5	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471589238942	WITHOUT_CLASSIFICATION	5.284107610586147E-5	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999973705138431	WITHOUT_CLASSIFICATION	2.629486156900935E-5	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999627988297184	WITHOUT_CLASSIFICATION	3.7201170281645363E-5	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999575815788628	WITHOUT_CLASSIFICATION	4.2418421137194636E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999769417619898	WITHOUT_CLASSIFICATION	2.305823801022713E-5	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999481545382676	WITHOUT_CLASSIFICATION	5.184546173244907E-5	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9997386313723634	WITHOUT_CLASSIFICATION	2.6136862763660094E-4	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999631737273229	WITHOUT_CLASSIFICATION	3.6826272677120795E-5	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999592320793821	WITHOUT_CLASSIFICATION	4.076792061790111E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597176826899	WITHOUT_CLASSIFICATION	4.0282317310089924E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999944270705781	WITHOUT_CLASSIFICATION	5.5729294218953984E-5	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999777888791385	WITHOUT_CLASSIFICATION	2.2211120861535926E-5	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999841328864126	WITHOUT_CLASSIFICATION	1.5867113587442033E-5	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999916708604004	WITHOUT_CLASSIFICATION	8.329139599601773E-5	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999541835631645	WITHOUT_CLASSIFICATION	4.58164368354911E-5	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999509252923461	WITHOUT_CLASSIFICATION	4.907470765390847E-5	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999359735057062	WITHOUT_CLASSIFICATION	6.402649429375622E-5	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999388820348389	WITHOUT_CLASSIFICATION	6.111796516105301E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999586628335825	WITHOUT_CLASSIFICATION	4.133716641746291E-5	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999933309744139	WITHOUT_CLASSIFICATION	6.669025586107351E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999583341379831	WITHOUT_CLASSIFICATION	4.166586201695614E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999447825154498	WITHOUT_CLASSIFICATION	5.521748455014663E-5	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999522132206833	WITHOUT_CLASSIFICATION	4.77867793166809E-5	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999795639072903	WITHOUT_CLASSIFICATION	2.0436092709742053E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597176826899	WITHOUT_CLASSIFICATION	4.0282317310089924E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597176826899	WITHOUT_CLASSIFICATION	4.0282317310089924E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998638001612798	WITHOUT_CLASSIFICATION	1.361998387202526E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9998994005669257	WITHOUT_CLASSIFICATION	1.0059943307433043E-4	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999550207496312	WITHOUT_CLASSIFICATION	4.497925036887498E-5	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.999953525107593	WITHOUT_CLASSIFICATION	4.647489240708387E-5	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999558716007422	WITHOUT_CLASSIFICATION	4.412839925792886E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999714048962586	WITHOUT_CLASSIFICATION	2.8595103741430878E-5	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.999964372608538	WITHOUT_CLASSIFICATION	3.562739146191437E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597176826899	WITHOUT_CLASSIFICATION	4.0282317310089924E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999765277102105	WITHOUT_CLASSIFICATION	2.3472289789432768E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.999972800627446	WITHOUT_CLASSIFICATION	2.7199372554042563E-5	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999735517827062	WITHOUT_CLASSIFICATION	2.64482172938599E-5	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999448626045907	WITHOUT_CLASSIFICATION	5.51373954092284E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999494641918742	WITHOUT_CLASSIFICATION	5.053580812580146E-5	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999519286019253	WITHOUT_CLASSIFICATION	4.807139807471211E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999353211833841	WITHOUT_CLASSIFICATION	6.467881661591567E-5	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999297043197257	WITHOUT_CLASSIFICATION	7.029568027424968E-5	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999562843516973	WITHOUT_CLASSIFICATION	4.371564830269429E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999944270705781	WITHOUT_CLASSIFICATION	5.5729294218953984E-5	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999714670549609	WITHOUT_CLASSIFICATION	2.853294503913577E-5	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999953231980167	WITHOUT_CLASSIFICATION	4.676801983313457E-6	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.999987340709458	WITHOUT_CLASSIFICATION	1.265929054198327E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999944270705781	WITHOUT_CLASSIFICATION	5.5729294218953984E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999666025783858	WITHOUT_CLASSIFICATION	3.339742161412698E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999765277102105	WITHOUT_CLASSIFICATION	2.3472289789432768E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999574710488031	WITHOUT_CLASSIFICATION	4.2528951196850685E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597176826899	WITHOUT_CLASSIFICATION	4.0282317310089924E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999574476930067	WITHOUT_CLASSIFICATION	4.255230699326432E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597176826899	WITHOUT_CLASSIFICATION	4.0282317310089924E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999904496986343	WITHOUT_CLASSIFICATION	9.550301365754395E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999583341379831	WITHOUT_CLASSIFICATION	4.166586201695614E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999447825154498	WITHOUT_CLASSIFICATION	5.521748455014663E-5	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999522132206833	WITHOUT_CLASSIFICATION	4.77867793166809E-5	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999952033805749	WITHOUT_CLASSIFICATION	4.796619425077525E-6	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999753348058468	WITHOUT_CLASSIFICATION	2.4665194153297774E-5	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999883965487506	WITHOUT_CLASSIFICATION	1.1603451249379076E-5	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999921797599824	WITHOUT_CLASSIFICATION	7.820240017576806E-6	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999899609419287	WITHOUT_CLASSIFICATION	1.0039058071302375E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597176826899	WITHOUT_CLASSIFICATION	4.0282317310089924E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999944270705781	WITHOUT_CLASSIFICATION	5.5729294218953984E-5	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999795639072903	WITHOUT_CLASSIFICATION	2.0436092709742053E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998638001612798	WITHOUT_CLASSIFICATION	1.361998387202526E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999706955573199	WITHOUT_CLASSIFICATION	2.930444268004904E-5	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999664938014761	WITHOUT_CLASSIFICATION	3.350619852384683E-5	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.999979735645316	WITHOUT_CLASSIFICATION	2.026435468407998E-5	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999793728439392	WITHOUT_CLASSIFICATION	2.0627156060776258E-5	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999432414121308	WITHOUT_CLASSIFICATION	5.675858786913671E-5	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999635369692356	WITHOUT_CLASSIFICATION	3.6463030764422205E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998584234889738	WITHOUT_CLASSIFICATION	1.415765110262724E-4	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999851863204458	WITHOUT_CLASSIFICATION	1.4813679554359685E-5	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999298541881435	WITHOUT_CLASSIFICATION	7.014581185648544E-5	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999242144614008	WITHOUT_CLASSIFICATION	7.578553859915945E-5	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999859182678026	WITHOUT_CLASSIFICATION	1.4081732197448823E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999314884363258	WITHOUT_CLASSIFICATION	6.851156367416573E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999859362616372	WITHOUT_CLASSIFICATION	1.4063738362798947E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998795223921773	WITHOUT_CLASSIFICATION	1.2047760782267562E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999220901585909	WITHOUT_CLASSIFICATION	7.79098414090057E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999314884363258	WITHOUT_CLASSIFICATION	6.851156367416573E-5	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999810938922904	WITHOUT_CLASSIFICATION	1.890610770964919E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999433957192985	WITHOUT_CLASSIFICATION	5.66042807014596E-5	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998243937051989	WITHOUT_CLASSIFICATION	1.756062948010196E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998586117031495	WITHOUT_CLASSIFICATION	1.4138829685049882E-4	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999712283065912	WITHOUT_CLASSIFICATION	2.8771693408738502E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597176826899	WITHOUT_CLASSIFICATION	4.0282317310089924E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597176826899	WITHOUT_CLASSIFICATION	4.0282317310089924E-5	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999384137949175	WITHOUT_CLASSIFICATION	6.158620508240957E-5	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998997709020182	WITHOUT_CLASSIFICATION	1.0022909798182752E-4	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998628980424362	WITHOUT_CLASSIFICATION	1.371019575638172E-4	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999769417619898	WITHOUT_CLASSIFICATION	2.305823801022713E-5	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999931787607603	WITHOUT_CLASSIFICATION	6.821239239663081E-6	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999849394689346	WITHOUT_CLASSIFICATION	1.5060531065424583E-5	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999898397548083	WITHOUT_CLASSIFICATION	1.0160245191808147E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999899838775914	WITHOUT_CLASSIFICATION	1.0016122408469973E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999931977709642	WITHOUT_CLASSIFICATION	6.802229035834473E-6	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999640290828693	WITHOUT_CLASSIFICATION	3.5970917130662216E-5	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999944233348439	WITHOUT_CLASSIFICATION	5.576665156113342E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999392413091839	WITHOUT_CLASSIFICATION	6.0758690816155294E-5	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999961058746226	WITHOUT_CLASSIFICATION	3.894125377383533E-6	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9992281618412723	WITHOUT_CLASSIFICATION	7.718381587277869E-4	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999753392753931	WITHOUT_CLASSIFICATION	2.4660724606907355E-5	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999863164298401	WITHOUT_CLASSIFICATION	1.3683570159816257E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999836987756667	WITHOUT_CLASSIFICATION	1.6301224333369106E-5	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999318882279368	WITHOUT_CLASSIFICATION	6.811177206324528E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999556569049475	WITHOUT_CLASSIFICATION	4.4343095052570373E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999959989555586	WITHOUT_CLASSIFICATION	4.001044441410393E-5	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995491397689337	WITHOUT_CLASSIFICATION	4.5086023106640774E-4	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999868157049654	WITHOUT_CLASSIFICATION	1.3184295034580782E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999353371397943	WITHOUT_CLASSIFICATION	6.466286020564016E-5	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999233628557817	WITHOUT_CLASSIFICATION	7.66371442183924E-5	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999833153006413	WITHOUT_CLASSIFICATION	1.668469935863924E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999848228822561	WITHOUT_CLASSIFICATION	1.517711774387861E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999778890231661	WITHOUT_CLASSIFICATION	2.2110976833805108E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999864362711897	WITHOUT_CLASSIFICATION	1.3563728810307549E-5	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999395845854868	WITHOUT_CLASSIFICATION	6.041541451301715E-5	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999620786213747	WITHOUT_CLASSIFICATION	3.792137862531363E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999817665881654	WITHOUT_CLASSIFICATION	1.8233411834568408E-5	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999968722332697	WITHOUT_CLASSIFICATION	3.1277667303010516E-5	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999816686417172	WITHOUT_CLASSIFICATION	1.8331358282790488E-5	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999777745373929	WITHOUT_CLASSIFICATION	2.222546260706521E-5	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999871114534682	WITHOUT_CLASSIFICATION	1.2888546531701114E-5	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999990493063122	WITHOUT_CLASSIFICATION	9.506936876902153E-7	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999876108780726	WITHOUT_CLASSIFICATION	1.2389121927386405E-5	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999514191255444	WITHOUT_CLASSIFICATION	4.8580874455575956E-5	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999309063480049	WITHOUT_CLASSIFICATION	6.909365199505792E-5	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999308980566212	WITHOUT_CLASSIFICATION	6.910194337881898E-5	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999801322815414	WITHOUT_CLASSIFICATION	1.986771845867439E-5	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999715918243861	WITHOUT_CLASSIFICATION	2.8408175613880913E-5	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999389781074001	WITHOUT_CLASSIFICATION	6.102189259984172E-5	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999675832972538	WITHOUT_CLASSIFICATION	3.241670274619307E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999962546402055	WITHOUT_CLASSIFICATION	3.7453597946494077E-6	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999811134667227	WITHOUT_CLASSIFICATION	1.8886533277316388E-5	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999957871648775	WITHOUT_CLASSIFICATION	4.212835122549494E-6	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.99999332686166	WITHOUT_CLASSIFICATION	6.6731383400328796E-6	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999924118047436	WITHOUT_CLASSIFICATION	7.588195256366278E-6	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999971973374681	WITHOUT_CLASSIFICATION	2.8026625319846047E-6	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999895705264149	WITHOUT_CLASSIFICATION	1.0429473585187242E-5	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999987553252214	WITHOUT_CLASSIFICATION	1.2446747786097467E-6	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999967531119052	WITHOUT_CLASSIFICATION	3.246888094735453E-6	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999115707473545	WITHOUT_CLASSIFICATION	8.842925264540395E-5	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999721203390318	WITHOUT_CLASSIFICATION	2.7879660968105608E-5	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999717294354048	WITHOUT_CLASSIFICATION	2.8270564595246483E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999774753013977	WITHOUT_CLASSIFICATION	2.2524698602250406E-5	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999800278407319	WITHOUT_CLASSIFICATION	1.9972159268104515E-5	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999267581517649	WITHOUT_CLASSIFICATION	7.324184823512655E-5	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999625470125604	WITHOUT_CLASSIFICATION	3.7452987439634535E-5	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999697550292431	WITHOUT_CLASSIFICATION	3.0244970756926488E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999406712493794	WITHOUT_CLASSIFICATION	5.932875062069782E-5	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999656286300799	WITHOUT_CLASSIFICATION	3.4371369920143156E-5	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999750572715919	WITHOUT_CLASSIFICATION	2.494272840815323E-5	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999783234292251	WITHOUT_CLASSIFICATION	2.167657077495015E-5	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999768294421485	WITHOUT_CLASSIFICATION	2.317055785153804E-5	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999957219839817	WITHOUT_CLASSIFICATION	4.278016018256428E-6	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999983270149638	WITHOUT_CLASSIFICATION	1.6729850361259367E-6	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999880881200242	WITHOUT_CLASSIFICATION	1.191187997596521E-5	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999284893322742	WITHOUT_CLASSIFICATION	7.151066772583477E-5	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999458196107729	WITHOUT_CLASSIFICATION	5.418038922716916E-5	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999583736180779	WITHOUT_CLASSIFICATION	4.162638192202866E-5	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999812403989462	WITHOUT_CLASSIFICATION	1.8759601053753746E-5	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999701317605503	WITHOUT_CLASSIFICATION	2.9868239449807553E-5	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999541884734212	WITHOUT_CLASSIFICATION	4.581152657865914E-5	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999291708066941	WITHOUT_CLASSIFICATION	7.082919330589047E-5	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9981915384456232	WITHOUT_CLASSIFICATION	0.001808461554376718	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999552780511868	WITHOUT_CLASSIFICATION	4.472194881324742E-5	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999637744759168	WITHOUT_CLASSIFICATION	3.622552408333348E-5	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999895137461207	WITHOUT_CLASSIFICATION	1.048625387941561E-5	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999814206180857	WITHOUT_CLASSIFICATION	1.8579381914204037E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999698482296223	WITHOUT_CLASSIFICATION	3.0151770377703612E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999698854225042	WITHOUT_CLASSIFICATION	3.0114577495764286E-5	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999873153331779	WITHOUT_CLASSIFICATION	1.2684666822177996E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.999980807410842	WITHOUT_CLASSIFICATION	1.9192589157921683E-5	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999865561993106	WITHOUT_CLASSIFICATION	1.3443800689449108E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999796541281398	WITHOUT_CLASSIFICATION	2.034587186025633E-5	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999687346837236	WITHOUT_CLASSIFICATION	3.126531627638371E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9973134691653229	WITHOUT_CLASSIFICATION	0.002686530834677165	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.999984382436657	WITHOUT_CLASSIFICATION	1.5617563342967808E-5	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999783583824118	WITHOUT_CLASSIFICATION	2.164161758821701E-5	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999994587697425	WITHOUT_CLASSIFICATION	5.412302574467226E-7	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999432680716749	WITHOUT_CLASSIFICATION	5.673192832523952E-5	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.999923021468515	WITHOUT_CLASSIFICATION	7.69785314850305E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999492187807586	WITHOUT_CLASSIFICATION	5.078121924131489E-5	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999516915499826	WITHOUT_CLASSIFICATION	4.830845001741073E-5	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999929705127412	WITHOUT_CLASSIFICATION	7.029487258805513E-5	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999386994388628	WITHOUT_CLASSIFICATION	6.130056113720899E-5	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999482244715374	WITHOUT_CLASSIFICATION	5.1775528462602723E-5	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999448445965542	WITHOUT_CLASSIFICATION	5.51554034457959E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999292870233485	WITHOUT_CLASSIFICATION	7.071297665146869E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999298871875146	WITHOUT_CLASSIFICATION	7.011281248543948E-5	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999929978815999	WITHOUT_CLASSIFICATION	7.002118400085452E-6	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.999946295887392	WITHOUT_CLASSIFICATION	5.370411260802375E-5	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9999339358660153	WITHOUT_CLASSIFICATION	6.60641339846284E-5	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999965655760422	WITHOUT_CLASSIFICATION	3.4344239577991176E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.999946295887392	WITHOUT_CLASSIFICATION	5.370411260802375E-5	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999671900723902	WITHOUT_CLASSIFICATION	3.280992760985876E-5	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999548605993519	WITHOUT_CLASSIFICATION	4.5139400648106206E-5	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.99992323114171	WITHOUT_CLASSIFICATION	7.67688582900219E-5	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998535338701121	WITHOUT_CLASSIFICATION	1.4646612988787754E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999756532588487	WITHOUT_CLASSIFICATION	2.4346741151211977E-5	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999821100208792	WITHOUT_CLASSIFICATION	1.788997912067256E-5	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999375349070331	WITHOUT_CLASSIFICATION	6.246509296694281E-5	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999573925720221	WITHOUT_CLASSIFICATION	4.2607427977911107E-5	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999395325713151	WITHOUT_CLASSIFICATION	6.046742868503788E-5	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999390024958482	WITHOUT_CLASSIFICATION	6.0997504151785E-5	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999864953350042	WITHOUT_CLASSIFICATION	1.3504664995765361E-5	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999903034644788	WITHOUT_CLASSIFICATION	9.696535521155756E-6	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9953030595664342	WITHOUT_CLASSIFICATION	0.0046969404335658015	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.99999925182838	WITHOUT_CLASSIFICATION	7.481716199248197E-7	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999926310998588	WITHOUT_CLASSIFICATION	7.36890014126399E-6	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999774934767338	WITHOUT_CLASSIFICATION	2.2506523266167505E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999402135104623	WITHOUT_CLASSIFICATION	5.978648953767786E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999402135104623	WITHOUT_CLASSIFICATION	5.978648953767786E-5	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999907970093928	WITHOUT_CLASSIFICATION	9.202990607271985E-6	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9999466904764038	WITHOUT_CLASSIFICATION	5.3309523596243254E-5	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.999948867890128	WITHOUT_CLASSIFICATION	5.113210987183968E-5	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999297725287384	WITHOUT_CLASSIFICATION	7.022747126161436E-5	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999677322870354	WITHOUT_CLASSIFICATION	3.2267712964577094E-5	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999805868744811	WITHOUT_CLASSIFICATION	1.9413125518978622E-5	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999404523506406	WITHOUT_CLASSIFICATION	5.954764935933639E-5	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999929192684522	WITHOUT_CLASSIFICATION	7.080731547766528E-6	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999592259817168	WITHOUT_CLASSIFICATION	4.077401828322112E-5	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999834383105528	WITHOUT_CLASSIFICATION	1.65616894470955E-5	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999751455793184	WITHOUT_CLASSIFICATION	2.4854420681454213E-5	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999861219344661	WITHOUT_CLASSIFICATION	1.3878065533895933E-5	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999419631301631	WITHOUT_CLASSIFICATION	5.8036869836899345E-5	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999705149770927	WITHOUT_CLASSIFICATION	2.948502290731492E-5	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.999993468821717	WITHOUT_CLASSIFICATION	6.531178282949455E-6	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999556569049475	WITHOUT_CLASSIFICATION	4.4343095052570373E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999845492994737	WITHOUT_CLASSIFICATION	1.545070052638666E-5	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999949303991533	WITHOUT_CLASSIFICATION	5.069600846648953E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999555786470988	WITHOUT_CLASSIFICATION	4.442135290114878E-5	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.999942778952071	WITHOUT_CLASSIFICATION	5.7221047929079034E-5	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999802300992366	WITHOUT_CLASSIFICATION	1.9769900763342184E-5	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999296239266985	WITHOUT_CLASSIFICATION	7.037607330144794E-5	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999981496514393	WITHOUT_CLASSIFICATION	1.8503485606801434E-6	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999950937701798	WITHOUT_CLASSIFICATION	4.906229820229129E-6	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999592246554789	WITHOUT_CLASSIFICATION	4.0775344520982816E-5	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999673414676872	WITHOUT_CLASSIFICATION	3.265853231276408E-5	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999973416326274	WITHOUT_CLASSIFICATION	2.6583673725678586E-6	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999841993165186	WITHOUT_CLASSIFICATION	1.5800683481309782E-5	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999947679731174	WITHOUT_CLASSIFICATION	5.232026882609223E-6	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999383097243832	WITHOUT_CLASSIFICATION	6.169027561679294E-5	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999761697430348	WITHOUT_CLASSIFICATION	2.3830256965212984E-5	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999345458937013	WITHOUT_CLASSIFICATION	6.545410629867479E-5	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9973118932213828	WITHOUT_CLASSIFICATION	0.00268810677861721	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999668403894834	WITHOUT_CLASSIFICATION	3.315961051671664E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999929726391126	WITHOUT_CLASSIFICATION	7.02736088740294E-5	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999899245653959	WITHOUT_CLASSIFICATION	1.0075434604086876E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999765314470122	WITHOUT_CLASSIFICATION	2.3468552987800485E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999929771465693	WITHOUT_CLASSIFICATION	7.022853430696752E-5	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999938502914009	WITHOUT_CLASSIFICATION	6.1497085990895205E-6	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999970677605786	WITHOUT_CLASSIFICATION	2.9322394213221624E-6	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.999977923920747	WITHOUT_CLASSIFICATION	2.207607925298543E-5	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999824593003003	WITHOUT_CLASSIFICATION	1.7540699699724916E-5	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.99998198172914	WITHOUT_CLASSIFICATION	1.801827085999479E-5	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999972150527196	WITHOUT_CLASSIFICATION	2.7849472803980053E-5	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999804878543825	WITHOUT_CLASSIFICATION	1.951214561750025E-5	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999948869557979	WITHOUT_CLASSIFICATION	5.1130442022438236E-6	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999466271643019	WITHOUT_CLASSIFICATION	5.337283569805552E-5	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999632398507303	WITHOUT_CLASSIFICATION	3.676014926970602E-5	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999692009447158	WITHOUT_CLASSIFICATION	3.0799055284182906E-5	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999969934569419	WITHOUT_CLASSIFICATION	3.006543058037113E-6	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999876905141201	WITHOUT_CLASSIFICATION	1.230948587993921E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999392413091839	WITHOUT_CLASSIFICATION	6.0758690816155294E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999392413091839	WITHOUT_CLASSIFICATION	6.0758690816155294E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999709525810815	WITHOUT_CLASSIFICATION	2.904741891856695E-5	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999987447142805	WITHOUT_CLASSIFICATION	1.2552857194374426E-6	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999529685051634	WITHOUT_CLASSIFICATION	4.7031494836642146E-5	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999376493222663	WITHOUT_CLASSIFICATION	6.23506777337658E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999529685051634	WITHOUT_CLASSIFICATION	4.7031494836642146E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999491761955516	WITHOUT_CLASSIFICATION	5.082380444849885E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999718611309876	WITHOUT_CLASSIFICATION	2.8138869012400902E-5	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999668132178712	WITHOUT_CLASSIFICATION	3.318678212884367E-5	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999036376598881	WITHOUT_CLASSIFICATION	9.636234011181573E-5	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999539447325164	WITHOUT_CLASSIFICATION	4.605526748363964E-5	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999697261241389	WITHOUT_CLASSIFICATION	3.027387586117761E-5	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999974817205584	WITHOUT_CLASSIFICATION	2.5182794415951588E-5	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999635373203138	WITHOUT_CLASSIFICATION	3.646267968618218E-5	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.999963117418844	WITHOUT_CLASSIFICATION	3.6882581155987446E-5	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999855383215684	WITHOUT_CLASSIFICATION	1.4461678431416352E-5	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999505588379435	WITHOUT_CLASSIFICATION	4.94411620566463E-5	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999620860819031	WITHOUT_CLASSIFICATION	3.791391809692576E-5	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999411871716553	WITHOUT_CLASSIFICATION	5.881282834469381E-5	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999888120308471	WITHOUT_CLASSIFICATION	1.1187969152899154E-5	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999756558253776	WITHOUT_CLASSIFICATION	2.4344174622368028E-5	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999842116408801	WITHOUT_CLASSIFICATION	1.5788359119804473E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999821538770675	WITHOUT_CLASSIFICATION	1.7846122932578625E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999821538770675	WITHOUT_CLASSIFICATION	1.7846122932578625E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999367040012996	WITHOUT_CLASSIFICATION	6.329599870041007E-5	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999818932403257	WITHOUT_CLASSIFICATION	1.810675967430591E-5	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999955456874826	WITHOUT_CLASSIFICATION	4.454312517363839E-6	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999948527612441	WITHOUT_CLASSIFICATION	5.147238755942932E-6	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.999992493264766	WITHOUT_CLASSIFICATION	7.5067352339672784E-6	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999904865115831	WITHOUT_CLASSIFICATION	9.513488416914189E-6	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999828086926771	WITHOUT_CLASSIFICATION	1.7191307322870926E-5	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999506698846455	WITHOUT_CLASSIFICATION	4.933011535442069E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999626302706867	WITHOUT_CLASSIFICATION	3.7369729313378286E-5	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999860678417554	WITHOUT_CLASSIFICATION	1.3932158244655752E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999684632288273	WITHOUT_CLASSIFICATION	3.1536771172775185E-5	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999993412444148	WITHOUT_CLASSIFICATION	6.587555852085297E-6	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999753229307106	WITHOUT_CLASSIFICATION	2.4677069289478077E-5	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999685629253859	WITHOUT_CLASSIFICATION	3.1437074614054434E-5	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999739865503053	WITHOUT_CLASSIFICATION	2.6013449694689662E-5	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999969582419035	WITHOUT_CLASSIFICATION	3.0417580966367992E-6	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999716337861932	WITHOUT_CLASSIFICATION	2.8366213806792985E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999149535622752	WITHOUT_CLASSIFICATION	8.504643772472645E-5	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9999548823079041	WITHOUT_CLASSIFICATION	4.511769209588802E-5	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999738792397046	WITHOUT_CLASSIFICATION	2.6120760295441978E-5	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999626840659998	WITHOUT_CLASSIFICATION	3.731593400023971E-5	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999380506568375	WITHOUT_CLASSIFICATION	6.194934316256016E-5	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999393430351737	WITHOUT_CLASSIFICATION	6.0656964826195E-5	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999156599208376	WITHOUT_CLASSIFICATION	8.434007916230504E-5	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999759897200438	WITHOUT_CLASSIFICATION	2.401027995617446E-5	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999915304987966	WITHOUT_CLASSIFICATION	8.46950120348358E-6	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999511265738729	WITHOUT_CLASSIFICATION	4.887342612716828E-5	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999757798387788	WITHOUT_CLASSIFICATION	2.4220161221186675E-5	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999450085750988	WITHOUT_CLASSIFICATION	5.49914249012186E-5	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999928206256935	WITHOUT_CLASSIFICATION	7.17937430638348E-6	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999773080040102	WITHOUT_CLASSIFICATION	2.2691995989773952E-5	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999669184846575	WITHOUT_CLASSIFICATION	3.3081515342561516E-5	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999917759905799	WITHOUT_CLASSIFICATION	8.224009420187848E-6	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999371966590336	WITHOUT_CLASSIFICATION	6.280334096637795E-5	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999967560389016	WITHOUT_CLASSIFICATION	3.243961098400464E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999866328391132	WITHOUT_CLASSIFICATION	1.3367160886722069E-5	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999820793598931	WITHOUT_CLASSIFICATION	1.7920640106805032E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999659222192959	WITHOUT_CLASSIFICATION	3.407778070401671E-5	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999622529421947	WITHOUT_CLASSIFICATION	3.774705780537507E-5	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999611072233443	WITHOUT_CLASSIFICATION	3.8892776655703365E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999462930368261	WITHOUT_CLASSIFICATION	5.370696317373863E-5	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9999322595090504	WITHOUT_CLASSIFICATION	6.774049094952433E-5	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9986725921063343	WITHOUT_CLASSIFICATION	0.0013274078936656522	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.999995068780281	WITHOUT_CLASSIFICATION	4.931219719049594E-6	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999812309070948	WITHOUT_CLASSIFICATION	1.8769092905173778E-5	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9988343844121259	WITHOUT_CLASSIFICATION	0.0011656155878740984	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999959580223952	WITHOUT_CLASSIFICATION	4.041977604902987E-6	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999756166194754	WITHOUT_CLASSIFICATION	2.438338052464242E-5	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999993657878147	WITHOUT_CLASSIFICATION	6.3421218531222135E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999464743545555	WITHOUT_CLASSIFICATION	5.352564544440718E-5	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999786831290031	WITHOUT_CLASSIFICATION	2.1316870996968964E-5	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999992563012085	WITHOUT_CLASSIFICATION	7.436987915930007E-7	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999989017927734	WITHOUT_CLASSIFICATION	1.0982072266068488E-5	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999340601349505	WITHOUT_CLASSIFICATION	6.593986504952173E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999666025783858	WITHOUT_CLASSIFICATION	3.339742161412698E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999666025783858	WITHOUT_CLASSIFICATION	3.339742161412698E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999989241034929	WITHOUT_CLASSIFICATION	1.075896507074218E-6	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999659566519282	WITHOUT_CLASSIFICATION	3.4043348071780436E-5	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999475736690651	WITHOUT_CLASSIFICATION	5.242633093498801E-5	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999666141418911	WITHOUT_CLASSIFICATION	3.338585810882365E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999681689807902	WITHOUT_CLASSIFICATION	3.183101920983993E-5	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.999969048406885	WITHOUT_CLASSIFICATION	3.095159311491115E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999806917893975	WITHOUT_CLASSIFICATION	1.9308210602541498E-5	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999898213940669	WITHOUT_CLASSIFICATION	1.0178605933026876E-5	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999701648015392	WITHOUT_CLASSIFICATION	2.983519846077017E-5	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999938078800612	WITHOUT_CLASSIFICATION	6.192119938863954E-6	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999878934558678	WITHOUT_CLASSIFICATION	1.2106544132254058E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999234633832608	WITHOUT_CLASSIFICATION	7.653661673929577E-5	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999823960615648	WITHOUT_CLASSIFICATION	1.7603938435167364E-5	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999945982817162	WITHOUT_CLASSIFICATION	5.401718283787405E-6	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999995304811374	WITHOUT_CLASSIFICATION	4.695188625995141E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999981050135889	WITHOUT_CLASSIFICATION	1.8949864110609157E-6	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9999400680215162	WITHOUT_CLASSIFICATION	5.993197848364696E-5	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999878662297252	WITHOUT_CLASSIFICATION	1.2133770274797343E-5	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999378633950924	WITHOUT_CLASSIFICATION	6.213660490765952E-5	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999978175236751	WITHOUT_CLASSIFICATION	2.1824763248823576E-6	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999319452586769	WITHOUT_CLASSIFICATION	6.80547413230473E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999776616265593	WITHOUT_CLASSIFICATION	2.2338373440688748E-5	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.999996748767354	WITHOUT_CLASSIFICATION	3.251232645879441E-6	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999958900952117	WITHOUT_CLASSIFICATION	4.10990478832528E-6	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999624935403365	WITHOUT_CLASSIFICATION	3.7506459663531294E-5	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999291259482286	WITHOUT_CLASSIFICATION	7.087405177143955E-5	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999688016344557	WITHOUT_CLASSIFICATION	3.119836554426068E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999912016362154	WITHOUT_CLASSIFICATION	8.798363784611433E-6	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999998476995939	WITHOUT_CLASSIFICATION	1.523004060566395E-7	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9973214076604422	WITHOUT_CLASSIFICATION	0.0026785923395577643	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999337051372805	WITHOUT_CLASSIFICATION	6.62948627194798E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999938815796166	WITHOUT_CLASSIFICATION	6.118420383451868E-6	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999930160087253	WITHOUT_CLASSIFICATION	6.9839912747707795E-6	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999763339215586	WITHOUT_CLASSIFICATION	2.366607844145309E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999927775606827	WITHOUT_CLASSIFICATION	7.222439317381379E-6	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999738347669136	WITHOUT_CLASSIFICATION	2.6165233086504695E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999337051372805	WITHOUT_CLASSIFICATION	6.62948627194798E-5	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999912091827926	WITHOUT_CLASSIFICATION	8.790817207354955E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999925959675996	WITHOUT_CLASSIFICATION	7.404032400386696E-6	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999752581475336	WITHOUT_CLASSIFICATION	2.4741852466324644E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.99996517688772	WITHOUT_CLASSIFICATION	3.4823112280004076E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999684632288273	WITHOUT_CLASSIFICATION	3.1536771172775185E-5	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999649026374601	WITHOUT_CLASSIFICATION	3.509736253985523E-5	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999601611721961	WITHOUT_CLASSIFICATION	3.983882780401268E-5	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999923709276917	WITHOUT_CLASSIFICATION	7.629072308324954E-6	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.999960933184689	WITHOUT_CLASSIFICATION	3.906681531092514E-5	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999781405590893	WITHOUT_CLASSIFICATION	2.1859440910650555E-5	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999690127197889	WITHOUT_CLASSIFICATION	3.098728021108775E-5	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999968967149447	WITHOUT_CLASSIFICATION	3.103285055293158E-5	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999937284209831	WITHOUT_CLASSIFICATION	6.271579016876298E-6	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999234132138788	WITHOUT_CLASSIFICATION	7.658678612123778E-5	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999713728691698	WITHOUT_CLASSIFICATION	2.862713083018161E-5	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.999969297130831	WITHOUT_CLASSIFICATION	3.070286916889209E-5	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999862257843897	WITHOUT_CLASSIFICATION	1.3774215610393853E-5	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999269925326789	WITHOUT_CLASSIFICATION	7.300746732116267E-5	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999724537427443	WITHOUT_CLASSIFICATION	2.754625725559242E-5	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999391611008356	WITHOUT_CLASSIFICATION	6.083889916439023E-5	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999870436794872	WITHOUT_CLASSIFICATION	1.2956320512807546E-5	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999770149634031	WITHOUT_CLASSIFICATION	2.2985036596948126E-5	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999770079537001	WITHOUT_CLASSIFICATION	2.299204629978409E-5	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999379652793738	WITHOUT_CLASSIFICATION	6.203472062611708E-5	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999355574123453	WITHOUT_CLASSIFICATION	6.444258765474322E-5	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999819908657265	WITHOUT_CLASSIFICATION	1.8009134273499915E-5	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999719260018729	WITHOUT_CLASSIFICATION	2.807399812710273E-5	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999915606801921	WITHOUT_CLASSIFICATION	8.439319807829236E-6	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999552695213015	WITHOUT_CLASSIFICATION	4.473047869848928E-5	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9998980485141356	WITHOUT_CLASSIFICATION	1.0195148586446657E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999920938475569	WITHOUT_CLASSIFICATION	7.906152442981361E-6	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999276012071857	WITHOUT_CLASSIFICATION	7.239879281432186E-5	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998970357090068	WITHOUT_CLASSIFICATION	1.029642909932683E-4	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999892606552793	WITHOUT_CLASSIFICATION	1.0739344720811714E-5	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999233338465356	WITHOUT_CLASSIFICATION	7.666615346432E-5	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999986448511082	WITHOUT_CLASSIFICATION	1.3551488917904253E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999640066100528	WITHOUT_CLASSIFICATION	3.599338994714752E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999640066100528	WITHOUT_CLASSIFICATION	3.599338994714752E-5	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999988414521693	WITHOUT_CLASSIFICATION	1.1585478307281276E-6	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999534812000794	WITHOUT_CLASSIFICATION	4.651879992046199E-5	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999964101620339	WITHOUT_CLASSIFICATION	3.589837966095315E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999932273035109	WITHOUT_CLASSIFICATION	6.772696489036703E-6	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999838545921869	WITHOUT_CLASSIFICATION	1.6145407813197747E-5	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999419544732023	WITHOUT_CLASSIFICATION	5.804552679773012E-5	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999750900788019	WITHOUT_CLASSIFICATION	2.490992119800811E-5	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999810127659577	WITHOUT_CLASSIFICATION	1.8987234042202637E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999532091946742	WITHOUT_CLASSIFICATION	4.679080532571331E-5	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999971493684292	WITHOUT_CLASSIFICATION	2.8506315708303263E-6	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.99995318142756	WITHOUT_CLASSIFICATION	4.6818572440139864E-5	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999835629160202	WITHOUT_CLASSIFICATION	1.643708397983991E-5	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999976307675634	WITHOUT_CLASSIFICATION	2.3692324366139894E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999640066100528	WITHOUT_CLASSIFICATION	3.599338994714752E-5	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999502392278148	WITHOUT_CLASSIFICATION	4.9760772185317774E-5	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999322067915377	WITHOUT_CLASSIFICATION	6.779320846226478E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999982963912931	WITHOUT_CLASSIFICATION	1.7036087068950266E-5	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999680833167458	WITHOUT_CLASSIFICATION	3.1916683254229084E-5	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999892093864164	WITHOUT_CLASSIFICATION	1.0790613583612045E-5	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999667193804551	WITHOUT_CLASSIFICATION	3.328061954489103E-5	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999968889435042	WITHOUT_CLASSIFICATION	3.1110564958281073E-6	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999770603057546	WITHOUT_CLASSIFICATION	2.2939694245350544E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999986343345661	WITHOUT_CLASSIFICATION	1.3656654338977087E-5	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.999972595782623	WITHOUT_CLASSIFICATION	2.740421737698128E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999810496559606	WITHOUT_CLASSIFICATION	1.895034403936429E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999276012071857	WITHOUT_CLASSIFICATION	7.239879281432186E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999640066100528	WITHOUT_CLASSIFICATION	3.599338994714752E-5	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999508998049803	WITHOUT_CLASSIFICATION	4.9100195019796116E-5	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999984975970046	WITHOUT_CLASSIFICATION	1.5024029953984108E-5	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9998168736543621	WITHOUT_CLASSIFICATION	1.8312634563781566E-4	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999597004915174	WITHOUT_CLASSIFICATION	4.0299508482708814E-5	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999888987254906	WITHOUT_CLASSIFICATION	1.1101274509426743E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999758925187147	WITHOUT_CLASSIFICATION	2.4107481285349707E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999551165133505	WITHOUT_CLASSIFICATION	4.488348664943246E-5	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999876252017444	WITHOUT_CLASSIFICATION	1.2374798255490441E-5	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999922668590484	WITHOUT_CLASSIFICATION	7.733140951570393E-6	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999687559660126	WITHOUT_CLASSIFICATION	3.12440339872937E-5	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999890800244131	WITHOUT_CLASSIFICATION	1.091997558679537E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999984202024053	WITHOUT_CLASSIFICATION	1.579797594698451E-5	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999833380758331	WITHOUT_CLASSIFICATION	1.6661924166890935E-5	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999935191435454	WITHOUT_CLASSIFICATION	6.480856454603237E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999491761955516	WITHOUT_CLASSIFICATION	5.082380444849885E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999909909992882	WITHOUT_CLASSIFICATION	9.00900071180408E-6	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999972979948953	WITHOUT_CLASSIFICATION	2.702005104693637E-6	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999807663303321	WITHOUT_CLASSIFICATION	1.923366966789307E-5	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999430413433692	WITHOUT_CLASSIFICATION	5.695865663085371E-5	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999994690623392	WITHOUT_CLASSIFICATION	5.30937660759238E-7	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999577195386788	WITHOUT_CLASSIFICATION	4.2280461321187124E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999577195386788	WITHOUT_CLASSIFICATION	4.2280461321187124E-5	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999714235087516	WITHOUT_CLASSIFICATION	2.8576491248465906E-5	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999806302946628	WITHOUT_CLASSIFICATION	1.9369705337134965E-5	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999858260822215	WITHOUT_CLASSIFICATION	1.4173917778365844E-5	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999915913725018	WITHOUT_CLASSIFICATION	8.408627498192679E-6	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999588269435457	WITHOUT_CLASSIFICATION	4.1173056454293416E-5	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999586928321418	WITHOUT_CLASSIFICATION	4.130716785826645E-5	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999920789581109	WITHOUT_CLASSIFICATION	7.921041889109772E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999656577376639	WITHOUT_CLASSIFICATION	3.4342262335988576E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999656577376639	WITHOUT_CLASSIFICATION	3.4342262335988576E-5	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999420037129894	WITHOUT_CLASSIFICATION	5.799628701061157E-5	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999465772102902	WITHOUT_CLASSIFICATION	5.3422789709785525E-5	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999772753839824	WITHOUT_CLASSIFICATION	2.2724616017637306E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999692365332251	WITHOUT_CLASSIFICATION	3.0763466774778304E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999692365332251	WITHOUT_CLASSIFICATION	3.0763466774778304E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999692365332251	WITHOUT_CLASSIFICATION	3.0763466774778304E-5	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999705915094909	WITHOUT_CLASSIFICATION	2.9408490509134697E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999827500705347	WITHOUT_CLASSIFICATION	1.7249929465225025E-5	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999662331388747	WITHOUT_CLASSIFICATION	3.376686112535889E-5	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999216937625346	WITHOUT_CLASSIFICATION	7.830623746543297E-5	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999872118631719	WITHOUT_CLASSIFICATION	1.2788136828104816E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999640066100528	WITHOUT_CLASSIFICATION	3.599338994714752E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999640066100528	WITHOUT_CLASSIFICATION	3.599338994714752E-5	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999850670357125	WITHOUT_CLASSIFICATION	1.4932964287528001E-5	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999987243195995	WITHOUT_CLASSIFICATION	1.275680400550258E-6	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999592780273134	WITHOUT_CLASSIFICATION	4.0721972686508085E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999866806099227	WITHOUT_CLASSIFICATION	1.3319390077237696E-5	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999509636585375	WITHOUT_CLASSIFICATION	4.903634146238728E-5	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999719391380553	WITHOUT_CLASSIFICATION	2.8060861944701614E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999553084510941	WITHOUT_CLASSIFICATION	4.469154890588947E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999678001016542	WITHOUT_CLASSIFICATION	3.2199898345825776E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.999986387777169	WITHOUT_CLASSIFICATION	1.3612222831070882E-5	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999671049279633	WITHOUT_CLASSIFICATION	3.2895072036682455E-5	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999827433934589	WITHOUT_CLASSIFICATION	1.7256606541037355E-5	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999222154842811	WITHOUT_CLASSIFICATION	7.778451571888662E-5	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999222154842811	WITHOUT_CLASSIFICATION	7.778451571888662E-5	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999222154842811	WITHOUT_CLASSIFICATION	7.778451571888662E-5	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999222154842811	WITHOUT_CLASSIFICATION	7.778451571888662E-5	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999222154842811	WITHOUT_CLASSIFICATION	7.778451571888662E-5	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999345867845991	WITHOUT_CLASSIFICATION	6.54132154008704E-5	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999345867845991	WITHOUT_CLASSIFICATION	6.54132154008704E-5	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.999934686324556	WITHOUT_CLASSIFICATION	6.531367544411766E-5	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999345867845991	WITHOUT_CLASSIFICATION	6.54132154008704E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999793653463646	WITHOUT_CLASSIFICATION	2.0634653635438566E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999577195386788	WITHOUT_CLASSIFICATION	4.2280461321187124E-5	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999375791621757	WITHOUT_CLASSIFICATION	6.242083782423629E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999345867845991	WITHOUT_CLASSIFICATION	6.54132154008704E-5	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999552124550463	WITHOUT_CLASSIFICATION	4.478754495373452E-5	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999427133134051	WITHOUT_CLASSIFICATION	5.7286686594945774E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999223581152361	WITHOUT_CLASSIFICATION	7.764188476390663E-5	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999223346091882	WITHOUT_CLASSIFICATION	7.7665390811728E-5	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999992776296711	WITHOUT_CLASSIFICATION	7.22370328892256E-6	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999953679958461	WITHOUT_CLASSIFICATION	4.632004153894628E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999937142431743	WITHOUT_CLASSIFICATION	6.285756825763062E-6	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999656103835284	WITHOUT_CLASSIFICATION	3.43896164716122E-5	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999721971829191	WITHOUT_CLASSIFICATION	2.7802817080981897E-5	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999971987468673	WITHOUT_CLASSIFICATION	2.8012531327878842E-6	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999883122682263	WITHOUT_CLASSIFICATION	1.1687731773606395E-5	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9991501278905712	WITHOUT_CLASSIFICATION	8.498721094289185E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999127886693051	WITHOUT_CLASSIFICATION	8.721133069492018E-5	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999489897386127	WITHOUT_CLASSIFICATION	5.101026138728763E-5	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999690023093275	WITHOUT_CLASSIFICATION	3.099769067239881E-5	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999798251472286	WITHOUT_CLASSIFICATION	2.017485277137815E-5	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9998167103093817	WITHOUT_CLASSIFICATION	1.8328969061835485E-4	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999362195346946	WITHOUT_CLASSIFICATION	6.378046530550481E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999362195346946	WITHOUT_CLASSIFICATION	6.378046530550481E-5	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999747093122717	WITHOUT_CLASSIFICATION	2.5290687728312528E-5	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999926414513792	WITHOUT_CLASSIFICATION	7.3585486207466855E-6	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999774873102542	WITHOUT_CLASSIFICATION	2.251268974582155E-5	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999610171414195	WITHOUT_CLASSIFICATION	3.898285858052346E-5	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999533205016	WITHOUT_CLASSIFICATION	4.667949840002421E-5	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999805370342868	WITHOUT_CLASSIFICATION	1.9462965713155494E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999446490099275	WITHOUT_CLASSIFICATION	5.5350990072401434E-5	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999880110277818	WITHOUT_CLASSIFICATION	1.1988972218113352E-5	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999719560272419	WITHOUT_CLASSIFICATION	2.804397275810057E-5	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999845543933069	WITHOUT_CLASSIFICATION	1.5445606693127538E-5	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999439632625752	WITHOUT_CLASSIFICATION	5.603673742471714E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999984202024053	WITHOUT_CLASSIFICATION	1.579797594698451E-5	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999970274897476	WITHOUT_CLASSIFICATION	2.9725102522859586E-6	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999984536739878	WITHOUT_CLASSIFICATION	1.5463260122626182E-6	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999916280266979	WITHOUT_CLASSIFICATION	8.37197330207766E-6	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999934931780282	WITHOUT_CLASSIFICATION	6.506821971814183E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999911384798399	WITHOUT_CLASSIFICATION	8.861520160084729E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999911384798399	WITHOUT_CLASSIFICATION	8.861520160084729E-6	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999755130431849	WITHOUT_CLASSIFICATION	2.4486956815153657E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999992304448534	WITHOUT_CLASSIFICATION	7.695551466285499E-7	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999924470550188	WITHOUT_CLASSIFICATION	7.552944981148829E-6	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.999993850124105	WITHOUT_CLASSIFICATION	6.149875895031183E-6	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999898123770276	WITHOUT_CLASSIFICATION	1.0187622972426274E-5	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999746267993892	WITHOUT_CLASSIFICATION	2.5373200610838006E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999939447880933	WITHOUT_CLASSIFICATION	6.0552119067028175E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999930588743708	WITHOUT_CLASSIFICATION	6.9411256292115965E-6	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999776014104091	WITHOUT_CLASSIFICATION	2.23985895908511E-5	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.999981291741752	WITHOUT_CLASSIFICATION	1.8708258248047524E-5	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999957999847542	WITHOUT_CLASSIFICATION	4.200015245855671E-6	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999930588743708	WITHOUT_CLASSIFICATION	6.9411256292115965E-6	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999850630891071	WITHOUT_CLASSIFICATION	1.4936910893020265E-5	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999670616868077	WITHOUT_CLASSIFICATION	3.293831319224819E-5	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999895296963754	WITHOUT_CLASSIFICATION	1.0470303624623578E-5	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999437676131813	WITHOUT_CLASSIFICATION	5.6232386818803035E-5	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.99999669863703	WITHOUT_CLASSIFICATION	3.301362969990769E-6	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999960100899803	WITHOUT_CLASSIFICATION	3.989910019646317E-6	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999631256990846	WITHOUT_CLASSIFICATION	3.687430091540805E-5	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.999991541663847	WITHOUT_CLASSIFICATION	8.458336152973434E-6	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999962769401599	WITHOUT_CLASSIFICATION	3.723059839977142E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999892404034715	WITHOUT_CLASSIFICATION	1.0759596528632304E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.999967947313573	WITHOUT_CLASSIFICATION	3.205268642700937E-5	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999894426762947	WITHOUT_CLASSIFICATION	1.0557323705369747E-5	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999647860680593	WITHOUT_CLASSIFICATION	3.5213931940709116E-5	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.999980276451651	WITHOUT_CLASSIFICATION	1.9723548348940874E-5	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999512949835949	WITHOUT_CLASSIFICATION	4.8705016405218765E-5	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999987940047347	WITHOUT_CLASSIFICATION	1.2059952653130573E-6	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999824441732649	WITHOUT_CLASSIFICATION	1.7555826735185746E-5	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999105527934604	WITHOUT_CLASSIFICATION	8.944720653949692E-5	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999105527934604	WITHOUT_CLASSIFICATION	8.944720653949692E-5	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999626020350181	WITHOUT_CLASSIFICATION	3.7397964981845984E-5	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999808834107915	WITHOUT_CLASSIFICATION	1.9116589208514852E-5	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999360140950942	WITHOUT_CLASSIFICATION	6.398590490568403E-5	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999531931767439	WITHOUT_CLASSIFICATION	4.68068232561408E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999862864509822	WITHOUT_CLASSIFICATION	1.371354901780912E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.999988134309629	WITHOUT_CLASSIFICATION	1.1865690371025544E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999968969165204	WITHOUT_CLASSIFICATION	3.103083479692994E-6	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999941171798487	WITHOUT_CLASSIFICATION	5.882820151337725E-6	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999843132776226	WITHOUT_CLASSIFICATION	1.568672237743159E-5	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999797335125975	WITHOUT_CLASSIFICATION	2.0266487402536397E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999953569116508	WITHOUT_CLASSIFICATION	4.643088349238389E-6	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999828972526399	WITHOUT_CLASSIFICATION	1.710274736007E-5	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999616720594946	WITHOUT_CLASSIFICATION	3.832794050536679E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999872285805416	WITHOUT_CLASSIFICATION	1.2771419458466496E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999623097349428	WITHOUT_CLASSIFICATION	3.76902650572063E-5	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999934889186111	WITHOUT_CLASSIFICATION	6.511081388842587E-6	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999997428191955	WITHOUT_CLASSIFICATION	2.5718080449612575E-6	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999927337827457	WITHOUT_CLASSIFICATION	7.266217254372338E-6	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.99996883363514	WITHOUT_CLASSIFICATION	3.1166364860056575E-5	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999763980799922	WITHOUT_CLASSIFICATION	2.3601920007820692E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999972488802185	WITHOUT_CLASSIFICATION	2.7511197816450676E-6	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999929052176905	WITHOUT_CLASSIFICATION	7.0947823095493715E-6	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999837748496305	WITHOUT_CLASSIFICATION	1.6225150369472802E-5	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999990213800106	WITHOUT_CLASSIFICATION	9.78619989386434E-7	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999872917795944	WITHOUT_CLASSIFICATION	1.2708220405496338E-5	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999794631053305	WITHOUT_CLASSIFICATION	2.053689466960363E-5	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999825054336725	WITHOUT_CLASSIFICATION	1.749456632737703E-5	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999986200246939	WITHOUT_CLASSIFICATION	1.379975306099741E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999854400599562	WITHOUT_CLASSIFICATION	1.455994004387542E-5	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999701460468071	WITHOUT_CLASSIFICATION	2.9853953192861874E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751414145921	WITHOUT_CLASSIFICATION	2.4858585407895138E-5	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999624864977551	WITHOUT_CLASSIFICATION	3.751350224483849E-5	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.999988869291508	WITHOUT_CLASSIFICATION	1.113070849197412E-5	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999884381451293	WITHOUT_CLASSIFICATION	1.1561854870674688E-5	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999984528157838	WITHOUT_CLASSIFICATION	1.547184216150706E-6	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999854482871863	WITHOUT_CLASSIFICATION	1.4551712813711795E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999762858042023	WITHOUT_CLASSIFICATION	2.371419579781725E-5	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999964642728548	WITHOUT_CLASSIFICATION	3.5357271451546013E-6	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999778109046955	WITHOUT_CLASSIFICATION	2.2189095304486444E-5	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999783517840016	WITHOUT_CLASSIFICATION	2.1648215998309147E-5	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999786315253651	WITHOUT_CLASSIFICATION	2.136847463477326E-5	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999838384549484	WITHOUT_CLASSIFICATION	1.616154505162203E-5	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999505191427275	WITHOUT_CLASSIFICATION	4.9480857272602136E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999950398027762	WITHOUT_CLASSIFICATION	4.960197223763805E-6	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999821654339529	WITHOUT_CLASSIFICATION	1.783456604708203E-5	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999983762280288	WITHOUT_CLASSIFICATION	1.6237719712065526E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751414145921	WITHOUT_CLASSIFICATION	2.4858585407895138E-5	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999545365028429	WITHOUT_CLASSIFICATION	4.546349715694446E-5	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999221009170473	WITHOUT_CLASSIFICATION	7.789908295266288E-5	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999852563041799	WITHOUT_CLASSIFICATION	1.4743695820041247E-5	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999935308757076	WITHOUT_CLASSIFICATION	6.469124292459399E-6	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999280765499454	WITHOUT_CLASSIFICATION	7.192345005455604E-5	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999863659615167	WITHOUT_CLASSIFICATION	1.3634038483346294E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999776014104091	WITHOUT_CLASSIFICATION	2.23985895908511E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999892376429756	WITHOUT_CLASSIFICATION	1.076235702439252E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999623097349428	WITHOUT_CLASSIFICATION	3.76902650572063E-5	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999312984929112	WITHOUT_CLASSIFICATION	6.870150708873925E-5	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999444580849228	WITHOUT_CLASSIFICATION	5.554191507721391E-5	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999806373650025	WITHOUT_CLASSIFICATION	1.9362634997427377E-5	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999808324224874	WITHOUT_CLASSIFICATION	1.9167577512558E-5	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999483300305546	WITHOUT_CLASSIFICATION	5.166996944538379E-5	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999812793034435	WITHOUT_CLASSIFICATION	1.8720696556548518E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999810536695123	WITHOUT_CLASSIFICATION	1.894633048780511E-5	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999780400532412	WITHOUT_CLASSIFICATION	2.195994675878761E-5	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999901791747501	WITHOUT_CLASSIFICATION	9.820825249803651E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.999992500399199	WITHOUT_CLASSIFICATION	7.4996008009946535E-6	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999850047625054	WITHOUT_CLASSIFICATION	1.499523749457946E-5	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999894299109194	WITHOUT_CLASSIFICATION	1.0570089080492815E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999776320314484	WITHOUT_CLASSIFICATION	2.2367968551679442E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999776320314484	WITHOUT_CLASSIFICATION	2.2367968551679442E-5	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999833930359616	WITHOUT_CLASSIFICATION	1.6606964038395767E-5	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999987609828154	WITHOUT_CLASSIFICATION	1.2390171846098834E-5	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999909380395559	WITHOUT_CLASSIFICATION	9.061960444152439E-6	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999972060528448	WITHOUT_CLASSIFICATION	2.7939471551359684E-6	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.99999712279505	WITHOUT_CLASSIFICATION	2.877204949870362E-6	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999779844745199	WITHOUT_CLASSIFICATION	2.201552548007533E-5	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999966201634358	WITHOUT_CLASSIFICATION	3.3798365641971235E-6	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999956617407402	WITHOUT_CLASSIFICATION	4.3382592597828754E-6	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999822779522075	WITHOUT_CLASSIFICATION	1.7722047792515314E-5	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999542151231324	WITHOUT_CLASSIFICATION	4.578487686751495E-5	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999509132352492	WITHOUT_CLASSIFICATION	4.908676475065244E-5	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999778789269322	WITHOUT_CLASSIFICATION	2.2121073067721958E-5	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999719277158696	WITHOUT_CLASSIFICATION	2.8072284130357417E-5	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999995539481819	WITHOUT_CLASSIFICATION	4.4605181821378966E-7	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999636506349548	WITHOUT_CLASSIFICATION	3.634936504516187E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.99997224121329	WITHOUT_CLASSIFICATION	2.775878670995624E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999502660695827	WITHOUT_CLASSIFICATION	4.9733930417266804E-5	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999993422820256	WITHOUT_CLASSIFICATION	6.577179743844562E-7	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999865376042915	WITHOUT_CLASSIFICATION	1.3462395708573032E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597176826899	WITHOUT_CLASSIFICATION	4.0282317310089924E-5	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999969917564188	WITHOUT_CLASSIFICATION	3.0082435811902807E-6	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999858835462417	WITHOUT_CLASSIFICATION	1.4116453758122393E-5	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999969398790652	WITHOUT_CLASSIFICATION	3.0601209347337263E-6	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999793788580825	WITHOUT_CLASSIFICATION	2.0621141917514583E-5	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9999293298107138	WITHOUT_CLASSIFICATION	7.06701892862402E-5	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999686196226939	WITHOUT_CLASSIFICATION	3.1380377306064106E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597176826899	WITHOUT_CLASSIFICATION	4.0282317310089924E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597176826899	WITHOUT_CLASSIFICATION	4.0282317310089924E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999604018024805	WITHOUT_CLASSIFICATION	3.959819751962884E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999957308385207	WITHOUT_CLASSIFICATION	4.269161479357913E-6	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999684962256901	WITHOUT_CLASSIFICATION	3.1503774309992636E-5	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999582687817299	WITHOUT_CLASSIFICATION	4.173121827011617E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.999954617873388	WITHOUT_CLASSIFICATION	4.538212661201339E-5	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999950777951906	WITHOUT_CLASSIFICATION	4.9222048093847825E-6	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9986250346931326	WITHOUT_CLASSIFICATION	0.0013749653068674255	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999565023768835	WITHOUT_CLASSIFICATION	4.349762311661035E-5	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999726556217167	WITHOUT_CLASSIFICATION	2.7344378283268585E-5	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999416852849111	WITHOUT_CLASSIFICATION	5.831471508883209E-5	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999611446466634	WITHOUT_CLASSIFICATION	3.8855353336566914E-5	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999753978256232	WITHOUT_CLASSIFICATION	2.4602174376827498E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999689258561655	WITHOUT_CLASSIFICATION	3.107414383444629E-5	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997731226919379	WITHOUT_CLASSIFICATION	2.2687730806219265E-4	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999983068166604	WITHOUT_CLASSIFICATION	1.6931833396059406E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999256191158744	WITHOUT_CLASSIFICATION	7.438088412555906E-5	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999383979278332	WITHOUT_CLASSIFICATION	6.16020721667425E-5	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999295546454806	WITHOUT_CLASSIFICATION	7.044535451935236E-5	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998243937051989	WITHOUT_CLASSIFICATION	1.756062948010196E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9975325485693098	WITHOUT_CLASSIFICATION	0.002467451430690241	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999907896865199	WITHOUT_CLASSIFICATION	9.210313480086509E-6	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999990994094612	WITHOUT_CLASSIFICATION	9.005905388249243E-7	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999770331063701	WITHOUT_CLASSIFICATION	2.2966893629898283E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089281322651	WITHOUT_CLASSIFICATION	9.107186773501273E-5	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999810478521888	WITHOUT_CLASSIFICATION	1.895214781120324E-5	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999936732385467	WITHOUT_CLASSIFICATION	6.326761453337379E-6	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999987447648971	WITHOUT_CLASSIFICATION	1.2552351028982484E-5	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999440569991901	WITHOUT_CLASSIFICATION	5.594300080996228E-5	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999641453071912	WITHOUT_CLASSIFICATION	3.5854692808789795E-5	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999922193336231	WITHOUT_CLASSIFICATION	7.780666376819483E-6	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999447168070803	WITHOUT_CLASSIFICATION	5.528319291969752E-5	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999341151551762	WITHOUT_CLASSIFICATION	6.588484482383104E-5	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999737394496718	WITHOUT_CLASSIFICATION	2.6260550328088885E-5	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999964502009804	WITHOUT_CLASSIFICATION	3.5497990195965E-5	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999822452133621	WITHOUT_CLASSIFICATION	1.775478663789509E-5	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999671331430999	WITHOUT_CLASSIFICATION	3.286685690004339E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999456233857783	WITHOUT_CLASSIFICATION	5.437661422162586E-5	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999786755680428	WITHOUT_CLASSIFICATION	2.132443195728918E-5	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999807092775109	WITHOUT_CLASSIFICATION	1.9290722489128437E-5	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999688586530168	WITHOUT_CLASSIFICATION	3.114134698326523E-5	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999914244484461	WITHOUT_CLASSIFICATION	8.57555155385121E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999775383752523	WITHOUT_CLASSIFICATION	2.246162474781417E-5	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999600348257422	WITHOUT_CLASSIFICATION	3.996517425776194E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999775383752523	WITHOUT_CLASSIFICATION	2.246162474781417E-5	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999964235379725	WITHOUT_CLASSIFICATION	3.576462027570617E-6	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999809050642819	WITHOUT_CLASSIFICATION	1.90949357179549E-5	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999895869419165	WITHOUT_CLASSIFICATION	1.0413058083456202E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999937679869181	WITHOUT_CLASSIFICATION	6.23201308201322E-6	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999872065184952	WITHOUT_CLASSIFICATION	1.2793481504819463E-5	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999896354375455	WITHOUT_CLASSIFICATION	1.0364562454551827E-5	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999916983827004	WITHOUT_CLASSIFICATION	8.301617299551333E-6	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999567966570949	WITHOUT_CLASSIFICATION	4.320334290521531E-5	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999819323605196	WITHOUT_CLASSIFICATION	1.806763948034233E-5	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999953030151615	WITHOUT_CLASSIFICATION	4.6969848385084864E-5	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999816524191131	WITHOUT_CLASSIFICATION	1.8347580886885745E-5	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999956816678636	WITHOUT_CLASSIFICATION	4.318332136384646E-6	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999984049752667	WITHOUT_CLASSIFICATION	1.595024733292564E-6	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999601231454545	WITHOUT_CLASSIFICATION	3.987685454551128E-5	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999829563988945	WITHOUT_CLASSIFICATION	1.704360110550646E-5	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999926200800623	WITHOUT_CLASSIFICATION	7.37991993772888E-6	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999917742356007	WITHOUT_CLASSIFICATION	8.225764399281103E-6	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999697536682159	WITHOUT_CLASSIFICATION	3.024633178404617E-5	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999985863079439	WITHOUT_CLASSIFICATION	1.4136920560953376E-5	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999884455481614	WITHOUT_CLASSIFICATION	1.1554451838697654E-5	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999993725403217	WITHOUT_CLASSIFICATION	6.274596783035252E-6	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999482218868848	WITHOUT_CLASSIFICATION	5.1778113115106696E-5	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999663231545111	WITHOUT_CLASSIFICATION	3.3676845488982524E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999644093381773	WITHOUT_CLASSIFICATION	3.5590661822660135E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999425992067386	WITHOUT_CLASSIFICATION	5.740079326132789E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999960946539584	WITHOUT_CLASSIFICATION	3.905346041538676E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999522279749621	WITHOUT_CLASSIFICATION	4.777202503802263E-5	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999816464900911	WITHOUT_CLASSIFICATION	1.835350990885132E-5	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999943928622326	WITHOUT_CLASSIFICATION	5.607137767408234E-5	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999717125161461	WITHOUT_CLASSIFICATION	2.8287483853851776E-5	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999270929524136	WITHOUT_CLASSIFICATION	7.290704758647366E-5	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999940601482618	WITHOUT_CLASSIFICATION	5.939851738223729E-6	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.999996837703275	WITHOUT_CLASSIFICATION	3.162296724993055E-6	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999549897323465	WITHOUT_CLASSIFICATION	4.501026765348633E-5	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999292656598717	WITHOUT_CLASSIFICATION	7.073434012828501E-5	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999616798906112	WITHOUT_CLASSIFICATION	3.832010938880417E-5	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999431911495154	WITHOUT_CLASSIFICATION	5.680885048468628E-5	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9999307240872853	WITHOUT_CLASSIFICATION	6.927591271473557E-5	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999562898493757	WITHOUT_CLASSIFICATION	4.3710150624325295E-5	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999405118514874	WITHOUT_CLASSIFICATION	5.948814851261013E-5	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999254580435832	WITHOUT_CLASSIFICATION	7.454195641677888E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.999987340709458	WITHOUT_CLASSIFICATION	1.265929054198327E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999960946539584	WITHOUT_CLASSIFICATION	3.905346041538676E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999285249719514	WITHOUT_CLASSIFICATION	7.147502804862381E-5	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999797267285415	WITHOUT_CLASSIFICATION	2.0273271458429432E-5	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999386328070731	WITHOUT_CLASSIFICATION	6.136719292696108E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999778515876333	WITHOUT_CLASSIFICATION	2.2148412366610143E-5	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999348906210795	WITHOUT_CLASSIFICATION	6.510937892047837E-5	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999670858795232	WITHOUT_CLASSIFICATION	3.291412047680361E-5	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999535165944827	WITHOUT_CLASSIFICATION	4.6483405517316485E-5	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999402047926934	WITHOUT_CLASSIFICATION	5.979520730664431E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999424145918262	WITHOUT_CLASSIFICATION	5.758540817382847E-5	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999878547179287	WITHOUT_CLASSIFICATION	1.214528207131871E-5	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9999602091480511	WITHOUT_CLASSIFICATION	3.979085194895351E-5	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999895996717076	WITHOUT_CLASSIFICATION	1.04003282923113E-5	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999603201194188	WITHOUT_CLASSIFICATION	3.967988058118245E-5	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999232703164224	WITHOUT_CLASSIFICATION	7.672968357761537E-5	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999516463903245	WITHOUT_CLASSIFICATION	4.835360967548496E-5	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999917474916998	WITHOUT_CLASSIFICATION	8.25250830009646E-6	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999513132968141	WITHOUT_CLASSIFICATION	4.868670318583564E-5	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999541930492732	WITHOUT_CLASSIFICATION	4.580695072669458E-5	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.999997019456753	WITHOUT_CLASSIFICATION	2.980543246929288E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999285249719514	WITHOUT_CLASSIFICATION	7.147502804862381E-5	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999581272431535	WITHOUT_CLASSIFICATION	4.187275684663584E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999501858090729	WITHOUT_CLASSIFICATION	4.981419092710322E-5	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999592621671423	WITHOUT_CLASSIFICATION	4.0737832857760175E-5	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999675640650417	WITHOUT_CLASSIFICATION	3.2435934958192325E-5	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999938067068098	WITHOUT_CLASSIFICATION	6.193293190249773E-6	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9996725435372367	WITHOUT_CLASSIFICATION	3.2745646276339277E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9996725435372367	WITHOUT_CLASSIFICATION	3.2745646276339277E-4	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999911526596245	WITHOUT_CLASSIFICATION	8.847340375613127E-6	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9996725435372367	WITHOUT_CLASSIFICATION	3.2745646276339277E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9996725435372367	WITHOUT_CLASSIFICATION	3.2745646276339277E-4	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999647562502425	WITHOUT_CLASSIFICATION	3.524374975737525E-5	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999976332943438	WITHOUT_CLASSIFICATION	2.3667056561896282E-5	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999508906304824	WITHOUT_CLASSIFICATION	4.910936951766928E-5	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999471973676536	WITHOUT_CLASSIFICATION	5.280263234640386E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999874074512107	WITHOUT_CLASSIFICATION	1.259254878928593E-5	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999955711866825	WITHOUT_CLASSIFICATION	4.428813317542302E-6	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.999933687635613	WITHOUT_CLASSIFICATION	6.631236438697395E-5	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999928069702632	WITHOUT_CLASSIFICATION	7.193029736900521E-6	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999286554129904	WITHOUT_CLASSIFICATION	7.1344587009579E-5	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999348963265098	WITHOUT_CLASSIFICATION	6.510367349022246E-5	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999586794069476	WITHOUT_CLASSIFICATION	4.132059305251193E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999545588790727	WITHOUT_CLASSIFICATION	4.54411209273377E-5	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999414753044668	WITHOUT_CLASSIFICATION	5.852469553324036E-5	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999503754410176	WITHOUT_CLASSIFICATION	4.962455898227919E-5	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999431574925784	WITHOUT_CLASSIFICATION	5.6842507421632336E-5	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999771168715674	WITHOUT_CLASSIFICATION	2.2883128432564464E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999709525810815	WITHOUT_CLASSIFICATION	2.904741891856695E-5	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999625445831385	WITHOUT_CLASSIFICATION	3.745541686159867E-5	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999228526915347	WITHOUT_CLASSIFICATION	7.714730846526921E-5	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999503754410176	WITHOUT_CLASSIFICATION	4.962455898227919E-5	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999696882434885	WITHOUT_CLASSIFICATION	3.0311756511453093E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999628784314596	WITHOUT_CLASSIFICATION	3.712156854040384E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999709525810815	WITHOUT_CLASSIFICATION	2.904741891856695E-5	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999522279749621	WITHOUT_CLASSIFICATION	4.777202503802263E-5	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9999261873635146	WITHOUT_CLASSIFICATION	7.381263648537576E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999864362711897	WITHOUT_CLASSIFICATION	1.3563728810307549E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999817665881654	WITHOUT_CLASSIFICATION	1.8233411834568408E-5	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999408394028789	WITHOUT_CLASSIFICATION	5.9160597121160104E-5	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999748925960512	WITHOUT_CLASSIFICATION	2.5107403948829653E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9999071790555965	WITHOUT_CLASSIFICATION	9.282094440366873E-5	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999967516228712	WITHOUT_CLASSIFICATION	3.248377128800686E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999037716605237	WITHOUT_CLASSIFICATION	9.62283394763445E-5	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999563874442746	WITHOUT_CLASSIFICATION	4.361255572542174E-5	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999717790780894	WITHOUT_CLASSIFICATION	2.8220921910667216E-5	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999758078650227	WITHOUT_CLASSIFICATION	2.4192134977230847E-5	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999488184433013	WITHOUT_CLASSIFICATION	5.1181556698634385E-5	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999914405763134	WITHOUT_CLASSIFICATION	8.559423686532123E-6	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999632142539262	WITHOUT_CLASSIFICATION	3.678574607371533E-5	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999880803539174	WITHOUT_CLASSIFICATION	1.1919646082559215E-5	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999560181552394	WITHOUT_CLASSIFICATION	4.398184476058839E-5	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999392842940931	WITHOUT_CLASSIFICATION	6.07157059069674E-5	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999986917436121	WITHOUT_CLASSIFICATION	1.3082563878998408E-5	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999756408621441	WITHOUT_CLASSIFICATION	2.4359137856005736E-5	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.999943172857146	WITHOUT_CLASSIFICATION	5.682714285399879E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999212674993617	WITHOUT_CLASSIFICATION	7.873250063825129E-5	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999768103545743	WITHOUT_CLASSIFICATION	2.3189645425692012E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999037716605237	WITHOUT_CLASSIFICATION	9.62283394763445E-5	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999877790265547	WITHOUT_CLASSIFICATION	1.2220973445283816E-5	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9999413919258224	WITHOUT_CLASSIFICATION	5.8608074177582925E-5	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999363264618222	WITHOUT_CLASSIFICATION	6.367353817781637E-5	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999224864969157	WITHOUT_CLASSIFICATION	7.751350308431135E-5	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999517141197085	WITHOUT_CLASSIFICATION	4.828588029147344E-5	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9999311712803051	WITHOUT_CLASSIFICATION	6.882871969496878E-5	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9999301785115081	WITHOUT_CLASSIFICATION	6.982148849183016E-5	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.999922005560692	WITHOUT_CLASSIFICATION	7.799443930798548E-5	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999410522433297	WITHOUT_CLASSIFICATION	5.894775667030008E-5	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9999239152506394	WITHOUT_CLASSIFICATION	7.608474936056439E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999780660511915	WITHOUT_CLASSIFICATION	2.1933948808423283E-5	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999695807286828	WITHOUT_CLASSIFICATION	3.041927131721322E-5	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999781894797306	WITHOUT_CLASSIFICATION	2.181052026940681E-5	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999907096499354	WITHOUT_CLASSIFICATION	9.290350064582891E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999659709069213	WITHOUT_CLASSIFICATION	3.402909307868068E-5	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999971803644979	WITHOUT_CLASSIFICATION	2.819635502222354E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999670103604597	WITHOUT_CLASSIFICATION	3.298963954041164E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999780660511915	WITHOUT_CLASSIFICATION	2.1933948808423283E-5	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999972295925741	WITHOUT_CLASSIFICATION	2.77040742597735E-6	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999507394710032	WITHOUT_CLASSIFICATION	4.926052899667256E-5	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.999962500756746	WITHOUT_CLASSIFICATION	3.7499243253952E-5	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999642370439266	WITHOUT_CLASSIFICATION	3.5762956073442875E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999831832546063	WITHOUT_CLASSIFICATION	1.6816745393597387E-5	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999896088765201	WITHOUT_CLASSIFICATION	1.0391123479860505E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999659709069213	WITHOUT_CLASSIFICATION	3.402909307868068E-5	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999819734851341	WITHOUT_CLASSIFICATION	1.8026514865906623E-5	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864135626639	WITHOUT_CLASSIFICATION	1.358643733610675E-5	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666639045521	WITHOUT_CLASSIFICATION	3.3336095447802244E-5	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986895566583779	WITHOUT_CLASSIFICATION	0.001310443341622094	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999165130712104	WITHOUT_CLASSIFICATION	8.348692878960408E-4	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992200355488678	WITHOUT_CLASSIFICATION	7.799644511320365E-4	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999839097323461	WITHOUT_CLASSIFICATION	1.60902676538271E-5	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999839097323461	WITHOUT_CLASSIFICATION	1.60902676538271E-5	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999516234126486	WITHOUT_CLASSIFICATION	4.8376587351326307E-5	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999794871125326	WITHOUT_CLASSIFICATION	2.0512887467443544E-5	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999378831227372	WITHOUT_CLASSIFICATION	6.211687726271101E-5	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999445452395586	WITHOUT_CLASSIFICATION	5.545476044148696E-5	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9998884518230728	WITHOUT_CLASSIFICATION	1.1154817692711534E-4	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999619956151203	WITHOUT_CLASSIFICATION	3.800438487971594E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999638162648093	WITHOUT_CLASSIFICATION	3.6183735190683216E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999393016890724	WITHOUT_CLASSIFICATION	6.069831092764974E-5	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999950162071564	WITHOUT_CLASSIFICATION	4.983792843552612E-6	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999654669241111	WITHOUT_CLASSIFICATION	3.453307588881907E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999619956151203	WITHOUT_CLASSIFICATION	3.800438487971594E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999638162648093	WITHOUT_CLASSIFICATION	3.6183735190683216E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999393016890724	WITHOUT_CLASSIFICATION	6.069831092764974E-5	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9980019573891067	WITHOUT_CLASSIFICATION	0.0019980426108932984	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9999423518751981	WITHOUT_CLASSIFICATION	5.7648124801993434E-5	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999923172846764	WITHOUT_CLASSIFICATION	7.682715323584148E-6	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999876722266147	WITHOUT_CLASSIFICATION	1.232777338535034E-5	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999762373552307	WITHOUT_CLASSIFICATION	2.3762644769339303E-5	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999904735388191	WITHOUT_CLASSIFICATION	9.526461180868764E-6	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999298811577808	WITHOUT_CLASSIFICATION	7.01188422191824E-5	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999166116229927	WITHOUT_CLASSIFICATION	8.338837700725939E-5	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9973104380167263	WITHOUT_CLASSIFICATION	0.0026895619832738296	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999310114304294	WITHOUT_CLASSIFICATION	6.898856957056984E-5	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999690128779223	WITHOUT_CLASSIFICATION	3.0987122077605206E-5	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999682056834496	WITHOUT_CLASSIFICATION	3.1794316550449625E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.999957826796854	WITHOUT_CLASSIFICATION	4.2173203146128294E-5	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999629009101635	WITHOUT_CLASSIFICATION	3.709908983651244E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999732060988965	WITHOUT_CLASSIFICATION	2.6793901103539885E-5	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999327159724222	WITHOUT_CLASSIFICATION	6.728402757786018E-5	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999583021254952	WITHOUT_CLASSIFICATION	4.169787450478826E-5	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999528056378553	WITHOUT_CLASSIFICATION	4.719436214473006E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999951343299393	WITHOUT_CLASSIFICATION	4.8656700607757976E-6	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999859290844958	WITHOUT_CLASSIFICATION	1.4070915504151783E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999921287423708	WITHOUT_CLASSIFICATION	7.871257629257708E-6	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999565874482298	WITHOUT_CLASSIFICATION	4.341255177013085E-5	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999898429798355	WITHOUT_CLASSIFICATION	1.0157020164437499E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999969768789025	WITHOUT_CLASSIFICATION	3.023121097370951E-6	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.999849915894965	WITHOUT_CLASSIFICATION	1.5008410503503016E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999567033027311	WITHOUT_CLASSIFICATION	4.329669726877417E-5	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999588987876757	WITHOUT_CLASSIFICATION	4.1101212324348145E-5	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999919898736198	WITHOUT_CLASSIFICATION	8.010126380278553E-6	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999615061459957	WITHOUT_CLASSIFICATION	3.849385400425911E-5	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999483318621988	WITHOUT_CLASSIFICATION	5.166813780121485E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999492187807586	WITHOUT_CLASSIFICATION	5.078121924131489E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999492187807586	WITHOUT_CLASSIFICATION	5.078121924131489E-5	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.999986492188662	WITHOUT_CLASSIFICATION	1.3507811338010219E-5	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999961731375728	WITHOUT_CLASSIFICATION	3.826862427081951E-6	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999713847491858	WITHOUT_CLASSIFICATION	2.8615250814289212E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999984202024053	WITHOUT_CLASSIFICATION	1.579797594698451E-5	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999271079305311	WITHOUT_CLASSIFICATION	7.289206946888473E-5	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.999988876577317	WITHOUT_CLASSIFICATION	1.1123422682939636E-5	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9973387427419887	WITHOUT_CLASSIFICATION	0.002661257258011271	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999845341028074	WITHOUT_CLASSIFICATION	1.54658971926127E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999298871875146	WITHOUT_CLASSIFICATION	7.011281248543948E-5	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999703340394384	WITHOUT_CLASSIFICATION	2.9665960561618918E-5	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999777287921333	WITHOUT_CLASSIFICATION	2.2271207866687202E-5	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999643128944441	WITHOUT_CLASSIFICATION	3.5687105555885266E-5	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686068939827	WITHOUT_CLASSIFICATION	3.139310601720806E-5	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685638324225	WITHOUT_CLASSIFICATION	3.143616757753354E-5	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999627095217969	WITHOUT_CLASSIFICATION	3.729047820312017E-5	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700488281028	WITHOUT_CLASSIFICATION	2.995117189724547E-5	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999747876087288	WITHOUT_CLASSIFICATION	2.5212391271144528E-5	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686590443658	WITHOUT_CLASSIFICATION	3.134095563419067E-5	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999601752350046	WITHOUT_CLASSIFICATION	3.9824764995440065E-5	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999674541565373	WITHOUT_CLASSIFICATION	3.254584346266468E-5	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999742943575998	WITHOUT_CLASSIFICATION	2.57056424002428E-5	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999768371080429	WITHOUT_CLASSIFICATION	2.316289195720114E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999110741765834	WITHOUT_CLASSIFICATION	8.892582341658311E-5	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999964199861067	WITHOUT_CLASSIFICATION	3.5800138932349592E-6	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999945078419153	WITHOUT_CLASSIFICATION	5.4921580846737864E-6	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9997654319111766	WITHOUT_CLASSIFICATION	2.3456808882349543E-4	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999931163082861	WITHOUT_CLASSIFICATION	6.883691713897641E-6	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999841028435498	WITHOUT_CLASSIFICATION	1.5897156450249983E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999110741765834	WITHOUT_CLASSIFICATION	8.892582341658311E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999110741765834	WITHOUT_CLASSIFICATION	8.892582341658311E-5	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999918245690084	WITHOUT_CLASSIFICATION	8.175430991712399E-6	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999550449771923	WITHOUT_CLASSIFICATION	4.495502280766303E-5	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999964023453712	WITHOUT_CLASSIFICATION	3.597654628864905E-6	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999987883451516	WITHOUT_CLASSIFICATION	1.211654848402465E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999127886693051	WITHOUT_CLASSIFICATION	8.721133069492018E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999951343299393	WITHOUT_CLASSIFICATION	4.8656700607757976E-6	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999571605516101	WITHOUT_CLASSIFICATION	4.2839448389922706E-5	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999508013439429	WITHOUT_CLASSIFICATION	4.919865605715949E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999762035971467	WITHOUT_CLASSIFICATION	2.3796402853345745E-5	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999593530021859	WITHOUT_CLASSIFICATION	4.06469978141312E-5	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999946530831614	WITHOUT_CLASSIFICATION	5.346916838629825E-6	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960153454704	WITHOUT_CLASSIFICATION	3.984654529593156E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999966995803174	WITHOUT_CLASSIFICATION	3.3004196825952365E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999966995803174	WITHOUT_CLASSIFICATION	3.3004196825952365E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999673237509472	WITHOUT_CLASSIFICATION	3.267624905283786E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999673237509472	WITHOUT_CLASSIFICATION	3.267624905283786E-5	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999938133099412	WITHOUT_CLASSIFICATION	6.186690058796144E-5	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999568627174863	WITHOUT_CLASSIFICATION	4.313728251371458E-5	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999985711808195	WITHOUT_CLASSIFICATION	1.4288191805043969E-5	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999427318201071	WITHOUT_CLASSIFICATION	5.726817989293555E-5	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999917876871165	WITHOUT_CLASSIFICATION	8.212312883470741E-6	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999817972229269	WITHOUT_CLASSIFICATION	1.820277707314635E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999536830438701	WITHOUT_CLASSIFICATION	4.631695612993045E-5	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597500010591	WITHOUT_CLASSIFICATION	4.024999894090963E-5	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999606299175344	WITHOUT_CLASSIFICATION	3.937008246556657E-5	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999582522464352	WITHOUT_CLASSIFICATION	4.174775356481521E-5	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999755124731438	WITHOUT_CLASSIFICATION	2.4487526856245996E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999392413091839	WITHOUT_CLASSIFICATION	6.0758690816155294E-5	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999711984764698	WITHOUT_CLASSIFICATION	2.8801523530263657E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999729452377131	WITHOUT_CLASSIFICATION	2.7054762287000234E-5	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999571981129202	WITHOUT_CLASSIFICATION	4.280188707985403E-5	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999289886246508	WITHOUT_CLASSIFICATION	7.10113753491802E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999517823383653	WITHOUT_CLASSIFICATION	4.8217661634695696E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999517823383653	WITHOUT_CLASSIFICATION	4.8217661634695696E-5	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999753618344601	WITHOUT_CLASSIFICATION	2.4638165539867404E-5	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999186261476283	WITHOUT_CLASSIFICATION	8.1373852371671E-5	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999928018287764	WITHOUT_CLASSIFICATION	7.198171223633E-6	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999537937418989	WITHOUT_CLASSIFICATION	4.620625810121885E-5	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999469874234295	WITHOUT_CLASSIFICATION	5.301257657064874E-5	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999535839161264	WITHOUT_CLASSIFICATION	4.641608387362076E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991629349468996	WITHOUT_CLASSIFICATION	8.370650531004709E-4	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999667308986508	WITHOUT_CLASSIFICATION	3.326910134914898E-5	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999969921583991	WITHOUT_CLASSIFICATION	3.0078416009230596E-6	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.999994433282627	WITHOUT_CLASSIFICATION	5.5667173729395284E-6	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999324591987961	WITHOUT_CLASSIFICATION	6.754080120388607E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999240533189899	WITHOUT_CLASSIFICATION	7.594668101015279E-5	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999933544433365	WITHOUT_CLASSIFICATION	6.645556663462037E-6	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998827078816209	WITHOUT_CLASSIFICATION	1.1729211837898703E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999268753828698	WITHOUT_CLASSIFICATION	7.312461713015652E-5	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999859643215553	WITHOUT_CLASSIFICATION	1.403567844463159E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999658111077598	WITHOUT_CLASSIFICATION	3.418889224007437E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999679380193498	WITHOUT_CLASSIFICATION	3.206198065015765E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999797071105406	WITHOUT_CLASSIFICATION	2.029288945933275E-5	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998226188348	WITHOUT_CLASSIFICATION	1.773811652145E-7	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999996032153194	WITHOUT_CLASSIFICATION	3.96784680600462E-6	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999975700700536	WITHOUT_CLASSIFICATION	2.429929946416688E-6	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999929851539769	WITHOUT_CLASSIFICATION	7.014846022988964E-6	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999660569670726	WITHOUT_CLASSIFICATION	3.394303292740507E-5	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999832297932564	WITHOUT_CLASSIFICATION	1.6770206743660993E-5	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999671569182618	WITHOUT_CLASSIFICATION	3.284308173824433E-5	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.999954003686611	WITHOUT_CLASSIFICATION	4.599631338894605E-5	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999973447109106	WITHOUT_CLASSIFICATION	2.65528908926671E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999668403894834	WITHOUT_CLASSIFICATION	3.315961051671664E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999996706114951	WITHOUT_CLASSIFICATION	3.2938850499682145E-7	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999563796952227	WITHOUT_CLASSIFICATION	4.362030477722197E-5	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.999946065042502	WITHOUT_CLASSIFICATION	5.393495749790717E-5	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999031460604216	WITHOUT_CLASSIFICATION	9.685393957839977E-5	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.999938769401218	WITHOUT_CLASSIFICATION	6.123059878211606E-5	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999488567318077	WITHOUT_CLASSIFICATION	5.114326819244218E-5	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999981050135889	WITHOUT_CLASSIFICATION	1.8949864110609157E-6	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999522567310716	WITHOUT_CLASSIFICATION	4.7743268928347256E-5	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999714860281195	WITHOUT_CLASSIFICATION	2.8513971880532964E-5	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999500109476249	WITHOUT_CLASSIFICATION	4.9989052375041416E-5	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999992411863469	WITHOUT_CLASSIFICATION	7.588136531938814E-7	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999952273867278	WITHOUT_CLASSIFICATION	4.7726132721981575E-5	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999842279961577	WITHOUT_CLASSIFICATION	1.5772003842320387E-5	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999970558162167	WITHOUT_CLASSIFICATION	2.944183783356574E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999878122179087	WITHOUT_CLASSIFICATION	1.2187782091300827E-5	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999349964195984	WITHOUT_CLASSIFICATION	6.500358040169792E-5	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999418599091625	WITHOUT_CLASSIFICATION	5.8140090837530635E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999821538770675	WITHOUT_CLASSIFICATION	1.7846122932578625E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999674775646042	WITHOUT_CLASSIFICATION	3.252243539573734E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999545796056302	WITHOUT_CLASSIFICATION	4.542039436971939E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999859838469736	WITHOUT_CLASSIFICATION	1.4016153026385203E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.999958632071105	WITHOUT_CLASSIFICATION	4.1367928895103304E-5	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999646083176148	WITHOUT_CLASSIFICATION	3.539168238512079E-5	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999742193610535	WITHOUT_CLASSIFICATION	2.578063894643521E-5	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999106681021759	WITHOUT_CLASSIFICATION	8.933189782415447E-5	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999580295930279	WITHOUT_CLASSIFICATION	4.1970406972135184E-5	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999422090284349	WITHOUT_CLASSIFICATION	5.77909715650784E-5	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999610994115927	WITHOUT_CLASSIFICATION	3.8900588407364374E-5	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999815640745578	WITHOUT_CLASSIFICATION	1.8435925442147234E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999030415303539	WITHOUT_CLASSIFICATION	9.695846964608032E-5	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999886229297447	WITHOUT_CLASSIFICATION	1.1377070255261518E-5	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999994668601963	WITHOUT_CLASSIFICATION	5.331398037058149E-6	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999983500476929	WITHOUT_CLASSIFICATION	1.6499523070841152E-6	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999917894702137	WITHOUT_CLASSIFICATION	8.210529786256798E-6	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999908641111973	WITHOUT_CLASSIFICATION	9.135888802747297E-6	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999762749322053	WITHOUT_CLASSIFICATION	2.372506779459623E-5	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999930764913235	WITHOUT_CLASSIFICATION	6.923508676515885E-6	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999734869521527	WITHOUT_CLASSIFICATION	2.651304784726412E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999466912362983	WITHOUT_CLASSIFICATION	5.330876370174119E-5	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999512648243386	WITHOUT_CLASSIFICATION	4.873517566143204E-5	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.999917161636442	WITHOUT_CLASSIFICATION	8.28383635580431E-5	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999808250016669	WITHOUT_CLASSIFICATION	1.9174998333162442E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999895889760702	WITHOUT_CLASSIFICATION	1.0411023929764719E-5	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999408396010316	WITHOUT_CLASSIFICATION	5.916039896835208E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999771350466156	WITHOUT_CLASSIFICATION	2.286495338451079E-5	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.999993477295024	WITHOUT_CLASSIFICATION	6.5227049760677166E-6	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999371937668108	WITHOUT_CLASSIFICATION	6.28062331892223E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999932585749872	WITHOUT_CLASSIFICATION	6.741425012759949E-6	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999869297852313	WITHOUT_CLASSIFICATION	1.3070214768739196E-5	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999865624050148	WITHOUT_CLASSIFICATION	1.3437594985137682E-5	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999288567602168	WITHOUT_CLASSIFICATION	7.114323978321276E-5	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999527694600867	WITHOUT_CLASSIFICATION	4.723053991321882E-5	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999718360606061	WITHOUT_CLASSIFICATION	2.8163939393816144E-5	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9998654246690287	WITHOUT_CLASSIFICATION	1.3457533097129885E-4	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999497170945199	WITHOUT_CLASSIFICATION	5.028290548001931E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9998349664534881	WITHOUT_CLASSIFICATION	1.6503354651198096E-4	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9998689067161333	WITHOUT_CLASSIFICATION	1.3109328386668356E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999399962241785	WITHOUT_CLASSIFICATION	6.000377582146144E-5	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999568944820855	WITHOUT_CLASSIFICATION	4.3105517914519046E-5	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999719500967781	WITHOUT_CLASSIFICATION	2.804990322185957E-5	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999663389764087	WITHOUT_CLASSIFICATION	3.3661023591326316E-5	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999387540527193	WITHOUT_CLASSIFICATION	6.124594728074474E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999932731453809	WITHOUT_CLASSIFICATION	6.7268546189965896E-6	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999407209294944	WITHOUT_CLASSIFICATION	5.9279070505603884E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.999938895914468	WITHOUT_CLASSIFICATION	6.110408553190044E-5	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999588022924717	WITHOUT_CLASSIFICATION	4.119770752835008E-5	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999571569139134	WITHOUT_CLASSIFICATION	4.284308608665857E-5	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999928105164704	WITHOUT_CLASSIFICATION	7.189483529689357E-6	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999747095864434	WITHOUT_CLASSIFICATION	2.5290413556499603E-5	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999469576546518	WITHOUT_CLASSIFICATION	5.304234534814179E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999499595710922	WITHOUT_CLASSIFICATION	5.004042890769479E-5	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999600565771339	WITHOUT_CLASSIFICATION	3.99434228660544E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999967675979758	WITHOUT_CLASSIFICATION	3.23240202420118E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999967675979758	WITHOUT_CLASSIFICATION	3.23240202420118E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999478156162481	WITHOUT_CLASSIFICATION	5.218438375174659E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999556053416112	WITHOUT_CLASSIFICATION	4.43946583888269E-5	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999671092366776	WITHOUT_CLASSIFICATION	3.289076332239224E-5	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999846117111542	WITHOUT_CLASSIFICATION	1.5388288845941E-5	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.999987911532092	WITHOUT_CLASSIFICATION	1.208846790794812E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999890836638468	WITHOUT_CLASSIFICATION	1.0916336153151078E-5	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999687795118806	WITHOUT_CLASSIFICATION	3.122048811943233E-5	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.999955415668923	WITHOUT_CLASSIFICATION	4.458433107706061E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999823369307165	WITHOUT_CLASSIFICATION	1.7663069283533348E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999929565605851	WITHOUT_CLASSIFICATION	7.043439414925677E-6	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999983118385981	WITHOUT_CLASSIFICATION	1.6881614019395961E-6	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999724879059804	WITHOUT_CLASSIFICATION	2.7512094019608007E-5	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999838830951232	WITHOUT_CLASSIFICATION	1.6116904876773716E-5	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999756195356106	WITHOUT_CLASSIFICATION	2.438046438934988E-5	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999683326762169	WITHOUT_CLASSIFICATION	3.166732378324201E-5	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999449113054996	WITHOUT_CLASSIFICATION	5.508869450050006E-5	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999449113054996	WITHOUT_CLASSIFICATION	5.508869450050006E-5	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999949101891633	WITHOUT_CLASSIFICATION	5.0898108366424346E-6	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999840502222498	WITHOUT_CLASSIFICATION	1.5949777750131712E-5	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999490902172262	WITHOUT_CLASSIFICATION	5.090978277367486E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999983335428765	WITHOUT_CLASSIFICATION	1.6664571234967536E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999392413091839	WITHOUT_CLASSIFICATION	6.0758690816155294E-5	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999291259482286	WITHOUT_CLASSIFICATION	7.087405177143955E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999474839240403	WITHOUT_CLASSIFICATION	5.2516075959820936E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999706919198804	WITHOUT_CLASSIFICATION	2.930808011964075E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999706919198804	WITHOUT_CLASSIFICATION	2.930808011964075E-5	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999979682700375	WITHOUT_CLASSIFICATION	2.0317299625103105E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999678562770976	WITHOUT_CLASSIFICATION	3.2143722902358336E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999904316870099	WITHOUT_CLASSIFICATION	9.568312990198001E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999393691602	WITHOUT_CLASSIFICATION	6.063083972675316E-8	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999989651978872	WITHOUT_CLASSIFICATION	1.0348021127373128E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999768323490382	WITHOUT_CLASSIFICATION	2.3167650961690984E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999793653463646	WITHOUT_CLASSIFICATION	2.0634653635438566E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999640066100528	WITHOUT_CLASSIFICATION	3.599338994714752E-5	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999655665617557	WITHOUT_CLASSIFICATION	3.4433438244204686E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999982963912931	WITHOUT_CLASSIFICATION	1.7036087068950266E-5	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999597004915174	WITHOUT_CLASSIFICATION	4.0299508482708814E-5	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.999909260221176	WITHOUT_CLASSIFICATION	9.073977882394113E-5	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999222154842811	WITHOUT_CLASSIFICATION	7.778451571888662E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999684962256901	WITHOUT_CLASSIFICATION	3.1503774309992636E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999978063291293	WITHOUT_CLASSIFICATION	2.1936708707080537E-5	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999957789974086	WITHOUT_CLASSIFICATION	4.221002591399164E-5	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999757008825859	WITHOUT_CLASSIFICATION	2.429911741409702E-5	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999399586647179	WITHOUT_CLASSIFICATION	6.0041335282218814E-5	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9992130923541424	WITHOUT_CLASSIFICATION	7.869076458576218E-4	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999391217204179	WITHOUT_CLASSIFICATION	6.0878279582219906E-5	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.999934686324556	WITHOUT_CLASSIFICATION	6.531367544411766E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999862686928437	WITHOUT_CLASSIFICATION	1.3731307156308823E-5	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999595526145275	WITHOUT_CLASSIFICATION	4.044738547243838E-5	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999264589822012	WITHOUT_CLASSIFICATION	7.354101779885281E-5	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9998756018556332	WITHOUT_CLASSIFICATION	1.243981443668426E-4	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999989026559936	WITHOUT_CLASSIFICATION	1.0973440065343868E-6	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999956465693167	WITHOUT_CLASSIFICATION	4.3534306832519755E-6	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999359746649795	WITHOUT_CLASSIFICATION	6.402533502040825E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999911384798399	WITHOUT_CLASSIFICATION	8.861520160084729E-6	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999650886974049	WITHOUT_CLASSIFICATION	3.491130259511945E-5	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999300786729407	WITHOUT_CLASSIFICATION	6.992132705932961E-5	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999643652551712	WITHOUT_CLASSIFICATION	3.5634744828841024E-5	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999830444814314	WITHOUT_CLASSIFICATION	1.6955518568615877E-5	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999165954769925	WITHOUT_CLASSIFICATION	8.340452300754136E-5	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999415566958696	WITHOUT_CLASSIFICATION	5.8443304130313486E-5	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9999340980575322	WITHOUT_CLASSIFICATION	6.59019424677773E-5	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999413914452406	WITHOUT_CLASSIFICATION	5.860855475942951E-5	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999295761756098	WITHOUT_CLASSIFICATION	7.042382439015824E-5	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999676021959963	WITHOUT_CLASSIFICATION	3.239780400373419E-5	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999930866389078	WITHOUT_CLASSIFICATION	6.91336109226394E-6	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999957854327288	WITHOUT_CLASSIFICATION	4.21456727119105E-6	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999295778093864	WITHOUT_CLASSIFICATION	7.042219061362167E-5	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999986344751325	WITHOUT_CLASSIFICATION	1.3655248675128595E-5	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999102142755	WITHOUT_CLASSIFICATION	8.978572451570168E-8	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999631075780916	WITHOUT_CLASSIFICATION	3.6892421908408796E-5	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999295761756098	WITHOUT_CLASSIFICATION	7.042382439015824E-5	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999676021959963	WITHOUT_CLASSIFICATION	3.239780400373419E-5	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999677528910459	WITHOUT_CLASSIFICATION	3.2247108954146376E-5	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999383419124026	WITHOUT_CLASSIFICATION	6.165808759747346E-5	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999837747228109	WITHOUT_CLASSIFICATION	1.6225277189078786E-5	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999633847563437	WITHOUT_CLASSIFICATION	3.6615243656236864E-5	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999895429415601	WITHOUT_CLASSIFICATION	1.0457058439825316E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999938745786036	WITHOUT_CLASSIFICATION	6.125421396486423E-6	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999324058360163	WITHOUT_CLASSIFICATION	6.759416398374125E-5	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999606278740855	WITHOUT_CLASSIFICATION	3.937212591462391E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9998813870685577	WITHOUT_CLASSIFICATION	1.1861293144239337E-4	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999895045549188	WITHOUT_CLASSIFICATION	1.0495445081285248E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9998813870685577	WITHOUT_CLASSIFICATION	1.1861293144239337E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999921906665404	WITHOUT_CLASSIFICATION	7.809333459568737E-6	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999446455898926	WITHOUT_CLASSIFICATION	5.535441010730782E-5	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.999992047798023	WITHOUT_CLASSIFICATION	7.952201977031743E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999385396125963	WITHOUT_CLASSIFICATION	6.14603874037865E-5	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999731942082698	WITHOUT_CLASSIFICATION	2.6805791730213306E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999791912144678	WITHOUT_CLASSIFICATION	2.0808785532320714E-5	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999841473009421	WITHOUT_CLASSIFICATION	1.58526990579495E-5	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999686878514068	WITHOUT_CLASSIFICATION	3.1312148593162346E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999221866800262	WITHOUT_CLASSIFICATION	7.781331997374416E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999368638496768	WITHOUT_CLASSIFICATION	6.313615032320198E-5	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999384124320986	WITHOUT_CLASSIFICATION	6.158756790141153E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999352818358626	WITHOUT_CLASSIFICATION	6.471816413738649E-5	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999686149015791	WITHOUT_CLASSIFICATION	3.138509842093681E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9973134258809635	WITHOUT_CLASSIFICATION	0.002686574119036461	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9980793187506816	WITHOUT_CLASSIFICATION	0.001920681249318457	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.999949158353783	WITHOUT_CLASSIFICATION	5.084164621706494E-5	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999664069108704	WITHOUT_CLASSIFICATION	3.359308912956381E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9973161956607411	WITHOUT_CLASSIFICATION	0.0026838043392589206	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9999364068808793	WITHOUT_CLASSIFICATION	6.359311912076387E-5	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999874716316245	WITHOUT_CLASSIFICATION	1.2528368375603953E-5	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999845319038406	WITHOUT_CLASSIFICATION	1.546809615937654E-5	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999789790032608	WITHOUT_CLASSIFICATION	2.1020996739225928E-5	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999665072744054	WITHOUT_CLASSIFICATION	3.3492725594564945E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999958438832429	WITHOUT_CLASSIFICATION	4.156116757098994E-5	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9973178867000907	WITHOUT_CLASSIFICATION	0.002682113299909306	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999719575333089	WITHOUT_CLASSIFICATION	2.804246669109561E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999428554973716	WITHOUT_CLASSIFICATION	5.7144502628373764E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999678284299359	WITHOUT_CLASSIFICATION	3.217157006410444E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999514703460533	WITHOUT_CLASSIFICATION	4.852965394671327E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999540019504548	WITHOUT_CLASSIFICATION	4.599804954523167E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999303820003231	WITHOUT_CLASSIFICATION	6.96179996768774E-5	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999888829844613	WITHOUT_CLASSIFICATION	1.111701553879188E-5	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.998979493747381	WITHOUT_CLASSIFICATION	0.0010205062526189646	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999480548489461	WITHOUT_CLASSIFICATION	5.194515105382816E-5	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.999961893815918	WITHOUT_CLASSIFICATION	3.810618408196628E-5	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999277009227266	WITHOUT_CLASSIFICATION	7.229907727335103E-5	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999564339899348	WITHOUT_CLASSIFICATION	4.356601006518006E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999352818358626	WITHOUT_CLASSIFICATION	6.471816413738649E-5	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999262237166029	WITHOUT_CLASSIFICATION	7.377628339713304E-5	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999539370216277	WITHOUT_CLASSIFICATION	4.606297837224767E-5	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9996402015324946	WITHOUT_CLASSIFICATION	3.5979846750547903E-4	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999505527989013	WITHOUT_CLASSIFICATION	4.944720109880394E-5	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999822769204014	WITHOUT_CLASSIFICATION	1.772307959856619E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999809582613187	WITHOUT_CLASSIFICATION	1.904173868126602E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999221866800262	WITHOUT_CLASSIFICATION	7.781331997374416E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999221866800262	WITHOUT_CLASSIFICATION	7.781331997374416E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999971382252665	WITHOUT_CLASSIFICATION	2.8617747334978197E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.999971363251614	WITHOUT_CLASSIFICATION	2.8636748386128522E-5	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999303675975877	WITHOUT_CLASSIFICATION	6.963240241237667E-5	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999723562284585	WITHOUT_CLASSIFICATION	2.7643771541563463E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999548847556279	WITHOUT_CLASSIFICATION	4.511524437222077E-5	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999628749686926	WITHOUT_CLASSIFICATION	3.7125031307443374E-5	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999676323126531	WITHOUT_CLASSIFICATION	3.23676873468603E-5	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999867615581591	WITHOUT_CLASSIFICATION	1.3238441840819428E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999811292611404	WITHOUT_CLASSIFICATION	1.8870738859693535E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999862486941402	WITHOUT_CLASSIFICATION	1.3751305859654565E-5	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999855928539242	WITHOUT_CLASSIFICATION	1.440714607593486E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999289168793525	WITHOUT_CLASSIFICATION	7.108312064759724E-5	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999302814928764	WITHOUT_CLASSIFICATION	6.971850712359606E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999862486941402	WITHOUT_CLASSIFICATION	1.3751305859654565E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999694959714835	WITHOUT_CLASSIFICATION	3.050402851651061E-5	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999759875548097	WITHOUT_CLASSIFICATION	2.4012445190381396E-5	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999511645097618	WITHOUT_CLASSIFICATION	4.8835490238185356E-5	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9889000360927072	WITHOUT_CLASSIFICATION	0.011099963907292908	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999289168793525	WITHOUT_CLASSIFICATION	7.108312064759724E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999977594777473	WITHOUT_CLASSIFICATION	2.240522252709479E-5	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999974501083099	WITHOUT_CLASSIFICATION	2.54989169006918E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999977010280411	WITHOUT_CLASSIFICATION	2.2989719589029787E-6	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999960870904836	WITHOUT_CLASSIFICATION	3.912909516348497E-6	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999282071805577	WITHOUT_CLASSIFICATION	7.1792819442221E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999297887601702	WITHOUT_CLASSIFICATION	7.021123982977963E-5	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999657654779395	WITHOUT_CLASSIFICATION	3.42345220603946E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999928460741793	WITHOUT_CLASSIFICATION	7.153925820700112E-5	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999961901384635	WITHOUT_CLASSIFICATION	3.809861536499836E-5	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999562252565435	WITHOUT_CLASSIFICATION	4.377474345649471E-5	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999880535068244	WITHOUT_CLASSIFICATION	1.194649317572107E-5	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999373628777838	WITHOUT_CLASSIFICATION	6.263712221618727E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999862486941402	WITHOUT_CLASSIFICATION	1.3751305859654565E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999977594777473	WITHOUT_CLASSIFICATION	2.240522252709479E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999977010280411	WITHOUT_CLASSIFICATION	2.2989719589029787E-6	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999605498199563	WITHOUT_CLASSIFICATION	3.9450180043616196E-5	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999925852736681	WITHOUT_CLASSIFICATION	7.4147263318934015E-6	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999560342831667	WITHOUT_CLASSIFICATION	4.396571683331503E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999289168793525	WITHOUT_CLASSIFICATION	7.108312064759724E-5	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999842546421739	WITHOUT_CLASSIFICATION	1.5745357826141343E-5	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999357950917135	WITHOUT_CLASSIFICATION	6.420490828653081E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999312757918448	WITHOUT_CLASSIFICATION	6.872420815512884E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999928460741793	WITHOUT_CLASSIFICATION	7.153925820700112E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999694959714835	WITHOUT_CLASSIFICATION	3.050402851651061E-5	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999577975739756	WITHOUT_CLASSIFICATION	4.220242602447942E-5	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.999932246604463	WITHOUT_CLASSIFICATION	6.77533955370301E-5	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999037125580231	WITHOUT_CLASSIFICATION	9.628744197679253E-5	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9996132728548704	WITHOUT_CLASSIFICATION	3.86727145129514E-4	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9995977313015927	WITHOUT_CLASSIFICATION	4.022686984073572E-4	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9999424556495773	WITHOUT_CLASSIFICATION	5.754435042281645E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999385396125963	WITHOUT_CLASSIFICATION	6.14603874037865E-5	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660403991779	WITHOUT_CLASSIFICATION	3.395960082211037E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999345662781584	WITHOUT_CLASSIFICATION	6.54337218416794E-5	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999963904972775	WITHOUT_CLASSIFICATION	3.6095027225528214E-6	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999672389572305	WITHOUT_CLASSIFICATION	3.276104276955865E-5	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999851606199484	WITHOUT_CLASSIFICATION	1.483938005160429E-5	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999811114030027	WITHOUT_CLASSIFICATION	1.888859699718071E-5	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999828065466589	WITHOUT_CLASSIFICATION	1.7193453341022524E-5	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999367334946292	WITHOUT_CLASSIFICATION	6.326650537078844E-5	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999716389907912	WITHOUT_CLASSIFICATION	2.8361009208748474E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999312757918448	WITHOUT_CLASSIFICATION	6.872420815512884E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999345662781584	WITHOUT_CLASSIFICATION	6.54337218416794E-5	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.999928580555045	WITHOUT_CLASSIFICATION	7.141944495502988E-5	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.997315367675983	WITHOUT_CLASSIFICATION	0.0026846323240169155	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999434841082228	WITHOUT_CLASSIFICATION	5.651589177719561E-5	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999259380122951	WITHOUT_CLASSIFICATION	7.406198770495856E-5	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9999308844826122	WITHOUT_CLASSIFICATION	6.911551738777534E-5	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999874074589692	WITHOUT_CLASSIFICATION	1.2592541030748203E-5	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999551731337953	WITHOUT_CLASSIFICATION	4.4826866204659135E-5	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999239007760421	WITHOUT_CLASSIFICATION	7.609922395794173E-5	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999541989546185	WITHOUT_CLASSIFICATION	4.580104538163177E-5	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9984314417659131	WITHOUT_CLASSIFICATION	0.0015685582340868517	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999357308208877	WITHOUT_CLASSIFICATION	6.426917911229535E-5	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999851765906825	WITHOUT_CLASSIFICATION	1.4823409317430556E-5	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999473032723355	WITHOUT_CLASSIFICATION	5.269672766452047E-5	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999307185679125	WITHOUT_CLASSIFICATION	6.928143208748651E-5	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999927813136638	WITHOUT_CLASSIFICATION	7.2186863361789785E-6	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999985054946644	WITHOUT_CLASSIFICATION	1.4945053356249676E-6	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999979095934557	WITHOUT_CLASSIFICATION	2.0904065442923326E-6	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999677765227161	WITHOUT_CLASSIFICATION	3.222347728394018E-5	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999326103298696	WITHOUT_CLASSIFICATION	6.738967013042389E-5	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999634272859803	WITHOUT_CLASSIFICATION	3.657271401971208E-5	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999459497722798	WITHOUT_CLASSIFICATION	5.405022772016173E-5	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999438771862138	WITHOUT_CLASSIFICATION	5.6122813786148015E-5	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999923033829743	WITHOUT_CLASSIFICATION	7.696617025686748E-6	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999418634567689	WITHOUT_CLASSIFICATION	5.813654323108828E-5	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8311339780927496	WITHOUT_CLASSIFICATION	0.16886602190725036	IMPLEMENTATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999677842289229	WITHOUT_CLASSIFICATION	3.2215771077189345E-5	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999700286326797	WITHOUT_CLASSIFICATION	2.997136732030235E-5	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999870932265504	WITHOUT_CLASSIFICATION	1.290677344959324E-5	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9997781207058285	WITHOUT_CLASSIFICATION	2.218792941713619E-4	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999956137788656	WITHOUT_CLASSIFICATION	4.386221134412813E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999892404034715	WITHOUT_CLASSIFICATION	1.0759596528632304E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999789160926633	WITHOUT_CLASSIFICATION	2.1083907336613735E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999892376429756	WITHOUT_CLASSIFICATION	1.076235702439252E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999899799593468	WITHOUT_CLASSIFICATION	1.0020040653143299E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999786687659591	WITHOUT_CLASSIFICATION	2.1331234040922682E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999768709498527	WITHOUT_CLASSIFICATION	2.3129050147386736E-5	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999844526298542	WITHOUT_CLASSIFICATION	1.5547370145768998E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999786687659591	WITHOUT_CLASSIFICATION	2.1331234040922682E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999899799593468	WITHOUT_CLASSIFICATION	1.0020040653143299E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999768709498527	WITHOUT_CLASSIFICATION	2.3129050147386736E-5	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999754575267313	WITHOUT_CLASSIFICATION	2.454247326864354E-5	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999873024432027	WITHOUT_CLASSIFICATION	1.2697556797295081E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999941719121829	WITHOUT_CLASSIFICATION	5.828087817106639E-6	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999384775697099	WITHOUT_CLASSIFICATION	6.152243029007165E-5	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999999807840511	WITHOUT_CLASSIFICATION	1.9215948911542899E-7	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9786291979206195	WITHOUT_CLASSIFICATION	0.021370802079380528	IMPLEMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999779714743632	WITHOUT_CLASSIFICATION	2.2028525636872847E-5	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999508786153503	WITHOUT_CLASSIFICATION	4.9121384649812354E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999828560341358	WITHOUT_CLASSIFICATION	1.7143965864220152E-5	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999688044994275	WITHOUT_CLASSIFICATION	3.1195500572522434E-5	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999599579310038	WITHOUT_CLASSIFICATION	4.004206899629159E-5	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999896773871854	WITHOUT_CLASSIFICATION	1.0322612814622127E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998997457030514	WITHOUT_CLASSIFICATION	1.0025429694850393E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999374913352361	WITHOUT_CLASSIFICATION	6.250866476388023E-5	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999991284253988	WITHOUT_CLASSIFICATION	8.715746011986696E-6	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999857439926161	WITHOUT_CLASSIFICATION	1.425600738396117E-5	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999958830204477	WITHOUT_CLASSIFICATION	4.116979552312692E-6	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999747251620322	WITHOUT_CLASSIFICATION	2.5274837967736564E-5	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999958178024757	WITHOUT_CLASSIFICATION	4.18219752437786E-6	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999385748082789	WITHOUT_CLASSIFICATION	6.142519172121672E-5	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999234582375454	WITHOUT_CLASSIFICATION	7.654176245463216E-5	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999871197795633	WITHOUT_CLASSIFICATION	1.2880220436667625E-5	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999491016940802	WITHOUT_CLASSIFICATION	5.0898305919681934E-5	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999935649699332	WITHOUT_CLASSIFICATION	6.435030066778114E-6	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999349238944767	WITHOUT_CLASSIFICATION	6.507610552337907E-5	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999349238944767	WITHOUT_CLASSIFICATION	6.507610552337907E-5	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999848640472315	WITHOUT_CLASSIFICATION	1.5135952768420559E-5	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999848640472315	WITHOUT_CLASSIFICATION	1.5135952768420559E-5	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9998317117092157	WITHOUT_CLASSIFICATION	1.682882907843597E-4	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999958830204477	WITHOUT_CLASSIFICATION	4.116979552312692E-6	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999404843712646	WITHOUT_CLASSIFICATION	5.951562873544839E-5	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999976689589089	WITHOUT_CLASSIFICATION	2.3310410910965226E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998929877735223	WITHOUT_CLASSIFICATION	1.0701222647775641E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998929877735223	WITHOUT_CLASSIFICATION	1.0701222647775641E-4	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999820120051955	WITHOUT_CLASSIFICATION	1.7987994804518288E-5	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999886009234621	WITHOUT_CLASSIFICATION	1.1399076537885334E-5	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999843805848249	WITHOUT_CLASSIFICATION	1.561941517510472E-5	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999470810270474	WITHOUT_CLASSIFICATION	5.291897295252465E-5	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.999970092184715	WITHOUT_CLASSIFICATION	2.9907815284958078E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999979585429913	WITHOUT_CLASSIFICATION	2.0414570085969322E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999605172636709	WITHOUT_CLASSIFICATION	3.9482736329063E-5	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9998518616559781	WITHOUT_CLASSIFICATION	1.4813834402192596E-4	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9999489335200669	WITHOUT_CLASSIFICATION	5.10664799332302E-5	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999912952143837	WITHOUT_CLASSIFICATION	8.704785616348228E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999746975216147	WITHOUT_CLASSIFICATION	2.5302478385261064E-5	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999321481175681	WITHOUT_CLASSIFICATION	6.785188243184828E-5	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999310605436066	WITHOUT_CLASSIFICATION	6.893945639349744E-5	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999398992775708	WITHOUT_CLASSIFICATION	6.0100722429205464E-5	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9998720428344807	WITHOUT_CLASSIFICATION	1.2795716551931803E-4	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999781566067496	WITHOUT_CLASSIFICATION	2.184339325034527E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999510711059955	WITHOUT_CLASSIFICATION	4.892889400465084E-5	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9997073820438558	WITHOUT_CLASSIFICATION	2.926179561442919E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999491154797668	WITHOUT_CLASSIFICATION	5.088452023321002E-5	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999974749388488	WITHOUT_CLASSIFICATION	2.5250611511010586E-6	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999382379838033	WITHOUT_CLASSIFICATION	6.176201619670395E-5	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999619246349646	WITHOUT_CLASSIFICATION	3.8075365035462765E-5	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999597765317133	WITHOUT_CLASSIFICATION	4.0223468286739305E-5	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999929854498012	WITHOUT_CLASSIFICATION	7.014550198761213E-6	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999984202024053	WITHOUT_CLASSIFICATION	1.579797594698451E-5	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999812216487296	WITHOUT_CLASSIFICATION	1.877835127035635E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999345662781584	WITHOUT_CLASSIFICATION	6.54337218416794E-5	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999851765906825	WITHOUT_CLASSIFICATION	1.4823409317430556E-5	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999842769079849	WITHOUT_CLASSIFICATION	1.5723092015128808E-5	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999963208937948	WITHOUT_CLASSIFICATION	3.679106205273014E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999378532864747	WITHOUT_CLASSIFICATION	6.214671352531766E-5	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999609801811973	WITHOUT_CLASSIFICATION	3.9019818802765004E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.999939761892956	WITHOUT_CLASSIFICATION	6.023810704402849E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.999939761892956	WITHOUT_CLASSIFICATION	6.023810704402849E-5	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999884822469294	WITHOUT_CLASSIFICATION	1.1517753070636942E-5	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999493139588319	WITHOUT_CLASSIFICATION	5.06860411680267E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999879396827792	WITHOUT_CLASSIFICATION	1.2060317220780471E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999879396827792	WITHOUT_CLASSIFICATION	1.2060317220780471E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999762858042023	WITHOUT_CLASSIFICATION	2.371419579781725E-5	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999689571208362	WITHOUT_CLASSIFICATION	3.104287916371887E-5	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999711287438029	WITHOUT_CLASSIFICATION	2.8871256197147192E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999127886693051	WITHOUT_CLASSIFICATION	8.721133069492018E-5	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999663991262604	WITHOUT_CLASSIFICATION	3.360087373972489E-5	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.99998999880074	WITHOUT_CLASSIFICATION	1.0001199260023327E-5	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9999392959771936	WITHOUT_CLASSIFICATION	6.0704022806530156E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999967191048523	WITHOUT_CLASSIFICATION	3.280895147699818E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999849353065537	WITHOUT_CLASSIFICATION	1.506469344628467E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999849353065537	WITHOUT_CLASSIFICATION	1.506469344628467E-5	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999755110343457	WITHOUT_CLASSIFICATION	2.448896565424924E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999600474150158	WITHOUT_CLASSIFICATION	3.995258498423237E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999600474150158	WITHOUT_CLASSIFICATION	3.995258498423237E-5	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999860063729941	WITHOUT_CLASSIFICATION	1.3993627005946239E-5	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999900948285304	WITHOUT_CLASSIFICATION	9.905171469635036E-6	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9967508556028166	WITHOUT_CLASSIFICATION	0.003249144397183382	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999842764973892	WITHOUT_CLASSIFICATION	1.5723502610764882E-5	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999825675827105	WITHOUT_CLASSIFICATION	1.7432417289385983E-5	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999879126623445	WITHOUT_CLASSIFICATION	1.208733765558265E-5	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999995260438697	WITHOUT_CLASSIFICATION	4.739561302480361E-7	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999760924506718	WITHOUT_CLASSIFICATION	2.3907549328149453E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999811309033262	WITHOUT_CLASSIFICATION	1.886909667387459E-5	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999097176581948	WITHOUT_CLASSIFICATION	9.028234180513373E-5	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999965283582221	WITHOUT_CLASSIFICATION	3.4716417778626698E-6	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9997603527843814	WITHOUT_CLASSIFICATION	2.3964721561860642E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999933861147287	WITHOUT_CLASSIFICATION	6.61388527132613E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999933861147287	WITHOUT_CLASSIFICATION	6.61388527132613E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999933861147287	WITHOUT_CLASSIFICATION	6.61388527132613E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999933861147287	WITHOUT_CLASSIFICATION	6.61388527132613E-6	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999604314499041	WITHOUT_CLASSIFICATION	3.9568550095986576E-5	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999946020240542	WITHOUT_CLASSIFICATION	5.3979759457783565E-6	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999235127583631	WITHOUT_CLASSIFICATION	7.648724163688112E-5	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999297279942323	WITHOUT_CLASSIFICATION	7.027200576771162E-5	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999639859915833	WITHOUT_CLASSIFICATION	3.601400841678887E-5	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999283568394156	WITHOUT_CLASSIFICATION	7.164316058442604E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999392413091839	WITHOUT_CLASSIFICATION	6.0758690816155294E-5	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999639421139758	WITHOUT_CLASSIFICATION	3.6057886024232794E-5	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999219062451853	WITHOUT_CLASSIFICATION	7.809375481474727E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999392413091839	WITHOUT_CLASSIFICATION	6.0758690816155294E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999392413091839	WITHOUT_CLASSIFICATION	6.0758690816155294E-5	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999799849331305	WITHOUT_CLASSIFICATION	2.001506686956992E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999781376492564	WITHOUT_CLASSIFICATION	2.186235074357454E-5	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.99993359236763	WITHOUT_CLASSIFICATION	6.640763236990799E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999358453962649	WITHOUT_CLASSIFICATION	6.415460373513278E-5	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999813259109835	WITHOUT_CLASSIFICATION	1.8674089016529717E-5	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999886278372703	WITHOUT_CLASSIFICATION	1.1372162729692264E-5	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999903601505873	WITHOUT_CLASSIFICATION	9.639849412748543E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999358453962649	WITHOUT_CLASSIFICATION	6.415460373513278E-5	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999918034437768	WITHOUT_CLASSIFICATION	8.196556223309303E-6	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999901737646351	WITHOUT_CLASSIFICATION	9.826235364979895E-6	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999674690663609	WITHOUT_CLASSIFICATION	3.25309336390701E-5	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.99995340502716	WITHOUT_CLASSIFICATION	4.6594972840027274E-5	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999977540953525	WITHOUT_CLASSIFICATION	2.2459046474971132E-5	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999669794077654	WITHOUT_CLASSIFICATION	3.30205922346736E-5	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999826006653202	WITHOUT_CLASSIFICATION	1.739933467972255E-5	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999383189017023	WITHOUT_CLASSIFICATION	6.168109829774047E-5	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999970909777493	WITHOUT_CLASSIFICATION	2.9090222507029922E-5	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999933690584183	WITHOUT_CLASSIFICATION	6.6309415816693765E-6	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999715367034805	WITHOUT_CLASSIFICATION	2.8463296519481903E-5	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.999941889390102	WITHOUT_CLASSIFICATION	5.811060989795381E-5	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999784979284406	WITHOUT_CLASSIFICATION	2.1502071559390746E-5	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.999935603604814	WITHOUT_CLASSIFICATION	6.439639518604477E-5	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999913086036772	WITHOUT_CLASSIFICATION	8.691396322758928E-6	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999388456199912	WITHOUT_CLASSIFICATION	6.115438000866652E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999724366348366	WITHOUT_CLASSIFICATION	2.7563365163329235E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999652671394205	WITHOUT_CLASSIFICATION	3.4732860579572995E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999138432180131	WITHOUT_CLASSIFICATION	8.615678198689216E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999652671394205	WITHOUT_CLASSIFICATION	3.4732860579572995E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999703515972281	WITHOUT_CLASSIFICATION	2.964840277190409E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999826566376167	WITHOUT_CLASSIFICATION	1.7343362383301894E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999434804577805	WITHOUT_CLASSIFICATION	5.65195422195074E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999850193150873	WITHOUT_CLASSIFICATION	1.498068491265513E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999724366348366	WITHOUT_CLASSIFICATION	2.7563365163329235E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999138432180131	WITHOUT_CLASSIFICATION	8.615678198689216E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999703515972281	WITHOUT_CLASSIFICATION	2.964840277190409E-5	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999454052623401	WITHOUT_CLASSIFICATION	5.4594737659801636E-5	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999701264557741	WITHOUT_CLASSIFICATION	2.9873544225832074E-5	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9999435988820484	WITHOUT_CLASSIFICATION	5.64011179515862E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9999563604138709	WITHOUT_CLASSIFICATION	4.363958612898559E-5	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999907633600956	WITHOUT_CLASSIFICATION	9.236639904427311E-6	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.999994134034266	WITHOUT_CLASSIFICATION	5.865965734004647E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999510711059955	WITHOUT_CLASSIFICATION	4.892889400465084E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999826566376167	WITHOUT_CLASSIFICATION	1.7343362383301894E-5	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999987546049968	WITHOUT_CLASSIFICATION	1.2453950033073831E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999799220390041	WITHOUT_CLASSIFICATION	2.0077960996010017E-5	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999633250473368	WITHOUT_CLASSIFICATION	3.667495266322355E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999510711059955	WITHOUT_CLASSIFICATION	4.892889400465084E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999345662781584	WITHOUT_CLASSIFICATION	6.54337218416794E-5	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999719503360028	WITHOUT_CLASSIFICATION	2.80496639971869E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999510711059955	WITHOUT_CLASSIFICATION	4.892889400465084E-5	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999901836457146	WITHOUT_CLASSIFICATION	9.816354285386571E-6	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999689258561655	WITHOUT_CLASSIFICATION	3.107414383444629E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999345662781584	WITHOUT_CLASSIFICATION	6.54337218416794E-5	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9995805479477046	WITHOUT_CLASSIFICATION	4.194520522954272E-4	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.99993542971022	WITHOUT_CLASSIFICATION	6.457028977995279E-5	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999907896865199	WITHOUT_CLASSIFICATION	9.210313480086509E-6	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999548701277143	WITHOUT_CLASSIFICATION	4.512987228569817E-5	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999884118791736	WITHOUT_CLASSIFICATION	1.1588120826351926E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999561350001863	WITHOUT_CLASSIFICATION	4.386499981370386E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999773164631949	WITHOUT_CLASSIFICATION	2.2683536805176725E-5	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999614776122017	WITHOUT_CLASSIFICATION	3.852238779835794E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999284378039835	WITHOUT_CLASSIFICATION	7.15621960164767E-5	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999992062256318	WITHOUT_CLASSIFICATION	7.937743681914687E-6	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9967508556028166	WITHOUT_CLASSIFICATION	0.003249144397183382	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.999952860744498	WITHOUT_CLASSIFICATION	4.713925550195663E-5	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999924646422026	WITHOUT_CLASSIFICATION	7.53535779737734E-6	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999307385537878	WITHOUT_CLASSIFICATION	6.926144621231121E-5	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999256191158744	WITHOUT_CLASSIFICATION	7.438088412555906E-5	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999668655705154	WITHOUT_CLASSIFICATION	3.313442948450056E-5	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999911094538604	WITHOUT_CLASSIFICATION	8.890546139645257E-6	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999822055008524	WITHOUT_CLASSIFICATION	1.77944991475545E-5	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999801310100275	WITHOUT_CLASSIFICATION	1.9868989972449998E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999705848942305	WITHOUT_CLASSIFICATION	2.9415105769501873E-5	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999795393507361	WITHOUT_CLASSIFICATION	2.0460649263839138E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9967508556028166	WITHOUT_CLASSIFICATION	0.003249144397183382	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999950121845287	WITHOUT_CLASSIFICATION	4.9878154712984624E-5	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999425088771318	WITHOUT_CLASSIFICATION	5.749112286820505E-5	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999430649684389	WITHOUT_CLASSIFICATION	5.693503156110617E-5	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999968749161668	WITHOUT_CLASSIFICATION	3.125083833195255E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9973115180489505	WITHOUT_CLASSIFICATION	0.0026884819510494856	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999908732428625	WITHOUT_CLASSIFICATION	9.126757137391183E-6	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999882472501987	WITHOUT_CLASSIFICATION	1.1752749801290077E-5	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999519645974786	WITHOUT_CLASSIFICATION	4.8035402521519456E-5	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999290017438748	WITHOUT_CLASSIFICATION	7.099825612533002E-5	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999704809330788	WITHOUT_CLASSIFICATION	2.9519066921146738E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9967508556028166	WITHOUT_CLASSIFICATION	0.003249144397183382	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999688586530168	WITHOUT_CLASSIFICATION	3.114134698326523E-5	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999530907949243	WITHOUT_CLASSIFICATION	4.6909205075705537E-5	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9999356722613494	WITHOUT_CLASSIFICATION	6.432773865066319E-5	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999416901037723	WITHOUT_CLASSIFICATION	5.830989622777142E-5	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999750998571413	WITHOUT_CLASSIFICATION	2.4900142858746526E-5	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999135510256104	WITHOUT_CLASSIFICATION	8.644897438955859E-5	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999938005678692	WITHOUT_CLASSIFICATION	6.199432130808007E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999345662781584	WITHOUT_CLASSIFICATION	6.54337218416794E-5	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999590289557969	WITHOUT_CLASSIFICATION	4.097104420312289E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999719993397762	WITHOUT_CLASSIFICATION	2.8000660223882638E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999719993397762	WITHOUT_CLASSIFICATION	2.8000660223882638E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999674923182195	WITHOUT_CLASSIFICATION	3.250768178050053E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999561350001863	WITHOUT_CLASSIFICATION	4.386499981370386E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999554886821965	WITHOUT_CLASSIFICATION	4.451131780356775E-5	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999884843501671	WITHOUT_CLASSIFICATION	1.151564983297184E-5	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999947591788011	WITHOUT_CLASSIFICATION	5.240821198872547E-6	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999785990931184	WITHOUT_CLASSIFICATION	2.1400906881538894E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999592987405106	WITHOUT_CLASSIFICATION	4.0701259489346E-5	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9981323425789562	WITHOUT_CLASSIFICATION	0.0018676574210437593	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999770736476149	WITHOUT_CLASSIFICATION	2.292635238513595E-5	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999892203080829	WITHOUT_CLASSIFICATION	1.0779691917215114E-5	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999661771341589	WITHOUT_CLASSIFICATION	3.3822865841072975E-5	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999797733337671	WITHOUT_CLASSIFICATION	2.022666623293885E-5	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999216291929951	WITHOUT_CLASSIFICATION	7.83708070048966E-5	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999984398594919	WITHOUT_CLASSIFICATION	1.5601405081074668E-6	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999907196203014	WITHOUT_CLASSIFICATION	9.280379698703215E-6	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998276813362	WITHOUT_CLASSIFICATION	1.723186637524607E-7	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999873562410765	WITHOUT_CLASSIFICATION	1.2643758923573346E-5	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999897876882132	WITHOUT_CLASSIFICATION	1.0212311786866278E-5	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999978715772404	WITHOUT_CLASSIFICATION	2.128422759626052E-6	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999949025197797	WITHOUT_CLASSIFICATION	5.097480220281492E-6	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999944951890275	WITHOUT_CLASSIFICATION	5.504810972552901E-6	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999857272205278	WITHOUT_CLASSIFICATION	1.4272779472227801E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999639988824954	WITHOUT_CLASSIFICATION	3.6001117504514694E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999987579751017	WITHOUT_CLASSIFICATION	1.2420248982306164E-6	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999135510256104	WITHOUT_CLASSIFICATION	8.644897438955859E-5	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999976469442902	WITHOUT_CLASSIFICATION	2.35305570987427E-6	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999903508721486	WITHOUT_CLASSIFICATION	9.64912785134747E-6	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999924564372404	WITHOUT_CLASSIFICATION	7.5435627596403935E-6	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999655730434883	WITHOUT_CLASSIFICATION	3.4426956511639404E-5	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999791216670124	WITHOUT_CLASSIFICATION	2.0878332987616216E-5	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999631877194806	WITHOUT_CLASSIFICATION	3.681228051934935E-5	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999918963466521	WITHOUT_CLASSIFICATION	8.103653347971765E-6	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999931003246385	WITHOUT_CLASSIFICATION	6.89967536145329E-6	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999926032280613	WITHOUT_CLASSIFICATION	7.396771938649506E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999937513211918	WITHOUT_CLASSIFICATION	6.248678808149748E-6	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999736249417656	WITHOUT_CLASSIFICATION	2.6375058234424384E-5	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999761708421967	WITHOUT_CLASSIFICATION	2.382915780322387E-5	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.999951494865262	WITHOUT_CLASSIFICATION	4.850513473801767E-5	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999722277727453	WITHOUT_CLASSIFICATION	2.77722272546795E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999728040878031	WITHOUT_CLASSIFICATION	2.7195912196919396E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999728040878031	WITHOUT_CLASSIFICATION	2.7195912196919396E-5	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999610050987007	WITHOUT_CLASSIFICATION	3.899490129930474E-5	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999470720044723	WITHOUT_CLASSIFICATION	5.292799552767017E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999860006903116	WITHOUT_CLASSIFICATION	1.3999309688329029E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999860006903116	WITHOUT_CLASSIFICATION	1.3999309688329029E-5	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999852964356317	WITHOUT_CLASSIFICATION	1.4703564368276323E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999545588790727	WITHOUT_CLASSIFICATION	4.54411209273377E-5	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999937866464103	WITHOUT_CLASSIFICATION	6.213353589756317E-6	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999980450678427	WITHOUT_CLASSIFICATION	1.9549321571647337E-6	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999970200998199	WITHOUT_CLASSIFICATION	2.9799001800947484E-5	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999971083854729	WITHOUT_CLASSIFICATION	2.8916145270964426E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999895511323658	WITHOUT_CLASSIFICATION	1.0448867634359802E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999895511323658	WITHOUT_CLASSIFICATION	1.0448867634359802E-5	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999702005469538	WITHOUT_CLASSIFICATION	2.9799453046201005E-5	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999687453376667	WITHOUT_CLASSIFICATION	3.125466233333735E-5	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999476025020441	WITHOUT_CLASSIFICATION	5.239749795603445E-5	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.999974118853856	WITHOUT_CLASSIFICATION	2.5881146143971855E-5	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.999974118853856	WITHOUT_CLASSIFICATION	2.5881146143971855E-5	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999528882371832	WITHOUT_CLASSIFICATION	4.711176281691811E-5	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999725915600326	WITHOUT_CLASSIFICATION	2.7408439967499125E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999831385473718	WITHOUT_CLASSIFICATION	1.6861452628253017E-5	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999744254852326	WITHOUT_CLASSIFICATION	2.557451476732872E-5	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999671388101254	WITHOUT_CLASSIFICATION	3.286118987461098E-5	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999428239847017	WITHOUT_CLASSIFICATION	5.717601529819791E-5	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999799418031026	WITHOUT_CLASSIFICATION	2.0058196897493634E-5	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999723008570965	WITHOUT_CLASSIFICATION	2.7699142903435982E-5	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999712571433085	WITHOUT_CLASSIFICATION	2.874285669160719E-5	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999562581297713	WITHOUT_CLASSIFICATION	4.374187022879516E-5	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999821396355165	WITHOUT_CLASSIFICATION	1.7860364483492746E-5	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999736081350185	WITHOUT_CLASSIFICATION	2.6391864981437237E-5	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9996615447324667	WITHOUT_CLASSIFICATION	3.384552675332128E-4	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999968558409	WITHOUT_CLASSIFICATION	3.144159100011515E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999288747833673	WITHOUT_CLASSIFICATION	7.112521663269032E-5	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999982839365965	WITHOUT_CLASSIFICATION	1.7160634034971815E-5	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999657087136217	WITHOUT_CLASSIFICATION	3.429128637828202E-5	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999880314015647	WITHOUT_CLASSIFICATION	1.1968598435444724E-5	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999886790947998	WITHOUT_CLASSIFICATION	1.1320905200120425E-5	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999717014000071	WITHOUT_CLASSIFICATION	2.8298599992869345E-5	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999629738879358	WITHOUT_CLASSIFICATION	3.702611206420115E-5	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999259260257319	WITHOUT_CLASSIFICATION	7.407397426810992E-5	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999392229249346	WITHOUT_CLASSIFICATION	6.077707506544041E-5	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999968807066698	WITHOUT_CLASSIFICATION	3.119293330192164E-5	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9972757837396288	WITHOUT_CLASSIFICATION	0.002724216260371257	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999782481999192	WITHOUT_CLASSIFICATION	2.1751800080807872E-5	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999788746433449	WITHOUT_CLASSIFICATION	2.112535665502153E-5	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.999917652205822	WITHOUT_CLASSIFICATION	8.234779417801197E-5	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999965150672858	WITHOUT_CLASSIFICATION	3.4849327141516394E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999732060988965	WITHOUT_CLASSIFICATION	2.6793901103539885E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999921287423708	WITHOUT_CLASSIFICATION	7.871257629257708E-6	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999546614299866	WITHOUT_CLASSIFICATION	4.533857001353816E-5	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999930200835181	WITHOUT_CLASSIFICATION	6.9799164819213E-6	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.999925605524309	WITHOUT_CLASSIFICATION	7.43944756909931E-5	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999669986795092	WITHOUT_CLASSIFICATION	3.300132049068799E-5	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999273273468731	WITHOUT_CLASSIFICATION	7.267265312686207E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999371014402509	WITHOUT_CLASSIFICATION	6.289855974904768E-5	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999585243144993	WITHOUT_CLASSIFICATION	4.1475685500745054E-5	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999658832838203	WITHOUT_CLASSIFICATION	3.4116716179607064E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999928923154017	WITHOUT_CLASSIFICATION	7.107684598311965E-6	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999723142181256	WITHOUT_CLASSIFICATION	2.7685781874317217E-5	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999261714875812	WITHOUT_CLASSIFICATION	7.382851241875074E-5	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999573692838407	WITHOUT_CLASSIFICATION	4.2630716159311836E-5	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999527064841303	WITHOUT_CLASSIFICATION	4.729351586973485E-5	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999302885739785	WITHOUT_CLASSIFICATION	6.971142602148088E-5	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999421412979781	WITHOUT_CLASSIFICATION	5.78587020218535E-5	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999333856217907	WITHOUT_CLASSIFICATION	6.66143782093908E-5	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999916713097788	WITHOUT_CLASSIFICATION	8.328690221256171E-6	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999863196517701	WITHOUT_CLASSIFICATION	1.3680348229974453E-5	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999868066202139	WITHOUT_CLASSIFICATION	1.319337978606732E-5	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999864234335724	WITHOUT_CLASSIFICATION	1.3576566427659986E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999564251348394	WITHOUT_CLASSIFICATION	4.357486516068358E-5	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999457332677067	WITHOUT_CLASSIFICATION	5.426673229322419E-5	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999909401071537	WITHOUT_CLASSIFICATION	9.05989284634089E-6	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999516656045355	WITHOUT_CLASSIFICATION	4.833439546442943E-5	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999582013903764	WITHOUT_CLASSIFICATION	4.1798609623560775E-5	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999436911482428	WITHOUT_CLASSIFICATION	5.630885175718808E-5	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999514275864967	WITHOUT_CLASSIFICATION	4.857241350325272E-5	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999885730569585	WITHOUT_CLASSIFICATION	1.1426943041439608E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999799798025866	WITHOUT_CLASSIFICATION	2.0020197413401904E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999662809901662	WITHOUT_CLASSIFICATION	3.371900983379366E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999662809901662	WITHOUT_CLASSIFICATION	3.371900983379366E-5	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999953034333093	WITHOUT_CLASSIFICATION	4.6965666906460635E-6	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999961490741925	WITHOUT_CLASSIFICATION	3.850925807550514E-6	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999997044166657	WITHOUT_CLASSIFICATION	2.955833342709178E-7	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999947436009877	WITHOUT_CLASSIFICATION	5.2563990121885635E-6	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999741057499704	WITHOUT_CLASSIFICATION	2.589425002966324E-5	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999727563124632	WITHOUT_CLASSIFICATION	2.724368753681694E-5	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999965850552345	WITHOUT_CLASSIFICATION	3.414944765576175E-6	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999971629516274	WITHOUT_CLASSIFICATION	2.8370483725264787E-6	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999804514837504	WITHOUT_CLASSIFICATION	1.9548516249645022E-5	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999937785262676	WITHOUT_CLASSIFICATION	6.221473732339693E-6	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999938156838739	WITHOUT_CLASSIFICATION	6.184316126002202E-6	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999343467336117	WITHOUT_CLASSIFICATION	6.565326638836265E-5	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999944705361564	WITHOUT_CLASSIFICATION	5.529463843619946E-6	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999880015008256	WITHOUT_CLASSIFICATION	1.1998499174414981E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999670103604597	WITHOUT_CLASSIFICATION	3.298963954041164E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999670103604597	WITHOUT_CLASSIFICATION	3.298963954041164E-5	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999761206548013	WITHOUT_CLASSIFICATION	2.3879345198727828E-5	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999910807154211	WITHOUT_CLASSIFICATION	8.919284578965889E-6	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999800684811441	WITHOUT_CLASSIFICATION	1.9931518855966475E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999956172608997	WITHOUT_CLASSIFICATION	4.382739100235568E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999780660511915	WITHOUT_CLASSIFICATION	2.1933948808423283E-5	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999643468285673	WITHOUT_CLASSIFICATION	3.565317143275727E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999221831680322	WITHOUT_CLASSIFICATION	7.781683196788696E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9997370827099847	WITHOUT_CLASSIFICATION	2.629172900152533E-4	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999894766854216	WITHOUT_CLASSIFICATION	1.0523314578376326E-5	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999796757539557	WITHOUT_CLASSIFICATION	2.0324246044230455E-5	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999967564512893	WITHOUT_CLASSIFICATION	3.2435487106622237E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999690531208192	WITHOUT_CLASSIFICATION	3.0946879180812324E-5	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999903144355561	WITHOUT_CLASSIFICATION	9.685564443870537E-6	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999849899036293	WITHOUT_CLASSIFICATION	1.5010096370609357E-5	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999945150191437	WITHOUT_CLASSIFICATION	5.4849808562339835E-6	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999777888791385	WITHOUT_CLASSIFICATION	2.2211120861535926E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999904496986343	WITHOUT_CLASSIFICATION	9.550301365754395E-6	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999968449781316	WITHOUT_CLASSIFICATION	3.1550218683623065E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999683496458498	WITHOUT_CLASSIFICATION	3.165035415029862E-5	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999633579460449	WITHOUT_CLASSIFICATION	3.664205395519448E-5	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999880364722138	WITHOUT_CLASSIFICATION	1.1963527786092986E-5	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999993802456532	WITHOUT_CLASSIFICATION	6.197543469242544E-7	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.999997645467812	WITHOUT_CLASSIFICATION	2.3545321881155657E-6	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999288155867618	WITHOUT_CLASSIFICATION	7.118441323826597E-5	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999682056834496	WITHOUT_CLASSIFICATION	3.1794316550449625E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.999983609525346	WITHOUT_CLASSIFICATION	1.6390474653928545E-5	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999930216457411	WITHOUT_CLASSIFICATION	6.978354258909542E-6	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999976254538305	WITHOUT_CLASSIFICATION	2.3745461694865094E-6	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999956894363897	WITHOUT_CLASSIFICATION	4.310563610288086E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999941383376957	WITHOUT_CLASSIFICATION	5.8616623042463474E-6	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999944095873611	WITHOUT_CLASSIFICATION	5.59041263887663E-6	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999834657665612	WITHOUT_CLASSIFICATION	1.6534233438808815E-5	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999849532254663	WITHOUT_CLASSIFICATION	1.5046774533736589E-5	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999990250518731	WITHOUT_CLASSIFICATION	9.749481269063494E-6	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999966815727372	WITHOUT_CLASSIFICATION	3.3184272627914547E-6	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999989069492283	WITHOUT_CLASSIFICATION	1.0930507716869607E-6	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999876577337335	WITHOUT_CLASSIFICATION	1.2342266266423587E-5	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999989929527123	WITHOUT_CLASSIFICATION	1.0070472875889678E-6	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999541024791236	WITHOUT_CLASSIFICATION	4.589752087622728E-5	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.999994238595919	WITHOUT_CLASSIFICATION	5.7614040809568025E-6	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.99963601668627	WITHOUT_CLASSIFICATION	3.639833137300046E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.99963601668627	WITHOUT_CLASSIFICATION	3.639833137300046E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999973477430336	WITHOUT_CLASSIFICATION	2.6522569663886225E-6	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999990173850267	WITHOUT_CLASSIFICATION	9.826149733785165E-7	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.999979953171342	WITHOUT_CLASSIFICATION	2.0046828657982304E-5	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999629798796185	WITHOUT_CLASSIFICATION	3.702012038160531E-5	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999962070671023	WITHOUT_CLASSIFICATION	3.7929328977547177E-6	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999813150265161	WITHOUT_CLASSIFICATION	1.8684973483847904E-5	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999746532567058	WITHOUT_CLASSIFICATION	2.534674329422599E-5	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999774264102944	WITHOUT_CLASSIFICATION	2.257358970563471E-5	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999890488276195	WITHOUT_CLASSIFICATION	1.0951172380411617E-5	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999681935977474	WITHOUT_CLASSIFICATION	3.180640225264282E-5	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999618714263436	WITHOUT_CLASSIFICATION	3.812857365639537E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999110741765834	WITHOUT_CLASSIFICATION	8.892582341658311E-5	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999907383356393	WITHOUT_CLASSIFICATION	9.26166436073485E-6	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999948959721668	WITHOUT_CLASSIFICATION	5.104027833189766E-6	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999982094015051	WITHOUT_CLASSIFICATION	1.7905984949824867E-6	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999956668218432	WITHOUT_CLASSIFICATION	4.333178156883125E-6	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999594772530392	WITHOUT_CLASSIFICATION	4.052274696087279E-5	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999975339412942	WITHOUT_CLASSIFICATION	2.466058705887586E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999606367327932	WITHOUT_CLASSIFICATION	3.936326720667471E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999935676208256	WITHOUT_CLASSIFICATION	6.432379174435825E-6	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999956860862019	WITHOUT_CLASSIFICATION	4.31391379807528E-6	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999889548330377	WITHOUT_CLASSIFICATION	1.104516696223556E-5	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999851940413433	WITHOUT_CLASSIFICATION	1.4805958656511992E-5	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999766878766069	WITHOUT_CLASSIFICATION	2.3312123393119476E-5	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999456835268128	WITHOUT_CLASSIFICATION	5.431647318713415E-5	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999908081553525	WITHOUT_CLASSIFICATION	9.19184464752194E-6	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999969986540028	WITHOUT_CLASSIFICATION	3.001345997188596E-6	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999931878865	WITHOUT_CLASSIFICATION	6.8121134773996404E-9	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999998234193606	WITHOUT_CLASSIFICATION	1.765806394453536E-7	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999793254145767	WITHOUT_CLASSIFICATION	2.0674585423381412E-5	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999927292532175	WITHOUT_CLASSIFICATION	7.270746782449184E-6	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999943827019978	WITHOUT_CLASSIFICATION	5.617298002213103E-6	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999998860874724	WITHOUT_CLASSIFICATION	1.1391252754240182E-7	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.999992500399199	WITHOUT_CLASSIFICATION	7.4996008009946535E-6	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999996409838624	WITHOUT_CLASSIFICATION	3.5901613767796365E-7	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999644093381773	WITHOUT_CLASSIFICATION	3.5590661822660135E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999916569606596	WITHOUT_CLASSIFICATION	8.343039340495898E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999988977017435	WITHOUT_CLASSIFICATION	1.10229825643287E-6	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999976014011093	WITHOUT_CLASSIFICATION	2.3985988907879035E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.999940390756102	WITHOUT_CLASSIFICATION	5.9609243898021406E-5	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999772175244734	WITHOUT_CLASSIFICATION	2.2782475526619522E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999963031961205	WITHOUT_CLASSIFICATION	3.696803879430789E-6	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999667753587876	WITHOUT_CLASSIFICATION	3.32246412123592E-5	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999425678623	WITHOUT_CLASSIFICATION	5.743213764801384E-8	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999985337312999	WITHOUT_CLASSIFICATION	1.4662687001157858E-6	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999284785942182	WITHOUT_CLASSIFICATION	7.15214057817905E-5	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999988915471743	WITHOUT_CLASSIFICATION	1.108452825800628E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999944705361564	WITHOUT_CLASSIFICATION	5.529463843619946E-6	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999971743005209	WITHOUT_CLASSIFICATION	2.8256994790369813E-6	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999923003301608	WITHOUT_CLASSIFICATION	7.69966983904923E-6	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999695987079623	WITHOUT_CLASSIFICATION	3.040129203778092E-5	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999987442231602	WITHOUT_CLASSIFICATION	1.2557768398351388E-6	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999992652822092	WITHOUT_CLASSIFICATION	7.347177908497096E-7	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999956807048286	WITHOUT_CLASSIFICATION	4.3192951713673496E-6	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.99999404585977	WITHOUT_CLASSIFICATION	5.9541402299401985E-6	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999955223113345	WITHOUT_CLASSIFICATION	4.477688665480591E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999755124731438	WITHOUT_CLASSIFICATION	2.4487526856245996E-5	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999476187473137	WITHOUT_CLASSIFICATION	5.238125268615194E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.999998901233077	WITHOUT_CLASSIFICATION	1.098766923033784E-6	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999675640650417	WITHOUT_CLASSIFICATION	3.2435934958192325E-5	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999960143166452	WITHOUT_CLASSIFICATION	3.985683354841916E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999977248436696	WITHOUT_CLASSIFICATION	2.275156330344741E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999449798897938	WITHOUT_CLASSIFICATION	5.502011020609146E-5	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999540931969124	WITHOUT_CLASSIFICATION	4.5906803087525284E-5	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999421752146904	WITHOUT_CLASSIFICATION	5.7824785309576185E-5	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999928838718015	WITHOUT_CLASSIFICATION	7.116128198472396E-6	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999945234472503	WITHOUT_CLASSIFICATION	5.476552749641695E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999449798897938	WITHOUT_CLASSIFICATION	5.502011020609146E-5	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999804647192932	WITHOUT_CLASSIFICATION	1.953528070674497E-5	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999975060306923	WITHOUT_CLASSIFICATION	2.493969307750193E-6	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999999047127761	WITHOUT_CLASSIFICATION	9.52872239025838E-7	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999977939531203	WITHOUT_CLASSIFICATION	2.20604687976554E-6	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999517204174888	WITHOUT_CLASSIFICATION	4.827958251123986E-5	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999995736676466	WITHOUT_CLASSIFICATION	4.26332353394306E-6	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999962909744483	WITHOUT_CLASSIFICATION	3.709025551672457E-6	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999656084448167	WITHOUT_CLASSIFICATION	3.43915551832904E-5	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999932956637984	WITHOUT_CLASSIFICATION	6.704336201721374E-6	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999962047549749	WITHOUT_CLASSIFICATION	3.7952450250682677E-6	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999597739466676	WITHOUT_CLASSIFICATION	4.022605333245717E-5	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998540737234771	WITHOUT_CLASSIFICATION	1.4592627652280053E-4	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999743927468574	WITHOUT_CLASSIFICATION	2.5607253142650333E-5	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999470836729929	WITHOUT_CLASSIFICATION	5.291632700718522E-5	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999868741801867	WITHOUT_CLASSIFICATION	1.3125819813200817E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999987579751017	WITHOUT_CLASSIFICATION	1.2420248982306164E-6	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999968937692525	WITHOUT_CLASSIFICATION	3.1062307475683712E-6	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999981242526104	WITHOUT_CLASSIFICATION	1.8757473895536791E-6	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9992149499057019	WITHOUT_CLASSIFICATION	7.85050094298117E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999927322756048	WITHOUT_CLASSIFICATION	7.267724395232222E-6	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999916816065089	WITHOUT_CLASSIFICATION	8.318393491132258E-6	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999958058270572	WITHOUT_CLASSIFICATION	4.194172942795831E-6	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999910807505471	WITHOUT_CLASSIFICATION	8.919249452848686E-6	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999993203331065	WITHOUT_CLASSIFICATION	6.79666893584589E-7	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999893183928975	WITHOUT_CLASSIFICATION	1.0681607102370175E-5	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999968802572335	WITHOUT_CLASSIFICATION	3.1197427665015798E-6	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999992308459084	WITHOUT_CLASSIFICATION	7.691540916082738E-7	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999859643215553	WITHOUT_CLASSIFICATION	1.403567844463159E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999987676537041	WITHOUT_CLASSIFICATION	1.2323462959427093E-6	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999998044187789	WITHOUT_CLASSIFICATION	1.9558122122244368E-7	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999531165030425	WITHOUT_CLASSIFICATION	4.6883496957598396E-5	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999640269654011	WITHOUT_CLASSIFICATION	3.59730345989235E-5	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999911321349246	WITHOUT_CLASSIFICATION	8.867865075293734E-6	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.99999205371111	WITHOUT_CLASSIFICATION	7.946288889958979E-6	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999988626811045	WITHOUT_CLASSIFICATION	1.1373188955016594E-6	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999752435599	WITHOUT_CLASSIFICATION	2.4756440056656553E-8	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999992557237147	WITHOUT_CLASSIFICATION	7.442762852342033E-7	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999710808279632	WITHOUT_CLASSIFICATION	2.891917203683819E-5	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999660006127838	WITHOUT_CLASSIFICATION	3.3999387216127886E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999932731453809	WITHOUT_CLASSIFICATION	6.7268546189965896E-6	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999794840660895	WITHOUT_CLASSIFICATION	2.0515933910577696E-5	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999794840660895	WITHOUT_CLASSIFICATION	2.0515933910577696E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999890836638468	WITHOUT_CLASSIFICATION	1.0916336153151078E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999929565605851	WITHOUT_CLASSIFICATION	7.043439414925677E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999983335428765	WITHOUT_CLASSIFICATION	1.6664571234967536E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999127886693051	WITHOUT_CLASSIFICATION	8.721133069492018E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999127886693051	WITHOUT_CLASSIFICATION	8.721133069492018E-5	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999736417902377	WITHOUT_CLASSIFICATION	2.6358209762358447E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999978063291293	WITHOUT_CLASSIFICATION	2.1936708707080537E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9973089024592925	WITHOUT_CLASSIFICATION	0.0026910975407075416	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999862686928437	WITHOUT_CLASSIFICATION	1.3731307156308823E-5	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999982351651966	WITHOUT_CLASSIFICATION	1.7648348032999475E-6	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999801464438498	WITHOUT_CLASSIFICATION	1.98535561501766E-5	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999944640750784	WITHOUT_CLASSIFICATION	5.535924921619715E-6	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999636719824984	WITHOUT_CLASSIFICATION	3.6328017501539736E-5	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999999980066373	WITHOUT_CLASSIFICATION	1.9933627007221653E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999547298331346	WITHOUT_CLASSIFICATION	4.5270166865458414E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999547298331346	WITHOUT_CLASSIFICATION	4.5270166865458414E-5	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.999940268155364	WITHOUT_CLASSIFICATION	5.97318446359639E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999928460741793	WITHOUT_CLASSIFICATION	7.153925820700112E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999297887601702	WITHOUT_CLASSIFICATION	7.021123982977963E-5	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999583490375394	WITHOUT_CLASSIFICATION	4.1650962460552726E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999345662781584	WITHOUT_CLASSIFICATION	6.54337218416794E-5	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999267085074556	WITHOUT_CLASSIFICATION	7.329149254433861E-5	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660403991779	WITHOUT_CLASSIFICATION	3.395960082211037E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999345662781584	WITHOUT_CLASSIFICATION	6.54337218416794E-5	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999898725066234	WITHOUT_CLASSIFICATION	1.012749337663024E-5	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.999992640853338	WITHOUT_CLASSIFICATION	7.359146661925893E-6	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999039843543773	WITHOUT_CLASSIFICATION	9.601564562271142E-5	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999933310099852	WITHOUT_CLASSIFICATION	6.6689900148777874E-6	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999962047549749	WITHOUT_CLASSIFICATION	3.7952450250682677E-6	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999600511741452	WITHOUT_CLASSIFICATION	3.994882585483181E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999227685260387	WITHOUT_CLASSIFICATION	7.723147396131023E-5	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999936985135267	WITHOUT_CLASSIFICATION	6.301486473301272E-6	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999582124239047	WITHOUT_CLASSIFICATION	4.178757609520453E-5	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999684028339578	WITHOUT_CLASSIFICATION	3.159716604225261E-5	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999957418539882	WITHOUT_CLASSIFICATION	4.258146011811229E-5	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999657115624669	WITHOUT_CLASSIFICATION	3.4288437533121896E-5	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999956582766999	WITHOUT_CLASSIFICATION	4.341723300119146E-6	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999803617730871	WITHOUT_CLASSIFICATION	1.963822691292593E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999939967683883	WITHOUT_CLASSIFICATION	6.0032316116988E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999939967683883	WITHOUT_CLASSIFICATION	6.0032316116988E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999358453962649	WITHOUT_CLASSIFICATION	6.415460373513278E-5	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999987356915635	WITHOUT_CLASSIFICATION	1.2643084364508225E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999392413091839	WITHOUT_CLASSIFICATION	6.0758690816155294E-5	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999753195523914	WITHOUT_CLASSIFICATION	2.4680447608626743E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999957748526412	WITHOUT_CLASSIFICATION	4.225147358760302E-6	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999963184405644	WITHOUT_CLASSIFICATION	3.681559435748351E-6	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999913086036772	WITHOUT_CLASSIFICATION	8.691396322758928E-6	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999995223280332	WITHOUT_CLASSIFICATION	4.776719668218921E-7	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999454052623401	WITHOUT_CLASSIFICATION	5.4594737659801636E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999640622183834	WITHOUT_CLASSIFICATION	3.593778161663081E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999510711059955	WITHOUT_CLASSIFICATION	4.892889400465084E-5	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.999999438264709	WITHOUT_CLASSIFICATION	5.61735291070089E-7	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999879530020825	WITHOUT_CLASSIFICATION	1.2046997917445253E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999974073942886	WITHOUT_CLASSIFICATION	2.592605711326312E-6	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999739406851785	WITHOUT_CLASSIFICATION	2.60593148215063E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999704295190657	WITHOUT_CLASSIFICATION	2.9570480934325072E-5	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999963727255909	WITHOUT_CLASSIFICATION	3.6272744090793727E-6	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999818181046217	WITHOUT_CLASSIFICATION	1.81818953782807E-5	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999256694062834	WITHOUT_CLASSIFICATION	7.433059371665775E-5	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.999992373381659	WITHOUT_CLASSIFICATION	7.626618340955037E-6	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999998503866685	WITHOUT_CLASSIFICATION	1.4961333155033085E-7	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999588991305	WITHOUT_CLASSIFICATION	4.1100869535571686E-8	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999831385473718	WITHOUT_CLASSIFICATION	1.6861452628253017E-5	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.999999999072405	WITHOUT_CLASSIFICATION	9.275949471601649E-10	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999819804321997	WITHOUT_CLASSIFICATION	1.8019567800378958E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999819804321997	WITHOUT_CLASSIFICATION	1.8019567800378958E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999816165207679	WITHOUT_CLASSIFICATION	1.8383479232112937E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999910966308257	WITHOUT_CLASSIFICATION	8.903369174255267E-6	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999994859183944	WITHOUT_CLASSIFICATION	5.140816056394052E-7	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999995416814355	WITHOUT_CLASSIFICATION	4.5831856449284445E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999659709069213	WITHOUT_CLASSIFICATION	3.402909307868068E-5	IMPLEMENTATION
