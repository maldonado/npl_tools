// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9996831418891237	WITHOUT_CLASSIFICATION	3.168581108763876E-4	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9996831418891237	WITHOUT_CLASSIFICATION	3.168581108763876E-4	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9996031976488754	WITHOUT_CLASSIFICATION	3.9680235112463005E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.999287924313309	WITHOUT_CLASSIFICATION	7.120756866909611E-4	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9998185647007549	WITHOUT_CLASSIFICATION	1.8143529924504988E-4	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.7370730453359922	IMPLEMENTATION	0.26292695466400784	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9980152866004011	WITHOUT_CLASSIFICATION	0.0019847133995989086	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9481206158674098	WITHOUT_CLASSIFICATION	0.05187938413259025	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9998798140890759	WITHOUT_CLASSIFICATION	1.2018591092403876E-4	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9991721225522132	WITHOUT_CLASSIFICATION	8.278774477867536E-4	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9998593283675632	WITHOUT_CLASSIFICATION	1.4067163243687737E-4	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.996629182391712	WITHOUT_CLASSIFICATION	0.003370817608287942	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9998451633548013	WITHOUT_CLASSIFICATION	1.5483664519860257E-4	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9998451633548013	WITHOUT_CLASSIFICATION	1.5483664519860257E-4	IMPLEMENTATION
/**	IMPLEMENTATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.7693895568622197	WITHOUT_CLASSIFICATION	0.2306104431377803	IMPLEMENTATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.8371699000447957	IMPLEMENTATION	0.16283009995520423	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9369298681035855	WITHOUT_CLASSIFICATION	0.06307013189641458	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.999997507175016	WITHOUT_CLASSIFICATION	2.492824983988578E-6	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9996469041111794	WITHOUT_CLASSIFICATION	3.530958888205394E-4	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9996713750589785	WITHOUT_CLASSIFICATION	3.286249410214947E-4	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9999777031489184	WITHOUT_CLASSIFICATION	2.229685108157311E-5	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9994444384914728	WITHOUT_CLASSIFICATION	5.555615085272196E-4	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9978874368068025	WITHOUT_CLASSIFICATION	0.0021125631931975153	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9978874368068025	WITHOUT_CLASSIFICATION	0.0021125631931975153	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9900725752151694	WITHOUT_CLASSIFICATION	0.009927424784830592	IMPLEMENTATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9997993812548602	WITHOUT_CLASSIFICATION	2.006187451397328E-4	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9858550867615412	WITHOUT_CLASSIFICATION	0.014144913238458888	IMPLEMENTATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9995003104209315	WITHOUT_CLASSIFICATION	4.996895790685069E-4	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9996114365795891	WITHOUT_CLASSIFICATION	3.885634204109691E-4	IMPLEMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9996590816788818	WITHOUT_CLASSIFICATION	3.40918321118184E-4	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9995247796872955	WITHOUT_CLASSIFICATION	4.7522031270445916E-4	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9998579542547998	WITHOUT_CLASSIFICATION	1.4204574520022606E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9995799077427425	WITHOUT_CLASSIFICATION	4.200922572575367E-4	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9995441760114124	WITHOUT_CLASSIFICATION	4.558239885875107E-4	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9996566283522407	WITHOUT_CLASSIFICATION	3.43371647759437E-4	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.7905213325921381	WITHOUT_CLASSIFICATION	0.2094786674078618	IMPLEMENTATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.99970948440068	WITHOUT_CLASSIFICATION	2.905155993200254E-4	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9994237521762535	WITHOUT_CLASSIFICATION	5.76247823746604E-4	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9691961187267756	WITHOUT_CLASSIFICATION	0.030803881273224455	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9691961187267756	WITHOUT_CLASSIFICATION	0.030803881273224455	IMPLEMENTATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9920564969889902	WITHOUT_CLASSIFICATION	0.007943503011009835	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999149136182145	WITHOUT_CLASSIFICATION	8.50863817854564E-5	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9999309020753184	WITHOUT_CLASSIFICATION	6.909792468149956E-5	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9517376867747922	WITHOUT_CLASSIFICATION	0.04826231322520782	IMPLEMENTATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9993104606067322	WITHOUT_CLASSIFICATION	6.895393932677858E-4	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9990698852843103	WITHOUT_CLASSIFICATION	9.301147156898019E-4	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9991912552527411	WITHOUT_CLASSIFICATION	8.087447472589008E-4	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9998022733882752	WITHOUT_CLASSIFICATION	1.9772661172475357E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9997937971925892	WITHOUT_CLASSIFICATION	2.0620280741070394E-4	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.999584696566477	WITHOUT_CLASSIFICATION	4.153034335229471E-4	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9998727516702379	WITHOUT_CLASSIFICATION	1.2724832976205775E-4	IMPLEMENTATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9996005700298197	WITHOUT_CLASSIFICATION	3.9942997018027935E-4	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9996558558383918	WITHOUT_CLASSIFICATION	3.4414416160817726E-4	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9991070509845487	WITHOUT_CLASSIFICATION	8.92949015451263E-4	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9701061426771849	WITHOUT_CLASSIFICATION	0.029893857322815208	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9991070509845487	WITHOUT_CLASSIFICATION	8.92949015451263E-4	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9928265791702748	IMPLEMENTATION	0.007173420829725178	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.6480660574546859	WITHOUT_CLASSIFICATION	0.351933942545314	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9991070509845487	WITHOUT_CLASSIFICATION	8.92949015451263E-4	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999697370048117	WITHOUT_CLASSIFICATION	3.026299518817116E-5	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999706928638613	WITHOUT_CLASSIFICATION	2.93071361387123E-5	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9998979978576326	WITHOUT_CLASSIFICATION	1.0200214236744138E-4	IMPLEMENTATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9999345056444903	WITHOUT_CLASSIFICATION	6.549435550968807E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998359421965086	WITHOUT_CLASSIFICATION	1.6405780349145263E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9986038472136368	WITHOUT_CLASSIFICATION	0.001396152786363132	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9986038472136368	WITHOUT_CLASSIFICATION	0.001396152786363132	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9998268762926098	WITHOUT_CLASSIFICATION	1.731237073901334E-4	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9998477828172811	WITHOUT_CLASSIFICATION	1.5221718271888406E-4	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999003213939581	WITHOUT_CLASSIFICATION	9.967860604193012E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9998660914140719	WITHOUT_CLASSIFICATION	1.3390858592817988E-4	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9998660914140719	WITHOUT_CLASSIFICATION	1.3390858592817988E-4	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9998793151406438	WITHOUT_CLASSIFICATION	1.2068485935631691E-4	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999309748548275	WITHOUT_CLASSIFICATION	6.902514517249005E-5	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999509422189373	WITHOUT_CLASSIFICATION	4.905778106258821E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999849826045124	WITHOUT_CLASSIFICATION	1.501739548760225E-4	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9965602487336312	WITHOUT_CLASSIFICATION	0.0034397512663686914	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9965602487336312	WITHOUT_CLASSIFICATION	0.0034397512663686914	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9959596962296737	WITHOUT_CLASSIFICATION	0.004040303770326282	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9997323622611558	WITHOUT_CLASSIFICATION	2.6763773884416406E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999313763171664	WITHOUT_CLASSIFICATION	6.86236828335239E-5	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999119973208398	WITHOUT_CLASSIFICATION	8.80026791602333E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999832819713904	WITHOUT_CLASSIFICATION	1.6718028609585117E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9961010161033117	WITHOUT_CLASSIFICATION	0.0038989838966883208	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9959615790636177	WITHOUT_CLASSIFICATION	0.004038420936382305	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9997520554605214	WITHOUT_CLASSIFICATION	2.47944539478611E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9997531369357971	WITHOUT_CLASSIFICATION	2.468630642028392E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999934446765519	WITHOUT_CLASSIFICATION	6.55532344809811E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9998903684049621	WITHOUT_CLASSIFICATION	1.096315950377611E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9976885174294181	WITHOUT_CLASSIFICATION	0.002311482570581843	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999916505748114	WITHOUT_CLASSIFICATION	8.349425188603088E-5	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999088288814866	WITHOUT_CLASSIFICATION	9.117111851339902E-5	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999905360478231	WITHOUT_CLASSIFICATION	9.463952176883783E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9998731070446893	WITHOUT_CLASSIFICATION	1.268929553106187E-4	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9998767768800629	WITHOUT_CLASSIFICATION	1.2322311993699333E-4	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999418539470987	WITHOUT_CLASSIFICATION	5.814605290132457E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998924427911907	WITHOUT_CLASSIFICATION	1.0755720880930333E-4	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9998363381617517	WITHOUT_CLASSIFICATION	1.6366183824824423E-4	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998511879210414	WITHOUT_CLASSIFICATION	1.4881207895855116E-4	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998857700378057	WITHOUT_CLASSIFICATION	1.1422996219444381E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999498829742607	WITHOUT_CLASSIFICATION	5.011702573927049E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.996646781611009	WITHOUT_CLASSIFICATION	0.003353218388991091	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999544933325646	WITHOUT_CLASSIFICATION	4.550666743549848E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.999826430534822	WITHOUT_CLASSIFICATION	1.7356946517803256E-4	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.996646781611009	WITHOUT_CLASSIFICATION	0.003353218388991091	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.999826430534822	WITHOUT_CLASSIFICATION	1.7356946517803256E-4	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999382832038806	WITHOUT_CLASSIFICATION	6.171679611944362E-5	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.999983366566332	WITHOUT_CLASSIFICATION	1.6633433667914792E-5	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999521108195538	WITHOUT_CLASSIFICATION	4.7889180446213156E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998790355488602	WITHOUT_CLASSIFICATION	1.2096445113986986E-4	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999852174334977	WITHOUT_CLASSIFICATION	1.4782566502355016E-5	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999429947046496	WITHOUT_CLASSIFICATION	5.700529535039072E-5	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998571908246682	WITHOUT_CLASSIFICATION	1.428091753317516E-4	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999180853858669	WITHOUT_CLASSIFICATION	8.191461413304172E-5	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999625858969915	WITHOUT_CLASSIFICATION	3.741410300851862E-5	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.999825237496895	WITHOUT_CLASSIFICATION	1.7476250310501565E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9998514919831338	WITHOUT_CLASSIFICATION	1.485080168662298E-4	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.999826430534822	WITHOUT_CLASSIFICATION	1.7356946517803226E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999986172635456	WITHOUT_CLASSIFICATION	1.3827364544142143E-5	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.999894595562751	WITHOUT_CLASSIFICATION	1.0540443724900193E-4	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999125529272394	WITHOUT_CLASSIFICATION	8.744707276064316E-5	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999376887924186	WITHOUT_CLASSIFICATION	6.231120758143684E-5	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999332987792414	WITHOUT_CLASSIFICATION	6.670122075852666E-5	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999408309489943	WITHOUT_CLASSIFICATION	5.916905100561607E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999681610030774	WITHOUT_CLASSIFICATION	3.183899692259929E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999979564525951	WITHOUT_CLASSIFICATION	2.0435474048967042E-5	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999680522560853	WITHOUT_CLASSIFICATION	3.194774391456293E-5	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999593513790673	WITHOUT_CLASSIFICATION	4.064862093263091E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998757787412325	WITHOUT_CLASSIFICATION	1.242212587675331E-4	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999502692673723	WITHOUT_CLASSIFICATION	4.9730732627649885E-5	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9742034195223368	WITHOUT_CLASSIFICATION	0.025796580477663318	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999745789747934	WITHOUT_CLASSIFICATION	2.5421025206601274E-5	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999955265789418	WITHOUT_CLASSIFICATION	4.473421058205916E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9896512790863083	WITHOUT_CLASSIFICATION	0.010348720913691711	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999646910754666	WITHOUT_CLASSIFICATION	3.530892453341439E-5	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999901987910915	WITHOUT_CLASSIFICATION	9.801208908412757E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999716563868359	WITHOUT_CLASSIFICATION	2.834361316393548E-5	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999240501236253	WITHOUT_CLASSIFICATION	7.594987637471232E-5	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999714640329163	WITHOUT_CLASSIFICATION	2.8535967083812554E-5	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9998506778377645	WITHOUT_CLASSIFICATION	1.493221622355891E-4	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9998965549864341	WITHOUT_CLASSIFICATION	1.0344501356578532E-4	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999975966717057	WITHOUT_CLASSIFICATION	2.403328294270667E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9998506778377645	WITHOUT_CLASSIFICATION	1.493221622355891E-4	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999612295860578	WITHOUT_CLASSIFICATION	3.87704139421947E-5	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999544459838877	WITHOUT_CLASSIFICATION	4.5554016112280636E-5	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9994756667029683	WITHOUT_CLASSIFICATION	5.243332970317648E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.999969505299689	WITHOUT_CLASSIFICATION	3.0494700311007142E-5	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999154529543841	WITHOUT_CLASSIFICATION	8.454704561588225E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999312965593355	WITHOUT_CLASSIFICATION	6.870344066436141E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999312965593355	WITHOUT_CLASSIFICATION	6.870344066436141E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999826430534822	WITHOUT_CLASSIFICATION	1.7356946517803226E-4	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999972489661977	WITHOUT_CLASSIFICATION	2.7510338023001656E-6	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9998317763714633	WITHOUT_CLASSIFICATION	1.6822362853670197E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999676814467137	WITHOUT_CLASSIFICATION	3.231855328630933E-5	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999500480588163	WITHOUT_CLASSIFICATION	4.995194118372636E-5	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999529022351723	WITHOUT_CLASSIFICATION	4.709776482758782E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9998488145590626	WITHOUT_CLASSIFICATION	1.5118544093729725E-4	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.999938992287384	WITHOUT_CLASSIFICATION	6.100771261604655E-5	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999683294464303	WITHOUT_CLASSIFICATION	3.167055356970772E-5	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999721935399287	WITHOUT_CLASSIFICATION	2.7806460071251357E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999134358206647	WITHOUT_CLASSIFICATION	8.656417933522924E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999134358206647	WITHOUT_CLASSIFICATION	8.656417933522924E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999066069895822	WITHOUT_CLASSIFICATION	9.339301041776866E-5	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999629996443303	WITHOUT_CLASSIFICATION	3.700035566971097E-5	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999310318355622	WITHOUT_CLASSIFICATION	6.89681644377966E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999134358206647	WITHOUT_CLASSIFICATION	8.656417933522924E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999066069895822	WITHOUT_CLASSIFICATION	9.339301041776866E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999066069895822	WITHOUT_CLASSIFICATION	9.339301041776866E-5	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999550099291376	WITHOUT_CLASSIFICATION	4.499007086254775E-5	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998534764734212	WITHOUT_CLASSIFICATION	1.4652352657881744E-4	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999589736981871	WITHOUT_CLASSIFICATION	4.102630181288852E-5	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999256921912381	WITHOUT_CLASSIFICATION	7.430780876196703E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9998313733285373	WITHOUT_CLASSIFICATION	1.6862667146269597E-4	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9998313733285373	WITHOUT_CLASSIFICATION	1.6862667146269597E-4	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999093321583494	WITHOUT_CLASSIFICATION	9.066784165063449E-5	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999899150757923	WITHOUT_CLASSIFICATION	1.0084924207696462E-4	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999524536783115	WITHOUT_CLASSIFICATION	4.7546321688381725E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999345971100351	WITHOUT_CLASSIFICATION	6.540288996488179E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999345971100351	WITHOUT_CLASSIFICATION	6.540288996488179E-5	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999166294472053	WITHOUT_CLASSIFICATION	8.337055279471621E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998998970744688	WITHOUT_CLASSIFICATION	1.0010292553122327E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999336703947135	WITHOUT_CLASSIFICATION	6.63296052865547E-5	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.99999346830278	WITHOUT_CLASSIFICATION	6.531697220080476E-6	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999298205444975	WITHOUT_CLASSIFICATION	7.017945550241136E-5	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999881896192143	WITHOUT_CLASSIFICATION	1.1810380785645523E-5	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9998351587879313	WITHOUT_CLASSIFICATION	1.6484121206872653E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.999849536228022	WITHOUT_CLASSIFICATION	1.5046377197798193E-4	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9998688227472001	WITHOUT_CLASSIFICATION	1.3117725279984189E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999336703947135	WITHOUT_CLASSIFICATION	6.63296052865547E-5	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9997525671527193	WITHOUT_CLASSIFICATION	2.4743284728062284E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999667200444304	WITHOUT_CLASSIFICATION	3.327995556962771E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999667200444304	WITHOUT_CLASSIFICATION	3.327995556962771E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999883550838823	WITHOUT_CLASSIFICATION	1.1644916117670433E-5	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999287305929107	WITHOUT_CLASSIFICATION	7.126940708938211E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999656396102244	WITHOUT_CLASSIFICATION	3.4360389775663104E-5	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999731190585457	WITHOUT_CLASSIFICATION	2.688094145438737E-5	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9998545858770924	WITHOUT_CLASSIFICATION	1.4541412290769112E-4	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9997525342087586	WITHOUT_CLASSIFICATION	2.4746579124136013E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9998002496612384	WITHOUT_CLASSIFICATION	1.9975033876154058E-4	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999065911503857	WITHOUT_CLASSIFICATION	9.340884961433707E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999629859874911	WITHOUT_CLASSIFICATION	3.70140125088003E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999629859874911	WITHOUT_CLASSIFICATION	3.70140125088003E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99985275617383	WITHOUT_CLASSIFICATION	1.4724382617001055E-4	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998359421965086	WITHOUT_CLASSIFICATION	1.6405780349145263E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999610686295601	WITHOUT_CLASSIFICATION	3.8931370439954994E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9997736510362244	WITHOUT_CLASSIFICATION	2.2634896377564926E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9986038472136368	WITHOUT_CLASSIFICATION	0.001396152786363132	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9998504525555763	WITHOUT_CLASSIFICATION	1.495474444238081E-4	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999026134801524	WITHOUT_CLASSIFICATION	9.738651984768524E-5	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9998488136842022	WITHOUT_CLASSIFICATION	1.511863157978913E-4	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9997548440771401	WITHOUT_CLASSIFICATION	2.4515592285990074E-4	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999791200122157	WITHOUT_CLASSIFICATION	2.087998778432507E-5	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9962337769475267	WITHOUT_CLASSIFICATION	0.0037662230524733837	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9959617248434512	WITHOUT_CLASSIFICATION	0.004038275156548716	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.999890497042095	WITHOUT_CLASSIFICATION	1.095029579049877E-4	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9998477828172811	WITHOUT_CLASSIFICATION	1.5221718271888406E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997657691679903	WITHOUT_CLASSIFICATION	2.3423083200982712E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997657691679903	WITHOUT_CLASSIFICATION	2.3423083200982712E-4	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9997748637964452	WITHOUT_CLASSIFICATION	2.2513620355479113E-4	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9998604081887047	WITHOUT_CLASSIFICATION	1.3959181129523688E-4	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999678720485442	WITHOUT_CLASSIFICATION	3.2127951455733135E-5	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9998519118572688	WITHOUT_CLASSIFICATION	1.4808814273108012E-4	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9998885473920388	WITHOUT_CLASSIFICATION	1.1145260796121501E-4	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999475722619637	WITHOUT_CLASSIFICATION	5.2427738036219586E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9998660914140719	WITHOUT_CLASSIFICATION	1.3390858592817988E-4	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999078933298826	WITHOUT_CLASSIFICATION	9.210667011736019E-5	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998907728395848	WITHOUT_CLASSIFICATION	1.0922716041519994E-4	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9998882763779015	WITHOUT_CLASSIFICATION	1.1172362209851182E-4	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999554939711601	WITHOUT_CLASSIFICATION	4.4506028839998346E-5	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9998424320059403	WITHOUT_CLASSIFICATION	1.5756799405975715E-4	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999367034560007	WITHOUT_CLASSIFICATION	6.329654399924846E-5	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999387206664577	WITHOUT_CLASSIFICATION	6.127933354235818E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9998660914140719	WITHOUT_CLASSIFICATION	1.3390858592817988E-4	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999041262241	WITHOUT_CLASSIFICATION	9.587377590013067E-5	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999553593014694	WITHOUT_CLASSIFICATION	4.464069853049081E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9986038472136368	WITHOUT_CLASSIFICATION	0.001396152786363132	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9986038472136368	WITHOUT_CLASSIFICATION	0.001396152786363132	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9959617248434512	WITHOUT_CLASSIFICATION	0.004038275156548716	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997657691679903	WITHOUT_CLASSIFICATION	2.3423083200982712E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9998424320059403	WITHOUT_CLASSIFICATION	1.5756799405975715E-4	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9998793151406438	WITHOUT_CLASSIFICATION	1.2068485935631691E-4	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9998576800969745	WITHOUT_CLASSIFICATION	1.423199030254432E-4	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999170011561352	WITHOUT_CLASSIFICATION	8.299884386469887E-5	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9998832450559626	WITHOUT_CLASSIFICATION	1.167549440373688E-4	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999034285563345	WITHOUT_CLASSIFICATION	9.657144366553397E-5	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9998450292521067	WITHOUT_CLASSIFICATION	1.5497074789333606E-4	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9998192100853006	WITHOUT_CLASSIFICATION	1.8078991469948105E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999859261132479	WITHOUT_CLASSIFICATION	1.4073886752099605E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999859261132479	WITHOUT_CLASSIFICATION	1.4073886752099605E-4	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999563945659738	WITHOUT_CLASSIFICATION	4.360543402610839E-5	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999760686398238	WITHOUT_CLASSIFICATION	2.3931360176250473E-5	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9998598179697121	WITHOUT_CLASSIFICATION	1.401820302877873E-4	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9998629863287246	WITHOUT_CLASSIFICATION	1.3701367127550747E-4	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999919663614919	WITHOUT_CLASSIFICATION	8.033638508096027E-5	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999501223097622	WITHOUT_CLASSIFICATION	4.987769023787941E-5	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999111638374528	WITHOUT_CLASSIFICATION	8.883616254719413E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999309748548275	WITHOUT_CLASSIFICATION	6.902514517249005E-5	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9998421457752967	WITHOUT_CLASSIFICATION	1.5785422470325115E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9998421457752967	WITHOUT_CLASSIFICATION	1.5785422470325115E-4	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9998088967670832	WITHOUT_CLASSIFICATION	1.911032329168823E-4	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999253090855215	WITHOUT_CLASSIFICATION	7.469091447852553E-5	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9998088967670832	WITHOUT_CLASSIFICATION	1.911032329168823E-4	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999168263847128	WITHOUT_CLASSIFICATION	8.317361528723327E-5	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9960655446555199	WITHOUT_CLASSIFICATION	0.003934455344480047	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9986038472136368	WITHOUT_CLASSIFICATION	0.001396152786363132	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9959617248434512	WITHOUT_CLASSIFICATION	0.004038275156548716	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9998477828172811	WITHOUT_CLASSIFICATION	1.5221718271888406E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9998424320059403	WITHOUT_CLASSIFICATION	1.5756799405975715E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9998424320059403	WITHOUT_CLASSIFICATION	1.5756799405975715E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999452000234257	WITHOUT_CLASSIFICATION	5.4799976574258575E-5	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999452000234257	WITHOUT_CLASSIFICATION	5.4799976574258575E-5	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9998044705550665	WITHOUT_CLASSIFICATION	1.9552944493352351E-4	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9997601825975823	WITHOUT_CLASSIFICATION	2.3981740241770972E-4	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.999927602188434	WITHOUT_CLASSIFICATION	7.239781156601339E-5	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9997962344990706	WITHOUT_CLASSIFICATION	2.0376550092925775E-4	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999599157423493	WITHOUT_CLASSIFICATION	4.0084257650662406E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999206280802712	WITHOUT_CLASSIFICATION	7.937191972880142E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999849826045124	WITHOUT_CLASSIFICATION	1.501739548760225E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999849826045124	WITHOUT_CLASSIFICATION	1.501739548760225E-4	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9992593416530592	WITHOUT_CLASSIFICATION	7.406583469409281E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9998946738378203	WITHOUT_CLASSIFICATION	1.0532616217975884E-4	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9963247138257432	WITHOUT_CLASSIFICATION	0.003675286174256866	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9959970423321061	WITHOUT_CLASSIFICATION	0.004002957667893965	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9973954106868336	WITHOUT_CLASSIFICATION	0.0026045893131664234	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9965602487336312	WITHOUT_CLASSIFICATION	0.0034397512663686914	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9959847383405007	WITHOUT_CLASSIFICATION	0.00401526165949929	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9959847383405007	WITHOUT_CLASSIFICATION	0.00401526165949929	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9959596962296737	WITHOUT_CLASSIFICATION	0.004040303770326282	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9959596962296737	WITHOUT_CLASSIFICATION	0.004040303770326282	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.999754347665291	WITHOUT_CLASSIFICATION	2.4565233470900884E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.999754347665291	WITHOUT_CLASSIFICATION	2.4565233470900884E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999850338685871	WITHOUT_CLASSIFICATION	1.4966131412887232E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999850338685871	WITHOUT_CLASSIFICATION	1.4966131412887232E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999849826045124	WITHOUT_CLASSIFICATION	1.501739548760225E-4	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9965602487336312	WITHOUT_CLASSIFICATION	0.0034397512663686914	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9959847383405007	WITHOUT_CLASSIFICATION	0.00401526165949929	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9959847383405007	WITHOUT_CLASSIFICATION	0.00401526165949929	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9959596962296737	WITHOUT_CLASSIFICATION	0.004040303770326282	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.999754347665291	WITHOUT_CLASSIFICATION	2.4565233470900884E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.999754347665291	WITHOUT_CLASSIFICATION	2.4565233470900884E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999850338685871	WITHOUT_CLASSIFICATION	1.4966131412887232E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999022465299544	WITHOUT_CLASSIFICATION	9.775347004560575E-5	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9997609053150616	WITHOUT_CLASSIFICATION	2.3909468493833885E-4	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9997709631727519	WITHOUT_CLASSIFICATION	2.2903682724818362E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999864904313602	WITHOUT_CLASSIFICATION	1.3509568639859892E-5	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9998652736690756	WITHOUT_CLASSIFICATION	1.3472633092430323E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9959948907927457	WITHOUT_CLASSIFICATION	0.004005109207254217	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9998003814936776	WITHOUT_CLASSIFICATION	1.9961850632250398E-4	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999499841137015	WITHOUT_CLASSIFICATION	5.001588629841777E-5	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999578295381696	WITHOUT_CLASSIFICATION	4.2170461830400777E-5	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999789280683431	WITHOUT_CLASSIFICATION	2.1071931656977157E-5	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999004665826132	WITHOUT_CLASSIFICATION	9.95334173867911E-5	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999288068567279	WITHOUT_CLASSIFICATION	7.119314327203881E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999826430534822	WITHOUT_CLASSIFICATION	1.7356946517803226E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9959948907927457	WITHOUT_CLASSIFICATION	0.004005109207254217	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999452903706104	WITHOUT_CLASSIFICATION	5.470962938951203E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999812553711134	WITHOUT_CLASSIFICATION	1.874462888652875E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999812553711134	WITHOUT_CLASSIFICATION	1.874462888652875E-5	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999743775317337	WITHOUT_CLASSIFICATION	2.5622468266394088E-5	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999121120022909	WITHOUT_CLASSIFICATION	8.788799770909268E-5	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999156077913034	WITHOUT_CLASSIFICATION	8.439220869654269E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9998631161564671	WITHOUT_CLASSIFICATION	1.3688384353297578E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9998631161564671	WITHOUT_CLASSIFICATION	1.3688384353297578E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999832819713904	WITHOUT_CLASSIFICATION	1.6718028609585117E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999788009703462	WITHOUT_CLASSIFICATION	2.1199029653837777E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999788009703462	WITHOUT_CLASSIFICATION	2.1199029653837777E-5	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999372471962954	WITHOUT_CLASSIFICATION	6.275280370459109E-5	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999942174372188	WITHOUT_CLASSIFICATION	5.782562781189295E-5	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999310277106949	WITHOUT_CLASSIFICATION	6.897228930515935E-5	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9997534516522383	WITHOUT_CLASSIFICATION	2.465483477617008E-4	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9960471575448567	WITHOUT_CLASSIFICATION	0.00395284245514325	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9961010161033117	WITHOUT_CLASSIFICATION	0.0038989838966883208	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9900364253077873	WITHOUT_CLASSIFICATION	0.009963574692212533	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9998069724515097	WITHOUT_CLASSIFICATION	1.9302754849037166E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999338739564834	WITHOUT_CLASSIFICATION	6.612604351667728E-5	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.999954187193561	WITHOUT_CLASSIFICATION	4.581280643904367E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999817088115156	WITHOUT_CLASSIFICATION	1.8291188484376952E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9998619904930646	WITHOUT_CLASSIFICATION	1.3800950693542127E-4	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.99987177540825	WITHOUT_CLASSIFICATION	1.2822459175005146E-4	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999754767050488	WITHOUT_CLASSIFICATION	2.452329495119271E-4	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9960890356632441	WITHOUT_CLASSIFICATION	0.003910964336755957	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9998207777256117	WITHOUT_CLASSIFICATION	1.7922227438824708E-4	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9998036744660402	WITHOUT_CLASSIFICATION	1.9632553395977317E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997528240279021	WITHOUT_CLASSIFICATION	2.471759720978822E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999934446765519	WITHOUT_CLASSIFICATION	6.55532344809811E-5	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9998098353023698	WITHOUT_CLASSIFICATION	1.901646976302338E-4	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.999801973453932	WITHOUT_CLASSIFICATION	1.98026546068104E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9961010161033117	WITHOUT_CLASSIFICATION	0.0038989838966883208	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997528240279021	WITHOUT_CLASSIFICATION	2.471759720978822E-4	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9998098353023698	WITHOUT_CLASSIFICATION	1.901646976302338E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998869719545608	WITHOUT_CLASSIFICATION	1.1302804543918383E-4	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9998486166963967	WITHOUT_CLASSIFICATION	1.5138330360344845E-4	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998282216667335	WITHOUT_CLASSIFICATION	1.7177833326641485E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9997707248177957	WITHOUT_CLASSIFICATION	2.292751822042639E-4	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.999874805725492	WITHOUT_CLASSIFICATION	1.251942745079261E-4	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9997999766646762	WITHOUT_CLASSIFICATION	2.0002333532368906E-4	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999844931824919	WITHOUT_CLASSIFICATION	1.550681750799229E-5	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9998186805531636	WITHOUT_CLASSIFICATION	1.8131944683647965E-4	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999170552529372	WITHOUT_CLASSIFICATION	8.294474706290807E-5	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999517766981674	WITHOUT_CLASSIFICATION	4.8223301832599654E-5	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9998740987938897	WITHOUT_CLASSIFICATION	1.259012061103433E-4	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999490351696547	WITHOUT_CLASSIFICATION	5.0964830345173914E-5	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999961838601786	WITHOUT_CLASSIFICATION	3.8161398213886503E-5	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9997540013300242	WITHOUT_CLASSIFICATION	2.4599866997577206E-4	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9976885174294181	WITHOUT_CLASSIFICATION	0.002311482570581843	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999081709212388	WITHOUT_CLASSIFICATION	9.18290787611922E-5	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997528240279021	WITHOUT_CLASSIFICATION	2.471759720978822E-4	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998471004958295	WITHOUT_CLASSIFICATION	1.528995041705776E-4	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9998962221809391	WITHOUT_CLASSIFICATION	1.0377781906088179E-4	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999263537425372	WITHOUT_CLASSIFICATION	7.364625746275987E-5	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999391148459693	WITHOUT_CLASSIFICATION	6.088515403060584E-5	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9998555816827881	WITHOUT_CLASSIFICATION	1.4441831721187824E-4	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9998782644132407	WITHOUT_CLASSIFICATION	1.2173558675928912E-4	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999795656858079	WITHOUT_CLASSIFICATION	2.0434314192051792E-5	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999576686863618	WITHOUT_CLASSIFICATION	4.2331313638177074E-5	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9997616761530402	WITHOUT_CLASSIFICATION	2.3832384695967584E-4	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9997522235382336	WITHOUT_CLASSIFICATION	2.477764617664495E-4	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998036744660402	WITHOUT_CLASSIFICATION	1.9632553395977317E-4	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9976892903836488	WITHOUT_CLASSIFICATION	0.002310709616351045	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999088288814866	WITHOUT_CLASSIFICATION	9.117111851339902E-5	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999403804128056	WITHOUT_CLASSIFICATION	5.9619587194369286E-5	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9998974369302206	WITHOUT_CLASSIFICATION	1.0256306977948216E-4	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9997818884769406	WITHOUT_CLASSIFICATION	2.1811152305941541E-4	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9997525855320267	WITHOUT_CLASSIFICATION	2.4741446797334297E-4	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9998443140589898	WITHOUT_CLASSIFICATION	1.5568594101025108E-4	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9997651761203669	WITHOUT_CLASSIFICATION	2.3482387963316408E-4	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999990761131734	WITHOUT_CLASSIFICATION	9.238868266038739E-6	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999943774819646	WITHOUT_CLASSIFICATION	5.622518035387965E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999925107957503	WITHOUT_CLASSIFICATION	7.489204249697272E-5	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9998492406258727	WITHOUT_CLASSIFICATION	1.5075937412728648E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998642049652984	WITHOUT_CLASSIFICATION	1.3579503470168396E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998642049652984	WITHOUT_CLASSIFICATION	1.3579503470168396E-4	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998199965206591	WITHOUT_CLASSIFICATION	1.8000347934079937E-4	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9998695589622648	WITHOUT_CLASSIFICATION	1.3044103773518533E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999463050157132	WITHOUT_CLASSIFICATION	5.3694984286766456E-5	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999196479308254	WITHOUT_CLASSIFICATION	8.03520691745645E-5	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999279617516489	WITHOUT_CLASSIFICATION	7.203824835109094E-5	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.999914538841805	WITHOUT_CLASSIFICATION	8.546115819494267E-5	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998357951236642	WITHOUT_CLASSIFICATION	1.6420487633586993E-4	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999974616712016	WITHOUT_CLASSIFICATION	2.538328798387141E-5	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999192833268474	WITHOUT_CLASSIFICATION	8.071667315256631E-5	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.999822715557777	WITHOUT_CLASSIFICATION	1.7728444222304626E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9997846252238933	WITHOUT_CLASSIFICATION	2.1537477610662756E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9998669764391176	WITHOUT_CLASSIFICATION	1.3302356088238274E-4	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999341511824043	WITHOUT_CLASSIFICATION	6.584881759573146E-5	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9998969824181192	WITHOUT_CLASSIFICATION	1.0301758188084797E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998609348483569	WITHOUT_CLASSIFICATION	1.390651516432016E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998548393926583	WITHOUT_CLASSIFICATION	1.4516060734173062E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999785655923659	WITHOUT_CLASSIFICATION	2.1434407634161182E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999568022904144	WITHOUT_CLASSIFICATION	4.319770958552781E-5	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9998945689536525	WITHOUT_CLASSIFICATION	1.0543104634750549E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9998698833533854	WITHOUT_CLASSIFICATION	1.3011664661455677E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9969071261293125	WITHOUT_CLASSIFICATION	0.0030928738706875016	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9969071261293125	WITHOUT_CLASSIFICATION	0.0030928738706875016	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9997650160707816	WITHOUT_CLASSIFICATION	2.3498392921832034E-4	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9997650160707816	WITHOUT_CLASSIFICATION	2.3498392921832034E-4	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999925107957503	WITHOUT_CLASSIFICATION	7.489204249697272E-5	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9998499427597232	WITHOUT_CLASSIFICATION	1.5005724027681853E-4	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999328960840057	WITHOUT_CLASSIFICATION	6.710391599428365E-5	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998286242540675	WITHOUT_CLASSIFICATION	1.7137574593249536E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99985275617383	WITHOUT_CLASSIFICATION	1.4724382617001055E-4	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999328960840057	WITHOUT_CLASSIFICATION	6.710391599428365E-5	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998286242540675	WITHOUT_CLASSIFICATION	1.7137574593249536E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998794036659774	WITHOUT_CLASSIFICATION	1.2059633402264481E-4	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999265258042868	WITHOUT_CLASSIFICATION	7.347419571321891E-5	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999696282430333	WITHOUT_CLASSIFICATION	3.0371756966729137E-5	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999540438632604	WITHOUT_CLASSIFICATION	4.5956136739756E-5	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999709111001929	WITHOUT_CLASSIFICATION	2.9088899807151484E-5	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999744657146901	WITHOUT_CLASSIFICATION	2.55342853099972E-5	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9998622441653308	WITHOUT_CLASSIFICATION	1.3775583466916965E-4	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9998513004046616	WITHOUT_CLASSIFICATION	1.486995953383276E-4	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999700986958775	WITHOUT_CLASSIFICATION	2.9901304122429677E-5	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999720049007279	WITHOUT_CLASSIFICATION	2.7995099272002686E-5	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999752696778872	WITHOUT_CLASSIFICATION	2.4730322112792953E-5	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999961210880629	WITHOUT_CLASSIFICATION	3.878911937103963E-5	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9998538898189762	WITHOUT_CLASSIFICATION	1.4611018102377932E-4	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9998304512441017	WITHOUT_CLASSIFICATION	1.6954875589829182E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99985275617383	WITHOUT_CLASSIFICATION	1.4724382617001055E-4	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9998341125425463	WITHOUT_CLASSIFICATION	1.6588745745369372E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998448289827716	WITHOUT_CLASSIFICATION	1.551710172284873E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998448289827716	WITHOUT_CLASSIFICATION	1.551710172284873E-4	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999211115303864	WITHOUT_CLASSIFICATION	7.88884696136321E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998794036659774	WITHOUT_CLASSIFICATION	1.2059633402264481E-4	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9998393088428964	WITHOUT_CLASSIFICATION	1.606911571034994E-4	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999129085830726	WITHOUT_CLASSIFICATION	8.709141692750016E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.992540108886444	WITHOUT_CLASSIFICATION	0.007459891113556074	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999512002027896	WITHOUT_CLASSIFICATION	4.879979721042288E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998583070196427	WITHOUT_CLASSIFICATION	1.4169298035722244E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998794036659774	WITHOUT_CLASSIFICATION	1.2059633402264481E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999512002027896	WITHOUT_CLASSIFICATION	4.879979721042288E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998583070196427	WITHOUT_CLASSIFICATION	1.4169298035722244E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.999911898762605	WITHOUT_CLASSIFICATION	8.810123739496114E-5	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9997534743729534	WITHOUT_CLASSIFICATION	2.4652562704666117E-4	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999902880496679	WITHOUT_CLASSIFICATION	9.71195033197852E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998794036659774	WITHOUT_CLASSIFICATION	1.2059633402264481E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998794036659774	WITHOUT_CLASSIFICATION	1.2059633402264481E-4	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9997844037458099	WITHOUT_CLASSIFICATION	2.1559625419020683E-4	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9997854198321655	WITHOUT_CLASSIFICATION	2.1458016783436275E-4	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9998555592719222	WITHOUT_CLASSIFICATION	1.444407280778336E-4	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999296299692698	WITHOUT_CLASSIFICATION	7.037003073010049E-5	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9998988594896063	WITHOUT_CLASSIFICATION	1.0114051039359956E-4	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999273971375608	WITHOUT_CLASSIFICATION	7.260286243914069E-5	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999234748654552	WITHOUT_CLASSIFICATION	7.652513454475243E-5	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.999921961591624	WITHOUT_CLASSIFICATION	7.803840837596996E-5	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999519472347898	WITHOUT_CLASSIFICATION	4.805276521020582E-5	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9998037824502775	WITHOUT_CLASSIFICATION	1.9621754972251092E-4	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999719958574761	WITHOUT_CLASSIFICATION	2.8004142523862336E-5	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9998742964780615	WITHOUT_CLASSIFICATION	1.257035219385135E-4	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999554037516046	WITHOUT_CLASSIFICATION	4.4596248395340807E-5	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999837961248246	WITHOUT_CLASSIFICATION	1.620387517540509E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999138307519578	WITHOUT_CLASSIFICATION	8.616924804219486E-5	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999826188757441	WITHOUT_CLASSIFICATION	1.73811242559091E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998924427911907	WITHOUT_CLASSIFICATION	1.0755720880930333E-4	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999417601688951	WITHOUT_CLASSIFICATION	5.823983110482253E-5	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9998686629176736	WITHOUT_CLASSIFICATION	1.313370823263215E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999006068572333	WITHOUT_CLASSIFICATION	9.939314276674167E-5	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9997954572505579	WITHOUT_CLASSIFICATION	2.0454274944216444E-4	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9998109841557824	WITHOUT_CLASSIFICATION	1.8901584421754294E-4	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9998109841557824	WITHOUT_CLASSIFICATION	1.8901584421754294E-4	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998924427911907	WITHOUT_CLASSIFICATION	1.0755720880930333E-4	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.999911315834313	WITHOUT_CLASSIFICATION	8.868416568696857E-5	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999462777492893	WITHOUT_CLASSIFICATION	5.3722250710519184E-5	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.999857688849567	WITHOUT_CLASSIFICATION	1.4231115043290338E-4	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9998991165903631	WITHOUT_CLASSIFICATION	1.008834096368386E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999763337215408	WITHOUT_CLASSIFICATION	2.3666278459202352E-5	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999581794359358	WITHOUT_CLASSIFICATION	4.18205640642116E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.999950155610902	WITHOUT_CLASSIFICATION	4.984438909806017E-5	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9997820782344602	WITHOUT_CLASSIFICATION	2.1792176553983908E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999987235469884	WITHOUT_CLASSIFICATION	1.2764530116084322E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999896805540727	WITHOUT_CLASSIFICATION	1.031944592729974E-4	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999856216685979	WITHOUT_CLASSIFICATION	1.43783314021E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999905854278277	WITHOUT_CLASSIFICATION	9.414572172293822E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999489572483998	WITHOUT_CLASSIFICATION	5.104275160019812E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998306473576504	WITHOUT_CLASSIFICATION	1.6935264234974656E-4	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999788316046379	WITHOUT_CLASSIFICATION	2.116839536211333E-5	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999965388381419	WITHOUT_CLASSIFICATION	3.461161858094711E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9998478917055861	WITHOUT_CLASSIFICATION	1.5210829441404195E-4	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999355700449952	WITHOUT_CLASSIFICATION	6.442995500474113E-5	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998085684838139	WITHOUT_CLASSIFICATION	1.9143151618610852E-4	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999012920249741	WITHOUT_CLASSIFICATION	9.870797502590983E-5	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999429134129351	WITHOUT_CLASSIFICATION	5.708658706490766E-5	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9998878705212949	WITHOUT_CLASSIFICATION	1.1212947870506112E-4	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999820159702786	WITHOUT_CLASSIFICATION	1.7984029721363645E-5	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995766654657102	WITHOUT_CLASSIFICATION	4.233345342898374E-4	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996999229575058	WITHOUT_CLASSIFICATION	3.0007704249422905E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997002295441798	WITHOUT_CLASSIFICATION	2.9977045582024986E-4	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998614966708631	WITHOUT_CLASSIFICATION	1.3850332913685316E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996588314922713	WITHOUT_CLASSIFICATION	3.411685077287089E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997500767999156	WITHOUT_CLASSIFICATION	2.4992320008439256E-4	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996553585094357	WITHOUT_CLASSIFICATION	3.446414905643907E-4	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996945379231551	WITHOUT_CLASSIFICATION	3.05462076844948E-4	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.999875241212196	WITHOUT_CLASSIFICATION	1.247587878041342E-4	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9998755814295281	WITHOUT_CLASSIFICATION	1.244185704718631E-4	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998056128634036	WITHOUT_CLASSIFICATION	1.943871365963436E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998127906068762	WITHOUT_CLASSIFICATION	1.872093931237974E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997704551728601	WITHOUT_CLASSIFICATION	2.2954482713983997E-4	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998385889705148	WITHOUT_CLASSIFICATION	1.6141102948520397E-4	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997922727055404	WITHOUT_CLASSIFICATION	2.0772729445958635E-4	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996646372174571	WITHOUT_CLASSIFICATION	3.3536278254288804E-4	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997199503422356	WITHOUT_CLASSIFICATION	2.800496577643465E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996552502688295	WITHOUT_CLASSIFICATION	3.447497311705268E-4	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998881751011368	WITHOUT_CLASSIFICATION	1.1182489886322203E-4	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999183380360438	WITHOUT_CLASSIFICATION	8.166196395622603E-5	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999463764918862	WITHOUT_CLASSIFICATION	5.362350811375708E-5	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998931009294536	WITHOUT_CLASSIFICATION	1.0689907054633925E-4	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999645724080212	WITHOUT_CLASSIFICATION	3.542759197889881E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998519961137265	WITHOUT_CLASSIFICATION	1.4800388627341331E-4	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9997582091057216	WITHOUT_CLASSIFICATION	2.4179089427845448E-4	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.999888799829216	WITHOUT_CLASSIFICATION	1.1120017078403688E-4	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9998808958633053	WITHOUT_CLASSIFICATION	1.191041366947543E-4	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9997623990792139	WITHOUT_CLASSIFICATION	2.3760092078600487E-4	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9997589292891794	WITHOUT_CLASSIFICATION	2.4107071082057863E-4	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999816718330767	WITHOUT_CLASSIFICATION	1.8328166923299423E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999896805540727	WITHOUT_CLASSIFICATION	1.031944592729974E-4	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998010664936511	WITHOUT_CLASSIFICATION	1.989335063488701E-4	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999775023754561	WITHOUT_CLASSIFICATION	2.2497624543893803E-5	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9998689737143326	WITHOUT_CLASSIFICATION	1.310262856674077E-4	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.999876655484018	WITHOUT_CLASSIFICATION	1.233445159818536E-4	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.999987855458875	WITHOUT_CLASSIFICATION	1.2144541124959226E-5	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998583500431062	WITHOUT_CLASSIFICATION	1.4164995689381284E-4	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999268508035193	WITHOUT_CLASSIFICATION	7.314919648070477E-5	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998614089895029	WITHOUT_CLASSIFICATION	1.3859101049703044E-4	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998555669563568	WITHOUT_CLASSIFICATION	1.4443304364316668E-4	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9982059308662868	WITHOUT_CLASSIFICATION	0.0017940691337132483	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9998777353442337	WITHOUT_CLASSIFICATION	1.2226465576618966E-4	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999202137382793	WITHOUT_CLASSIFICATION	7.978626172059959E-5	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999303333296439	WITHOUT_CLASSIFICATION	6.96666703561262E-5	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998411554016459	WITHOUT_CLASSIFICATION	1.5884459835411357E-4	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999315103049133	WITHOUT_CLASSIFICATION	6.848969508662126E-5	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.99992966250476	WITHOUT_CLASSIFICATION	7.033749524006762E-5	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9998853614695338	WITHOUT_CLASSIFICATION	1.1463853046618688E-4	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999252816072358	WITHOUT_CLASSIFICATION	7.47183927642259E-5	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9998485274555962	WITHOUT_CLASSIFICATION	1.5147254440381238E-4	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9991305946907436	WITHOUT_CLASSIFICATION	8.69405309256377E-4	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999507996890395	WITHOUT_CLASSIFICATION	4.92003109604303E-5	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9998832453882364	WITHOUT_CLASSIFICATION	1.16754611763645E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999896805540727	WITHOUT_CLASSIFICATION	1.031944592729974E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998519961137265	WITHOUT_CLASSIFICATION	1.4800388627341331E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999322300723669	WITHOUT_CLASSIFICATION	6.776992763317532E-5	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999756401565847	WITHOUT_CLASSIFICATION	2.435984341533192E-5	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9998079303517053	WITHOUT_CLASSIFICATION	1.9206964829471582E-4	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998931009294536	WITHOUT_CLASSIFICATION	1.0689907054633925E-4	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998625061790446	WITHOUT_CLASSIFICATION	1.3749382095537424E-4	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9998219913818951	WITHOUT_CLASSIFICATION	1.7800861810488846E-4	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9998303610714554	WITHOUT_CLASSIFICATION	1.6963892854465258E-4	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9998878090306438	WITHOUT_CLASSIFICATION	1.1219096935626082E-4	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9998892549376996	WITHOUT_CLASSIFICATION	1.1074506230029483E-4	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999120884699992	WITHOUT_CLASSIFICATION	8.79115300007452E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998705318970956	WITHOUT_CLASSIFICATION	1.2946810290445824E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998682342871458	WITHOUT_CLASSIFICATION	1.317657128542482E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999399864411699	WITHOUT_CLASSIFICATION	6.0013558830200135E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999896805540727	WITHOUT_CLASSIFICATION	1.031944592729974E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999896805540727	WITHOUT_CLASSIFICATION	1.031944592729974E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9997771668853119	WITHOUT_CLASSIFICATION	2.2283311468796371E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9997392154814145	WITHOUT_CLASSIFICATION	2.607845185854001E-4	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9998785760332906	WITHOUT_CLASSIFICATION	1.2142396670946781E-4	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9998292464606112	WITHOUT_CLASSIFICATION	1.7075353938869175E-4	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998978713576153	WITHOUT_CLASSIFICATION	1.0212864238470266E-4	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999015029574068	WITHOUT_CLASSIFICATION	9.84970425932894E-5	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999200150523445	WITHOUT_CLASSIFICATION	7.998494765556502E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999896805540727	WITHOUT_CLASSIFICATION	1.031944592729974E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999390924479754	WITHOUT_CLASSIFICATION	6.0907552024671164E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999313053863134	WITHOUT_CLASSIFICATION	6.869461368654734E-5	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999363133309974	WITHOUT_CLASSIFICATION	6.368666900253754E-5	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9998614617662382	WITHOUT_CLASSIFICATION	1.3853823376168704E-4	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9998653844519899	WITHOUT_CLASSIFICATION	1.3461554801013956E-4	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.999873935152068	WITHOUT_CLASSIFICATION	1.2606484793201438E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9997618050739024	WITHOUT_CLASSIFICATION	2.3819492609751967E-4	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998116113720948	WITHOUT_CLASSIFICATION	1.8838862790509017E-4	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998968018200676	WITHOUT_CLASSIFICATION	1.0319817993245985E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998519961137265	WITHOUT_CLASSIFICATION	1.4800388627341331E-4	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999480495088544	WITHOUT_CLASSIFICATION	5.195049114568551E-5	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.999989401078881	WITHOUT_CLASSIFICATION	1.0598921119013666E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999672333604188	WITHOUT_CLASSIFICATION	3.27666395811742E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998519961137265	WITHOUT_CLASSIFICATION	1.4800388627341331E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9998585353994739	WITHOUT_CLASSIFICATION	1.414646005260174E-4	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999390924479754	WITHOUT_CLASSIFICATION	6.0907552024671164E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.999799044027732	WITHOUT_CLASSIFICATION	2.0095597226803816E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999896805540727	WITHOUT_CLASSIFICATION	1.031944592729974E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998854509215458	WITHOUT_CLASSIFICATION	1.145490784541886E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999896805540727	WITHOUT_CLASSIFICATION	1.031944592729974E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.99997688646211	WITHOUT_CLASSIFICATION	2.3113537890027573E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999120884699992	WITHOUT_CLASSIFICATION	8.79115300007452E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998705318970956	WITHOUT_CLASSIFICATION	1.2946810290445824E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998682342871458	WITHOUT_CLASSIFICATION	1.317657128542482E-4	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999842528631591	WITHOUT_CLASSIFICATION	1.5747136840966293E-5	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999361118083497	WITHOUT_CLASSIFICATION	6.38881916502889E-5	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.999963668117919	WITHOUT_CLASSIFICATION	3.6331882081075054E-5	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999675039510124	WITHOUT_CLASSIFICATION	3.24960489876019E-5	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999620699270315	WITHOUT_CLASSIFICATION	3.793007296845867E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999896805540727	WITHOUT_CLASSIFICATION	1.031944592729974E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998519961137265	WITHOUT_CLASSIFICATION	1.4800388627341331E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999399864411699	WITHOUT_CLASSIFICATION	6.0013558830200135E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9997771668853119	WITHOUT_CLASSIFICATION	2.2283311468796371E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999103056293804	WITHOUT_CLASSIFICATION	8.969437061962176E-5	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99989778463951	WITHOUT_CLASSIFICATION	1.0221536049009094E-4	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.999895290751345	WITHOUT_CLASSIFICATION	1.0470924865498816E-4	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999304479287824	WITHOUT_CLASSIFICATION	6.95520712176015E-5	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9998563821214892	WITHOUT_CLASSIFICATION	1.4361787851085037E-4	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999320529875816	WITHOUT_CLASSIFICATION	6.794701241848675E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996552502688295	WITHOUT_CLASSIFICATION	3.447497311705268E-4	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999438194011365	WITHOUT_CLASSIFICATION	5.618059886354629E-5	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.999794111779533	WITHOUT_CLASSIFICATION	2.0588822046698675E-4	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9997816226130308	WITHOUT_CLASSIFICATION	2.1837738696914785E-4	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999624745573056	WITHOUT_CLASSIFICATION	3.7525442694450634E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9998338492125168	WITHOUT_CLASSIFICATION	1.6615078748323414E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996588314922713	WITHOUT_CLASSIFICATION	3.411685077287089E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997500767999156	WITHOUT_CLASSIFICATION	2.4992320008439256E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998127906068762	WITHOUT_CLASSIFICATION	1.872093931237974E-4	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9998338492125168	WITHOUT_CLASSIFICATION	1.6615078748323414E-4	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999502157760131	WITHOUT_CLASSIFICATION	4.978422398699794E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9998644433160871	WITHOUT_CLASSIFICATION	1.3555668391287783E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996842843442012	WITHOUT_CLASSIFICATION	3.157156557987362E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996558409495138	WITHOUT_CLASSIFICATION	3.441590504863342E-4	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999459281944095	WITHOUT_CLASSIFICATION	5.4071805590434826E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999896805540727	WITHOUT_CLASSIFICATION	1.031944592729974E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999896805540727	WITHOUT_CLASSIFICATION	1.031944592729974E-4	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9997733141442031	WITHOUT_CLASSIFICATION	2.2668585579688934E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997704551728601	WITHOUT_CLASSIFICATION	2.2954482713983997E-4	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996646372174571	WITHOUT_CLASSIFICATION	3.3536278254288804E-4	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999252816072358	WITHOUT_CLASSIFICATION	7.47183927642259E-5	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999792487745423	WITHOUT_CLASSIFICATION	2.0751225457772492E-5	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999563943533316	WITHOUT_CLASSIFICATION	4.360564666837589E-5	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999820876756162	WITHOUT_CLASSIFICATION	1.7912324383785184E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999969667311386	WITHOUT_CLASSIFICATION	3.033268861397945E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999764244238117	WITHOUT_CLASSIFICATION	2.357557618831261E-5	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9998951117239557	WITHOUT_CLASSIFICATION	1.0488827604422284E-4	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998652373971791	WITHOUT_CLASSIFICATION	1.3476260282082158E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997536287664353	WITHOUT_CLASSIFICATION	2.463712335647358E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999987235469884	WITHOUT_CLASSIFICATION	1.2764530116084322E-5	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9948532945258957	WITHOUT_CLASSIFICATION	0.005146705474104325	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999534347832769	WITHOUT_CLASSIFICATION	4.6565216723034815E-5	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999964068786157	WITHOUT_CLASSIFICATION	3.5931213843088E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999425593693909	WITHOUT_CLASSIFICATION	5.744063060904017E-5	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9998272070681528	WITHOUT_CLASSIFICATION	1.7279293184728316E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9997937985485145	WITHOUT_CLASSIFICATION	2.0620145148560412E-4	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998890619011002	WITHOUT_CLASSIFICATION	1.1093809889981015E-4	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99586503691878	WITHOUT_CLASSIFICATION	0.004134963081219997	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999960285163934	WITHOUT_CLASSIFICATION	3.9714836066079344E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9998583450215816	WITHOUT_CLASSIFICATION	1.4165497841839772E-4	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9997755393741047	WITHOUT_CLASSIFICATION	2.2446062589526005E-4	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999941249492687	WITHOUT_CLASSIFICATION	5.875050731297318E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999397554945695	WITHOUT_CLASSIFICATION	6.0244505430571265E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999302510814644	WITHOUT_CLASSIFICATION	6.974891853557843E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999652084973122	WITHOUT_CLASSIFICATION	3.479150268785852E-5	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9998692141026502	WITHOUT_CLASSIFICATION	1.3078589734985142E-4	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998695769376981	WITHOUT_CLASSIFICATION	1.3042306230198346E-4	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999399181742415	WITHOUT_CLASSIFICATION	6.0081825758510855E-5	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999126002033362	WITHOUT_CLASSIFICATION	8.739979666383288E-5	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999207716871961	WITHOUT_CLASSIFICATION	7.922831280401048E-5	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999074113551656	WITHOUT_CLASSIFICATION	9.258864483439332E-5	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999932178331452	WITHOUT_CLASSIFICATION	6.782166854797811E-5	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999969771542252	WITHOUT_CLASSIFICATION	3.0228457748570897E-6	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999618653836205	WITHOUT_CLASSIFICATION	3.8134616379436414E-5	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9998275876662224	WITHOUT_CLASSIFICATION	1.7241233377756702E-4	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998443713961152	WITHOUT_CLASSIFICATION	1.5562860388488025E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998443643856915	WITHOUT_CLASSIFICATION	1.5563561430855782E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999194924555335	WITHOUT_CLASSIFICATION	8.050754446660152E-5	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999093237953979	WITHOUT_CLASSIFICATION	9.067620460213426E-5	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998571541053225	WITHOUT_CLASSIFICATION	1.428458946775891E-4	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9998705303274166	WITHOUT_CLASSIFICATION	1.2946967258330565E-4	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999893380868818	WITHOUT_CLASSIFICATION	1.0661913118113607E-5	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999555492728252	WITHOUT_CLASSIFICATION	4.445072717487599E-5	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999864847214899	WITHOUT_CLASSIFICATION	1.3515278510064266E-5	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999743888653524	WITHOUT_CLASSIFICATION	2.561113464761794E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999807953880803	WITHOUT_CLASSIFICATION	1.9204611919754665E-5	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999797907275777	WITHOUT_CLASSIFICATION	2.0209272422274974E-5	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999770882891053	WITHOUT_CLASSIFICATION	2.291171089478171E-5	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999983470128435	WITHOUT_CLASSIFICATION	1.6529871564790855E-6	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999799558166526	WITHOUT_CLASSIFICATION	2.004418334737381E-5	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9995393077375602	WITHOUT_CLASSIFICATION	4.606922624398222E-4	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998988307749652	WITHOUT_CLASSIFICATION	1.011692250346984E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.999905562694469	WITHOUT_CLASSIFICATION	9.443730553093637E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999138833742296	WITHOUT_CLASSIFICATION	8.611662577049762E-5	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.999877846065826	WITHOUT_CLASSIFICATION	1.2215393417407353E-4	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.999854823801371	WITHOUT_CLASSIFICATION	1.4517619862889166E-4	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998897424656812	WITHOUT_CLASSIFICATION	1.1025753431876845E-4	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999101592796595	WITHOUT_CLASSIFICATION	8.984072034040121E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9998383475112922	WITHOUT_CLASSIFICATION	1.616524887079243E-4	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999202409633652	WITHOUT_CLASSIFICATION	7.975903663484259E-5	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999203393576477	WITHOUT_CLASSIFICATION	7.966064235230822E-5	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999110755519505	WITHOUT_CLASSIFICATION	8.89244480494843E-5	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999245177789564	WITHOUT_CLASSIFICATION	7.548222104355945E-5	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999835823366965	WITHOUT_CLASSIFICATION	1.641766330343643E-5	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999789391771987	WITHOUT_CLASSIFICATION	2.1060822801268797E-5	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999717798593865	WITHOUT_CLASSIFICATION	2.8220140613601554E-5	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9997573955417648	WITHOUT_CLASSIFICATION	2.4260445823518422E-4	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998334351717941	WITHOUT_CLASSIFICATION	1.6656482820600282E-4	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9998360173592888	WITHOUT_CLASSIFICATION	1.6398264071109233E-4	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999387104817732	WITHOUT_CLASSIFICATION	6.128951822680893E-5	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9998677666277411	WITHOUT_CLASSIFICATION	1.3223337225877675E-4	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9998857447759101	WITHOUT_CLASSIFICATION	1.1425522408983256E-4	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9997535025611887	WITHOUT_CLASSIFICATION	2.4649743881136727E-4	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9997964815051609	WITHOUT_CLASSIFICATION	2.035184948391369E-4	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9998351863537577	WITHOUT_CLASSIFICATION	1.6481364624220432E-4	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9998891235721078	WITHOUT_CLASSIFICATION	1.1087642789213112E-4	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999620057242333	WITHOUT_CLASSIFICATION	3.7994275766685456E-5	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999157686608893	WITHOUT_CLASSIFICATION	8.423133911066056E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9998699161976424	WITHOUT_CLASSIFICATION	1.3008380235763847E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9998699185059503	WITHOUT_CLASSIFICATION	1.3008149404972904E-4	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999617288276108	WITHOUT_CLASSIFICATION	3.8271172389151924E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999551422813013	WITHOUT_CLASSIFICATION	4.48577186986923E-5	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999726513834736	WITHOUT_CLASSIFICATION	2.734861652642169E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999510043463877	WITHOUT_CLASSIFICATION	4.899565361215376E-5	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999379685766651	WITHOUT_CLASSIFICATION	6.203142333494521E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.999935293343426	WITHOUT_CLASSIFICATION	6.470665657396538E-5	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999706886710561	WITHOUT_CLASSIFICATION	2.931132894384658E-5	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999982789116041	WITHOUT_CLASSIFICATION	1.7210883959887673E-6	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9998396389380135	WITHOUT_CLASSIFICATION	1.6036106198654248E-4	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998053826384796	WITHOUT_CLASSIFICATION	1.946173615204258E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998100081970138	WITHOUT_CLASSIFICATION	1.8999180298617056E-4	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9998548053323728	WITHOUT_CLASSIFICATION	1.4519466762726502E-4	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9997942488938432	WITHOUT_CLASSIFICATION	2.057511061569069E-4	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998399447501595	WITHOUT_CLASSIFICATION	1.600552498405182E-4	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9998540315770614	WITHOUT_CLASSIFICATION	1.4596842293861442E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998511049133715	WITHOUT_CLASSIFICATION	1.4889508662849376E-4	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9997561173463663	WITHOUT_CLASSIFICATION	2.4388265363375637E-4	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.999765107248594	WITHOUT_CLASSIFICATION	2.348927514059509E-4	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999771072800315	WITHOUT_CLASSIFICATION	2.2892719968434582E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9998089329616466	WITHOUT_CLASSIFICATION	1.910670383534207E-4	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.999821097877392	WITHOUT_CLASSIFICATION	1.7890212260800894E-4	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999074587666004	WITHOUT_CLASSIFICATION	9.25412333996053E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9998089329616466	WITHOUT_CLASSIFICATION	1.910670383534207E-4	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999045888778432	WITHOUT_CLASSIFICATION	9.541112215683864E-5	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9998877908289219	WITHOUT_CLASSIFICATION	1.1220917107817006E-4	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9997933895031914	WITHOUT_CLASSIFICATION	2.0661049680863885E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9994246331761123	WITHOUT_CLASSIFICATION	5.753668238876109E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9998991720140371	WITHOUT_CLASSIFICATION	1.0082798596283239E-4	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999437052062256	WITHOUT_CLASSIFICATION	5.629479377452157E-5	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998242060104966	WITHOUT_CLASSIFICATION	1.7579398950353205E-4	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9998921334214456	WITHOUT_CLASSIFICATION	1.0786657855446696E-4	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998554574927093	WITHOUT_CLASSIFICATION	1.445425072907311E-4	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998247306590685	WITHOUT_CLASSIFICATION	1.7526934093145248E-4	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999507281230896	WITHOUT_CLASSIFICATION	4.9271876910396866E-5	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999609260320943	WITHOUT_CLASSIFICATION	3.90739679057044E-5	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9803335997519426	WITHOUT_CLASSIFICATION	0.019666400248057478	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999879751964915	WITHOUT_CLASSIFICATION	1.2024803508586222E-5	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999693477412958	WITHOUT_CLASSIFICATION	3.065225870434035E-5	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999201295062145	WITHOUT_CLASSIFICATION	7.987049378555074E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998119810330856	WITHOUT_CLASSIFICATION	1.8801896691453127E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998119810330856	WITHOUT_CLASSIFICATION	1.8801896691453127E-4	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999652832592021	WITHOUT_CLASSIFICATION	3.471674079790412E-5	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9998013514442395	WITHOUT_CLASSIFICATION	1.9864855576039587E-4	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.999862241998638	WITHOUT_CLASSIFICATION	1.3775800136188357E-4	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9997585593601638	WITHOUT_CLASSIFICATION	2.4144063983621886E-4	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999290142868422	WITHOUT_CLASSIFICATION	7.09857131577812E-5	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999508118088245	WITHOUT_CLASSIFICATION	4.918819117558402E-5	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.999836221875055	WITHOUT_CLASSIFICATION	1.637781249449475E-4	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999658147444811	WITHOUT_CLASSIFICATION	3.418525551890442E-5	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9998772349675933	WITHOUT_CLASSIFICATION	1.2276503240660574E-4	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999387903141072	WITHOUT_CLASSIFICATION	6.120968589293517E-5	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999680426867564	WITHOUT_CLASSIFICATION	3.195731324359855E-5	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999891634958608	WITHOUT_CLASSIFICATION	1.0836504139237412E-5	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9998328536678467	WITHOUT_CLASSIFICATION	1.6714633215329116E-4	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999153717713177	WITHOUT_CLASSIFICATION	8.46282286822792E-5	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999848942448093	WITHOUT_CLASSIFICATION	1.5105755190682799E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9997937985485145	WITHOUT_CLASSIFICATION	2.0620145148560412E-4	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.999941958301838	WITHOUT_CLASSIFICATION	5.804169816214745E-5	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999826294040882	WITHOUT_CLASSIFICATION	1.737059591187603E-5	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999045523200545	WITHOUT_CLASSIFICATION	9.544767994556714E-5	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9998042661536396	WITHOUT_CLASSIFICATION	1.9573384636040173E-4	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999329508200541	WITHOUT_CLASSIFICATION	6.704917994586818E-5	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9997520380756364	WITHOUT_CLASSIFICATION	2.479619243635877E-4	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999947826893929	WITHOUT_CLASSIFICATION	5.217310607064547E-6	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999886309625817	WITHOUT_CLASSIFICATION	1.1369037418336183E-5	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999253090456105	WITHOUT_CLASSIFICATION	7.469095438949318E-5	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999320268191703	WITHOUT_CLASSIFICATION	6.797318082981675E-5	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999733007577334	WITHOUT_CLASSIFICATION	2.66992422665362E-5	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999688517786491	WITHOUT_CLASSIFICATION	3.114822135085162E-5	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999834982706851	WITHOUT_CLASSIFICATION	1.6501729314848815E-5	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9997768457566947	WITHOUT_CLASSIFICATION	2.2315424330537483E-4	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999156977993418	WITHOUT_CLASSIFICATION	8.430220065828085E-5	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9998354915294272	WITHOUT_CLASSIFICATION	1.645084705728724E-4	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9959674337109203	WITHOUT_CLASSIFICATION	0.004032566289079657	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998904439385162	WITHOUT_CLASSIFICATION	1.095560614837905E-4	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9998090990786745	WITHOUT_CLASSIFICATION	1.909009213253847E-4	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999723132292463	WITHOUT_CLASSIFICATION	2.7686770753645578E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999172909697022	WITHOUT_CLASSIFICATION	8.270903029792222E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9998110081173823	WITHOUT_CLASSIFICATION	1.889918826176421E-4	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999665152963882	WITHOUT_CLASSIFICATION	3.348470361171881E-5	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999867060334479	WITHOUT_CLASSIFICATION	1.3293966552113492E-5	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.999963221066875	WITHOUT_CLASSIFICATION	3.67789331250743E-5	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999553956045507	WITHOUT_CLASSIFICATION	4.4604395449346014E-5	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999689383848821	WITHOUT_CLASSIFICATION	3.1061615118000114E-5	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999910152390319	WITHOUT_CLASSIFICATION	8.984760968103172E-5	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999808811879989	WITHOUT_CLASSIFICATION	1.911881200115189E-5	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999840200703409	WITHOUT_CLASSIFICATION	1.597992965910928E-5	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99986536302272	WITHOUT_CLASSIFICATION	1.3463697727989757E-4	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998610133784196	WITHOUT_CLASSIFICATION	1.3898662158040614E-4	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998913656841131	WITHOUT_CLASSIFICATION	1.0863431588686929E-4	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999871848162188	WITHOUT_CLASSIFICATION	1.2815183781086947E-5	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999539553551942	WITHOUT_CLASSIFICATION	4.604464480580426E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997536287664353	WITHOUT_CLASSIFICATION	2.463712335647358E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997536287664353	WITHOUT_CLASSIFICATION	2.463712335647358E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999104706422844	WITHOUT_CLASSIFICATION	8.952935771558785E-5	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999948457017047	WITHOUT_CLASSIFICATION	5.1542982953164305E-6	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9998714990302804	WITHOUT_CLASSIFICATION	1.2850096971955117E-4	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998400053191542	WITHOUT_CLASSIFICATION	1.5999468084574046E-4	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9998714990302804	WITHOUT_CLASSIFICATION	1.2850096971955117E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998508105386978	WITHOUT_CLASSIFICATION	1.491894613021323E-4	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999280794556472	WITHOUT_CLASSIFICATION	7.192054435276817E-5	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9998466578705051	WITHOUT_CLASSIFICATION	1.5334212949492186E-4	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999833868548641	WITHOUT_CLASSIFICATION	1.6613145135909582E-4	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998841143103618	WITHOUT_CLASSIFICATION	1.1588568963814545E-4	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999281446563435	WITHOUT_CLASSIFICATION	7.185534365642205E-5	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9998998094232232	WITHOUT_CLASSIFICATION	1.001905767767548E-4	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9998568322349511	WITHOUT_CLASSIFICATION	1.431677650488161E-4	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999353053792299	WITHOUT_CLASSIFICATION	6.469462077017778E-5	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999368168564818	WITHOUT_CLASSIFICATION	6.318314351817551E-5	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9997620576800349	WITHOUT_CLASSIFICATION	2.379423199649697E-4	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9998419756343674	WITHOUT_CLASSIFICATION	1.5802436563263725E-4	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9998220898304259	WITHOUT_CLASSIFICATION	1.779101695742421E-4	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999559203515338	WITHOUT_CLASSIFICATION	4.407964846617442E-5	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9997939426031309	WITHOUT_CLASSIFICATION	2.060573968690223E-4	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999482871616664	WITHOUT_CLASSIFICATION	5.171283833370417E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.999928229787789	WITHOUT_CLASSIFICATION	7.17702122109845E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.999928229787789	WITHOUT_CLASSIFICATION	7.17702122109845E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9998154365634483	WITHOUT_CLASSIFICATION	1.8456343655169172E-4	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999407046985275	WITHOUT_CLASSIFICATION	5.929530147238284E-5	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999791039921495	WITHOUT_CLASSIFICATION	2.089600785046972E-5	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999769734429638	WITHOUT_CLASSIFICATION	2.3026557036169963E-5	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999790685235126	WITHOUT_CLASSIFICATION	2.0931476487378586E-5	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999975802535327	WITHOUT_CLASSIFICATION	2.4197464672955582E-5	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999183770799014	WITHOUT_CLASSIFICATION	8.162292009863773E-5	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998727054177485	WITHOUT_CLASSIFICATION	1.2729458225148226E-4	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.999906998176696	WITHOUT_CLASSIFICATION	9.300182330398358E-5	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999534404632366	WITHOUT_CLASSIFICATION	4.655953676327933E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999889695872289	WITHOUT_CLASSIFICATION	1.1030412771101947E-4	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999882335734089	WITHOUT_CLASSIFICATION	1.1766426591098579E-5	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999055528592089	WITHOUT_CLASSIFICATION	9.444714079101846E-5	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998616980618658	WITHOUT_CLASSIFICATION	1.3830193813418217E-4	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999923625872078	WITHOUT_CLASSIFICATION	7.637412792215298E-5	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999841181122693	WITHOUT_CLASSIFICATION	1.5881887730692442E-5	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999374992144463	WITHOUT_CLASSIFICATION	6.250078555371464E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9998552296289139	WITHOUT_CLASSIFICATION	1.4477037108614183E-4	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.99990568981018	WITHOUT_CLASSIFICATION	9.431018982000762E-5	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999252407524937	WITHOUT_CLASSIFICATION	7.475924750630405E-5	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999039997017614	WITHOUT_CLASSIFICATION	9.600029823864976E-5	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9998869703826526	WITHOUT_CLASSIFICATION	1.1302961734732382E-4	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999082661551628	WITHOUT_CLASSIFICATION	9.173384483719303E-5	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999091481344448	WITHOUT_CLASSIFICATION	9.085186555525329E-5	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9998679562056374	WITHOUT_CLASSIFICATION	1.320437943627024E-4	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999748817758126	WITHOUT_CLASSIFICATION	2.5118224187462854E-5	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9998780220017512	WITHOUT_CLASSIFICATION	1.2197799824886607E-4	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999309728695119	WITHOUT_CLASSIFICATION	6.902713048805432E-5	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999848793013256	WITHOUT_CLASSIFICATION	1.5120698674402707E-4	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999838795930531	WITHOUT_CLASSIFICATION	1.6120406946800007E-5	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999344588264291	WITHOUT_CLASSIFICATION	6.554117357096999E-5	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998850741218267	WITHOUT_CLASSIFICATION	1.1492587817326137E-4	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999768942116335	WITHOUT_CLASSIFICATION	2.3105788366444233E-5	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998762115563056	WITHOUT_CLASSIFICATION	1.2378844369445336E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.999991396760577	WITHOUT_CLASSIFICATION	8.603239422923274E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999622223686659	WITHOUT_CLASSIFICATION	3.777763133411299E-5	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999625295129155	WITHOUT_CLASSIFICATION	3.747048708440867E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9998973535329009	WITHOUT_CLASSIFICATION	1.0264646709902898E-4	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999107977936963	WITHOUT_CLASSIFICATION	8.920220630372873E-5	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9998712938425771	WITHOUT_CLASSIFICATION	1.2870615742295466E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998439542159786	WITHOUT_CLASSIFICATION	1.5604578402144732E-4	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9997607625874988	WITHOUT_CLASSIFICATION	2.3923741250112226E-4	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9958139440873875	WITHOUT_CLASSIFICATION	0.004186055912612438	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999750944341111	WITHOUT_CLASSIFICATION	2.490556588889912E-5	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999235621990974	WITHOUT_CLASSIFICATION	7.643780090262859E-5	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.995654245707298	WITHOUT_CLASSIFICATION	0.004345754292701918	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999915112999382	WITHOUT_CLASSIFICATION	8.488700061747847E-6	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999095657735019	WITHOUT_CLASSIFICATION	9.043422649813231E-5	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999715086467678	WITHOUT_CLASSIFICATION	2.849135323219181E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998470803030296	WITHOUT_CLASSIFICATION	1.529196969703562E-4	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999117132733235	WITHOUT_CLASSIFICATION	8.828672667647952E-5	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999966041539099	WITHOUT_CLASSIFICATION	3.3958460901102607E-6	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999187558321276	WITHOUT_CLASSIFICATION	8.124416787239597E-5	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9997650840482656	WITHOUT_CLASSIFICATION	2.3491595173449773E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9998585353994739	WITHOUT_CLASSIFICATION	1.414646005260174E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9998585353994739	WITHOUT_CLASSIFICATION	1.414646005260174E-4	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999896608595152	WITHOUT_CLASSIFICATION	1.0339140484770712E-5	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9998997930523027	WITHOUT_CLASSIFICATION	1.0020694769731095E-4	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9998813513307109	WITHOUT_CLASSIFICATION	1.1864866928907618E-4	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9998758898670299	WITHOUT_CLASSIFICATION	1.24110132970035E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999017517285647	WITHOUT_CLASSIFICATION	9.824827143533729E-5	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999584601596465	WITHOUT_CLASSIFICATION	4.1539840353468923E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999599763643212	WITHOUT_CLASSIFICATION	4.002363567879054E-5	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999511249848236	WITHOUT_CLASSIFICATION	4.887501517647718E-5	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998907175208968	WITHOUT_CLASSIFICATION	1.0928247910320711E-4	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999779252777771	WITHOUT_CLASSIFICATION	2.2074722222879235E-5	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999500380224707	WITHOUT_CLASSIFICATION	4.996197752939007E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998052637450112	WITHOUT_CLASSIFICATION	1.9473625498878794E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999951145885817	WITHOUT_CLASSIFICATION	4.885411418293197E-5	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999826623892477	WITHOUT_CLASSIFICATION	1.7337610752309455E-5	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999932299460138	WITHOUT_CLASSIFICATION	6.770053986217497E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999896416158257	WITHOUT_CLASSIFICATION	1.0358384174282877E-5	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9997604631178255	WITHOUT_CLASSIFICATION	2.3953688217456885E-4	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999461423103917	WITHOUT_CLASSIFICATION	5.385768960836277E-5	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9997807240263861	WITHOUT_CLASSIFICATION	2.192759736138255E-4	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999838041206458	WITHOUT_CLASSIFICATION	1.619587935421263E-5	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9998020325411178	WITHOUT_CLASSIFICATION	1.979674588823513E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999193118753998	WITHOUT_CLASSIFICATION	8.06881246002214E-5	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999928916336353	WITHOUT_CLASSIFICATION	7.10836636470573E-6	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999908953128795	WITHOUT_CLASSIFICATION	9.104687120412524E-6	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999235970884272	WITHOUT_CLASSIFICATION	7.640291157283014E-5	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997553567980363	WITHOUT_CLASSIFICATION	2.446432019637478E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9998846527316577	WITHOUT_CLASSIFICATION	1.1534726834228224E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999651472610799	WITHOUT_CLASSIFICATION	3.485273892018506E-5	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999989842285574	WITHOUT_CLASSIFICATION	1.015771442564554E-6	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9959714635102503	WITHOUT_CLASSIFICATION	0.0040285364897496585	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9997649016897271	WITHOUT_CLASSIFICATION	2.3509831027280643E-4	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999979228393807	WITHOUT_CLASSIFICATION	2.0771606192845396E-5	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999498050906093	WITHOUT_CLASSIFICATION	5.0194909390686446E-5	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999237500792647	WITHOUT_CLASSIFICATION	7.624992073525931E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999759171008197	WITHOUT_CLASSIFICATION	2.408289918034039E-5	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9998655126689874	WITHOUT_CLASSIFICATION	1.3448733101260733E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9997649016897271	WITHOUT_CLASSIFICATION	2.3509831027280643E-4	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999725180760272	WITHOUT_CLASSIFICATION	2.748192397284621E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999753833505971	WITHOUT_CLASSIFICATION	2.4616649402920442E-5	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999118632666039	WITHOUT_CLASSIFICATION	8.813673339621616E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9998567426961643	WITHOUT_CLASSIFICATION	1.432573038356468E-4	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999889695872289	WITHOUT_CLASSIFICATION	1.1030412771101947E-4	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9998782996677248	WITHOUT_CLASSIFICATION	1.2170033227526327E-4	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9998809622948164	WITHOUT_CLASSIFICATION	1.190377051836891E-4	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999767691032124	WITHOUT_CLASSIFICATION	2.3230896787479454E-5	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999370909317665	WITHOUT_CLASSIFICATION	6.290906823351564E-5	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999224480410808	WITHOUT_CLASSIFICATION	7.755195891918898E-5	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999114583724894	WITHOUT_CLASSIFICATION	8.854162751064842E-5	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999304501467625	WITHOUT_CLASSIFICATION	6.954985323746799E-5	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999877736001048	WITHOUT_CLASSIFICATION	1.2226399895251771E-5	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998089653775659	WITHOUT_CLASSIFICATION	1.9103462243410542E-4	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999170956539184	WITHOUT_CLASSIFICATION	8.290434608156066E-5	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999095296137112	WITHOUT_CLASSIFICATION	9.047038628884422E-5	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999574519465717	WITHOUT_CLASSIFICATION	4.254805342836044E-5	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9998130943772691	WITHOUT_CLASSIFICATION	1.869056227309028E-4	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999016907699394	WITHOUT_CLASSIFICATION	9.830923006063345E-5	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998562468575911	WITHOUT_CLASSIFICATION	1.4375314240890795E-4	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999532940461845	WITHOUT_CLASSIFICATION	4.6705953815506714E-5	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999536827219415	WITHOUT_CLASSIFICATION	4.631727805844929E-5	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999540219042238	WITHOUT_CLASSIFICATION	4.5978095776287365E-5	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9998331006038826	WITHOUT_CLASSIFICATION	1.668993961173545E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9998261694192528	WITHOUT_CLASSIFICATION	1.7383058074715358E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999194492931782	WITHOUT_CLASSIFICATION	8.055070682183333E-5	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999436990776494	WITHOUT_CLASSIFICATION	5.630092235065523E-5	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999687809738279	WITHOUT_CLASSIFICATION	3.121902617201936E-5	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9998818338819672	WITHOUT_CLASSIFICATION	1.1816611803277728E-4	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9996910456157102	WITHOUT_CLASSIFICATION	3.089543842898679E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999864611782553	WITHOUT_CLASSIFICATION	1.3538821744723577E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998580006833393	WITHOUT_CLASSIFICATION	1.419993166606378E-4	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997640805569453	WITHOUT_CLASSIFICATION	2.3591944305465255E-4	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999490714949566	WITHOUT_CLASSIFICATION	5.0928505043291494E-5	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.999840418456609	WITHOUT_CLASSIFICATION	1.5958154339113396E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.999991609624525	WITHOUT_CLASSIFICATION	8.390375475055295E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998075350001625	WITHOUT_CLASSIFICATION	1.9246499983748997E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998075350001625	WITHOUT_CLASSIFICATION	1.9246499983748997E-4	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999954537825495	WITHOUT_CLASSIFICATION	4.546217450496602E-6	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9998398701052873	WITHOUT_CLASSIFICATION	1.6012989471269958E-4	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999087447140023	WITHOUT_CLASSIFICATION	9.125528599777786E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999555461621156	WITHOUT_CLASSIFICATION	4.4453837884300715E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9998223361573231	WITHOUT_CLASSIFICATION	1.776638426768271E-4	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9998222495739537	WITHOUT_CLASSIFICATION	1.7775042604634E-4	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999142095162538	WITHOUT_CLASSIFICATION	8.57904837462499E-5	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999168042011084	WITHOUT_CLASSIFICATION	8.319579889162044E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9998522300763978	WITHOUT_CLASSIFICATION	1.4776992360216712E-4	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999853136551452	WITHOUT_CLASSIFICATION	1.4686344854824179E-5	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9998705515935987	WITHOUT_CLASSIFICATION	1.29448406401347E-4	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999664739892772	WITHOUT_CLASSIFICATION	3.352601072277915E-5	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999390612157883	WITHOUT_CLASSIFICATION	6.093878421172455E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998075350001625	WITHOUT_CLASSIFICATION	1.9246499983748997E-4	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9998560489658378	WITHOUT_CLASSIFICATION	1.4395103416224206E-4	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9998160882228201	WITHOUT_CLASSIFICATION	1.8391177717985181E-4	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999260909206689	WITHOUT_CLASSIFICATION	7.390907933120172E-5	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998892307463773	WITHOUT_CLASSIFICATION	1.1076925362274619E-4	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999655764574978	WITHOUT_CLASSIFICATION	3.442354250217246E-5	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998828695329718	WITHOUT_CLASSIFICATION	1.1713046702829655E-4	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999928668715254	WITHOUT_CLASSIFICATION	7.133128474607012E-6	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999897988536432	WITHOUT_CLASSIFICATION	1.02011463568023E-4	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999693037017189	WITHOUT_CLASSIFICATION	3.0696298281074345E-5	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999110556398354	WITHOUT_CLASSIFICATION	8.894436016453044E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999927239874492	WITHOUT_CLASSIFICATION	7.276012550804718E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998580006833393	WITHOUT_CLASSIFICATION	1.419993166606378E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998075350001625	WITHOUT_CLASSIFICATION	1.9246499983748997E-4	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998542335892311	WITHOUT_CLASSIFICATION	1.4576641076886817E-4	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999649920623881	WITHOUT_CLASSIFICATION	3.500793761192809E-5	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9962180561854888	WITHOUT_CLASSIFICATION	0.003781943814511336	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9998686172023018	WITHOUT_CLASSIFICATION	1.313827976981717E-4	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999659411686466	WITHOUT_CLASSIFICATION	3.4058831353516666E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999196913953798	WITHOUT_CLASSIFICATION	8.03086046201639E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998829466991731	WITHOUT_CLASSIFICATION	1.1705330082682258E-4	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999693585580819	WITHOUT_CLASSIFICATION	3.064144191822282E-5	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999491303159209	WITHOUT_CLASSIFICATION	5.086968407906624E-5	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999124233313077	WITHOUT_CLASSIFICATION	8.757666869232917E-5	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999491699064451	WITHOUT_CLASSIFICATION	5.0830093554874635E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999658319416057	WITHOUT_CLASSIFICATION	3.4168058394349566E-5	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999616033529174	WITHOUT_CLASSIFICATION	3.839664708249407E-5	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999825903420964	WITHOUT_CLASSIFICATION	1.740965790361045E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998508105386978	WITHOUT_CLASSIFICATION	1.491894613021323E-4	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999779649512005	WITHOUT_CLASSIFICATION	2.2035048799482808E-5	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999757349202617	WITHOUT_CLASSIFICATION	2.4265079738296182E-5	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999503249042696	WITHOUT_CLASSIFICATION	4.967509573032828E-5	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9997942420614006	WITHOUT_CLASSIFICATION	2.0575793859959723E-4	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999923659522911	WITHOUT_CLASSIFICATION	7.6340477088632E-6	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998392995645267	WITHOUT_CLASSIFICATION	1.6070043547341102E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998392995645267	WITHOUT_CLASSIFICATION	1.6070043547341102E-4	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999361448919483	WITHOUT_CLASSIFICATION	6.385510805165422E-5	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999591328126112	WITHOUT_CLASSIFICATION	4.0867187388774894E-5	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999515331903764	WITHOUT_CLASSIFICATION	4.846680962353575E-5	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999605169165934	WITHOUT_CLASSIFICATION	3.9483083406489534E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9998720784280738	WITHOUT_CLASSIFICATION	1.279215719260955E-4	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9998708837186269	WITHOUT_CLASSIFICATION	1.2911628137309442E-4	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9998098177925081	WITHOUT_CLASSIFICATION	1.9018220749190834E-4	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999197428667738	WITHOUT_CLASSIFICATION	8.025713322624843E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999197428667738	WITHOUT_CLASSIFICATION	8.025713322624843E-5	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9998275269336008	WITHOUT_CLASSIFICATION	1.724730663991011E-4	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9998620670011421	WITHOUT_CLASSIFICATION	1.379329988579081E-4	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999393252414581	WITHOUT_CLASSIFICATION	6.067475854184038E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999096324237355	WITHOUT_CLASSIFICATION	9.036757626447911E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999096324237355	WITHOUT_CLASSIFICATION	9.036757626447911E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999096324237355	WITHOUT_CLASSIFICATION	9.036757626447911E-5	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999276419496884	WITHOUT_CLASSIFICATION	7.235805031160166E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999386494783556	WITHOUT_CLASSIFICATION	6.135052164432054E-5	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.999703094214862	WITHOUT_CLASSIFICATION	2.9690578513799637E-4	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.999850748859242	WITHOUT_CLASSIFICATION	1.492511407579988E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999496664248012	WITHOUT_CLASSIFICATION	5.033357519880665E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998075350001625	WITHOUT_CLASSIFICATION	1.9246499983748997E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998075350001625	WITHOUT_CLASSIFICATION	1.9246499983748997E-4	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999529228617468	WITHOUT_CLASSIFICATION	4.7077138253318993E-5	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.999989251732767	WITHOUT_CLASSIFICATION	1.0748267232910079E-5	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9998713953666397	WITHOUT_CLASSIFICATION	1.2860463336033127E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999647078321384	WITHOUT_CLASSIFICATION	3.529216786159446E-5	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9998130134865132	WITHOUT_CLASSIFICATION	1.8698651348680558E-4	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999101759975271	WITHOUT_CLASSIFICATION	8.982400247292979E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.999883799943747	WITHOUT_CLASSIFICATION	1.1620005625309335E-4	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999043005383786	WITHOUT_CLASSIFICATION	9.569946162143528E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999655596491795	WITHOUT_CLASSIFICATION	3.444035082046338E-5	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9998895969227101	WITHOUT_CLASSIFICATION	1.1040307728994668E-4	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999555141326348	WITHOUT_CLASSIFICATION	4.448586736506859E-5	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9998036744660402	WITHOUT_CLASSIFICATION	1.9632553395977317E-4	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9998036744660402	WITHOUT_CLASSIFICATION	1.9632553395977317E-4	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9998036744660402	WITHOUT_CLASSIFICATION	1.9632553395977317E-4	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9998036744660402	WITHOUT_CLASSIFICATION	1.9632553395977317E-4	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9998036744660402	WITHOUT_CLASSIFICATION	1.9632553395977317E-4	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998241146872745	WITHOUT_CLASSIFICATION	1.7588531272545664E-4	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998241146872745	WITHOUT_CLASSIFICATION	1.7588531272545664E-4	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998245239472445	WITHOUT_CLASSIFICATION	1.7547605275540872E-4	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998241146872745	WITHOUT_CLASSIFICATION	1.7588531272545664E-4	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999475374435977	WITHOUT_CLASSIFICATION	5.2462556402387157E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998392995645267	WITHOUT_CLASSIFICATION	1.6070043547341102E-4	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9998868956594358	WITHOUT_CLASSIFICATION	1.1310434056422506E-4	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998241146872745	WITHOUT_CLASSIFICATION	1.7588531272545664E-4	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9998533910105586	WITHOUT_CLASSIFICATION	1.4660898944143162E-4	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9998730621824453	WITHOUT_CLASSIFICATION	1.2693781755459714E-4	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998042256300627	WITHOUT_CLASSIFICATION	1.9577436993734485E-4	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9998041140775022	WITHOUT_CLASSIFICATION	1.9588592249782707E-4	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999967009519571	WITHOUT_CLASSIFICATION	3.299048042910166E-5	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9998951765840597	WITHOUT_CLASSIFICATION	1.0482341594028959E-4	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999765078520071	WITHOUT_CLASSIFICATION	2.3492147992863625E-5	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999189476322301	WITHOUT_CLASSIFICATION	8.105236776990169E-5	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999247647972994	WITHOUT_CLASSIFICATION	7.523520270057905E-5	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999908956764023	WITHOUT_CLASSIFICATION	9.104323597677793E-6	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999650292153175	WITHOUT_CLASSIFICATION	3.497078468261293E-5	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9969859571939074	WITHOUT_CLASSIFICATION	0.0030140428060925913	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9995757997524375	WITHOUT_CLASSIFICATION	4.242002475624945E-4	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9998506438466999	WITHOUT_CLASSIFICATION	1.49356153300153E-4	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999311249396746	WITHOUT_CLASSIFICATION	6.887506032536201E-5	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.999919519320412	WITHOUT_CLASSIFICATION	8.048067958801954E-5	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9996712067563165	WITHOUT_CLASSIFICATION	3.287932436835526E-4	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999830393449849	WITHOUT_CLASSIFICATION	1.6960655015096804E-4	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999830393449849	WITHOUT_CLASSIFICATION	1.6960655015096804E-4	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999454921670837	WITHOUT_CLASSIFICATION	5.450783291618825E-5	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.999978210702661	WITHOUT_CLASSIFICATION	2.1789297338912543E-5	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999521295048408	WITHOUT_CLASSIFICATION	4.787049515912941E-5	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998419309213243	WITHOUT_CLASSIFICATION	1.58069078675676E-4	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9998533836204749	WITHOUT_CLASSIFICATION	1.4661637952497356E-4	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999418915195071	WITHOUT_CLASSIFICATION	5.810848049289708E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999677846163596	WITHOUT_CLASSIFICATION	3.2215383640404237E-4	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999477117362466	WITHOUT_CLASSIFICATION	5.2288263753435696E-5	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999315216656339	WITHOUT_CLASSIFICATION	6.847833436610504E-5	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999270958753157	WITHOUT_CLASSIFICATION	7.290412468429096E-5	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9998417030577265	WITHOUT_CLASSIFICATION	1.5829694227362107E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999658319416057	WITHOUT_CLASSIFICATION	3.4168058394349566E-5	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999844472695318	WITHOUT_CLASSIFICATION	1.5552730468165494E-5	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999818019762775	WITHOUT_CLASSIFICATION	1.819802372253621E-5	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999503957604249	WITHOUT_CLASSIFICATION	4.960423957506118E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999718901898436	WITHOUT_CLASSIFICATION	2.8109810156386962E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999576330706065	WITHOUT_CLASSIFICATION	4.236692939356449E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999576330706065	WITHOUT_CLASSIFICATION	4.236692939356449E-5	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999241461242072	WITHOUT_CLASSIFICATION	7.58538757927818E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999972048098655	WITHOUT_CLASSIFICATION	2.7951901344163924E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999513550284435	WITHOUT_CLASSIFICATION	4.8644971556630324E-5	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999767863366985	WITHOUT_CLASSIFICATION	2.321366330154655E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999595019569983	WITHOUT_CLASSIFICATION	4.04980430016795E-5	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999290354723718	WITHOUT_CLASSIFICATION	7.096452762817334E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9998374280990344	WITHOUT_CLASSIFICATION	1.625719009656357E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999726207923332	WITHOUT_CLASSIFICATION	2.7379207666853623E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998930330794383	WITHOUT_CLASSIFICATION	1.0696692056157218E-4	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999353711994402	WITHOUT_CLASSIFICATION	6.46288005598065E-5	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999910604339471	WITHOUT_CLASSIFICATION	8.939566052903938E-6	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999726207923332	WITHOUT_CLASSIFICATION	2.7379207666853623E-5	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999674340141694	WITHOUT_CLASSIFICATION	3.256598583057439E-5	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999070803346214	WITHOUT_CLASSIFICATION	9.291966537867608E-5	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999535927938967	WITHOUT_CLASSIFICATION	4.640720610325521E-5	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9998349227373153	WITHOUT_CLASSIFICATION	1.6507726268464326E-4	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999879889773995	WITHOUT_CLASSIFICATION	1.2011022600423509E-5	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999717858103386	WITHOUT_CLASSIFICATION	2.82141896614857E-5	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998548959488355	WITHOUT_CLASSIFICATION	1.4510405116457292E-4	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999699803112304	WITHOUT_CLASSIFICATION	3.0019688769599523E-5	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999986645047232	WITHOUT_CLASSIFICATION	1.3354952768055938E-5	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999581489573187	WITHOUT_CLASSIFICATION	4.1851042681289814E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998644269494132	WITHOUT_CLASSIFICATION	1.355730505868183E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999374782582702	WITHOUT_CLASSIFICATION	6.252174172987398E-5	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998710601245144	WITHOUT_CLASSIFICATION	1.2893987548558584E-4	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999212047767411	WITHOUT_CLASSIFICATION	7.87952232589565E-5	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9997731091014039	WITHOUT_CLASSIFICATION	2.2689089859606013E-4	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999913564540822	WITHOUT_CLASSIFICATION	8.643545917736088E-6	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999192092045097	WITHOUT_CLASSIFICATION	8.079079549032374E-5	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.999771418378279	WITHOUT_CLASSIFICATION	2.2858162172095046E-4	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999771418378279	WITHOUT_CLASSIFICATION	2.2858162172095046E-4	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998511756744112	WITHOUT_CLASSIFICATION	1.4882432558886976E-4	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999545069173958	WITHOUT_CLASSIFICATION	4.549308260424388E-5	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9998301449911986	WITHOUT_CLASSIFICATION	1.698550088015043E-4	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998578331567521	WITHOUT_CLASSIFICATION	1.4216684324778908E-4	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999133936759246	WITHOUT_CLASSIFICATION	8.660632407545091E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999667200444304	WITHOUT_CLASSIFICATION	3.327995556962771E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999834648822977	WITHOUT_CLASSIFICATION	1.6535117702270267E-5	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999810644071931	WITHOUT_CLASSIFICATION	1.8935592806918656E-5	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999413739555352	WITHOUT_CLASSIFICATION	5.862604446472468E-5	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999736678082694	WITHOUT_CLASSIFICATION	2.6332191730729795E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999988358965395	WITHOUT_CLASSIFICATION	1.1641034605124929E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999392133899958	WITHOUT_CLASSIFICATION	6.0786610004201106E-5	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999149157191556	WITHOUT_CLASSIFICATION	8.50842808444203E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999739911717791	WITHOUT_CLASSIFICATION	2.6008828220860823E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998783549868767	WITHOUT_CLASSIFICATION	1.2164501312323006E-4	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.999978132332895	WITHOUT_CLASSIFICATION	2.1867667104993993E-5	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999924499109973	WITHOUT_CLASSIFICATION	7.550089002714913E-6	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999698980637084	WITHOUT_CLASSIFICATION	3.0101936291667128E-5	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999947087713398	WITHOUT_CLASSIFICATION	5.291228660196441E-5	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999281548511588	WITHOUT_CLASSIFICATION	7.184514884116833E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999933145725415	WITHOUT_CLASSIFICATION	6.685427458575484E-6	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999804230914903	WITHOUT_CLASSIFICATION	1.9576908509793428E-5	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999358978137619	WITHOUT_CLASSIFICATION	6.410218623809622E-5	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999937731014594	WITHOUT_CLASSIFICATION	6.226898540522186E-6	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999596776408923	WITHOUT_CLASSIFICATION	4.032235910763015E-5	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999094115182494	WITHOUT_CLASSIFICATION	9.058848175063832E-5	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999820343916667	WITHOUT_CLASSIFICATION	1.7965608333279246E-5	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999459580495729	WITHOUT_CLASSIFICATION	5.404195042701242E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999510537988875	WITHOUT_CLASSIFICATION	4.894620111256375E-5	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999263637573198	WITHOUT_CLASSIFICATION	7.363624268016623E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998983490031957	WITHOUT_CLASSIFICATION	1.016509968042708E-4	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9998792204654385	WITHOUT_CLASSIFICATION	1.20779534561421E-4	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999758642469372	WITHOUT_CLASSIFICATION	2.4135753062769842E-5	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999719679344774	WITHOUT_CLASSIFICATION	2.803206552262123E-5	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999914708828325	WITHOUT_CLASSIFICATION	8.529117167441589E-6	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999069345579608	WITHOUT_CLASSIFICATION	9.306544203918258E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999442523860826	WITHOUT_CLASSIFICATION	5.5747613917279324E-5	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999965597340332	WITHOUT_CLASSIFICATION	3.440265966811302E-5	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999451318025226	WITHOUT_CLASSIFICATION	5.486819747745021E-5	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999286507037733	WITHOUT_CLASSIFICATION	7.134929622659489E-5	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999253320556787	WITHOUT_CLASSIFICATION	7.466794432132603E-5	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999526589022015	WITHOUT_CLASSIFICATION	4.734109779847235E-5	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9998945393717261	WITHOUT_CLASSIFICATION	1.0546062827393613E-4	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999729603036008	WITHOUT_CLASSIFICATION	2.703969639926816E-5	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999175361639835	WITHOUT_CLASSIFICATION	8.246383601651323E-5	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999500054947382	WITHOUT_CLASSIFICATION	4.9994505261757546E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998983490031957	WITHOUT_CLASSIFICATION	1.016509968042708E-4	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998632950443176	WITHOUT_CLASSIFICATION	1.3670495568236885E-4	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9997735237223653	WITHOUT_CLASSIFICATION	2.2647627763481776E-4	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999680728820431	WITHOUT_CLASSIFICATION	3.192711795686117E-5	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999828581325453	WITHOUT_CLASSIFICATION	1.714186745468202E-5	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9997697228378294	WITHOUT_CLASSIFICATION	2.3027716217056054E-4	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999486467245413	WITHOUT_CLASSIFICATION	5.135327545858792E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998930330794383	WITHOUT_CLASSIFICATION	1.0696692056157218E-4	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999942918405934	WITHOUT_CLASSIFICATION	5.708159406567339E-6	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998783549868767	WITHOUT_CLASSIFICATION	1.2164501312323006E-4	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9998142577663534	WITHOUT_CLASSIFICATION	1.857422336467309E-4	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999851000093577	WITHOUT_CLASSIFICATION	1.4899990642294652E-4	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999320878667881	WITHOUT_CLASSIFICATION	6.791213321190044E-5	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999322359531617	WITHOUT_CLASSIFICATION	6.776404683822167E-5	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9998561102838086	WITHOUT_CLASSIFICATION	1.4388971619134968E-4	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999468880298352	WITHOUT_CLASSIFICATION	5.311197016469963E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999327174752902	WITHOUT_CLASSIFICATION	6.728252470972884E-5	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999288264354939	WITHOUT_CLASSIFICATION	7.117356450616027E-5	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999693873012603	WITHOUT_CLASSIFICATION	3.061269873973353E-5	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999515568128698	WITHOUT_CLASSIFICATION	4.84431871300891E-5	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999320205387958	WITHOUT_CLASSIFICATION	6.797946120415242E-5	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999788861004658	WITHOUT_CLASSIFICATION	2.111389953424424E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999891636788727	WITHOUT_CLASSIFICATION	1.0836321127303614E-4	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999891636788727	WITHOUT_CLASSIFICATION	1.0836321127303614E-4	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999373501475929	WITHOUT_CLASSIFICATION	6.264985240714418E-5	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999433975865829	WITHOUT_CLASSIFICATION	5.66024134170939E-5	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999971480054257	WITHOUT_CLASSIFICATION	2.8519945743085126E-5	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999943435417591	WITHOUT_CLASSIFICATION	5.656458240868427E-6	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999895576846887	WITHOUT_CLASSIFICATION	1.0442315311280142E-5	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999504878718815	WITHOUT_CLASSIFICATION	4.95121281185497E-5	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999929865130649	WITHOUT_CLASSIFICATION	7.013486935082753E-6	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999733306943763	WITHOUT_CLASSIFICATION	2.6669305623655268E-5	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999571406997335	WITHOUT_CLASSIFICATION	4.2859300266559064E-5	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998680555873679	WITHOUT_CLASSIFICATION	1.3194441263206664E-4	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9998264319976248	WITHOUT_CLASSIFICATION	1.735680023751399E-4	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999295468156494	WITHOUT_CLASSIFICATION	7.045318435063159E-5	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9998938038815572	WITHOUT_CLASSIFICATION	1.0619611844277384E-4	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999974733543278	WITHOUT_CLASSIFICATION	2.5266456722756632E-6	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998432592668033	WITHOUT_CLASSIFICATION	1.5674073319667356E-4	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999072363413863	WITHOUT_CLASSIFICATION	9.276365861366447E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998928498680462	WITHOUT_CLASSIFICATION	1.0715013195376367E-4	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999941233264834	WITHOUT_CLASSIFICATION	5.876673516589135E-6	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999964840161087	WITHOUT_CLASSIFICATION	3.515983891303227E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999896805540727	WITHOUT_CLASSIFICATION	1.031944592729974E-4	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999760654090502	WITHOUT_CLASSIFICATION	2.3934590949820184E-5	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999762311051401	WITHOUT_CLASSIFICATION	2.3768894859923632E-5	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999843770114075	WITHOUT_CLASSIFICATION	1.562298859248035E-5	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999440244808643	WITHOUT_CLASSIFICATION	5.5975519135640595E-5	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9997553724683323	WITHOUT_CLASSIFICATION	2.446275316676247E-4	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999016119942634	WITHOUT_CLASSIFICATION	9.83880057366034E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999896805540727	WITHOUT_CLASSIFICATION	1.031944592729974E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999896805540727	WITHOUT_CLASSIFICATION	1.031944592729974E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999905854278277	WITHOUT_CLASSIFICATION	9.414572172293822E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999762966218099	WITHOUT_CLASSIFICATION	2.3703378190078517E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999101821460953	WITHOUT_CLASSIFICATION	8.981785390470009E-5	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.99990810565869	WITHOUT_CLASSIFICATION	9.189434131003164E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9998448263792341	WITHOUT_CLASSIFICATION	1.551736207658367E-4	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999827454685318	WITHOUT_CLASSIFICATION	1.7254531468093138E-5	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9984764679318848	WITHOUT_CLASSIFICATION	0.001523532068115163	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9998622224628305	WITHOUT_CLASSIFICATION	1.377775371693836E-4	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999457113960317	WITHOUT_CLASSIFICATION	5.428860396823141E-5	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9998482728610464	WITHOUT_CLASSIFICATION	1.5172713895355718E-4	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999381338878244	WITHOUT_CLASSIFICATION	6.186611217567877E-5	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999409597882593	WITHOUT_CLASSIFICATION	5.904021174070142E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999033897199145	WITHOUT_CLASSIFICATION	9.661028008550118E-5	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999582366063916	WITHOUT_CLASSIFICATION	4.1763393608398625E-4	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999907505964155	WITHOUT_CLASSIFICATION	9.249403584480323E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998091593632104	WITHOUT_CLASSIFICATION	1.90840636789561E-4	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998299996502465	WITHOUT_CLASSIFICATION	1.7000034975350213E-4	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998358445230235	WITHOUT_CLASSIFICATION	1.6415547697639884E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996842843442012	WITHOUT_CLASSIFICATION	3.157156557987362E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9973516549037448	WITHOUT_CLASSIFICATION	0.002648345096255197	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999764869468889	WITHOUT_CLASSIFICATION	2.3513053111105066E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999952747733604	WITHOUT_CLASSIFICATION	4.725226639673712E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999157157362863	WITHOUT_CLASSIFICATION	8.42842637136355E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997298439648882	WITHOUT_CLASSIFICATION	2.701560351118801E-4	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999139528053744	WITHOUT_CLASSIFICATION	8.604719462563032E-5	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999773423445754	WITHOUT_CLASSIFICATION	2.2657655424683853E-5	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999444171270446	WITHOUT_CLASSIFICATION	5.558287295541694E-5	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9998278888638346	WITHOUT_CLASSIFICATION	1.7211113616542292E-4	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9997857057273053	WITHOUT_CLASSIFICATION	2.14294272694612E-4	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999827595304835	WITHOUT_CLASSIFICATION	1.7240469516471957E-5	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9997930871661854	WITHOUT_CLASSIFICATION	2.0691283381466384E-4	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9997768456717947	WITHOUT_CLASSIFICATION	2.2315432820536356E-4	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9998956520980151	WITHOUT_CLASSIFICATION	1.0434790198485087E-4	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998876744941669	WITHOUT_CLASSIFICATION	1.123255058330142E-4	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999445180584283	WITHOUT_CLASSIFICATION	5.548194157175014E-5	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999079642201474	WITHOUT_CLASSIFICATION	9.203577985260275E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9997991905986557	WITHOUT_CLASSIFICATION	2.008094013442806E-4	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999474759628322	WITHOUT_CLASSIFICATION	5.2524037167757154E-5	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999171955408923	WITHOUT_CLASSIFICATION	8.280445910772836E-5	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998809858331346	WITHOUT_CLASSIFICATION	1.1901416686555857E-4	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999755983299404	WITHOUT_CLASSIFICATION	2.440167005949033E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999490332279201	WITHOUT_CLASSIFICATION	5.096677207988498E-5	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999078690464717	WITHOUT_CLASSIFICATION	9.213095352831952E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999490332279201	WITHOUT_CLASSIFICATION	5.096677207988498E-5	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999852658430413	WITHOUT_CLASSIFICATION	1.4734156958791226E-5	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999349176009333	WITHOUT_CLASSIFICATION	6.50823990667022E-5	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999796874571856	WITHOUT_CLASSIFICATION	2.031254281447409E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999857281097446	WITHOUT_CLASSIFICATION	1.4271890255456621E-5	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999957328746777	WITHOUT_CLASSIFICATION	4.2671253222914464E-5	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999794929443341	WITHOUT_CLASSIFICATION	2.0507055665967308E-5	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999719984707034	WITHOUT_CLASSIFICATION	2.800152929656264E-5	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999053712122903	WITHOUT_CLASSIFICATION	9.462878770963365E-5	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999392400771159	WITHOUT_CLASSIFICATION	6.0759922884106605E-5	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9998550158246053	WITHOUT_CLASSIFICATION	1.4498417539461525E-4	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999335877075901	WITHOUT_CLASSIFICATION	6.641229240990117E-5	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999871046559047	WITHOUT_CLASSIFICATION	1.2895344095338498E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999937082979454	WITHOUT_CLASSIFICATION	6.291702054594584E-6	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999551752326588	WITHOUT_CLASSIFICATION	4.4824767341206685E-5	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999615600174252	WITHOUT_CLASSIFICATION	3.843998257487198E-5	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999720495035385	WITHOUT_CLASSIFICATION	2.7950496461471846E-5	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999564699642552	WITHOUT_CLASSIFICATION	4.3530035744781983E-5	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9998986747703232	WITHOUT_CLASSIFICATION	1.013252296768334E-4	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999649478661621	WITHOUT_CLASSIFICATION	3.505213383795997E-5	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999553113025272	WITHOUT_CLASSIFICATION	4.468869747276786E-5	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999569621429787	WITHOUT_CLASSIFICATION	4.303785702125119E-5	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9998612275197006	WITHOUT_CLASSIFICATION	1.3877248029940412E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999439626631433	WITHOUT_CLASSIFICATION	5.603733685674123E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999192385105824	WITHOUT_CLASSIFICATION	8.076148941767972E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998499586834791	WITHOUT_CLASSIFICATION	1.5004131652088964E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999879231179998	WITHOUT_CLASSIFICATION	1.2076882000195677E-5	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9998773398409341	WITHOUT_CLASSIFICATION	1.2266015906591094E-4	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9998674100512436	WITHOUT_CLASSIFICATION	1.3258994875646848E-4	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998485156020158	WITHOUT_CLASSIFICATION	1.51484397984104E-4	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999176170634837	WITHOUT_CLASSIFICATION	8.2382936516331E-5	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9997584045029171	WITHOUT_CLASSIFICATION	2.415954970828265E-4	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999833978085866	WITHOUT_CLASSIFICATION	1.6602191413403094E-5	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999834120574421	WITHOUT_CLASSIFICATION	1.658794255781657E-5	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.999846600458718	WITHOUT_CLASSIFICATION	1.5339954128207263E-4	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9997547882310643	WITHOUT_CLASSIFICATION	2.452117689356947E-4	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9998607019198587	WITHOUT_CLASSIFICATION	1.3929808014141124E-4	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998463452138633	WITHOUT_CLASSIFICATION	1.536547861366832E-4	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9997589302819243	WITHOUT_CLASSIFICATION	2.4106971807572906E-4	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998993422016551	WITHOUT_CLASSIFICATION	1.0065779834480256E-4	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9998490158135727	WITHOUT_CLASSIFICATION	1.5098418642722414E-4	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9998045278241843	WITHOUT_CLASSIFICATION	1.9547217581579145E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999672333604188	WITHOUT_CLASSIFICATION	3.27666395811742E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999879231179998	WITHOUT_CLASSIFICATION	1.2076882000195677E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9998831974150072	WITHOUT_CLASSIFICATION	1.1680258499283623E-4	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9998297862039525	WITHOUT_CLASSIFICATION	1.702137960476272E-4	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999922464884042	WITHOUT_CLASSIFICATION	7.753511595793486E-5	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9997078362310388	WITHOUT_CLASSIFICATION	2.9216376896128637E-4	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999288131597038	WITHOUT_CLASSIFICATION	7.118684029621449E-5	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999061604816095	WITHOUT_CLASSIFICATION	9.383951839053336E-5	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9998029507134251	WITHOUT_CLASSIFICATION	1.9704928657490647E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998491888468916	WITHOUT_CLASSIFICATION	1.5081115310846207E-4	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999809743665723	WITHOUT_CLASSIFICATION	1.902563342770147E-5	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9998585146379848	WITHOUT_CLASSIFICATION	1.414853620152774E-4	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999680130378296	WITHOUT_CLASSIFICATION	3.198696217053413E-5	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9998602845964101	WITHOUT_CLASSIFICATION	1.3971540358998383E-4	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999804322640021	WITHOUT_CLASSIFICATION	1.956773599789167E-4	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9998889494811806	WITHOUT_CLASSIFICATION	1.1105051881937788E-4	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999804858991761	WITHOUT_CLASSIFICATION	1.9514100823921928E-5	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9998915874958194	WITHOUT_CLASSIFICATION	1.0841250418051891E-4	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998958495725052	WITHOUT_CLASSIFICATION	1.0415042749487192E-4	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.999987571732961	WITHOUT_CLASSIFICATION	1.2428267038945064E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9998399939170509	WITHOUT_CLASSIFICATION	1.6000608294899625E-4	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9998412642870464	WITHOUT_CLASSIFICATION	1.5873571295360722E-4	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998674117261781	WITHOUT_CLASSIFICATION	1.3258827382201178E-4	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999055244811965	WITHOUT_CLASSIFICATION	9.447551880353754E-5	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999676555670417	WITHOUT_CLASSIFICATION	3.2344432958281376E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9991265572482481	WITHOUT_CLASSIFICATION	8.734427517519425E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9991265572482481	WITHOUT_CLASSIFICATION	8.734427517519425E-4	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999582356344606	WITHOUT_CLASSIFICATION	4.1764365539471185E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9991265572482481	WITHOUT_CLASSIFICATION	8.734427517519425E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9991265572482481	WITHOUT_CLASSIFICATION	8.734427517519425E-4	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9998839793009856	WITHOUT_CLASSIFICATION	1.160206990143669E-4	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9998633238751561	WITHOUT_CLASSIFICATION	1.3667612484396404E-4	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998234119507613	WITHOUT_CLASSIFICATION	1.7658804923877195E-4	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999823092493396	WITHOUT_CLASSIFICATION	1.7690750660405522E-4	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999501957142116	WITHOUT_CLASSIFICATION	4.9804285788418646E-5	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999508791726608	WITHOUT_CLASSIFICATION	4.912082733928882E-5	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9997858351350405	WITHOUT_CLASSIFICATION	2.1416486495950718E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999726078977158	WITHOUT_CLASSIFICATION	2.739210228410976E-5	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9997519883510237	WITHOUT_CLASSIFICATION	2.4801164897635423E-4	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9997852778858719	WITHOUT_CLASSIFICATION	2.1472211412816504E-4	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998612337962902	WITHOUT_CLASSIFICATION	1.3876620370976595E-4	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9998337285598691	WITHOUT_CLASSIFICATION	1.6627144013083684E-4	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998616789735076	WITHOUT_CLASSIFICATION	1.38321026492324E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9998399090265766	WITHOUT_CLASSIFICATION	1.600909734234298E-4	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9998434206409853	WITHOUT_CLASSIFICATION	1.5657935901459012E-4	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999091797807497	WITHOUT_CLASSIFICATION	9.082021925039756E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999104706422844	WITHOUT_CLASSIFICATION	8.952935771558785E-5	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9998375808930853	WITHOUT_CLASSIFICATION	1.6241910691467998E-4	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9998045285452933	WITHOUT_CLASSIFICATION	1.954714547066397E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9998399090265766	WITHOUT_CLASSIFICATION	1.600909734234298E-4	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999176152562307	WITHOUT_CLASSIFICATION	8.238474376942225E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9998715126609705	WITHOUT_CLASSIFICATION	1.2848733902951528E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999104706422844	WITHOUT_CLASSIFICATION	8.952935771558785E-5	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9998773398409341	WITHOUT_CLASSIFICATION	1.2266015906591094E-4	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9996943520138256	WITHOUT_CLASSIFICATION	3.0564798617433743E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999652084973122	WITHOUT_CLASSIFICATION	3.479150268785852E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999399181742415	WITHOUT_CLASSIFICATION	6.0081825758510855E-5	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9997877556763128	WITHOUT_CLASSIFICATION	2.1224432368723852E-4	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999163831389162	WITHOUT_CLASSIFICATION	8.36168610837547E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9998058832429022	WITHOUT_CLASSIFICATION	1.941167570977058E-4	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999053427091807	WITHOUT_CLASSIFICATION	9.465729081920846E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9997544603688661	WITHOUT_CLASSIFICATION	2.455396311339608E-4	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9998776391699542	WITHOUT_CLASSIFICATION	1.2236083004572062E-4	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9998578688459276	WITHOUT_CLASSIFICATION	1.4213115407234943E-4	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999311677514681	WITHOUT_CLASSIFICATION	6.883224853192709E-5	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999853271159983	WITHOUT_CLASSIFICATION	1.4672884001693876E-4	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999687750851772	WITHOUT_CLASSIFICATION	3.122491482280454E-5	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999171527831366	WITHOUT_CLASSIFICATION	8.284721686342444E-5	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999605396461673	WITHOUT_CLASSIFICATION	3.9460353832789855E-5	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9998794391583405	WITHOUT_CLASSIFICATION	1.2056084165940741E-4	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998015193512206	WITHOUT_CLASSIFICATION	1.9848064877945037E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999596299807829	WITHOUT_CLASSIFICATION	4.037001921707759E-5	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999901425874711	WITHOUT_CLASSIFICATION	9.857412528907504E-5	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998467901139804	WITHOUT_CLASSIFICATION	1.5320988601967927E-4	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9998550929904197	WITHOUT_CLASSIFICATION	1.4490700958028036E-4	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.999936853127831	WITHOUT_CLASSIFICATION	6.314687216899232E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9997544603688661	WITHOUT_CLASSIFICATION	2.455396311339608E-4	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9998444753676723	WITHOUT_CLASSIFICATION	1.5552463232770402E-4	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9998101940825079	WITHOUT_CLASSIFICATION	1.8980591749205136E-4	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9998005401611164	WITHOUT_CLASSIFICATION	1.9945983888369306E-4	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9997806990625432	WITHOUT_CLASSIFICATION	2.1930093745686235E-4	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998697686420553	WITHOUT_CLASSIFICATION	1.3023135794464627E-4	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9997648494105892	WITHOUT_CLASSIFICATION	2.3515058941087647E-4	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9997593110670527	WITHOUT_CLASSIFICATION	2.4068893294723446E-4	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9996927600431527	WITHOUT_CLASSIFICATION	3.072399568474279E-4	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9998084797056279	WITHOUT_CLASSIFICATION	1.9152029437209108E-4	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.99976976282267	WITHOUT_CLASSIFICATION	2.30237177330034E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999121029937659	WITHOUT_CLASSIFICATION	8.789700623419243E-5	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999431386354456	WITHOUT_CLASSIFICATION	5.686136455444895E-5	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999400534670508	WITHOUT_CLASSIFICATION	5.9946532949243356E-5	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999813522597878	WITHOUT_CLASSIFICATION	1.8647740212142763E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99985275617383	WITHOUT_CLASSIFICATION	1.4724382617001055E-4	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999951823077093	WITHOUT_CLASSIFICATION	4.817692290709854E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998820424536101	WITHOUT_CLASSIFICATION	1.1795754638985285E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999121029937659	WITHOUT_CLASSIFICATION	8.789700623419243E-5	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999893132799265	WITHOUT_CLASSIFICATION	1.0686720073508825E-5	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9998603156506074	WITHOUT_CLASSIFICATION	1.3968434939256807E-4	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9998897405091125	WITHOUT_CLASSIFICATION	1.1025949088750639E-4	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999885515335889	WITHOUT_CLASSIFICATION	1.144846641110337E-4	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999359571041213	WITHOUT_CLASSIFICATION	6.404289587864737E-5	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999698188381184	WITHOUT_CLASSIFICATION	3.018116188152503E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99985275617383	WITHOUT_CLASSIFICATION	1.4724382617001055E-4	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999179768969979	WITHOUT_CLASSIFICATION	8.202310300207383E-5	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999964886500626	WITHOUT_CLASSIFICATION	3.511349937399485E-5	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999238755802152	WITHOUT_CLASSIFICATION	7.612441978480875E-5	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9955892792748656	WITHOUT_CLASSIFICATION	0.004410720725134386	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9932768758427024	WITHOUT_CLASSIFICATION	0.0067231241572976806	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9939216953490422	WITHOUT_CLASSIFICATION	0.006078304650957791	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999379629184112	WITHOUT_CLASSIFICATION	6.203708158872533E-5	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999379629184112	WITHOUT_CLASSIFICATION	6.203708158872533E-5	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9998127518230543	WITHOUT_CLASSIFICATION	1.8724817694567626E-4	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999387093507157	WITHOUT_CLASSIFICATION	6.129064928436104E-5	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9997855157781785	WITHOUT_CLASSIFICATION	2.1448422182158402E-4	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.999805533572165	WITHOUT_CLASSIFICATION	1.944664278351852E-4	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.999932070940404	WITHOUT_CLASSIFICATION	6.792905959600484E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998813133737129	WITHOUT_CLASSIFICATION	1.1868662628706121E-4	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999162806836901	WITHOUT_CLASSIFICATION	8.371931630994005E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998442664569694	WITHOUT_CLASSIFICATION	1.5573354303046954E-4	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999812307804341	WITHOUT_CLASSIFICATION	1.8769219565934335E-5	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999026963451111	WITHOUT_CLASSIFICATION	9.730365488891569E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998813133737129	WITHOUT_CLASSIFICATION	1.1868662628706121E-4	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999162806836901	WITHOUT_CLASSIFICATION	8.371931630994005E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998442664569694	WITHOUT_CLASSIFICATION	1.5573354303046954E-4	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9973154133055779	WITHOUT_CLASSIFICATION	0.0026845866944221167	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9997515715751414	WITHOUT_CLASSIFICATION	2.4842842485858524E-4	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999669317765938	WITHOUT_CLASSIFICATION	3.306822340622811E-5	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999975728866557	WITHOUT_CLASSIFICATION	2.4271133443166492E-5	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999256712723502	WITHOUT_CLASSIFICATION	7.432872764978836E-5	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999548702410248	WITHOUT_CLASSIFICATION	4.512975897519043E-5	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998953853961312	WITHOUT_CLASSIFICATION	1.0461460386884319E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9998185374450098	WITHOUT_CLASSIFICATION	1.814625549902916E-4	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9998181527399839	WITHOUT_CLASSIFICATION	1.818472600160564E-4	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.999884980682419	WITHOUT_CLASSIFICATION	1.150193175809149E-4	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999555240726853	WITHOUT_CLASSIFICATION	4.447592731464774E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999200586085554	WITHOUT_CLASSIFICATION	7.994139144458937E-5	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9998788247643903	WITHOUT_CLASSIFICATION	1.211752356097335E-4	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999315443110626	WITHOUT_CLASSIFICATION	6.845568893744645E-5	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998108861015983	WITHOUT_CLASSIFICATION	1.891138984016271E-4	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999051265229263	WITHOUT_CLASSIFICATION	9.487347707368856E-5	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9998642485607395	WITHOUT_CLASSIFICATION	1.3575143926048935E-4	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999843055594376	WITHOUT_CLASSIFICATION	1.5694440562314128E-5	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999252016025335	WITHOUT_CLASSIFICATION	7.47983974665245E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999770436793599	WITHOUT_CLASSIFICATION	2.295632064002116E-5	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999599523686128	WITHOUT_CLASSIFICATION	4.004763138724807E-5	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999779998112014	WITHOUT_CLASSIFICATION	2.2000188798664114E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999855107231301	WITHOUT_CLASSIFICATION	1.448927686988631E-5	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.999807652494659	WITHOUT_CLASSIFICATION	1.9234750534099845E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998562348795901	WITHOUT_CLASSIFICATION	1.4376512040994446E-4	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999082613581012	WITHOUT_CLASSIFICATION	9.173864189881056E-5	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999960508305121	WITHOUT_CLASSIFICATION	3.949169487860085E-6	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999139206705688	WITHOUT_CLASSIFICATION	8.607932943117418E-5	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998623453121077	WITHOUT_CLASSIFICATION	1.376546878923705E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998100081970138	WITHOUT_CLASSIFICATION	1.8999180298617056E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998100081970138	WITHOUT_CLASSIFICATION	1.8999180298617056E-4	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.999971371355254	WITHOUT_CLASSIFICATION	2.862864474596402E-5	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999818832549985	WITHOUT_CLASSIFICATION	1.811674500161664E-5	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9998646854024328	WITHOUT_CLASSIFICATION	1.3531459756722784E-4	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999658319416057	WITHOUT_CLASSIFICATION	3.4168058394349566E-5	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9998105906347627	WITHOUT_CLASSIFICATION	1.8940936523714603E-4	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999598243801804	WITHOUT_CLASSIFICATION	4.0175619819571774E-5	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9959586219716268	WITHOUT_CLASSIFICATION	0.004041378028373307	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999033666924979	WITHOUT_CLASSIFICATION	9.66333075020639E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.999765107248594	WITHOUT_CLASSIFICATION	2.348927514059509E-4	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999933281062071	WITHOUT_CLASSIFICATION	6.671893792902025E-5	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999539228087436	WITHOUT_CLASSIFICATION	4.60771912564012E-5	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999087004454437	WITHOUT_CLASSIFICATION	9.1299554556375E-5	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999181058190073	WITHOUT_CLASSIFICATION	8.189418099275774E-5	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999181675382963	WITHOUT_CLASSIFICATION	8.183246170374893E-5	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999076790207815	WITHOUT_CLASSIFICATION	9.232097921858484E-5	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999325369798681	WITHOUT_CLASSIFICATION	6.746302013196734E-5	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999456198599262	WITHOUT_CLASSIFICATION	5.438014007377269E-5	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999239199224126	WITHOUT_CLASSIFICATION	7.608007758740391E-5	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998983151111804	WITHOUT_CLASSIFICATION	1.0168488881958999E-4	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915255312752	WITHOUT_CLASSIFICATION	8.474468724784144E-5	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999346691034923	WITHOUT_CLASSIFICATION	6.533089650770751E-5	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999508347246941	WITHOUT_CLASSIFICATION	4.916527530588659E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997170563015786	WITHOUT_CLASSIFICATION	2.8294369842149367E-4	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999879240239767	WITHOUT_CLASSIFICATION	1.2075976023226179E-5	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999866635439947	WITHOUT_CLASSIFICATION	1.3336456005199674E-5	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9995735761962143	WITHOUT_CLASSIFICATION	4.264238037856938E-4	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999411216525745	WITHOUT_CLASSIFICATION	5.887834742547777E-5	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999008118573893	WITHOUT_CLASSIFICATION	9.91881426106207E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997170563015786	WITHOUT_CLASSIFICATION	2.8294369842149367E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997170563015786	WITHOUT_CLASSIFICATION	2.8294369842149367E-4	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999812543299573	WITHOUT_CLASSIFICATION	1.8745670042653524E-5	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9998371594218713	WITHOUT_CLASSIFICATION	1.6284057812857754E-4	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999871163035123	WITHOUT_CLASSIFICATION	1.2883696487684528E-5	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999744879231247	WITHOUT_CLASSIFICATION	2.5512076875344407E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9995757997524375	WITHOUT_CLASSIFICATION	4.242002475624945E-4	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999843055594376	WITHOUT_CLASSIFICATION	1.5694440562314128E-5	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9998773462886982	WITHOUT_CLASSIFICATION	1.226537113017548E-4	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9998783046527866	WITHOUT_CLASSIFICATION	1.2169534721331441E-4	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999109602426611	WITHOUT_CLASSIFICATION	8.903975733885828E-5	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998687126449123	WITHOUT_CLASSIFICATION	1.3128735508768195E-4	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999798854267293	WITHOUT_CLASSIFICATION	2.0114573270673263E-5	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999898499965989	WITHOUT_CLASSIFICATION	1.0150003401106747E-4	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999873262642524	WITHOUT_CLASSIFICATION	1.2673735747606224E-4	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999873262642524	WITHOUT_CLASSIFICATION	1.2673735747606224E-4	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999873262642524	WITHOUT_CLASSIFICATION	1.2673735747606213E-4	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999873262642524	WITHOUT_CLASSIFICATION	1.2673735747606213E-4	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998304634848594	WITHOUT_CLASSIFICATION	1.695365151406876E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998513978532663	WITHOUT_CLASSIFICATION	1.4860214673364722E-4	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999474012238839	WITHOUT_CLASSIFICATION	5.259877611608832E-5	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998400320559102	WITHOUT_CLASSIFICATION	1.5996794408984434E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999798581560628	WITHOUT_CLASSIFICATION	2.0141843937122475E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999411050169877	WITHOUT_CLASSIFICATION	5.889498301238032E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998894559396178	WITHOUT_CLASSIFICATION	1.105440603821904E-4	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999146677722136	WITHOUT_CLASSIFICATION	8.533222778633218E-5	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9998647584876795	WITHOUT_CLASSIFICATION	1.3524151232049977E-4	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9998546052187535	WITHOUT_CLASSIFICATION	1.453947812465877E-4	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999071682087538	WITHOUT_CLASSIFICATION	9.283179124620635E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997536287664353	WITHOUT_CLASSIFICATION	2.463712335647358E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999330873500488	WITHOUT_CLASSIFICATION	6.691264995109575E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9998929007856101	WITHOUT_CLASSIFICATION	1.0709921438989363E-4	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9998578855509551	WITHOUT_CLASSIFICATION	1.4211444904487189E-4	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9997519979570512	WITHOUT_CLASSIFICATION	2.4800204294883827E-4	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.99980251898804	WITHOUT_CLASSIFICATION	1.974810119600725E-4	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.99980251898804	WITHOUT_CLASSIFICATION	1.974810119600725E-4	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999617504559194	WITHOUT_CLASSIFICATION	3.8249544080581355E-5	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9997985901699921	WITHOUT_CLASSIFICATION	2.0140983000791363E-4	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999618099061882	WITHOUT_CLASSIFICATION	3.819009381186799E-5	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998506273412718	WITHOUT_CLASSIFICATION	1.4937265872819929E-4	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998409339650149	WITHOUT_CLASSIFICATION	1.590660349850511E-4	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999105006062198	WITHOUT_CLASSIFICATION	8.949939378029042E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9956686624308204	WITHOUT_CLASSIFICATION	0.004331337569179641	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999463283500208	WITHOUT_CLASSIFICATION	5.3671649979179435E-5	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999901101821674	WITHOUT_CLASSIFICATION	9.889817832509979E-6	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999928000017142	WITHOUT_CLASSIFICATION	7.199998285788249E-6	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999482299217244	WITHOUT_CLASSIFICATION	5.17700782756761E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999138307519578	WITHOUT_CLASSIFICATION	8.616924804219486E-5	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999860841565864	WITHOUT_CLASSIFICATION	1.3915843413558045E-5	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999865469013974	WITHOUT_CLASSIFICATION	1.345309860259514E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9997478379549564	WITHOUT_CLASSIFICATION	2.521620450435971E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999724430453567	WITHOUT_CLASSIFICATION	2.7556954643245692E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999071071174617	WITHOUT_CLASSIFICATION	9.289288253828275E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999127582033905	WITHOUT_CLASSIFICATION	8.724179660943239E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999449067365891	WITHOUT_CLASSIFICATION	5.509326341091184E-5	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999986260577542	WITHOUT_CLASSIFICATION	1.3739422457645098E-6	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999830781233479	WITHOUT_CLASSIFICATION	1.6921876652119203E-5	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999916740368628	WITHOUT_CLASSIFICATION	8.325963137065401E-6	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999597587306506	WITHOUT_CLASSIFICATION	4.024126934945492E-5	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9998110311373964	WITHOUT_CLASSIFICATION	1.889688626034788E-4	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999586428290796	WITHOUT_CLASSIFICATION	4.1357170920383665E-5	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9998803337234076	WITHOUT_CLASSIFICATION	1.1966627659244556E-4	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998700742875664	WITHOUT_CLASSIFICATION	1.2992571243361622E-4	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999881927196209	WITHOUT_CLASSIFICATION	1.1807280379069548E-5	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998904439385162	WITHOUT_CLASSIFICATION	1.095560614837905E-4	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999972964393804	WITHOUT_CLASSIFICATION	2.7035606196101846E-6	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9998730381717709	WITHOUT_CLASSIFICATION	1.2696182822902785E-4	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9998886104687862	WITHOUT_CLASSIFICATION	1.1138953121376627E-4	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9997910584964801	WITHOUT_CLASSIFICATION	2.0894150351985044E-4	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998242210102718	WITHOUT_CLASSIFICATION	1.7577898972823326E-4	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9997805294233205	WITHOUT_CLASSIFICATION	2.194705766794295E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999896416158257	WITHOUT_CLASSIFICATION	1.0358384174282877E-5	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9998417073750357	WITHOUT_CLASSIFICATION	1.5829262496420076E-4	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9998655776591117	WITHOUT_CLASSIFICATION	1.344223408883061E-4	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9998123592847044	WITHOUT_CLASSIFICATION	1.876407152956528E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999951819104685	WITHOUT_CLASSIFICATION	4.818089531462494E-6	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9998844257777977	WITHOUT_CLASSIFICATION	1.155742222022702E-4	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999044917729975	WITHOUT_CLASSIFICATION	9.550822700245182E-5	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999914544764285	WITHOUT_CLASSIFICATION	8.545523571491531E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999953176732001	WITHOUT_CLASSIFICATION	4.6823267998992595E-5	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998282097682482	WITHOUT_CLASSIFICATION	1.717902317518785E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9998190952749397	WITHOUT_CLASSIFICATION	1.8090472506018386E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.999928229787789	WITHOUT_CLASSIFICATION	7.17702122109845E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999022805812388	WITHOUT_CLASSIFICATION	9.771941876125015E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9998636371473025	WITHOUT_CLASSIFICATION	1.363628526974827E-4	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999557254062127	WITHOUT_CLASSIFICATION	4.4274593787277516E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998874269722877	WITHOUT_CLASSIFICATION	1.1257302771228281E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999056893536922	WITHOUT_CLASSIFICATION	9.431064630782759E-5	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999069741429292	WITHOUT_CLASSIFICATION	9.30258570708126E-5	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998135725638894	WITHOUT_CLASSIFICATION	1.8642743611065228E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9998321066274319	WITHOUT_CLASSIFICATION	1.6789337256807113E-4	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998734184812347	WITHOUT_CLASSIFICATION	1.2658151876534545E-4	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9998889479757421	WITHOUT_CLASSIFICATION	1.1105202425796979E-4	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.999941052141486	WITHOUT_CLASSIFICATION	5.894785851410686E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9997409107710159	WITHOUT_CLASSIFICATION	2.5908922898411455E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.999966832076046	WITHOUT_CLASSIFICATION	3.316792395394876E-5	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999778156895224	WITHOUT_CLASSIFICATION	2.218431047762364E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999857127749873	WITHOUT_CLASSIFICATION	1.4287225012847843E-5	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999796626787715	WITHOUT_CLASSIFICATION	2.033732122850117E-5	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999673680059448	WITHOUT_CLASSIFICATION	3.2631994055194414E-5	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999451346617639	WITHOUT_CLASSIFICATION	5.486533823615378E-5	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999785096676673	WITHOUT_CLASSIFICATION	2.149033233268888E-5	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999016449738201	WITHOUT_CLASSIFICATION	9.835502617997898E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9998366023720253	WITHOUT_CLASSIFICATION	1.6339762797455346E-4	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9998970089110627	WITHOUT_CLASSIFICATION	1.0299108893717315E-4	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998524163836305	WITHOUT_CLASSIFICATION	1.4758361636946728E-4	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999952064587382	WITHOUT_CLASSIFICATION	4.793541261805504E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.999948692412731	WITHOUT_CLASSIFICATION	5.130758726898387E-5	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9997784373176533	WITHOUT_CLASSIFICATION	2.2156268234678817E-4	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9998685805999941	WITHOUT_CLASSIFICATION	1.3141940000592893E-4	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999767915695044	WITHOUT_CLASSIFICATION	2.3208430495730378E-5	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9997619765819896	WITHOUT_CLASSIFICATION	2.3802341801029524E-4	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999608327218609	WITHOUT_CLASSIFICATION	3.916727813916955E-5	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999424927563034	WITHOUT_CLASSIFICATION	5.750724369653896E-5	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999232675040202	WITHOUT_CLASSIFICATION	7.673249597978632E-5	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9997714953481787	WITHOUT_CLASSIFICATION	2.2850465182136805E-4	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9998700147725965	WITHOUT_CLASSIFICATION	1.2998522740337087E-4	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998533920670563	WITHOUT_CLASSIFICATION	1.466079329437456E-4	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.999639230056514	WITHOUT_CLASSIFICATION	3.607699434859743E-4	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9998636092898457	WITHOUT_CLASSIFICATION	1.3639071015418593E-4	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.999510418184569	WITHOUT_CLASSIFICATION	4.895818154310306E-4	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9997932073676282	WITHOUT_CLASSIFICATION	2.0679263237177012E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.999851947144386	WITHOUT_CLASSIFICATION	1.4805285561403885E-4	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9998467678032598	WITHOUT_CLASSIFICATION	1.532321967401262E-4	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9998943702445049	WITHOUT_CLASSIFICATION	1.0562975549515896E-4	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999539145737849	WITHOUT_CLASSIFICATION	4.608542621496124E-5	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998910174554276	WITHOUT_CLASSIFICATION	1.0898254457235057E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999786069842385	WITHOUT_CLASSIFICATION	2.1393015761488685E-5	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9998133835524051	WITHOUT_CLASSIFICATION	1.8661644759496979E-4	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9998201846793034	WITHOUT_CLASSIFICATION	1.7981532069658325E-4	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998280248724033	WITHOUT_CLASSIFICATION	1.7197512759668516E-4	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.999895684803361	WITHOUT_CLASSIFICATION	1.0431519663893718E-4	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999714409061503	WITHOUT_CLASSIFICATION	2.855909384961585E-5	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999312652314845	WITHOUT_CLASSIFICATION	6.873476851547884E-5	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9997481372033178	WITHOUT_CLASSIFICATION	2.5186279668215394E-4	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9998971530787839	WITHOUT_CLASSIFICATION	1.0284692121608529E-4	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9998450270917814	WITHOUT_CLASSIFICATION	1.5497290821854233E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998971969860339	WITHOUT_CLASSIFICATION	1.0280301396615383E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998971969860339	WITHOUT_CLASSIFICATION	1.0280301396615383E-4	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998503231955319	WITHOUT_CLASSIFICATION	1.4967680446805384E-4	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9998679095980173	WITHOUT_CLASSIFICATION	1.320904019825822E-4	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9998865224801525	WITHOUT_CLASSIFICATION	1.1347751984748693E-4	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999770977158805	WITHOUT_CLASSIFICATION	2.2902284119544825E-5	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999803919840131	WITHOUT_CLASSIFICATION	1.9608015986810707E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999943675409465	WITHOUT_CLASSIFICATION	5.632459053506923E-5	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998960444261631	WITHOUT_CLASSIFICATION	1.0395557383694266E-4	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.999885228215645	WITHOUT_CLASSIFICATION	1.1477178435507098E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.999941101942164	WITHOUT_CLASSIFICATION	5.889805783612577E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999630186525679	WITHOUT_CLASSIFICATION	3.69813474321358E-5	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999941279995765	WITHOUT_CLASSIFICATION	5.872000423450066E-6	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.999944513920562	WITHOUT_CLASSIFICATION	5.548607943792308E-5	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999721256482299	WITHOUT_CLASSIFICATION	2.787435177018376E-5	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999291683185092	WITHOUT_CLASSIFICATION	7.083168149078954E-5	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999102263310355	WITHOUT_CLASSIFICATION	8.977366896440839E-5	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998090018781938	WITHOUT_CLASSIFICATION	1.9099812180622115E-4	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998090018781938	WITHOUT_CLASSIFICATION	1.9099812180622115E-4	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999746125328232	WITHOUT_CLASSIFICATION	2.538746717675733E-5	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999937020935647	WITHOUT_CLASSIFICATION	6.297906435301416E-5	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999294101738593	WITHOUT_CLASSIFICATION	7.058982614072548E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999490601786389	WITHOUT_CLASSIFICATION	5.093982136104627E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997536287664353	WITHOUT_CLASSIFICATION	2.463712335647358E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997553567980363	WITHOUT_CLASSIFICATION	2.446432019637478E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9998747678698007	WITHOUT_CLASSIFICATION	1.2523213019929684E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.999909118869081	WITHOUT_CLASSIFICATION	9.088113091906769E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.999909118869081	WITHOUT_CLASSIFICATION	9.088113091906769E-5	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999312825351037	WITHOUT_CLASSIFICATION	6.871746489629714E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9998927676079626	WITHOUT_CLASSIFICATION	1.072323920373638E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999968989293112	WITHOUT_CLASSIFICATION	3.10107068879867E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999993834075093	WITHOUT_CLASSIFICATION	6.165924907560032E-7	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999983086375971	WITHOUT_CLASSIFICATION	1.6913624028770524E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999016192829115	WITHOUT_CLASSIFICATION	9.838071708843208E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999475374435977	WITHOUT_CLASSIFICATION	5.2462556402387157E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998075350001625	WITHOUT_CLASSIFICATION	1.9246499983748997E-4	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.999929325198346	WITHOUT_CLASSIFICATION	7.06748016540674E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999260909206689	WITHOUT_CLASSIFICATION	7.390907933120172E-5	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9998686172023018	WITHOUT_CLASSIFICATION	1.313827976981717E-4	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998915625548811	WITHOUT_CLASSIFICATION	1.0843744511893961E-4	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9998036744660402	WITHOUT_CLASSIFICATION	1.9632553395977317E-4	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999101821460953	WITHOUT_CLASSIFICATION	8.981785390470009E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999343316582124	WITHOUT_CLASSIFICATION	6.56683417876096E-5	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9998941216181618	WITHOUT_CLASSIFICATION	1.0587838183814296E-4	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9998910834073507	WITHOUT_CLASSIFICATION	1.0891659264935265E-4	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999133468799816	WITHOUT_CLASSIFICATION	8.665312001852375E-5	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9964293399596764	WITHOUT_CLASSIFICATION	0.0035706600403235017	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9998335517400063	WITHOUT_CLASSIFICATION	1.664482599936151E-4	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998245239472445	WITHOUT_CLASSIFICATION	1.7547605275540872E-4	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999933369035175	WITHOUT_CLASSIFICATION	6.663096482501547E-5	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9998874537505136	WITHOUT_CLASSIFICATION	1.1254624948645595E-4	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9998890392322886	WITHOUT_CLASSIFICATION	1.1096076771148521E-4	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9992994398214589	WITHOUT_CLASSIFICATION	7.005601785412181E-4	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999964699778717	WITHOUT_CLASSIFICATION	3.5300221282215007E-6	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999884934802795	WITHOUT_CLASSIFICATION	1.1506519720464405E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9998088369165534	WITHOUT_CLASSIFICATION	1.9116308344653055E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999576330706065	WITHOUT_CLASSIFICATION	4.236692939356449E-5	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999073249229187	WITHOUT_CLASSIFICATION	9.267507708129694E-5	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9997526557161994	WITHOUT_CLASSIFICATION	2.473442838005435E-4	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999195258460489	WITHOUT_CLASSIFICATION	8.047415395106514E-5	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999743904729889	WITHOUT_CLASSIFICATION	2.560952701116702E-5	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9998009934682169	WITHOUT_CLASSIFICATION	1.9900653178308366E-4	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9998311253621863	WITHOUT_CLASSIFICATION	1.6887463781364438E-4	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9997623064513864	WITHOUT_CLASSIFICATION	2.376935486135572E-4	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9997731160544607	WITHOUT_CLASSIFICATION	2.2688394553922462E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9997577794381693	WITHOUT_CLASSIFICATION	2.4222056183067578E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999929143727428	WITHOUT_CLASSIFICATION	7.085627257194277E-5	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999969651601542	WITHOUT_CLASSIFICATION	3.0348398458041808E-5	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999692719573685	WITHOUT_CLASSIFICATION	3.072804263143624E-5	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9997820019655944	WITHOUT_CLASSIFICATION	2.1799803440556958E-4	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999104076630392	WITHOUT_CLASSIFICATION	8.959233696080157E-5	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999985869893314	WITHOUT_CLASSIFICATION	1.4130106686047258E-6	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9998737883841593	WITHOUT_CLASSIFICATION	1.2621161584063013E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9997577794381693	WITHOUT_CLASSIFICATION	2.4222056183067578E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999929143727428	WITHOUT_CLASSIFICATION	7.085627257194277E-5	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999100267250725	WITHOUT_CLASSIFICATION	8.997327492755837E-5	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998378242550696	WITHOUT_CLASSIFICATION	1.6217574493030364E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999281018686669	WITHOUT_CLASSIFICATION	7.189813133313437E-5	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.999908032621929	WITHOUT_CLASSIFICATION	9.19673780709815E-5	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999723601001093	WITHOUT_CLASSIFICATION	2.7639899890703357E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999885701010393	WITHOUT_CLASSIFICATION	1.1429898960769392E-5	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998449428949998	WITHOUT_CLASSIFICATION	1.55057105000128E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9998794722608085	WITHOUT_CLASSIFICATION	1.2052773919147963E-4	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.999836989275434	WITHOUT_CLASSIFICATION	1.6301072456595506E-4	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999892489393151	WITHOUT_CLASSIFICATION	1.0751060684899416E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.999836989275434	WITHOUT_CLASSIFICATION	1.6301072456595506E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999591148145316	WITHOUT_CLASSIFICATION	4.0885185468373365E-5	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9998615123959079	WITHOUT_CLASSIFICATION	1.3848760409203062E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999580080540724	WITHOUT_CLASSIFICATION	4.199194592745202E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998196989598602	WITHOUT_CLASSIFICATION	1.8030104013967837E-4	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999317826127172	WITHOUT_CLASSIFICATION	6.821738728278085E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999117855494128	WITHOUT_CLASSIFICATION	8.821445058705763E-5	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999339794249336	WITHOUT_CLASSIFICATION	6.602057506638814E-5	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9998856728352371	WITHOUT_CLASSIFICATION	1.1432716476283814E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998040314041096	WITHOUT_CLASSIFICATION	1.959685958905463E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999889161120354	WITHOUT_CLASSIFICATION	1.1083887964601053E-4	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9998553972353267	WITHOUT_CLASSIFICATION	1.4460276467321E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9997731588061787	WITHOUT_CLASSIFICATION	2.268411938213644E-4	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.999894363448554	WITHOUT_CLASSIFICATION	1.0563655144599593E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9973498618486515	WITHOUT_CLASSIFICATION	0.0026501381513485455	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9998350505095267	WITHOUT_CLASSIFICATION	1.6494949047334115E-4	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999509243471	WITHOUT_CLASSIFICATION	4.9075652900060466E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9959738340082828	WITHOUT_CLASSIFICATION	0.004026165991717244	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9997814858269818	WITHOUT_CLASSIFICATION	2.1851417301811524E-4	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999584234004638	WITHOUT_CLASSIFICATION	4.157659953622534E-5	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999009159627753	WITHOUT_CLASSIFICATION	9.908403722468906E-5	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999884208130098	WITHOUT_CLASSIFICATION	1.1579186990190449E-4	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999066204712791	WITHOUT_CLASSIFICATION	9.337952872090639E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999896582746514	WITHOUT_CLASSIFICATION	1.0341725348604326E-4	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.995959618358644	WITHOUT_CLASSIFICATION	0.004040381641356053	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999204142088509	WITHOUT_CLASSIFICATION	7.958579114913906E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998746049160976	WITHOUT_CLASSIFICATION	1.253950839024806E-4	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999900627869695	WITHOUT_CLASSIFICATION	9.937213030498586E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9998842133014976	WITHOUT_CLASSIFICATION	1.1578669850243239E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998818951062002	WITHOUT_CLASSIFICATION	1.1810489379982545E-4	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9997538175697023	WITHOUT_CLASSIFICATION	2.461824302976789E-4	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999531072199666	WITHOUT_CLASSIFICATION	4.6892780033389874E-5	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9955405226823947	WITHOUT_CLASSIFICATION	0.004459477317605297	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999064862328033	WITHOUT_CLASSIFICATION	9.35137671966893E-5	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999304105145693	WITHOUT_CLASSIFICATION	6.958948543067057E-5	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.999830610132093	WITHOUT_CLASSIFICATION	1.693898679069384E-4	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9998739898033252	WITHOUT_CLASSIFICATION	1.2601019667467353E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9997731588061787	WITHOUT_CLASSIFICATION	2.268411938213644E-4	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9998148644797504	WITHOUT_CLASSIFICATION	1.8513552024948597E-4	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998147723906893	WITHOUT_CLASSIFICATION	1.852276093108219E-4	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9996890679304105	WITHOUT_CLASSIFICATION	3.109320695895042E-4	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9997978407428221	WITHOUT_CLASSIFICATION	2.0215925717790613E-4	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999531635682614	WITHOUT_CLASSIFICATION	4.683643173870728E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999461238234255	WITHOUT_CLASSIFICATION	5.387617657434667E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998040314041096	WITHOUT_CLASSIFICATION	1.959685958905463E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998040314041096	WITHOUT_CLASSIFICATION	1.959685958905463E-4	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999339497586252	WITHOUT_CLASSIFICATION	6.60502413747763E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999177645178345	WITHOUT_CLASSIFICATION	8.223548216548546E-5	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9997606671684531	WITHOUT_CLASSIFICATION	2.3933283154680695E-4	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999348236340009	WITHOUT_CLASSIFICATION	6.51763659991667E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9998347182685184	WITHOUT_CLASSIFICATION	1.6528173148147037E-4	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999264879497561	WITHOUT_CLASSIFICATION	7.351205024378817E-5	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9998382961936751	WITHOUT_CLASSIFICATION	1.6170380632491766E-4	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999634291222819	WITHOUT_CLASSIFICATION	3.6570877718154766E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999423166984049	WITHOUT_CLASSIFICATION	5.7683301595198485E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999492007859114	WITHOUT_CLASSIFICATION	5.079921408860663E-5	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999503119753863	WITHOUT_CLASSIFICATION	4.968802461376589E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997520095131616	WITHOUT_CLASSIFICATION	2.479904868384096E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9997626436698244	WITHOUT_CLASSIFICATION	2.3735633017563337E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999492007859114	WITHOUT_CLASSIFICATION	5.079921408860663E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998858105192315	WITHOUT_CLASSIFICATION	1.1418948076838603E-4	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999122143677791	WITHOUT_CLASSIFICATION	8.778563222090192E-5	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998679923552568	WITHOUT_CLASSIFICATION	1.3200764474314666E-4	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9935911248807721	WITHOUT_CLASSIFICATION	0.006408875119227993	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997520095131616	WITHOUT_CLASSIFICATION	2.479904868384096E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999083754115529	WITHOUT_CLASSIFICATION	9.162458844707849E-5	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999896196061665	WITHOUT_CLASSIFICATION	1.0380393833523797E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999921768594191	WITHOUT_CLASSIFICATION	7.823140580928918E-6	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999680838505768	WITHOUT_CLASSIFICATION	3.191614942326219E-5	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9997522014601247	WITHOUT_CLASSIFICATION	2.477985398753609E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9997581808079103	WITHOUT_CLASSIFICATION	2.4181919208960193E-4	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9998451295343228	WITHOUT_CLASSIFICATION	1.548704656771595E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999165720266042	WITHOUT_CLASSIFICATION	8.342797339571738E-5	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998947508543158	WITHOUT_CLASSIFICATION	1.0524914568423457E-4	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999556550622847	WITHOUT_CLASSIFICATION	4.434493771527258E-5	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9997648642923868	WITHOUT_CLASSIFICATION	2.3513570761333832E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999492007859114	WITHOUT_CLASSIFICATION	5.079921408860663E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999083754115529	WITHOUT_CLASSIFICATION	9.162458844707849E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999921768594191	WITHOUT_CLASSIFICATION	7.823140580928918E-6	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9998788869548798	WITHOUT_CLASSIFICATION	1.2111304512012205E-4	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999810395401457	WITHOUT_CLASSIFICATION	1.896045985431876E-5	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999087967091069	WITHOUT_CLASSIFICATION	9.12032908930895E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997520095131616	WITHOUT_CLASSIFICATION	2.479904868384096E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999466003256214	WITHOUT_CLASSIFICATION	5.339967437842916E-5	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9997772528724087	WITHOUT_CLASSIFICATION	2.227471275911725E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998858105192315	WITHOUT_CLASSIFICATION	1.1418948076838603E-4	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9998690960597864	WITHOUT_CLASSIFICATION	1.3090394021358765E-4	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9997721358304417	WITHOUT_CLASSIFICATION	2.278641695583381E-4	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9997194493736685	WITHOUT_CLASSIFICATION	2.8055062633140765E-4	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9993573416513023	WITHOUT_CLASSIFICATION	6.426583486976997E-4	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9991373396398389	WITHOUT_CLASSIFICATION	8.626603601611855E-4	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9997847167287204	WITHOUT_CLASSIFICATION	2.1528327127954134E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998196989598602	WITHOUT_CLASSIFICATION	1.8030104013967837E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999171342896302	WITHOUT_CLASSIFICATION	8.28657103697656E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998241146872745	WITHOUT_CLASSIFICATION	1.7588531272545664E-4	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999877277240693	WITHOUT_CLASSIFICATION	1.2272275930711087E-5	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999955589566175	WITHOUT_CLASSIFICATION	4.441043382501325E-5	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999592260981347	WITHOUT_CLASSIFICATION	4.077390186537801E-5	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999651834610115	WITHOUT_CLASSIFICATION	3.481653898849669E-5	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999432764646699	WITHOUT_CLASSIFICATION	5.672353533000257E-5	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9998202374198933	WITHOUT_CLASSIFICATION	1.7976258010669633E-4	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999156057058337	WITHOUT_CLASSIFICATION	8.439429416621433E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998241146872745	WITHOUT_CLASSIFICATION	1.7588531272545664E-4	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9997527114166176	WITHOUT_CLASSIFICATION	2.472885833824431E-4	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.99975628747962	WITHOUT_CLASSIFICATION	2.4371252038006856E-4	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9998036744660402	WITHOUT_CLASSIFICATION	1.9632553395977317E-4	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9997527527436894	WITHOUT_CLASSIFICATION	2.472472563106326E-4	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999577134805538	WITHOUT_CLASSIFICATION	4.2286519446201454E-5	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.999876538895311	WITHOUT_CLASSIFICATION	1.234611046889223E-4	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998046785761873	WITHOUT_CLASSIFICATION	1.9532142381276842E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998827090337079	WITHOUT_CLASSIFICATION	1.1729096629209481E-4	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.997295826193746	WITHOUT_CLASSIFICATION	0.0027041738062539653	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9997747112067069	WITHOUT_CLASSIFICATION	2.2528879329301052E-4	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999599261053682	WITHOUT_CLASSIFICATION	4.0073894631766394E-5	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999237465278601	WITHOUT_CLASSIFICATION	7.6253472139867E-5	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9997631094989603	WITHOUT_CLASSIFICATION	2.3689050103971798E-4	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999776710768707	WITHOUT_CLASSIFICATION	2.2328923129206292E-5	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999941884859253	WITHOUT_CLASSIFICATION	5.811514074712242E-6	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999904146202245	WITHOUT_CLASSIFICATION	9.585379775441816E-6	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9998596005316756	WITHOUT_CLASSIFICATION	1.4039946832441875E-4	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9998982904710445	WITHOUT_CLASSIFICATION	1.0170952895553344E-4	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999109484389412	WITHOUT_CLASSIFICATION	8.905156105879446E-5	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999854063266408	WITHOUT_CLASSIFICATION	1.4593673359193047E-4	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9998586074180547	WITHOUT_CLASSIFICATION	1.4139258194527631E-4	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999765361318175	WITHOUT_CLASSIFICATION	2.3463868182498656E-5	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9998479818385125	WITHOUT_CLASSIFICATION	1.520181614873996E-4	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9041663278800939	WITHOUT_CLASSIFICATION	0.0958336721199061	IMPLEMENTATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9998916486281666	WITHOUT_CLASSIFICATION	1.0835137183338707E-4	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998663200965755	WITHOUT_CLASSIFICATION	1.3367990342452127E-4	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999716611168925	WITHOUT_CLASSIFICATION	2.833888310746584E-5	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9994735722201417	WITHOUT_CLASSIFICATION	5.264277798582704E-4	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999881700797559	WITHOUT_CLASSIFICATION	1.1829920244077361E-5	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999581489573187	WITHOUT_CLASSIFICATION	4.1851042681289814E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999217977947776	WITHOUT_CLASSIFICATION	7.820220522238328E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999942918405934	WITHOUT_CLASSIFICATION	5.708159406567339E-6	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999695600526488	WITHOUT_CLASSIFICATION	3.043994735117836E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999256342341093	WITHOUT_CLASSIFICATION	7.436576589070396E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999461982970377	WITHOUT_CLASSIFICATION	5.3801702962374666E-5	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999516295311149	WITHOUT_CLASSIFICATION	4.8370468885074965E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999256342341093	WITHOUT_CLASSIFICATION	7.436576589070396E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999695600526488	WITHOUT_CLASSIFICATION	3.043994735117836E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999461982970377	WITHOUT_CLASSIFICATION	5.3801702962374666E-5	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999414485379662	WITHOUT_CLASSIFICATION	5.8551462033857546E-5	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999726846463268	WITHOUT_CLASSIFICATION	2.7315353673213483E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.99997806246846	WITHOUT_CLASSIFICATION	2.1937531539944103E-5	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9998430106028717	WITHOUT_CLASSIFICATION	1.5698939712825493E-4	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999992851857451	WITHOUT_CLASSIFICATION	7.148142549338166E-7	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9873895990194793	WITHOUT_CLASSIFICATION	0.012610400980520724	IMPLEMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999317050570523	WITHOUT_CLASSIFICATION	6.829494294764991E-5	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998926021529907	WITHOUT_CLASSIFICATION	1.0739784700925972E-4	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999943785255038	WITHOUT_CLASSIFICATION	5.621474496186163E-5	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999069178715388	WITHOUT_CLASSIFICATION	9.308212846123728E-5	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9998270013821445	WITHOUT_CLASSIFICATION	1.7299861785534355E-4	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999686459565676	WITHOUT_CLASSIFICATION	3.135404343235393E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998635279315512	WITHOUT_CLASSIFICATION	1.3647206844884588E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9998381886569457	WITHOUT_CLASSIFICATION	1.6181134305421293E-4	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999728359299926	WITHOUT_CLASSIFICATION	2.7164070007289353E-5	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999418003403832	WITHOUT_CLASSIFICATION	5.8199659616713385E-5	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999901559792597	WITHOUT_CLASSIFICATION	9.844020740405535E-6	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.999930436183504	WITHOUT_CLASSIFICATION	6.956381649607358E-5	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999836183979388	WITHOUT_CLASSIFICATION	1.6381602061142675E-5	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998527209801171	WITHOUT_CLASSIFICATION	1.4727901988291215E-4	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9998212255503011	WITHOUT_CLASSIFICATION	1.7877444969889236E-4	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999418823729106	WITHOUT_CLASSIFICATION	5.811762708952299E-5	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998746842872477	WITHOUT_CLASSIFICATION	1.2531571275228677E-4	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999813182232522	WITHOUT_CLASSIFICATION	1.8681776747861085E-5	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998417665846759	WITHOUT_CLASSIFICATION	1.5823341532401338E-4	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998417665846759	WITHOUT_CLASSIFICATION	1.5823341532401338E-4	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999257117752688	WITHOUT_CLASSIFICATION	7.4288224731239E-5	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999257117752688	WITHOUT_CLASSIFICATION	7.4288224731239E-5	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.99966116349705	WITHOUT_CLASSIFICATION	3.388365029499071E-4	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999901559792597	WITHOUT_CLASSIFICATION	9.844020740405535E-6	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998760941535697	WITHOUT_CLASSIFICATION	1.2390584643028518E-4	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999155839580888	WITHOUT_CLASSIFICATION	8.441604191123273E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999733371742198	WITHOUT_CLASSIFICATION	2.666282578019047E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999733371742198	WITHOUT_CLASSIFICATION	2.666282578019047E-4	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999536882732469	WITHOUT_CLASSIFICATION	4.631172675318724E-5	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999639094990724	WITHOUT_CLASSIFICATION	3.609050092761691E-5	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999235953763641	WITHOUT_CLASSIFICATION	7.640462363581973E-5	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9998649596051957	WITHOUT_CLASSIFICATION	1.3504039480424435E-4	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999057071352173	WITHOUT_CLASSIFICATION	9.429286478269924E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999997836508277	WITHOUT_CLASSIFICATION	2.1634917229804584E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998702215314054	WITHOUT_CLASSIFICATION	1.2977846859463818E-4	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9998210935610404	WITHOUT_CLASSIFICATION	1.789064389595533E-4	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9998299634406225	WITHOUT_CLASSIFICATION	1.7003655937745238E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999713327217127	WITHOUT_CLASSIFICATION	2.866727828730626E-5	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999237319278479	WITHOUT_CLASSIFICATION	7.626807215208493E-5	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9998230531390625	WITHOUT_CLASSIFICATION	1.7694686093749418E-4	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9998561595175531	WITHOUT_CLASSIFICATION	1.4384048244691E-4	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9998028258493575	WITHOUT_CLASSIFICATION	1.971741506425121E-4	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9998085039677989	WITHOUT_CLASSIFICATION	1.9149603220115565E-4	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999295432966582	WITHOUT_CLASSIFICATION	7.045670334188493E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998575971686786	WITHOUT_CLASSIFICATION	1.4240283132146915E-4	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9984436674425521	WITHOUT_CLASSIFICATION	0.001556332557448026	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9997818737610858	WITHOUT_CLASSIFICATION	2.1812623891428806E-4	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999938166269996	WITHOUT_CLASSIFICATION	6.1833730004531426E-6	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9998754079128225	WITHOUT_CLASSIFICATION	1.245920871775E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9998740749266791	WITHOUT_CLASSIFICATION	1.2592507332083924E-4	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998422273775327	WITHOUT_CLASSIFICATION	1.5777262246723325E-4	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999730422043438	WITHOUT_CLASSIFICATION	2.695779565621201E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999658319416057	WITHOUT_CLASSIFICATION	3.4168058394349566E-5	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999372099753225	WITHOUT_CLASSIFICATION	6.279002467744731E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998241146872745	WITHOUT_CLASSIFICATION	1.7588531272545664E-4	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999599261053682	WITHOUT_CLASSIFICATION	4.0073894631766394E-5	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999498159073756	WITHOUT_CLASSIFICATION	5.018409262446983E-5	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999826184370119	WITHOUT_CLASSIFICATION	1.7381562988162872E-5	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998310453857289	WITHOUT_CLASSIFICATION	1.6895461427114992E-4	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998395172762228	WITHOUT_CLASSIFICATION	1.604827237771573E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9998142486548854	WITHOUT_CLASSIFICATION	1.8575134511448075E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9998142486548854	WITHOUT_CLASSIFICATION	1.8575134511448075E-4	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999611957051587	WITHOUT_CLASSIFICATION	3.880429484121922E-5	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.999786047603464	WITHOUT_CLASSIFICATION	2.139523965359426E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999565490387011	WITHOUT_CLASSIFICATION	4.345096129881206E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999565490387011	WITHOUT_CLASSIFICATION	4.345096129881206E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999442523860826	WITHOUT_CLASSIFICATION	5.5747613917279324E-5	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999001732782473	WITHOUT_CLASSIFICATION	9.982672175258042E-5	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999066810004088	WITHOUT_CLASSIFICATION	9.331899959120918E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9995757997524375	WITHOUT_CLASSIFICATION	4.242002475624945E-4	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9998372176641241	WITHOUT_CLASSIFICATION	1.6278233587586191E-4	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999619372780304	WITHOUT_CLASSIFICATION	3.806272196959831E-5	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9996552353655219	WITHOUT_CLASSIFICATION	3.447646344781081E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999022465299544	WITHOUT_CLASSIFICATION	9.775347004560575E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999427351774961	WITHOUT_CLASSIFICATION	5.7264822503920915E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999427351774961	WITHOUT_CLASSIFICATION	5.7264822503920915E-5	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999419336866843	WITHOUT_CLASSIFICATION	5.806631331578415E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9997814920811344	WITHOUT_CLASSIFICATION	2.1850791886546576E-4	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9997814920811344	WITHOUT_CLASSIFICATION	2.1850791886546576E-4	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999525850962027	WITHOUT_CLASSIFICATION	4.741490379741239E-5	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999297860980975	WITHOUT_CLASSIFICATION	7.021390190260158E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9960972909821211	WITHOUT_CLASSIFICATION	0.003902709017879051	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999207754384954	WITHOUT_CLASSIFICATION	7.92245615046424E-5	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999396453971416	WITHOUT_CLASSIFICATION	6.0354602858336756E-5	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999473886163841	WITHOUT_CLASSIFICATION	5.2611383615877726E-5	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999979315826	WITHOUT_CLASSIFICATION	2.0684174000108378E-6	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999400715117105	WITHOUT_CLASSIFICATION	5.992848828937544E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999606962091525	WITHOUT_CLASSIFICATION	3.9303790847388566E-5	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9998770126167386	WITHOUT_CLASSIFICATION	1.2298738326151226E-4	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999869238012253	WITHOUT_CLASSIFICATION	1.3076198774692235E-5	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9998975614086503	WITHOUT_CLASSIFICATION	1.02438591349714E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999763337215408	WITHOUT_CLASSIFICATION	2.3666278459202352E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999763337215408	WITHOUT_CLASSIFICATION	2.3666278459202352E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999763337215408	WITHOUT_CLASSIFICATION	2.3666278459202352E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999763337215408	WITHOUT_CLASSIFICATION	2.3666278459202352E-5	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9998700183038166	WITHOUT_CLASSIFICATION	1.2998169618328505E-4	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.999985693669669	WITHOUT_CLASSIFICATION	1.4306330331042891E-5	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998070956527451	WITHOUT_CLASSIFICATION	1.9290434725504374E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.999754977189779	WITHOUT_CLASSIFICATION	2.450228102209494E-4	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999244473781822	WITHOUT_CLASSIFICATION	7.555262181782271E-5	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9998041471997715	WITHOUT_CLASSIFICATION	1.9585280022858145E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997536287664353	WITHOUT_CLASSIFICATION	2.463712335647358E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9997288522292417	WITHOUT_CLASSIFICATION	2.711477707583469E-4	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9998014411345791	WITHOUT_CLASSIFICATION	1.985588654209342E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997536287664353	WITHOUT_CLASSIFICATION	2.463712335647358E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997536287664353	WITHOUT_CLASSIFICATION	2.463712335647358E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999343978116344	WITHOUT_CLASSIFICATION	6.560218836558742E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999062319349281	WITHOUT_CLASSIFICATION	9.376806507187599E-5	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9998249367673313	WITHOUT_CLASSIFICATION	1.7506323266864245E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998997953717096	WITHOUT_CLASSIFICATION	1.0020462829044448E-4	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999458565388466	WITHOUT_CLASSIFICATION	5.4143461153354394E-5	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999461935077298	WITHOUT_CLASSIFICATION	5.3806492270123413E-5	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999602020805807	WITHOUT_CLASSIFICATION	3.979791941938983E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998997953717096	WITHOUT_CLASSIFICATION	1.0020462829044448E-4	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999706349870486	WITHOUT_CLASSIFICATION	2.9365012951380688E-5	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998934841879341	WITHOUT_CLASSIFICATION	1.0651581206587469E-4	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999406031558584	WITHOUT_CLASSIFICATION	5.9396844141622656E-5	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9998092594937124	WITHOUT_CLASSIFICATION	1.9074050628767032E-4	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999659880703289	WITHOUT_CLASSIFICATION	3.401192967114134E-5	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999263690453015	WITHOUT_CLASSIFICATION	7.363095469848032E-5	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999573295355644	WITHOUT_CLASSIFICATION	4.267046443561086E-5	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9998468010403395	WITHOUT_CLASSIFICATION	1.531989596604119E-4	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998229968721555	WITHOUT_CLASSIFICATION	1.770031278445425E-4	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999719150804148	WITHOUT_CLASSIFICATION	2.8084919585150277E-5	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998228974705818	WITHOUT_CLASSIFICATION	1.7710252941819253E-4	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9998280605640198	WITHOUT_CLASSIFICATION	1.719394359802052E-4	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999396880248198	WITHOUT_CLASSIFICATION	6.031197518016317E-5	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998042461386095	WITHOUT_CLASSIFICATION	1.9575386139053278E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999824392001047	WITHOUT_CLASSIFICATION	1.7560799895395374E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998909088102581	WITHOUT_CLASSIFICATION	1.0909118974187396E-4	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999205608163065	WITHOUT_CLASSIFICATION	7.94391836934881E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998843069316593	WITHOUT_CLASSIFICATION	1.15693068340706E-4	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997884275744784	WITHOUT_CLASSIFICATION	2.115724255216503E-4	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998843069316593	WITHOUT_CLASSIFICATION	1.15693068340706E-4	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999295694945114	WITHOUT_CLASSIFICATION	7.043050548857564E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999530413330979	WITHOUT_CLASSIFICATION	4.6958666902027525E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9998365747895804	WITHOUT_CLASSIFICATION	1.634252104196804E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999438409020952	WITHOUT_CLASSIFICATION	5.615909790490543E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999205608163065	WITHOUT_CLASSIFICATION	7.94391836934881E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997884275744784	WITHOUT_CLASSIFICATION	2.115724255216503E-4	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999295694945114	WITHOUT_CLASSIFICATION	7.043050548857564E-5	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9998803558154701	WITHOUT_CLASSIFICATION	1.1964418452992129E-4	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9998614495703798	WITHOUT_CLASSIFICATION	1.385504296202754E-4	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9997859512362846	WITHOUT_CLASSIFICATION	2.1404876371547202E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9998260946772204	WITHOUT_CLASSIFICATION	1.739053227797138E-4	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999780102511672	WITHOUT_CLASSIFICATION	2.1989748832802287E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999771736529811	WITHOUT_CLASSIFICATION	2.2826347018967762E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998575971686786	WITHOUT_CLASSIFICATION	1.4240283132146915E-4	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999530413330979	WITHOUT_CLASSIFICATION	4.6958666902027525E-5	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999900859970574	WITHOUT_CLASSIFICATION	9.914002942651479E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.99993503686411	WITHOUT_CLASSIFICATION	6.49631358900274E-5	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9998735137050877	WITHOUT_CLASSIFICATION	1.2648629491230156E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998575971686786	WITHOUT_CLASSIFICATION	1.4240283132146915E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998241146872745	WITHOUT_CLASSIFICATION	1.7588531272545664E-4	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999216435411391	WITHOUT_CLASSIFICATION	7.835645886092475E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998575971686786	WITHOUT_CLASSIFICATION	1.4240283132146915E-4	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999290219595962	WITHOUT_CLASSIFICATION	7.097804040387901E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999033897199145	WITHOUT_CLASSIFICATION	9.661028008550118E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998241146872745	WITHOUT_CLASSIFICATION	1.7588531272545664E-4	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9994064813113932	WITHOUT_CLASSIFICATION	5.935186886068694E-4	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9998026359583928	WITHOUT_CLASSIFICATION	1.9736404160726893E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999764869468889	WITHOUT_CLASSIFICATION	2.3513053111105066E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9998141565139653	WITHOUT_CLASSIFICATION	1.858434860346128E-4	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999720768500656	WITHOUT_CLASSIFICATION	2.792314993428786E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.99988470433087	WITHOUT_CLASSIFICATION	1.1529566913007645E-4	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999206641383703	WITHOUT_CLASSIFICATION	7.933586162968356E-5	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9998689730839564	WITHOUT_CLASSIFICATION	1.310269160435616E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999674896568885	WITHOUT_CLASSIFICATION	3.2510343111470265E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9960972909821211	WITHOUT_CLASSIFICATION	0.003902709017879051	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9998581354963774	WITHOUT_CLASSIFICATION	1.4186450362257963E-4	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.999969162110282	WITHOUT_CLASSIFICATION	3.083788971807843E-5	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9997563601390185	WITHOUT_CLASSIFICATION	2.4363986098144464E-4	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998091593632104	WITHOUT_CLASSIFICATION	1.90840636789561E-4	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999021986421177	WITHOUT_CLASSIFICATION	9.780135788230163E-5	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999582621132196	WITHOUT_CLASSIFICATION	4.1737886780370086E-5	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9998359051992087	WITHOUT_CLASSIFICATION	1.6409480079120761E-4	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999578468708817	WITHOUT_CLASSIFICATION	4.21531291183022E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9998825287082798	WITHOUT_CLASSIFICATION	1.1747129172025836E-4	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999434529653142	WITHOUT_CLASSIFICATION	5.6547034685945094E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9960972909821211	WITHOUT_CLASSIFICATION	0.003902709017879051	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998456852315373	WITHOUT_CLASSIFICATION	1.543147684627135E-4	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998207360224625	WITHOUT_CLASSIFICATION	1.7926397753763125E-4	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9998514002761199	WITHOUT_CLASSIFICATION	1.4859972388025182E-4	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999002879820466	WITHOUT_CLASSIFICATION	9.971201795338242E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999320757787798	WITHOUT_CLASSIFICATION	6.792422122016761E-5	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999553661425938	WITHOUT_CLASSIFICATION	4.463385740624499E-5	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9998588818862773	WITHOUT_CLASSIFICATION	1.4111811372287254E-4	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998287357428204	WITHOUT_CLASSIFICATION	1.712642571796791E-4	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999171062761314	WITHOUT_CLASSIFICATION	8.289372386861249E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9960972909821211	WITHOUT_CLASSIFICATION	0.003902709017879051	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998809858331346	WITHOUT_CLASSIFICATION	1.1901416686555857E-4	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9998514973126641	WITHOUT_CLASSIFICATION	1.4850268733596956E-4	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9997554737453305	WITHOUT_CLASSIFICATION	2.4452625466946364E-4	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9997999962739654	WITHOUT_CLASSIFICATION	2.0000372603446348E-4	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999359778336316	WITHOUT_CLASSIFICATION	6.402216636841791E-5	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.999760552556276	WITHOUT_CLASSIFICATION	2.3944744372402484E-4	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999857933715219	WITHOUT_CLASSIFICATION	1.4206628477992478E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998241146872745	WITHOUT_CLASSIFICATION	1.7588531272545664E-4	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998492752556608	WITHOUT_CLASSIFICATION	1.5072474433916968E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999287806297672	WITHOUT_CLASSIFICATION	7.121937023285458E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999287806297672	WITHOUT_CLASSIFICATION	7.121937023285458E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9998322678195466	WITHOUT_CLASSIFICATION	1.677321804533372E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.99988470433087	WITHOUT_CLASSIFICATION	1.1529566913007645E-4	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9998657921655905	WITHOUT_CLASSIFICATION	1.3420783440966277E-4	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999606523267918	WITHOUT_CLASSIFICATION	3.934767320829915E-5	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999666995921431	WITHOUT_CLASSIFICATION	3.33004078569432E-5	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999071027872548	WITHOUT_CLASSIFICATION	9.289721274527394E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998674797100702	WITHOUT_CLASSIFICATION	1.3252028992976977E-4	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999000291814687	WITHOUT_CLASSIFICATION	9.997081853126644E-5	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999405316685006	WITHOUT_CLASSIFICATION	5.946833149936725E-5	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998794702672085	WITHOUT_CLASSIFICATION	1.2052973279155175E-4	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.999935583064318	WITHOUT_CLASSIFICATION	6.441693568206591E-5	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999832190253968	WITHOUT_CLASSIFICATION	1.6780974603220015E-5	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999925278183875	WITHOUT_CLASSIFICATION	7.472181612527943E-6	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999645304988322	WITHOUT_CLASSIFICATION	3.546950116784629E-5	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999985242628697	WITHOUT_CLASSIFICATION	1.4757371302450487E-6	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999893220633036	WITHOUT_CLASSIFICATION	1.0677936696406721E-4	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999530606037966	WITHOUT_CLASSIFICATION	4.693939620341689E-5	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999779520918172	WITHOUT_CLASSIFICATION	2.2047908182863932E-5	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999698083657748	WITHOUT_CLASSIFICATION	3.01916342252402E-5	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999887299498372	WITHOUT_CLASSIFICATION	1.1270050162819872E-5	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999563598991894	WITHOUT_CLASSIFICATION	4.364010081051596E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999462549170948	WITHOUT_CLASSIFICATION	5.374508290522843E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999923364344356	WITHOUT_CLASSIFICATION	7.663565564358737E-6	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.999760552556276	WITHOUT_CLASSIFICATION	2.3944744372402484E-4	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999917039239777	WITHOUT_CLASSIFICATION	8.29607602230162E-6	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999600091088882	WITHOUT_CLASSIFICATION	3.999089111175835E-5	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999852729470639	WITHOUT_CLASSIFICATION	1.4727052936179513E-5	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999221167728387	WITHOUT_CLASSIFICATION	7.788322716132462E-5	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999571968212061	WITHOUT_CLASSIFICATION	4.2803178793868975E-5	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999913258116666	WITHOUT_CLASSIFICATION	8.67418833339297E-5	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999850539166897	WITHOUT_CLASSIFICATION	1.4946083310284389E-5	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999836221241641	WITHOUT_CLASSIFICATION	1.637787583586327E-5	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999843845357169	WITHOUT_CLASSIFICATION	1.561546428304796E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999829966397578	WITHOUT_CLASSIFICATION	1.700336024231618E-5	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999060781539747	WITHOUT_CLASSIFICATION	9.39218460252899E-5	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999003008864348	WITHOUT_CLASSIFICATION	9.96991135652692E-5	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.999904646055376	WITHOUT_CLASSIFICATION	9.535394462403922E-5	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9998380034025417	WITHOUT_CLASSIFICATION	1.6199659745840778E-4	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999281660496988	WITHOUT_CLASSIFICATION	7.183395030116785E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999281660496988	WITHOUT_CLASSIFICATION	7.183395030116785E-5	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9998830966299416	WITHOUT_CLASSIFICATION	1.1690337005846755E-4	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9997486379627736	WITHOUT_CLASSIFICATION	2.5136203722648604E-4	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999190861507102	WITHOUT_CLASSIFICATION	8.091384928977927E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999190861507102	WITHOUT_CLASSIFICATION	8.091384928977927E-5	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999538130840478	WITHOUT_CLASSIFICATION	4.618691595228968E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9998337285598691	WITHOUT_CLASSIFICATION	1.6627144013083684E-4	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999807867987498	WITHOUT_CLASSIFICATION	1.921320125019556E-5	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999869543684804	WITHOUT_CLASSIFICATION	1.304563151958017E-5	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999209472619118	WITHOUT_CLASSIFICATION	7.9052738088113E-5	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999242649028696	WITHOUT_CLASSIFICATION	7.573509713038524E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999504838248215	WITHOUT_CLASSIFICATION	4.9516175178372444E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999504838248215	WITHOUT_CLASSIFICATION	4.9516175178372444E-5	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999241427754391	WITHOUT_CLASSIFICATION	7.585722456100043E-5	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9998743063262022	WITHOUT_CLASSIFICATION	1.2569367379786485E-4	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9998443201538048	WITHOUT_CLASSIFICATION	1.5567984619528253E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999142034867501	WITHOUT_CLASSIFICATION	8.579651324992593E-5	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999142034867501	WITHOUT_CLASSIFICATION	8.579651324992593E-5	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9997910449420919	WITHOUT_CLASSIFICATION	2.0895505790803599E-4	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998783645618431	WITHOUT_CLASSIFICATION	1.2163543815678521E-4	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999688677436147	WITHOUT_CLASSIFICATION	3.113225638528723E-5	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999285599457286	WITHOUT_CLASSIFICATION	7.144005427135441E-5	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9998658364499439	WITHOUT_CLASSIFICATION	1.3416355005609537E-4	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9997604767426094	WITHOUT_CLASSIFICATION	2.3952325739066299E-4	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999079105452133	WITHOUT_CLASSIFICATION	9.208945478662953E-5	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999248421867817	WITHOUT_CLASSIFICATION	7.515781321823025E-5	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999162099592839	WITHOUT_CLASSIFICATION	8.379004071616713E-5	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998119283803523	WITHOUT_CLASSIFICATION	1.880716196477424E-4	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999134743245542	WITHOUT_CLASSIFICATION	8.652567544569103E-5	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9998870947729108	WITHOUT_CLASSIFICATION	1.1290522708914975E-4	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9988661986818519	WITHOUT_CLASSIFICATION	0.0011338013181481053	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999335467385002	WITHOUT_CLASSIFICATION	6.645326149974022E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.999752087253291	WITHOUT_CLASSIFICATION	2.4791274670894536E-4	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999892157380136	WITHOUT_CLASSIFICATION	1.0784261986348845E-5	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998439480075402	WITHOUT_CLASSIFICATION	1.5605199245988753E-4	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999715866652825	WITHOUT_CLASSIFICATION	2.841333471742214E-5	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999657791223004	WITHOUT_CLASSIFICATION	3.422087769953594E-5	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999309277722808	WITHOUT_CLASSIFICATION	6.907222771926054E-5	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999163822936139	WITHOUT_CLASSIFICATION	8.361770638608886E-5	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.999820962772817	WITHOUT_CLASSIFICATION	1.790372271829697E-4	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.999853989787705	WITHOUT_CLASSIFICATION	1.460102122950103E-4	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999087934243185	WITHOUT_CLASSIFICATION	9.120657568149574E-5	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9959611302076585	WITHOUT_CLASSIFICATION	0.004038869792341518	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999547565315596	WITHOUT_CLASSIFICATION	4.524346844042598E-5	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999412124224597	WITHOUT_CLASSIFICATION	5.8787577540376585E-5	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9997999012549994	WITHOUT_CLASSIFICATION	2.0009874500065804E-4	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999859546792778	WITHOUT_CLASSIFICATION	1.4045320722384958E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999315443110626	WITHOUT_CLASSIFICATION	6.845568893744645E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999770436793599	WITHOUT_CLASSIFICATION	2.295632064002116E-5	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9998861668895174	WITHOUT_CLASSIFICATION	1.1383311048261095E-4	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999793272643999	WITHOUT_CLASSIFICATION	2.0672735600206732E-5	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998309765684469	WITHOUT_CLASSIFICATION	1.6902343155315207E-4	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.999929183403902	WITHOUT_CLASSIFICATION	7.081659609802764E-5	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998099443827884	WITHOUT_CLASSIFICATION	1.9005561721150097E-4	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9997692393531883	WITHOUT_CLASSIFICATION	2.3076064681171754E-4	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9998797933642436	WITHOUT_CLASSIFICATION	1.2020663575648726E-4	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.99991171487439	WITHOUT_CLASSIFICATION	8.828512560993233E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999748424262677	WITHOUT_CLASSIFICATION	2.5157573732324348E-5	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999878151217421	WITHOUT_CLASSIFICATION	1.2184878257902016E-4	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9998078815779029	WITHOUT_CLASSIFICATION	1.9211842209706422E-4	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9998527090935327	WITHOUT_CLASSIFICATION	1.4729090646720545E-4	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9998402570753481	WITHOUT_CLASSIFICATION	1.5974292465183472E-4	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9997618892388016	WITHOUT_CLASSIFICATION	2.3811076119842415E-4	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9997759106449051	WITHOUT_CLASSIFICATION	2.2408935509488857E-4	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9997649547557769	WITHOUT_CLASSIFICATION	2.350452442231726E-4	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999791257339259	WITHOUT_CLASSIFICATION	2.0874266074109557E-5	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999977894939332	WITHOUT_CLASSIFICATION	2.2105060667943592E-5	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999951168806208	WITHOUT_CLASSIFICATION	4.8831193792013084E-5	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.999969779729806	WITHOUT_CLASSIFICATION	3.02202701939651E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9997872829870406	WITHOUT_CLASSIFICATION	2.1271701295930845E-4	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9997627256782506	WITHOUT_CLASSIFICATION	2.3727432174939307E-4	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999690054535365	WITHOUT_CLASSIFICATION	3.099454646346646E-5	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9998668509549661	WITHOUT_CLASSIFICATION	1.3314904503395562E-4	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999054666269073	WITHOUT_CLASSIFICATION	9.453337309274754E-5	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9998383139549482	WITHOUT_CLASSIFICATION	1.6168604505193053E-4	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9998940490172241	WITHOUT_CLASSIFICATION	1.059509827759609E-4	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999517161414406	WITHOUT_CLASSIFICATION	4.828385855937005E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9998959527225636	WITHOUT_CLASSIFICATION	1.0404727743650677E-4	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999260247412519	WITHOUT_CLASSIFICATION	7.397525874803505E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999260247412519	WITHOUT_CLASSIFICATION	7.397525874803505E-5	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999903528112322	WITHOUT_CLASSIFICATION	9.647188767806204E-6	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999941304432794	WITHOUT_CLASSIFICATION	5.869556720492019E-6	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999988994849318	WITHOUT_CLASSIFICATION	1.1005150681918512E-6	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999794559200118	WITHOUT_CLASSIFICATION	2.054407998817752E-5	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999939455445862	WITHOUT_CLASSIFICATION	6.054455413785419E-5	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999289387704263	WITHOUT_CLASSIFICATION	7.106122957370731E-5	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999700016853215	WITHOUT_CLASSIFICATION	2.9998314678533813E-5	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.999964433519353	WITHOUT_CLASSIFICATION	3.5566480646979504E-5	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999108787897227	WITHOUT_CLASSIFICATION	8.912121027726888E-5	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999815137004999	WITHOUT_CLASSIFICATION	1.8486299500065386E-5	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999800924525734	WITHOUT_CLASSIFICATION	1.9907547426636917E-5	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9998661177370122	WITHOUT_CLASSIFICATION	1.338822629878609E-4	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999990967114477	WITHOUT_CLASSIFICATION	9.032885523064973E-6	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999541512897859	WITHOUT_CLASSIFICATION	4.58487102140973E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998820424536101	WITHOUT_CLASSIFICATION	1.1795754638985285E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998820424536101	WITHOUT_CLASSIFICATION	1.1795754638985285E-4	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999408378535973	WITHOUT_CLASSIFICATION	5.9162146402703444E-5	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.999965732381722	WITHOUT_CLASSIFICATION	3.4267618278008E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999306743275154	WITHOUT_CLASSIFICATION	6.932567248463377E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999801957096466	WITHOUT_CLASSIFICATION	1.9804290353432275E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999121029937659	WITHOUT_CLASSIFICATION	8.789700623419243E-5	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998508963630689	WITHOUT_CLASSIFICATION	1.4910363693105893E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9997957970920897	WITHOUT_CLASSIFICATION	2.0420290791041193E-4	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9984667404022899	WITHOUT_CLASSIFICATION	0.0015332595977101036	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999385614761976	WITHOUT_CLASSIFICATION	6.143852380238072E-5	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999670681661887	WITHOUT_CLASSIFICATION	3.293183381125125E-5	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999962351181505	WITHOUT_CLASSIFICATION	3.7648818495638934E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999072589890503	WITHOUT_CLASSIFICATION	9.274101094968102E-5	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999815634167458	WITHOUT_CLASSIFICATION	1.8436583254117608E-5	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999642559088864	WITHOUT_CLASSIFICATION	3.574409111355868E-5	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999682471508724	WITHOUT_CLASSIFICATION	3.175284912761297E-5	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999322300723669	WITHOUT_CLASSIFICATION	6.776992763317532E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.99997688646211	WITHOUT_CLASSIFICATION	2.3113537890027573E-5	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999941053621167	WITHOUT_CLASSIFICATION	5.894637883229947E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9998745374113163	WITHOUT_CLASSIFICATION	1.2546258868369466E-4	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9997606070002488	WITHOUT_CLASSIFICATION	2.393929997510632E-4	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999720356072764	WITHOUT_CLASSIFICATION	2.7964392723571547E-5	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999952174716419	WITHOUT_CLASSIFICATION	4.7825283580775985E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999966422946273	WITHOUT_CLASSIFICATION	3.3577053727511726E-6	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9997537096359322	WITHOUT_CLASSIFICATION	2.4629036406766596E-4	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999555240726853	WITHOUT_CLASSIFICATION	4.447592731464774E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999250060900211	WITHOUT_CLASSIFICATION	7.499390997893455E-5	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999605389822217	WITHOUT_CLASSIFICATION	3.946101777829105E-5	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999741740265465	WITHOUT_CLASSIFICATION	2.582597345339222E-5	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999866621626087	WITHOUT_CLASSIFICATION	1.3337837391393443E-5	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999981189898761	WITHOUT_CLASSIFICATION	1.8810101239063558E-5	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999911052191739	WITHOUT_CLASSIFICATION	8.89478082616416E-6	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999370349747172	WITHOUT_CLASSIFICATION	6.296502528283639E-5	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999486991444706	WITHOUT_CLASSIFICATION	5.130085552950039E-5	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999603081267731	WITHOUT_CLASSIFICATION	3.969187322684523E-5	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999841645718971	WITHOUT_CLASSIFICATION	1.583542810293451E-5	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999954850712256	WITHOUT_CLASSIFICATION	4.514928774374724E-6	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999550312859151	WITHOUT_CLASSIFICATION	4.4968714084877946E-5	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999900574935144	WITHOUT_CLASSIFICATION	9.942506485569714E-6	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9998653931100947	WITHOUT_CLASSIFICATION	1.346068899053608E-4	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999734022030845	WITHOUT_CLASSIFICATION	2.6597796915617117E-5	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.998587519981834	WITHOUT_CLASSIFICATION	0.0014124800181659733	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.998587519981834	WITHOUT_CLASSIFICATION	0.0014124800181659733	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999861622409639	WITHOUT_CLASSIFICATION	1.3837759036000199E-5	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999982687285801	WITHOUT_CLASSIFICATION	1.7312714198821967E-6	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999771468535652	WITHOUT_CLASSIFICATION	2.2853146434806585E-5	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999907199992124	WITHOUT_CLASSIFICATION	9.2800007875981E-5	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999868864359119	WITHOUT_CLASSIFICATION	1.3113564088028672E-5	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999676225923154	WITHOUT_CLASSIFICATION	3.237740768450195E-5	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.999904590901334	WITHOUT_CLASSIFICATION	9.540909866599736E-5	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999562166679021	WITHOUT_CLASSIFICATION	4.378333209788629E-5	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999722369937787	WITHOUT_CLASSIFICATION	2.7763006221389928E-5	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999281196046953	WITHOUT_CLASSIFICATION	7.188039530467067E-5	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999049242169166	WITHOUT_CLASSIFICATION	9.50757830834574E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997170563015786	WITHOUT_CLASSIFICATION	2.8294369842149367E-4	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999749437566212	WITHOUT_CLASSIFICATION	2.5056243378696552E-5	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999567990188346	WITHOUT_CLASSIFICATION	4.32009811653711E-5	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999882309144461	WITHOUT_CLASSIFICATION	1.1769085553848508E-5	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999567060526506	WITHOUT_CLASSIFICATION	4.3293947349325424E-5	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999203811844235	WITHOUT_CLASSIFICATION	7.961881557647952E-5	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999917518874953	WITHOUT_CLASSIFICATION	8.248112504650218E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9998718237684371	WITHOUT_CLASSIFICATION	1.2817623156300247E-4	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999504575669025	WITHOUT_CLASSIFICATION	4.95424330976098E-5	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999793224442045	WITHOUT_CLASSIFICATION	2.067755579547798E-5	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999595440526677	WITHOUT_CLASSIFICATION	4.04559473323124E-5	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999753737372764	WITHOUT_CLASSIFICATION	2.462626272352056E-5	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999040090038607	WITHOUT_CLASSIFICATION	9.599099613937328E-5	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9998674878297714	WITHOUT_CLASSIFICATION	1.3251217022857873E-4	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999814615027294	WITHOUT_CLASSIFICATION	1.8538497270643673E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.99998763310857	WITHOUT_CLASSIFICATION	1.2366891429923528E-5	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999998857306414	WITHOUT_CLASSIFICATION	1.1426935873353951E-7	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999995939127352	WITHOUT_CLASSIFICATION	4.060872648215644E-7	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9998434727954219	WITHOUT_CLASSIFICATION	1.5652720457817775E-4	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999622663488034	WITHOUT_CLASSIFICATION	3.773365119666909E-5	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999676410934029	WITHOUT_CLASSIFICATION	3.235890659709118E-5	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999993184637198	WITHOUT_CLASSIFICATION	6.815362801583656E-7	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999515568128698	WITHOUT_CLASSIFICATION	4.84431871300891E-5	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999975169871388	WITHOUT_CLASSIFICATION	2.4830128612249615E-6	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999192385105824	WITHOUT_CLASSIFICATION	8.076148941767972E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999663005461934	WITHOUT_CLASSIFICATION	3.369945380650443E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999948518615417	WITHOUT_CLASSIFICATION	5.148138458275718E-6	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999929624742548	WITHOUT_CLASSIFICATION	7.0375257451915096E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9997753282754311	WITHOUT_CLASSIFICATION	2.2467172456882678E-4	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999272646231745	WITHOUT_CLASSIFICATION	7.2735376825549E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999827024108079	WITHOUT_CLASSIFICATION	1.729758919201005E-5	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999464929508132	WITHOUT_CLASSIFICATION	5.350704918684227E-5	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999994617730854	WITHOUT_CLASSIFICATION	5.382269146667077E-7	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999911039428361	WITHOUT_CLASSIFICATION	8.896057163981149E-6	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9997929535418487	WITHOUT_CLASSIFICATION	2.070464581513422E-4	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999946965260095	WITHOUT_CLASSIFICATION	5.303473990434214E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999990967114477	WITHOUT_CLASSIFICATION	9.032885523064973E-6	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999819929106566	WITHOUT_CLASSIFICATION	1.800708934338425E-5	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999755799971382	WITHOUT_CLASSIFICATION	2.442000286190116E-5	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999399217507974	WITHOUT_CLASSIFICATION	6.007824920266689E-5	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999954783535271	WITHOUT_CLASSIFICATION	4.521646472929887E-6	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.999993229687726	WITHOUT_CLASSIFICATION	6.770312274022915E-6	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999868086888198	WITHOUT_CLASSIFICATION	1.3191311180149722E-5	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999831478981578	WITHOUT_CLASSIFICATION	1.6852101842203305E-5	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999875449989148	WITHOUT_CLASSIFICATION	1.2455001085183174E-5	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999071682087538	WITHOUT_CLASSIFICATION	9.283179124620635E-5	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999056545958784	WITHOUT_CLASSIFICATION	9.434540412158993E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.999999466119446	WITHOUT_CLASSIFICATION	5.338805540829403E-7	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999055244811965	WITHOUT_CLASSIFICATION	9.447551880353754E-5	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999892873197077	WITHOUT_CLASSIFICATION	1.0712680292307359E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999958081559003	WITHOUT_CLASSIFICATION	4.191844099678508E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998390880842888	WITHOUT_CLASSIFICATION	1.6091191571121206E-4	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998256582773999	WITHOUT_CLASSIFICATION	1.7434172260016962E-4	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9998369280915336	WITHOUT_CLASSIFICATION	1.6307190846648204E-4	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999670929214515	WITHOUT_CLASSIFICATION	3.2907078548527825E-5	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999834508864797	WITHOUT_CLASSIFICATION	1.654911352025636E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998390880842888	WITHOUT_CLASSIFICATION	1.6091191571121206E-4	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999045165997957	WITHOUT_CLASSIFICATION	9.548340020422324E-5	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999815184366165	WITHOUT_CLASSIFICATION	1.848156338340837E-5	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999980723905832	WITHOUT_CLASSIFICATION	1.9276094166758207E-6	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999940311800478	WITHOUT_CLASSIFICATION	5.968819952125705E-6	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9998907452639904	WITHOUT_CLASSIFICATION	1.0925473600957835E-4	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999988942575558	WITHOUT_CLASSIFICATION	1.1057424442027012E-5	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999819604154113	WITHOUT_CLASSIFICATION	1.8039584588741863E-5	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9998748975950976	WITHOUT_CLASSIFICATION	1.2510240490245768E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999747152680218	WITHOUT_CLASSIFICATION	2.5284731978153143E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999602299157092	WITHOUT_CLASSIFICATION	3.977008429091133E-5	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999129773276448	WITHOUT_CLASSIFICATION	8.702267235523373E-5	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998479761085661	WITHOUT_CLASSIFICATION	1.5202389143383288E-4	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999432111018902	WITHOUT_CLASSIFICATION	5.678889810965888E-5	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9998209846848276	WITHOUT_CLASSIFICATION	1.7901531517231498E-4	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9998910492399716	WITHOUT_CLASSIFICATION	1.089507600284172E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999923364344356	WITHOUT_CLASSIFICATION	7.663565564358737E-6	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999657886492128	WITHOUT_CLASSIFICATION	3.421135078721473E-5	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999955199122406	WITHOUT_CLASSIFICATION	4.480087759470394E-6	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9921210050846168	WITHOUT_CLASSIFICATION	0.007878994915383226	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.999954689209085	WITHOUT_CLASSIFICATION	4.531079091504869E-5	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999735302527347	WITHOUT_CLASSIFICATION	2.6469747265246826E-5	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999823364518629	WITHOUT_CLASSIFICATION	1.76635481371175E-5	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999643163502527	WITHOUT_CLASSIFICATION	3.568364974717296E-5	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999878517686427	WITHOUT_CLASSIFICATION	1.2148231357356778E-5	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999657407803595	WITHOUT_CLASSIFICATION	3.425921964044677E-5	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999931555548687	WITHOUT_CLASSIFICATION	6.844445131374476E-6	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999983592794892	WITHOUT_CLASSIFICATION	1.6407205107935476E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999724430453567	WITHOUT_CLASSIFICATION	2.7556954643245692E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999827784244639	WITHOUT_CLASSIFICATION	1.72215755361144E-5	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999988937968012	WITHOUT_CLASSIFICATION	1.1062031988841443E-6	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9998477453420075	WITHOUT_CLASSIFICATION	1.522546579925733E-4	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999230588308682	WITHOUT_CLASSIFICATION	7.694116913184263E-5	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999737954276553	WITHOUT_CLASSIFICATION	2.6204572344689673E-5	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999647443901051	WITHOUT_CLASSIFICATION	3.525560989493387E-5	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999986521177424	WITHOUT_CLASSIFICATION	1.347882257594174E-5	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999997685604286	WITHOUT_CLASSIFICATION	2.3143957134960773E-7	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999966593120398	WITHOUT_CLASSIFICATION	3.340687960045355E-6	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999684219358597	WITHOUT_CLASSIFICATION	3.1578064140352116E-5	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999152965419373	WITHOUT_CLASSIFICATION	8.470345806270415E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999786069842385	WITHOUT_CLASSIFICATION	2.1393015761488685E-5	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999271014267279	WITHOUT_CLASSIFICATION	7.289857327213643E-5	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999271014267279	WITHOUT_CLASSIFICATION	7.289857327213643E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999943675409465	WITHOUT_CLASSIFICATION	5.632459053506923E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999630186525679	WITHOUT_CLASSIFICATION	3.69813474321358E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999490601786389	WITHOUT_CLASSIFICATION	5.093982136104627E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9995757997524375	WITHOUT_CLASSIFICATION	4.242002475624945E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9995757997524375	WITHOUT_CLASSIFICATION	4.242002475624945E-4	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999191209809154	WITHOUT_CLASSIFICATION	8.08790190844975E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999343316582124	WITHOUT_CLASSIFICATION	6.56683417876096E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9959573755363608	WITHOUT_CLASSIFICATION	0.004042624463639322	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999933369035175	WITHOUT_CLASSIFICATION	6.663096482501547E-5	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999995414957935	WITHOUT_CLASSIFICATION	4.5850420650211535E-6	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999534429567946	WITHOUT_CLASSIFICATION	4.65570432054037E-5	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999684941388364	WITHOUT_CLASSIFICATION	3.150586116367528E-5	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9998820463259673	WITHOUT_CLASSIFICATION	1.1795367403255698E-4	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999551981288	WITHOUT_CLASSIFICATION	4.480187108946816E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998656277656545	WITHOUT_CLASSIFICATION	1.3437223434554745E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998656277656545	WITHOUT_CLASSIFICATION	1.3437223434554745E-4	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9998530364129483	WITHOUT_CLASSIFICATION	1.4696358705164878E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997519354550441	WITHOUT_CLASSIFICATION	2.480645449558273E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9997581808079103	WITHOUT_CLASSIFICATION	2.4181919208960193E-4	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9998806747660091	WITHOUT_CLASSIFICATION	1.1932523399095843E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998241146872745	WITHOUT_CLASSIFICATION	1.7588531272545664E-4	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.999764615285322	WITHOUT_CLASSIFICATION	2.3538471467793426E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999171342896302	WITHOUT_CLASSIFICATION	8.28657103697656E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998241146872745	WITHOUT_CLASSIFICATION	1.7588531272545664E-4	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999510036277831	WITHOUT_CLASSIFICATION	4.899637221693388E-5	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999577367046307	WITHOUT_CLASSIFICATION	4.2263295369300584E-5	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9997893300642269	WITHOUT_CLASSIFICATION	2.1066993577303054E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999723135170283	WITHOUT_CLASSIFICATION	2.7686482971727917E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999602299157092	WITHOUT_CLASSIFICATION	3.977008429091133E-5	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9998807287454587	WITHOUT_CLASSIFICATION	1.1927125454116927E-4	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9998615601827721	WITHOUT_CLASSIFICATION	1.3843981722792687E-4	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999830863429932	WITHOUT_CLASSIFICATION	1.6913657006891595E-5	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9998980283418402	WITHOUT_CLASSIFICATION	1.0197165815984313E-4	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999137902002657	WITHOUT_CLASSIFICATION	8.620979973431458E-5	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999009634720488	WITHOUT_CLASSIFICATION	9.903652795118524E-5	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9998607986777104	WITHOUT_CLASSIFICATION	1.3920132228956882E-4	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999727816569115	WITHOUT_CLASSIFICATION	2.7218343088577353E-5	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999326321921103	WITHOUT_CLASSIFICATION	6.736780788976413E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998405622918481	WITHOUT_CLASSIFICATION	1.5943770815190047E-4	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998405622918481	WITHOUT_CLASSIFICATION	1.5943770815190047E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998997953717096	WITHOUT_CLASSIFICATION	1.0020462829044448E-4	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999983166811734	WITHOUT_CLASSIFICATION	1.683318826645977E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997536287664353	WITHOUT_CLASSIFICATION	2.463712335647358E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999351305727157	WITHOUT_CLASSIFICATION	6.48694272843161E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.999969505299689	WITHOUT_CLASSIFICATION	3.0494700311007142E-5	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999916284554117	WITHOUT_CLASSIFICATION	8.371544588204967E-6	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999824392001047	WITHOUT_CLASSIFICATION	1.7560799895395374E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999950888257758	WITHOUT_CLASSIFICATION	4.9111742241526686E-6	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9998803558154701	WITHOUT_CLASSIFICATION	1.1964418452992129E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998790355488602	WITHOUT_CLASSIFICATION	1.2096445113986986E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998575971686786	WITHOUT_CLASSIFICATION	1.4240283132146915E-4	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999953602885665	WITHOUT_CLASSIFICATION	4.639711433476476E-6	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999649601770438	WITHOUT_CLASSIFICATION	3.503982295613537E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999986172635456	WITHOUT_CLASSIFICATION	1.3827364544142143E-5	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999434171959858	WITHOUT_CLASSIFICATION	5.658280401421645E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998757787412325	WITHOUT_CLASSIFICATION	1.242212587675331E-4	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999758158127864	WITHOUT_CLASSIFICATION	2.4184187213540583E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999502692673723	WITHOUT_CLASSIFICATION	4.9730732627649885E-5	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998523482175603	WITHOUT_CLASSIFICATION	1.4765178243959936E-4	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999772292484024	WITHOUT_CLASSIFICATION	2.277075159760026E-5	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999995168334147	WITHOUT_CLASSIFICATION	4.831665852367226E-7	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999995287143141	WITHOUT_CLASSIFICATION	4.7128568585668123E-7	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999688677436147	WITHOUT_CLASSIFICATION	3.113225638528723E-5	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.99999999152554	WITHOUT_CLASSIFICATION	8.474459923891568E-9	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999312965593355	WITHOUT_CLASSIFICATION	6.870344066436141E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999312965593355	WITHOUT_CLASSIFICATION	6.870344066436141E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998998970744688	WITHOUT_CLASSIFICATION	1.0010292553122327E-4	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999656396102244	WITHOUT_CLASSIFICATION	3.4360389775663104E-5	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999971777952742	WITHOUT_CLASSIFICATION	2.8222047258018733E-6	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999987385968417	WITHOUT_CLASSIFICATION	1.261403158335892E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99985275617383	WITHOUT_CLASSIFICATION	1.4724382617001055E-4	IMPLEMENTATION
