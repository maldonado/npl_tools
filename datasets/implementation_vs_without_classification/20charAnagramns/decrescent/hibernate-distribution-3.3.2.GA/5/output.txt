// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9996441846958628	WITHOUT_CLASSIFICATION	3.558153041372416E-4	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9996441846958628	WITHOUT_CLASSIFICATION	3.558153041372416E-4	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9995387736918765	WITHOUT_CLASSIFICATION	4.612263081235528E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9992631328280045	WITHOUT_CLASSIFICATION	7.368671719954371E-4	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9998408947454251	WITHOUT_CLASSIFICATION	1.591052545747446E-4	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.854259963735645	IMPLEMENTATION	0.1457400362643551	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9982150246183593	WITHOUT_CLASSIFICATION	0.0017849753816407197	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.8773125720813342	WITHOUT_CLASSIFICATION	0.12268742791866584	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9994518404855544	WITHOUT_CLASSIFICATION	5.481595144456375E-4	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9993962280845818	WITHOUT_CLASSIFICATION	6.037719154182135E-4	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9998729671133092	WITHOUT_CLASSIFICATION	1.2703288669073395E-4	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.9967564417822149	WITHOUT_CLASSIFICATION	0.0032435582177850787	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9998415918969328	WITHOUT_CLASSIFICATION	1.5840810306721545E-4	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9998415918969328	WITHOUT_CLASSIFICATION	1.5840810306721545E-4	IMPLEMENTATION
/**	IMPLEMENTATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.6575449700070188	WITHOUT_CLASSIFICATION	0.3424550299929812	IMPLEMENTATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9422851939408593	IMPLEMENTATION	0.057714806059140665	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.8641139740568035	WITHOUT_CLASSIFICATION	0.1358860259431966	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999982463034519	WITHOUT_CLASSIFICATION	1.7536965480756197E-6	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9995774681481865	WITHOUT_CLASSIFICATION	4.2253185181351564E-4	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9993699733634596	WITHOUT_CLASSIFICATION	6.300266365404352E-4	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9999735067524865	WITHOUT_CLASSIFICATION	2.6493247513406593E-5	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9993292139900949	WITHOUT_CLASSIFICATION	6.707860099051986E-4	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9971650634642283	WITHOUT_CLASSIFICATION	0.002834936535771668	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9971650634642283	WITHOUT_CLASSIFICATION	0.002834936535771668	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9889111487983147	WITHOUT_CLASSIFICATION	0.01108885120168535	IMPLEMENTATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9997668226356919	WITHOUT_CLASSIFICATION	2.3317736430808153E-4	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9858383400938793	WITHOUT_CLASSIFICATION	0.014161659906120755	IMPLEMENTATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9996048290909679	WITHOUT_CLASSIFICATION	3.951709090321528E-4	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9988519837845916	WITHOUT_CLASSIFICATION	0.0011480162154083775	IMPLEMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.999559731713701	WITHOUT_CLASSIFICATION	4.4026828629894945E-4	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9991553040823216	WITHOUT_CLASSIFICATION	8.446959176783388E-4	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9998873582940286	WITHOUT_CLASSIFICATION	1.1264170597133854E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9994808867771257	WITHOUT_CLASSIFICATION	5.19113222874313E-4	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.996853057101767	WITHOUT_CLASSIFICATION	0.003146942898233114	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9995430217784728	WITHOUT_CLASSIFICATION	4.569782215273201E-4	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.5612425123273506	WITHOUT_CLASSIFICATION	0.43875748767264944	IMPLEMENTATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.999704741283135	WITHOUT_CLASSIFICATION	2.952587168649781E-4	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9994962839250219	WITHOUT_CLASSIFICATION	5.037160749781283E-4	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8845499670378787	WITHOUT_CLASSIFICATION	0.1154500329621213	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8845499670378787	WITHOUT_CLASSIFICATION	0.1154500329621213	IMPLEMENTATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.992882241973835	WITHOUT_CLASSIFICATION	0.00711775802616501	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999233408546339	WITHOUT_CLASSIFICATION	7.665914536614978E-5	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9999372786236976	WITHOUT_CLASSIFICATION	6.272137630233166E-5	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9521022415363446	WITHOUT_CLASSIFICATION	0.04789775846365537	IMPLEMENTATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9992211479819668	WITHOUT_CLASSIFICATION	7.788520180331783E-4	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9993016735106103	WITHOUT_CLASSIFICATION	6.98326489389725E-4	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9993625176506077	WITHOUT_CLASSIFICATION	6.374823493923625E-4	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9998427397110744	WITHOUT_CLASSIFICATION	1.5726028892553036E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9997127381146992	WITHOUT_CLASSIFICATION	2.872618853008042E-4	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9992343368036812	WITHOUT_CLASSIFICATION	7.656631963188107E-4	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9997939576817666	WITHOUT_CLASSIFICATION	2.0604231823345663E-4	IMPLEMENTATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9995948314300556	WITHOUT_CLASSIFICATION	4.051685699444067E-4	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9996513617968241	WITHOUT_CLASSIFICATION	3.4863820317582503E-4	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9992746746036322	WITHOUT_CLASSIFICATION	7.253253963677521E-4	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9805937775553736	WITHOUT_CLASSIFICATION	0.01940622244462642	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9992746746036322	WITHOUT_CLASSIFICATION	7.253253963677521E-4	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9957629650036091	IMPLEMENTATION	0.004237034996390938	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9181038352222765	IMPLEMENTATION	0.08189616477772356	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.9992746746036322	WITHOUT_CLASSIFICATION	7.253253963677521E-4	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999721110949777	WITHOUT_CLASSIFICATION	2.788890502216167E-5	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999730714515028	WITHOUT_CLASSIFICATION	2.692854849711741E-5	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9999058618027925	WITHOUT_CLASSIFICATION	9.413819720742201E-5	IMPLEMENTATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9998998209648199	WITHOUT_CLASSIFICATION	1.001790351800738E-4	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998784280695823	WITHOUT_CLASSIFICATION	1.2157193041766562E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9966999224974544	WITHOUT_CLASSIFICATION	0.0033000775025454933	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9966999224974544	WITHOUT_CLASSIFICATION	0.0033000775025454933	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9966999224974544	WITHOUT_CLASSIFICATION	0.0033000775025454933	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9966999224974544	WITHOUT_CLASSIFICATION	0.0033000775025454933	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9966999224974544	WITHOUT_CLASSIFICATION	0.0033000775025454933	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9966999224974544	WITHOUT_CLASSIFICATION	0.0033000775025454933	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9966999224974544	WITHOUT_CLASSIFICATION	0.0033000775025454933	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990305885508844	WITHOUT_CLASSIFICATION	9.694114491156806E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990305885508844	WITHOUT_CLASSIFICATION	9.694114491156806E-4	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9998805268260339	WITHOUT_CLASSIFICATION	1.1947317396611408E-4	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999700236533826	WITHOUT_CLASSIFICATION	2.99763466173538E-5	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999445035398462	WITHOUT_CLASSIFICATION	5.5496460153750504E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999165750685407	WITHOUT_CLASSIFICATION	8.342493145923478E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999165750685407	WITHOUT_CLASSIFICATION	8.342493145923478E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999953553885702	WITHOUT_CLASSIFICATION	4.644611429813843E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999826181367549	WITHOUT_CLASSIFICATION	1.7381863245030873E-5	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.999979046657677	WITHOUT_CLASSIFICATION	2.0953342322930823E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999186170083478	WITHOUT_CLASSIFICATION	8.138299165218944E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9974081589678505	WITHOUT_CLASSIFICATION	0.0025918410321494156	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9974081589678505	WITHOUT_CLASSIFICATION	0.0025918410321494156	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9968603556315926	WITHOUT_CLASSIFICATION	0.003139644368407385	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998511097838716	WITHOUT_CLASSIFICATION	1.4889021612838623E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999545371268517	WITHOUT_CLASSIFICATION	4.546287314846267E-5	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999533352450171	WITHOUT_CLASSIFICATION	4.6664754982925447E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999890541393669	WITHOUT_CLASSIFICATION	1.0945860633100452E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9967711453123884	WITHOUT_CLASSIFICATION	0.003228854687611493	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9967015224393619	WITHOUT_CLASSIFICATION	0.0032984775606380483	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9998812242643736	WITHOUT_CLASSIFICATION	1.1877573562636286E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9998814592017147	WITHOUT_CLASSIFICATION	1.1854079828527164E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999956878612177	WITHOUT_CLASSIFICATION	4.312138782303103E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999881005759176	WITHOUT_CLASSIFICATION	1.1899424082397105E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999881005759176	WITHOUT_CLASSIFICATION	1.1899424082397105E-4	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999283581162955	WITHOUT_CLASSIFICATION	7.164188370442415E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9979402750163584	WITHOUT_CLASSIFICATION	0.0020597249836416275	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999955233504881	WITHOUT_CLASSIFICATION	4.476649511894048E-5	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999391771911703	WITHOUT_CLASSIFICATION	6.08228088297289E-5	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999948044807322	WITHOUT_CLASSIFICATION	5.1955192677070965E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999923141414851	WITHOUT_CLASSIFICATION	7.685858514909842E-5	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9998288590713339	WITHOUT_CLASSIFICATION	1.711409286661862E-4	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999663572751402	WITHOUT_CLASSIFICATION	3.3642724859931295E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999937445406249	WITHOUT_CLASSIFICATION	6.255459375108722E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999016782069535	WITHOUT_CLASSIFICATION	9.83217930464111E-5	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999045182803677	WITHOUT_CLASSIFICATION	9.548171963228568E-5	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999922189797934	WITHOUT_CLASSIFICATION	7.781020206599717E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999655187175096	WITHOUT_CLASSIFICATION	3.4481282490423805E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9972859850493253	WITHOUT_CLASSIFICATION	0.0027140149506747245	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999666760981064	WITHOUT_CLASSIFICATION	3.332390189357504E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999258548606554	WITHOUT_CLASSIFICATION	7.414513934455344E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9972859850493253	WITHOUT_CLASSIFICATION	0.0027140149506747245	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999258548606554	WITHOUT_CLASSIFICATION	7.414513934455344E-5	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999608959602655	WITHOUT_CLASSIFICATION	3.910403973451241E-5	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999953900729905	WITHOUT_CLASSIFICATION	4.609927009472353E-6	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999602491391906	WITHOUT_CLASSIFICATION	3.975086080936085E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999253860130546	WITHOUT_CLASSIFICATION	7.461398694535323E-5	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999945400045708	WITHOUT_CLASSIFICATION	5.459995429217549E-6	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999762960047774	WITHOUT_CLASSIFICATION	2.3703995222598387E-5	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999034411864128	WITHOUT_CLASSIFICATION	9.65588135872095E-5	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999199051665246	WITHOUT_CLASSIFICATION	8.009483347535392E-5	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999817866596469	WITHOUT_CLASSIFICATION	1.8213340353162574E-5	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.999818039397789	WITHOUT_CLASSIFICATION	1.819606022109832E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999021294013813	WITHOUT_CLASSIFICATION	9.787059861873434E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999258548606554	WITHOUT_CLASSIFICATION	7.414513934455331E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999918962358977	WITHOUT_CLASSIFICATION	8.103764102340516E-6	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999301123242981	WITHOUT_CLASSIFICATION	6.988767570195842E-5	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999566555951204	WITHOUT_CLASSIFICATION	4.3344404879580346E-5	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999654062414619	WITHOUT_CLASSIFICATION	3.459375853817511E-5	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999526513135821	WITHOUT_CLASSIFICATION	4.7348686417859335E-5	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999469506272027	WITHOUT_CLASSIFICATION	5.304937279723566E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999893562762648	WITHOUT_CLASSIFICATION	1.0643723735288038E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999897143854698	WITHOUT_CLASSIFICATION	1.0285614530300703E-5	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999782999406026	WITHOUT_CLASSIFICATION	2.170005939727869E-5	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999817594136093	WITHOUT_CLASSIFICATION	1.824058639070934E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999203504431411	WITHOUT_CLASSIFICATION	7.964955685889531E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999658783531724	WITHOUT_CLASSIFICATION	3.4121646827526146E-5	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9833108153292761	WITHOUT_CLASSIFICATION	0.016689184670723875	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999743525175803	WITHOUT_CLASSIFICATION	2.5647482419661314E-5	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999790957360337	WITHOUT_CLASSIFICATION	2.090426396625626E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9960393948376957	WITHOUT_CLASSIFICATION	0.003960605162304334	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999793317888547	WITHOUT_CLASSIFICATION	2.0668211145321357E-5	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999920130440405	WITHOUT_CLASSIFICATION	7.986955959598522E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999761569364181	WITHOUT_CLASSIFICATION	2.384306358200419E-5	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999604208438467	WITHOUT_CLASSIFICATION	3.957915615332161E-5	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999691383587916	WITHOUT_CLASSIFICATION	3.086164120832947E-5	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999072202490339	WITHOUT_CLASSIFICATION	9.277975096612605E-5	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.999945862729744	WITHOUT_CLASSIFICATION	5.4137270256121356E-5	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999988865137606	WITHOUT_CLASSIFICATION	1.113486239392256E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999072202490339	WITHOUT_CLASSIFICATION	9.277975096612605E-5	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999756931293114	WITHOUT_CLASSIFICATION	2.4306870688556024E-5	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999709125182266	WITHOUT_CLASSIFICATION	2.9087481773433475E-5	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9996153840060233	WITHOUT_CLASSIFICATION	3.8461599397669147E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999869574310893	WITHOUT_CLASSIFICATION	1.3042568910699633E-5	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999665349407494	WITHOUT_CLASSIFICATION	3.346505925058926E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999970543920426	WITHOUT_CLASSIFICATION	2.9456079574075526E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999970543920426	WITHOUT_CLASSIFICATION	2.9456079574075526E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999258548606554	WITHOUT_CLASSIFICATION	7.414513934455331E-5	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999958752679636	WITHOUT_CLASSIFICATION	4.1247320364550086E-6	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9998923096268378	WITHOUT_CLASSIFICATION	1.0769037316219126E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999722106474137	WITHOUT_CLASSIFICATION	2.7789352586371403E-5	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999624293778832	WITHOUT_CLASSIFICATION	3.757062211689827E-5	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999967890498259	WITHOUT_CLASSIFICATION	3.2109501741010935E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9998918056283251	WITHOUT_CLASSIFICATION	1.0819437167493391E-4	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999585018666235	WITHOUT_CLASSIFICATION	4.149813337654228E-5	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999614885393286	WITHOUT_CLASSIFICATION	3.851146067133082E-5	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999796194951921	WITHOUT_CLASSIFICATION	2.0380504807909248E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999253791203834	WITHOUT_CLASSIFICATION	7.462087961658526E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999253791203834	WITHOUT_CLASSIFICATION	7.462087961658526E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999240436004426	WITHOUT_CLASSIFICATION	7.59563995573508E-5	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999749216923411	WITHOUT_CLASSIFICATION	2.5078307658862175E-5	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999453483905185	WITHOUT_CLASSIFICATION	5.4651609481394494E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999253791203834	WITHOUT_CLASSIFICATION	7.462087961658526E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999240436004426	WITHOUT_CLASSIFICATION	7.59563995573508E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999240436004426	WITHOUT_CLASSIFICATION	7.59563995573508E-5	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999625395376713	WITHOUT_CLASSIFICATION	3.746046232871679E-5	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998984659401742	WITHOUT_CLASSIFICATION	1.0153405982578518E-4	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999970168626425	WITHOUT_CLASSIFICATION	2.9831373575108232E-5	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999564489658735	WITHOUT_CLASSIFICATION	4.355103412651838E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999198848683891	WITHOUT_CLASSIFICATION	8.011513161092179E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999198848683891	WITHOUT_CLASSIFICATION	8.011513161092179E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999390256028426	WITHOUT_CLASSIFICATION	6.0974397157435814E-5	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999461269445629	WITHOUT_CLASSIFICATION	5.387305543707137E-5	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.999976810408879	WITHOUT_CLASSIFICATION	2.318959112099876E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999721091909021	WITHOUT_CLASSIFICATION	2.7890809097893392E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999721091909021	WITHOUT_CLASSIFICATION	2.7890809097893392E-5	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999554134000344	WITHOUT_CLASSIFICATION	4.458659996557658E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999355312571051	WITHOUT_CLASSIFICATION	6.44687428948943E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999485062691348	WITHOUT_CLASSIFICATION	5.149373086523954E-5	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999972706594074	WITHOUT_CLASSIFICATION	2.729340592669245E-6	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999848955232719	WITHOUT_CLASSIFICATION	1.5104476728057151E-5	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999938630423636	WITHOUT_CLASSIFICATION	6.136957636407692E-6	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9998904573285445	WITHOUT_CLASSIFICATION	1.0954267145555892E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.999915774567054	WITHOUT_CLASSIFICATION	8.422543294603569E-5	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999146731546589	WITHOUT_CLASSIFICATION	8.532684534110857E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999485062691348	WITHOUT_CLASSIFICATION	5.149373086523954E-5	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9998811786734677	WITHOUT_CLASSIFICATION	1.1882132653232038E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999857757282414	WITHOUT_CLASSIFICATION	1.4224271758643586E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999857757282414	WITHOUT_CLASSIFICATION	1.4224271758643586E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999958914577826	WITHOUT_CLASSIFICATION	4.1085422174284435E-6	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999598461371396	WITHOUT_CLASSIFICATION	4.015386286039076E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999834226694245	WITHOUT_CLASSIFICATION	1.6577330575378E-5	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999981549504813	WITHOUT_CLASSIFICATION	1.845049518702222E-5	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999142289534432	WITHOUT_CLASSIFICATION	8.577104655690522E-5	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9998812602468203	WITHOUT_CLASSIFICATION	1.1873975317964817E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9999100791228545	WITHOUT_CLASSIFICATION	8.992087714547678E-5	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999599164542686	WITHOUT_CLASSIFICATION	4.008354573143152E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999791172133857	WITHOUT_CLASSIFICATION	2.0882786614280238E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999791172133857	WITHOUT_CLASSIFICATION	2.0882786614280238E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999304919314282	WITHOUT_CLASSIFICATION	6.950806857170939E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998784280695823	WITHOUT_CLASSIFICATION	1.2157193041766562E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999729298365893	WITHOUT_CLASSIFICATION	2.7070163410733563E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9966999224974544	WITHOUT_CLASSIFICATION	0.0033000775025454933	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999508780058839	WITHOUT_CLASSIFICATION	4.912199411612773E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990305885508844	WITHOUT_CLASSIFICATION	9.694114491156806E-4	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.999908060434853	WITHOUT_CLASSIFICATION	9.193956514701616E-5	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.999954252729434	WITHOUT_CLASSIFICATION	4.574727056608032E-5	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9998997729149819	WITHOUT_CLASSIFICATION	1.0022708501801875E-4	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999183094371207	WITHOUT_CLASSIFICATION	8.169056287928528E-5	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999852687117423	WITHOUT_CLASSIFICATION	1.4731288257716843E-5	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9970527405808444	WITHOUT_CLASSIFICATION	0.002947259419155698	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9967252424653674	WITHOUT_CLASSIFICATION	0.003274757534632478	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999352646934806	WITHOUT_CLASSIFICATION	6.47353065193345E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999700236533826	WITHOUT_CLASSIFICATION	2.99763466173538E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999475455508188	WITHOUT_CLASSIFICATION	5.245444918123159E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999475455508188	WITHOUT_CLASSIFICATION	5.245444918123159E-5	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999242424465089	WITHOUT_CLASSIFICATION	7.575755349110122E-5	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.999929901691528	WITHOUT_CLASSIFICATION	7.00983084720231E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999872515991713	WITHOUT_CLASSIFICATION	1.274840082875951E-5	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999021793058751	WITHOUT_CLASSIFICATION	9.782069412495647E-5	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999322458150439	WITHOUT_CLASSIFICATION	6.775418495609604E-5	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999752754055016	WITHOUT_CLASSIFICATION	2.4724594498445185E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999165750685407	WITHOUT_CLASSIFICATION	8.342493145923478E-5	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999640594936101	WITHOUT_CLASSIFICATION	3.594050638997852E-5	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999353972047835	WITHOUT_CLASSIFICATION	6.46027952164614E-5	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999341831360758	WITHOUT_CLASSIFICATION	6.58168639242292E-5	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999765983443317	WITHOUT_CLASSIFICATION	2.3401655668230133E-5	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999464965699955	WITHOUT_CLASSIFICATION	5.350343000450275E-5	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999832716767684	WITHOUT_CLASSIFICATION	1.6728323231587586E-5	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999968631479002	WITHOUT_CLASSIFICATION	3.136852099804728E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999165750685407	WITHOUT_CLASSIFICATION	8.342493145923478E-5	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999510609898646	WITHOUT_CLASSIFICATION	4.893901013529084E-5	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.999976362871543	WITHOUT_CLASSIFICATION	2.3637128456977125E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9966999224974544	WITHOUT_CLASSIFICATION	0.0033000775025454933	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9966999224974544	WITHOUT_CLASSIFICATION	0.0033000775025454933	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990305885508844	WITHOUT_CLASSIFICATION	9.694114491156806E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990305885508844	WITHOUT_CLASSIFICATION	9.694114491156806E-4	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9967252424653674	WITHOUT_CLASSIFICATION	0.003274757534632478	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999475455508188	WITHOUT_CLASSIFICATION	5.245444918123159E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999464965699955	WITHOUT_CLASSIFICATION	5.350343000450275E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999953553885702	WITHOUT_CLASSIFICATION	4.644611429813843E-5	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999312540728552	WITHOUT_CLASSIFICATION	6.87459271447796E-5	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999545461448632	WITHOUT_CLASSIFICATION	4.545385513675376E-5	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999463292419973	WITHOUT_CLASSIFICATION	5.367075800275971E-5	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999763006034453	WITHOUT_CLASSIFICATION	2.3699396554633834E-5	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999037194038393	WITHOUT_CLASSIFICATION	9.628059616076537E-5	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9967042000906702	WITHOUT_CLASSIFICATION	0.0032957999093298266	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9998991460801196	WITHOUT_CLASSIFICATION	1.0085391988037636E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999130759048179	WITHOUT_CLASSIFICATION	8.692409518198423E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999130759048179	WITHOUT_CLASSIFICATION	8.692409518198423E-5	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999699695587774	WITHOUT_CLASSIFICATION	3.0030441222669856E-5	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999909153975242	WITHOUT_CLASSIFICATION	9.084602475743141E-6	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999301622879401	WITHOUT_CLASSIFICATION	6.983771205989525E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.999909337160733	WITHOUT_CLASSIFICATION	9.066283926694422E-5	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999512233240822	WITHOUT_CLASSIFICATION	4.877667591782155E-5	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999642825484197	WITHOUT_CLASSIFICATION	3.571745158026139E-5	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999390636873917	WITHOUT_CLASSIFICATION	6.0936312608213716E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999826181367549	WITHOUT_CLASSIFICATION	1.7381863245030873E-5	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9998828177483466	WITHOUT_CLASSIFICATION	1.17182251653387E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9998969392031258	WITHOUT_CLASSIFICATION	1.0306079687415505E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9998969392031258	WITHOUT_CLASSIFICATION	1.0306079687415505E-4	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9998767955141552	WITHOUT_CLASSIFICATION	1.2320448584487065E-4	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999618867562851	WITHOUT_CLASSIFICATION	3.811324371484256E-5	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9998767955141552	WITHOUT_CLASSIFICATION	1.2320448584487065E-4	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999797966059155	WITHOUT_CLASSIFICATION	2.0203394084466377E-5	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.996876223685559	WITHOUT_CLASSIFICATION	0.003123776314440994	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990305885508844	WITHOUT_CLASSIFICATION	9.694114491156806E-4	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9967252424653674	WITHOUT_CLASSIFICATION	0.003274757534632478	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999700236533826	WITHOUT_CLASSIFICATION	2.99763466173538E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999464965699955	WITHOUT_CLASSIFICATION	5.350343000450275E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999464965699955	WITHOUT_CLASSIFICATION	5.350343000450275E-5	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999983048272359	WITHOUT_CLASSIFICATION	1.695172764098226E-5	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999983048272359	WITHOUT_CLASSIFICATION	1.695172764098226E-5	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999873128998879	WITHOUT_CLASSIFICATION	1.2687100112090507E-4	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9998884427291547	WITHOUT_CLASSIFICATION	1.1155727084534146E-4	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999676287010603	WITHOUT_CLASSIFICATION	3.237129893979113E-5	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999026657505263	WITHOUT_CLASSIFICATION	9.73342494737104E-5	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999817715374288	WITHOUT_CLASSIFICATION	1.8228462571135105E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999802335764689	WITHOUT_CLASSIFICATION	1.976642353103993E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999186170083478	WITHOUT_CLASSIFICATION	8.138299165218944E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999186170083478	WITHOUT_CLASSIFICATION	8.138299165218944E-5	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9996788221226309	WITHOUT_CLASSIFICATION	3.211778773690745E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999255664690923	WITHOUT_CLASSIFICATION	7.443353090776194E-5	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9976278000416028	WITHOUT_CLASSIFICATION	0.002372199958397122	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9973530428032203	WITHOUT_CLASSIFICATION	0.00264695719677952	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.997704344784841	WITHOUT_CLASSIFICATION	0.002295655215159013	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9974081589678505	WITHOUT_CLASSIFICATION	0.0025918410321494156	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.996757498032901	WITHOUT_CLASSIFICATION	0.003242501967099026	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.996757498032901	WITHOUT_CLASSIFICATION	0.003242501967099026	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9968603556315926	WITHOUT_CLASSIFICATION	0.003139644368407385	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9968603556315926	WITHOUT_CLASSIFICATION	0.003139644368407385	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9998828331518202	WITHOUT_CLASSIFICATION	1.1716684817971254E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9998828331518202	WITHOUT_CLASSIFICATION	1.1716684817971254E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999237254126725	WITHOUT_CLASSIFICATION	7.627458732753494E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999237254126725	WITHOUT_CLASSIFICATION	7.627458732753494E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999186170083478	WITHOUT_CLASSIFICATION	8.138299165218944E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9974081589678505	WITHOUT_CLASSIFICATION	0.0025918410321494156	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.996757498032901	WITHOUT_CLASSIFICATION	0.003242501967099026	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.996757498032901	WITHOUT_CLASSIFICATION	0.003242501967099026	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9968603556315926	WITHOUT_CLASSIFICATION	0.003139644368407385	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9998828331518202	WITHOUT_CLASSIFICATION	1.1716684817971254E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9998828331518202	WITHOUT_CLASSIFICATION	1.1716684817971254E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999237254126725	WITHOUT_CLASSIFICATION	7.627458732753494E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999463881107771	WITHOUT_CLASSIFICATION	5.361188922300028E-5	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9998883746543996	WITHOUT_CLASSIFICATION	1.116253456003331E-4	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999066007900157	WITHOUT_CLASSIFICATION	9.339920998430691E-5	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999904816507773	WITHOUT_CLASSIFICATION	9.518349222673187E-6	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999172617662139	WITHOUT_CLASSIFICATION	8.273823378606857E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9967190285404965	WITHOUT_CLASSIFICATION	0.0032809714595034138	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9998864678392442	WITHOUT_CLASSIFICATION	1.1353216075575393E-4	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999727885657033	WITHOUT_CLASSIFICATION	2.7211434296648033E-5	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999976214357533	WITHOUT_CLASSIFICATION	2.378564246687356E-5	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.99998748015625	WITHOUT_CLASSIFICATION	1.2519843749991053E-5	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999277012078119	WITHOUT_CLASSIFICATION	7.229879218808232E-5	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999409028753464	WITHOUT_CLASSIFICATION	5.909712465360313E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999258548606554	WITHOUT_CLASSIFICATION	7.414513934455331E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9967190285404965	WITHOUT_CLASSIFICATION	0.0032809714595034138	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999656981011568	WITHOUT_CLASSIFICATION	3.430189884318775E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999855655220655	WITHOUT_CLASSIFICATION	1.4434477934436235E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999855655220655	WITHOUT_CLASSIFICATION	1.4434477934436235E-5	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999808131442692	WITHOUT_CLASSIFICATION	1.918685573069098E-5	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999618737085127	WITHOUT_CLASSIFICATION	3.8126291487329574E-5	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999630462721735	WITHOUT_CLASSIFICATION	3.6953727826515104E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999122731327963	WITHOUT_CLASSIFICATION	8.772686720368948E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999122731327963	WITHOUT_CLASSIFICATION	8.772686720368948E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999890541393669	WITHOUT_CLASSIFICATION	1.0945860633100452E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999891811916651	WITHOUT_CLASSIFICATION	1.0818808334885901E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999891811916651	WITHOUT_CLASSIFICATION	1.0818808334885901E-5	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999971225746285	WITHOUT_CLASSIFICATION	2.877425371494512E-5	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999616330698581	WITHOUT_CLASSIFICATION	3.836693014189859E-5	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999528142162679	WITHOUT_CLASSIFICATION	4.7185783732095243E-5	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998815767103832	WITHOUT_CLASSIFICATION	1.1842328961672013E-4	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9967574060320975	WITHOUT_CLASSIFICATION	0.00324259396790251	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9967711453123884	WITHOUT_CLASSIFICATION	0.003228854687611493	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9885778029788089	WITHOUT_CLASSIFICATION	0.011422197021191044	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9998726928616108	WITHOUT_CLASSIFICATION	1.2730713838917336E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999537930705968	WITHOUT_CLASSIFICATION	4.6206929403148014E-5	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999614011603556	WITHOUT_CLASSIFICATION	3.8598839644454956E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999860293187108	WITHOUT_CLASSIFICATION	1.3970681289209745E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999110544575226	WITHOUT_CLASSIFICATION	8.894554247730805E-5	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999280430697698	WITHOUT_CLASSIFICATION	7.195693023013241E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9998821562054172	WITHOUT_CLASSIFICATION	1.1784379458278767E-4	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9967823261253977	WITHOUT_CLASSIFICATION	0.003217673874602317	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.999880353315059	WITHOUT_CLASSIFICATION	1.1964668494105847E-4	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9998715379594968	WITHOUT_CLASSIFICATION	1.2846204050331788E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998820509023333	WITHOUT_CLASSIFICATION	1.1794909766662857E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999956878612177	WITHOUT_CLASSIFICATION	4.312138782303103E-5	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999087457790454	WITHOUT_CLASSIFICATION	9.125422095453175E-5	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999164860266712	WITHOUT_CLASSIFICATION	8.351397332878604E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9967003132975276	WITHOUT_CLASSIFICATION	0.003299686702472518	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9967711453123884	WITHOUT_CLASSIFICATION	0.003228854687611493	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998820509023333	WITHOUT_CLASSIFICATION	1.1794909766662857E-4	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999087457790454	WITHOUT_CLASSIFICATION	9.125422095453175E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9967003132975276	WITHOUT_CLASSIFICATION	0.003299686702472518	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999188257215528	WITHOUT_CLASSIFICATION	8.117427844727703E-5	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.999920014963034	WITHOUT_CLASSIFICATION	7.998503696595952E-5	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998881243443523	WITHOUT_CLASSIFICATION	1.1187565564770015E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999881005759176	WITHOUT_CLASSIFICATION	1.1899424082397105E-4	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9998873138261373	WITHOUT_CLASSIFICATION	1.1268617386278934E-4	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999467838602666	WITHOUT_CLASSIFICATION	5.321613973346658E-5	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999030095911404	WITHOUT_CLASSIFICATION	9.699040885954387E-5	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999861001055316	WITHOUT_CLASSIFICATION	1.3899894468397914E-5	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999160037812027	WITHOUT_CLASSIFICATION	8.399621879734319E-5	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999553627075297	WITHOUT_CLASSIFICATION	4.463729247035002E-5	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999635845108387	WITHOUT_CLASSIFICATION	3.6415489161269944E-5	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999361313473661	WITHOUT_CLASSIFICATION	6.386865263393841E-5	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999623981936128	WITHOUT_CLASSIFICATION	3.76018063872696E-5	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999710670842555	WITHOUT_CLASSIFICATION	2.893291574438309E-5	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9998815353333647	WITHOUT_CLASSIFICATION	1.1846466663534915E-4	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9979402750163584	WITHOUT_CLASSIFICATION	0.0020597249836416275	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999404960388384	WITHOUT_CLASSIFICATION	5.9503961161669335E-5	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998820509023333	WITHOUT_CLASSIFICATION	1.1794909766662857E-4	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999904380749858	WITHOUT_CLASSIFICATION	9.561925014202615E-5	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999245800294043	WITHOUT_CLASSIFICATION	7.541997059571863E-5	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999579630741721	WITHOUT_CLASSIFICATION	4.20369258279316E-5	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999634245747161	WITHOUT_CLASSIFICATION	3.657542528387598E-5	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.999894779849222	WITHOUT_CLASSIFICATION	1.0522015077797505E-4	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999424046942272	WITHOUT_CLASSIFICATION	5.759530577277051E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999872924025248	WITHOUT_CLASSIFICATION	1.2707597475161047E-5	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999740869495422	WITHOUT_CLASSIFICATION	2.591305045791187E-5	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999059797585012	WITHOUT_CLASSIFICATION	9.402024149884064E-5	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998811617681965	WITHOUT_CLASSIFICATION	1.1883823180340459E-4	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998708146982428	WITHOUT_CLASSIFICATION	1.2918530175713073E-4	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9980625427850486	WITHOUT_CLASSIFICATION	0.0019374572149513968	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999391771911703	WITHOUT_CLASSIFICATION	6.08228088297289E-5	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999582653487507	WITHOUT_CLASSIFICATION	4.173465124935825E-5	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999357097965998	WITHOUT_CLASSIFICATION	6.429020340023072E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9998891549576479	WITHOUT_CLASSIFICATION	1.1084504235218683E-4	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9998828834592028	WITHOUT_CLASSIFICATION	1.1711654079718197E-4	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999183980154548	WITHOUT_CLASSIFICATION	8.160198454527475E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9998884232383196	WITHOUT_CLASSIFICATION	1.1157676168043519E-4	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999983365857312	WITHOUT_CLASSIFICATION	1.6634142686558935E-6	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999773077123456	WITHOUT_CLASSIFICATION	2.2692287654452682E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999939876800881	WITHOUT_CLASSIFICATION	6.012319911897278E-5	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9998968599359235	WITHOUT_CLASSIFICATION	1.0314006407658546E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998924988376772	WITHOUT_CLASSIFICATION	1.0750116232271652E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998924988376772	WITHOUT_CLASSIFICATION	1.0750116232271652E-4	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998801113441957	WITHOUT_CLASSIFICATION	1.198886558042303E-4	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9998994227961059	WITHOUT_CLASSIFICATION	1.0057720389413481E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999625778695884	WITHOUT_CLASSIFICATION	3.7422130411535746E-5	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999388884325817	WITHOUT_CLASSIFICATION	6.111156741831098E-5	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999523945632975	WITHOUT_CLASSIFICATION	4.760543670255303E-5	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999386538120908	WITHOUT_CLASSIFICATION	6.134618790917897E-5	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998891805761269	WITHOUT_CLASSIFICATION	1.1081942387317839E-4	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999849181017441	WITHOUT_CLASSIFICATION	1.5081898255992015E-5	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999527764816196	WITHOUT_CLASSIFICATION	4.7223518380426E-5	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998869751101791	WITHOUT_CLASSIFICATION	1.130248898208187E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9998946881699194	WITHOUT_CLASSIFICATION	1.0531183008055107E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.999925953897042	WITHOUT_CLASSIFICATION	7.404610295810828E-5	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.99997364454372	WITHOUT_CLASSIFICATION	2.6355456280032665E-5	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.999949198827551	WITHOUT_CLASSIFICATION	5.080117244909369E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999111863714121	WITHOUT_CLASSIFICATION	8.881362858795302E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998916677833314	WITHOUT_CLASSIFICATION	1.0833221666861871E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999904896532184	WITHOUT_CLASSIFICATION	9.510346781725E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999971001417291	WITHOUT_CLASSIFICATION	2.8998582708968194E-5	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999447701068309	WITHOUT_CLASSIFICATION	5.522989316905868E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.999924378236972	WITHOUT_CLASSIFICATION	7.562176302798526E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9973148450592363	WITHOUT_CLASSIFICATION	0.0026851549407637555	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9973148450592363	WITHOUT_CLASSIFICATION	0.0026851549407637555	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9998818496327473	WITHOUT_CLASSIFICATION	1.1815036725277422E-4	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9998818496327473	WITHOUT_CLASSIFICATION	1.1815036725277422E-4	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999939876800881	WITHOUT_CLASSIFICATION	6.012319911897278E-5	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9998966361048218	WITHOUT_CLASSIFICATION	1.0336389517812995E-4	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999948388679494	WITHOUT_CLASSIFICATION	5.1611320505906975E-5	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998899978567711	WITHOUT_CLASSIFICATION	1.1000214322881849E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999304919314282	WITHOUT_CLASSIFICATION	6.950806857170939E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999948388679494	WITHOUT_CLASSIFICATION	5.1611320505906975E-5	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998899978567711	WITHOUT_CLASSIFICATION	1.1000214322881849E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999215480524647	WITHOUT_CLASSIFICATION	7.845194753528024E-5	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.999952728287835	WITHOUT_CLASSIFICATION	4.727171216508309E-5	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999787238316469	WITHOUT_CLASSIFICATION	2.1276168353158655E-5	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.999967265872049	WITHOUT_CLASSIFICATION	3.273412795111668E-5	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999865215880163	WITHOUT_CLASSIFICATION	1.347841198382609E-5	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999778726467266	WITHOUT_CLASSIFICATION	2.21273532734227E-5	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999269535570458	WITHOUT_CLASSIFICATION	7.304644295431969E-5	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999165683988969	WITHOUT_CLASSIFICATION	8.343160110313276E-5	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.999979920710697	WITHOUT_CLASSIFICATION	2.0079289303062228E-5	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999871577671209	WITHOUT_CLASSIFICATION	1.2842232879145797E-5	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999878271364784	WITHOUT_CLASSIFICATION	1.2172863521671567E-5	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999762271401138	WITHOUT_CLASSIFICATION	2.377285988616806E-5	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.99993064543745	WITHOUT_CLASSIFICATION	6.935456255000125E-5	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9998672686583785	WITHOUT_CLASSIFICATION	1.327313416214113E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999304919314282	WITHOUT_CLASSIFICATION	6.950806857170939E-5	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9998929395480036	WITHOUT_CLASSIFICATION	1.070604519963392E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999040882643526	WITHOUT_CLASSIFICATION	9.591173564735852E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999040882643526	WITHOUT_CLASSIFICATION	9.591173564735852E-5	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999720462541088	WITHOUT_CLASSIFICATION	2.7953745891207812E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999215480524647	WITHOUT_CLASSIFICATION	7.845194753528024E-5	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999553573401301	WITHOUT_CLASSIFICATION	4.4642659869974496E-5	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999539733644548	WITHOUT_CLASSIFICATION	4.6026635545163354E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.996306419940744	WITHOUT_CLASSIFICATION	0.003693580059255921	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999614532278263	WITHOUT_CLASSIFICATION	3.854677217367186E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998422897086113	WITHOUT_CLASSIFICATION	1.5771029138866413E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999215480524647	WITHOUT_CLASSIFICATION	7.845194753528024E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999614532278263	WITHOUT_CLASSIFICATION	3.854677217367186E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998422897086113	WITHOUT_CLASSIFICATION	1.5771029138866413E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999543836230519	WITHOUT_CLASSIFICATION	4.561637694813779E-5	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998835525597746	WITHOUT_CLASSIFICATION	1.1644744022534925E-4	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.999992779453945	WITHOUT_CLASSIFICATION	7.220546055044882E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999215480524647	WITHOUT_CLASSIFICATION	7.845194753528024E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999215480524647	WITHOUT_CLASSIFICATION	7.845194753528024E-5	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999074749585783	WITHOUT_CLASSIFICATION	9.25250414215674E-5	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999044412058415	WITHOUT_CLASSIFICATION	9.555879415845138E-5	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999382520112511	WITHOUT_CLASSIFICATION	6.174798874895691E-5	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.999958523546128	WITHOUT_CLASSIFICATION	4.147645387199318E-5	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999308765490672	WITHOUT_CLASSIFICATION	6.912345093281227E-5	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999608019333732	WITHOUT_CLASSIFICATION	3.9198066626705326E-5	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999518304021041	WITHOUT_CLASSIFICATION	4.816959789578366E-5	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999470189013346	WITHOUT_CLASSIFICATION	5.298109866528877E-5	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999613458894114	WITHOUT_CLASSIFICATION	3.865411058858392E-5	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.999911552034625	WITHOUT_CLASSIFICATION	8.844796537501355E-5	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999829833116584	WITHOUT_CLASSIFICATION	1.701668834163164E-5	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999408306402248	WITHOUT_CLASSIFICATION	5.916935977522582E-5	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999975704986467	WITHOUT_CLASSIFICATION	2.4295013532984046E-5	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9998967312477152	WITHOUT_CLASSIFICATION	1.0326875228478776E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998807495861923	WITHOUT_CLASSIFICATION	1.1925041380768678E-4	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999833718196222	WITHOUT_CLASSIFICATION	1.6628180377852416E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999937445406249	WITHOUT_CLASSIFICATION	6.255459375108722E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999628291658796	WITHOUT_CLASSIFICATION	3.717083412043819E-5	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999112370554258	WITHOUT_CLASSIFICATION	8.876294457416158E-5	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999377628503439	WITHOUT_CLASSIFICATION	6.223714965610926E-5	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998916795029842	WITHOUT_CLASSIFICATION	1.0832049701572352E-4	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9998996060697809	WITHOUT_CLASSIFICATION	1.0039393021902866E-4	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9998996060697809	WITHOUT_CLASSIFICATION	1.0039393021902866E-4	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999937445406249	WITHOUT_CLASSIFICATION	6.255459375108722E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999399429471592	WITHOUT_CLASSIFICATION	6.0057052840913385E-5	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.999970384199525	WITHOUT_CLASSIFICATION	2.9615800475002245E-5	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9998921098775443	WITHOUT_CLASSIFICATION	1.0789012245567016E-4	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999370371655769	WITHOUT_CLASSIFICATION	6.296283442310578E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999833877040186	WITHOUT_CLASSIFICATION	1.6612295981326938E-5	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999820422847702	WITHOUT_CLASSIFICATION	1.7957715229843874E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999782781008805	WITHOUT_CLASSIFICATION	2.1721899119458622E-5	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998724063053674	WITHOUT_CLASSIFICATION	1.275936946325049E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999951576141353	WITHOUT_CLASSIFICATION	4.842385864809767E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999175644803423	WITHOUT_CLASSIFICATION	8.243551965770508E-5	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999825474118392	WITHOUT_CLASSIFICATION	1.7452588160803763E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999397555980801	WITHOUT_CLASSIFICATION	6.024440191982159E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999691566486923	WITHOUT_CLASSIFICATION	3.084335130759656E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998879174152192	WITHOUT_CLASSIFICATION	1.1208258478075225E-4	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999884229583357	WITHOUT_CLASSIFICATION	1.1577041664292011E-5	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999797326629527	WITHOUT_CLASSIFICATION	2.0267337047297554E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999217443687555	WITHOUT_CLASSIFICATION	7.825563124453812E-5	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999800988350611	WITHOUT_CLASSIFICATION	1.99011649388226E-5	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998889804138232	WITHOUT_CLASSIFICATION	1.11019586176699E-4	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999473621996623	WITHOUT_CLASSIFICATION	5.263780033777274E-5	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999810727880535	WITHOUT_CLASSIFICATION	1.8927211946450018E-5	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999407374944947	WITHOUT_CLASSIFICATION	5.926250550528539E-5	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999798645656139	WITHOUT_CLASSIFICATION	2.0135434386106935E-5	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997945012102981	WITHOUT_CLASSIFICATION	2.0549878970196756E-4	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997224567839746	WITHOUT_CLASSIFICATION	2.7754321602534426E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998019376023402	WITHOUT_CLASSIFICATION	1.980623976598502E-4	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247266738649	WITHOUT_CLASSIFICATION	7.527332613513991E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997532751859994	WITHOUT_CLASSIFICATION	2.4672481400051286E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998007410201928	WITHOUT_CLASSIFICATION	1.9925897980712834E-4	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997511616336024	WITHOUT_CLASSIFICATION	2.488383663975791E-4	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997927391599555	WITHOUT_CLASSIFICATION	2.072608400445429E-4	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999200405229186	WITHOUT_CLASSIFICATION	7.99594770814546E-5	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9998647218694899	WITHOUT_CLASSIFICATION	1.352781305100667E-4	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998441099585673	WITHOUT_CLASSIFICATION	1.5589004143265467E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998607007555506	WITHOUT_CLASSIFICATION	1.392992444493861E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999848327310393	WITHOUT_CLASSIFICATION	1.5167268960698772E-4	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998746332644783	WITHOUT_CLASSIFICATION	1.2536673552159642E-4	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999816526220419	WITHOUT_CLASSIFICATION	1.834737795809874E-4	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997531876847826	WITHOUT_CLASSIFICATION	2.4681231521731764E-4	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997924836488127	WITHOUT_CLASSIFICATION	2.0751635118729654E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997511024136924	WITHOUT_CLASSIFICATION	2.4889758630763746E-4	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999273835274036	WITHOUT_CLASSIFICATION	7.261647259638951E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999343338847411	WITHOUT_CLASSIFICATION	6.566611525896199E-5	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999109558050242	WITHOUT_CLASSIFICATION	8.904419497586122E-5	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999230475045191	WITHOUT_CLASSIFICATION	7.695249548080855E-5	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999802210907143	WITHOUT_CLASSIFICATION	1.977890928572862E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998968600975671	WITHOUT_CLASSIFICATION	1.0313990243284518E-4	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9998834090585564	WITHOUT_CLASSIFICATION	1.1659094144351719E-4	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999405819503892	WITHOUT_CLASSIFICATION	5.941804961077752E-5	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999406159968106	WITHOUT_CLASSIFICATION	5.938400318943119E-5	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9998870460872962	WITHOUT_CLASSIFICATION	1.1295391270392759E-4	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9998838546840091	WITHOUT_CLASSIFICATION	1.1614531599086327E-4	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9998783203543853	WITHOUT_CLASSIFICATION	1.2167964561476878E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999175644803423	WITHOUT_CLASSIFICATION	8.243551965770508E-5	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998705642083972	WITHOUT_CLASSIFICATION	1.2943579160293412E-4	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999770377715264	WITHOUT_CLASSIFICATION	2.296222847370174E-5	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999317983622612	WITHOUT_CLASSIFICATION	6.82016377387749E-5	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999215157820255	WITHOUT_CLASSIFICATION	7.848421797447869E-5	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.999992593804494	WITHOUT_CLASSIFICATION	7.406195506047675E-6	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999095113021118	WITHOUT_CLASSIFICATION	9.04886978881654E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472925740275	WITHOUT_CLASSIFICATION	5.270742597248017E-5	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999914545740437	WITHOUT_CLASSIFICATION	8.545425956296227E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999078805254685	WITHOUT_CLASSIFICATION	9.211947453144284E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9987897064526444	WITHOUT_CLASSIFICATION	0.0012102935473555603	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999200028076018	WITHOUT_CLASSIFICATION	7.999719239823809E-5	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999443887414965	WITHOUT_CLASSIFICATION	5.561125850336877E-5	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999392054386316	WITHOUT_CLASSIFICATION	6.079456136842415E-5	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999120448614202	WITHOUT_CLASSIFICATION	8.795513857985109E-5	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999545989829793	WITHOUT_CLASSIFICATION	4.540101702061598E-5	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999461264798318	WITHOUT_CLASSIFICATION	5.3873520168138506E-5	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999254259737683	WITHOUT_CLASSIFICATION	7.457402623157225E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999464131866469	WITHOUT_CLASSIFICATION	5.358681335302013E-5	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9998975955278404	WITHOUT_CLASSIFICATION	1.0240447215960454E-4	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9996260977749595	WITHOUT_CLASSIFICATION	3.739022250405421E-4	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.99994573849132	WITHOUT_CLASSIFICATION	5.4261508680089134E-5	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999256616419514	WITHOUT_CLASSIFICATION	7.433835804858467E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999175644803423	WITHOUT_CLASSIFICATION	8.243551965770508E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998968600975671	WITHOUT_CLASSIFICATION	1.0313990243284518E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999565012217141	WITHOUT_CLASSIFICATION	4.3498778285984016E-5	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999787999372911	WITHOUT_CLASSIFICATION	2.1200062708894596E-5	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9998579852850012	WITHOUT_CLASSIFICATION	1.4201471499885742E-4	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999230475045191	WITHOUT_CLASSIFICATION	7.695249548080855E-5	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999130780540078	WITHOUT_CLASSIFICATION	8.692194599220984E-5	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9998838874509718	WITHOUT_CLASSIFICATION	1.161125490281337E-4	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9998897132714233	WITHOUT_CLASSIFICATION	1.102867285768351E-4	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999178701750977	WITHOUT_CLASSIFICATION	8.21298249023523E-5	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999170475735937	WITHOUT_CLASSIFICATION	8.295242640636524E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999928328288534	WITHOUT_CLASSIFICATION	7.167171146602188E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999038737504703	WITHOUT_CLASSIFICATION	9.612624952966202E-5	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999162387214254	WITHOUT_CLASSIFICATION	8.376127857450815E-5	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999673105274557	WITHOUT_CLASSIFICATION	3.2689472544360255E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999175644803423	WITHOUT_CLASSIFICATION	8.243551965770508E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999175644803423	WITHOUT_CLASSIFICATION	8.243551965770508E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999930161882716	WITHOUT_CLASSIFICATION	6.983811728394606E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9997784561814513	WITHOUT_CLASSIFICATION	2.2154381854873193E-4	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999337101350636	WITHOUT_CLASSIFICATION	6.62898649364259E-5	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9998991949750079	WITHOUT_CLASSIFICATION	1.0080502499222627E-4	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999260702345496	WITHOUT_CLASSIFICATION	7.392976545041833E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999467517373996	WITHOUT_CLASSIFICATION	5.32482626003182E-5	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999474939917954	WITHOUT_CLASSIFICATION	5.250600820458213E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999175644803423	WITHOUT_CLASSIFICATION	8.243551965770508E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999589625102078	WITHOUT_CLASSIFICATION	4.1037489792247044E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999548077322479	WITHOUT_CLASSIFICATION	4.5192267752081456E-5	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999481261576579	WITHOUT_CLASSIFICATION	5.187384234209352E-5	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999135759795595	WITHOUT_CLASSIFICATION	8.642402044045346E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999081845562114	WITHOUT_CLASSIFICATION	9.181544378857039E-5	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.999915153396462	WITHOUT_CLASSIFICATION	8.484660353805549E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9998903927947302	WITHOUT_CLASSIFICATION	1.096072052697756E-4	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998810716784728	WITHOUT_CLASSIFICATION	1.1892832152710901E-4	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999254453741933	WITHOUT_CLASSIFICATION	7.455462580670292E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998968600975671	WITHOUT_CLASSIFICATION	1.0313990243284518E-4	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999631253146137	WITHOUT_CLASSIFICATION	3.687468538635417E-5	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999932636591456	WITHOUT_CLASSIFICATION	6.736340854374717E-6	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999770380297692	WITHOUT_CLASSIFICATION	2.296197023087174E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998968600975671	WITHOUT_CLASSIFICATION	1.0313990243284518E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999287193520648	WITHOUT_CLASSIFICATION	7.128064793508657E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999589625102078	WITHOUT_CLASSIFICATION	4.1037489792247044E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.999910428603463	WITHOUT_CLASSIFICATION	8.957139653691618E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999175644803423	WITHOUT_CLASSIFICATION	8.243551965770508E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999228385701265	WITHOUT_CLASSIFICATION	7.71614298734383E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999175644803423	WITHOUT_CLASSIFICATION	8.243551965770508E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999849408184778	WITHOUT_CLASSIFICATION	1.5059181522331582E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999928328288534	WITHOUT_CLASSIFICATION	7.167171146602188E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999038737504703	WITHOUT_CLASSIFICATION	9.612624952966202E-5	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999162387214254	WITHOUT_CLASSIFICATION	8.376127857450815E-5	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999929644111161	WITHOUT_CLASSIFICATION	7.035588883872079E-6	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.999958063463612	WITHOUT_CLASSIFICATION	4.193653638785852E-5	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999738668192952	WITHOUT_CLASSIFICATION	2.6133180704850486E-5	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999802234607438	WITHOUT_CLASSIFICATION	1.977653925613801E-5	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999837854189298	WITHOUT_CLASSIFICATION	1.6214581070174342E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999175644803423	WITHOUT_CLASSIFICATION	8.243551965770508E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998968600975671	WITHOUT_CLASSIFICATION	1.0313990243284518E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999673105274557	WITHOUT_CLASSIFICATION	3.2689472544360255E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999930161882716	WITHOUT_CLASSIFICATION	6.983811728394606E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999350717773048	WITHOUT_CLASSIFICATION	6.492822269519928E-5	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999315207372047	WITHOUT_CLASSIFICATION	6.847926279528437E-5	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999574990210005	WITHOUT_CLASSIFICATION	4.2500978999538714E-5	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999526367935104	WITHOUT_CLASSIFICATION	4.73632064895719E-5	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999058146565669	WITHOUT_CLASSIFICATION	9.418534343306268E-5	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999423999583406	WITHOUT_CLASSIFICATION	5.760004165959426E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997511024136924	WITHOUT_CLASSIFICATION	2.4889758630763746E-4	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999711493669923	WITHOUT_CLASSIFICATION	2.8850633007644674E-5	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998899515813042	WITHOUT_CLASSIFICATION	1.1004841869581782E-4	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9998681214427587	WITHOUT_CLASSIFICATION	1.3187855724122136E-4	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999750959093512	WITHOUT_CLASSIFICATION	2.4904090648797995E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9998894594716081	WITHOUT_CLASSIFICATION	1.1054052839188988E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997532751859994	WITHOUT_CLASSIFICATION	2.4672481400051286E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998007410201928	WITHOUT_CLASSIFICATION	1.9925897980712834E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998607007555506	WITHOUT_CLASSIFICATION	1.392992444493861E-4	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9998894594716081	WITHOUT_CLASSIFICATION	1.1054052839188988E-4	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999655530563786	WITHOUT_CLASSIFICATION	3.4446943621474655E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9998978652385108	WITHOUT_CLASSIFICATION	1.0213476148930958E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996978927180948	WITHOUT_CLASSIFICATION	3.0210728190510356E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997514622558926	WITHOUT_CLASSIFICATION	2.48537744107349E-4	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999549651735262	WITHOUT_CLASSIFICATION	4.5034826473814045E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999175644803423	WITHOUT_CLASSIFICATION	8.243551965770508E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999175644803423	WITHOUT_CLASSIFICATION	8.243551965770508E-5	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998860690047465	WITHOUT_CLASSIFICATION	1.1393099525341591E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999848327310393	WITHOUT_CLASSIFICATION	1.5167268960698772E-4	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997531876847826	WITHOUT_CLASSIFICATION	2.4681231521731764E-4	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999464131866469	WITHOUT_CLASSIFICATION	5.358681335302013E-5	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999860166905489	WITHOUT_CLASSIFICATION	1.3983309451224648E-5	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999968224095032	WITHOUT_CLASSIFICATION	3.1775904967865734E-5	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999850358454553	WITHOUT_CLASSIFICATION	1.49641545447221E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999794538036428	WITHOUT_CLASSIFICATION	2.0546196357170886E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999860925875111	WITHOUT_CLASSIFICATION	1.3907412488842143E-5	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999360201134115	WITHOUT_CLASSIFICATION	6.397988658854554E-5	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999022023778528	WITHOUT_CLASSIFICATION	9.779762214721359E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998838797752226	WITHOUT_CLASSIFICATION	1.1612022477732052E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999951576141353	WITHOUT_CLASSIFICATION	4.842385864809767E-6	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.997988131312014	WITHOUT_CLASSIFICATION	0.002011868687985938	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999741450089052	WITHOUT_CLASSIFICATION	2.585499109471525E-5	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999780291465423	WITHOUT_CLASSIFICATION	2.1970853457705744E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999594508486365	WITHOUT_CLASSIFICATION	4.0549151363483475E-5	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9998516633602721	WITHOUT_CLASSIFICATION	1.4833663972785695E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999074775922526	WITHOUT_CLASSIFICATION	9.252240774738336E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999293696141505	WITHOUT_CLASSIFICATION	7.063038584949361E-5	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981469564350819	WITHOUT_CLASSIFICATION	0.0018530435649181305	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999818646856947	WITHOUT_CLASSIFICATION	1.8135314305219135E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999149133651851	WITHOUT_CLASSIFICATION	8.508663481482486E-5	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998704748620991	WITHOUT_CLASSIFICATION	1.2952513790094003E-4	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999731573839766	WITHOUT_CLASSIFICATION	2.6842616023344726E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999748973125697	WITHOUT_CLASSIFICATION	2.5102687430287476E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999960276465285	WITHOUT_CLASSIFICATION	3.972353471511176E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999781090859245	WITHOUT_CLASSIFICATION	2.189091407552864E-5	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999208865718204	WITHOUT_CLASSIFICATION	7.911342817948639E-5	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999258875722712	WITHOUT_CLASSIFICATION	7.411242772882024E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999683185464896	WITHOUT_CLASSIFICATION	3.168145351044178E-5	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999455783847665	WITHOUT_CLASSIFICATION	5.442161523359574E-5	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999660244878028	WITHOUT_CLASSIFICATION	3.3975512197313E-5	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597929709901	WITHOUT_CLASSIFICATION	4.020702900993153E-5	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999766321846448	WITHOUT_CLASSIFICATION	2.336781535521955E-5	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999987078231424	WITHOUT_CLASSIFICATION	1.2921768575606E-6	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999722370415851	WITHOUT_CLASSIFICATION	2.7762958414898866E-5	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999122638845218	WITHOUT_CLASSIFICATION	8.773611547827054E-5	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998892334931371	WITHOUT_CLASSIFICATION	1.1076650686291259E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998892288925227	WITHOUT_CLASSIFICATION	1.1077110747719374E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999555743445108	WITHOUT_CLASSIFICATION	4.442565548911468E-5	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999445017039754	WITHOUT_CLASSIFICATION	5.549829602458683E-5	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998892446614495	WITHOUT_CLASSIFICATION	1.107553385505184E-4	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999305153032798	WITHOUT_CLASSIFICATION	6.948469672020627E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999920742587343	WITHOUT_CLASSIFICATION	7.925741265679617E-6	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999670330888016	WITHOUT_CLASSIFICATION	3.296691119843928E-5	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999881676082827	WITHOUT_CLASSIFICATION	1.1832391717360554E-5	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999859021861891	WITHOUT_CLASSIFICATION	1.4097813810955005E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999871935380178	WITHOUT_CLASSIFICATION	1.280646198211839E-5	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999945962654165	WITHOUT_CLASSIFICATION	5.403734583443519E-6	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999828216301121	WITHOUT_CLASSIFICATION	1.717836988791751E-5	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999984340465444	WITHOUT_CLASSIFICATION	1.5659534556193968E-6	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999938391608829	WITHOUT_CLASSIFICATION	6.1608391171190055E-6	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9997851923643848	WITHOUT_CLASSIFICATION	2.1480763561520087E-4	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.999947210611274	WITHOUT_CLASSIFICATION	5.278938872594933E-5	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999494692744101	WITHOUT_CLASSIFICATION	5.053072558984732E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999527648228687	WITHOUT_CLASSIFICATION	4.7235177131389645E-5	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999517651239117	WITHOUT_CLASSIFICATION	4.8234876088172466E-5	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999195043299547	WITHOUT_CLASSIFICATION	8.04956700453205E-5	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999419979460525	WITHOUT_CLASSIFICATION	5.800205394747593E-5	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999456805131042	WITHOUT_CLASSIFICATION	5.431948689591436E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9998975076418437	WITHOUT_CLASSIFICATION	1.0249235815629338E-4	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999567125806564	WITHOUT_CLASSIFICATION	4.328741934358484E-5	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999575945380161	WITHOUT_CLASSIFICATION	4.240546198395239E-5	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999599826205969	WITHOUT_CLASSIFICATION	4.0017379403049186E-5	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999468698220842	WITHOUT_CLASSIFICATION	5.313017791564239E-5	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999886222814433	WITHOUT_CLASSIFICATION	1.1377718556794084E-5	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999963494526416	WITHOUT_CLASSIFICATION	3.650547358349741E-6	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999853490913251	WITHOUT_CLASSIFICATION	1.4650908674976577E-5	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9998807852856191	WITHOUT_CLASSIFICATION	1.1921471438097542E-4	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998998982542511	WITHOUT_CLASSIFICATION	1.0010174574890686E-4	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999219924502776	WITHOUT_CLASSIFICATION	7.800754972243897E-5	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999645915320402	WITHOUT_CLASSIFICATION	3.540846795987959E-5	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999148732596418	WITHOUT_CLASSIFICATION	8.51267403582163E-5	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999246790725227	WITHOUT_CLASSIFICATION	7.532092747735738E-5	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9998818087288164	WITHOUT_CLASSIFICATION	1.1819127118360382E-4	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999171492323183	WITHOUT_CLASSIFICATION	8.285076768162321E-5	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999182642808395	WITHOUT_CLASSIFICATION	8.17357191604293E-5	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999343199389855	WITHOUT_CLASSIFICATION	6.568006101453546E-5	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999822304807983	WITHOUT_CLASSIFICATION	1.7769519201829203E-5	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999571761598316	WITHOUT_CLASSIFICATION	4.2823840168464774E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999335582095711	WITHOUT_CLASSIFICATION	6.644179042892187E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999336392566882	WITHOUT_CLASSIFICATION	6.636074331179584E-5	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999789760384049	WITHOUT_CLASSIFICATION	2.1023961595007337E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.999966792985316	WITHOUT_CLASSIFICATION	3.3207014684103735E-5	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999738349521111	WITHOUT_CLASSIFICATION	2.6165047888916653E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999668127456471	WITHOUT_CLASSIFICATION	3.3187254352842397E-5	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999581638428667	WITHOUT_CLASSIFICATION	4.18361571331963E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999547846127212	WITHOUT_CLASSIFICATION	4.5215387278727716E-5	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.99996962124488	WITHOUT_CLASSIFICATION	3.0378755120076795E-5	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.99999870957048	WITHOUT_CLASSIFICATION	1.290429520088283E-6	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9998940620879859	WITHOUT_CLASSIFICATION	1.0593791201407613E-4	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998720328013734	WITHOUT_CLASSIFICATION	1.2796719862656167E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999074629024177	WITHOUT_CLASSIFICATION	9.25370975822085E-5	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999203594242176	WITHOUT_CLASSIFICATION	7.964057578242416E-5	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998739787390111	WITHOUT_CLASSIFICATION	1.2602126098889977E-4	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998958963049167	WITHOUT_CLASSIFICATION	1.0410369508331576E-4	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999070136907133	WITHOUT_CLASSIFICATION	9.298630928667073E-5	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999019147249691	WITHOUT_CLASSIFICATION	9.808527503088584E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9998828092487446	WITHOUT_CLASSIFICATION	1.1719075125540639E-4	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.999883483489364	WITHOUT_CLASSIFICATION	1.1651651063612229E-4	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999889701484476	WITHOUT_CLASSIFICATION	1.1029851552394124E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999041789158405	WITHOUT_CLASSIFICATION	9.58210841595336E-5	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9998887069384053	WITHOUT_CLASSIFICATION	1.1129306159472111E-4	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999365790440387	WITHOUT_CLASSIFICATION	6.342095596134977E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999041789158405	WITHOUT_CLASSIFICATION	9.58210841595336E-5	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999441969804016	WITHOUT_CLASSIFICATION	5.580301959843718E-5	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999261082096825	WITHOUT_CLASSIFICATION	7.389179031749919E-5	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998076708773195	WITHOUT_CLASSIFICATION	1.9232912268050934E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9996433238962603	WITHOUT_CLASSIFICATION	3.56676103739623E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999626259968323	WITHOUT_CLASSIFICATION	3.737400316774623E-5	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999591261797227	WITHOUT_CLASSIFICATION	4.0873820277150464E-5	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998872699917072	WITHOUT_CLASSIFICATION	1.1273000829280836E-4	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999334177883332	WITHOUT_CLASSIFICATION	6.658221166672158E-5	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999239574385614	WITHOUT_CLASSIFICATION	7.604256143858234E-5	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998874612391823	WITHOUT_CLASSIFICATION	1.1253876081767725E-4	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999709720820805	WITHOUT_CLASSIFICATION	2.9027917919476487E-5	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999806076067794	WITHOUT_CLASSIFICATION	1.9392393220565104E-5	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9906968539241618	WITHOUT_CLASSIFICATION	0.009303146075838117	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999974025175036	WITHOUT_CLASSIFICATION	2.5974824964642373E-6	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999797053217089	WITHOUT_CLASSIFICATION	2.0294678291151245E-5	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999539582864362	WITHOUT_CLASSIFICATION	4.604171356385351E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998941879214687	WITHOUT_CLASSIFICATION	1.0581207853134286E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998941879214687	WITHOUT_CLASSIFICATION	1.0581207853134286E-4	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999758130939458	WITHOUT_CLASSIFICATION	2.418690605417126E-5	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9999149319132876	WITHOUT_CLASSIFICATION	8.506808671236752E-5	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999172650849232	WITHOUT_CLASSIFICATION	8.273491507679845E-5	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998837471935594	WITHOUT_CLASSIFICATION	1.1625280644048305E-4	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999499809745578	WITHOUT_CLASSIFICATION	5.001902544223386E-5	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999581254166607	WITHOUT_CLASSIFICATION	4.187458333919203E-5	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999055162003041	WITHOUT_CLASSIFICATION	9.44837996958375E-5	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999854619718216	WITHOUT_CLASSIFICATION	1.4538028178540056E-5	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999177007153086	WITHOUT_CLASSIFICATION	8.229928469137169E-5	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999675419791341	WITHOUT_CLASSIFICATION	3.2458020866047415E-5	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.999975780118845	WITHOUT_CLASSIFICATION	2.4219881155010915E-5	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999971635819604	WITHOUT_CLASSIFICATION	2.8364180395982503E-5	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9998989118485128	WITHOUT_CLASSIFICATION	1.0108815148733778E-4	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999518824533286	WITHOUT_CLASSIFICATION	4.811754667149078E-5	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999885118686399	WITHOUT_CLASSIFICATION	1.1488131360023003E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999074775922526	WITHOUT_CLASSIFICATION	9.252240774738336E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999703577264936	WITHOUT_CLASSIFICATION	2.9642273506454503E-5	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999886284255637	WITHOUT_CLASSIFICATION	1.1371574436291264E-5	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999469494271767	WITHOUT_CLASSIFICATION	5.3050572823386945E-5	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999037407921304	WITHOUT_CLASSIFICATION	9.625920786959665E-5	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999672293646394	WITHOUT_CLASSIFICATION	3.277063536053567E-5	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.999883689135334	WITHOUT_CLASSIFICATION	1.1631086466589625E-4	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999967808638763	WITHOUT_CLASSIFICATION	3.2191361236460046E-6	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999937358294144	WITHOUT_CLASSIFICATION	6.2641705855958085E-6	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999478945292966	WITHOUT_CLASSIFICATION	5.210547070355713E-5	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999583801049454	WITHOUT_CLASSIFICATION	4.161989505456451E-5	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999939372855509	WITHOUT_CLASSIFICATION	6.062714449145983E-6	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.999977277429959	WITHOUT_CLASSIFICATION	2.2722570041093468E-5	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999903149333779	WITHOUT_CLASSIFICATION	9.68506662217089E-6	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9998984402227424	WITHOUT_CLASSIFICATION	1.015597772576235E-4	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999554276243416	WITHOUT_CLASSIFICATION	4.457237565841581E-5	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9998881871359218	WITHOUT_CLASSIFICATION	1.1181286407828365E-4	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9967036760679869	WITHOUT_CLASSIFICATION	0.0032963239320130486	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999417666466855	WITHOUT_CLASSIFICATION	5.823335331457882E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9998795932521839	WITHOUT_CLASSIFICATION	1.2040674781611476E-4	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999823867488926	WITHOUT_CLASSIFICATION	1.7613251107422486E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999563806462825	WITHOUT_CLASSIFICATION	4.361935371766365E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9998802787102878	WITHOUT_CLASSIFICATION	1.1972128971213299E-4	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999862916609681	WITHOUT_CLASSIFICATION	1.3708339031986745E-5	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999904557275849	WITHOUT_CLASSIFICATION	9.544272415011754E-6	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999666993147827	WITHOUT_CLASSIFICATION	3.3300685217347086E-5	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999756417093708	WITHOUT_CLASSIFICATION	2.4358290629205482E-5	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999809389214626	WITHOUT_CLASSIFICATION	1.906107853740413E-5	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999480143524123	WITHOUT_CLASSIFICATION	5.198564758756334E-5	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999857420630838	WITHOUT_CLASSIFICATION	1.4257936916260846E-5	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999890240687388	WITHOUT_CLASSIFICATION	1.097593126116246E-5	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999122288832621	WITHOUT_CLASSIFICATION	8.777111673781634E-5	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999352800450771	WITHOUT_CLASSIFICATION	6.471995492283838E-5	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999945461205354	WITHOUT_CLASSIFICATION	5.453879464612357E-5	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.99998998283839	WITHOUT_CLASSIFICATION	1.0017161610080232E-5	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999747758824067	WITHOUT_CLASSIFICATION	2.5224117593405334E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998838797752226	WITHOUT_CLASSIFICATION	1.1612022477732052E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998838797752226	WITHOUT_CLASSIFICATION	1.1612022477732052E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999432688482636	WITHOUT_CLASSIFICATION	5.673115173630252E-5	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999973090827294	WITHOUT_CLASSIFICATION	2.690917270472565E-6	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999223479450954	WITHOUT_CLASSIFICATION	7.765205490452889E-5	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99988667072006	WITHOUT_CLASSIFICATION	1.1332927993998093E-4	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999223479450954	WITHOUT_CLASSIFICATION	7.765205490452889E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999072423322657	WITHOUT_CLASSIFICATION	9.275766773428158E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999952815948966	WITHOUT_CLASSIFICATION	4.718405103383974E-5	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999378229979181	WITHOUT_CLASSIFICATION	6.217700208187429E-5	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998136637172599	WITHOUT_CLASSIFICATION	1.863362827401913E-4	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999126713348776	WITHOUT_CLASSIFICATION	8.732866512242299E-5	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999454554793714	WITHOUT_CLASSIFICATION	5.454452062859831E-5	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999454494368011	WITHOUT_CLASSIFICATION	5.455056319886923E-5	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999346521659038	WITHOUT_CLASSIFICATION	6.534783409626497E-5	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.999954470512165	WITHOUT_CLASSIFICATION	4.552948783485495E-5	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.999971075985043	WITHOUT_CLASSIFICATION	2.892401495700476E-5	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999601858474111	WITHOUT_CLASSIFICATION	3.981415258883698E-5	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999182205012582	WITHOUT_CLASSIFICATION	8.177949874174754E-5	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9998933040082676	WITHOUT_CLASSIFICATION	1.0669599173244133E-4	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999927810951821	WITHOUT_CLASSIFICATION	7.218904817874888E-6	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.99996951517037	WITHOUT_CLASSIFICATION	3.0484829629940008E-5	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999676917728109	WITHOUT_CLASSIFICATION	3.2308227189143E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999695794119442	WITHOUT_CLASSIFICATION	3.0420588055798745E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999695794119442	WITHOUT_CLASSIFICATION	3.0420588055798745E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.999887465651392	WITHOUT_CLASSIFICATION	1.1253434860806684E-4	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999660778628018	WITHOUT_CLASSIFICATION	3.3922137198132275E-5	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.99998892782701	WITHOUT_CLASSIFICATION	1.1072172989922697E-5	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999923761320458	WITHOUT_CLASSIFICATION	7.623867954196486E-6	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999907687145123	WITHOUT_CLASSIFICATION	9.231285487618331E-6	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999903034796798	WITHOUT_CLASSIFICATION	9.696520320281552E-6	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999607831813032	WITHOUT_CLASSIFICATION	3.921681869681614E-5	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999215146758812	WITHOUT_CLASSIFICATION	7.848532411880741E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.999946463450549	WITHOUT_CLASSIFICATION	5.3536549450910616E-5	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999788749154026	WITHOUT_CLASSIFICATION	2.112508459744421E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999477166830109	WITHOUT_CLASSIFICATION	5.228331698904635E-5	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999921152071543	WITHOUT_CLASSIFICATION	7.884792845811986E-6	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999551102491603	WITHOUT_CLASSIFICATION	4.488975083974483E-5	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999419662800744	WITHOUT_CLASSIFICATION	5.8033719925732105E-5	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999403573082526	WITHOUT_CLASSIFICATION	5.964269174735518E-5	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999943567001665	WITHOUT_CLASSIFICATION	5.643299833578632E-6	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.999961968881787	WITHOUT_CLASSIFICATION	3.803111821305986E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9998199379875119	WITHOUT_CLASSIFICATION	1.8006201248817836E-4	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9999423160683588	WITHOUT_CLASSIFICATION	5.768393164129573E-5	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999530222389688	WITHOUT_CLASSIFICATION	4.6977761031150724E-5	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999382059769459	WITHOUT_CLASSIFICATION	6.179402305395795E-5	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9998895054835586	WITHOUT_CLASSIFICATION	1.1049451644144248E-4	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9998980101589222	WITHOUT_CLASSIFICATION	1.019898410777008E-4	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999222289962975	WITHOUT_CLASSIFICATION	7.77710037025681E-5	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999497383625398	WITHOUT_CLASSIFICATION	5.026163746028857E-5	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.999985137400459	WITHOUT_CLASSIFICATION	1.4862599541006399E-5	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999311066638494	WITHOUT_CLASSIFICATION	6.889333615062786E-5	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999613298655549	WITHOUT_CLASSIFICATION	3.867013444522956E-5	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999904304642119	WITHOUT_CLASSIFICATION	9.569535788109902E-5	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999888859268221	WITHOUT_CLASSIFICATION	1.1114073177889852E-5	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999611917738109	WITHOUT_CLASSIFICATION	3.8808226189161536E-5	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999354113620643	WITHOUT_CLASSIFICATION	6.45886379356815E-5	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.999986258951297	WITHOUT_CLASSIFICATION	1.374104870303875E-5	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998659120439989	WITHOUT_CLASSIFICATION	1.3408795600122197E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999958242830229	WITHOUT_CLASSIFICATION	4.175716977114758E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999795807335855	WITHOUT_CLASSIFICATION	2.041926641447587E-5	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999751182757716	WITHOUT_CLASSIFICATION	2.48817242284105E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999367316729986	WITHOUT_CLASSIFICATION	6.326832700148866E-5	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999355483188391	WITHOUT_CLASSIFICATION	6.445168116087194E-5	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999260573523299	WITHOUT_CLASSIFICATION	7.394264767019739E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999050443215401	WITHOUT_CLASSIFICATION	9.495567845991427E-5	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9998850577376088	WITHOUT_CLASSIFICATION	1.1494226239112747E-4	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9979802877689101	WITHOUT_CLASSIFICATION	0.002019712231089892	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999911277858308	WITHOUT_CLASSIFICATION	8.87221416914587E-6	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999693272938865	WITHOUT_CLASSIFICATION	3.0672706113481786E-5	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9970289298782634	WITHOUT_CLASSIFICATION	0.0029710701217365446	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999912121610622	WITHOUT_CLASSIFICATION	8.787838937747435E-6	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999568589713302	WITHOUT_CLASSIFICATION	4.314102866965067E-5	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999825391258269	WITHOUT_CLASSIFICATION	1.746087417314648E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999068908113506	WITHOUT_CLASSIFICATION	9.310918864939422E-5	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999936383757395	WITHOUT_CLASSIFICATION	6.361624260498353E-5	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999983988231705	WITHOUT_CLASSIFICATION	1.601176829494802E-6	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999610128798875	WITHOUT_CLASSIFICATION	3.8987120112561774E-5	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9998897315717831	WITHOUT_CLASSIFICATION	1.1026842821687031E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999287193520648	WITHOUT_CLASSIFICATION	7.128064793508657E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999287193520648	WITHOUT_CLASSIFICATION	7.128064793508657E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999975779861175	WITHOUT_CLASSIFICATION	2.4220138824931147E-6	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999406406532793	WITHOUT_CLASSIFICATION	5.9359346720736376E-5	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999176738031789	WITHOUT_CLASSIFICATION	8.232619682110675E-5	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999347338845402	WITHOUT_CLASSIFICATION	6.526611545978516E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999505863685787	WITHOUT_CLASSIFICATION	4.9413631421322464E-5	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999638054680567	WITHOUT_CLASSIFICATION	3.619453194324243E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999835447530458	WITHOUT_CLASSIFICATION	1.645524695410069E-5	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999720702439756	WITHOUT_CLASSIFICATION	2.7929756024360913E-5	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999547846695307	WITHOUT_CLASSIFICATION	4.521533046938185E-5	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999849336774622	WITHOUT_CLASSIFICATION	1.5066322537813045E-5	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.999966653668509	WITHOUT_CLASSIFICATION	3.334633149105541E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998716629672082	WITHOUT_CLASSIFICATION	1.283370327916955E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999719465953957	WITHOUT_CLASSIFICATION	2.80534046042516E-5	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999880407487483	WITHOUT_CLASSIFICATION	1.1959251251695801E-5	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999935434213111	WITHOUT_CLASSIFICATION	6.456578688975302E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999950407672317	WITHOUT_CLASSIFICATION	4.9592327682974485E-6	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9998825171705135	WITHOUT_CLASSIFICATION	1.174828294864626E-4	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999799673483022	WITHOUT_CLASSIFICATION	2.0032651697811002E-5	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998869545870602	WITHOUT_CLASSIFICATION	1.1304541293976426E-4	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999942208122279	WITHOUT_CLASSIFICATION	5.779187772110786E-6	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9998774715932957	WITHOUT_CLASSIFICATION	1.2252840670435954E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999584419483174	WITHOUT_CLASSIFICATION	4.155805168268427E-5	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999967655001114	WITHOUT_CLASSIFICATION	3.2344998886262866E-6	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999948805020223	WITHOUT_CLASSIFICATION	5.1194979777104544E-6	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999504770718802	WITHOUT_CLASSIFICATION	4.952292811974687E-5	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999882539342901	WITHOUT_CLASSIFICATION	1.1746065709908301E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999446213815657	WITHOUT_CLASSIFICATION	5.537861843419997E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999746243164529	WITHOUT_CLASSIFICATION	2.537568354713427E-5	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999995599169746	WITHOUT_CLASSIFICATION	4.40083025407711E-7	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9967080561918813	WITHOUT_CLASSIFICATION	0.003291943808118778	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9998901383111213	WITHOUT_CLASSIFICATION	1.098616888786663E-4	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999886856715101	WITHOUT_CLASSIFICATION	1.1314328489860196E-5	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999834219712705	WITHOUT_CLASSIFICATION	1.657802872938116E-5	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.999958038453082	WITHOUT_CLASSIFICATION	4.196154691805E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999863176094658	WITHOUT_CLASSIFICATION	1.3682390534130942E-5	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999699901750766	WITHOUT_CLASSIFICATION	3.0009824923408273E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9998901383111213	WITHOUT_CLASSIFICATION	1.098616888786663E-4	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.999987413144052	WITHOUT_CLASSIFICATION	1.258685594807465E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999986025660541	WITHOUT_CLASSIFICATION	1.3974339459066917E-5	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999951794355748	WITHOUT_CLASSIFICATION	4.8205644252012724E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999275919022865	WITHOUT_CLASSIFICATION	7.240809771344141E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999477166830109	WITHOUT_CLASSIFICATION	5.228331698904635E-5	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999268853100597	WITHOUT_CLASSIFICATION	7.31146899403435E-5	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999259775554111	WITHOUT_CLASSIFICATION	7.402244458889228E-5	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999849426979703	WITHOUT_CLASSIFICATION	1.5057302029618123E-5	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999387138453224	WITHOUT_CLASSIFICATION	6.12861546776127E-5	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999542126642521	WITHOUT_CLASSIFICATION	4.578733574797235E-5	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999453474815194	WITHOUT_CLASSIFICATION	5.465251848046563E-5	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999454879748414	WITHOUT_CLASSIFICATION	5.4512025158563407E-5	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.999991024348748	WITHOUT_CLASSIFICATION	8.9756512520672E-6	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998738300461222	WITHOUT_CLASSIFICATION	1.261699538777766E-4	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999489383232485	WITHOUT_CLASSIFICATION	5.106167675159566E-5	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999476491689208	WITHOUT_CLASSIFICATION	5.235083107928715E-5	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999738259777747	WITHOUT_CLASSIFICATION	2.6174022225214738E-5	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9998766304985818	WITHOUT_CLASSIFICATION	1.2336950141822925E-4	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999482291274574	WITHOUT_CLASSIFICATION	5.177087254259991E-5	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998997086476032	WITHOUT_CLASSIFICATION	1.0029135239682042E-4	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999755418757581	WITHOUT_CLASSIFICATION	2.4458124241838848E-5	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999659234454235	WITHOUT_CLASSIFICATION	3.407655457652945E-5	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999659423506528	WITHOUT_CLASSIFICATION	3.4057649347155496E-5	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999893330191412	WITHOUT_CLASSIFICATION	1.0666980858788544E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9998887405150145	WITHOUT_CLASSIFICATION	1.1125948498546581E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999679061420185	WITHOUT_CLASSIFICATION	3.2093857981462155E-5	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999444888169776	WITHOUT_CLASSIFICATION	5.551118302236753E-5	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999788627570724	WITHOUT_CLASSIFICATION	2.1137242927568545E-5	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999255080864335	WITHOUT_CLASSIFICATION	7.449191356653215E-5	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9998389342142704	WITHOUT_CLASSIFICATION	1.61065785729537E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999887747020081	WITHOUT_CLASSIFICATION	1.1225297991805775E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999131654742418	WITHOUT_CLASSIFICATION	8.683452575819428E-5	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998265601179741	WITHOUT_CLASSIFICATION	1.7343988202594152E-4	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999764283567494	WITHOUT_CLASSIFICATION	2.357164325064561E-5	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9998920076941248	WITHOUT_CLASSIFICATION	1.0799230587521327E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999947279263884	WITHOUT_CLASSIFICATION	5.272073611483626E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999304993872341	WITHOUT_CLASSIFICATION	6.950061276590924E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999304993872341	WITHOUT_CLASSIFICATION	6.950061276590924E-5	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999963454197278	WITHOUT_CLASSIFICATION	3.6545802722173518E-6	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999114165104112	WITHOUT_CLASSIFICATION	8.858348958884249E-5	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999454718940279	WITHOUT_CLASSIFICATION	5.4528105971996434E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999766659115963	WITHOUT_CLASSIFICATION	2.3334088403730158E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999467694713057	WITHOUT_CLASSIFICATION	5.3230528694461545E-5	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9998605770073885	WITHOUT_CLASSIFICATION	1.3942299261154555E-4	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999397000849449	WITHOUT_CLASSIFICATION	6.0299915054966586E-5	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999614741152308	WITHOUT_CLASSIFICATION	3.8525884769221356E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.999910409090534	WITHOUT_CLASSIFICATION	8.959090946603731E-5	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999943095298097	WITHOUT_CLASSIFICATION	5.690470190308964E-6	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999933991461478	WITHOUT_CLASSIFICATION	6.600853852202535E-5	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999729796333707	WITHOUT_CLASSIFICATION	2.7020366629294814E-5	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999624900124953	WITHOUT_CLASSIFICATION	3.750998750474771E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999304993872341	WITHOUT_CLASSIFICATION	6.950061276590924E-5	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999008180598877	WITHOUT_CLASSIFICATION	9.918194011216657E-5	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999849310941765	WITHOUT_CLASSIFICATION	1.5068905823495293E-4	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999606447159897	WITHOUT_CLASSIFICATION	3.935528401037669E-5	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999142154481668	WITHOUT_CLASSIFICATION	8.578455183309441E-5	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999765182879022	WITHOUT_CLASSIFICATION	2.3481712097781712E-5	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.99993754318995	WITHOUT_CLASSIFICATION	6.245681004999958E-5	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999922830152087	WITHOUT_CLASSIFICATION	7.716984791337441E-6	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999495022217938	WITHOUT_CLASSIFICATION	5.049777820607825E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999792960109691	WITHOUT_CLASSIFICATION	2.070398903086524E-5	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999235604885214	WITHOUT_CLASSIFICATION	7.643951147852585E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999500683074011	WITHOUT_CLASSIFICATION	4.9931692599044306E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999131654742418	WITHOUT_CLASSIFICATION	8.683452575819428E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999304993872341	WITHOUT_CLASSIFICATION	6.950061276590924E-5	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999122523349766	WITHOUT_CLASSIFICATION	8.774766502338292E-5	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999703557797479	WITHOUT_CLASSIFICATION	2.9644220252054807E-5	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9997841976505493	WITHOUT_CLASSIFICATION	2.1580234945085564E-4	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999351646775801	WITHOUT_CLASSIFICATION	6.483532241978713E-5	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999803334837144	WITHOUT_CLASSIFICATION	1.9666516285608342E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999540844334917	WITHOUT_CLASSIFICATION	4.591556650830811E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999274943714471	WITHOUT_CLASSIFICATION	7.250562855288574E-5	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999811954101969	WITHOUT_CLASSIFICATION	1.8804589803153008E-5	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999810830337325	WITHOUT_CLASSIFICATION	1.8916966267491845E-5	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999531431090815	WITHOUT_CLASSIFICATION	4.685689091864181E-5	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999839805175215	WITHOUT_CLASSIFICATION	1.6019482478535355E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999778437920678	WITHOUT_CLASSIFICATION	2.215620793219644E-5	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999725249766926	WITHOUT_CLASSIFICATION	2.7475023307455125E-5	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9998910963677683	WITHOUT_CLASSIFICATION	1.0890363223169561E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999072423322657	WITHOUT_CLASSIFICATION	9.275766773428158E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999847982718904	WITHOUT_CLASSIFICATION	1.5201728109597258E-5	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999946595453204	WITHOUT_CLASSIFICATION	5.340454679664473E-6	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999701633784083	WITHOUT_CLASSIFICATION	2.983662159176488E-5	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999042654538532	WITHOUT_CLASSIFICATION	9.57345461467077E-5	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999953401015469	WITHOUT_CLASSIFICATION	4.659898453085282E-6	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999913411164412	WITHOUT_CLASSIFICATION	8.658883558794009E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999913411164412	WITHOUT_CLASSIFICATION	8.658883558794009E-5	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999482122930956	WITHOUT_CLASSIFICATION	5.178770690431628E-5	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999684249543342	WITHOUT_CLASSIFICATION	3.15750456657873E-5	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999973352203032	WITHOUT_CLASSIFICATION	2.6647796968104135E-5	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999767527719672	WITHOUT_CLASSIFICATION	2.3247228032787632E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999227506385011	WITHOUT_CLASSIFICATION	7.724936149881552E-5	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999261626497187	WITHOUT_CLASSIFICATION	7.383735028123127E-5	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9998890103970464	WITHOUT_CLASSIFICATION	1.1098960295364242E-4	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999677438780518	WITHOUT_CLASSIFICATION	3.2256121948321244E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999677438780518	WITHOUT_CLASSIFICATION	3.2256121948321244E-5	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999087239195217	WITHOUT_CLASSIFICATION	9.127608047830318E-5	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999086417399305	WITHOUT_CLASSIFICATION	9.135826006946813E-5	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999501945972791	WITHOUT_CLASSIFICATION	4.980540272098604E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999423858734072	WITHOUT_CLASSIFICATION	5.761412659281521E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999423858734072	WITHOUT_CLASSIFICATION	5.761412659281521E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999423858734072	WITHOUT_CLASSIFICATION	5.761412659281521E-5	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999578281390978	WITHOUT_CLASSIFICATION	4.2171860902245034E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999747000148552	WITHOUT_CLASSIFICATION	2.5299985144769376E-5	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.999821048151077	WITHOUT_CLASSIFICATION	1.7895184892298763E-4	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998986716483027	WITHOUT_CLASSIFICATION	1.0132835169725937E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999773746854479	WITHOUT_CLASSIFICATION	2.262531455218098E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999304993872341	WITHOUT_CLASSIFICATION	6.950061276590924E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999304993872341	WITHOUT_CLASSIFICATION	6.950061276590924E-5	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999752213473325	WITHOUT_CLASSIFICATION	2.4778652667530473E-5	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999949529660633	WITHOUT_CLASSIFICATION	5.047033936647982E-6	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.999909583564119	WITHOUT_CLASSIFICATION	9.041643588095871E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999786960745215	WITHOUT_CLASSIFICATION	2.1303925478561092E-5	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999125540309565	WITHOUT_CLASSIFICATION	8.744596904350809E-5	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999504593461739	WITHOUT_CLASSIFICATION	4.95406538260697E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999238045602266	WITHOUT_CLASSIFICATION	7.619543977349321E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999932907057139	WITHOUT_CLASSIFICATION	6.709294286105772E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999747833817034	WITHOUT_CLASSIFICATION	2.5216618296673497E-5	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999303964313246	WITHOUT_CLASSIFICATION	6.960356867533027E-5	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999661987306675	WITHOUT_CLASSIFICATION	3.380126933247008E-5	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9998708146982428	WITHOUT_CLASSIFICATION	1.2918530175713073E-4	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9998708146982428	WITHOUT_CLASSIFICATION	1.2918530175713073E-4	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9998708146982428	WITHOUT_CLASSIFICATION	1.2918530175713073E-4	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9998708146982428	WITHOUT_CLASSIFICATION	1.2918530175713073E-4	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9998708146982428	WITHOUT_CLASSIFICATION	1.2918530175713073E-4	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998872238223881	WITHOUT_CLASSIFICATION	1.1277617761191607E-4	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998872238223881	WITHOUT_CLASSIFICATION	1.1277617761191607E-4	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998875151697834	WITHOUT_CLASSIFICATION	1.1248483021665478E-4	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998872238223881	WITHOUT_CLASSIFICATION	1.1277617761191607E-4	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999964646079376	WITHOUT_CLASSIFICATION	3.5353920624055924E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999913411164412	WITHOUT_CLASSIFICATION	8.658883558794009E-5	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999195367867664	WITHOUT_CLASSIFICATION	8.04632132336235E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998872238223881	WITHOUT_CLASSIFICATION	1.1277617761191607E-4	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999155440938884	WITHOUT_CLASSIFICATION	8.44559061116702E-5	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999067957624145	WITHOUT_CLASSIFICATION	9.320423758551137E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998711787386949	WITHOUT_CLASSIFICATION	1.2882126130498938E-4	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9998711564656352	WITHOUT_CLASSIFICATION	1.2884353436480806E-4	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999858626126517	WITHOUT_CLASSIFICATION	1.4137387348449048E-5	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999223263184289	WITHOUT_CLASSIFICATION	7.767368157113048E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999853082298246	WITHOUT_CLASSIFICATION	1.4691770175395851E-5	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.999950591091734	WITHOUT_CLASSIFICATION	4.940890826595832E-5	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999556202183962	WITHOUT_CLASSIFICATION	4.437978160381758E-5	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999909236646084	WITHOUT_CLASSIFICATION	9.076335391698208E-6	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999804923780458	WITHOUT_CLASSIFICATION	1.950762195416698E-5	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.997422412310926	WITHOUT_CLASSIFICATION	0.002577587689074113	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9997061358853419	WITHOUT_CLASSIFICATION	2.938641146581016E-4	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999118569948175	WITHOUT_CLASSIFICATION	8.814300518250735E-5	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999825357226516	WITHOUT_CLASSIFICATION	1.7464277348312472E-5	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999626929175857	WITHOUT_CLASSIFICATION	3.730708241441405E-5	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9996407105353506	WITHOUT_CLASSIFICATION	3.5928946464934916E-4	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998880184678011	WITHOUT_CLASSIFICATION	1.119815321988771E-4	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998880184678011	WITHOUT_CLASSIFICATION	1.119815321988771E-4	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999595944503757	WITHOUT_CLASSIFICATION	4.040554962426218E-5	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999854339347545	WITHOUT_CLASSIFICATION	1.4566065245502586E-5	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999648857312757	WITHOUT_CLASSIFICATION	3.5114268724151956E-5	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999407336746216	WITHOUT_CLASSIFICATION	5.9266325378415846E-5	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999219334664933	WITHOUT_CLASSIFICATION	7.80665335066596E-5	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999655849340735	WITHOUT_CLASSIFICATION	3.441506592638337E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999143374889519	WITHOUT_CLASSIFICATION	8.566251104802598E-5	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999638734306441	WITHOUT_CLASSIFICATION	3.6126569355906205E-5	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999512617730085	WITHOUT_CLASSIFICATION	4.873822699149132E-5	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999678106266641	WITHOUT_CLASSIFICATION	3.218937333595208E-5	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999039486769332	WITHOUT_CLASSIFICATION	9.605132306677634E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999778437920678	WITHOUT_CLASSIFICATION	2.215620793219644E-5	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999910703746417	WITHOUT_CLASSIFICATION	8.929625358248257E-6	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999896783469339	WITHOUT_CLASSIFICATION	1.032165306614753E-5	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999650133784854	WITHOUT_CLASSIFICATION	3.4986621514518236E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999800258464665	WITHOUT_CLASSIFICATION	1.9974153533490096E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999827738301242	WITHOUT_CLASSIFICATION	1.722616987585691E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999827738301242	WITHOUT_CLASSIFICATION	1.722616987585691E-5	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999471055126301	WITHOUT_CLASSIFICATION	5.289448736982693E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999978568170099	WITHOUT_CLASSIFICATION	2.1431829901651536E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999793390925019	WITHOUT_CLASSIFICATION	2.0660907498086994E-5	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999838927078272	WITHOUT_CLASSIFICATION	1.6107292172815537E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.999977694961045	WITHOUT_CLASSIFICATION	2.230503895500028E-5	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999492537055211	WITHOUT_CLASSIFICATION	5.074629447897908E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999115432582288	WITHOUT_CLASSIFICATION	8.845674177116051E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999847255486878	WITHOUT_CLASSIFICATION	1.5274451312238086E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999431783666723	WITHOUT_CLASSIFICATION	5.68216333276307E-5	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999690728181456	WITHOUT_CLASSIFICATION	3.092718185426916E-5	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999948814511224	WITHOUT_CLASSIFICATION	5.118548877605702E-6	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999847255486878	WITHOUT_CLASSIFICATION	1.5274451312238086E-5	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999804711388921	WITHOUT_CLASSIFICATION	1.952886110790114E-5	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999404187114231	WITHOUT_CLASSIFICATION	5.95812885768418E-5	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999804585041548	WITHOUT_CLASSIFICATION	1.9541495845204195E-5	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9998976925185119	WITHOUT_CLASSIFICATION	1.0230748148813659E-4	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999903061767547	WITHOUT_CLASSIFICATION	9.693823245339214E-6	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999932710202153	WITHOUT_CLASSIFICATION	6.728979784728929E-6	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999243619488224	WITHOUT_CLASSIFICATION	7.563805117757368E-5	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999811641088275	WITHOUT_CLASSIFICATION	1.8835891172392945E-5	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999919631747838	WITHOUT_CLASSIFICATION	8.036825216207275E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999749117434907	WITHOUT_CLASSIFICATION	2.508825650916901E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999127213176714	WITHOUT_CLASSIFICATION	8.727868232859403E-5	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999697656631771	WITHOUT_CLASSIFICATION	3.0234336822820346E-5	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.999928584644634	WITHOUT_CLASSIFICATION	7.141535536607967E-5	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999540392978004	WITHOUT_CLASSIFICATION	4.596070219967842E-5	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998639087124024	WITHOUT_CLASSIFICATION	1.3609128759761976E-4	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999946237775006	WITHOUT_CLASSIFICATION	5.3762224994140634E-6	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999484071963084	WITHOUT_CLASSIFICATION	5.159280369159017E-5	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9998051534999158	WITHOUT_CLASSIFICATION	1.9484650008410784E-4	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9998051534999158	WITHOUT_CLASSIFICATION	1.9484650008410784E-4	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999213752502617	WITHOUT_CLASSIFICATION	7.862474973824376E-5	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999752581093115	WITHOUT_CLASSIFICATION	2.474189068856596E-5	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9998908842108146	WITHOUT_CLASSIFICATION	1.091157891854239E-4	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999921235051387	WITHOUT_CLASSIFICATION	7.876494861304451E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999577674802016	WITHOUT_CLASSIFICATION	4.22325197982559E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999857757282414	WITHOUT_CLASSIFICATION	1.4224271758643586E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999920619315846	WITHOUT_CLASSIFICATION	7.938068415393748E-6	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999863311582956	WITHOUT_CLASSIFICATION	1.3668841704494186E-5	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999679887184976	WITHOUT_CLASSIFICATION	3.201128150249743E-5	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999674269755006	WITHOUT_CLASSIFICATION	3.257302449942336E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999882480745267	WITHOUT_CLASSIFICATION	1.1751925473411814E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999663332141135	WITHOUT_CLASSIFICATION	3.366678588643269E-5	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999316468315553	WITHOUT_CLASSIFICATION	6.83531684446449E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.999986618914997	WITHOUT_CLASSIFICATION	1.3381085003025665E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999309277417952	WITHOUT_CLASSIFICATION	6.907225820485851E-5	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999868904605467	WITHOUT_CLASSIFICATION	1.3109539453430462E-5	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999942348302948	WITHOUT_CLASSIFICATION	5.765169705205069E-6	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999849666527743	WITHOUT_CLASSIFICATION	1.5033347225767043E-5	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999386854151323	WITHOUT_CLASSIFICATION	6.131458486764644E-5	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999632203346203	WITHOUT_CLASSIFICATION	3.677966537980727E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999994158530863	WITHOUT_CLASSIFICATION	5.841469137022905E-6	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999822562650581	WITHOUT_CLASSIFICATION	1.774373494191616E-5	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999727798443224	WITHOUT_CLASSIFICATION	2.7220155677465212E-5	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.99999824917852	WITHOUT_CLASSIFICATION	1.750821480091848E-6	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999799584662862	WITHOUT_CLASSIFICATION	2.0041533713872495E-5	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999487761256964	WITHOUT_CLASSIFICATION	5.1223874303489735E-5	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999856389429728	WITHOUT_CLASSIFICATION	1.4361057027210848E-5	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999973118388641	WITHOUT_CLASSIFICATION	2.6881611359025588E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999694225376393	WITHOUT_CLASSIFICATION	3.0577462360625124E-5	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999496222489982	WITHOUT_CLASSIFICATION	5.037775100188139E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999281502524183	WITHOUT_CLASSIFICATION	7.184974758167465E-5	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999312964055059	WITHOUT_CLASSIFICATION	6.870359449410046E-5	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999830912547508	WITHOUT_CLASSIFICATION	1.6908745249179833E-5	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999805113173587	WITHOUT_CLASSIFICATION	1.948868264133991E-5	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999962859206711	WITHOUT_CLASSIFICATION	3.7140793287473263E-6	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999470626123306	WITHOUT_CLASSIFICATION	5.2937387669370053E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999568733787482	WITHOUT_CLASSIFICATION	4.31266212517853E-5	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999984179697598	WITHOUT_CLASSIFICATION	1.5820302402005957E-5	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999639868267461	WITHOUT_CLASSIFICATION	3.6013173253763104E-5	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999545303626326	WITHOUT_CLASSIFICATION	4.546963736738419E-5	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999714500494782	WITHOUT_CLASSIFICATION	2.8549950521782042E-5	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999642590324036	WITHOUT_CLASSIFICATION	3.574096759644754E-5	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.999935151451881	WITHOUT_CLASSIFICATION	6.48485481189555E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999862688689332	WITHOUT_CLASSIFICATION	1.37311310668564E-5	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999521740377012	WITHOUT_CLASSIFICATION	4.782596229881714E-5	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999964213805801	WITHOUT_CLASSIFICATION	3.578619419891768E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999281502524183	WITHOUT_CLASSIFICATION	7.184974758167465E-5	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999072928376337	WITHOUT_CLASSIFICATION	9.270716236631675E-5	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9998210634739791	WITHOUT_CLASSIFICATION	1.7893652602074094E-4	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.999968199863027	WITHOUT_CLASSIFICATION	3.1800136972986956E-5	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999853041549601	WITHOUT_CLASSIFICATION	1.4695845039821047E-5	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998168574535362	WITHOUT_CLASSIFICATION	1.8314254646380158E-4	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999662838489004	WITHOUT_CLASSIFICATION	3.3716151099532375E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999431783666723	WITHOUT_CLASSIFICATION	5.68216333276307E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999860690923207	WITHOUT_CLASSIFICATION	1.393090767928741E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999309277417952	WITHOUT_CLASSIFICATION	6.907225820485851E-5	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.99989193881585	WITHOUT_CLASSIFICATION	1.0806118415008343E-4	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.99989728094222	WITHOUT_CLASSIFICATION	1.0271905778004156E-4	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999613689086546	WITHOUT_CLASSIFICATION	3.863109134538062E-5	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999616327956836	WITHOUT_CLASSIFICATION	3.8367204316381394E-5	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999906953385928	WITHOUT_CLASSIFICATION	9.304661407188044E-5	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999593080105084	WITHOUT_CLASSIFICATION	4.0691989491755995E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999443123201253	WITHOUT_CLASSIFICATION	5.5687679874724475E-5	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999604031686141	WITHOUT_CLASSIFICATION	3.959683138592242E-5	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999849946768811	WITHOUT_CLASSIFICATION	1.5005323119080194E-5	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999819180172242	WITHOUT_CLASSIFICATION	1.808198277567993E-5	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999489472867642	WITHOUT_CLASSIFICATION	5.105271323578997E-5	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999733950463844	WITHOUT_CLASSIFICATION	2.6604953615590466E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999380875842557	WITHOUT_CLASSIFICATION	6.19124157443525E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999380875842557	WITHOUT_CLASSIFICATION	6.19124157443525E-5	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999535829808478	WITHOUT_CLASSIFICATION	4.64170191522874E-5	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999550242995416	WITHOUT_CLASSIFICATION	4.497570045824141E-5	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999805225939781	WITHOUT_CLASSIFICATION	1.9477406021982796E-5	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999970889447954	WITHOUT_CLASSIFICATION	2.9110552045545737E-6	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999946444536059	WITHOUT_CLASSIFICATION	5.3555463941707984E-6	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999611595489344	WITHOUT_CLASSIFICATION	3.8840451065738316E-5	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999931752786446	WITHOUT_CLASSIFICATION	6.82472135532523E-6	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999860876364048	WITHOUT_CLASSIFICATION	1.3912363595157005E-5	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999735183163946	WITHOUT_CLASSIFICATION	2.6481683605387818E-5	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999209798361128	WITHOUT_CLASSIFICATION	7.902016388717427E-5	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999136143595924	WITHOUT_CLASSIFICATION	8.63856404077357E-5	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999596859351233	WITHOUT_CLASSIFICATION	4.031406487661476E-5	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999451927437397	WITHOUT_CLASSIFICATION	5.4807256260303165E-5	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999976151736717	WITHOUT_CLASSIFICATION	2.3848263282802627E-6	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999405998425841	WITHOUT_CLASSIFICATION	5.940015741587304E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999353953963934	WITHOUT_CLASSIFICATION	6.460460360657024E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999197185658395	WITHOUT_CLASSIFICATION	8.028143416053752E-5	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999975884986843	WITHOUT_CLASSIFICATION	2.4115013157662327E-6	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999790842187963	WITHOUT_CLASSIFICATION	2.0915781203663003E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999175644803423	WITHOUT_CLASSIFICATION	8.243551965770508E-5	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999920893043135	WITHOUT_CLASSIFICATION	7.910695686577485E-6	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999855409097849	WITHOUT_CLASSIFICATION	1.4459090215085656E-5	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999933481371163	WITHOUT_CLASSIFICATION	6.651862883831195E-6	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999667278060181	WITHOUT_CLASSIFICATION	3.32721939818754E-5	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9998825343668627	WITHOUT_CLASSIFICATION	1.1746563313735143E-4	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999315327539808	WITHOUT_CLASSIFICATION	6.846724601911725E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999175644803423	WITHOUT_CLASSIFICATION	8.243551965770508E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999175644803423	WITHOUT_CLASSIFICATION	8.243551965770508E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999397555980801	WITHOUT_CLASSIFICATION	6.024440191982159E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999886946690941	WITHOUT_CLASSIFICATION	1.1305330905921597E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999510919282233	WITHOUT_CLASSIFICATION	4.890807177677369E-5	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999316562124707	WITHOUT_CLASSIFICATION	6.834378752928392E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999018380650821	WITHOUT_CLASSIFICATION	9.816193491785468E-5	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999920585900892	WITHOUT_CLASSIFICATION	7.941409910775562E-6	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9986796820167269	WITHOUT_CLASSIFICATION	0.0013203179832731028	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999275742029899	WITHOUT_CLASSIFICATION	7.242579700998252E-5	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999616390323577	WITHOUT_CLASSIFICATION	3.836096764236352E-5	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999015952926409	WITHOUT_CLASSIFICATION	9.84047073591431E-5	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.999926639010525	WITHOUT_CLASSIFICATION	7.336098947493591E-5	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999611206655796	WITHOUT_CLASSIFICATION	3.887933442035293E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999419374032404	WITHOUT_CLASSIFICATION	5.806259675967989E-5	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995933788445238	WITHOUT_CLASSIFICATION	4.0662115547613644E-4	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999943129089089	WITHOUT_CLASSIFICATION	5.687091091073219E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998763049866685	WITHOUT_CLASSIFICATION	1.236950133316052E-4	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999893968432418	WITHOUT_CLASSIFICATION	1.0603156758214813E-4	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998798291431947	WITHOUT_CLASSIFICATION	1.2017085680525193E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996978927180948	WITHOUT_CLASSIFICATION	3.0210728190510356E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9973296068343085	WITHOUT_CLASSIFICATION	0.0026703931656914632	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999799030831426	WITHOUT_CLASSIFICATION	2.0096916857418643E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999974178980844	WITHOUT_CLASSIFICATION	2.5821019155484438E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999557923416751	WITHOUT_CLASSIFICATION	4.420765832486781E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998371938668246	WITHOUT_CLASSIFICATION	1.6280613317533774E-4	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999621202097236	WITHOUT_CLASSIFICATION	3.7879790276361056E-5	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999859144906796	WITHOUT_CLASSIFICATION	1.4085509320221955E-5	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999638753330712	WITHOUT_CLASSIFICATION	3.6124666928691636E-5	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9998810086276761	WITHOUT_CLASSIFICATION	1.1899137232393072E-4	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999334213475755	WITHOUT_CLASSIFICATION	6.657865242462012E-5	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999853765373927	WITHOUT_CLASSIFICATION	1.4623462607278829E-5	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9998936354253956	WITHOUT_CLASSIFICATION	1.0636457460445889E-4	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9998891490293713	WITHOUT_CLASSIFICATION	1.1085097062873195E-4	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999432609822085	WITHOUT_CLASSIFICATION	5.673901779150543E-5	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999194757882116	WITHOUT_CLASSIFICATION	8.052421178842526E-5	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999684729079128	WITHOUT_CLASSIFICATION	3.152709208723249E-5	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999423823514505	WITHOUT_CLASSIFICATION	5.761764854954793E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999025719972162	WITHOUT_CLASSIFICATION	9.74280027838271E-5	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999696559690239	WITHOUT_CLASSIFICATION	3.0344030976145944E-5	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999644822415621	WITHOUT_CLASSIFICATION	3.5517758437843113E-5	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999357459186436	WITHOUT_CLASSIFICATION	6.425408135630963E-5	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999856601997935	WITHOUT_CLASSIFICATION	1.4339800206592775E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999606012536228	WITHOUT_CLASSIFICATION	3.9398746377240494E-5	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999369148857251	WITHOUT_CLASSIFICATION	6.308511427493206E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999606012536228	WITHOUT_CLASSIFICATION	3.9398746377240494E-5	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999925369644599	WITHOUT_CLASSIFICATION	7.463035540124201E-6	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.999967150110504	WITHOUT_CLASSIFICATION	3.284988949609079E-5	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999848167138229	WITHOUT_CLASSIFICATION	1.5183286176996148E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999893110599409	WITHOUT_CLASSIFICATION	1.0688940059156408E-5	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999787265327826	WITHOUT_CLASSIFICATION	2.127346721743919E-5	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999847360634047	WITHOUT_CLASSIFICATION	1.5263936595345902E-5	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999853185754134	WITHOUT_CLASSIFICATION	1.4681424586615907E-5	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999333455794617	WITHOUT_CLASSIFICATION	6.665442053826765E-5	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999617460732875	WITHOUT_CLASSIFICATION	3.8253926712597794E-5	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999079197419893	WITHOUT_CLASSIFICATION	9.20802580107274E-5	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999647701564421	WITHOUT_CLASSIFICATION	3.522984355781807E-5	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999926637794694	WITHOUT_CLASSIFICATION	7.336220530593362E-6	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999955523181727	WITHOUT_CLASSIFICATION	4.447681827234226E-6	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9998405975885922	WITHOUT_CLASSIFICATION	1.594024114076871E-4	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999970133069465	WITHOUT_CLASSIFICATION	2.9866930534976224E-5	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999826949114103	WITHOUT_CLASSIFICATION	1.7305088589683015E-5	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999751881139344	WITHOUT_CLASSIFICATION	2.481188606558339E-5	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999502268165222	WITHOUT_CLASSIFICATION	4.977318347766493E-5	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999771396121718	WITHOUT_CLASSIFICATION	2.286038782814123E-5	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999816004171886	WITHOUT_CLASSIFICATION	1.839958281139884E-5	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999774165210563	WITHOUT_CLASSIFICATION	2.2583478943668857E-5	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999042651581153	WITHOUT_CLASSIFICATION	9.573484188470457E-5	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999424896867928	WITHOUT_CLASSIFICATION	5.751031320728896E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999595166016136	WITHOUT_CLASSIFICATION	4.0483398386408E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999022064913626	WITHOUT_CLASSIFICATION	9.779350863729745E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999936288515835	WITHOUT_CLASSIFICATION	6.371148416427544E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999038466929111	WITHOUT_CLASSIFICATION	9.615330708880734E-5	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999331044570516	WITHOUT_CLASSIFICATION	6.689554294834055E-5	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999024915872092	WITHOUT_CLASSIFICATION	9.750841279082129E-5	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999429238158729	WITHOUT_CLASSIFICATION	5.707618412707823E-5	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.999875079190472	WITHOUT_CLASSIFICATION	1.2492080952794925E-4	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999905053388146	WITHOUT_CLASSIFICATION	9.494661185322153E-6	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.99999140031175	WITHOUT_CLASSIFICATION	8.599688249989747E-6	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9998897923451431	WITHOUT_CLASSIFICATION	1.1020765485693967E-4	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9998822959551463	WITHOUT_CLASSIFICATION	1.1770404485363663E-4	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999081170049559	WITHOUT_CLASSIFICATION	9.188299504414558E-5	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998999963757186	WITHOUT_CLASSIFICATION	1.000036242814523E-4	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9998850540010737	WITHOUT_CLASSIFICATION	1.1494599892634247E-4	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999276036035933	WITHOUT_CLASSIFICATION	7.239639640660173E-5	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999187628261487	WITHOUT_CLASSIFICATION	8.123717385133198E-5	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9998796794547687	WITHOUT_CLASSIFICATION	1.2032054523126465E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999770380297692	WITHOUT_CLASSIFICATION	2.296197023087174E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999936288515835	WITHOUT_CLASSIFICATION	6.371148416427544E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.999957300616794	WITHOUT_CLASSIFICATION	4.2699383205971985E-5	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9998921129887556	WITHOUT_CLASSIFICATION	1.078870112444089E-4	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999955689614768	WITHOUT_CLASSIFICATION	4.431038523196167E-5	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9998896979590838	WITHOUT_CLASSIFICATION	1.1030204091613406E-4	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999513744749798	WITHOUT_CLASSIFICATION	4.862552502008364E-5	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999309026222994	WITHOUT_CLASSIFICATION	6.909737770059327E-5	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9998910035490326	WITHOUT_CLASSIFICATION	1.0899645096735794E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999017917237634	WITHOUT_CLASSIFICATION	9.820827623661437E-5	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999877206347357	WITHOUT_CLASSIFICATION	1.227936526422194E-5	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9999302808821818	WITHOUT_CLASSIFICATION	6.971911781820998E-5	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999768193918828	WITHOUT_CLASSIFICATION	2.3180608117189812E-5	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999904749928186	WITHOUT_CLASSIFICATION	9.525007181403504E-5	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998715575762935	WITHOUT_CLASSIFICATION	1.284424237064383E-4	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999203788825232	WITHOUT_CLASSIFICATION	7.962111747683851E-5	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999880405849242	WITHOUT_CLASSIFICATION	1.195941507581416E-5	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999218352551379	WITHOUT_CLASSIFICATION	7.816474486210069E-5	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999925566735009	WITHOUT_CLASSIFICATION	7.443326499094134E-5	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999922905232208	WITHOUT_CLASSIFICATION	7.709476779156903E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999190949665492	WITHOUT_CLASSIFICATION	8.090503345079183E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9998906941059564	WITHOUT_CLASSIFICATION	1.093058940435455E-4	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999287942859886	WITHOUT_CLASSIFICATION	7.120571401148962E-5	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999586339688299	WITHOUT_CLASSIFICATION	4.13660311700863E-5	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999819820151665	WITHOUT_CLASSIFICATION	1.801798483351408E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9995881463201455	WITHOUT_CLASSIFICATION	4.1185367985449383E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9995881463201455	WITHOUT_CLASSIFICATION	4.1185367985449383E-4	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999821723154225	WITHOUT_CLASSIFICATION	1.7827684577391953E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9995881463201455	WITHOUT_CLASSIFICATION	4.1185367985449383E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9995881463201455	WITHOUT_CLASSIFICATION	4.1185367985449383E-4	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999423356521714	WITHOUT_CLASSIFICATION	5.766434782862067E-5	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999522068414018	WITHOUT_CLASSIFICATION	4.7793158598076276E-5	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999073372910328	WITHOUT_CLASSIFICATION	9.266270896733276E-5	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999906063099927	WITHOUT_CLASSIFICATION	9.393690007299171E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999783141526928	WITHOUT_CLASSIFICATION	2.1685847307223936E-5	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999834402803991	WITHOUT_CLASSIFICATION	1.6559719600941896E-5	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9998878929807237	WITHOUT_CLASSIFICATION	1.1210701927628275E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.999985879067512	WITHOUT_CLASSIFICATION	1.4120932487983385E-5	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998810178745727	WITHOUT_CLASSIFICATION	1.1898212542727931E-4	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998885290383057	WITHOUT_CLASSIFICATION	1.114709616942839E-4	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999160129564121	WITHOUT_CLASSIFICATION	8.39870435878781E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999236074140018	WITHOUT_CLASSIFICATION	7.639258599827593E-5	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998993367607314	WITHOUT_CLASSIFICATION	1.006632392686367E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999121259650602	WITHOUT_CLASSIFICATION	8.787403493979207E-5	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9998994872002492	WITHOUT_CLASSIFICATION	1.0051279975076239E-4	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999622046809936	WITHOUT_CLASSIFICATION	3.779531900638523E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999432688482636	WITHOUT_CLASSIFICATION	5.673115173630252E-5	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999272402357946	WITHOUT_CLASSIFICATION	7.275976420541011E-5	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9998792535770428	WITHOUT_CLASSIFICATION	1.2074642295731254E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999121259650602	WITHOUT_CLASSIFICATION	8.787403493979207E-5	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999489005437993	WITHOUT_CLASSIFICATION	5.1099456200656664E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999337694975231	WITHOUT_CLASSIFICATION	6.623050247691998E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999432688482636	WITHOUT_CLASSIFICATION	5.673115173630252E-5	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999038466929111	WITHOUT_CLASSIFICATION	9.615330708880734E-5	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9998785442685578	WITHOUT_CLASSIFICATION	1.214557314421305E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999781090859245	WITHOUT_CLASSIFICATION	2.189091407552864E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999683185464896	WITHOUT_CLASSIFICATION	3.168145351044178E-5	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9998879685275811	WITHOUT_CLASSIFICATION	1.1203147241889507E-4	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999515821067542	WITHOUT_CLASSIFICATION	4.8417893245798773E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9998333377192228	WITHOUT_CLASSIFICATION	1.66662280777319E-4	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999437104117017	WITHOUT_CLASSIFICATION	5.628958829817853E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998392068291353	WITHOUT_CLASSIFICATION	1.607931708648153E-4	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999291015373045	WITHOUT_CLASSIFICATION	7.089846269543368E-5	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999385849413043	WITHOUT_CLASSIFICATION	6.141505869573654E-5	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999597004988251	WITHOUT_CLASSIFICATION	4.029950117496778E-5	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999093563276734	WITHOUT_CLASSIFICATION	9.064367232663488E-5	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999796313526736	WITHOUT_CLASSIFICATION	2.0368647326460625E-5	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999602280688221	WITHOUT_CLASSIFICATION	3.977193117792305E-5	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999858156833481	WITHOUT_CLASSIFICATION	1.4184316651771837E-5	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999306102254885	WITHOUT_CLASSIFICATION	6.93897745115548E-5	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999026441216212	WITHOUT_CLASSIFICATION	9.735587837877779E-5	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999755515738415	WITHOUT_CLASSIFICATION	2.444842615841872E-5	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999550217590676	WITHOUT_CLASSIFICATION	4.4978240932322855E-5	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999052555173763	WITHOUT_CLASSIFICATION	9.474448262376147E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9998941338377383	WITHOUT_CLASSIFICATION	1.0586616226170381E-4	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999694280817902	WITHOUT_CLASSIFICATION	3.0571918209802465E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998392068291353	WITHOUT_CLASSIFICATION	1.607931708648153E-4	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999252180183995	WITHOUT_CLASSIFICATION	7.478198160054174E-5	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9998958340729793	WITHOUT_CLASSIFICATION	1.0416592702072798E-4	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999030126872012	WITHOUT_CLASSIFICATION	9.698731279881028E-5	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9998655624655176	WITHOUT_CLASSIFICATION	1.3443753448242414E-4	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999922188709167	WITHOUT_CLASSIFICATION	7.78112908329134E-5	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9998848315002002	WITHOUT_CLASSIFICATION	1.1516849979967641E-4	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9998833576330591	WITHOUT_CLASSIFICATION	1.1664236694093112E-4	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9998677603643202	WITHOUT_CLASSIFICATION	1.322396356797713E-4	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999062758858348	WITHOUT_CLASSIFICATION	9.372411416512325E-5	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9998723607402792	WITHOUT_CLASSIFICATION	1.276392597208075E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999610180477692	WITHOUT_CLASSIFICATION	3.898195223093588E-5	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999706265309244	WITHOUT_CLASSIFICATION	2.9373469075724435E-5	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999598991076251	WITHOUT_CLASSIFICATION	4.010089237498531E-5	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999891653176626	WITHOUT_CLASSIFICATION	1.0834682337417208E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999304919314282	WITHOUT_CLASSIFICATION	6.950806857170939E-5	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999968223359592	WITHOUT_CLASSIFICATION	3.1776640406597617E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999471387407207	WITHOUT_CLASSIFICATION	5.2861259279309375E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999610180477692	WITHOUT_CLASSIFICATION	3.898195223093588E-5	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999952472845618	WITHOUT_CLASSIFICATION	4.752715438149943E-6	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999161277668747	WITHOUT_CLASSIFICATION	8.387223312523995E-5	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999419271069032	WITHOUT_CLASSIFICATION	5.807289309678596E-5	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999385454720229	WITHOUT_CLASSIFICATION	6.145452797711447E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999679743133302	WITHOUT_CLASSIFICATION	3.2025686669849114E-5	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999925553691886	WITHOUT_CLASSIFICATION	7.44463081147108E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999304919314282	WITHOUT_CLASSIFICATION	6.950806857170939E-5	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999605411749157	WITHOUT_CLASSIFICATION	3.945882508429161E-5	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714087776754	WITHOUT_CLASSIFICATION	2.8591222324576664E-5	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999367110543893	WITHOUT_CLASSIFICATION	6.328894561066873E-5	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9948376826080122	WITHOUT_CLASSIFICATION	0.005162317391987806	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975471590091385	WITHOUT_CLASSIFICATION	0.002452840990861595	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978012163932293	WITHOUT_CLASSIFICATION	0.0021987836067706807	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999635964809289	WITHOUT_CLASSIFICATION	3.64035190711706E-5	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999635964809289	WITHOUT_CLASSIFICATION	3.64035190711706E-5	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999068065367088	WITHOUT_CLASSIFICATION	9.319346329113492E-5	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999694889039913	WITHOUT_CLASSIFICATION	3.0511096008694792E-5	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.999900083530885	WITHOUT_CLASSIFICATION	9.991646911493025E-5	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999091434938389	WITHOUT_CLASSIFICATION	9.085650616109057E-5	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.999960927478151	WITHOUT_CLASSIFICATION	3.907252184905391E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999219383782904	WITHOUT_CLASSIFICATION	7.806162170958792E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999418079225294	WITHOUT_CLASSIFICATION	5.8192077470521556E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998972509212183	WITHOUT_CLASSIFICATION	1.0274907878172327E-4	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999783039203979	WITHOUT_CLASSIFICATION	2.1696079602105012E-5	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999441825153191	WITHOUT_CLASSIFICATION	5.5817484680745E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999219383782904	WITHOUT_CLASSIFICATION	7.806162170958792E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999418079225294	WITHOUT_CLASSIFICATION	5.8192077470521556E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998972509212183	WITHOUT_CLASSIFICATION	1.0274907878172327E-4	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9976643718998341	WITHOUT_CLASSIFICATION	0.0023356281001658133	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.999907951427647	WITHOUT_CLASSIFICATION	9.204857235308875E-5	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.999983861227824	WITHOUT_CLASSIFICATION	1.6138772175963236E-5	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999761596362324	WITHOUT_CLASSIFICATION	2.3840363767547818E-5	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999579904655219	WITHOUT_CLASSIFICATION	4.2009534478041975E-5	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999806745994204	WITHOUT_CLASSIFICATION	1.9325400579580793E-5	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998961076332101	WITHOUT_CLASSIFICATION	1.0389236678978545E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9998651370359717	WITHOUT_CLASSIFICATION	1.3486296402823972E-4	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9967024614585304	WITHOUT_CLASSIFICATION	0.003297538541469663	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9998872251904304	WITHOUT_CLASSIFICATION	1.1277480956964402E-4	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999170948915915	WITHOUT_CLASSIFICATION	8.290510840851291E-5	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999658865172557	WITHOUT_CLASSIFICATION	3.411348274416937E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999398385705531	WITHOUT_CLASSIFICATION	6.0161429446970086E-5	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999268861409532	WITHOUT_CLASSIFICATION	7.311385904683088E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999586579163179	WITHOUT_CLASSIFICATION	4.134208368210966E-5	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998899539324377	WITHOUT_CLASSIFICATION	1.1004606756234504E-4	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999245085119025	WITHOUT_CLASSIFICATION	7.549148809747087E-5	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999125099397409	WITHOUT_CLASSIFICATION	8.749006025912934E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999890163109559	WITHOUT_CLASSIFICATION	1.0983689043927909E-5	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999653882513292	WITHOUT_CLASSIFICATION	3.4611748670819924E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999724636556098	WITHOUT_CLASSIFICATION	2.75363443901822E-5	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999514857664221	WITHOUT_CLASSIFICATION	4.8514233577863136E-5	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999788390266634	WITHOUT_CLASSIFICATION	2.1160973336525067E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999922280262407	WITHOUT_CLASSIFICATION	7.771973759393136E-6	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9997174914678374	WITHOUT_CLASSIFICATION	2.825085321626052E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999927863602792	WITHOUT_CLASSIFICATION	7.213639720799679E-5	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999400222624627	WITHOUT_CLASSIFICATION	5.9977737537273E-5	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.999991439631754	WITHOUT_CLASSIFICATION	8.560368246002091E-6	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999408034209348	WITHOUT_CLASSIFICATION	5.9196579065137665E-5	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999914928599926	WITHOUT_CLASSIFICATION	8.507140007398497E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999074629024177	WITHOUT_CLASSIFICATION	9.25370975822085E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999074629024177	WITHOUT_CLASSIFICATION	9.25370975822085E-5	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999785821723477	WITHOUT_CLASSIFICATION	2.1417827652323658E-5	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999936659924793	WITHOUT_CLASSIFICATION	6.334007520694971E-6	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.999957926920242	WITHOUT_CLASSIFICATION	4.207307975807105E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999778437920678	WITHOUT_CLASSIFICATION	2.215620793219644E-5	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9998859390270526	WITHOUT_CLASSIFICATION	1.1406097294747086E-4	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999813056332332	WITHOUT_CLASSIFICATION	1.8694366766812123E-5	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9967153111821075	WITHOUT_CLASSIFICATION	0.0032846888178925805	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999605273574838	WITHOUT_CLASSIFICATION	3.94726425162625E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.999883483489364	WITHOUT_CLASSIFICATION	1.1651651063612229E-4	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999521450632558	WITHOUT_CLASSIFICATION	4.7854936744266777E-5	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665934918176	WITHOUT_CLASSIFICATION	3.3406508182364325E-5	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999409771316827	WITHOUT_CLASSIFICATION	5.902286831729442E-5	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999490375376308	WITHOUT_CLASSIFICATION	5.096246236920985E-5	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999490736864629	WITHOUT_CLASSIFICATION	5.092631353707174E-5	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999376703566111	WITHOUT_CLASSIFICATION	6.23296433890214E-5	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999951805120292	WITHOUT_CLASSIFICATION	4.819487970795702E-5	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999637550892897	WITHOUT_CLASSIFICATION	3.6244910710307135E-5	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999504087672638	WITHOUT_CLASSIFICATION	4.959123273612046E-5	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999323370466655	WITHOUT_CLASSIFICATION	6.766295333447434E-5	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999451761547776	WITHOUT_CLASSIFICATION	5.482384522235462E-5	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999596378753823	WITHOUT_CLASSIFICATION	4.036212461760532E-5	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999629371622722	WITHOUT_CLASSIFICATION	3.706283772782357E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998645255628428	WITHOUT_CLASSIFICATION	1.3547443715734E-4	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999933405887347	WITHOUT_CLASSIFICATION	6.659411265376153E-6	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999882376447299	WITHOUT_CLASSIFICATION	1.1762355270074702E-5	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9997019317602854	WITHOUT_CLASSIFICATION	2.980682397145542E-4	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.999985203154665	WITHOUT_CLASSIFICATION	1.4796845334971215E-5	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999644342282129	WITHOUT_CLASSIFICATION	3.5565771787036355E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998645255628428	WITHOUT_CLASSIFICATION	1.3547443715734E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998645255628428	WITHOUT_CLASSIFICATION	1.3547443715734E-4	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999919400154461	WITHOUT_CLASSIFICATION	8.059984553866869E-6	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999218229081586	WITHOUT_CLASSIFICATION	7.817709184136117E-5	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999952235980437	WITHOUT_CLASSIFICATION	4.776401956275189E-6	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999858123832857	WITHOUT_CLASSIFICATION	1.4187616714255124E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9997061358853419	WITHOUT_CLASSIFICATION	2.938641146581016E-4	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999890163109559	WITHOUT_CLASSIFICATION	1.0983689043927909E-5	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999916180520444	WITHOUT_CLASSIFICATION	8.381947955602182E-5	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999196601307243	WITHOUT_CLASSIFICATION	8.033986927570551E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999489779285088	WITHOUT_CLASSIFICATION	5.102207149114887E-5	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999897561552456	WITHOUT_CLASSIFICATION	1.024384475439065E-4	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999914395638594	WITHOUT_CLASSIFICATION	8.560436140518314E-6	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999356117685819	WITHOUT_CLASSIFICATION	6.438823141802958E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999373935948814	WITHOUT_CLASSIFICATION	6.26064051185713E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999373935948814	WITHOUT_CLASSIFICATION	6.26064051185713E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999379365002374	WITHOUT_CLASSIFICATION	6.206349976255986E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999379365002374	WITHOUT_CLASSIFICATION	6.206349976255986E-5	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998920714005891	WITHOUT_CLASSIFICATION	1.0792859941092554E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999197928287664	WITHOUT_CLASSIFICATION	8.020717123369287E-5	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999719540892468	WITHOUT_CLASSIFICATION	2.8045910753239467E-5	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999892743733545	WITHOUT_CLASSIFICATION	1.0725626645509227E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999848703860013	WITHOUT_CLASSIFICATION	1.5129613998713069E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999588598910653	WITHOUT_CLASSIFICATION	4.114010893463068E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99992377502676	WITHOUT_CLASSIFICATION	7.622497323999799E-5	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999354754351851	WITHOUT_CLASSIFICATION	6.452456481490743E-5	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999273041837754	WITHOUT_CLASSIFICATION	7.269581622459427E-5	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.999912955856305	WITHOUT_CLASSIFICATION	8.704414369499601E-5	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999499369423155	WITHOUT_CLASSIFICATION	5.006305768436161E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998838797752226	WITHOUT_CLASSIFICATION	1.1612022477732052E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999529950252365	WITHOUT_CLASSIFICATION	4.70049747634973E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999308299636598	WITHOUT_CLASSIFICATION	6.917003634019237E-5	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999223950509245	WITHOUT_CLASSIFICATION	7.760494907547127E-5	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9998820674037877	WITHOUT_CLASSIFICATION	1.1793259621231106E-4	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999222408097669	WITHOUT_CLASSIFICATION	7.775919023308871E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999222408097669	WITHOUT_CLASSIFICATION	7.775919023308871E-5	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999788334584918	WITHOUT_CLASSIFICATION	2.1166541508239528E-5	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9998657687239226	WITHOUT_CLASSIFICATION	1.3423127607726037E-4	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999813681200538	WITHOUT_CLASSIFICATION	1.8631879946178787E-5	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999188610436133	WITHOUT_CLASSIFICATION	8.113895638677356E-5	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999122558626119	WITHOUT_CLASSIFICATION	8.774413738808351E-5	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999293583724645	WITHOUT_CLASSIFICATION	7.064162753538787E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976227256787256	WITHOUT_CLASSIFICATION	0.002377274321274441	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999731057993614	WITHOUT_CLASSIFICATION	2.689420063861883E-5	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999953073052981	WITHOUT_CLASSIFICATION	4.692694701977982E-6	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.999992821558361	WITHOUT_CLASSIFICATION	7.178441638937651E-6	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999778835896563	WITHOUT_CLASSIFICATION	2.2116410343646005E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998807495861923	WITHOUT_CLASSIFICATION	1.1925041380768678E-4	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999923109965076	WITHOUT_CLASSIFICATION	7.689003492395328E-6	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999137930898624	WITHOUT_CLASSIFICATION	8.62069101376528E-5	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998785169882951	WITHOUT_CLASSIFICATION	1.2148301170490857E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999785953825368	WITHOUT_CLASSIFICATION	2.1404617463162347E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999400034595624	WITHOUT_CLASSIFICATION	5.99965404377539E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999429716445711	WITHOUT_CLASSIFICATION	5.702835542879533E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999688072848137	WITHOUT_CLASSIFICATION	3.119271518627578E-5	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.999999615151062	WITHOUT_CLASSIFICATION	3.848489381074905E-7	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999915441505544	WITHOUT_CLASSIFICATION	8.455849445582328E-6	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999956168270022	WITHOUT_CLASSIFICATION	4.3831729977591634E-6	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.999985301897057	WITHOUT_CLASSIFICATION	1.4698102942964912E-5	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999169869251527	WITHOUT_CLASSIFICATION	8.30130748472909E-5	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999976806760538	WITHOUT_CLASSIFICATION	2.319323946200535E-5	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999337564270412	WITHOUT_CLASSIFICATION	6.624357295885333E-5	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999021786865028	WITHOUT_CLASSIFICATION	9.782131349731944E-5	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999962003577869	WITHOUT_CLASSIFICATION	3.7996422130282402E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999417666466855	WITHOUT_CLASSIFICATION	5.823335331457882E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999994228331601	WITHOUT_CLASSIFICATION	5.771668398393432E-7	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999217168324867	WITHOUT_CLASSIFICATION	7.828316751339002E-5	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999192756993456	WITHOUT_CLASSIFICATION	8.072430065446459E-5	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9997966571993007	WITHOUT_CLASSIFICATION	2.033428006992532E-4	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998946895346525	WITHOUT_CLASSIFICATION	1.0531046534746142E-4	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9998998882283092	WITHOUT_CLASSIFICATION	1.0011177169074154E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999950407672317	WITHOUT_CLASSIFICATION	4.9592327682974485E-6	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999337442176391	WITHOUT_CLASSIFICATION	6.625578236094019E-5	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999262535466321	WITHOUT_CLASSIFICATION	7.374645336794598E-5	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999092121886882	WITHOUT_CLASSIFICATION	9.078781131181109E-5	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999982542113135	WITHOUT_CLASSIFICATION	1.7457886865254352E-6	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999063278737085	WITHOUT_CLASSIFICATION	9.367212629156059E-5	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.999956869572033	WITHOUT_CLASSIFICATION	4.31304279669602E-5	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999951571171916	WITHOUT_CLASSIFICATION	4.8428828085024415E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999727229074385	WITHOUT_CLASSIFICATION	2.727709256140839E-5	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998867908345899	WITHOUT_CLASSIFICATION	1.1320916541011603E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9998947827618895	WITHOUT_CLASSIFICATION	1.0521723811054835E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999695794119442	WITHOUT_CLASSIFICATION	3.0420588055798745E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999423630978399	WITHOUT_CLASSIFICATION	5.7636902160145994E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999195832539407	WITHOUT_CLASSIFICATION	8.041674605927664E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999732192266743	WITHOUT_CLASSIFICATION	2.678077332572902E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999288501896367	WITHOUT_CLASSIFICATION	7.114981036330697E-5	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999418434196646	WITHOUT_CLASSIFICATION	5.8156580335336404E-5	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.99995041955333	WITHOUT_CLASSIFICATION	4.9580446670117224E-5	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998545517102309	WITHOUT_CLASSIFICATION	1.4544828976911014E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999191336328104	WITHOUT_CLASSIFICATION	8.086636718960298E-5	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998597603714867	WITHOUT_CLASSIFICATION	1.40239628513315E-4	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999301057151585	WITHOUT_CLASSIFICATION	6.989428484148572E-5	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999704715907125	WITHOUT_CLASSIFICATION	2.952840928759403E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998247151546042	WITHOUT_CLASSIFICATION	1.7528484539577056E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.999981632722852	WITHOUT_CLASSIFICATION	1.83672771480739E-5	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999986995924827	WITHOUT_CLASSIFICATION	1.300407517298854E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999958246031749	WITHOUT_CLASSIFICATION	4.1753968250706685E-6	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999874381241819	WITHOUT_CLASSIFICATION	1.2561875818019988E-5	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999807456235814	WITHOUT_CLASSIFICATION	1.9254376418635095E-5	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999661790141899	WITHOUT_CLASSIFICATION	3.382098580998016E-5	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999897962608508	WITHOUT_CLASSIFICATION	1.0203739149164766E-5	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999495950521335	WITHOUT_CLASSIFICATION	5.0404947866412E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999033362818586	WITHOUT_CLASSIFICATION	9.666371814135941E-5	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999178051271553	WITHOUT_CLASSIFICATION	8.219487284465276E-5	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999205616702483	WITHOUT_CLASSIFICATION	7.94383297516237E-5	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999701343222316	WITHOUT_CLASSIFICATION	2.9865677768480028E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999789648038596	WITHOUT_CLASSIFICATION	2.1035196140366265E-5	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9998409162011963	WITHOUT_CLASSIFICATION	1.590837988037706E-4	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999939557444927	WITHOUT_CLASSIFICATION	6.044255507300314E-5	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.999988867702071	WITHOUT_CLASSIFICATION	1.113229792903942E-5	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.999889791820671	WITHOUT_CLASSIFICATION	1.1020817932899633E-4	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999858576283529	WITHOUT_CLASSIFICATION	1.4142371647006775E-5	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999672783010866	WITHOUT_CLASSIFICATION	3.272169891354339E-5	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999741712090798	WITHOUT_CLASSIFICATION	2.5828790920119004E-5	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9998847644113723	WITHOUT_CLASSIFICATION	1.1523558862772828E-4	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999207572305918	WITHOUT_CLASSIFICATION	7.924276940821224E-5	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999382119714156	WITHOUT_CLASSIFICATION	6.178802858439075E-5	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9997376882091512	WITHOUT_CLASSIFICATION	2.623117908487121E-4	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999107875193919	WITHOUT_CLASSIFICATION	8.921248060808154E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9996134183443839	WITHOUT_CLASSIFICATION	3.8658165561616427E-4	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9998181211426813	WITHOUT_CLASSIFICATION	1.8187885731863775E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999080508439828	WITHOUT_CLASSIFICATION	9.194915601723115E-5	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999269908121536	WITHOUT_CLASSIFICATION	7.300918784638929E-5	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999448871932748	WITHOUT_CLASSIFICATION	5.511280672529888E-5	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999581459462727	WITHOUT_CLASSIFICATION	4.185405372724228E-5	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999212506681967	WITHOUT_CLASSIFICATION	7.874933180333043E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999992011285731	WITHOUT_CLASSIFICATION	7.98871426894675E-6	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9998909787501435	WITHOUT_CLASSIFICATION	1.09021249856451E-4	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.999869393750107	WITHOUT_CLASSIFICATION	1.3060624989304394E-4	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999023651561106	WITHOUT_CLASSIFICATION	9.763484388932491E-5	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999408904568754	WITHOUT_CLASSIFICATION	5.9109543124720483E-5	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999866792835927	WITHOUT_CLASSIFICATION	1.332071640715002E-5	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999547323631534	WITHOUT_CLASSIFICATION	4.526763684652123E-5	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999189869803636	WITHOUT_CLASSIFICATION	8.101301963631641E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999250531186991	WITHOUT_CLASSIFICATION	7.494688130086303E-5	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999304995104676	WITHOUT_CLASSIFICATION	6.95004895323557E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999357467127373	WITHOUT_CLASSIFICATION	6.425328726265943E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999357467127373	WITHOUT_CLASSIFICATION	6.425328726265943E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999007748201896	WITHOUT_CLASSIFICATION	9.922517981045721E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999057195993842	WITHOUT_CLASSIFICATION	9.428040061575361E-5	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999433737113915	WITHOUT_CLASSIFICATION	5.662628860849321E-5	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.999966436737957	WITHOUT_CLASSIFICATION	3.3563262043038544E-5	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999799279711792	WITHOUT_CLASSIFICATION	2.007202882082321E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999639469279809	WITHOUT_CLASSIFICATION	3.6053072019116563E-5	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999382810472638	WITHOUT_CLASSIFICATION	6.171895273617647E-5	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999222477678117	WITHOUT_CLASSIFICATION	7.775223218832644E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999662302727385	WITHOUT_CLASSIFICATION	3.376972726152746E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999854610239282	WITHOUT_CLASSIFICATION	1.4538976071853041E-5	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999964649961032	WITHOUT_CLASSIFICATION	3.5350038968468616E-6	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999489770626551	WITHOUT_CLASSIFICATION	5.1022937345000345E-5	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999569154765184	WITHOUT_CLASSIFICATION	4.308452348152933E-5	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999549766378841	WITHOUT_CLASSIFICATION	4.50233621159156E-5	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999452665184791	WITHOUT_CLASSIFICATION	5.4733481520801184E-5	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998989360495875	WITHOUT_CLASSIFICATION	1.0106395041264159E-4	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998989360495875	WITHOUT_CLASSIFICATION	1.0106395041264159E-4	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999865245547451	WITHOUT_CLASSIFICATION	1.3475445254831583E-5	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999585228852255	WITHOUT_CLASSIFICATION	4.147711477455524E-5	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999336071216129	WITHOUT_CLASSIFICATION	6.639287838710596E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999674687211336	WITHOUT_CLASSIFICATION	3.253127886639779E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998838797752226	WITHOUT_CLASSIFICATION	1.1612022477732052E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999882539342901	WITHOUT_CLASSIFICATION	1.1746065709908301E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999151125560056	WITHOUT_CLASSIFICATION	8.488744399432687E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999456254100036	WITHOUT_CLASSIFICATION	5.437458999644949E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999456254100036	WITHOUT_CLASSIFICATION	5.437458999644949E-5	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999513635232384	WITHOUT_CLASSIFICATION	4.863647676159221E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999335933672671	WITHOUT_CLASSIFICATION	6.640663273303575E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999776077619533	WITHOUT_CLASSIFICATION	2.2392238046634283E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999998576342201	WITHOUT_CLASSIFICATION	1.423657799689277E-7	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999985380807337	WITHOUT_CLASSIFICATION	1.4619192663304756E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999529934400874	WITHOUT_CLASSIFICATION	4.70065599127161E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999964646079376	WITHOUT_CLASSIFICATION	3.5353920624055924E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999304993872341	WITHOUT_CLASSIFICATION	6.950061276590924E-5	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999489826887187	WITHOUT_CLASSIFICATION	5.101731128126364E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999606447159897	WITHOUT_CLASSIFICATION	3.935528401037669E-5	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999351646775801	WITHOUT_CLASSIFICATION	6.483532241978713E-5	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998942380537681	WITHOUT_CLASSIFICATION	1.0576194623198084E-4	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9998708146982428	WITHOUT_CLASSIFICATION	1.2918530175713073E-4	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999510919282233	WITHOUT_CLASSIFICATION	4.890807177677369E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999637551477749	WITHOUT_CLASSIFICATION	3.6244852225148375E-5	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999928381064809	WITHOUT_CLASSIFICATION	7.161893519106511E-5	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.999948524104423	WITHOUT_CLASSIFICATION	5.1475895576991016E-5	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999508223523683	WITHOUT_CLASSIFICATION	4.9177647631740174E-5	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9980153965013354	WITHOUT_CLASSIFICATION	0.001984603498664607	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.999891379657972	WITHOUT_CLASSIFICATION	1.0862034202800837E-4	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998875151697834	WITHOUT_CLASSIFICATION	1.1248483021665478E-4	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999683849778704	WITHOUT_CLASSIFICATION	3.161502212951326E-5	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999448953571063	WITHOUT_CLASSIFICATION	5.510464289384159E-5	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999343953605837	WITHOUT_CLASSIFICATION	6.560463941636833E-5	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9996522209885816	WITHOUT_CLASSIFICATION	3.4777901141837394E-4	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999978680246902	WITHOUT_CLASSIFICATION	2.1319753097431314E-6	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999937248911179	WITHOUT_CLASSIFICATION	6.275108882085387E-6	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.999881629023337	WITHOUT_CLASSIFICATION	1.1837097666287725E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999827738301242	WITHOUT_CLASSIFICATION	1.722616987585691E-5	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999403962993412	WITHOUT_CLASSIFICATION	5.9603700658830995E-5	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9998829711644962	WITHOUT_CLASSIFICATION	1.1702883550372598E-4	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999448986844512	WITHOUT_CLASSIFICATION	5.510131554885902E-5	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999784120798634	WITHOUT_CLASSIFICATION	2.1587920136524196E-5	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9998416190826727	WITHOUT_CLASSIFICATION	1.5838091732732097E-4	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9998918197816634	WITHOUT_CLASSIFICATION	1.0818021833653613E-4	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.999885228643332	WITHOUT_CLASSIFICATION	1.1477135666801964E-4	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9998855160931014	WITHOUT_CLASSIFICATION	1.1448390689864022E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9998833178105763	WITHOUT_CLASSIFICATION	1.1668218942378234E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999518370121475	WITHOUT_CLASSIFICATION	4.816298785246169E-5	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999977278356074	WITHOUT_CLASSIFICATION	2.2721643926055765E-5	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999870281559067	WITHOUT_CLASSIFICATION	1.2971844093247554E-5	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9998677095529047	WITHOUT_CLASSIFICATION	1.3229044709531443E-4	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999624858932897	WITHOUT_CLASSIFICATION	3.751410671025215E-5	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999995695252895	WITHOUT_CLASSIFICATION	4.304747104823265E-7	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.999930467774455	WITHOUT_CLASSIFICATION	6.953222554494479E-5	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9998833178105763	WITHOUT_CLASSIFICATION	1.1668218942378234E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999518370121475	WITHOUT_CLASSIFICATION	4.816298785246169E-5	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999451127417913	WITHOUT_CLASSIFICATION	5.488725820875255E-5	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998800448087656	WITHOUT_CLASSIFICATION	1.1995519123438355E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.999961598877335	WITHOUT_CLASSIFICATION	3.840112266493289E-5	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999486939604643	WITHOUT_CLASSIFICATION	5.1306039535683944E-5	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999834968847873	WITHOUT_CLASSIFICATION	1.6503115212753178E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999918041908803	WITHOUT_CLASSIFICATION	8.195809119694626E-6	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999002379270582	WITHOUT_CLASSIFICATION	9.97620729418391E-5	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999321742319652	WITHOUT_CLASSIFICATION	6.782576803476813E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9998252251149338	WITHOUT_CLASSIFICATION	1.7477488506617212E-4	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999884131439448	WITHOUT_CLASSIFICATION	1.1586856055207868E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9998252251149338	WITHOUT_CLASSIFICATION	1.7477488506617212E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999794362135583	WITHOUT_CLASSIFICATION	2.056378644171242E-5	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999054974772783	WITHOUT_CLASSIFICATION	9.450252272166252E-5	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999787482056681	WITHOUT_CLASSIFICATION	2.1251794331852126E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998940274718513	WITHOUT_CLASSIFICATION	1.0597252814871555E-4	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999958574442242	WITHOUT_CLASSIFICATION	4.142555775789466E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999939294783384	WITHOUT_CLASSIFICATION	6.070521661607943E-5	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999518392795935	WITHOUT_CLASSIFICATION	4.8160720406531365E-5	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999226227909895	WITHOUT_CLASSIFICATION	7.737720901041384E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998709680296113	WITHOUT_CLASSIFICATION	1.290319703886672E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999125026125599	WITHOUT_CLASSIFICATION	8.749738744013907E-5	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9998768585253811	WITHOUT_CLASSIFICATION	1.2314147461884315E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998914431523618	WITHOUT_CLASSIFICATION	1.0855684763819163E-4	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999435952077268	WITHOUT_CLASSIFICATION	5.6404792273177365E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9967003132975276	WITHOUT_CLASSIFICATION	0.003299686702472518	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.997755771178883	WITHOUT_CLASSIFICATION	0.0022442288211170793	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.999916721483877	WITHOUT_CLASSIFICATION	8.327851612292555E-5	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.999943651970373	WITHOUT_CLASSIFICATION	5.634802962692698E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9967097073522446	WITHOUT_CLASSIFICATION	0.0032902926477552928	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9998965070267881	WITHOUT_CLASSIFICATION	1.0349297321191154E-4	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999751389054612	WITHOUT_CLASSIFICATION	2.4861094538761525E-5	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999613945771442	WITHOUT_CLASSIFICATION	3.860542285582685E-5	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999558410350545	WITHOUT_CLASSIFICATION	4.4158964945475066E-5	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999462110713796	WITHOUT_CLASSIFICATION	5.378892862048E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999256293656706	WITHOUT_CLASSIFICATION	7.437063432937832E-5	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9967097222256468	WITHOUT_CLASSIFICATION	0.003290277774353236	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999953837567378	WITHOUT_CLASSIFICATION	4.616243262199847E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999115428525758	WITHOUT_CLASSIFICATION	8.845714742419614E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999495879957813	WITHOUT_CLASSIFICATION	5.041200421878534E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999209479998085	WITHOUT_CLASSIFICATION	7.905200019157558E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999921850190934	WITHOUT_CLASSIFICATION	7.814980906596002E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998853557060904	WITHOUT_CLASSIFICATION	1.1464429390966766E-4	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999793231595151	WITHOUT_CLASSIFICATION	2.0676840484840474E-5	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9974926256275664	WITHOUT_CLASSIFICATION	0.0025073743724336652	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999106502873137	WITHOUT_CLASSIFICATION	8.934971268625403E-5	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999330991277409	WITHOUT_CLASSIFICATION	6.690087225903837E-5	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9998719110373386	WITHOUT_CLASSIFICATION	1.280889626614527E-4	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999312085814738	WITHOUT_CLASSIFICATION	6.879141852630993E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998914431523618	WITHOUT_CLASSIFICATION	1.0855684763819163E-4	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9998788566425634	WITHOUT_CLASSIFICATION	1.2114335743659279E-4	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999157863605593	WITHOUT_CLASSIFICATION	8.421363944062696E-5	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9994702366399153	WITHOUT_CLASSIFICATION	5.297633600846084E-4	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999060145216193	WITHOUT_CLASSIFICATION	9.39854783807195E-5	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999663488036428	WITHOUT_CLASSIFICATION	3.3651196357253E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999677824385379	WITHOUT_CLASSIFICATION	3.2217561462132734E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998709680296113	WITHOUT_CLASSIFICATION	1.290319703886672E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998709680296113	WITHOUT_CLASSIFICATION	1.290319703886672E-4	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999568474553859	WITHOUT_CLASSIFICATION	4.315254461406697E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999495478395882	WITHOUT_CLASSIFICATION	5.0452160411722334E-5	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9998814267343721	WITHOUT_CLASSIFICATION	1.1857326562798833E-4	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999592134042041	WITHOUT_CLASSIFICATION	4.0786595795947496E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999114544731849	WITHOUT_CLASSIFICATION	8.854552681515424E-5	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999489934234702	WITHOUT_CLASSIFICATION	5.1006576529788495E-5	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999244037963613	WITHOUT_CLASSIFICATION	7.559620363872486E-5	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999793912463826	WITHOUT_CLASSIFICATION	2.0608753617512568E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999687824995009	WITHOUT_CLASSIFICATION	3.121750049904531E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999760527567733	WITHOUT_CLASSIFICATION	2.394724322680192E-5	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999712265248758	WITHOUT_CLASSIFICATION	2.877347512412772E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998810369605688	WITHOUT_CLASSIFICATION	1.1896303943111371E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9998850872209231	WITHOUT_CLASSIFICATION	1.1491277907698427E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999760527567733	WITHOUT_CLASSIFICATION	2.394724322680192E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999436358727782	WITHOUT_CLASSIFICATION	5.636412722172323E-5	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999434621345041	WITHOUT_CLASSIFICATION	5.653786549575991E-5	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999182893903467	WITHOUT_CLASSIFICATION	8.171060965341585E-5	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.986430748118292	WITHOUT_CLASSIFICATION	0.013569251881707899	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998810369605688	WITHOUT_CLASSIFICATION	1.1896303943111371E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999498638300653	WITHOUT_CLASSIFICATION	5.013616993466846E-5	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999950458482779	WITHOUT_CLASSIFICATION	4.954151722075899E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999965879860223	WITHOUT_CLASSIFICATION	3.412013977685447E-6	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999933104557666	WITHOUT_CLASSIFICATION	6.6895442333855956E-6	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.999880664206921	WITHOUT_CLASSIFICATION	1.1933579307897547E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9998834791158705	WITHOUT_CLASSIFICATION	1.1652088412945264E-4	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999167713399058	WITHOUT_CLASSIFICATION	8.322866009415024E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999405280945979	WITHOUT_CLASSIFICATION	5.9471905402152035E-5	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999288228138793	WITHOUT_CLASSIFICATION	7.117718612068406E-5	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.999985861954245	WITHOUT_CLASSIFICATION	1.4138045754990065E-5	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9998979879709312	WITHOUT_CLASSIFICATION	1.0201202906884064E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999760527567733	WITHOUT_CLASSIFICATION	2.394724322680192E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999498638300653	WITHOUT_CLASSIFICATION	5.013616993466846E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999965879860223	WITHOUT_CLASSIFICATION	3.412013977685447E-6	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999306057892737	WITHOUT_CLASSIFICATION	6.939421072630481E-5	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999907393129013	WITHOUT_CLASSIFICATION	9.260687098694634E-6	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999347239246781	WITHOUT_CLASSIFICATION	6.5276075321912E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998810369605688	WITHOUT_CLASSIFICATION	1.1896303943111371E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999693444999431	WITHOUT_CLASSIFICATION	3.065550005689904E-5	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9998967964848825	WITHOUT_CLASSIFICATION	1.0320351511749478E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999881005759176	WITHOUT_CLASSIFICATION	1.1899424082397105E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999436358727782	WITHOUT_CLASSIFICATION	5.636412722172323E-5	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999139045580707	WITHOUT_CLASSIFICATION	8.609544192930193E-5	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9998825044368531	WITHOUT_CLASSIFICATION	1.1749556314678344E-4	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9998301476354855	WITHOUT_CLASSIFICATION	1.6985236451443205E-4	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9994941715928102	WITHOUT_CLASSIFICATION	5.058284071898353E-4	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9993859703413448	WITHOUT_CLASSIFICATION	6.140296586552859E-4	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.999904806265616	WITHOUT_CLASSIFICATION	9.519373438401914E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998940274718513	WITHOUT_CLASSIFICATION	1.0597252814871555E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443361475959	WITHOUT_CLASSIFICATION	5.566385240404398E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998872238223881	WITHOUT_CLASSIFICATION	1.1277617761191607E-4	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999898124300974	WITHOUT_CLASSIFICATION	1.0187569902615631E-5	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999464487153278	WITHOUT_CLASSIFICATION	5.355128467213632E-5	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999963685744816	WITHOUT_CLASSIFICATION	3.6314255184024964E-5	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999692400199108	WITHOUT_CLASSIFICATION	3.075998008903855E-5	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999703544215195	WITHOUT_CLASSIFICATION	2.9645578480549332E-5	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999011739853834	WITHOUT_CLASSIFICATION	9.882601461668886E-5	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999474483944739	WITHOUT_CLASSIFICATION	5.255160552605262E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999881005759176	WITHOUT_CLASSIFICATION	1.1899424082397105E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998872238223881	WITHOUT_CLASSIFICATION	1.1277617761191607E-4	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9998813175622789	WITHOUT_CLASSIFICATION	1.1868243772112883E-4	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9998826254523709	WITHOUT_CLASSIFICATION	1.1737454762913787E-4	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9998712847460604	WITHOUT_CLASSIFICATION	1.2871525393971545E-4	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9998830541900839	WITHOUT_CLASSIFICATION	1.169458099159998E-4	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999760635347047	WITHOUT_CLASSIFICATION	2.3936465295296744E-5	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999232414263769	WITHOUT_CLASSIFICATION	7.675857362311144E-5	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998746401379315	WITHOUT_CLASSIFICATION	1.2535986206850652E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999239357899333	WITHOUT_CLASSIFICATION	7.606421006665341E-5	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9960949057367434	WITHOUT_CLASSIFICATION	0.0039050942632566695	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9998920034655376	WITHOUT_CLASSIFICATION	1.0799653446227221E-4	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999680071671811	WITHOUT_CLASSIFICATION	3.199283281881254E-5	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.99996040055016	WITHOUT_CLASSIFICATION	3.959944984000266E-5	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9998852096815433	WITHOUT_CLASSIFICATION	1.1479031845669491E-4	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.999988699870599	WITHOUT_CLASSIFICATION	1.1300129400897802E-5	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999963413128983	WITHOUT_CLASSIFICATION	3.6586871015774058E-6	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999958195404544	WITHOUT_CLASSIFICATION	4.180459545699416E-6	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999413105192537	WITHOUT_CLASSIFICATION	5.868948074623445E-5	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999156029373951	WITHOUT_CLASSIFICATION	8.439706260486758E-5	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.99994478140575	WITHOUT_CLASSIFICATION	5.5218594250055555E-5	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999076874923156	WITHOUT_CLASSIFICATION	9.231250768444816E-5	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999075813922845	WITHOUT_CLASSIFICATION	9.24186077154367E-5	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999823768701718	WITHOUT_CLASSIFICATION	1.7623129828255914E-5	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9998981698801542	WITHOUT_CLASSIFICATION	1.0183011984578627E-4	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8220122435070657	WITHOUT_CLASSIFICATION	0.17798775649293427	IMPLEMENTATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999416324822313	WITHOUT_CLASSIFICATION	5.836751776860501E-5	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999296463591886	WITHOUT_CLASSIFICATION	7.035364081136202E-5	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999787382984274	WITHOUT_CLASSIFICATION	2.1261701572618324E-5	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9994837345670525	WITHOUT_CLASSIFICATION	5.162654329474688E-4	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999915097340767	WITHOUT_CLASSIFICATION	8.490265923331803E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999749117434907	WITHOUT_CLASSIFICATION	2.508825650916901E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999522159849168	WITHOUT_CLASSIFICATION	4.778401508319626E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999860690923207	WITHOUT_CLASSIFICATION	1.393090767928741E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999789446838776	WITHOUT_CLASSIFICATION	2.1055316122333904E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999555174591838	WITHOUT_CLASSIFICATION	4.448254081633322E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999631074197711	WITHOUT_CLASSIFICATION	3.6892580228923866E-5	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.999963828642262	WITHOUT_CLASSIFICATION	3.617135773800044E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999555174591838	WITHOUT_CLASSIFICATION	4.448254081633322E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999789446838776	WITHOUT_CLASSIFICATION	2.1055316122333904E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999631074197711	WITHOUT_CLASSIFICATION	3.6892580228923866E-5	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999590515227568	WITHOUT_CLASSIFICATION	4.094847724318423E-5	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999870688766274	WITHOUT_CLASSIFICATION	1.2931123372654509E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999894048642123	WITHOUT_CLASSIFICATION	1.0595135787706455E-5	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9998985805109647	WITHOUT_CLASSIFICATION	1.0141948903540379E-4	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999996277942796	WITHOUT_CLASSIFICATION	3.7220572041372293E-7	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9867543823963468	WITHOUT_CLASSIFICATION	0.013245617603653122	IMPLEMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.999962808637984	WITHOUT_CLASSIFICATION	3.719136201587123E-5	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999335246207774	WITHOUT_CLASSIFICATION	6.647537922244441E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999629430810621	WITHOUT_CLASSIFICATION	3.705691893784759E-5	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999440058530334	WITHOUT_CLASSIFICATION	5.5994146966646006E-5	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999381582182616	WITHOUT_CLASSIFICATION	6.184178173844414E-5	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999826813995855	WITHOUT_CLASSIFICATION	1.731860041449266E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997998308314672	WITHOUT_CLASSIFICATION	2.001691685328042E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9998962558689515	WITHOUT_CLASSIFICATION	1.0374413104843426E-4	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999825772326364	WITHOUT_CLASSIFICATION	1.742276736362761E-5	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999736462480693	WITHOUT_CLASSIFICATION	2.635375193073519E-5	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999933083904173	WITHOUT_CLASSIFICATION	6.6916095825884396E-6	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999568653205259	WITHOUT_CLASSIFICATION	4.3134679474099365E-5	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999890498744799	WITHOUT_CLASSIFICATION	1.0950125520043476E-5	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999013343161864	WITHOUT_CLASSIFICATION	9.866568381361609E-5	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.999891576260153	WITHOUT_CLASSIFICATION	1.0842373984699561E-4	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999707626731568	WITHOUT_CLASSIFICATION	2.9237326843302922E-5	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999160694625238	WITHOUT_CLASSIFICATION	8.393053747629653E-5	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999982084902514	WITHOUT_CLASSIFICATION	1.7915097486160522E-5	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998944159157982	WITHOUT_CLASSIFICATION	1.0558408420187946E-4	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998944159157982	WITHOUT_CLASSIFICATION	1.0558408420187946E-4	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999632862532377	WITHOUT_CLASSIFICATION	3.67137467622694E-5	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999632862532377	WITHOUT_CLASSIFICATION	3.67137467622694E-5	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.999774534362071	WITHOUT_CLASSIFICATION	2.254656379290314E-4	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999933083904173	WITHOUT_CLASSIFICATION	6.6916095825884396E-6	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999033018628825	WITHOUT_CLASSIFICATION	9.669813711755368E-5	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999682680866747	WITHOUT_CLASSIFICATION	3.173191332519413E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998159335954898	WITHOUT_CLASSIFICATION	1.8406640451018743E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998159335954898	WITHOUT_CLASSIFICATION	1.8406640451018743E-4	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999685974834791	WITHOUT_CLASSIFICATION	3.1402516520988526E-5	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999812236660113	WITHOUT_CLASSIFICATION	1.8776333988682008E-5	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999684786087831	WITHOUT_CLASSIFICATION	3.152139121688079E-5	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999079259917215	WITHOUT_CLASSIFICATION	9.207400827846529E-5	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999444299178983	WITHOUT_CLASSIFICATION	5.557008210170688E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999954038485734	WITHOUT_CLASSIFICATION	4.596151426524803E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999280118646781	WITHOUT_CLASSIFICATION	7.198813532190215E-5	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9998302877685105	WITHOUT_CLASSIFICATION	1.6971223148951734E-4	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9999011195328118	WITHOUT_CLASSIFICATION	9.888046718823539E-5	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999816004062002	WITHOUT_CLASSIFICATION	1.839959379978188E-5	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999503788020907	WITHOUT_CLASSIFICATION	4.9621197909307986E-5	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9998806643895259	WITHOUT_CLASSIFICATION	1.1933561047411361E-4	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999016861514577	WITHOUT_CLASSIFICATION	9.83138485422941E-5	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999016228738984	WITHOUT_CLASSIFICATION	9.837712610157048E-5	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9998160703504914	WITHOUT_CLASSIFICATION	1.8392964950870026E-4	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999502104415662	WITHOUT_CLASSIFICATION	4.978955843373225E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999108605305144	WITHOUT_CLASSIFICATION	8.91394694856788E-5	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9991864919671946	WITHOUT_CLASSIFICATION	8.135080328055015E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.999868806225383	WITHOUT_CLASSIFICATION	1.3119377461698266E-4	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999964479921573	WITHOUT_CLASSIFICATION	3.5520078427709752E-6	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999189305641999	WITHOUT_CLASSIFICATION	8.106943580000189E-5	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999348893118495	WITHOUT_CLASSIFICATION	6.511068815051844E-5	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.999939078254678	WITHOUT_CLASSIFICATION	6.0921745322088865E-5	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999908634337403	WITHOUT_CLASSIFICATION	9.13656625969789E-6	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999778437920678	WITHOUT_CLASSIFICATION	2.215620793219644E-5	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999578269984885	WITHOUT_CLASSIFICATION	4.21730015116009E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998872238223881	WITHOUT_CLASSIFICATION	1.1277617761191607E-4	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999680071671811	WITHOUT_CLASSIFICATION	3.199283281881254E-5	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999717341198711	WITHOUT_CLASSIFICATION	2.826588012887237E-5	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999886869211494	WITHOUT_CLASSIFICATION	1.1313078850575254E-5	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998946438668819	WITHOUT_CLASSIFICATION	1.0535613311822781E-4	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999268890931506	WITHOUT_CLASSIFICATION	7.31109068492987E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999019293286948	WITHOUT_CLASSIFICATION	9.807067130514681E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999019293286948	WITHOUT_CLASSIFICATION	9.807067130514681E-5	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999730206645335	WITHOUT_CLASSIFICATION	2.697933546650985E-5	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999208587931884	WITHOUT_CLASSIFICATION	7.914120681160741E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999813467406053	WITHOUT_CLASSIFICATION	1.8653259394613877E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999813467406053	WITHOUT_CLASSIFICATION	1.8653259394613877E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999568733787482	WITHOUT_CLASSIFICATION	4.31266212517853E-5	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999411283940048	WITHOUT_CLASSIFICATION	5.8871605995214715E-5	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999547467508653	WITHOUT_CLASSIFICATION	4.525324913471217E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9997061358853419	WITHOUT_CLASSIFICATION	2.938641146581016E-4	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999311515876692	WITHOUT_CLASSIFICATION	6.884841233070772E-5	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999786796333131	WITHOUT_CLASSIFICATION	2.1320366686965686E-5	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9999099471489128	WITHOUT_CLASSIFICATION	9.005285108723984E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999463881107771	WITHOUT_CLASSIFICATION	5.361188922300028E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999729729929118	WITHOUT_CLASSIFICATION	2.7027007088276486E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999729729929118	WITHOUT_CLASSIFICATION	2.7027007088276486E-5	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999570686023159	WITHOUT_CLASSIFICATION	4.2931397684003254E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999102004707666	WITHOUT_CLASSIFICATION	8.97995292333805E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999102004707666	WITHOUT_CLASSIFICATION	8.97995292333805E-5	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999973491974743	WITHOUT_CLASSIFICATION	2.6508025257063023E-5	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999815875351862	WITHOUT_CLASSIFICATION	1.841246481377321E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9962834898116157	WITHOUT_CLASSIFICATION	0.003716510188384346	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999670777597353	WITHOUT_CLASSIFICATION	3.292224026481166E-5	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999632617539502	WITHOUT_CLASSIFICATION	3.6738246049700816E-5	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999687705368578	WITHOUT_CLASSIFICATION	3.122946314207575E-5	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.999999206486005	WITHOUT_CLASSIFICATION	7.935139948584399E-7	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999595938993351	WITHOUT_CLASSIFICATION	4.040610066498391E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999683213839384	WITHOUT_CLASSIFICATION	3.167861606159509E-5	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999135610157398	WITHOUT_CLASSIFICATION	8.643898426021192E-5	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999899990822224	WITHOUT_CLASSIFICATION	1.0000917777604997E-5	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9997075624690741	WITHOUT_CLASSIFICATION	2.924375309259858E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999833877040186	WITHOUT_CLASSIFICATION	1.6612295981326938E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999833877040186	WITHOUT_CLASSIFICATION	1.6612295981326938E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999833877040186	WITHOUT_CLASSIFICATION	1.6612295981326938E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999833877040186	WITHOUT_CLASSIFICATION	1.6612295981326938E-5	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999329969412791	WITHOUT_CLASSIFICATION	6.700305872084539E-5	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999927402636026	WITHOUT_CLASSIFICATION	7.259736397291102E-6	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998732648856392	WITHOUT_CLASSIFICATION	1.2673511436081243E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9998827569629194	WITHOUT_CLASSIFICATION	1.1724303708059619E-4	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999454873396978	WITHOUT_CLASSIFICATION	5.4512660302308825E-5	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9998757124218429	WITHOUT_CLASSIFICATION	1.2428757815710834E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998838797752226	WITHOUT_CLASSIFICATION	1.1612022477732052E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999185944250578	WITHOUT_CLASSIFICATION	8.140557494217633E-5	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9998693049030417	WITHOUT_CLASSIFICATION	1.3069509695829036E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998838797752226	WITHOUT_CLASSIFICATION	1.1612022477732052E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998838797752226	WITHOUT_CLASSIFICATION	1.1612022477732052E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999680078274956	WITHOUT_CLASSIFICATION	3.19921725044596E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999325978650874	WITHOUT_CLASSIFICATION	6.740213491261904E-5	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9998805577965764	WITHOUT_CLASSIFICATION	1.1944220342367307E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999497034930674	WITHOUT_CLASSIFICATION	5.0296506932523534E-5	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999656744625632	WITHOUT_CLASSIFICATION	3.4325537436739264E-5	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999649754758886	WITHOUT_CLASSIFICATION	3.502452411132725E-5	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.999970984590088	WITHOUT_CLASSIFICATION	2.901540991198294E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999497034930674	WITHOUT_CLASSIFICATION	5.0296506932523534E-5	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.999980722745687	WITHOUT_CLASSIFICATION	1.9277254313066938E-5	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999288518697143	WITHOUT_CLASSIFICATION	7.114813028576374E-5	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999952677836031	WITHOUT_CLASSIFICATION	4.732216396890469E-5	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999205387633031	WITHOUT_CLASSIFICATION	7.946123669686064E-5	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999624206156235	WITHOUT_CLASSIFICATION	3.7579384376525076E-5	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999556309420651	WITHOUT_CLASSIFICATION	4.436905793491833E-5	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999732738656734	WITHOUT_CLASSIFICATION	2.672613432667896E-5	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.99988884552519	WITHOUT_CLASSIFICATION	1.1115447481004856E-4	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999468204114996	WITHOUT_CLASSIFICATION	5.3179588500360104E-5	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999827907845791	WITHOUT_CLASSIFICATION	1.7209215420941465E-5	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471491179184	WITHOUT_CLASSIFICATION	5.285088208166562E-5	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999008700538751	WITHOUT_CLASSIFICATION	9.912994612486607E-5	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999553803213712	WITHOUT_CLASSIFICATION	4.4619678628819204E-5	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998750198597219	WITHOUT_CLASSIFICATION	1.2498014027795745E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999866221376119	WITHOUT_CLASSIFICATION	1.3377862388107852E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998932432954146	WITHOUT_CLASSIFICATION	1.0675670458537319E-4	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999504879032396	WITHOUT_CLASSIFICATION	4.951209676027724E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999406829769019	WITHOUT_CLASSIFICATION	5.931702309819236E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998443396129076	WITHOUT_CLASSIFICATION	1.556603870923513E-4	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999406829769019	WITHOUT_CLASSIFICATION	5.931702309819236E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999558294356116	WITHOUT_CLASSIFICATION	4.4170564388422254E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999700979392404	WITHOUT_CLASSIFICATION	2.9902060759702516E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9998921297168325	WITHOUT_CLASSIFICATION	1.0787028316753535E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999733264767583	WITHOUT_CLASSIFICATION	2.667352324171739E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999504879032396	WITHOUT_CLASSIFICATION	4.951209676027724E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998443396129076	WITHOUT_CLASSIFICATION	1.556603870923513E-4	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999558294356116	WITHOUT_CLASSIFICATION	4.4170564388422254E-5	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999382336609844	WITHOUT_CLASSIFICATION	6.176633901549537E-5	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999315163256602	WITHOUT_CLASSIFICATION	6.848367433976007E-5	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9999030593356528	WITHOUT_CLASSIFICATION	9.694066434728532E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9999248937219593	WITHOUT_CLASSIFICATION	7.510627804079907E-5	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999847943497757	WITHOUT_CLASSIFICATION	1.5205650224285213E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999865810947088	WITHOUT_CLASSIFICATION	1.3418905291239861E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999108605305144	WITHOUT_CLASSIFICATION	8.91394694856788E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999700979392404	WITHOUT_CLASSIFICATION	2.9902060759702516E-5	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999967639866344	WITHOUT_CLASSIFICATION	3.236013365639412E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999682550057162	WITHOUT_CLASSIFICATION	3.174499428377883E-5	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999315692330025	WITHOUT_CLASSIFICATION	6.843076699746667E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999108605305144	WITHOUT_CLASSIFICATION	8.91394694856788E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998872238223881	WITHOUT_CLASSIFICATION	1.1277617761191607E-4	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999487134524989	WITHOUT_CLASSIFICATION	5.128654750103537E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999108605305144	WITHOUT_CLASSIFICATION	8.91394694856788E-5	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.99996317515192	WITHOUT_CLASSIFICATION	3.6824848080051584E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999419374032404	WITHOUT_CLASSIFICATION	5.806259675967989E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998872238223881	WITHOUT_CLASSIFICATION	1.1277617761191607E-4	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9992872447920261	WITHOUT_CLASSIFICATION	7.127552079739572E-4	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9998850001772857	WITHOUT_CLASSIFICATION	1.1499982271429559E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999799030831426	WITHOUT_CLASSIFICATION	2.0096916857418643E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.999923662375596	WITHOUT_CLASSIFICATION	7.633762440400941E-5	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999825282243858	WITHOUT_CLASSIFICATION	1.7471775614248157E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999242317658593	WITHOUT_CLASSIFICATION	7.576823414069843E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999505721548906	WITHOUT_CLASSIFICATION	4.942784510942317E-5	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999299424727821	WITHOUT_CLASSIFICATION	7.005752721783002E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999841974156392	WITHOUT_CLASSIFICATION	1.5802584360854873E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9962834898116157	WITHOUT_CLASSIFICATION	0.003716510188384346	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999161302739128	WITHOUT_CLASSIFICATION	8.38697260871851E-5	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999844349521088	WITHOUT_CLASSIFICATION	1.5565047891252532E-5	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9998853504743441	WITHOUT_CLASSIFICATION	1.146495256558646E-4	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998763049866685	WITHOUT_CLASSIFICATION	1.236950133316052E-4	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999380344713846	WITHOUT_CLASSIFICATION	6.196552861545244E-5	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999842166120151	WITHOUT_CLASSIFICATION	1.5783387984938703E-5	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999370428020515	WITHOUT_CLASSIFICATION	6.295719794848501E-5	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999782589460469	WITHOUT_CLASSIFICATION	2.1741053953137084E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999212366487884	WITHOUT_CLASSIFICATION	7.876335121157299E-5	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999676739719251	WITHOUT_CLASSIFICATION	3.232602807491596E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9962834898116157	WITHOUT_CLASSIFICATION	0.003716510188384346	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999204703912055	WITHOUT_CLASSIFICATION	7.952960879460618E-5	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999909168225344	WITHOUT_CLASSIFICATION	9.08317746560321E-5	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999067729656014	WITHOUT_CLASSIFICATION	9.322703439868713E-5	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999468467374739	WITHOUT_CLASSIFICATION	5.315326252616407E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.999976429738701	WITHOUT_CLASSIFICATION	2.3570261298905164E-5	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999610743802164	WITHOUT_CLASSIFICATION	3.892561978356174E-5	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999049200858855	WITHOUT_CLASSIFICATION	9.507991411451607E-5	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998847763502225	WITHOUT_CLASSIFICATION	1.1522364977741679E-4	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999533561973891	WITHOUT_CLASSIFICATION	4.664380261087658E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9962834898116157	WITHOUT_CLASSIFICATION	0.003716510188384346	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999357459186436	WITHOUT_CLASSIFICATION	6.425408135630963E-5	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999909041675787	WITHOUT_CLASSIFICATION	9.0958324213044E-5	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9998743670448192	WITHOUT_CLASSIFICATION	1.2563295518072936E-4	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.99989306623456	WITHOUT_CLASSIFICATION	1.069337654399844E-4	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999660025503442	WITHOUT_CLASSIFICATION	3.399744965578641E-5	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998659813738843	WITHOUT_CLASSIFICATION	1.3401862611569948E-4	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999893742811723	WITHOUT_CLASSIFICATION	1.0625718827776178E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998872238223881	WITHOUT_CLASSIFICATION	1.1277617761191607E-4	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999270913300654	WITHOUT_CLASSIFICATION	7.290866993465193E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999595042163747	WITHOUT_CLASSIFICATION	4.049578362535305E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999595042163747	WITHOUT_CLASSIFICATION	4.049578362535305E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999151005147773	WITHOUT_CLASSIFICATION	8.489948522265485E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999242317658593	WITHOUT_CLASSIFICATION	7.576823414069843E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999162460845443	WITHOUT_CLASSIFICATION	8.375391545568871E-5	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999745131508402	WITHOUT_CLASSIFICATION	2.548684915983306E-5	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999907334306208	WITHOUT_CLASSIFICATION	9.266569379039445E-6	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999581172562804	WITHOUT_CLASSIFICATION	4.188274371958015E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999270707042038	WITHOUT_CLASSIFICATION	7.292929579618208E-5	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999511544363657	WITHOUT_CLASSIFICATION	4.884556363421326E-5	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999788031902972	WITHOUT_CLASSIFICATION	2.119680970284914E-5	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999383253154042	WITHOUT_CLASSIFICATION	6.167468459585961E-5	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999687635926086	WITHOUT_CLASSIFICATION	3.123640739144629E-5	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999923206897715	WITHOUT_CLASSIFICATION	7.679310228392455E-6	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999964840355325	WITHOUT_CLASSIFICATION	3.5159644674014435E-6	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999829926548222	WITHOUT_CLASSIFICATION	1.700734517789469E-5	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999996861691045	WITHOUT_CLASSIFICATION	3.1383089549719883E-7	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999271046150102	WITHOUT_CLASSIFICATION	7.289538498982375E-5	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999759548940436	WITHOUT_CLASSIFICATION	2.4045105956450547E-5	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999923516528829	WITHOUT_CLASSIFICATION	7.64834711714757E-6	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999879596436784	WITHOUT_CLASSIFICATION	1.2040356321558232E-5	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999940241572989	WITHOUT_CLASSIFICATION	5.975842701084991E-6	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999809557946244	WITHOUT_CLASSIFICATION	1.904420537559689E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999955264504497	WITHOUT_CLASSIFICATION	4.473549550301514E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.99999726940681	WITHOUT_CLASSIFICATION	2.7305931901097266E-6	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998659813738843	WITHOUT_CLASSIFICATION	1.3401862611569948E-4	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999964864255437	WITHOUT_CLASSIFICATION	3.5135744563104276E-6	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999833033749409	WITHOUT_CLASSIFICATION	1.6696625059071502E-5	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999883174147098	WITHOUT_CLASSIFICATION	1.1682585290178026E-5	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999451001976162	WITHOUT_CLASSIFICATION	5.4899802383765066E-5	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999733644097727	WITHOUT_CLASSIFICATION	2.6635590227359522E-5	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999285543827602	WITHOUT_CLASSIFICATION	7.14456172398346E-5	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999886928779387	WITHOUT_CLASSIFICATION	1.130712206131637E-5	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999882974560672	WITHOUT_CLASSIFICATION	1.1702543932669535E-5	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.999987894644463	WITHOUT_CLASSIFICATION	1.2105355536912941E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999897516587488	WITHOUT_CLASSIFICATION	1.0248341251074247E-5	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999486343431547	WITHOUT_CLASSIFICATION	5.1365656845324775E-5	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999535830718547	WITHOUT_CLASSIFICATION	4.641692814543131E-5	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999188601726472	WITHOUT_CLASSIFICATION	8.113982735283854E-5	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999397423537676	WITHOUT_CLASSIFICATION	6.025764623244153E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999426350979962	WITHOUT_CLASSIFICATION	5.736490200374879E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999426350979962	WITHOUT_CLASSIFICATION	5.736490200374879E-5	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999386304174409	WITHOUT_CLASSIFICATION	6.136958255908803E-5	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.999921628953883	WITHOUT_CLASSIFICATION	7.837104611698611E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999708261325025	WITHOUT_CLASSIFICATION	2.9173867497566627E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999708261325025	WITHOUT_CLASSIFICATION	2.9173867497566627E-5	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999720808342819	WITHOUT_CLASSIFICATION	2.7919165718169664E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999236074140018	WITHOUT_CLASSIFICATION	7.639258599827593E-5	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999825233452607	WITHOUT_CLASSIFICATION	1.7476654739251463E-5	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999944813105542	WITHOUT_CLASSIFICATION	5.518689445718441E-6	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999501051322934	WITHOUT_CLASSIFICATION	4.989486770657899E-5	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999491774316662	WITHOUT_CLASSIFICATION	5.0822568333710045E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999981389620933	WITHOUT_CLASSIFICATION	1.8610379067043244E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999981389620933	WITHOUT_CLASSIFICATION	1.8610379067043244E-5	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999465417903267	WITHOUT_CLASSIFICATION	5.345820967336847E-5	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999438277566739	WITHOUT_CLASSIFICATION	5.6172243326111515E-5	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9998930726312958	WITHOUT_CLASSIFICATION	1.0692736870431776E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999599734420191	WITHOUT_CLASSIFICATION	4.00265579807259E-5	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999599734420191	WITHOUT_CLASSIFICATION	4.00265579807259E-5	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.999926563154731	WITHOUT_CLASSIFICATION	7.343684526894337E-5	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999553060691493	WITHOUT_CLASSIFICATION	4.469393085069167E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999857564079963	WITHOUT_CLASSIFICATION	1.4243592003680389E-5	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999579965288654	WITHOUT_CLASSIFICATION	4.20034711346235E-5	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999237483086213	WITHOUT_CLASSIFICATION	7.62516913787577E-5	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9998983288776779	WITHOUT_CLASSIFICATION	1.0167112232203999E-4	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999635967066671	WITHOUT_CLASSIFICATION	3.640329333285898E-5	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999538626668063	WITHOUT_CLASSIFICATION	4.613733319375385E-5	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999541444797927	WITHOUT_CLASSIFICATION	4.585552020721048E-5	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999242604308577	WITHOUT_CLASSIFICATION	7.573956914227752E-5	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999496626011931	WITHOUT_CLASSIFICATION	5.033739880691687E-5	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999443872781575	WITHOUT_CLASSIFICATION	5.561272184253842E-5	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9993855790828681	WITHOUT_CLASSIFICATION	6.144209171319824E-4	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999539907700576	WITHOUT_CLASSIFICATION	4.600922994236816E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9998814208544373	WITHOUT_CLASSIFICATION	1.185791455626758E-4	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999903205540567	WITHOUT_CLASSIFICATION	9.679445943253097E-6	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999925089646452	WITHOUT_CLASSIFICATION	7.491035354801778E-5	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999819589077882	WITHOUT_CLASSIFICATION	1.804109221189564E-5	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999783924147184	WITHOUT_CLASSIFICATION	2.160758528162387E-5	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999522838135171	WITHOUT_CLASSIFICATION	4.7716186482815316E-5	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999429208393288	WITHOUT_CLASSIFICATION	5.707916067114526E-5	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999015443582537	WITHOUT_CLASSIFICATION	9.845564174631956E-5	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9998898326009388	WITHOUT_CLASSIFICATION	1.1016739906121062E-4	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999498848102562	WITHOUT_CLASSIFICATION	5.0115189743858657E-5	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9966579385293266	WITHOUT_CLASSIFICATION	0.003342061470673323	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999699283115242	WITHOUT_CLASSIFICATION	3.0071688475749193E-5	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999655132209412	WITHOUT_CLASSIFICATION	3.448677905870441E-5	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998691730168783	WITHOUT_CLASSIFICATION	1.3082698312174228E-4	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999907081871847	WITHOUT_CLASSIFICATION	9.291812815225167E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999586579163179	WITHOUT_CLASSIFICATION	4.134208368210966E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999724636556098	WITHOUT_CLASSIFICATION	2.75363443901822E-5	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.999930185618734	WITHOUT_CLASSIFICATION	6.981438126592467E-5	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999883026336867	WITHOUT_CLASSIFICATION	1.1697366313259272E-5	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998730627829602	WITHOUT_CLASSIFICATION	1.269372170398424E-4	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999481829250764	WITHOUT_CLASSIFICATION	5.1817074923539495E-5	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998788995321635	WITHOUT_CLASSIFICATION	1.2110046783651572E-4	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9998924028221323	WITHOUT_CLASSIFICATION	1.075971778677208E-4	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999209376648556	WITHOUT_CLASSIFICATION	7.90623351444348E-5	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999453232930778	WITHOUT_CLASSIFICATION	5.4676706922152946E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999824901036661	WITHOUT_CLASSIFICATION	1.7509896333789578E-5	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999373652315623	WITHOUT_CLASSIFICATION	6.26347684377591E-5	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9998736591520573	WITHOUT_CLASSIFICATION	1.2634084794270394E-4	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999213725339839	WITHOUT_CLASSIFICATION	7.862746601605775E-5	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999167130259368	WITHOUT_CLASSIFICATION	8.328697406317603E-5	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9998846798824297	WITHOUT_CLASSIFICATION	1.1532011757037055E-4	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9998895174114069	WITHOUT_CLASSIFICATION	1.1048258859310158E-4	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9998863755782901	WITHOUT_CLASSIFICATION	1.1362442170987374E-4	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999836760904435	WITHOUT_CLASSIFICATION	1.6323909556488784E-5	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999749907325183	WITHOUT_CLASSIFICATION	2.5009267481698158E-5	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999752465608589	WITHOUT_CLASSIFICATION	2.4753439141139395E-5	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999789798122183	WITHOUT_CLASSIFICATION	2.1020187781705403E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.999916233319185	WITHOUT_CLASSIFICATION	8.376668081496652E-5	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999052720928374	WITHOUT_CLASSIFICATION	9.472790716263599E-5	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.999984791993015	WITHOUT_CLASSIFICATION	1.5208006984894792E-5	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999152267489805	WITHOUT_CLASSIFICATION	8.477325101958688E-5	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999288541720465	WITHOUT_CLASSIFICATION	7.11458279535249E-5	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999021348589472	WITHOUT_CLASSIFICATION	9.786514105275037E-5	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999246778917223	WITHOUT_CLASSIFICATION	7.532210827762883E-5	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999762772133409	WITHOUT_CLASSIFICATION	2.3722786659092875E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999539093903009	WITHOUT_CLASSIFICATION	4.609060969897281E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999568181485969	WITHOUT_CLASSIFICATION	4.3181851403062125E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999568181485969	WITHOUT_CLASSIFICATION	4.3181851403062125E-5	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999874474959125	WITHOUT_CLASSIFICATION	1.2552504087433263E-5	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999879396297505	WITHOUT_CLASSIFICATION	1.2060370249512123E-5	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999990597525844	WITHOUT_CLASSIFICATION	9.402474154745546E-7	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999868484592381	WITHOUT_CLASSIFICATION	1.3151540761967458E-5	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999959496483649	WITHOUT_CLASSIFICATION	4.050351635101451E-5	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.999956173198339	WITHOUT_CLASSIFICATION	4.382680166098285E-5	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999949401417421	WITHOUT_CLASSIFICATION	5.05985825799218E-6	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999912967988551	WITHOUT_CLASSIFICATION	8.703201144795814E-6	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999671022965941	WITHOUT_CLASSIFICATION	3.289770340588117E-5	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999901624803667	WITHOUT_CLASSIFICATION	9.8375196334199E-6	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999925862194975	WITHOUT_CLASSIFICATION	7.413780502410317E-6	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999035785664756	WITHOUT_CLASSIFICATION	9.642143352439126E-5	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999934480304531	WITHOUT_CLASSIFICATION	6.551969546910515E-6	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999796957362765	WITHOUT_CLASSIFICATION	2.030426372343394E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999471387407207	WITHOUT_CLASSIFICATION	5.2861259279309375E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999471387407207	WITHOUT_CLASSIFICATION	5.2861259279309375E-5	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999618666382473	WITHOUT_CLASSIFICATION	3.813336175283588E-5	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999694374648284	WITHOUT_CLASSIFICATION	3.056253517168869E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999561549980767	WITHOUT_CLASSIFICATION	4.3845001923422086E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999903455747904	WITHOUT_CLASSIFICATION	9.654425209620409E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999610180477692	WITHOUT_CLASSIFICATION	3.898195223093588E-5	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999440336950366	WITHOUT_CLASSIFICATION	5.596630496351703E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9998717962071879	WITHOUT_CLASSIFICATION	1.2820379281210047E-4	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9993581656336601	WITHOUT_CLASSIFICATION	6.418343663398949E-4	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999788929427464	WITHOUT_CLASSIFICATION	2.1107057253652336E-5	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999810440549761	WITHOUT_CLASSIFICATION	1.8955945023924187E-5	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999948919699098	WITHOUT_CLASSIFICATION	5.108030090217528E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999402667369038	WITHOUT_CLASSIFICATION	5.973326309612261E-5	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999832206956558	WITHOUT_CLASSIFICATION	1.6779304344184982E-5	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999749915748374	WITHOUT_CLASSIFICATION	2.5008425162658204E-5	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999914334940028	WITHOUT_CLASSIFICATION	8.566505997199797E-6	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999565012217141	WITHOUT_CLASSIFICATION	4.3498778285984016E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999849408184778	WITHOUT_CLASSIFICATION	1.5059181522331582E-5	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999956830520629	WITHOUT_CLASSIFICATION	4.316947937102888E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999254641842779	WITHOUT_CLASSIFICATION	7.453581572218876E-5	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9998831329002089	WITHOUT_CLASSIFICATION	1.1686709979100686E-4	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.999980416013518	WITHOUT_CLASSIFICATION	1.9583986482077227E-5	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999963974956458	WITHOUT_CLASSIFICATION	3.6025043541242366E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999964172839191	WITHOUT_CLASSIFICATION	3.5827160809822015E-6	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998817913942945	WITHOUT_CLASSIFICATION	1.182086057055325E-4	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999658865172557	WITHOUT_CLASSIFICATION	3.411348274416937E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999750194060486	WITHOUT_CLASSIFICATION	2.498059395142095E-5	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999886602585919	WITHOUT_CLASSIFICATION	1.1339741408124606E-5	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999921639098862	WITHOUT_CLASSIFICATION	7.836090113732473E-6	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999962141882717	WITHOUT_CLASSIFICATION	3.785811728363267E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999880927327374	WITHOUT_CLASSIFICATION	1.1907267262678564E-5	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999901111090149	WITHOUT_CLASSIFICATION	9.888890985054544E-6	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999645689729637	WITHOUT_CLASSIFICATION	3.543102703631002E-5	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999624440217761	WITHOUT_CLASSIFICATION	3.755597822384183E-5	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999738795354552	WITHOUT_CLASSIFICATION	2.612046454469678E-5	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.999990693225814	WITHOUT_CLASSIFICATION	9.306774185935463E-6	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999979919417337	WITHOUT_CLASSIFICATION	2.008058266370582E-6	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999805828629823	WITHOUT_CLASSIFICATION	1.9417137017735845E-5	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999954274602012	WITHOUT_CLASSIFICATION	4.572539798848443E-6	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.999920935158571	WITHOUT_CLASSIFICATION	7.906484142903124E-5	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999915783836191	WITHOUT_CLASSIFICATION	8.421616380842648E-6	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9989423053247907	WITHOUT_CLASSIFICATION	0.0010576946752092976	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9989423053247907	WITHOUT_CLASSIFICATION	0.0010576946752092976	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999933183652684	WITHOUT_CLASSIFICATION	6.681634731581843E-6	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999999128912758	WITHOUT_CLASSIFICATION	8.710872419463695E-7	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999671972510449	WITHOUT_CLASSIFICATION	3.2802748955180286E-5	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999171088582827	WITHOUT_CLASSIFICATION	8.289114171730135E-5	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999917493359854	WITHOUT_CLASSIFICATION	8.25066401458232E-6	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999710952162525	WITHOUT_CLASSIFICATION	2.890478374757215E-5	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999515772211178	WITHOUT_CLASSIFICATION	4.842277888223137E-5	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999669662909324	WITHOUT_CLASSIFICATION	3.303370906761962E-5	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999773431519281	WITHOUT_CLASSIFICATION	2.2656848071865763E-5	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999487863657566	WITHOUT_CLASSIFICATION	5.121363424334655E-5	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999360846554864	WITHOUT_CLASSIFICATION	6.391534451356554E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998645255628428	WITHOUT_CLASSIFICATION	1.3547443715734E-4	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999878392256247	WITHOUT_CLASSIFICATION	1.2160774375157793E-5	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999827543433236	WITHOUT_CLASSIFICATION	1.7245656676388276E-5	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999952711475757	WITHOUT_CLASSIFICATION	4.728852424257469E-6	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999796546962582	WITHOUT_CLASSIFICATION	2.034530374180162E-5	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999212973272366	WITHOUT_CLASSIFICATION	7.87026727634777E-5	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999951529331049	WITHOUT_CLASSIFICATION	4.847066895053995E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999244851991985	WITHOUT_CLASSIFICATION	7.551480080145254E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999685473906389	WITHOUT_CLASSIFICATION	3.145260936108289E-5	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999859788137322	WITHOUT_CLASSIFICATION	1.4021186267857045E-5	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999794050337972	WITHOUT_CLASSIFICATION	2.0594966202718297E-5	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999779023993284	WITHOUT_CLASSIFICATION	2.209760067163833E-5	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.999952084784217	WITHOUT_CLASSIFICATION	4.7915215782874856E-5	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999059760074994	WITHOUT_CLASSIFICATION	9.402399250058467E-5	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999805677292131	WITHOUT_CLASSIFICATION	1.9432270786875737E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999948580684543	WITHOUT_CLASSIFICATION	5.141931545588757E-6	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999635691136	WITHOUT_CLASSIFICATION	3.6430886525456115E-8	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999996299603848	WITHOUT_CLASSIFICATION	3.700396152357726E-7	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999274935781961	WITHOUT_CLASSIFICATION	7.250642180389794E-5	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999824629184917	WITHOUT_CLASSIFICATION	1.7537081508392458E-5	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999838193712564	WITHOUT_CLASSIFICATION	1.618062874364521E-5	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999997091090281	WITHOUT_CLASSIFICATION	2.908909717621718E-7	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999819180172242	WITHOUT_CLASSIFICATION	1.808198277567993E-5	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999990155012038	WITHOUT_CLASSIFICATION	9.84498796178388E-7	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999595166016136	WITHOUT_CLASSIFICATION	4.0483398386408E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999753555266191	WITHOUT_CLASSIFICATION	2.464447338086063E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999996499234676	WITHOUT_CLASSIFICATION	3.5007653238888346E-6	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999948583985955	WITHOUT_CLASSIFICATION	5.141601404497231E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9998942333603735	WITHOUT_CLASSIFICATION	1.0576663962648793E-4	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999607193289294	WITHOUT_CLASSIFICATION	3.928067107058071E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999907533978982	WITHOUT_CLASSIFICATION	9.246602101728556E-6	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.999959583200866	WITHOUT_CLASSIFICATION	4.04167991338917E-5	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999997237213383	WITHOUT_CLASSIFICATION	2.762786617479117E-7	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999949090048222	WITHOUT_CLASSIFICATION	5.090995177778223E-6	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.99989650056542	WITHOUT_CLASSIFICATION	1.0349943458001062E-4	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999974392107466	WITHOUT_CLASSIFICATION	2.5607892535077755E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999934480304531	WITHOUT_CLASSIFICATION	6.551969546910515E-6	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999928690648093	WITHOUT_CLASSIFICATION	7.13093519064871E-6	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999867959884998	WITHOUT_CLASSIFICATION	1.3204011500273836E-5	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999592709289121	WITHOUT_CLASSIFICATION	4.072907108788327E-5	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999968241514141	WITHOUT_CLASSIFICATION	3.1758485859960765E-6	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999977615977962	WITHOUT_CLASSIFICATION	2.238402203910245E-6	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999930222789504	WITHOUT_CLASSIFICATION	6.977721049596605E-6	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999933613511611	WITHOUT_CLASSIFICATION	6.638648838815704E-6	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999904257881356	WITHOUT_CLASSIFICATION	9.574211864505782E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999499369423155	WITHOUT_CLASSIFICATION	5.006305768436161E-5	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999177795450103	WITHOUT_CLASSIFICATION	8.222045498967462E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999987971276955	WITHOUT_CLASSIFICATION	1.2028723045338345E-6	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999586339688299	WITHOUT_CLASSIFICATION	4.13660311700863E-5	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.999994265425336	WITHOUT_CLASSIFICATION	5.734574664019013E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999970118636073	WITHOUT_CLASSIFICATION	2.9881363927027664E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999047141634846	WITHOUT_CLASSIFICATION	9.528583651540787E-5	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999129185386456	WITHOUT_CLASSIFICATION	8.708146135437682E-5	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9998998770192796	WITHOUT_CLASSIFICATION	1.0012298072029053E-4	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999860522602526	WITHOUT_CLASSIFICATION	1.3947739747420252E-5	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999932336528488	WITHOUT_CLASSIFICATION	6.766347151323064E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999047141634846	WITHOUT_CLASSIFICATION	9.528583651540787E-5	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999047502171647	WITHOUT_CLASSIFICATION	9.524978283532423E-5	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999917661132195	WITHOUT_CLASSIFICATION	8.233886780521461E-6	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999978969560962	WITHOUT_CLASSIFICATION	2.1030439039077903E-6	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.999997279256393	WITHOUT_CLASSIFICATION	2.720743607014666E-6	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999348260580047	WITHOUT_CLASSIFICATION	6.517394199536506E-5	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999925881949073	WITHOUT_CLASSIFICATION	7.411805092681279E-6	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.999991609133135	WITHOUT_CLASSIFICATION	8.390866864990086E-6	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999040266665692	WITHOUT_CLASSIFICATION	9.59733334308414E-5	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999836494955298	WITHOUT_CLASSIFICATION	1.6350504470227718E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999869364515688	WITHOUT_CLASSIFICATION	1.3063548431192595E-5	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999330629631542	WITHOUT_CLASSIFICATION	6.69370368458574E-5	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998728319686201	WITHOUT_CLASSIFICATION	1.2716803137985785E-4	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.999956584279278	WITHOUT_CLASSIFICATION	4.3415720721920916E-5	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9998661755479652	WITHOUT_CLASSIFICATION	1.3382445203478124E-4	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.999954109979485	WITHOUT_CLASSIFICATION	4.589002051502257E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.99999726940681	WITHOUT_CLASSIFICATION	2.7305931901097266E-6	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999867473941902	WITHOUT_CLASSIFICATION	1.3252605809654631E-5	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999977199971624	WITHOUT_CLASSIFICATION	2.2800028376037204E-6	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9966849001930161	WITHOUT_CLASSIFICATION	0.0033150998069839508	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.999980824444596	WITHOUT_CLASSIFICATION	1.917555540396727E-5	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999812630800162	WITHOUT_CLASSIFICATION	1.8736919983752524E-5	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999913847807392	WITHOUT_CLASSIFICATION	8.615219260679359E-6	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999776840097092	WITHOUT_CLASSIFICATION	2.2315990290758303E-5	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999975380625807	WITHOUT_CLASSIFICATION	2.461937419309718E-6	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999805462884608	WITHOUT_CLASSIFICATION	1.9453711539253023E-5	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999942090600713	WITHOUT_CLASSIFICATION	5.790939928641256E-6	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.999998944420456	WITHOUT_CLASSIFICATION	1.0555795440574854E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999785953825368	WITHOUT_CLASSIFICATION	2.1404617463162347E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999969299098009	WITHOUT_CLASSIFICATION	3.0700901990523765E-6	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999995915905269	WITHOUT_CLASSIFICATION	4.084094730891189E-7	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999161839833162	WITHOUT_CLASSIFICATION	8.38160166838063E-5	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999300446232781	WITHOUT_CLASSIFICATION	6.995537672188915E-5	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999838693477642	WITHOUT_CLASSIFICATION	1.613065223585462E-5	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999816110153448	WITHOUT_CLASSIFICATION	1.8388984655235265E-5	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999953435802381	WITHOUT_CLASSIFICATION	4.65641976195918E-6	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999272635818	WITHOUT_CLASSIFICATION	7.273641829991264E-8	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999985987313377	WITHOUT_CLASSIFICATION	1.4012686622962943E-6	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999774706524539	WITHOUT_CLASSIFICATION	2.252934754603954E-5	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999433540950964	WITHOUT_CLASSIFICATION	5.664590490355731E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999992011285731	WITHOUT_CLASSIFICATION	7.98871426894675E-6	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999561892484394	WITHOUT_CLASSIFICATION	4.38107515606488E-5	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999561892484394	WITHOUT_CLASSIFICATION	4.38107515606488E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999639469279809	WITHOUT_CLASSIFICATION	3.6053072019116563E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999854610239282	WITHOUT_CLASSIFICATION	1.4538976071853041E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999674687211336	WITHOUT_CLASSIFICATION	3.253127886639779E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9997061358853419	WITHOUT_CLASSIFICATION	2.938641146581016E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9997061358853419	WITHOUT_CLASSIFICATION	2.938641146581016E-4	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999608412890706	WITHOUT_CLASSIFICATION	3.915871092931428E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999637551477749	WITHOUT_CLASSIFICATION	3.6244852225148375E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9966987866033585	WITHOUT_CLASSIFICATION	0.003301213396641552	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999683849778704	WITHOUT_CLASSIFICATION	3.161502212951326E-5	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999962974605462	WITHOUT_CLASSIFICATION	3.7025394537040233E-6	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999687253199514	WITHOUT_CLASSIFICATION	3.127468004858264E-5	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999832032583561	WITHOUT_CLASSIFICATION	1.6796741643869862E-5	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999348229850864	WITHOUT_CLASSIFICATION	6.517701491363759E-5	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999733665195	WITHOUT_CLASSIFICATION	2.6633480501799952E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999219774042122	WITHOUT_CLASSIFICATION	7.802259578784536E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999219774042122	WITHOUT_CLASSIFICATION	7.802259578784536E-5	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999020761536161	WITHOUT_CLASSIFICATION	9.792384638386988E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998810049318977	WITHOUT_CLASSIFICATION	1.1899506810234337E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9998834791158705	WITHOUT_CLASSIFICATION	1.1652088412945264E-4	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999151881286498	WITHOUT_CLASSIFICATION	8.481187135030223E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998872238223881	WITHOUT_CLASSIFICATION	1.1277617761191607E-4	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9998656335940833	WITHOUT_CLASSIFICATION	1.3436640591664664E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443361475959	WITHOUT_CLASSIFICATION	5.566385240404398E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998872238223881	WITHOUT_CLASSIFICATION	1.1277617761191607E-4	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999749497574859	WITHOUT_CLASSIFICATION	2.5050242514081136E-5	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999798203343021	WITHOUT_CLASSIFICATION	2.0179665697910107E-5	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9998287610750604	WITHOUT_CLASSIFICATION	1.7123892493963377E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999816230828518	WITHOUT_CLASSIFICATION	1.8376917148341473E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999869364515688	WITHOUT_CLASSIFICATION	1.3063548431192595E-5	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999261231405555	WITHOUT_CLASSIFICATION	7.387685944453587E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9998835625390069	WITHOUT_CLASSIFICATION	1.1643746099305354E-4	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999891332313485	WITHOUT_CLASSIFICATION	1.0866768651445576E-5	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999329556069522	WITHOUT_CLASSIFICATION	6.704439304781472E-5	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999550887723044	WITHOUT_CLASSIFICATION	4.491122769556457E-5	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999323723298142	WITHOUT_CLASSIFICATION	6.76276701858382E-5	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999224662810289	WITHOUT_CLASSIFICATION	7.75337189711984E-5	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999818889978356	WITHOUT_CLASSIFICATION	1.8111002164491337E-5	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999560891780598	WITHOUT_CLASSIFICATION	4.391082194024339E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998675223709182	WITHOUT_CLASSIFICATION	1.3247762908185178E-4	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998675223709182	WITHOUT_CLASSIFICATION	1.3247762908185178E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999497034930674	WITHOUT_CLASSIFICATION	5.0296506932523534E-5	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.999998714173042	WITHOUT_CLASSIFICATION	1.285826958024184E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998838797752226	WITHOUT_CLASSIFICATION	1.1612022477732052E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999541190477833	WITHOUT_CLASSIFICATION	4.588095221667152E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999869574310893	WITHOUT_CLASSIFICATION	1.3042568910699633E-5	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999914392036119	WITHOUT_CLASSIFICATION	8.560796388038123E-6	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999866221376119	WITHOUT_CLASSIFICATION	1.3377862388107852E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999978206311322	WITHOUT_CLASSIFICATION	2.1793688678233585E-6	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999382336609844	WITHOUT_CLASSIFICATION	6.176633901549537E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999253860130546	WITHOUT_CLASSIFICATION	7.461398694535323E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999108605305144	WITHOUT_CLASSIFICATION	8.91394694856788E-5	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999987659583296	WITHOUT_CLASSIFICATION	1.2340416704298835E-6	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999728523213881	WITHOUT_CLASSIFICATION	2.714767861189257E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999918962358977	WITHOUT_CLASSIFICATION	8.103764102340516E-6	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999609691255149	WITHOUT_CLASSIFICATION	3.903087448506734E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999203504431411	WITHOUT_CLASSIFICATION	7.964955685889531E-5	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999918576095314	WITHOUT_CLASSIFICATION	8.142390468677719E-6	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999658783531724	WITHOUT_CLASSIFICATION	3.4121646827526146E-5	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999337150732407	WITHOUT_CLASSIFICATION	6.62849267593354E-5	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.999986334025602	WITHOUT_CLASSIFICATION	1.366597439798026E-5	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999997997091192	WITHOUT_CLASSIFICATION	2.0029088063777464E-7	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999998114769186	WITHOUT_CLASSIFICATION	1.8852308150001295E-7	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999857564079963	WITHOUT_CLASSIFICATION	1.4243592003680389E-5	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.999999998237041	WITHOUT_CLASSIFICATION	1.7629590209069616E-9	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999970543920426	WITHOUT_CLASSIFICATION	2.9456079574075526E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999970543920426	WITHOUT_CLASSIFICATION	2.9456079574075526E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999355312571051	WITHOUT_CLASSIFICATION	6.44687428948943E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999834226694245	WITHOUT_CLASSIFICATION	1.6577330575378E-5	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999982232632475	WITHOUT_CLASSIFICATION	1.776736752418515E-6	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999993304031365	WITHOUT_CLASSIFICATION	6.695968634972248E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999304919314282	WITHOUT_CLASSIFICATION	6.950806857170939E-5	IMPLEMENTATION
