// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9997395644471314	WITHOUT_CLASSIFICATION	2.6043555286865493E-4	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9997395644471314	WITHOUT_CLASSIFICATION	2.6043555286865493E-4	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9996278573977473	WITHOUT_CLASSIFICATION	3.721426022527823E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9993919918516629	WITHOUT_CLASSIFICATION	6.080081483370234E-4	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9998932483598438	WITHOUT_CLASSIFICATION	1.0675164015612273E-4	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.8853673846007912	IMPLEMENTATION	0.1146326153992088	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9989754029896969	WITHOUT_CLASSIFICATION	0.0010245970103031482	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.8984834763276387	WITHOUT_CLASSIFICATION	0.10151652367236126	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9996900045998092	WITHOUT_CLASSIFICATION	3.099954001909146E-4	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.999500788912753	WITHOUT_CLASSIFICATION	4.992110872469875E-4	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9998748549693062	WITHOUT_CLASSIFICATION	1.2514503069374625E-4	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.9967456887417635	WITHOUT_CLASSIFICATION	0.0032543112582364745	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9998936265356089	WITHOUT_CLASSIFICATION	1.0637346439103557E-4	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9998936265356089	WITHOUT_CLASSIFICATION	1.0637346439103557E-4	IMPLEMENTATION
/**	IMPLEMENTATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.6715117366617115	WITHOUT_CLASSIFICATION	0.3284882633382885	IMPLEMENTATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9173894590376408	IMPLEMENTATION	0.08261054096235922	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.8955217375491397	WITHOUT_CLASSIFICATION	0.10447826245086024	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999990797409001	WITHOUT_CLASSIFICATION	9.20259099838803E-7	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9995857833834557	WITHOUT_CLASSIFICATION	4.142166165443179E-4	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9994834477546769	WITHOUT_CLASSIFICATION	5.165522453230673E-4	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9999853660202579	WITHOUT_CLASSIFICATION	1.4633979742106057E-5	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.999533061259971	WITHOUT_CLASSIFICATION	4.669387400290178E-4	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9964563503957754	WITHOUT_CLASSIFICATION	0.003543649604224641	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9964563503957754	WITHOUT_CLASSIFICATION	0.003543649604224641	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9830204973826715	WITHOUT_CLASSIFICATION	0.016979502617328418	IMPLEMENTATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9997261274674144	WITHOUT_CLASSIFICATION	2.738725325856369E-4	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9722909051965903	WITHOUT_CLASSIFICATION	0.027709094803409745	IMPLEMENTATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.999608003719538	WITHOUT_CLASSIFICATION	3.919962804621229E-4	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9989166079967048	WITHOUT_CLASSIFICATION	0.0010833920032953133	IMPLEMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9996526024275408	WITHOUT_CLASSIFICATION	3.473975724591772E-4	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9993561402907676	WITHOUT_CLASSIFICATION	6.438597092324817E-4	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9999233148418719	WITHOUT_CLASSIFICATION	7.668515812801062E-5	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9996029664538393	WITHOUT_CLASSIFICATION	3.970335461607232E-4	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9961294139742392	WITHOUT_CLASSIFICATION	0.003870586025760859	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9996076579470445	WITHOUT_CLASSIFICATION	3.923420529554938E-4	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.5105317118396533	WITHOUT_CLASSIFICATION	0.48946828816034677	IMPLEMENTATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9997688253704562	WITHOUT_CLASSIFICATION	2.311746295438479E-4	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9995839146451498	WITHOUT_CLASSIFICATION	4.1608535485006617E-4	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8570775921341732	WITHOUT_CLASSIFICATION	0.14292240786582674	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8570775921341732	WITHOUT_CLASSIFICATION	0.14292240786582674	IMPLEMENTATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.988228604887541	WITHOUT_CLASSIFICATION	0.01177139511245889	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999227868605636	WITHOUT_CLASSIFICATION	7.721313943646568E-5	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9997485034919555	WITHOUT_CLASSIFICATION	2.5149650804443815E-4	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9314698685529464	WITHOUT_CLASSIFICATION	0.06853013144705355	IMPLEMENTATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9993049427152108	WITHOUT_CLASSIFICATION	6.950572847892779E-4	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9994168993419847	WITHOUT_CLASSIFICATION	5.831006580153088E-4	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9995091951648416	WITHOUT_CLASSIFICATION	4.908048351584124E-4	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9998884626812727	WITHOUT_CLASSIFICATION	1.1153731872726027E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9997930638116729	WITHOUT_CLASSIFICATION	2.0693618832722733E-4	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9993880569268803	WITHOUT_CLASSIFICATION	6.119430731196385E-4	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9995686090545027	WITHOUT_CLASSIFICATION	4.313909454972191E-4	IMPLEMENTATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9997657870828924	WITHOUT_CLASSIFICATION	2.3421291710760695E-4	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9991129894269842	WITHOUT_CLASSIFICATION	8.87010573015767E-4	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9994101249496627	WITHOUT_CLASSIFICATION	5.898750503372714E-4	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9886465506133183	WITHOUT_CLASSIFICATION	0.011353449386681773	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9994101249496627	WITHOUT_CLASSIFICATION	5.898750503372714E-4	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.995947021113129	IMPLEMENTATION	0.0040529788868709105	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9126287239707932	IMPLEMENTATION	0.08737127602920691	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.9994101249496627	WITHOUT_CLASSIFICATION	5.898750503372714E-4	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999821063196316	WITHOUT_CLASSIFICATION	1.7893680368480765E-5	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999820631430242	WITHOUT_CLASSIFICATION	1.7936856975740482E-5	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9997327568625062	WITHOUT_CLASSIFICATION	2.6724313749383074E-4	IMPLEMENTATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9999159103709861	WITHOUT_CLASSIFICATION	8.408962901390489E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999125782514072	WITHOUT_CLASSIFICATION	8.742174859278746E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9970864558898646	WITHOUT_CLASSIFICATION	0.002913544110135345	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9970864558898646	WITHOUT_CLASSIFICATION	0.002913544110135345	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9970864558898646	WITHOUT_CLASSIFICATION	0.002913544110135345	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9970864558898646	WITHOUT_CLASSIFICATION	0.002913544110135345	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9970864558898646	WITHOUT_CLASSIFICATION	0.002913544110135345	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9970864558898646	WITHOUT_CLASSIFICATION	0.002913544110135345	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9970864558898646	WITHOUT_CLASSIFICATION	0.002913544110135345	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990859234154552	WITHOUT_CLASSIFICATION	9.140765845447542E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990859234154552	WITHOUT_CLASSIFICATION	9.140765845447542E-4	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.999913477673173	WITHOUT_CLASSIFICATION	8.652232682710666E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999781669236026	WITHOUT_CLASSIFICATION	2.183307639736267E-5	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999632061467043	WITHOUT_CLASSIFICATION	3.679385329573153E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999382129212195	WITHOUT_CLASSIFICATION	6.178707878050233E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999382129212195	WITHOUT_CLASSIFICATION	6.178707878050233E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999741013031962	WITHOUT_CLASSIFICATION	2.5898696803784982E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999873908523217	WITHOUT_CLASSIFICATION	1.2609147678243362E-5	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999872989743356	WITHOUT_CLASSIFICATION	1.2701025664306974E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999443749697668	WITHOUT_CLASSIFICATION	5.562503023319841E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9977870483028688	WITHOUT_CLASSIFICATION	0.0022129516971312285	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9977870483028688	WITHOUT_CLASSIFICATION	0.0022129516971312285	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9971973800961019	WITHOUT_CLASSIFICATION	0.002802619903898119	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998534936898709	WITHOUT_CLASSIFICATION	1.4650631012912572E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999672181665635	WITHOUT_CLASSIFICATION	3.278183343654509E-5	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999695263722992	WITHOUT_CLASSIFICATION	3.0473627700760125E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999992978729321	WITHOUT_CLASSIFICATION	7.021270678983185E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9971336115104703	WITHOUT_CLASSIFICATION	0.002866388489529665	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9970874737677394	WITHOUT_CLASSIFICATION	0.002912526232260579	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999159544349632	WITHOUT_CLASSIFICATION	8.404556503687621E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999160931179419	WITHOUT_CLASSIFICATION	8.390688205809332E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999160425969474	WITHOUT_CLASSIFICATION	8.395740305252062E-5	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999686505949367	WITHOUT_CLASSIFICATION	3.134940506335701E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999196877717477	WITHOUT_CLASSIFICATION	8.031222825239024E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999196877717477	WITHOUT_CLASSIFICATION	8.031222825239024E-5	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.999960032185974	WITHOUT_CLASSIFICATION	3.996781402599273E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9980895593161102	WITHOUT_CLASSIFICATION	0.0019104406838898404	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999690623340972	WITHOUT_CLASSIFICATION	3.093766590278185E-5	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999558087668869	WITHOUT_CLASSIFICATION	4.4191233113116454E-5	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.99999314075691	WITHOUT_CLASSIFICATION	6.859243089981698E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999551479628771	WITHOUT_CLASSIFICATION	4.485203712292729E-5	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999089400423574	WITHOUT_CLASSIFICATION	9.105995764253387E-5	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999792828745367	WITHOUT_CLASSIFICATION	2.0717125463271887E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999664525866961	WITHOUT_CLASSIFICATION	3.354741330376766E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999310358155091	WITHOUT_CLASSIFICATION	6.896418449086331E-5	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999937115088978	WITHOUT_CLASSIFICATION	6.288491102206175E-5	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999457571670982	WITHOUT_CLASSIFICATION	5.424283290170875E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999976830131117	WITHOUT_CLASSIFICATION	2.316986888288903E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9976268353022958	WITHOUT_CLASSIFICATION	0.0023731646977041276	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999777712216429	WITHOUT_CLASSIFICATION	2.222877835704403E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999472370709537	WITHOUT_CLASSIFICATION	5.2762929046341175E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9976268353022958	WITHOUT_CLASSIFICATION	0.0023731646977041276	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999472370709537	WITHOUT_CLASSIFICATION	5.2762929046341175E-5	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999741172755754	WITHOUT_CLASSIFICATION	2.5882724424677177E-5	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.999998018422935	WITHOUT_CLASSIFICATION	1.981577064976246E-6	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999737902666394	WITHOUT_CLASSIFICATION	2.620973336058577E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999533372582134	WITHOUT_CLASSIFICATION	4.6662741786524093E-5	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999960079417747	WITHOUT_CLASSIFICATION	3.992058225338452E-6	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999894963093113	WITHOUT_CLASSIFICATION	1.0503690688664827E-5	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999492313542664	WITHOUT_CLASSIFICATION	5.0768645733562425E-5	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999494768517381	WITHOUT_CLASSIFICATION	5.052314826193029E-5	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999909397392055	WITHOUT_CLASSIFICATION	9.060260794521401E-6	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9998715115331981	WITHOUT_CLASSIFICATION	1.2848846680189543E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999283273894349	WITHOUT_CLASSIFICATION	7.167261056505979E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999472384999043	WITHOUT_CLASSIFICATION	5.276150009570056E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999962147222249	WITHOUT_CLASSIFICATION	3.7852777750906265E-6	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999775688725729	WITHOUT_CLASSIFICATION	2.243112742712289E-5	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.999973346819432	WITHOUT_CLASSIFICATION	2.6653180568131906E-5	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999770799019692	WITHOUT_CLASSIFICATION	2.2920098030856244E-5	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999829055032117	WITHOUT_CLASSIFICATION	1.7094496788333736E-5	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.999949019547715	WITHOUT_CLASSIFICATION	5.098045228497622E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999949574308961	WITHOUT_CLASSIFICATION	5.042569103920307E-6	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999950883611797	WITHOUT_CLASSIFICATION	4.9116388202429844E-6	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999873280774254	WITHOUT_CLASSIFICATION	1.2671922574502861E-5	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999899972440752	WITHOUT_CLASSIFICATION	1.0002755924722662E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999955504188942	WITHOUT_CLASSIFICATION	4.44958110578903E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999791738624123	WITHOUT_CLASSIFICATION	2.0826137587578514E-5	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.986562040362765	WITHOUT_CLASSIFICATION	0.01343795963723497	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999856382224415	WITHOUT_CLASSIFICATION	1.4361777558573077E-5	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999898433608753	WITHOUT_CLASSIFICATION	1.0156639124794586E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9972936780814259	WITHOUT_CLASSIFICATION	0.002706321918574074	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999910108604774	WITHOUT_CLASSIFICATION	8.98913952256055E-6	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999958800363584	WITHOUT_CLASSIFICATION	4.119963641566309E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999857157280679	WITHOUT_CLASSIFICATION	1.4284271932146105E-5	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999735600770074	WITHOUT_CLASSIFICATION	2.643992299268133E-5	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999750049219959	WITHOUT_CLASSIFICATION	2.4995078004183686E-5	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999430495922125	WITHOUT_CLASSIFICATION	5.6950407787461915E-5	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.999965447736571	WITHOUT_CLASSIFICATION	3.4552263428884586E-5	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999995050276334	WITHOUT_CLASSIFICATION	4.949723667398669E-7	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999430495922125	WITHOUT_CLASSIFICATION	5.6950407787461915E-5	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999859839843369	WITHOUT_CLASSIFICATION	1.4016015663104678E-5	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999737222790466	WITHOUT_CLASSIFICATION	2.627772095336246E-5	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9996981828556928	WITHOUT_CLASSIFICATION	3.0181714430723577E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999913721786289	WITHOUT_CLASSIFICATION	8.627821371143195E-6	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999734828758268	WITHOUT_CLASSIFICATION	2.6517124173243194E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999798066513108	WITHOUT_CLASSIFICATION	2.0193348689253054E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999798066513108	WITHOUT_CLASSIFICATION	2.0193348689253054E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999472384999043	WITHOUT_CLASSIFICATION	5.276150009570056E-5	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999976422258475	WITHOUT_CLASSIFICATION	2.3577741525631502E-6	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999261138044668	WITHOUT_CLASSIFICATION	7.38861955332568E-5	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999873202692405	WITHOUT_CLASSIFICATION	1.2679730759546164E-5	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999748389115921	WITHOUT_CLASSIFICATION	2.5161088407827942E-5	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999977268250426	WITHOUT_CLASSIFICATION	2.2731749573973403E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999256139805724	WITHOUT_CLASSIFICATION	7.438601942757713E-5	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999793207966133	WITHOUT_CLASSIFICATION	2.067920338661203E-5	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999802130125786	WITHOUT_CLASSIFICATION	1.9786987421405688E-5	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999873298348403	WITHOUT_CLASSIFICATION	1.2670165159668775E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999616059305585	WITHOUT_CLASSIFICATION	3.83940694414906E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999616059305585	WITHOUT_CLASSIFICATION	3.83940694414906E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999503264222003	WITHOUT_CLASSIFICATION	4.967357779969273E-5	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999867456195405	WITHOUT_CLASSIFICATION	1.3254380459462826E-5	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999657382359459	WITHOUT_CLASSIFICATION	3.426176405413508E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999616059305585	WITHOUT_CLASSIFICATION	3.83940694414906E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999503264222003	WITHOUT_CLASSIFICATION	4.967357779969273E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999503264222003	WITHOUT_CLASSIFICATION	4.967357779969273E-5	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999778867514146	WITHOUT_CLASSIFICATION	2.2113248585359416E-5	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999427463214249	WITHOUT_CLASSIFICATION	5.72536785750828E-5	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999862841249643	WITHOUT_CLASSIFICATION	1.371587503569989E-5	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999769146737769	WITHOUT_CLASSIFICATION	2.308532622307465E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999123876470534	WITHOUT_CLASSIFICATION	8.761235294664073E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999123876470534	WITHOUT_CLASSIFICATION	8.761235294664073E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999570936630446	WITHOUT_CLASSIFICATION	4.290633695543688E-5	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999637505276406	WITHOUT_CLASSIFICATION	3.6249472359326036E-5	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999857394173948	WITHOUT_CLASSIFICATION	1.4260582605165314E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999827902673298	WITHOUT_CLASSIFICATION	1.7209732670225512E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999827902673298	WITHOUT_CLASSIFICATION	1.7209732670225512E-5	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999668540835601	WITHOUT_CLASSIFICATION	3.314591643995826E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999698789176782	WITHOUT_CLASSIFICATION	3.0121082321813183E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999971134228224	WITHOUT_CLASSIFICATION	2.8865771776045028E-5	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999980056236223	WITHOUT_CLASSIFICATION	1.9943763777181227E-6	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999883666210055	WITHOUT_CLASSIFICATION	1.163337899439942E-5	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999950708660927	WITHOUT_CLASSIFICATION	4.929133907261567E-6	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999300680454967	WITHOUT_CLASSIFICATION	6.993195450334329E-5	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999530601343763	WITHOUT_CLASSIFICATION	4.69398656235512E-5	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999396577578996	WITHOUT_CLASSIFICATION	6.034224210036653E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999971134228224	WITHOUT_CLASSIFICATION	2.8865771776045028E-5	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9999160976032203	WITHOUT_CLASSIFICATION	8.390239677978143E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999869322723682	WITHOUT_CLASSIFICATION	1.3067727631882709E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999869322723682	WITHOUT_CLASSIFICATION	1.3067727631882709E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999985076210992	WITHOUT_CLASSIFICATION	1.4923789007851845E-6	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999692994792628	WITHOUT_CLASSIFICATION	3.070052073722361E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999875495559613	WITHOUT_CLASSIFICATION	1.2450444038703672E-5	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999887723066113	WITHOUT_CLASSIFICATION	1.1227693388623478E-5	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999394245731995	WITHOUT_CLASSIFICATION	6.057542680056667E-5	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.999916148242496	WITHOUT_CLASSIFICATION	8.385175750405419E-5	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9999385320744892	WITHOUT_CLASSIFICATION	6.146792551072673E-5	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999605326774442	WITHOUT_CLASSIFICATION	3.9467322555778575E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999870348661495	WITHOUT_CLASSIFICATION	1.2965133850641532E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999870348661495	WITHOUT_CLASSIFICATION	1.2965133850641532E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999957145088669	WITHOUT_CLASSIFICATION	4.285491133109091E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999125782514072	WITHOUT_CLASSIFICATION	8.742174859278746E-5	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999981176121515	WITHOUT_CLASSIFICATION	1.882387848497066E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9970864558898646	WITHOUT_CLASSIFICATION	0.002913544110135345	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999642883424942	WITHOUT_CLASSIFICATION	3.571165750585986E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990859234154552	WITHOUT_CLASSIFICATION	9.140765845447542E-4	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999310381642778	WITHOUT_CLASSIFICATION	6.89618357222292E-5	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999655312857865	WITHOUT_CLASSIFICATION	3.446871421346058E-5	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999266365701794	WITHOUT_CLASSIFICATION	7.336342982060765E-5	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999400056425285	WITHOUT_CLASSIFICATION	5.9994357471568583E-5	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999903818699787	WITHOUT_CLASSIFICATION	9.618130021275457E-6	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9973653620092344	WITHOUT_CLASSIFICATION	0.002634637990765523	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9971117348705374	WITHOUT_CLASSIFICATION	0.002888265129462476	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.999955497070779	WITHOUT_CLASSIFICATION	4.450292922094638E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999781669236026	WITHOUT_CLASSIFICATION	2.183307639736267E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999609759660187	WITHOUT_CLASSIFICATION	3.902403398125783E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999609759660187	WITHOUT_CLASSIFICATION	3.902403398125783E-5	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999449571838789	WITHOUT_CLASSIFICATION	5.5042816121163345E-5	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999486309571233	WITHOUT_CLASSIFICATION	5.136904287674754E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999906515354665	WITHOUT_CLASSIFICATION	9.348464533461576E-6	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999285503498977	WITHOUT_CLASSIFICATION	7.144965010229939E-5	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999521520758152	WITHOUT_CLASSIFICATION	4.7847924184824234E-5	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999822432077998	WITHOUT_CLASSIFICATION	1.775679220019827E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999382129212195	WITHOUT_CLASSIFICATION	6.178707878050233E-5	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999736733970142	WITHOUT_CLASSIFICATION	2.632660298576319E-5	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999555761921126	WITHOUT_CLASSIFICATION	4.442380788725241E-5	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999520850325634	WITHOUT_CLASSIFICATION	4.791496743674235E-5	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999817213983521	WITHOUT_CLASSIFICATION	1.8278601647877233E-5	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999600648138878	WITHOUT_CLASSIFICATION	3.993518611226386E-5	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999872006172151	WITHOUT_CLASSIFICATION	1.2799382784783431E-5	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999772884853927	WITHOUT_CLASSIFICATION	2.271151460729203E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999382129212195	WITHOUT_CLASSIFICATION	6.178707878050233E-5	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999650970209985	WITHOUT_CLASSIFICATION	3.4902979001498256E-5	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999816872863413	WITHOUT_CLASSIFICATION	1.831271365864211E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9970864558898646	WITHOUT_CLASSIFICATION	0.002913544110135345	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9970864558898646	WITHOUT_CLASSIFICATION	0.002913544110135345	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990859234154552	WITHOUT_CLASSIFICATION	9.140765845447542E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990859234154552	WITHOUT_CLASSIFICATION	9.140765845447542E-4	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9971117348705374	WITHOUT_CLASSIFICATION	0.002888265129462476	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999609759660187	WITHOUT_CLASSIFICATION	3.902403398125783E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999600648138878	WITHOUT_CLASSIFICATION	3.993518611226386E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999741013031962	WITHOUT_CLASSIFICATION	2.5898696803784982E-5	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999508188479106	WITHOUT_CLASSIFICATION	4.918115208934935E-5	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999684599475908	WITHOUT_CLASSIFICATION	3.1540052409247806E-5	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999599672135704	WITHOUT_CLASSIFICATION	4.003278642961118E-5	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999158449069154	WITHOUT_CLASSIFICATION	8.4155093084619E-5	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999983855938027	WITHOUT_CLASSIFICATION	1.6144061973098274E-5	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999330692566797	WITHOUT_CLASSIFICATION	6.69307433202994E-5	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9971008547964464	WITHOUT_CLASSIFICATION	0.0028991452035535474	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999349641069859	WITHOUT_CLASSIFICATION	6.503589301411295E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999336802788057	WITHOUT_CLASSIFICATION	6.631972119430038E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999336802788057	WITHOUT_CLASSIFICATION	6.631972119430038E-5	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999782597125169	WITHOUT_CLASSIFICATION	2.1740287483083964E-5	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999948207018339	WITHOUT_CLASSIFICATION	5.179298166215311E-6	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999576998353804	WITHOUT_CLASSIFICATION	4.230016461963194E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999304280636628	WITHOUT_CLASSIFICATION	6.957193633715058E-5	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999664132508846	WITHOUT_CLASSIFICATION	3.358674911527988E-5	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999742600049871	WITHOUT_CLASSIFICATION	2.573999501289935E-5	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999559738011171	WITHOUT_CLASSIFICATION	4.4026198882853716E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999873908523217	WITHOUT_CLASSIFICATION	1.2609147678243362E-5	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999168251149495	WITHOUT_CLASSIFICATION	8.317488505053737E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999274790714896	WITHOUT_CLASSIFICATION	7.25209285104203E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999274790714896	WITHOUT_CLASSIFICATION	7.25209285104203E-5	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999130540798853	WITHOUT_CLASSIFICATION	8.694592011466252E-5	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999741014831013	WITHOUT_CLASSIFICATION	2.5898516898755794E-5	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999130540798853	WITHOUT_CLASSIFICATION	8.694592011466252E-5	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999854449654562	WITHOUT_CLASSIFICATION	1.4555034543687255E-5	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.997538149980154	WITHOUT_CLASSIFICATION	0.002461850019845994	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9990859234154552	WITHOUT_CLASSIFICATION	9.140765845447542E-4	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9971117348705374	WITHOUT_CLASSIFICATION	0.002888265129462476	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999781669236026	WITHOUT_CLASSIFICATION	2.183307639736267E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999600648138878	WITHOUT_CLASSIFICATION	3.993518611226386E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999600648138878	WITHOUT_CLASSIFICATION	3.993518611226386E-5	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999878569744215	WITHOUT_CLASSIFICATION	1.2143025578475197E-5	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999878569744215	WITHOUT_CLASSIFICATION	1.2143025578475197E-5	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999099878289899	WITHOUT_CLASSIFICATION	9.001217101006964E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999204752072932	WITHOUT_CLASSIFICATION	7.952479270675098E-5	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999757411425284	WITHOUT_CLASSIFICATION	2.4258857471540912E-5	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999329795451533	WITHOUT_CLASSIFICATION	6.70204548466996E-5	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999890502274054	WITHOUT_CLASSIFICATION	1.094977259467397E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999855542264556	WITHOUT_CLASSIFICATION	1.4445773544363299E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999443749697668	WITHOUT_CLASSIFICATION	5.562503023319841E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999443749697668	WITHOUT_CLASSIFICATION	5.562503023319841E-5	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9996981441415015	WITHOUT_CLASSIFICATION	3.0185585849848423E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999478163299708	WITHOUT_CLASSIFICATION	5.2183670029260785E-5	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9982028848458326	WITHOUT_CLASSIFICATION	0.0017971151541674433	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9975879103637023	WITHOUT_CLASSIFICATION	0.0024120896362977815	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9979246463472232	WITHOUT_CLASSIFICATION	0.0020753536527768337	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9977870483028688	WITHOUT_CLASSIFICATION	0.0022129516971312285	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9971244239573497	WITHOUT_CLASSIFICATION	0.0028755760426503085	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9971244239573497	WITHOUT_CLASSIFICATION	0.0028755760426503085	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9971973800961019	WITHOUT_CLASSIFICATION	0.002802619903898119	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9971973800961019	WITHOUT_CLASSIFICATION	0.002802619903898119	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999155866675709	WITHOUT_CLASSIFICATION	8.441333242914636E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999155866675709	WITHOUT_CLASSIFICATION	8.441333242914636E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999530261672537	WITHOUT_CLASSIFICATION	4.697383274625509E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999530261672537	WITHOUT_CLASSIFICATION	4.697383274625509E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999443749697668	WITHOUT_CLASSIFICATION	5.562503023319841E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9977870483028688	WITHOUT_CLASSIFICATION	0.0022129516971312285	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9971244239573497	WITHOUT_CLASSIFICATION	0.0028755760426503085	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9971244239573497	WITHOUT_CLASSIFICATION	0.0028755760426503085	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9971973800961019	WITHOUT_CLASSIFICATION	0.002802619903898119	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999155866675709	WITHOUT_CLASSIFICATION	8.441333242914636E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999155866675709	WITHOUT_CLASSIFICATION	8.441333242914636E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999530261672537	WITHOUT_CLASSIFICATION	4.697383274625509E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999604796014301	WITHOUT_CLASSIFICATION	3.9520398569963086E-5	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999254244209687	WITHOUT_CLASSIFICATION	7.457557903134651E-5	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999366490622057	WITHOUT_CLASSIFICATION	6.335093779423034E-5	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999921199835209	WITHOUT_CLASSIFICATION	7.880016479072109E-6	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999417389099405	WITHOUT_CLASSIFICATION	5.826109005942941E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9970994352059046	WITHOUT_CLASSIFICATION	0.002900564794095435	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999375488436503	WITHOUT_CLASSIFICATION	6.245115634971847E-5	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999844503267933	WITHOUT_CLASSIFICATION	1.5549673206769508E-5	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999983561394317	WITHOUT_CLASSIFICATION	1.6438605682981194E-5	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999918184472768	WITHOUT_CLASSIFICATION	8.181552723104624E-6	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999607534660696	WITHOUT_CLASSIFICATION	3.924653393034799E-5	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999694572368028	WITHOUT_CLASSIFICATION	3.054276319729474E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999472384999043	WITHOUT_CLASSIFICATION	5.276150009570056E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9970994352059046	WITHOUT_CLASSIFICATION	0.002900564794095435	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999807006243323	WITHOUT_CLASSIFICATION	1.9299375667601105E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999973029532947	WITHOUT_CLASSIFICATION	2.6970467053001835E-6	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999973029532947	WITHOUT_CLASSIFICATION	2.6970467053001835E-6	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999869751319888	WITHOUT_CLASSIFICATION	1.3024868011345654E-5	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999752932649412	WITHOUT_CLASSIFICATION	2.470673505883543E-5	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999718362277946	WITHOUT_CLASSIFICATION	2.8163772205330615E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999757219997807	WITHOUT_CLASSIFICATION	2.4278000219242014E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999757219997807	WITHOUT_CLASSIFICATION	2.4278000219242014E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999992978729321	WITHOUT_CLASSIFICATION	7.021270678983185E-6	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999991145563002	WITHOUT_CLASSIFICATION	8.854436998022819E-6	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999991145563002	WITHOUT_CLASSIFICATION	8.854436998022819E-6	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999809498602505	WITHOUT_CLASSIFICATION	1.9050139749378172E-5	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999731306764422	WITHOUT_CLASSIFICATION	2.6869323557774235E-5	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999648161315701	WITHOUT_CLASSIFICATION	3.518386842992137E-5	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999161539744686	WITHOUT_CLASSIFICATION	8.384602553134104E-5	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9971284485512527	WITHOUT_CLASSIFICATION	0.002871551448747347	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9971336115104703	WITHOUT_CLASSIFICATION	0.002866388489529665	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9880288158021198	WITHOUT_CLASSIFICATION	0.011971184197880286	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999096561535665	WITHOUT_CLASSIFICATION	9.03438464334209E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999635372150254	WITHOUT_CLASSIFICATION	3.646278497452614E-5	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999773684417866	WITHOUT_CLASSIFICATION	2.2631558213354928E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999918557912736	WITHOUT_CLASSIFICATION	8.144208726409393E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999377416548927	WITHOUT_CLASSIFICATION	6.225834510738723E-5	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999481617187989	WITHOUT_CLASSIFICATION	5.1838281201292456E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999167084835466	WITHOUT_CLASSIFICATION	8.329151645341786E-5	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9971439849186634	WITHOUT_CLASSIFICATION	0.0028560150813364865	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999144570289592	WITHOUT_CLASSIFICATION	8.554297104079011E-5	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999099123913042	WITHOUT_CLASSIFICATION	9.008760869569824E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999160425969474	WITHOUT_CLASSIFICATION	8.395740305252062E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999163920241266	WITHOUT_CLASSIFICATION	8.360797587329835E-5	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999686505949367	WITHOUT_CLASSIFICATION	3.134940506335701E-5	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999457328695154	WITHOUT_CLASSIFICATION	5.426713048467941E-5	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999447934533874	WITHOUT_CLASSIFICATION	5.52065466126464E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9970910682885754	WITHOUT_CLASSIFICATION	0.0029089317114246085	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9971336115104703	WITHOUT_CLASSIFICATION	0.002866388489529665	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999163920241266	WITHOUT_CLASSIFICATION	8.360797587329835E-5	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999457328695154	WITHOUT_CLASSIFICATION	5.426713048467941E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9970910682885754	WITHOUT_CLASSIFICATION	0.0029089317114246085	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999941363056526	WITHOUT_CLASSIFICATION	5.863694347392525E-5	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999406918248147	WITHOUT_CLASSIFICATION	5.930817518537347E-5	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999228107378844	WITHOUT_CLASSIFICATION	7.718926211568972E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999196877717477	WITHOUT_CLASSIFICATION	8.031222825239024E-5	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999193048666707	WITHOUT_CLASSIFICATION	8.069513332932622E-5	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999584804188302	WITHOUT_CLASSIFICATION	4.151958116974966E-5	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999294897218814	WITHOUT_CLASSIFICATION	7.051027811858465E-5	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999910170979257	WITHOUT_CLASSIFICATION	8.982902074327096E-6	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999466505254365	WITHOUT_CLASSIFICATION	5.334947456345575E-5	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999385625431947	WITHOUT_CLASSIFICATION	6.143745680534205E-5	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999666934079858	WITHOUT_CLASSIFICATION	3.330659201418008E-5	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999609294047406	WITHOUT_CLASSIFICATION	3.907059525934038E-5	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999470826762611	WITHOUT_CLASSIFICATION	5.291732373894524E-5	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999972533234999	WITHOUT_CLASSIFICATION	2.74667650009355E-5	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999161383369901	WITHOUT_CLASSIFICATION	8.386166300992339E-5	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9980895593161102	WITHOUT_CLASSIFICATION	0.0019104406838898404	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999665633171932	WITHOUT_CLASSIFICATION	3.343668280672968E-5	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999163920241266	WITHOUT_CLASSIFICATION	8.360797587329835E-5	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999354265066966	WITHOUT_CLASSIFICATION	6.457349330338395E-5	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999543652855325	WITHOUT_CLASSIFICATION	4.563471446737147E-5	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999683884015728	WITHOUT_CLASSIFICATION	3.161159842711985E-5	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999506198813775	WITHOUT_CLASSIFICATION	4.9380118622544525E-5	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999241834542474	WITHOUT_CLASSIFICATION	7.58165457525512E-5	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999652966870513	WITHOUT_CLASSIFICATION	3.470331294883368E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999916212032337	WITHOUT_CLASSIFICATION	8.378796766356253E-6	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999844231389747	WITHOUT_CLASSIFICATION	1.5576861025240077E-5	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.999930552584719	WITHOUT_CLASSIFICATION	6.944741528109348E-5	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999159212767801	WITHOUT_CLASSIFICATION	8.407872321993816E-5	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999908502691872	WITHOUT_CLASSIFICATION	9.149730812801095E-5	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9986629235785516	WITHOUT_CLASSIFICATION	0.0013370764214484469	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999558087668869	WITHOUT_CLASSIFICATION	4.4191233113116454E-5	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999705593336157	WITHOUT_CLASSIFICATION	2.944066638435055E-5	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999549834336653	WITHOUT_CLASSIFICATION	4.501656633474986E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9999208760216183	WITHOUT_CLASSIFICATION	7.912397838172494E-5	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999194273894133	WITHOUT_CLASSIFICATION	8.057261058665493E-5	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999410658377285	WITHOUT_CLASSIFICATION	5.89341622715376E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999344270043753	WITHOUT_CLASSIFICATION	6.557299562476051E-5	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999993754088854	WITHOUT_CLASSIFICATION	6.24591114525442E-7	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999878266677568	WITHOUT_CLASSIFICATION	1.2173332243252243E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999672347201554	WITHOUT_CLASSIFICATION	3.2765279844642436E-5	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.999929604235257	WITHOUT_CLASSIFICATION	7.039576474305058E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999233688685093	WITHOUT_CLASSIFICATION	7.663113149074426E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999233688685093	WITHOUT_CLASSIFICATION	7.663113149074426E-5	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999140853985214	WITHOUT_CLASSIFICATION	8.591460147854638E-5	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999375718938525	WITHOUT_CLASSIFICATION	6.242810614754264E-5	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999800474193123	WITHOUT_CLASSIFICATION	1.995258068760461E-5	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999562478122878	WITHOUT_CLASSIFICATION	4.37521877122838E-5	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999690377375778	WITHOUT_CLASSIFICATION	3.096226242222945E-5	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.999960223055301	WITHOUT_CLASSIFICATION	3.977694469909746E-5	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999232224104797	WITHOUT_CLASSIFICATION	7.677758952039333E-5	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999939912220157	WITHOUT_CLASSIFICATION	6.008777984300189E-6	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999653331934247	WITHOUT_CLASSIFICATION	3.4666806575270586E-5	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999200540288485	WITHOUT_CLASSIFICATION	7.994597115151354E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999249310236752	WITHOUT_CLASSIFICATION	7.506897632483583E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.99994915404018	WITHOUT_CLASSIFICATION	5.0845959820029424E-5	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999828426419746	WITHOUT_CLASSIFICATION	1.7157358025420768E-5	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999732460948925	WITHOUT_CLASSIFICATION	2.675390510756431E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999939800472261	WITHOUT_CLASSIFICATION	6.0199527738997214E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999501829038663	WITHOUT_CLASSIFICATION	4.981709613374254E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.99999423763663	WITHOUT_CLASSIFICATION	5.762363370087828E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999813334608417	WITHOUT_CLASSIFICATION	1.8666539158216117E-5	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999684162793862	WITHOUT_CLASSIFICATION	3.1583720613819585E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999607868090603	WITHOUT_CLASSIFICATION	3.9213190939734434E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9976219891133347	WITHOUT_CLASSIFICATION	0.002378010886665283	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9976219891133347	WITHOUT_CLASSIFICATION	0.002378010886665283	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999183553871662	WITHOUT_CLASSIFICATION	8.164461283375003E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999183553871662	WITHOUT_CLASSIFICATION	8.164461283375003E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999672347201554	WITHOUT_CLASSIFICATION	3.2765279844642436E-5	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999278903939562	WITHOUT_CLASSIFICATION	7.210960604374397E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999937237850995	WITHOUT_CLASSIFICATION	6.276214900510264E-5	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999264330618868	WITHOUT_CLASSIFICATION	7.356693811325393E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999957145088669	WITHOUT_CLASSIFICATION	4.285491133109091E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999937237850995	WITHOUT_CLASSIFICATION	6.276214900510264E-5	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999264330618868	WITHOUT_CLASSIFICATION	7.356693811325393E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999709402616349	WITHOUT_CLASSIFICATION	2.90597383649934E-5	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999700701610545	WITHOUT_CLASSIFICATION	2.9929838945415936E-5	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999828147466368	WITHOUT_CLASSIFICATION	1.7185253363300438E-5	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999769534817231	WITHOUT_CLASSIFICATION	2.30465182768646E-5	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.999993565935416	WITHOUT_CLASSIFICATION	6.434064583966897E-6	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999884928897833	WITHOUT_CLASSIFICATION	1.1507110216821618E-5	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999422617458832	WITHOUT_CLASSIFICATION	5.7738254116933945E-5	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999381054613005	WITHOUT_CLASSIFICATION	6.1894538699484E-5	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999869488623914	WITHOUT_CLASSIFICATION	1.305113760869529E-5	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999923645523384	WITHOUT_CLASSIFICATION	7.635447661590969E-6	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999941359786064	WITHOUT_CLASSIFICATION	5.864021393484466E-6	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999865516556119	WITHOUT_CLASSIFICATION	1.344834438817523E-5	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999590558061521	WITHOUT_CLASSIFICATION	4.0944193847821956E-5	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999075588057739	WITHOUT_CLASSIFICATION	9.244119422616741E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999957145088669	WITHOUT_CLASSIFICATION	4.285491133109091E-5	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999253237689609	WITHOUT_CLASSIFICATION	7.467623103901343E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999307773315748	WITHOUT_CLASSIFICATION	6.922266842522983E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999307773315748	WITHOUT_CLASSIFICATION	6.922266842522983E-5	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999801967340581	WITHOUT_CLASSIFICATION	1.9803265941826964E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999709402616349	WITHOUT_CLASSIFICATION	2.90597383649934E-5	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999658870411834	WITHOUT_CLASSIFICATION	3.411295881663968E-5	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999667516240498	WITHOUT_CLASSIFICATION	3.3248375950173456E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9978205200863354	WITHOUT_CLASSIFICATION	0.002179479913664564	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999727855265319	WITHOUT_CLASSIFICATION	2.7214473468120657E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999884897311055	WITHOUT_CLASSIFICATION	1.151026889449421E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999709402616349	WITHOUT_CLASSIFICATION	2.90597383649934E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999727855265319	WITHOUT_CLASSIFICATION	2.7214473468120657E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999884897311055	WITHOUT_CLASSIFICATION	1.151026889449421E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999680385919294	WITHOUT_CLASSIFICATION	3.196140807060542E-5	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999219330609226	WITHOUT_CLASSIFICATION	7.806693907745583E-5	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999947887255027	WITHOUT_CLASSIFICATION	5.2112744972306925E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999709402616349	WITHOUT_CLASSIFICATION	2.90597383649934E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999709402616349	WITHOUT_CLASSIFICATION	2.90597383649934E-5	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999342510555718	WITHOUT_CLASSIFICATION	6.574894442819154E-5	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999321427762377	WITHOUT_CLASSIFICATION	6.785722376232242E-5	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.999956709394608	WITHOUT_CLASSIFICATION	4.329060539202564E-5	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999777540292606	WITHOUT_CLASSIFICATION	2.2245970739461604E-5	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.99995339168523	WITHOUT_CLASSIFICATION	4.660831477009668E-5	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999724236667249	WITHOUT_CLASSIFICATION	2.757633327513727E-5	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999959547062809	WITHOUT_CLASSIFICATION	4.045293719100617E-5	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999597288343597	WITHOUT_CLASSIFICATION	4.027116564029927E-5	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999696511221663	WITHOUT_CLASSIFICATION	3.0348877833621082E-5	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999361915108825	WITHOUT_CLASSIFICATION	6.380848911754991E-5	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999869931761951	WITHOUT_CLASSIFICATION	1.3006823804945217E-5	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999480479365348	WITHOUT_CLASSIFICATION	5.195206346526186E-5	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999984083858222	WITHOUT_CLASSIFICATION	1.5916141778052746E-5	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999087136691865	WITHOUT_CLASSIFICATION	9.128633081354174E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999236495040058	WITHOUT_CLASSIFICATION	7.635049599413048E-5	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999875905217247	WITHOUT_CLASSIFICATION	1.2409478275337441E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999664525866961	WITHOUT_CLASSIFICATION	3.354741330376766E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.999978922450151	WITHOUT_CLASSIFICATION	2.107754984906221E-5	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999424620016599	WITHOUT_CLASSIFICATION	5.7537998340135856E-5	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999615256330189	WITHOUT_CLASSIFICATION	3.847436698120902E-5	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999311422925387	WITHOUT_CLASSIFICATION	6.885770746124819E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9999208915651978	WITHOUT_CLASSIFICATION	7.91084348021895E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9999208915651978	WITHOUT_CLASSIFICATION	7.91084348021895E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999664525866961	WITHOUT_CLASSIFICATION	3.354741330376766E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999737007618977	WITHOUT_CLASSIFICATION	2.6299238102265643E-5	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999827214444584	WITHOUT_CLASSIFICATION	1.7278555541536594E-5	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999164372499223	WITHOUT_CLASSIFICATION	8.356275007761196E-5	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999557923972604	WITHOUT_CLASSIFICATION	4.420760273956049E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999927536086536	WITHOUT_CLASSIFICATION	7.246391346333143E-6	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999894545936903	WITHOUT_CLASSIFICATION	1.0545406309611752E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999854532966876	WITHOUT_CLASSIFICATION	1.4546703312333912E-5	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999191775109605	WITHOUT_CLASSIFICATION	8.082248903953174E-5	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999960806907099	WITHOUT_CLASSIFICATION	3.9193092901332005E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999531161273305	WITHOUT_CLASSIFICATION	4.6883872669365507E-5	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999874351237211	WITHOUT_CLASSIFICATION	1.2564876278886388E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999620626631079	WITHOUT_CLASSIFICATION	3.7937336892073144E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999777006428344	WITHOUT_CLASSIFICATION	2.229935716564663E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999221296540027	WITHOUT_CLASSIFICATION	7.787034599736396E-5	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999989808079423	WITHOUT_CLASSIFICATION	1.0191920577077177E-5	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999843245563026	WITHOUT_CLASSIFICATION	1.5675443697438137E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999437808638476	WITHOUT_CLASSIFICATION	5.621913615241169E-5	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999861720551689	WITHOUT_CLASSIFICATION	1.382794483109321E-5	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999137318258572	WITHOUT_CLASSIFICATION	8.626817414272737E-5	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999619030857565	WITHOUT_CLASSIFICATION	3.809691424357579E-5	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999884932701681	WITHOUT_CLASSIFICATION	1.1506729831898473E-5	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999549199179191	WITHOUT_CLASSIFICATION	4.5080082080962356E-5	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999864866107548	WITHOUT_CLASSIFICATION	1.3513389245107606E-5	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998467889865705	WITHOUT_CLASSIFICATION	1.532110134294548E-4	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998117543395391	WITHOUT_CLASSIFICATION	1.8824566046091168E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998543505257138	WITHOUT_CLASSIFICATION	1.456494742861495E-4	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999435905242091	WITHOUT_CLASSIFICATION	5.64094757909006E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998173841418747	WITHOUT_CLASSIFICATION	1.8261585812532363E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998462641677478	WITHOUT_CLASSIFICATION	1.5373583225226974E-4	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998160994659947	WITHOUT_CLASSIFICATION	1.839005340054333E-4	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998474818994935	WITHOUT_CLASSIFICATION	1.5251810050654257E-4	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999414517750861	WITHOUT_CLASSIFICATION	5.854822491390803E-5	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9998961513644288	WITHOUT_CLASSIFICATION	1.0384863557132571E-4	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998798693441819	WITHOUT_CLASSIFICATION	1.2013065581803291E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998967918026992	WITHOUT_CLASSIFICATION	1.0320819730087695E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998726726058638	WITHOUT_CLASSIFICATION	1.2732739413627456E-4	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999026634098677	WITHOUT_CLASSIFICATION	9.733659013228384E-5	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998641715382895	WITHOUT_CLASSIFICATION	1.3582846171043586E-4	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998191412797859	WITHOUT_CLASSIFICATION	1.8085872021410905E-4	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998409549092556	WITHOUT_CLASSIFICATION	1.5904509074440412E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998160347303184	WITHOUT_CLASSIFICATION	1.8396526968154662E-4	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999508907347889	WITHOUT_CLASSIFICATION	4.9109265211126064E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999539715951079	WITHOUT_CLASSIFICATION	4.60284048920743E-5	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999254128958002	WITHOUT_CLASSIFICATION	7.458710419984258E-5	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999457196555411	WITHOUT_CLASSIFICATION	5.4280344458805014E-5	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999884212388177	WITHOUT_CLASSIFICATION	1.1578761182151374E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999304111880317	WITHOUT_CLASSIFICATION	6.958881196829902E-5	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999172895454232	WITHOUT_CLASSIFICATION	8.2710454576704E-5	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999606453977758	WITHOUT_CLASSIFICATION	3.93546022242324E-5	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999618636311757	WITHOUT_CLASSIFICATION	3.8136368824367005E-5	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.999919650256902	WITHOUT_CLASSIFICATION	8.034974309795382E-5	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.999917698007945	WITHOUT_CLASSIFICATION	8.23019920549571E-5	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999913261511096	WITHOUT_CLASSIFICATION	8.673848890398816E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999531161273305	WITHOUT_CLASSIFICATION	4.6883872669365507E-5	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999082750580891	WITHOUT_CLASSIFICATION	9.172494191084039E-5	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999163122536457	WITHOUT_CLASSIFICATION	8.368774635428176E-5	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999857052374465	WITHOUT_CLASSIFICATION	1.42947625534577E-5	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999505871107083	WITHOUT_CLASSIFICATION	4.9412889291801115E-5	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999440783447348	WITHOUT_CLASSIFICATION	5.5921655265183214E-5	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999962152009192	WITHOUT_CLASSIFICATION	3.7847990808564407E-6	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999412895308176	WITHOUT_CLASSIFICATION	5.8710469182411806E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999705410319202	WITHOUT_CLASSIFICATION	2.94589680799287E-5	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999436376026821	WITHOUT_CLASSIFICATION	5.636239731788396E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999423040712556	WITHOUT_CLASSIFICATION	5.769592874429457E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9989417769490566	WITHOUT_CLASSIFICATION	0.0010582230509433679	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999392829951429	WITHOUT_CLASSIFICATION	6.071700485713643E-5	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999601455249842	WITHOUT_CLASSIFICATION	3.985447501569235E-5	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999668225745563	WITHOUT_CLASSIFICATION	3.3177425443740476E-5	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999400051785805	WITHOUT_CLASSIFICATION	5.9994821419510775E-5	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999969823866203	WITHOUT_CLASSIFICATION	3.0176133797018563E-5	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.999959433581275	WITHOUT_CLASSIFICATION	4.056641872497283E-5	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999504789985724	WITHOUT_CLASSIFICATION	4.952100142756496E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999705532438086	WITHOUT_CLASSIFICATION	2.9446756191327315E-5	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999459186820453	WITHOUT_CLASSIFICATION	5.4081317954669835E-5	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9996995277630575	WITHOUT_CLASSIFICATION	3.004722369425032E-4	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999587269888958	WITHOUT_CLASSIFICATION	4.127301110420785E-5	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999572202021125	WITHOUT_CLASSIFICATION	4.2779797887532356E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999531161273305	WITHOUT_CLASSIFICATION	4.6883872669365507E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999304111880317	WITHOUT_CLASSIFICATION	6.958881196829902E-5	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999791211181974	WITHOUT_CLASSIFICATION	2.0878881802627684E-5	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999834837953209	WITHOUT_CLASSIFICATION	1.6516204679121226E-5	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9998957487580858	WITHOUT_CLASSIFICATION	1.0425124191413827E-4	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999457196555411	WITHOUT_CLASSIFICATION	5.4280344458805014E-5	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999942903397324	WITHOUT_CLASSIFICATION	5.7096602676061255E-5	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999264442397534	WITHOUT_CLASSIFICATION	7.355576024665364E-5	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999263991629094	WITHOUT_CLASSIFICATION	7.360083709058406E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999456768419034	WITHOUT_CLASSIFICATION	5.4323158096599656E-5	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999161448908774	WITHOUT_CLASSIFICATION	8.38551091225849E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999533364334919	WITHOUT_CLASSIFICATION	4.666356650811644E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999365926261825	WITHOUT_CLASSIFICATION	6.340737381749212E-5	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999444231395448	WITHOUT_CLASSIFICATION	5.5576860455188625E-5	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999755069916962	WITHOUT_CLASSIFICATION	2.449300830375221E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999531161273305	WITHOUT_CLASSIFICATION	4.6883872669365507E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999531161273305	WITHOUT_CLASSIFICATION	4.6883872669365507E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999460135133986	WITHOUT_CLASSIFICATION	5.398648660135588E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9998701260045789	WITHOUT_CLASSIFICATION	1.2987399542110272E-4	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999531939254906	WITHOUT_CLASSIFICATION	4.680607450927761E-5	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999303444615414	WITHOUT_CLASSIFICATION	6.96555384585982E-5	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999479862552092	WITHOUT_CLASSIFICATION	5.2013744790802875E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999639793406312	WITHOUT_CLASSIFICATION	3.6020659368815804E-5	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999591355057884	WITHOUT_CLASSIFICATION	4.086449421156812E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999531161273305	WITHOUT_CLASSIFICATION	4.6883872669365507E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999729035437793	WITHOUT_CLASSIFICATION	2.7096456220767523E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999690782521052	WITHOUT_CLASSIFICATION	3.0921747894815046E-5	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999618390545313	WITHOUT_CLASSIFICATION	3.816094546870142E-5	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999342715181936	WITHOUT_CLASSIFICATION	6.572848180639753E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999389971317231	WITHOUT_CLASSIFICATION	6.10028682768893E-5	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.999943605267168	WITHOUT_CLASSIFICATION	5.639473283192716E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999241919400862	WITHOUT_CLASSIFICATION	7.580805991377986E-5	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999176091391279	WITHOUT_CLASSIFICATION	8.239086087209705E-5	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999484510617898	WITHOUT_CLASSIFICATION	5.154893821014889E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999304111880317	WITHOUT_CLASSIFICATION	6.958881196829902E-5	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999598941168292	WITHOUT_CLASSIFICATION	4.0105883170834604E-5	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999954664388666	WITHOUT_CLASSIFICATION	4.533561133356267E-6	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999861069734659	WITHOUT_CLASSIFICATION	1.3893026534100133E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999304111880317	WITHOUT_CLASSIFICATION	6.958881196829902E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999498207677591	WITHOUT_CLASSIFICATION	5.017923224102655E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999729035437793	WITHOUT_CLASSIFICATION	2.7096456220767523E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999518671183338	WITHOUT_CLASSIFICATION	4.813288166621204E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999531161273305	WITHOUT_CLASSIFICATION	4.6883872669365507E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999476889838987	WITHOUT_CLASSIFICATION	5.2311016101157E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999531161273305	WITHOUT_CLASSIFICATION	4.6883872669365507E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999865428315292	WITHOUT_CLASSIFICATION	1.3457168470705363E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999533364334919	WITHOUT_CLASSIFICATION	4.666356650811644E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999365926261825	WITHOUT_CLASSIFICATION	6.340737381749212E-5	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999444231395448	WITHOUT_CLASSIFICATION	5.5576860455188625E-5	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999942612145968	WITHOUT_CLASSIFICATION	5.738785403212305E-6	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999705255343542	WITHOUT_CLASSIFICATION	2.9474465645761532E-5	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999846405012077	WITHOUT_CLASSIFICATION	1.5359498792291758E-5	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999882393842576	WITHOUT_CLASSIFICATION	1.1760615742452508E-5	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999869972079889	WITHOUT_CLASSIFICATION	1.3002792011068257E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999531161273305	WITHOUT_CLASSIFICATION	4.6883872669365507E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999304111880317	WITHOUT_CLASSIFICATION	6.958881196829902E-5	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999755069916962	WITHOUT_CLASSIFICATION	2.449300830375221E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999460135133986	WITHOUT_CLASSIFICATION	5.398648660135588E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999661154918692	WITHOUT_CLASSIFICATION	3.3884508130788425E-5	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999608658989122	WITHOUT_CLASSIFICATION	3.91341010877413E-5	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999754445721889	WITHOUT_CLASSIFICATION	2.455542781108754E-5	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999971533322715	WITHOUT_CLASSIFICATION	2.846667728495264E-5	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999329946758909	WITHOUT_CLASSIFICATION	6.700532410909864E-5	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999582130288889	WITHOUT_CLASSIFICATION	4.178697111123844E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998160347303184	WITHOUT_CLASSIFICATION	1.8396526968154662E-4	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999819150804959	WITHOUT_CLASSIFICATION	1.8084919504017308E-5	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999171785736136	WITHOUT_CLASSIFICATION	8.282142638643062E-5	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999107952978197	WITHOUT_CLASSIFICATION	8.920470218034822E-5	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999837118681361	WITHOUT_CLASSIFICATION	1.6288131863969583E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999183291046123	WITHOUT_CLASSIFICATION	8.167089538759429E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998173841418747	WITHOUT_CLASSIFICATION	1.8261585812532363E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998462641677478	WITHOUT_CLASSIFICATION	1.5373583225226974E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998967918026992	WITHOUT_CLASSIFICATION	1.0320819730087695E-4	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999183291046123	WITHOUT_CLASSIFICATION	8.167089538759429E-5	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999784281089965	WITHOUT_CLASSIFICATION	2.157189100344767E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999317663446496	WITHOUT_CLASSIFICATION	6.823365535027746E-5	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997733475437895	WITHOUT_CLASSIFICATION	2.266524562104376E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998163076320453	WITHOUT_CLASSIFICATION	1.836923679546186E-4	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999669995872493	WITHOUT_CLASSIFICATION	3.300041275056744E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999531161273305	WITHOUT_CLASSIFICATION	4.6883872669365507E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999531161273305	WITHOUT_CLASSIFICATION	4.6883872669365507E-5	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999209071514293	WITHOUT_CLASSIFICATION	7.909284857066161E-5	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998726726058638	WITHOUT_CLASSIFICATION	1.2732739413627456E-4	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998191412797859	WITHOUT_CLASSIFICATION	1.8085872021410905E-4	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999705532438086	WITHOUT_CLASSIFICATION	2.9446756191327315E-5	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999923238923698	WITHOUT_CLASSIFICATION	7.676107630233297E-6	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999815691421599	WITHOUT_CLASSIFICATION	1.843085784018862E-5	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999894098717901	WITHOUT_CLASSIFICATION	1.0590128210040243E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999880470672438	WITHOUT_CLASSIFICATION	1.1952932756382754E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999918934334195	WITHOUT_CLASSIFICATION	8.106566580393597E-6	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999593148086795	WITHOUT_CLASSIFICATION	4.0685191320486656E-5	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999332778477474	WITHOUT_CLASSIFICATION	6.672215225249859E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999214112602773	WITHOUT_CLASSIFICATION	7.85887397227006E-5	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999960806907099	WITHOUT_CLASSIFICATION	3.9193092901332005E-6	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.99904217699945	WITHOUT_CLASSIFICATION	9.578230005500943E-4	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999813325681198	WITHOUT_CLASSIFICATION	1.866743188020427E-5	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999860879136536	WITHOUT_CLASSIFICATION	1.3912086346477797E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999977357179472	WITHOUT_CLASSIFICATION	2.264282052806284E-5	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999138278739157	WITHOUT_CLASSIFICATION	8.617212608439688E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999386291879497	WITHOUT_CLASSIFICATION	6.13708120502227E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525754463698	WITHOUT_CLASSIFICATION	4.742455363020694E-5	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993950070187485	WITHOUT_CLASSIFICATION	6.04992981251501E-4	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999868980301171	WITHOUT_CLASSIFICATION	1.3101969882833968E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999264141035706	WITHOUT_CLASSIFICATION	7.358589642935697E-5	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999091169185589	WITHOUT_CLASSIFICATION	9.088308144118815E-5	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999829840588674	WITHOUT_CLASSIFICATION	1.701594113256906E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999839513682774	WITHOUT_CLASSIFICATION	1.604863172252178E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999750893939409	WITHOUT_CLASSIFICATION	2.4910606059076067E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999852802284883	WITHOUT_CLASSIFICATION	1.4719771511756315E-5	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999314846043901	WITHOUT_CLASSIFICATION	6.851539560990522E-5	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999561524022488	WITHOUT_CLASSIFICATION	4.3847597751183914E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999796458987386	WITHOUT_CLASSIFICATION	2.0354101261484778E-5	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999634204947205	WITHOUT_CLASSIFICATION	3.65795052794063E-5	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999796952716051	WITHOUT_CLASSIFICATION	2.0304728394953454E-5	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999758784389917	WITHOUT_CLASSIFICATION	2.4121561008243853E-5	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999847166137767	WITHOUT_CLASSIFICATION	1.528338622323793E-5	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999986529483252	WITHOUT_CLASSIFICATION	1.3470516748356569E-6	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999833424630283	WITHOUT_CLASSIFICATION	1.6657536971689468E-5	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999428706577984	WITHOUT_CLASSIFICATION	5.712934220156541E-5	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999158391056178	WITHOUT_CLASSIFICATION	8.416089438222478E-5	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999158305336233	WITHOUT_CLASSIFICATION	8.41694663767004E-5	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999755769880672	WITHOUT_CLASSIFICATION	2.4423011932839153E-5	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999966339024696	WITHOUT_CLASSIFICATION	3.366097530396663E-5	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999276815391194	WITHOUT_CLASSIFICATION	7.231846088067653E-5	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999594780971061	WITHOUT_CLASSIFICATION	4.052190289389108E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999957055611064	WITHOUT_CLASSIFICATION	4.294438893491264E-6	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999760530071365	WITHOUT_CLASSIFICATION	2.394699286344181E-5	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999947835716256	WITHOUT_CLASSIFICATION	5.21642837431302E-6	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999914457856977	WITHOUT_CLASSIFICATION	8.55421430230804E-6	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999913259326222	WITHOUT_CLASSIFICATION	8.674067377833378E-6	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999962446164536	WITHOUT_CLASSIFICATION	3.7553835463708224E-6	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999863417220004	WITHOUT_CLASSIFICATION	1.3658277999605975E-5	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999987585785386	WITHOUT_CLASSIFICATION	1.2414214614071208E-6	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999953083810815	WITHOUT_CLASSIFICATION	4.691618918434078E-6	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9998985830401914	WITHOUT_CLASSIFICATION	1.0141695980863514E-4	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999677437819421	WITHOUT_CLASSIFICATION	3.2256218057837565E-5	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999655603978136	WITHOUT_CLASSIFICATION	3.4439602186470726E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999720041089067	WITHOUT_CLASSIFICATION	2.79958910932385E-5	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999756969897724	WITHOUT_CLASSIFICATION	2.430301022765068E-5	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999154188387351	WITHOUT_CLASSIFICATION	8.458116126480016E-5	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999586712405647	WITHOUT_CLASSIFICATION	4.132875943532873E-5	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999660247309485	WITHOUT_CLASSIFICATION	3.397526905143954E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999295999873191	WITHOUT_CLASSIFICATION	7.040001268080029E-5	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999603676264202	WITHOUT_CLASSIFICATION	3.963237357982277E-5	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999721564956824	WITHOUT_CLASSIFICATION	2.784350431759253E-5	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999746819179565	WITHOUT_CLASSIFICATION	2.531808204345938E-5	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999743852036924	WITHOUT_CLASSIFICATION	2.561479630757452E-5	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.99999384343396	WITHOUT_CLASSIFICATION	6.156566039987826E-6	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999980137480355	WITHOUT_CLASSIFICATION	1.9862519644640823E-6	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999875665932908	WITHOUT_CLASSIFICATION	1.24334067092394E-5	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.999915606132775	WITHOUT_CLASSIFICATION	8.439386722500913E-5	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999328651881835	WITHOUT_CLASSIFICATION	6.713481181653916E-5	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999504369398607	WITHOUT_CLASSIFICATION	4.95630601392898E-5	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999791810640878	WITHOUT_CLASSIFICATION	2.0818935912259703E-5	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999585251318702	WITHOUT_CLASSIFICATION	4.1474868129817866E-5	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999460949968706	WITHOUT_CLASSIFICATION	5.390500312943933E-5	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999163898231733	WITHOUT_CLASSIFICATION	8.361017682660305E-5	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999358532246114	WITHOUT_CLASSIFICATION	6.414677538855918E-5	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999476536987518	WITHOUT_CLASSIFICATION	5.234630124808291E-5	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999595037934198	WITHOUT_CLASSIFICATION	4.0496206580272196E-5	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.999987663975857	WITHOUT_CLASSIFICATION	1.2336024142883168E-5	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999772497370243	WITHOUT_CLASSIFICATION	2.2750262975750307E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999575700966713	WITHOUT_CLASSIFICATION	4.2429903328747E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999576271081015	WITHOUT_CLASSIFICATION	4.237289189847008E-5	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999834854144845	WITHOUT_CLASSIFICATION	1.6514585515516464E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.999975680127119	WITHOUT_CLASSIFICATION	2.4319872881030394E-5	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999846350834632	WITHOUT_CLASSIFICATION	1.536491653667767E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999772234659313	WITHOUT_CLASSIFICATION	2.277653406868409E-5	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.99996694640517	WITHOUT_CLASSIFICATION	3.3053594829989E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9970906618385825	WITHOUT_CLASSIFICATION	0.00290933816141756	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999773998887524	WITHOUT_CLASSIFICATION	2.2600111247572596E-5	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.999972253338269	WITHOUT_CLASSIFICATION	2.7746661731044304E-5	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999993968646691	WITHOUT_CLASSIFICATION	6.031353308594294E-7	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.999924017248833	WITHOUT_CLASSIFICATION	7.598275116711034E-5	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999094166394371	WITHOUT_CLASSIFICATION	9.058336056284152E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999417378786293	WITHOUT_CLASSIFICATION	5.826212137064053E-5	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999433208814014	WITHOUT_CLASSIFICATION	5.6679118598659204E-5	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999144296439841	WITHOUT_CLASSIFICATION	8.557035601584957E-5	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999271225665465	WITHOUT_CLASSIFICATION	7.287743345346122E-5	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999375856886503	WITHOUT_CLASSIFICATION	6.241431134971203E-5	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999341393992144	WITHOUT_CLASSIFICATION	6.58606007856423E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999164176025793	WITHOUT_CLASSIFICATION	8.358239742071435E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999159915121133	WITHOUT_CLASSIFICATION	8.400848788680474E-5	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999919942901327	WITHOUT_CLASSIFICATION	8.00570986723752E-6	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999329765687125	WITHOUT_CLASSIFICATION	6.702343128761087E-5	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9999243853249254	WITHOUT_CLASSIFICATION	7.561467507449072E-5	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999615490687271	WITHOUT_CLASSIFICATION	3.845093127287886E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999329765687125	WITHOUT_CLASSIFICATION	6.702343128761087E-5	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999961405050867	WITHOUT_CLASSIFICATION	3.859494913302602E-5	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999481647099181	WITHOUT_CLASSIFICATION	5.183529008181739E-5	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999056887656836	WITHOUT_CLASSIFICATION	9.431123431640741E-5	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998185884478553	WITHOUT_CLASSIFICATION	1.8141155214470677E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999748514361136	WITHOUT_CLASSIFICATION	2.5148563886365024E-5	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999750268679708	WITHOUT_CLASSIFICATION	2.4973132029237498E-5	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999219413618798	WITHOUT_CLASSIFICATION	7.805863812019197E-5	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999508803291253	WITHOUT_CLASSIFICATION	4.911967087474798E-5	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999271467688261	WITHOUT_CLASSIFICATION	7.28532311739025E-5	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999220510151899	WITHOUT_CLASSIFICATION	7.794898481003179E-5	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999841517923801	WITHOUT_CLASSIFICATION	1.5848207619864295E-5	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999874465918531	WITHOUT_CLASSIFICATION	1.2553408146759789E-5	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9942032325016841	WITHOUT_CLASSIFICATION	0.00579676749831592	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999987522456559	WITHOUT_CLASSIFICATION	1.2477543440905393E-6	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999897906513219	WITHOUT_CLASSIFICATION	1.0209348678105445E-5	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999735390807716	WITHOUT_CLASSIFICATION	2.646091922847119E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999300885478541	WITHOUT_CLASSIFICATION	6.991145214582817E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999300885478541	WITHOUT_CLASSIFICATION	6.991145214582817E-5	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999869990319271	WITHOUT_CLASSIFICATION	1.3000968072953439E-5	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9999393543097269	WITHOUT_CLASSIFICATION	6.064569027322221E-5	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999433214605591	WITHOUT_CLASSIFICATION	5.667853944096209E-5	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999173738392565	WITHOUT_CLASSIFICATION	8.262616074344029E-5	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999626699350279	WITHOUT_CLASSIFICATION	3.733006497197241E-5	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999723085346387	WITHOUT_CLASSIFICATION	2.769146536130554E-5	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.999932579413546	WITHOUT_CLASSIFICATION	6.74205864540621E-5	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999920597052898	WITHOUT_CLASSIFICATION	7.940294710128665E-6	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999522247914981	WITHOUT_CLASSIFICATION	4.7775208501858054E-5	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999789580098619	WITHOUT_CLASSIFICATION	2.1041990138081914E-5	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999739037450397	WITHOUT_CLASSIFICATION	2.609625496029111E-5	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999822521363654	WITHOUT_CLASSIFICATION	1.7747863634666787E-5	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999282749214976	WITHOUT_CLASSIFICATION	7.172507850236685E-5	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999690224444878	WITHOUT_CLASSIFICATION	3.097755551224994E-5	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999918901249035	WITHOUT_CLASSIFICATION	8.109875096444386E-6	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999386291879497	WITHOUT_CLASSIFICATION	6.13708120502227E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999822570948931	WITHOUT_CLASSIFICATION	1.7742905106917777E-5	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999942348485451	WITHOUT_CLASSIFICATION	5.765151454915561E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999505937928316	WITHOUT_CLASSIFICATION	4.940620716837364E-5	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.999928549874486	WITHOUT_CLASSIFICATION	7.145012551406754E-5	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999791647517333	WITHOUT_CLASSIFICATION	2.083524826663562E-5	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999174640135473	WITHOUT_CLASSIFICATION	8.253598645266607E-5	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999979560757616	WITHOUT_CLASSIFICATION	2.043924238439695E-6	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999946301375044	WITHOUT_CLASSIFICATION	5.369862495601937E-6	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999528532474987	WITHOUT_CLASSIFICATION	4.714675250125681E-5	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999617080310208	WITHOUT_CLASSIFICATION	3.829196897917275E-5	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999968496867694	WITHOUT_CLASSIFICATION	3.150313230543932E-6	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.999982444956333	WITHOUT_CLASSIFICATION	1.7555043666893883E-5	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999937936101712	WITHOUT_CLASSIFICATION	6.206389828806158E-6	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.999928775777992	WITHOUT_CLASSIFICATION	7.122422200791999E-5	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999718004200528	WITHOUT_CLASSIFICATION	2.819957994710121E-5	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999217693600395	WITHOUT_CLASSIFICATION	7.823063996055956E-5	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9970890184835329	WITHOUT_CLASSIFICATION	0.002910981516467005	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999600792612278	WITHOUT_CLASSIFICATION	3.9920738772260425E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999138432512734	WITHOUT_CLASSIFICATION	8.61567487265589E-5	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999885802182034	WITHOUT_CLASSIFICATION	1.141978179671641E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999723381326445	WITHOUT_CLASSIFICATION	2.7661867355562825E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999151289967544	WITHOUT_CLASSIFICATION	8.487100324553814E-5	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999926034259927	WITHOUT_CLASSIFICATION	7.396574007244664E-6	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999946182863126	WITHOUT_CLASSIFICATION	5.381713687439092E-6	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999784549960138	WITHOUT_CLASSIFICATION	2.1545003986184817E-5	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999811033871143	WITHOUT_CLASSIFICATION	1.8896612885755635E-5	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999880544656892	WITHOUT_CLASSIFICATION	1.1945534310858668E-5	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999964498836933	WITHOUT_CLASSIFICATION	3.5501163067079795E-5	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999895287876973	WITHOUT_CLASSIFICATION	1.0471212302665462E-5	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999940740613151	WITHOUT_CLASSIFICATION	5.925938684841996E-6	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999345887761897	WITHOUT_CLASSIFICATION	6.541122381032555E-5	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999957935107084	WITHOUT_CLASSIFICATION	4.2064892916020775E-5	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999636741338989	WITHOUT_CLASSIFICATION	3.632586610124015E-5	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999965599390954	WITHOUT_CLASSIFICATION	3.440060904519313E-6	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999843738211742	WITHOUT_CLASSIFICATION	1.562617882575683E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999214112602773	WITHOUT_CLASSIFICATION	7.85887397227006E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999214112602773	WITHOUT_CLASSIFICATION	7.85887397227006E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999965665847739	WITHOUT_CLASSIFICATION	3.4334152260932724E-5	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999983877679477	WITHOUT_CLASSIFICATION	1.6122320523641365E-6	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999420524138516	WITHOUT_CLASSIFICATION	5.7947586148381926E-5	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999256069412321	WITHOUT_CLASSIFICATION	7.43930587679658E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999420524138516	WITHOUT_CLASSIFICATION	5.7947586148381926E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999391852658558	WITHOUT_CLASSIFICATION	6.081473414414586E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999665785273643	WITHOUT_CLASSIFICATION	3.342147263569538E-5	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999628338263363	WITHOUT_CLASSIFICATION	3.716617366369759E-5	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998887289913995	WITHOUT_CLASSIFICATION	1.1127100860054565E-4	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.99994520080383	WITHOUT_CLASSIFICATION	5.4799196170010786E-5	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999566456750059	WITHOUT_CLASSIFICATION	4.33543249941002E-5	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999667423653958	WITHOUT_CLASSIFICATION	3.325763460417817E-5	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999578261585387	WITHOUT_CLASSIFICATION	4.217384146140009E-5	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999526970150132	WITHOUT_CLASSIFICATION	4.730298498684931E-5	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999736185360913	WITHOUT_CLASSIFICATION	2.6381463908768134E-5	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999608866708076	WITHOUT_CLASSIFICATION	3.9113329192419624E-5	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999551592497425	WITHOUT_CLASSIFICATION	4.4840750257555725E-5	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999297244742902	WITHOUT_CLASSIFICATION	7.027552570977453E-5	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.999996662477111	WITHOUT_CLASSIFICATION	3.3375228888367676E-6	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999687250796865	WITHOUT_CLASSIFICATION	3.127492031342936E-5	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999817388364443	WITHOUT_CLASSIFICATION	1.8261163555805218E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999785121995071	WITHOUT_CLASSIFICATION	2.1487800492975904E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999785121995071	WITHOUT_CLASSIFICATION	2.1487800492975904E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999242737169649	WITHOUT_CLASSIFICATION	7.572628303504123E-5	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999793114082763	WITHOUT_CLASSIFICATION	2.0688591723662943E-5	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999947956931354	WITHOUT_CLASSIFICATION	5.204306864549152E-6	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999938171084648	WITHOUT_CLASSIFICATION	6.182891535180409E-6	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999916931676786	WITHOUT_CLASSIFICATION	8.30683232135045E-6	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999890981883448	WITHOUT_CLASSIFICATION	1.0901811655225233E-5	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999772009090466	WITHOUT_CLASSIFICATION	2.2799090953391414E-5	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999428831274435	WITHOUT_CLASSIFICATION	5.711687255651969E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999595944397212	WITHOUT_CLASSIFICATION	4.040556027875298E-5	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999839442406984	WITHOUT_CLASSIFICATION	1.6055759301637483E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999636337933735	WITHOUT_CLASSIFICATION	3.636620662655448E-5	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999885778468819	WITHOUT_CLASSIFICATION	1.1422153118096717E-5	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999717112838606	WITHOUT_CLASSIFICATION	2.8288716139400782E-5	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999656755509042	WITHOUT_CLASSIFICATION	3.43244490957127E-5	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999699053748905	WITHOUT_CLASSIFICATION	3.009462510950296E-5	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999956734514239	WITHOUT_CLASSIFICATION	4.326548576133228E-6	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999654370320717	WITHOUT_CLASSIFICATION	3.456296792831884E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9998730624704897	WITHOUT_CLASSIFICATION	1.2693752951027274E-4	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9999611429898374	WITHOUT_CLASSIFICATION	3.885701016251496E-5	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999670649030798	WITHOUT_CLASSIFICATION	3.293509692021779E-5	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999567757307646	WITHOUT_CLASSIFICATION	4.3224269235540016E-5	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999235554147727	WITHOUT_CLASSIFICATION	7.644458522737039E-5	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999300380579119	WITHOUT_CLASSIFICATION	6.996194208809397E-5	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9998910063055152	WITHOUT_CLASSIFICATION	1.0899369448482252E-4	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999685149650742	WITHOUT_CLASSIFICATION	3.1485034925772446E-5	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999904314706879	WITHOUT_CLASSIFICATION	9.56852931217986E-6	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999432496992113	WITHOUT_CLASSIFICATION	5.6750300788694527E-5	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999714934391165	WITHOUT_CLASSIFICATION	2.850656088352482E-5	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999352888116835	WITHOUT_CLASSIFICATION	6.471118831647983E-5	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999917653913729	WITHOUT_CLASSIFICATION	8.234608627081052E-6	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999727769824935	WITHOUT_CLASSIFICATION	2.722301750652702E-5	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999622666351087	WITHOUT_CLASSIFICATION	3.77333648913675E-5	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999908403887655	WITHOUT_CLASSIFICATION	9.159611234575742E-6	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999134067370932	WITHOUT_CLASSIFICATION	8.659326290693989E-5	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999969356543823	WITHOUT_CLASSIFICATION	3.0643456177424903E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999985781606834	WITHOUT_CLASSIFICATION	1.4218393165856464E-5	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999803698299323	WITHOUT_CLASSIFICATION	1.9630170067684128E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999585346747122	WITHOUT_CLASSIFICATION	4.1465325287724765E-5	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999549681495006	WITHOUT_CLASSIFICATION	4.503185049946398E-5	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999547830035752	WITHOUT_CLASSIFICATION	4.521699642485157E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999936591858701	WITHOUT_CLASSIFICATION	6.340814129900264E-5	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9999205866082505	WITHOUT_CLASSIFICATION	7.941339174961743E-5	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.998563677103361	WITHOUT_CLASSIFICATION	0.0014363228966390244	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999944739964003	WITHOUT_CLASSIFICATION	5.526003599606701E-6	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999767941136334	WITHOUT_CLASSIFICATION	2.320588636658081E-5	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9984747045874033	WITHOUT_CLASSIFICATION	0.0015252954125967685	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999956147112989	WITHOUT_CLASSIFICATION	4.385288701055359E-6	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999715133694865	WITHOUT_CLASSIFICATION	2.848663051345241E-5	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999919857186695	WITHOUT_CLASSIFICATION	8.014281330547677E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999368714251734	WITHOUT_CLASSIFICATION	6.312857482658455E-5	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999712787537575	WITHOUT_CLASSIFICATION	2.872124624253786E-5	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999994299788709	WITHOUT_CLASSIFICATION	5.700211291341716E-7	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999862601591513	WITHOUT_CLASSIFICATION	1.3739840848766274E-5	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999209051846961	WITHOUT_CLASSIFICATION	7.909481530378821E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999498207677591	WITHOUT_CLASSIFICATION	5.017923224102655E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999498207677591	WITHOUT_CLASSIFICATION	5.017923224102655E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.99999867537633	WITHOUT_CLASSIFICATION	1.3246236700252408E-6	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999597893346198	WITHOUT_CLASSIFICATION	4.021066538007804E-5	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999385311418312	WITHOUT_CLASSIFICATION	6.146885816885271E-5	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999636590732168	WITHOUT_CLASSIFICATION	3.6340926783199386E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999969811121248	WITHOUT_CLASSIFICATION	3.018887875198987E-5	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999705445308634	WITHOUT_CLASSIFICATION	2.945546913654352E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999850379450788	WITHOUT_CLASSIFICATION	1.4962054921237244E-5	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.999987222159516	WITHOUT_CLASSIFICATION	1.2777840484051346E-5	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999702367540726	WITHOUT_CLASSIFICATION	2.9763245927351542E-5	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999921472890194	WITHOUT_CLASSIFICATION	7.852710980594757E-6	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999835353099955	WITHOUT_CLASSIFICATION	1.6464690004511454E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999099817948731	WITHOUT_CLASSIFICATION	9.001820512693538E-5	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999792419132315	WITHOUT_CLASSIFICATION	2.0758086768473178E-5	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999924564620892	WITHOUT_CLASSIFICATION	7.543537910735259E-6	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999945785818933	WITHOUT_CLASSIFICATION	5.42141810673744E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999977835106414	WITHOUT_CLASSIFICATION	2.216489358594008E-6	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9999168843843571	WITHOUT_CLASSIFICATION	8.311561564291343E-5	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999857032722118	WITHOUT_CLASSIFICATION	1.4296727788194446E-5	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999274581997958	WITHOUT_CLASSIFICATION	7.254180020432597E-5	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999973728796486	WITHOUT_CLASSIFICATION	2.627120351319035E-6	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999186931999172	WITHOUT_CLASSIFICATION	8.130680008280732E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999751929276198	WITHOUT_CLASSIFICATION	2.480707238014404E-5	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999963087113547	WITHOUT_CLASSIFICATION	3.6912886453742343E-6	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.999995438507715	WITHOUT_CLASSIFICATION	4.56149228499159E-6	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999614207598341	WITHOUT_CLASSIFICATION	3.8579240165882954E-5	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999167102432716	WITHOUT_CLASSIFICATION	8.328975672850307E-5	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999610486119265	WITHOUT_CLASSIFICATION	3.89513880735503E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999896989764941	WITHOUT_CLASSIFICATION	1.0301023505902188E-5	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999998123495756	WITHOUT_CLASSIFICATION	1.876504244702927E-7	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9971003070773268	WITHOUT_CLASSIFICATION	0.002899692922673215	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999232815497637	WITHOUT_CLASSIFICATION	7.671845023631795E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999931105782426	WITHOUT_CLASSIFICATION	6.889421757391739E-6	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999906778341309	WITHOUT_CLASSIFICATION	9.32216586908983E-6	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999736459548585	WITHOUT_CLASSIFICATION	2.6354045141623795E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999917948378321	WITHOUT_CLASSIFICATION	8.205162167912683E-6	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999693627375198	WITHOUT_CLASSIFICATION	3.063726248030401E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999232815497637	WITHOUT_CLASSIFICATION	7.671845023631795E-5	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999885658292688	WITHOUT_CLASSIFICATION	1.1434170731195504E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999915946698237	WITHOUT_CLASSIFICATION	8.405330176299021E-6	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999684043790042	WITHOUT_CLASSIFICATION	3.159562099583994E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999556084111402	WITHOUT_CLASSIFICATION	4.4391588859854584E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999636337933735	WITHOUT_CLASSIFICATION	3.636620662655448E-5	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999543693995877	WITHOUT_CLASSIFICATION	4.5630600412238796E-5	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999520177488235	WITHOUT_CLASSIFICATION	4.79822511766234E-5	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999903943395735	WITHOUT_CLASSIFICATION	9.60566042650145E-6	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999563602423396	WITHOUT_CLASSIFICATION	4.3639757660328696E-5	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999736407622025	WITHOUT_CLASSIFICATION	2.6359237797432112E-5	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999639164734455	WITHOUT_CLASSIFICATION	3.608352655445746E-5	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999564809830033	WITHOUT_CLASSIFICATION	4.351901699673287E-5	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999931839266339	WITHOUT_CLASSIFICATION	6.816073366039401E-6	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999100106131538	WITHOUT_CLASSIFICATION	8.998938684620311E-5	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999662510414853	WITHOUT_CLASSIFICATION	3.374895851469142E-5	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999632386164854	WITHOUT_CLASSIFICATION	3.6761383514638025E-5	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999811697466959	WITHOUT_CLASSIFICATION	1.8830253304127623E-5	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999119005364763	WITHOUT_CLASSIFICATION	8.80994635237504E-5	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999673264358022	WITHOUT_CLASSIFICATION	3.267356419778798E-5	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999292167623854	WITHOUT_CLASSIFICATION	7.078323761455947E-5	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999848458219719	WITHOUT_CLASSIFICATION	1.515417802818216E-5	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999753494960596	WITHOUT_CLASSIFICATION	2.465050394036504E-5	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.999975314625494	WITHOUT_CLASSIFICATION	2.468537450591024E-5	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999926608421392	WITHOUT_CLASSIFICATION	7.339157860797027E-5	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999230705167832	WITHOUT_CLASSIFICATION	7.692948321686326E-5	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999785489025778	WITHOUT_CLASSIFICATION	2.145109742218914E-5	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999674310616475	WITHOUT_CLASSIFICATION	3.2568938352400634E-5	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999898895351937	WITHOUT_CLASSIFICATION	1.0110464806328446E-5	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999947434269903	WITHOUT_CLASSIFICATION	5.256573009702967E-5	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9998808569500596	WITHOUT_CLASSIFICATION	1.191430499404389E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999900117757914	WITHOUT_CLASSIFICATION	9.988224208611312E-6	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999123307051618	WITHOUT_CLASSIFICATION	8.766929483811493E-5	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998736989933055	WITHOUT_CLASSIFICATION	1.2630100669451107E-4	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999860760068372	WITHOUT_CLASSIFICATION	1.392399316279806E-5	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999197784763315	WITHOUT_CLASSIFICATION	8.0221523668545E-5	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999981494735499	WITHOUT_CLASSIFICATION	1.8505264500139863E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999955650799065	WITHOUT_CLASSIFICATION	4.434920093492177E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999955650799065	WITHOUT_CLASSIFICATION	4.434920093492177E-5	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999987197699742	WITHOUT_CLASSIFICATION	1.2802300257861245E-6	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999448304463774	WITHOUT_CLASSIFICATION	5.51695536226848E-5	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999586941448391	WITHOUT_CLASSIFICATION	4.130585516088181E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999991501096531	WITHOUT_CLASSIFICATION	8.498903468993722E-6	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999830502850334	WITHOUT_CLASSIFICATION	1.6949714966621975E-5	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999313419152358	WITHOUT_CLASSIFICATION	6.86580847642577E-5	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999668999590601	WITHOUT_CLASSIFICATION	3.310004093996326E-5	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999765812094904	WITHOUT_CLASSIFICATION	2.3418790509600154E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999475617231214	WITHOUT_CLASSIFICATION	5.2438276878633006E-5	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999967613642079	WITHOUT_CLASSIFICATION	3.2386357920558153E-6	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999352388460505	WITHOUT_CLASSIFICATION	6.476115394952193E-5	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999809643726816	WITHOUT_CLASSIFICATION	1.903562731841482E-5	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999662152137799	WITHOUT_CLASSIFICATION	3.378478622017019E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999955650799065	WITHOUT_CLASSIFICATION	4.434920093492177E-5	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999401054477749	WITHOUT_CLASSIFICATION	5.9894552225211434E-5	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999114271031092	WITHOUT_CLASSIFICATION	8.857289689081363E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999802153637483	WITHOUT_CLASSIFICATION	1.9784636251798056E-5	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999541620878735	WITHOUT_CLASSIFICATION	4.583791212656048E-5	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999875471155686	WITHOUT_CLASSIFICATION	1.2452884431381117E-5	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999960983016595	WITHOUT_CLASSIFICATION	3.9016983405036596E-5	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999954323811953	WITHOUT_CLASSIFICATION	4.5676188046360744E-6	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999702706501045	WITHOUT_CLASSIFICATION	2.9729349895482616E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999843622320554	WITHOUT_CLASSIFICATION	1.5637767944558245E-5	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.999963873365157	WITHOUT_CLASSIFICATION	3.6126634842946075E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999730014796566	WITHOUT_CLASSIFICATION	2.699852034349789E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999123307051618	WITHOUT_CLASSIFICATION	8.766929483811493E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999955650799065	WITHOUT_CLASSIFICATION	4.434920093492177E-5	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999423928331012	WITHOUT_CLASSIFICATION	5.7607166898923514E-5	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999810289397256	WITHOUT_CLASSIFICATION	1.8971060274410725E-5	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9997886598953702	WITHOUT_CLASSIFICATION	2.1134010462969607E-4	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999499585024691	WITHOUT_CLASSIFICATION	5.00414975308602E-5	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999840321271827	WITHOUT_CLASSIFICATION	1.596787281736342E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999751678198915	WITHOUT_CLASSIFICATION	2.4832180108466236E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999439069215273	WITHOUT_CLASSIFICATION	5.6093078472693445E-5	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999859397453702	WITHOUT_CLASSIFICATION	1.4060254629858574E-5	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999897098821119	WITHOUT_CLASSIFICATION	1.0290117888087457E-5	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999586140282142	WITHOUT_CLASSIFICATION	4.138597178579525E-5	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999876578701573	WITHOUT_CLASSIFICATION	1.2342129842601155E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999826311629331	WITHOUT_CLASSIFICATION	1.736883706695448E-5	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999814158153129	WITHOUT_CLASSIFICATION	1.8584184687117647E-5	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999220813621726	WITHOUT_CLASSIFICATION	7.79186378273878E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999391852658558	WITHOUT_CLASSIFICATION	6.081473414414586E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999902491939294	WITHOUT_CLASSIFICATION	9.750806070626593E-6	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999996279410219	WITHOUT_CLASSIFICATION	3.7205897809479143E-6	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999779413858161	WITHOUT_CLASSIFICATION	2.2058614183849627E-5	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999346916007867	WITHOUT_CLASSIFICATION	6.530839921332312E-5	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999991124207412	WITHOUT_CLASSIFICATION	8.875792587677047E-7	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999466786516372	WITHOUT_CLASSIFICATION	5.3321348362758074E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999466786516372	WITHOUT_CLASSIFICATION	5.3321348362758074E-5	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999666482133911	WITHOUT_CLASSIFICATION	3.335178660889311E-5	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999734338280775	WITHOUT_CLASSIFICATION	2.6566171922444593E-5	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999982589105446	WITHOUT_CLASSIFICATION	1.7410894553988018E-5	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999884999333916	WITHOUT_CLASSIFICATION	1.1500066608541548E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.99994935759012	WITHOUT_CLASSIFICATION	5.0642409879915504E-5	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999511792125694	WITHOUT_CLASSIFICATION	4.8820787430650676E-5	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999042576219944	WITHOUT_CLASSIFICATION	9.574237800550382E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999741598513541	WITHOUT_CLASSIFICATION	2.584014864599985E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999741598513541	WITHOUT_CLASSIFICATION	2.584014864599985E-5	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999295570622321	WITHOUT_CLASSIFICATION	7.044293776794925E-5	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999376981184607	WITHOUT_CLASSIFICATION	6.230188153926147E-5	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999731659219853	WITHOUT_CLASSIFICATION	2.683407801474815E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999632580067027	WITHOUT_CLASSIFICATION	3.6741993297221356E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999632580067027	WITHOUT_CLASSIFICATION	3.6741993297221356E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999632580067027	WITHOUT_CLASSIFICATION	3.6741993297221356E-5	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999965669333946	WITHOUT_CLASSIFICATION	3.433066605393089E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999812868447394	WITHOUT_CLASSIFICATION	1.871315526052175E-5	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.999959819797808	WITHOUT_CLASSIFICATION	4.0180202191982414E-5	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999154587499541	WITHOUT_CLASSIFICATION	8.45412500459201E-5	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999837674182053	WITHOUT_CLASSIFICATION	1.6232581794708916E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999955650799065	WITHOUT_CLASSIFICATION	4.434920093492177E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999955650799065	WITHOUT_CLASSIFICATION	4.434920093492177E-5	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999817619567888	WITHOUT_CLASSIFICATION	1.823804321122672E-5	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999983228909279	WITHOUT_CLASSIFICATION	1.6771090721004387E-6	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999489080174127	WITHOUT_CLASSIFICATION	5.109198258730822E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999830124756038	WITHOUT_CLASSIFICATION	1.6987524396191833E-5	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999391074982851	WITHOUT_CLASSIFICATION	6.08925017150476E-5	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.999965023435158	WITHOUT_CLASSIFICATION	3.49765648419577E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999464633657709	WITHOUT_CLASSIFICATION	5.353663422909183E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999651571322696	WITHOUT_CLASSIFICATION	3.4842867730291025E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999833275281955	WITHOUT_CLASSIFICATION	1.667247180446246E-5	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999561112225605	WITHOUT_CLASSIFICATION	4.38887774395223E-5	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999978900219906	WITHOUT_CLASSIFICATION	2.1099780093999894E-5	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999084774119302	WITHOUT_CLASSIFICATION	9.152258806983864E-5	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999084774119302	WITHOUT_CLASSIFICATION	9.152258806983864E-5	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999084774119302	WITHOUT_CLASSIFICATION	9.152258806983864E-5	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999084774119302	WITHOUT_CLASSIFICATION	9.152258806983864E-5	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999084774119302	WITHOUT_CLASSIFICATION	9.152258806983864E-5	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999218802902248	WITHOUT_CLASSIFICATION	7.811970977526543E-5	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999218802902248	WITHOUT_CLASSIFICATION	7.811970977526543E-5	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999220113181848	WITHOUT_CLASSIFICATION	7.798868181518215E-5	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999218802902248	WITHOUT_CLASSIFICATION	7.811970977526543E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999779251050752	WITHOUT_CLASSIFICATION	2.207489492480281E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999466786516372	WITHOUT_CLASSIFICATION	5.3321348362758074E-5	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999285848102556	WITHOUT_CLASSIFICATION	7.1415189744433E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999218802902248	WITHOUT_CLASSIFICATION	7.811970977526543E-5	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.999948380995143	WITHOUT_CLASSIFICATION	5.161900485697801E-5	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999353727718735	WITHOUT_CLASSIFICATION	6.462722812641314E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999086831350936	WITHOUT_CLASSIFICATION	9.131686490646157E-5	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999086600456771	WITHOUT_CLASSIFICATION	9.133995432288682E-5	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999920060562341	WITHOUT_CLASSIFICATION	7.993943765886743E-6	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999482715764928	WITHOUT_CLASSIFICATION	5.172842350711166E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999924428801487	WITHOUT_CLASSIFICATION	7.55711985133303E-6	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999557815140161	WITHOUT_CLASSIFICATION	4.421848598397602E-5	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999691201621455	WITHOUT_CLASSIFICATION	3.0879837854556534E-5	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999965041562595	WITHOUT_CLASSIFICATION	3.4958437404370634E-6	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999857616419581	WITHOUT_CLASSIFICATION	1.4238358041885069E-5	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9990792092743078	WITHOUT_CLASSIFICATION	9.207907256923345E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9997726277215998	WITHOUT_CLASSIFICATION	2.2737227840020184E-4	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.999941391441439	WITHOUT_CLASSIFICATION	5.8608558560980344E-5	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999872055380052	WITHOUT_CLASSIFICATION	1.2794461994654353E-5	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999756812609477	WITHOUT_CLASSIFICATION	2.4318739052305377E-5	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9997846347421	WITHOUT_CLASSIFICATION	2.1536525790009478E-4	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999249484141032	WITHOUT_CLASSIFICATION	7.505158589680992E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999249484141032	WITHOUT_CLASSIFICATION	7.505158589680992E-5	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999708341489093	WITHOUT_CLASSIFICATION	2.9165851090604994E-5	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999913762558874	WITHOUT_CLASSIFICATION	8.623744112553357E-6	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999752070369585	WITHOUT_CLASSIFICATION	2.4792963041540627E-5	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999499327494276	WITHOUT_CLASSIFICATION	5.0067250572563885E-5	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999446329181486	WITHOUT_CLASSIFICATION	5.536708185142563E-5	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999756659917225	WITHOUT_CLASSIFICATION	2.4334008277456165E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999308802146007	WITHOUT_CLASSIFICATION	6.91197853992322E-5	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999867280929166	WITHOUT_CLASSIFICATION	1.3271907083305938E-5	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999688133134785	WITHOUT_CLASSIFICATION	3.118668652145586E-5	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999823638492156	WITHOUT_CLASSIFICATION	1.7636150784362466E-5	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999319681873686	WITHOUT_CLASSIFICATION	6.803181263142542E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999826311629331	WITHOUT_CLASSIFICATION	1.736883706695448E-5	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999956876061081	WITHOUT_CLASSIFICATION	4.312393891867926E-6	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999971985945739	WITHOUT_CLASSIFICATION	2.8014054260221427E-6	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999869506288198	WITHOUT_CLASSIFICATION	1.3049371180218245E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999903953795392	WITHOUT_CLASSIFICATION	9.60462046087747E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999900528424884	WITHOUT_CLASSIFICATION	9.94715751163664E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999900528424884	WITHOUT_CLASSIFICATION	9.94715751163664E-6	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999708754309321	WITHOUT_CLASSIFICATION	2.9124569067918226E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999990486098953	WITHOUT_CLASSIFICATION	9.513901045854192E-7	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.999990086621675	WITHOUT_CLASSIFICATION	9.913378325009627E-6	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.999991993686541	WITHOUT_CLASSIFICATION	8.006313459011991E-6	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999858261112796	WITHOUT_CLASSIFICATION	1.4173888720385068E-5	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999707472049391	WITHOUT_CLASSIFICATION	2.925279506098477E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999265428268275	WITHOUT_CLASSIFICATION	7.345717317251773E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999919211840351	WITHOUT_CLASSIFICATION	8.078815964814067E-6	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999734353996591	WITHOUT_CLASSIFICATION	2.656460034092529E-5	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999766991182315	WITHOUT_CLASSIFICATION	2.330088176848741E-5	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999940914503044	WITHOUT_CLASSIFICATION	5.908549695706825E-6	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999919211840351	WITHOUT_CLASSIFICATION	8.078815964814067E-6	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999829014324619	WITHOUT_CLASSIFICATION	1.7098567538046125E-5	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999611936447036	WITHOUT_CLASSIFICATION	3.880635529633918E-5	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999873179683166	WITHOUT_CLASSIFICATION	1.2682031683478827E-5	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999332371211849	WITHOUT_CLASSIFICATION	6.676287881511106E-5	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999954983669203	WITHOUT_CLASSIFICATION	4.501633079684084E-6	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999944972280218	WITHOUT_CLASSIFICATION	5.502771978118506E-6	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999527185001085	WITHOUT_CLASSIFICATION	4.7281499891517236E-5	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999902274632245	WITHOUT_CLASSIFICATION	9.772536775445516E-6	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999953002917992	WITHOUT_CLASSIFICATION	4.699708200745158E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999851604324993	WITHOUT_CLASSIFICATION	1.483956750075581E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.999957295712716	WITHOUT_CLASSIFICATION	4.270428728407755E-5	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999877304862804	WITHOUT_CLASSIFICATION	1.2269513719647829E-5	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999547113452766	WITHOUT_CLASSIFICATION	4.528865472340705E-5	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999771024786985	WITHOUT_CLASSIFICATION	2.2897521301521638E-5	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999455276292571	WITHOUT_CLASSIFICATION	5.447237074293822E-5	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999983361008786	WITHOUT_CLASSIFICATION	1.6638991213651906E-6	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999978691956906	WITHOUT_CLASSIFICATION	2.1308043093918882E-5	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9998792826444589	WITHOUT_CLASSIFICATION	1.2071735554102504E-4	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9998792826444589	WITHOUT_CLASSIFICATION	1.2071735554102504E-4	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999516455959278	WITHOUT_CLASSIFICATION	4.835440407225536E-5	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999779673623107	WITHOUT_CLASSIFICATION	2.203263768934621E-5	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999325761862309	WITHOUT_CLASSIFICATION	6.742381376911505E-5	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999425627803679	WITHOUT_CLASSIFICATION	5.743721963206883E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999801029327962	WITHOUT_CLASSIFICATION	1.9897067203825407E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999869322723682	WITHOUT_CLASSIFICATION	1.3067727631882709E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999962551899181	WITHOUT_CLASSIFICATION	3.7448100818801326E-6	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999930002566041	WITHOUT_CLASSIFICATION	6.999743395937407E-6	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999980723181933	WITHOUT_CLASSIFICATION	1.9276818066988198E-5	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999751229538201	WITHOUT_CLASSIFICATION	2.4877046179831158E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999950890072404	WITHOUT_CLASSIFICATION	4.910992759579431E-6	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999831811807969	WITHOUT_CLASSIFICATION	1.6818819203134622E-5	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999547155703729	WITHOUT_CLASSIFICATION	4.528442962719056E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999863527369929	WITHOUT_CLASSIFICATION	1.364726300725381E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999566019528873	WITHOUT_CLASSIFICATION	4.339804711275563E-5	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999907619544037	WITHOUT_CLASSIFICATION	9.23804559636432E-6	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999967806379468	WITHOUT_CLASSIFICATION	3.2193620531255967E-6	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999902859764348	WITHOUT_CLASSIFICATION	9.714023565212374E-6	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999606843863638	WITHOUT_CLASSIFICATION	3.931561363632904E-5	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999722643329338	WITHOUT_CLASSIFICATION	2.7735667066232477E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999969053580723	WITHOUT_CLASSIFICATION	3.094641927813048E-6	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999895797068088	WITHOUT_CLASSIFICATION	1.042029319118603E-5	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999981399856199	WITHOUT_CLASSIFICATION	1.860014380087219E-5	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999987175639719	WITHOUT_CLASSIFICATION	1.282436028127761E-6	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999854686870248	WITHOUT_CLASSIFICATION	1.453131297513002E-5	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999731173995291	WITHOUT_CLASSIFICATION	2.6882600470937175E-5	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999866813312029	WITHOUT_CLASSIFICATION	1.331866879697864E-5	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999838228809924	WITHOUT_CLASSIFICATION	1.6177119007522137E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999832157251124	WITHOUT_CLASSIFICATION	1.678427488752166E-5	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999657235163195	WITHOUT_CLASSIFICATION	3.427648368050939E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999632295844467	WITHOUT_CLASSIFICATION	3.6770415553220397E-5	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999568294181135	WITHOUT_CLASSIFICATION	4.317058188656353E-5	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.999989248058533	WITHOUT_CLASSIFICATION	1.0751941467017499E-5	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999866959881838	WITHOUT_CLASSIFICATION	1.3304011816166149E-5	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999979954362557	WITHOUT_CLASSIFICATION	2.004563744315663E-6	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999785396739301	WITHOUT_CLASSIFICATION	2.1460326069948733E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999686424631056	WITHOUT_CLASSIFICATION	3.1357536894438485E-5	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999953486936651	WITHOUT_CLASSIFICATION	4.651306334903131E-6	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999749526514835	WITHOUT_CLASSIFICATION	2.504734851658314E-5	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999673040851976	WITHOUT_CLASSIFICATION	3.269591480234311E-5	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.999974790216882	WITHOUT_CLASSIFICATION	2.520978311804316E-5	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999797137585942	WITHOUT_CLASSIFICATION	2.028624140589342E-5	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999385924085364	WITHOUT_CLASSIFICATION	6.140759146360435E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999927584655254	WITHOUT_CLASSIFICATION	7.24153447462317E-6	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999741785345156	WITHOUT_CLASSIFICATION	2.582146548437767E-5	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999802999864119	WITHOUT_CLASSIFICATION	1.97000135880468E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999632295844467	WITHOUT_CLASSIFICATION	3.6770415553220397E-5	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999454179177287	WITHOUT_CLASSIFICATION	5.458208227120536E-5	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999059867317106	WITHOUT_CLASSIFICATION	9.401326828937591E-5	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999808364510225	WITHOUT_CLASSIFICATION	1.9163548977433193E-5	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999916780559979	WITHOUT_CLASSIFICATION	8.321944002104536E-6	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999029516950653	WITHOUT_CLASSIFICATION	9.704830493471175E-5	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999828001426004	WITHOUT_CLASSIFICATION	1.7199857399536266E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999734353996591	WITHOUT_CLASSIFICATION	2.656460034092529E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999878658044289	WITHOUT_CLASSIFICATION	1.2134195571131958E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999566019528873	WITHOUT_CLASSIFICATION	4.339804711275563E-5	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999247866551328	WITHOUT_CLASSIFICATION	7.521334486712565E-5	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999340824521594	WITHOUT_CLASSIFICATION	6.591754784059598E-5	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999763586734918	WITHOUT_CLASSIFICATION	2.3641326508258798E-5	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999765936796606	WITHOUT_CLASSIFICATION	2.3406320339386523E-5	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999381720013406	WITHOUT_CLASSIFICATION	6.1827998659302E-5	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999747945290837	WITHOUT_CLASSIFICATION	2.52054709164078E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999712327636396	WITHOUT_CLASSIFICATION	2.876723636033136E-5	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999665947758658	WITHOUT_CLASSIFICATION	3.3405224134299516E-5	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999905218212597	WITHOUT_CLASSIFICATION	9.478178740339518E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999892980640962	WITHOUT_CLASSIFICATION	1.0701935903850609E-5	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999827687348826	WITHOUT_CLASSIFICATION	1.7231265117453424E-5	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999866490211962	WITHOUT_CLASSIFICATION	1.3350978803940073E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999683721210022	WITHOUT_CLASSIFICATION	3.162787899773828E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999683721210022	WITHOUT_CLASSIFICATION	3.162787899773828E-5	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999779356214114	WITHOUT_CLASSIFICATION	2.2064378588641672E-5	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999855572319364	WITHOUT_CLASSIFICATION	1.4442768063546645E-5	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999893805462101	WITHOUT_CLASSIFICATION	1.0619453789821776E-5	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999985629481025	WITHOUT_CLASSIFICATION	1.437051897405025E-6	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999968085576059	WITHOUT_CLASSIFICATION	3.1914423940013903E-6	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999751005652368	WITHOUT_CLASSIFICATION	2.4899434763156896E-5	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999963787921125	WITHOUT_CLASSIFICATION	3.621207887420656E-6	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999941479030938	WITHOUT_CLASSIFICATION	5.852096906114493E-6	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999785314346361	WITHOUT_CLASSIFICATION	2.1468565363820872E-5	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999471053081076	WITHOUT_CLASSIFICATION	5.289469189247068E-5	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999438400917066	WITHOUT_CLASSIFICATION	5.615990829341931E-5	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999753186431639	WITHOUT_CLASSIFICATION	2.4681356836113246E-5	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999666620669632	WITHOUT_CLASSIFICATION	3.3337933036814446E-5	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999993471293599	WITHOUT_CLASSIFICATION	6.528706400250614E-7	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999709397355396	WITHOUT_CLASSIFICATION	2.906026446037497E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999635949018331	WITHOUT_CLASSIFICATION	3.640509816695768E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999399684285759	WITHOUT_CLASSIFICATION	6.0031571424057033E-5	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999991030511332	WITHOUT_CLASSIFICATION	8.969488668088705E-7	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999887730043477	WITHOUT_CLASSIFICATION	1.1226995652129952E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999531161273305	WITHOUT_CLASSIFICATION	4.6883872669365507E-5	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999962184383833	WITHOUT_CLASSIFICATION	3.781561616845071E-6	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999889696426277	WITHOUT_CLASSIFICATION	1.1030357372289201E-5	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999964408084129	WITHOUT_CLASSIFICATION	3.559191587199495E-6	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999757660507517	WITHOUT_CLASSIFICATION	2.423394924844463E-5	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9999168977648135	WITHOUT_CLASSIFICATION	8.310223518648035E-5	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999619271390784	WITHOUT_CLASSIFICATION	3.807286092157951E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999531161273305	WITHOUT_CLASSIFICATION	4.6883872669365507E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999531161273305	WITHOUT_CLASSIFICATION	4.6883872669365507E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999620626631079	WITHOUT_CLASSIFICATION	3.7937336892073144E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999949204960122	WITHOUT_CLASSIFICATION	5.079503987794478E-6	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999634683712619	WITHOUT_CLASSIFICATION	3.653162873807597E-5	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999511716158777	WITHOUT_CLASSIFICATION	4.8828384122490686E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999329843296707	WITHOUT_CLASSIFICATION	6.701567032923444E-5	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999944877584442	WITHOUT_CLASSIFICATION	5.512241555734404E-6	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9985222249154168	WITHOUT_CLASSIFICATION	0.0014777750845831386	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999482961245042	WITHOUT_CLASSIFICATION	5.170387549576298E-5	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999784935118685	WITHOUT_CLASSIFICATION	2.1506488131480203E-5	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999310077778353	WITHOUT_CLASSIFICATION	6.899222216469747E-5	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999543672069655	WITHOUT_CLASSIFICATION	4.5632793034476615E-5	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999710486565294	WITHOUT_CLASSIFICATION	2.895134347057618E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999631978596657	WITHOUT_CLASSIFICATION	3.6802140334344796E-5	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997105112627704	WITHOUT_CLASSIFICATION	2.894887372295573E-4	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999982557534639	WITHOUT_CLASSIFICATION	1.7442465361037715E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999125890989523	WITHOUT_CLASSIFICATION	8.74109010477192E-5	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999265019070764	WITHOUT_CLASSIFICATION	7.349809292354303E-5	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999163003456042	WITHOUT_CLASSIFICATION	8.369965439584375E-5	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997733475437895	WITHOUT_CLASSIFICATION	2.266524562104376E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9974040567826378	WITHOUT_CLASSIFICATION	0.002595943217362262	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999888847294615	WITHOUT_CLASSIFICATION	1.1115270538509665E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.999998246581008	WITHOUT_CLASSIFICATION	1.7534189919297849E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999966309434245	WITHOUT_CLASSIFICATION	3.369056575489588E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998828999257175	WITHOUT_CLASSIFICATION	1.1710007428246985E-4	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999782580682698	WITHOUT_CLASSIFICATION	2.1741931730150733E-5	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999916438417586	WITHOUT_CLASSIFICATION	8.356158241373063E-6	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999790724234858	WITHOUT_CLASSIFICATION	2.0927576514158496E-5	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999389995593971	WITHOUT_CLASSIFICATION	6.1000440602917546E-5	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999547089182447	WITHOUT_CLASSIFICATION	4.529108175528847E-5	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999907759220354	WITHOUT_CLASSIFICATION	9.224077964615114E-6	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999332196607953	WITHOUT_CLASSIFICATION	6.678033920474553E-5	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999244315801383	WITHOUT_CLASSIFICATION	7.556841986166465E-5	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999669958062776	WITHOUT_CLASSIFICATION	3.30041937223837E-5	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999956094290131	WITHOUT_CLASSIFICATION	4.390570986901692E-5	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.99997854433264	WITHOUT_CLASSIFICATION	2.1455667360037736E-5	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999624481591133	WITHOUT_CLASSIFICATION	3.75518408867691E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999405571174317	WITHOUT_CLASSIFICATION	5.9442882568273175E-5	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999765517042195	WITHOUT_CLASSIFICATION	2.3448295780564724E-5	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999758688137456	WITHOUT_CLASSIFICATION	2.4131186254506308E-5	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999627834743527	WITHOUT_CLASSIFICATION	3.721652564726477E-5	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999912042227027	WITHOUT_CLASSIFICATION	8.795777297252876E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999748495030707	WITHOUT_CLASSIFICATION	2.5150496929243012E-5	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999543125507386	WITHOUT_CLASSIFICATION	4.5687449261433E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999748495030707	WITHOUT_CLASSIFICATION	2.5150496929243012E-5	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999959384012207	WITHOUT_CLASSIFICATION	4.061598779381804E-6	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999793516844881	WITHOUT_CLASSIFICATION	2.0648315511824078E-5	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999895532718878	WITHOUT_CLASSIFICATION	1.0446728112174729E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999930036432121	WITHOUT_CLASSIFICATION	6.996356787958225E-6	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999873668113967	WITHOUT_CLASSIFICATION	1.2633188603377147E-5	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999895755514564	WITHOUT_CLASSIFICATION	1.0424448543537326E-5	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999900715581372	WITHOUT_CLASSIFICATION	9.928441862891874E-6	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999532969577288	WITHOUT_CLASSIFICATION	4.6703042271215516E-5	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999801866045301	WITHOUT_CLASSIFICATION	1.9813395469930944E-5	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999939222524284	WITHOUT_CLASSIFICATION	6.07774757158791E-5	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999794100615889	WITHOUT_CLASSIFICATION	2.058993841106182E-5	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999995789405817	WITHOUT_CLASSIFICATION	4.2105941829967785E-6	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999981710968924	WITHOUT_CLASSIFICATION	1.828903107639239E-6	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999547058582624	WITHOUT_CLASSIFICATION	4.5294141737584164E-5	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999797122755274	WITHOUT_CLASSIFICATION	2.028772447256458E-5	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999918475568541	WITHOUT_CLASSIFICATION	8.152443145890503E-6	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999907897361652	WITHOUT_CLASSIFICATION	9.21026383481407E-6	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999595553480726	WITHOUT_CLASSIFICATION	4.044465192730922E-5	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999983387927405	WITHOUT_CLASSIFICATION	1.661207259494594E-5	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999853654237358	WITHOUT_CLASSIFICATION	1.4634576264131466E-5	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999929539927115	WITHOUT_CLASSIFICATION	7.046007288559967E-6	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999387185934985	WITHOUT_CLASSIFICATION	6.128140650158867E-5	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999751557397626	WITHOUT_CLASSIFICATION	2.484426023739334E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999558947282523	WITHOUT_CLASSIFICATION	4.4105271747730545E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999317351165017	WITHOUT_CLASSIFICATION	6.826488349830815E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999954122181796	WITHOUT_CLASSIFICATION	4.5877818204322715E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999456120156157	WITHOUT_CLASSIFICATION	5.4387984384220255E-5	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999541566821931	WITHOUT_CLASSIFICATION	4.584331780685913E-5	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999364008267229	WITHOUT_CLASSIFICATION	6.359917327721504E-5	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999630344019171	WITHOUT_CLASSIFICATION	3.6965598082805316E-5	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999143755363874	WITHOUT_CLASSIFICATION	8.562446361257657E-5	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999934729645049	WITHOUT_CLASSIFICATION	6.527035495040377E-6	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999959547051636	WITHOUT_CLASSIFICATION	4.045294836454019E-6	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.999941871496865	WITHOUT_CLASSIFICATION	5.8128503135058366E-5	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999167381094395	WITHOUT_CLASSIFICATION	8.326189056049754E-5	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.999950376496604	WITHOUT_CLASSIFICATION	4.9623503396034115E-5	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999339948767485	WITHOUT_CLASSIFICATION	6.600512325157098E-5	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9999179028746976	WITHOUT_CLASSIFICATION	8.209712530233857E-5	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999487104165485	WITHOUT_CLASSIFICATION	5.128958345142585E-5	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999339580646972	WITHOUT_CLASSIFICATION	6.604193530275799E-5	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999154199222586	WITHOUT_CLASSIFICATION	8.458007774137328E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999861069734659	WITHOUT_CLASSIFICATION	1.3893026534100133E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999954122181796	WITHOUT_CLASSIFICATION	4.5877818204322715E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999159324599016	WITHOUT_CLASSIFICATION	8.406754009834282E-5	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999773588305974	WITHOUT_CLASSIFICATION	2.2641169402615032E-5	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999266885891095	WITHOUT_CLASSIFICATION	7.33114108905237E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999711540311036	WITHOUT_CLASSIFICATION	2.884596889636687E-5	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999230549370424	WITHOUT_CLASSIFICATION	7.69450629575298E-5	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999650688032394	WITHOUT_CLASSIFICATION	3.493119676053388E-5	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999468220233219	WITHOUT_CLASSIFICATION	5.317797667819526E-5	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999216387863422	WITHOUT_CLASSIFICATION	7.83612136577799E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999315043336828	WITHOUT_CLASSIFICATION	6.849566631719441E-5	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999848511714621	WITHOUT_CLASSIFICATION	1.5148828538055535E-5	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9999551696689579	WITHOUT_CLASSIFICATION	4.4830331042019565E-5	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999859817829025	WITHOUT_CLASSIFICATION	1.401821709749779E-5	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999514878872106	WITHOUT_CLASSIFICATION	4.851211278944312E-5	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999095424929777	WITHOUT_CLASSIFICATION	9.045750702232815E-5	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999440542301669	WITHOUT_CLASSIFICATION	5.59457698332441E-5	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999912760161466	WITHOUT_CLASSIFICATION	8.723983853494941E-6	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999437612927017	WITHOUT_CLASSIFICATION	5.623870729835619E-5	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999467114773113	WITHOUT_CLASSIFICATION	5.328852268871801E-5	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999950280958523	WITHOUT_CLASSIFICATION	4.971904147733741E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999159324599016	WITHOUT_CLASSIFICATION	8.406754009834282E-5	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999503243421987	WITHOUT_CLASSIFICATION	4.967565780142591E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999395066316682	WITHOUT_CLASSIFICATION	6.049336833179051E-5	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999951291681551	WITHOUT_CLASSIFICATION	4.870831844902811E-5	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999616373944874	WITHOUT_CLASSIFICATION	3.8362605512506864E-5	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999908669203538	WITHOUT_CLASSIFICATION	9.133079646157017E-6	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9996018118876492	WITHOUT_CLASSIFICATION	3.9818811235084136E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9996018118876492	WITHOUT_CLASSIFICATION	3.9818811235084136E-4	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999894953980291	WITHOUT_CLASSIFICATION	1.0504601971057023E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9996018118876492	WITHOUT_CLASSIFICATION	3.9818811235084136E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9996018118876492	WITHOUT_CLASSIFICATION	3.9818811235084136E-4	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999587832796706	WITHOUT_CLASSIFICATION	4.1216720329454965E-5	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999727501982485	WITHOUT_CLASSIFICATION	2.7249801751547886E-5	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999400990346203	WITHOUT_CLASSIFICATION	5.990096537964814E-5	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999367442827387	WITHOUT_CLASSIFICATION	6.325571726121746E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999854858732453	WITHOUT_CLASSIFICATION	1.4514126754697604E-5	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999924747645267	WITHOUT_CLASSIFICATION	7.525235473241935E-6	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999219331031927	WITHOUT_CLASSIFICATION	7.806689680731203E-5	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999920853062261	WITHOUT_CLASSIFICATION	7.914693773931117E-6	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999161148395299	WITHOUT_CLASSIFICATION	8.38851604700579E-5	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999220889165071	WITHOUT_CLASSIFICATION	7.791108349289009E-5	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999488957558955	WITHOUT_CLASSIFICATION	5.110424410445268E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999451413428301	WITHOUT_CLASSIFICATION	5.485865716985964E-5	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999296226479379	WITHOUT_CLASSIFICATION	7.03773520621101E-5	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999382693221862	WITHOUT_CLASSIFICATION	6.173067781381898E-5	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999314344077942	WITHOUT_CLASSIFICATION	6.856559220580991E-5	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999734056524847	WITHOUT_CLASSIFICATION	2.659434751522736E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999965665847739	WITHOUT_CLASSIFICATION	3.4334152260932724E-5	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999531942923348	WITHOUT_CLASSIFICATION	4.680570766515843E-5	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999057126392774	WITHOUT_CLASSIFICATION	9.42873607226692E-5	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999382693221862	WITHOUT_CLASSIFICATION	6.173067781381898E-5	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999637827360066	WITHOUT_CLASSIFICATION	3.621726399340343E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.999957449262833	WITHOUT_CLASSIFICATION	4.2550737167022876E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999965665847739	WITHOUT_CLASSIFICATION	3.4334152260932724E-5	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999456120156157	WITHOUT_CLASSIFICATION	5.4387984384220255E-5	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9999139900976451	WITHOUT_CLASSIFICATION	8.600990235482967E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999852802284883	WITHOUT_CLASSIFICATION	1.4719771511756315E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999796458987386	WITHOUT_CLASSIFICATION	2.0354101261484778E-5	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999231994162141	WITHOUT_CLASSIFICATION	7.680058378584095E-5	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999698617906252	WITHOUT_CLASSIFICATION	3.0138209374850118E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.999882721948555	WITHOUT_CLASSIFICATION	1.172780514450121E-4	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999602367627638	WITHOUT_CLASSIFICATION	3.976323723610411E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998864893994659	WITHOUT_CLASSIFICATION	1.1351060053412411E-4	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999479719449752	WITHOUT_CLASSIFICATION	5.202805502472172E-5	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999667542421357	WITHOUT_CLASSIFICATION	3.324575786435271E-5	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999717782215088	WITHOUT_CLASSIFICATION	2.8221778491213605E-5	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999391428814212	WITHOUT_CLASSIFICATION	6.0857118578773425E-5	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999882360802997	WITHOUT_CLASSIFICATION	1.1763919700259645E-5	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999706406201362	WITHOUT_CLASSIFICATION	2.9359379863837964E-5	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.999985924000324	WITHOUT_CLASSIFICATION	1.4075999675953797E-5	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999513795095011	WITHOUT_CLASSIFICATION	4.862049049893052E-5	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999323380089337	WITHOUT_CLASSIFICATION	6.76619910662938E-5	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.99998357824144	WITHOUT_CLASSIFICATION	1.6421758559993835E-5	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999970261472504	WITHOUT_CLASSIFICATION	2.973852749599184E-5	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999327861234513	WITHOUT_CLASSIFICATION	6.721387654875655E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999101468029492	WITHOUT_CLASSIFICATION	8.985319705069565E-5	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.999969939593211	WITHOUT_CLASSIFICATION	3.0060406788882988E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998864893994659	WITHOUT_CLASSIFICATION	1.1351060053412411E-4	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999469383040448	WITHOUT_CLASSIFICATION	5.3061695955144465E-5	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9999299713301367	WITHOUT_CLASSIFICATION	7.002866986333204E-5	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999239334940727	WITHOUT_CLASSIFICATION	7.60665059273179E-5	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999086604460176	WITHOUT_CLASSIFICATION	9.133955398244007E-5	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999435504528493	WITHOUT_CLASSIFICATION	5.644954715082564E-5	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.999919064392098	WITHOUT_CLASSIFICATION	8.093560790200662E-5	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9999181792561177	WITHOUT_CLASSIFICATION	8.182074388228156E-5	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999060531728701	WITHOUT_CLASSIFICATION	9.39468271298725E-5	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999313195914523	WITHOUT_CLASSIFICATION	6.868040854770887E-5	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9999098595420292	WITHOUT_CLASSIFICATION	9.014045797085754E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999741448895176	WITHOUT_CLASSIFICATION	2.5855110482435618E-5	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999645093092261	WITHOUT_CLASSIFICATION	3.549069077391595E-5	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999753944630912	WITHOUT_CLASSIFICATION	2.4605536908820543E-5	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.999992094951536	WITHOUT_CLASSIFICATION	7.905048464006542E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999957145088669	WITHOUT_CLASSIFICATION	4.285491133109091E-5	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999998011103085	WITHOUT_CLASSIFICATION	1.988896915077409E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999607386533529	WITHOUT_CLASSIFICATION	3.926134664708152E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999741448895176	WITHOUT_CLASSIFICATION	2.5855110482435618E-5	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999965810365554	WITHOUT_CLASSIFICATION	3.418963444669328E-6	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999365638267872	WITHOUT_CLASSIFICATION	6.34361732127539E-5	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999586156339246	WITHOUT_CLASSIFICATION	4.138436607544755E-5	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999582633507462	WITHOUT_CLASSIFICATION	4.173664925371508E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999787088184692	WITHOUT_CLASSIFICATION	2.1291181530751954E-5	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999900273463379	WITHOUT_CLASSIFICATION	9.972653662053667E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999957145088669	WITHOUT_CLASSIFICATION	4.285491133109091E-5	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999800329526747	WITHOUT_CLASSIFICATION	1.996704732534565E-5	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99998244646471	WITHOUT_CLASSIFICATION	1.7553535290005917E-5	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999594723566435	WITHOUT_CLASSIFICATION	4.0527643356551274E-5	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980434336091466	WITHOUT_CLASSIFICATION	0.00195656639085336	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987652323797921	WITHOUT_CLASSIFICATION	0.0012347676202079136	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988453771318245	WITHOUT_CLASSIFICATION	0.0011546228681754366	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999977319916343	WITHOUT_CLASSIFICATION	2.2680083656970592E-5	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999977319916343	WITHOUT_CLASSIFICATION	2.2680083656970592E-5	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999352111126597	WITHOUT_CLASSIFICATION	6.478888734021226E-5	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999766006747833	WITHOUT_CLASSIFICATION	2.3399325216693095E-5	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999278312523651	WITHOUT_CLASSIFICATION	7.216874763490032E-5	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999359389049246	WITHOUT_CLASSIFICATION	6.40610950754597E-5	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9998675225992772	WITHOUT_CLASSIFICATION	1.3247740072271086E-4	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999556314962429	WITHOUT_CLASSIFICATION	4.436850375719374E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580819418408	WITHOUT_CLASSIFICATION	4.191805815925994E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999281118769416	WITHOUT_CLASSIFICATION	7.188812305839373E-5	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999917492095897	WITHOUT_CLASSIFICATION	8.25079041029318E-6	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999549107662263	WITHOUT_CLASSIFICATION	4.508923377365013E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999556314962429	WITHOUT_CLASSIFICATION	4.436850375719374E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580819418408	WITHOUT_CLASSIFICATION	4.191805815925994E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999281118769416	WITHOUT_CLASSIFICATION	7.188812305839373E-5	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9978958054494363	WITHOUT_CLASSIFICATION	0.0021041945505635676	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9999335999849138	WITHOUT_CLASSIFICATION	6.64000150861548E-5	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999912666892328	WITHOUT_CLASSIFICATION	8.733310767242703E-6	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999854182750778	WITHOUT_CLASSIFICATION	1.4581724922228116E-5	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.999971839602901	WITHOUT_CLASSIFICATION	2.8160397098963204E-5	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999878922703399	WITHOUT_CLASSIFICATION	1.2107729660208505E-5	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999277188264633	WITHOUT_CLASSIFICATION	7.228117353675435E-5	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999018771524372	WITHOUT_CLASSIFICATION	9.812284756282012E-5	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9970874828958	WITHOUT_CLASSIFICATION	0.002912517104200139	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.99991977315508	WITHOUT_CLASSIFICATION	8.022684492001954E-5	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999616141929835	WITHOUT_CLASSIFICATION	3.838580701657084E-5	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999797082315797	WITHOUT_CLASSIFICATION	2.0291768420241163E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.999950078306158	WITHOUT_CLASSIFICATION	4.992169384197366E-5	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999564243646921	WITHOUT_CLASSIFICATION	4.3575635307895533E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999673050707857	WITHOUT_CLASSIFICATION	3.269492921430309E-5	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999214542299062	WITHOUT_CLASSIFICATION	7.854577009379514E-5	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999483596014532	WITHOUT_CLASSIFICATION	5.164039854666056E-5	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999429660098621	WITHOUT_CLASSIFICATION	5.703399013796559E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999910644017732	WITHOUT_CLASSIFICATION	8.935598226855055E-6	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999806726538512	WITHOUT_CLASSIFICATION	1.932734614887109E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999901448982254	WITHOUT_CLASSIFICATION	9.855101774576447E-6	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999523606646459	WITHOUT_CLASSIFICATION	4.7639335354003345E-5	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999881685072648	WITHOUT_CLASSIFICATION	1.1831492735213009E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999959511856058	WITHOUT_CLASSIFICATION	4.048814394269666E-6	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998160240604278	WITHOUT_CLASSIFICATION	1.839759395721728E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999491093482962	WITHOUT_CLASSIFICATION	5.0890651703933896E-5	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999535708639131	WITHOUT_CLASSIFICATION	4.6429136086809883E-5	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999929002798914	WITHOUT_CLASSIFICATION	7.099720108667682E-6	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999556670495943	WITHOUT_CLASSIFICATION	4.4332950405681335E-5	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999394313718888	WITHOUT_CLASSIFICATION	6.0568628111230196E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999417378786293	WITHOUT_CLASSIFICATION	5.826212137064053E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999417378786293	WITHOUT_CLASSIFICATION	5.826212137064053E-5	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999850179355172	WITHOUT_CLASSIFICATION	1.4982064482833058E-5	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999958244605364	WITHOUT_CLASSIFICATION	4.175539463582203E-6	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999647668689732	WITHOUT_CLASSIFICATION	3.523313102678695E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999826311629331	WITHOUT_CLASSIFICATION	1.736883706695448E-5	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999062987721339	WITHOUT_CLASSIFICATION	9.370122786620514E-5	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999876931892394	WITHOUT_CLASSIFICATION	1.2306810760531726E-5	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9971080439913849	WITHOUT_CLASSIFICATION	0.002891956008615074	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999710793293051	WITHOUT_CLASSIFICATION	2.8920670694871983E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999159915121133	WITHOUT_CLASSIFICATION	8.400848788680474E-5	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669094642093	WITHOUT_CLASSIFICATION	3.3090535790777844E-5	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754916272361	WITHOUT_CLASSIFICATION	2.4508372763826093E-5	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999595147931509	WITHOUT_CLASSIFICATION	4.048520684918109E-5	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999644738873493	WITHOUT_CLASSIFICATION	3.552611265070733E-5	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999644519833731	WITHOUT_CLASSIFICATION	3.55480166268627E-5	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999574072370577	WITHOUT_CLASSIFICATION	4.259276294222721E-5	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966550073165	WITHOUT_CLASSIFICATION	3.3449926834954675E-5	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999726388466118	WITHOUT_CLASSIFICATION	2.7361153388220536E-5	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999647488369915	WITHOUT_CLASSIFICATION	3.525116300850732E-5	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999533936199929	WITHOUT_CLASSIFICATION	4.660638000712782E-5	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999631204395587	WITHOUT_CLASSIFICATION	3.687956044128593E-5	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999697913134894	WITHOUT_CLASSIFICATION	3.020868651065752E-5	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999712358952081	WITHOUT_CLASSIFICATION	2.8764104791881326E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998915949698463	WITHOUT_CLASSIFICATION	1.0840503015370369E-4	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999958325573088	WITHOUT_CLASSIFICATION	4.167442691156323E-6	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999939261177334	WITHOUT_CLASSIFICATION	6.0738822666948E-6	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9997172790446361	WITHOUT_CLASSIFICATION	2.8272095536387674E-4	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999920638729921	WITHOUT_CLASSIFICATION	7.936127007852123E-6	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999801189190402	WITHOUT_CLASSIFICATION	1.9881080959943676E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998915949698463	WITHOUT_CLASSIFICATION	1.0840503015370369E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998915949698463	WITHOUT_CLASSIFICATION	1.0840503015370369E-4	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999925953179623	WITHOUT_CLASSIFICATION	7.404682037754864E-6	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999456080553465	WITHOUT_CLASSIFICATION	5.4391944653428955E-5	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999966124541032	WITHOUT_CLASSIFICATION	3.3875458968206904E-6	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999986644938287	WITHOUT_CLASSIFICATION	1.3355061712975206E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9997726277215998	WITHOUT_CLASSIFICATION	2.2737227840020184E-4	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999910644017732	WITHOUT_CLASSIFICATION	8.935598226855055E-6	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999439880840623	WITHOUT_CLASSIFICATION	5.601191593759396E-5	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999424602973087	WITHOUT_CLASSIFICATION	5.753970269137911E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.999973826551155	WITHOUT_CLASSIFICATION	2.6173448845125267E-5	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999388794164654	WITHOUT_CLASSIFICATION	6.11205835345662E-5	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999994227169144	WITHOUT_CLASSIFICATION	5.772830856059649E-6	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999566559843971	WITHOUT_CLASSIFICATION	4.3344015602950705E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999596648246777	WITHOUT_CLASSIFICATION	4.033517532238072E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999596648246777	WITHOUT_CLASSIFICATION	4.033517532238072E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999600038076664	WITHOUT_CLASSIFICATION	3.999619233364696E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999600038076664	WITHOUT_CLASSIFICATION	3.999619233364696E-5	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999256308671706	WITHOUT_CLASSIFICATION	7.436913282943691E-5	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999491686679158	WITHOUT_CLASSIFICATION	5.0831332084080024E-5	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999827368899453	WITHOUT_CLASSIFICATION	1.7263110054699312E-5	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999299433195097	WITHOUT_CLASSIFICATION	7.005668049040492E-5	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999903962414598	WITHOUT_CLASSIFICATION	9.603758540166967E-6	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999775440574946	WITHOUT_CLASSIFICATION	2.245594250528484E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999451463430082	WITHOUT_CLASSIFICATION	5.485365699171983E-5	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999538458996589	WITHOUT_CLASSIFICATION	4.615410034108779E-5	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999492065217717	WITHOUT_CLASSIFICATION	5.0793478228415E-5	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999509764805989	WITHOUT_CLASSIFICATION	4.9023519401005375E-5	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999680346790015	WITHOUT_CLASSIFICATION	3.196532099853353E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999214112602773	WITHOUT_CLASSIFICATION	7.85887397227006E-5	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999666403960001	WITHOUT_CLASSIFICATION	3.335960399974032E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999492883997011	WITHOUT_CLASSIFICATION	5.0711600298868254E-5	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999445188372201	WITHOUT_CLASSIFICATION	5.548116277988875E-5	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999164479461026	WITHOUT_CLASSIFICATION	8.35520538974434E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999437876529397	WITHOUT_CLASSIFICATION	5.6212347060337835E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999437876529397	WITHOUT_CLASSIFICATION	5.6212347060337835E-5	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999683620519711	WITHOUT_CLASSIFICATION	3.163794802881597E-5	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999018300432844	WITHOUT_CLASSIFICATION	9.816995671565322E-5	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999893236395423	WITHOUT_CLASSIFICATION	1.067636045767031E-5	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999461177868514	WITHOUT_CLASSIFICATION	5.388221314848031E-5	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999383809956249	WITHOUT_CLASSIFICATION	6.161900437514285E-5	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999522520229038	WITHOUT_CLASSIFICATION	4.774797709621683E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988412034816421	WITHOUT_CLASSIFICATION	0.0011587965183579262	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999565089807313	WITHOUT_CLASSIFICATION	4.349101926880615E-5	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999996455090885	WITHOUT_CLASSIFICATION	3.5449091151014304E-6	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999923025391765	WITHOUT_CLASSIFICATION	7.697460823501245E-6	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999846625023114	WITHOUT_CLASSIFICATION	1.533749768862914E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999236495040058	WITHOUT_CLASSIFICATION	7.635049599413048E-5	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999951222699612	WITHOUT_CLASSIFICATION	4.8777300387711445E-6	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998586420692023	WITHOUT_CLASSIFICATION	1.4135793079781173E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999140045312436	WITHOUT_CLASSIFICATION	8.599546875634542E-5	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999834157562315	WITHOUT_CLASSIFICATION	1.6584243768453244E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.99995469118647	WITHOUT_CLASSIFICATION	4.530881353018918E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999957486839414	WITHOUT_CLASSIFICATION	4.2513160586060065E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999768846494003	WITHOUT_CLASSIFICATION	2.3115350599729338E-5	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999997696586815	WITHOUT_CLASSIFICATION	2.3034131844214275E-7	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999948446532184	WITHOUT_CLASSIFICATION	5.155346781533218E-6	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999970825012952	WITHOUT_CLASSIFICATION	2.917498704893732E-6	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.999992168521551	WITHOUT_CLASSIFICATION	7.831478448950655E-6	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999583446314835	WITHOUT_CLASSIFICATION	4.165536851645829E-5	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999980905541972	WITHOUT_CLASSIFICATION	1.9094458027904508E-5	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999623420087023	WITHOUT_CLASSIFICATION	3.7657991297778125E-5	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999469122937397	WITHOUT_CLASSIFICATION	5.308770626032903E-5	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999971579312469	WITHOUT_CLASSIFICATION	2.84206875301512E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999600792612278	WITHOUT_CLASSIFICATION	3.9920738772260425E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999998127657274	WITHOUT_CLASSIFICATION	1.8723427266083705E-7	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.999948537269465	WITHOUT_CLASSIFICATION	5.146273053502126E-5	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999361713607321	WITHOUT_CLASSIFICATION	6.382863926796269E-5	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9998815109241219	WITHOUT_CLASSIFICATION	1.1848907587805091E-4	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999280782647841	WITHOUT_CLASSIFICATION	7.19217352157929E-5	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999395974838226	WITHOUT_CLASSIFICATION	6.040251617749203E-5	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999977835106414	WITHOUT_CLASSIFICATION	2.216489358594008E-6	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999436716583805	WITHOUT_CLASSIFICATION	5.63283416194271E-5	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999559357835754	WITHOUT_CLASSIFICATION	4.4064216424597336E-5	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999371466905574	WITHOUT_CLASSIFICATION	6.285330944246295E-5	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999991850538947	WITHOUT_CLASSIFICATION	8.149461052624464E-7	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999936418283015	WITHOUT_CLASSIFICATION	6.358171698497528E-5	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999800210959313	WITHOUT_CLASSIFICATION	1.9978904068610604E-5	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999968533751106	WITHOUT_CLASSIFICATION	3.1466248895193647E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999824411267221	WITHOUT_CLASSIFICATION	1.755887327797116E-5	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999216946474885	WITHOUT_CLASSIFICATION	7.830535251150567E-5	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999283836512555	WITHOUT_CLASSIFICATION	7.161634874449583E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999785121995071	WITHOUT_CLASSIFICATION	2.1487800492975904E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999597299019402	WITHOUT_CLASSIFICATION	4.0270098059892E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999497967325828	WITHOUT_CLASSIFICATION	5.020326741718193E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999839888815557	WITHOUT_CLASSIFICATION	1.601111844433547E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999507308946072	WITHOUT_CLASSIFICATION	4.926910539280944E-5	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999596865545691	WITHOUT_CLASSIFICATION	4.031344543087925E-5	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999704842931414	WITHOUT_CLASSIFICATION	2.9515706858663258E-5	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998902032384708	WITHOUT_CLASSIFICATION	1.0979676152925631E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999453807205793	WITHOUT_CLASSIFICATION	5.461927942065918E-5	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.999933154575258	WITHOUT_CLASSIFICATION	6.684542474199518E-5	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999544237128521	WITHOUT_CLASSIFICATION	4.557628714780949E-5	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999799223593819	WITHOUT_CLASSIFICATION	2.007764061810077E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998839169738463	WITHOUT_CLASSIFICATION	1.1608302615365303E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999869417775751	WITHOUT_CLASSIFICATION	1.3058222425018373E-5	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999929023053316	WITHOUT_CLASSIFICATION	7.097694668392486E-6	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999980256323128	WITHOUT_CLASSIFICATION	1.9743676872109776E-6	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999920083971893	WITHOUT_CLASSIFICATION	7.991602810840843E-6	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999893424647464	WITHOUT_CLASSIFICATION	1.0657535253717306E-5	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999736134226007	WITHOUT_CLASSIFICATION	2.6386577399357023E-5	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999922615907779	WITHOUT_CLASSIFICATION	7.738409222027766E-6	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999700531497352	WITHOUT_CLASSIFICATION	2.994685026485839E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999357284609697	WITHOUT_CLASSIFICATION	6.427153903032051E-5	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999340351092252	WITHOUT_CLASSIFICATION	6.59648907749259E-5	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998991285339021	WITHOUT_CLASSIFICATION	1.0087146609787724E-4	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999761110022792	WITHOUT_CLASSIFICATION	2.388899772076738E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999863836337008	WITHOUT_CLASSIFICATION	1.3616366299164804E-5	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999154109429039	WITHOUT_CLASSIFICATION	8.458905709607574E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999754325203322	WITHOUT_CLASSIFICATION	2.4567479667930633E-5	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999924645360398	WITHOUT_CLASSIFICATION	7.535463960182897E-6	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999245053594239	WITHOUT_CLASSIFICATION	7.549464057610409E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999919528137751	WITHOUT_CLASSIFICATION	8.047186225029417E-6	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999847165275156	WITHOUT_CLASSIFICATION	1.528347248440446E-5	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999816769196664	WITHOUT_CLASSIFICATION	1.8323080333548665E-5	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999166100883491	WITHOUT_CLASSIFICATION	8.338991165088233E-5	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999440751146041	WITHOUT_CLASSIFICATION	5.592488539576227E-5	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999655714349496	WITHOUT_CLASSIFICATION	3.442856505047016E-5	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9998359509156287	WITHOUT_CLASSIFICATION	1.6404908437118394E-4	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999411435797005	WITHOUT_CLASSIFICATION	5.885642029937345E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9997947418877486	WITHOUT_CLASSIFICATION	2.0525811225140727E-4	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9998576992675737	WITHOUT_CLASSIFICATION	1.4230073242616027E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999274244904979	WITHOUT_CLASSIFICATION	7.257550950218442E-5	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999497843304771	WITHOUT_CLASSIFICATION	5.021566952289883E-5	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999634871309757	WITHOUT_CLASSIFICATION	3.6512869024295496E-5	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.999965911551596	WITHOUT_CLASSIFICATION	3.408844840396123E-5	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999292219727304	WITHOUT_CLASSIFICATION	7.077802726963061E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999924231622336	WITHOUT_CLASSIFICATION	7.5768377663877E-6	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999214083405346	WITHOUT_CLASSIFICATION	7.85916594654405E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999119777613388	WITHOUT_CLASSIFICATION	8.802223866118345E-5	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999497690696414	WITHOUT_CLASSIFICATION	5.023093035855783E-5	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999631582741475	WITHOUT_CLASSIFICATION	3.684172585254678E-5	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999902791439051	WITHOUT_CLASSIFICATION	9.720856094840138E-6	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999704857944874	WITHOUT_CLASSIFICATION	2.951420551251557E-5	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999353039367733	WITHOUT_CLASSIFICATION	6.469606322657959E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999449411305047	WITHOUT_CLASSIFICATION	5.5058869495358546E-5	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999528361574209	WITHOUT_CLASSIFICATION	4.716384257898171E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999959747874583	WITHOUT_CLASSIFICATION	4.025212541699691E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999959747874583	WITHOUT_CLASSIFICATION	4.025212541699691E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999351613535887	WITHOUT_CLASSIFICATION	6.48386464112457E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999511965684249	WITHOUT_CLASSIFICATION	4.880343157520944E-5	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999620806229546	WITHOUT_CLASSIFICATION	3.791937704545988E-5	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999828808855625	WITHOUT_CLASSIFICATION	1.7119114437524273E-5	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999849716839679	WITHOUT_CLASSIFICATION	1.5028316032052108E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.99998459118304	WITHOUT_CLASSIFICATION	1.5408816960065667E-5	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999632630343435	WITHOUT_CLASSIFICATION	3.6736965656608396E-5	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999447829587025	WITHOUT_CLASSIFICATION	5.5217041297396983E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999765721301537	WITHOUT_CLASSIFICATION	2.3427869846278002E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999914706649439	WITHOUT_CLASSIFICATION	8.529335056242741E-6	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999978335868962	WITHOUT_CLASSIFICATION	2.1664131038708675E-6	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999680271657564	WITHOUT_CLASSIFICATION	3.1972834243511584E-5	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999790679922916	WITHOUT_CLASSIFICATION	2.0932007708388106E-5	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999688378369991	WITHOUT_CLASSIFICATION	3.1162163000822696E-5	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999631584127554	WITHOUT_CLASSIFICATION	3.684158724450857E-5	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999271293658798	WITHOUT_CLASSIFICATION	7.287063412024924E-5	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999271293658798	WITHOUT_CLASSIFICATION	7.287063412024924E-5	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999940924835873	WITHOUT_CLASSIFICATION	5.907516412708764E-6	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999791597370251	WITHOUT_CLASSIFICATION	2.0840262974876965E-5	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999330485941599	WITHOUT_CLASSIFICATION	6.695140584013147E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999783860354894	WITHOUT_CLASSIFICATION	2.1613964510554755E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999214112602773	WITHOUT_CLASSIFICATION	7.85887397227006E-5	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999167102432716	WITHOUT_CLASSIFICATION	8.328975672850307E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999325317651204	WITHOUT_CLASSIFICATION	6.746823487957813E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999630422403166	WITHOUT_CLASSIFICATION	3.6957759683440495E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999630422403166	WITHOUT_CLASSIFICATION	3.6957759683440495E-5	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999744583636633	WITHOUT_CLASSIFICATION	2.5541636336717597E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999618538723256	WITHOUT_CLASSIFICATION	3.814612767438525E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999873131860193	WITHOUT_CLASSIFICATION	1.2686813980747958E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999337871864	WITHOUT_CLASSIFICATION	6.621281361817733E-8	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999987973741867	WITHOUT_CLASSIFICATION	1.2026258132475768E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999740985537057	WITHOUT_CLASSIFICATION	2.5901446294302965E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999779251050752	WITHOUT_CLASSIFICATION	2.207489492480281E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999955650799065	WITHOUT_CLASSIFICATION	4.434920093492177E-5	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999482119164975	WITHOUT_CLASSIFICATION	5.1788083502424694E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999802153637483	WITHOUT_CLASSIFICATION	1.9784636251798056E-5	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999499585024691	WITHOUT_CLASSIFICATION	5.00414975308602E-5	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999054952832038	WITHOUT_CLASSIFICATION	9.450471679611526E-5	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999084774119302	WITHOUT_CLASSIFICATION	9.152258806983864E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999634683712619	WITHOUT_CLASSIFICATION	3.653162873807597E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999732797621662	WITHOUT_CLASSIFICATION	2.6720237833878542E-5	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999500172959097	WITHOUT_CLASSIFICATION	4.998270409031034E-5	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999654525724575	WITHOUT_CLASSIFICATION	3.4547427542368824E-5	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.999932781508383	WITHOUT_CLASSIFICATION	6.721849161696944E-5	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9988638433301539	WITHOUT_CLASSIFICATION	0.0011361566698460457	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999266066471101	WITHOUT_CLASSIFICATION	7.33933528899197E-5	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999220113181848	WITHOUT_CLASSIFICATION	7.798868181518215E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999981499722474	WITHOUT_CLASSIFICATION	1.8500277526095857E-5	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999508553457312	WITHOUT_CLASSIFICATION	4.914465426868847E-5	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999185493654942	WITHOUT_CLASSIFICATION	8.145063450582409E-5	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9998338544619094	WITHOUT_CLASSIFICATION	1.6614553809060297E-4	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999987103532452	WITHOUT_CLASSIFICATION	1.2896467548519486E-6	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999955091793867	WITHOUT_CLASSIFICATION	4.4908206132997975E-6	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999177949156989	WITHOUT_CLASSIFICATION	8.220508430113167E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999900528424884	WITHOUT_CLASSIFICATION	9.94715751163664E-6	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999598421694218	WITHOUT_CLASSIFICATION	4.015783057828082E-5	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.999917726479617	WITHOUT_CLASSIFICATION	8.227352038306768E-5	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999563196325535	WITHOUT_CLASSIFICATION	4.36803674464694E-5	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999810887073661	WITHOUT_CLASSIFICATION	1.891129263390078E-5	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999001048327081	WITHOUT_CLASSIFICATION	9.989516729193621E-5	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999299585378494	WITHOUT_CLASSIFICATION	7.004146215068003E-5	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9999219824546344	WITHOUT_CLASSIFICATION	7.801754536560533E-5	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999282487286105	WITHOUT_CLASSIFICATION	7.175127138954757E-5	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999171625075269	WITHOUT_CLASSIFICATION	8.28374924731242E-5	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999623254990406	WITHOUT_CLASSIFICATION	3.767450095934179E-5	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999893519770165	WITHOUT_CLASSIFICATION	1.0648022983373817E-5	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999914227082394	WITHOUT_CLASSIFICATION	8.577291760523459E-6	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999071985404316	WITHOUT_CLASSIFICATION	9.280145956846135E-5	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999826170484097	WITHOUT_CLASSIFICATION	1.7382951590312584E-5	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999998275827411	WITHOUT_CLASSIFICATION	1.7241725886448642E-7	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999590763866029	WITHOUT_CLASSIFICATION	4.092361339699341E-5	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999171625075269	WITHOUT_CLASSIFICATION	8.28374924731242E-5	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999623254990406	WITHOUT_CLASSIFICATION	3.767450095934179E-5	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999602165665346	WITHOUT_CLASSIFICATION	3.9783433465552326E-5	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999274201341888	WITHOUT_CLASSIFICATION	7.257986581121256E-5	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999738065775364	WITHOUT_CLASSIFICATION	2.6193422463475892E-5	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999604942113351	WITHOUT_CLASSIFICATION	3.950578866483085E-5	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999895395753051	WITHOUT_CLASSIFICATION	1.0460424694883688E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999931925148781	WITHOUT_CLASSIFICATION	6.807485121949993E-6	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999240461112721	WITHOUT_CLASSIFICATION	7.595388872794544E-5	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999524364298411	WITHOUT_CLASSIFICATION	4.7563570158887366E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.999866332883605	WITHOUT_CLASSIFICATION	1.3366711639498614E-4	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999867700633317	WITHOUT_CLASSIFICATION	1.3229936668222104E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.999866332883605	WITHOUT_CLASSIFICATION	1.3366711639498614E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999888940405018	WITHOUT_CLASSIFICATION	1.110595949815701E-5	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999338272818118	WITHOUT_CLASSIFICATION	6.617271818822527E-5	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999886596150844	WITHOUT_CLASSIFICATION	1.1340384915502004E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999263855216887	WITHOUT_CLASSIFICATION	7.36144783112843E-5	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999701395328058	WITHOUT_CLASSIFICATION	2.986046719428876E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999696116538782	WITHOUT_CLASSIFICATION	3.0388346121777267E-5	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999760993743145	WITHOUT_CLASSIFICATION	2.390062568555419E-5	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999563447285357	WITHOUT_CLASSIFICATION	4.3655271464247445E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999085725399286	WITHOUT_CLASSIFICATION	9.142746007137899E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999318532933692	WITHOUT_CLASSIFICATION	6.814670663077032E-5	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999319569102553	WITHOUT_CLASSIFICATION	6.804308974474279E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.999924654842418	WITHOUT_CLASSIFICATION	7.534515758205311E-5	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999637660299128	WITHOUT_CLASSIFICATION	3.623397008727358E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9970910682885754	WITHOUT_CLASSIFICATION	0.0029089317114246085	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9979485705921725	WITHOUT_CLASSIFICATION	0.0020514294078275825	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9999400128377269	WITHOUT_CLASSIFICATION	5.998716227305888E-5	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999620329459631	WITHOUT_CLASSIFICATION	3.7967054036982846E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9970934268347748	WITHOUT_CLASSIFICATION	0.002906573165225187	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9999249162229208	WITHOUT_CLASSIFICATION	7.508377707923492E-5	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999985817820516	WITHOUT_CLASSIFICATION	1.4182179484106228E-5	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999806995509506	WITHOUT_CLASSIFICATION	1.9300449049350897E-5	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999734286324796	WITHOUT_CLASSIFICATION	2.6571367520376505E-5	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999620805567908	WITHOUT_CLASSIFICATION	3.7919443209297666E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999513965720538	WITHOUT_CLASSIFICATION	4.860342794630922E-5	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9970954138454923	WITHOUT_CLASSIFICATION	0.0029045861545077692	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999682426396734	WITHOUT_CLASSIFICATION	3.175736032651324E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999347597621459	WITHOUT_CLASSIFICATION	6.524023785407322E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999641239764384	WITHOUT_CLASSIFICATION	3.587602356153712E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999420775800641	WITHOUT_CLASSIFICATION	5.792241993590394E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999461321820473	WITHOUT_CLASSIFICATION	5.386781795259678E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.999918353092745	WITHOUT_CLASSIFICATION	8.164690725494867E-5	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999857932051593	WITHOUT_CLASSIFICATION	1.4206794840532973E-5	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9987095446705301	WITHOUT_CLASSIFICATION	0.001290455329469926	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999455406272273	WITHOUT_CLASSIFICATION	5.4459372772640055E-5	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999603549613566	WITHOUT_CLASSIFICATION	3.964503864335294E-5	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999218382756623	WITHOUT_CLASSIFICATION	7.816172433780587E-5	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999451106453445	WITHOUT_CLASSIFICATION	5.488935465536882E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.999924654842418	WITHOUT_CLASSIFICATION	7.534515758205311E-5	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999142293426291	WITHOUT_CLASSIFICATION	8.577065737095972E-5	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.999946024975547	WITHOUT_CLASSIFICATION	5.39750244531007E-5	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9995848240804011	WITHOUT_CLASSIFICATION	4.151759195989226E-4	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999375459805679	WITHOUT_CLASSIFICATION	6.245401943201572E-5	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999801781659031	WITHOUT_CLASSIFICATION	1.9821834096842392E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999780510828198	WITHOUT_CLASSIFICATION	2.194891718017909E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999085725399286	WITHOUT_CLASSIFICATION	9.142746007137899E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999085725399286	WITHOUT_CLASSIFICATION	9.142746007137899E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999690230061721	WITHOUT_CLASSIFICATION	3.097699382792812E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999667077226211	WITHOUT_CLASSIFICATION	3.329227737887558E-5	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.999917585195685	WITHOUT_CLASSIFICATION	8.241480431496968E-5	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999717096679731	WITHOUT_CLASSIFICATION	2.8290332026893354E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999440299011907	WITHOUT_CLASSIFICATION	5.597009880940778E-5	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999587001072193	WITHOUT_CLASSIFICATION	4.129989278069717E-5	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999617859866416	WITHOUT_CLASSIFICATION	3.821401335833164E-5	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999848078703508	WITHOUT_CLASSIFICATION	1.5192129649123305E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999774813365166	WITHOUT_CLASSIFICATION	2.251866348335204E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999825462711347	WITHOUT_CLASSIFICATION	1.745372886532111E-5	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999837486492551	WITHOUT_CLASSIFICATION	1.625135074490972E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999163320021014	WITHOUT_CLASSIFICATION	8.366799789857787E-5	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999181069608807	WITHOUT_CLASSIFICATION	8.189303911935302E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999825462711347	WITHOUT_CLASSIFICATION	1.745372886532111E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999647287446236	WITHOUT_CLASSIFICATION	3.52712553763058E-5	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999726752013233	WITHOUT_CLASSIFICATION	2.732479867668053E-5	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999433805964929	WITHOUT_CLASSIFICATION	5.661940350698304E-5	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9874107352322927	WITHOUT_CLASSIFICATION	0.012589264767707409	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999163320021014	WITHOUT_CLASSIFICATION	8.366799789857787E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999694699299392	WITHOUT_CLASSIFICATION	3.053007006084068E-5	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999967460688701	WITHOUT_CLASSIFICATION	3.253931129920962E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999975865821252	WITHOUT_CLASSIFICATION	2.413417874857771E-6	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999957490164366	WITHOUT_CLASSIFICATION	4.2509835633037225E-6	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999155624022871	WITHOUT_CLASSIFICATION	8.443759771293072E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999172522852993	WITHOUT_CLASSIFICATION	8.274771470071492E-5	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999528267566204	WITHOUT_CLASSIFICATION	4.717324337957418E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999573570174881	WITHOUT_CLASSIFICATION	4.264298251186361E-5	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999501486171712	WITHOUT_CLASSIFICATION	4.985138282875721E-5	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999855086980663	WITHOUT_CLASSIFICATION	1.449130193373009E-5	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999328559254061	WITHOUT_CLASSIFICATION	6.714407459389559E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999825462711347	WITHOUT_CLASSIFICATION	1.745372886532111E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999694699299392	WITHOUT_CLASSIFICATION	3.053007006084068E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999975865821252	WITHOUT_CLASSIFICATION	2.413417874857771E-6	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.99995234297167	WITHOUT_CLASSIFICATION	4.76570283298685E-5	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999910027728973	WITHOUT_CLASSIFICATION	8.997227102718076E-6	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999505348490317	WITHOUT_CLASSIFICATION	4.946515096819191E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999163320021014	WITHOUT_CLASSIFICATION	8.366799789857787E-5	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999814933284983	WITHOUT_CLASSIFICATION	1.850667150177194E-5	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999253964911654	WITHOUT_CLASSIFICATION	7.46035088346036E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999196877717477	WITHOUT_CLASSIFICATION	8.031222825239024E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999647287446236	WITHOUT_CLASSIFICATION	3.52712553763058E-5	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999470069060827	WITHOUT_CLASSIFICATION	5.299309391736867E-5	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999197493505227	WITHOUT_CLASSIFICATION	8.025064947720348E-5	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9998875144065507	WITHOUT_CLASSIFICATION	1.1248559344933283E-4	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9995615943210545	WITHOUT_CLASSIFICATION	4.3840567894559E-4	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.999524650130102	WITHOUT_CLASSIFICATION	4.7534986989805926E-4	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9999333764998262	WITHOUT_CLASSIFICATION	6.662350017390903E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999263855216887	WITHOUT_CLASSIFICATION	7.36144783112843E-5	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999607820961381	WITHOUT_CLASSIFICATION	3.92179038618014E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999218802902248	WITHOUT_CLASSIFICATION	7.811970977526543E-5	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999947692728378	WITHOUT_CLASSIFICATION	5.23072716210341E-6	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999969236708049	WITHOUT_CLASSIFICATION	3.0763291950968565E-5	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999802823894272	WITHOUT_CLASSIFICATION	1.971761057280141E-5	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999793200795615	WITHOUT_CLASSIFICATION	2.0679920438493595E-5	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999781128778794	WITHOUT_CLASSIFICATION	2.1887122120625883E-5	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999294206434002	WITHOUT_CLASSIFICATION	7.057935659983827E-5	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999683113551057	WITHOUT_CLASSIFICATION	3.168864489444678E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999196877717477	WITHOUT_CLASSIFICATION	8.031222825239024E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999218802902248	WITHOUT_CLASSIFICATION	7.811970977526543E-5	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999160139556292	WITHOUT_CLASSIFICATION	8.398604437076832E-5	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9970863666239418	WITHOUT_CLASSIFICATION	0.0029136333760582263	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999341234731431	WITHOUT_CLASSIFICATION	6.587652685675453E-5	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999134606104347	WITHOUT_CLASSIFICATION	8.653938956521118E-5	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9999186834245324	WITHOUT_CLASSIFICATION	8.13165754676136E-5	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999837062243891	WITHOUT_CLASSIFICATION	1.6293775610893207E-5	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999459554950786	WITHOUT_CLASSIFICATION	5.404450492148316E-5	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.999909541332329	WITHOUT_CLASSIFICATION	9.045866767102304E-5	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999435732191113	WITHOUT_CLASSIFICATION	5.642678088881474E-5	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9982963403517721	WITHOUT_CLASSIFICATION	0.00170365964822801	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.999925119055625	WITHOUT_CLASSIFICATION	7.488094437496668E-5	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999847186823925	WITHOUT_CLASSIFICATION	1.528131760753899E-5	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999399158907756	WITHOUT_CLASSIFICATION	6.008410922430688E-5	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999190536689163	WITHOUT_CLASSIFICATION	8.094633108376165E-5	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999895293889063	WITHOUT_CLASSIFICATION	1.0470611093592424E-5	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999981540217853	WITHOUT_CLASSIFICATION	1.8459782146962204E-6	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999975644258291	WITHOUT_CLASSIFICATION	2.4355741709456866E-6	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999961748094279	WITHOUT_CLASSIFICATION	3.825190572103994E-5	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999177498074729	WITHOUT_CLASSIFICATION	8.225019252703791E-5	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999572866248964	WITHOUT_CLASSIFICATION	4.2713375103738376E-5	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999351901677351	WITHOUT_CLASSIFICATION	6.480983226489212E-5	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999327075006871	WITHOUT_CLASSIFICATION	6.729249931288857E-5	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999906246796204	WITHOUT_CLASSIFICATION	9.375320379533911E-6	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999313768521914	WITHOUT_CLASSIFICATION	6.86231478086677E-5	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8308507710681993	WITHOUT_CLASSIFICATION	0.16914922893180082	IMPLEMENTATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.99996008414569	WITHOUT_CLASSIFICATION	3.9915854309950466E-5	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999614217565174	WITHOUT_CLASSIFICATION	3.857824348268079E-5	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999985478827436	WITHOUT_CLASSIFICATION	1.452117256384546E-5	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9997477178068659	WITHOUT_CLASSIFICATION	2.522821931341864E-4	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999941137267111	WITHOUT_CLASSIFICATION	5.886273288985359E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999851604324993	WITHOUT_CLASSIFICATION	1.483956750075581E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999740187660784	WITHOUT_CLASSIFICATION	2.5981233921651456E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999878658044289	WITHOUT_CLASSIFICATION	1.2134195571131958E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999871687455967	WITHOUT_CLASSIFICATION	1.2831254403365976E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999715025817996	WITHOUT_CLASSIFICATION	2.84974182004139E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999722255362492	WITHOUT_CLASSIFICATION	2.7774463750839717E-5	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999799064256628	WITHOUT_CLASSIFICATION	2.0093574337191642E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999715025817996	WITHOUT_CLASSIFICATION	2.84974182004139E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999871687455967	WITHOUT_CLASSIFICATION	1.2831254403365976E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999722255362492	WITHOUT_CLASSIFICATION	2.7774463750839717E-5	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999691914698019	WITHOUT_CLASSIFICATION	3.0808530198049487E-5	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999860639392493	WITHOUT_CLASSIFICATION	1.3936060750837563E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999946775708205	WITHOUT_CLASSIFICATION	5.322429179561157E-6	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999290860682712	WITHOUT_CLASSIFICATION	7.091393172875469E-5	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999997919788253	WITHOUT_CLASSIFICATION	2.0802117479779016E-7	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9773353198499816	WITHOUT_CLASSIFICATION	0.0226646801500184	IMPLEMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999733221024832	WITHOUT_CLASSIFICATION	2.6677897516780188E-5	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999449424939029	WITHOUT_CLASSIFICATION	5.505750609725379E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999791300941632	WITHOUT_CLASSIFICATION	2.086990583679318E-5	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999632569698076	WITHOUT_CLASSIFICATION	3.674303019242616E-5	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999539533044122	WITHOUT_CLASSIFICATION	4.6046695587918915E-5	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999884677245587	WITHOUT_CLASSIFICATION	1.1532275441325207E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998752070719382	WITHOUT_CLASSIFICATION	1.247929280616814E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999278354548113	WITHOUT_CLASSIFICATION	7.216454518862013E-5	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999897124553286	WITHOUT_CLASSIFICATION	1.0287544671319848E-5	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999824951076607	WITHOUT_CLASSIFICATION	1.7504892339346912E-5	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999957517518436	WITHOUT_CLASSIFICATION	4.248248156367283E-6	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999723160623459	WITHOUT_CLASSIFICATION	2.768393765411782E-5	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999944308533413	WITHOUT_CLASSIFICATION	5.5691466586834855E-6	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999189301699186	WITHOUT_CLASSIFICATION	8.106983008143542E-5	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9998939525276702	WITHOUT_CLASSIFICATION	1.0604747232974309E-4	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999844105205634	WITHOUT_CLASSIFICATION	1.558947943665973E-5	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999401366052554	WITHOUT_CLASSIFICATION	5.98633947445223E-5	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999898306902596	WITHOUT_CLASSIFICATION	1.0169309740296088E-5	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999142567488888	WITHOUT_CLASSIFICATION	8.57432511112199E-5	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999142567488888	WITHOUT_CLASSIFICATION	8.57432511112199E-5	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999807278774715	WITHOUT_CLASSIFICATION	1.927212252845566E-5	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999807278774715	WITHOUT_CLASSIFICATION	1.927212252845566E-5	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9997877742269365	WITHOUT_CLASSIFICATION	2.122257730634374E-4	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999957517518436	WITHOUT_CLASSIFICATION	4.248248156367283E-6	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999336832782343	WITHOUT_CLASSIFICATION	6.631672176561218E-5	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999753238929177	WITHOUT_CLASSIFICATION	2.4676107082392465E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998690245596006	WITHOUT_CLASSIFICATION	1.3097544039936262E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998690245596006	WITHOUT_CLASSIFICATION	1.3097544039936262E-4	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999774231663378	WITHOUT_CLASSIFICATION	2.257683366220965E-5	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999863499225333	WITHOUT_CLASSIFICATION	1.3650077466746805E-5	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999813483748613	WITHOUT_CLASSIFICATION	1.8651625138670702E-5	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999345533824626	WITHOUT_CLASSIFICATION	6.544661753732565E-5	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999628951482544	WITHOUT_CLASSIFICATION	3.710485174546819E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999971909913695	WITHOUT_CLASSIFICATION	2.809008630393627E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999528813179122	WITHOUT_CLASSIFICATION	4.711868208772931E-5	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.999829552276012	WITHOUT_CLASSIFICATION	1.7044772398804562E-4	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9999317476026361	WITHOUT_CLASSIFICATION	6.82523973638496E-5	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.999990717078771	WITHOUT_CLASSIFICATION	9.282921228985401E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999651269063256	WITHOUT_CLASSIFICATION	3.4873093674479906E-5	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999157906055179	WITHOUT_CLASSIFICATION	8.420939448206463E-5	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999248425711741	WITHOUT_CLASSIFICATION	7.515742882583381E-5	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999298336230075	WITHOUT_CLASSIFICATION	7.016637699253897E-5	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9998419021076952	WITHOUT_CLASSIFICATION	1.580978923048203E-4	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999734642266037	WITHOUT_CLASSIFICATION	2.6535773396358287E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999391492063242	WITHOUT_CLASSIFICATION	6.0850793675741274E-5	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9995936970237349	WITHOUT_CLASSIFICATION	4.0630297626509187E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999381867554791	WITHOUT_CLASSIFICATION	6.181324452091595E-5	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999984888276073	WITHOUT_CLASSIFICATION	1.5111723927137026E-6	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999273100209071	WITHOUT_CLASSIFICATION	7.268997909289179E-5	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999497339612458	WITHOUT_CLASSIFICATION	5.0266038754218404E-5	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999543913326734	WITHOUT_CLASSIFICATION	4.5608667326665546E-5	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999943919751714	WITHOUT_CLASSIFICATION	5.608024828634074E-6	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999826311629331	WITHOUT_CLASSIFICATION	1.736883706695448E-5	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999748162479369	WITHOUT_CLASSIFICATION	2.518375206309909E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999218802902248	WITHOUT_CLASSIFICATION	7.811970977526543E-5	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999847186823925	WITHOUT_CLASSIFICATION	1.528131760753899E-5	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999803637684923	WITHOUT_CLASSIFICATION	1.9636231507627874E-5	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999947052155305	WITHOUT_CLASSIFICATION	5.2947844695689436E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999926210475076	WITHOUT_CLASSIFICATION	7.378952492407238E-5	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999535829854774	WITHOUT_CLASSIFICATION	4.6417014522623805E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999296389601608	WITHOUT_CLASSIFICATION	7.036103983911153E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999296389601608	WITHOUT_CLASSIFICATION	7.036103983911153E-5	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999987451694664	WITHOUT_CLASSIFICATION	1.2548305336044252E-5	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999404114318324	WITHOUT_CLASSIFICATION	5.958856816757915E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999862801349975	WITHOUT_CLASSIFICATION	1.3719865002454598E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999862801349975	WITHOUT_CLASSIFICATION	1.3719865002454598E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999686424631056	WITHOUT_CLASSIFICATION	3.1357536894438485E-5	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999587942775248	WITHOUT_CLASSIFICATION	4.1205722475209245E-5	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999653768374459	WITHOUT_CLASSIFICATION	3.46231625541499E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9997726277215998	WITHOUT_CLASSIFICATION	2.2737227840020184E-4	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999604695885516	WITHOUT_CLASSIFICATION	3.953041144850484E-5	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999895176891541	WITHOUT_CLASSIFICATION	1.0482310845806256E-5	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9999256637493958	WITHOUT_CLASSIFICATION	7.43362506042191E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999604796014301	WITHOUT_CLASSIFICATION	3.9520398569963086E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999823483586552	WITHOUT_CLASSIFICATION	1.7651641344875486E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999823483586552	WITHOUT_CLASSIFICATION	1.7651641344875486E-5	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999669095353941	WITHOUT_CLASSIFICATION	3.309046460595134E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999437674699444	WITHOUT_CLASSIFICATION	5.623253005555427E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999437674699444	WITHOUT_CLASSIFICATION	5.623253005555427E-5	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999833344999146	WITHOUT_CLASSIFICATION	1.6665500085301342E-5	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999891105255324	WITHOUT_CLASSIFICATION	1.0889474467599326E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9965876362711094	WITHOUT_CLASSIFICATION	0.0034123637288905884	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999820583073109	WITHOUT_CLASSIFICATION	1.79416926891003E-5	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999799925913455	WITHOUT_CLASSIFICATION	2.000740865451116E-5	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999856065333061	WITHOUT_CLASSIFICATION	1.4393466693816978E-5	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.999999355803115	WITHOUT_CLASSIFICATION	6.441968849963728E-7	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999732666177209	WITHOUT_CLASSIFICATION	2.673338227907748E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999772194880404	WITHOUT_CLASSIFICATION	2.278051195955725E-5	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9998812074227537	WITHOUT_CLASSIFICATION	1.1879257724638123E-4	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.99999631764631	WITHOUT_CLASSIFICATION	3.6823536899195285E-6	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9997181870524281	WITHOUT_CLASSIFICATION	2.8181294757185837E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999927536086536	WITHOUT_CLASSIFICATION	7.246391346333143E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999927536086536	WITHOUT_CLASSIFICATION	7.246391346333143E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999927536086536	WITHOUT_CLASSIFICATION	7.246391346333143E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999927536086536	WITHOUT_CLASSIFICATION	7.246391346333143E-6	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999533297062981	WITHOUT_CLASSIFICATION	4.6670293701894035E-5	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999949729324807	WITHOUT_CLASSIFICATION	5.027067519202553E-6	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999099344918548	WITHOUT_CLASSIFICATION	9.006550814519914E-5	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999171571185671	WITHOUT_CLASSIFICATION	8.284288143279751E-5	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999610165741903	WITHOUT_CLASSIFICATION	3.898342580959722E-5	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999126441546096	WITHOUT_CLASSIFICATION	8.735584539036133E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999214112602773	WITHOUT_CLASSIFICATION	7.85887397227006E-5	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999566840712096	WITHOUT_CLASSIFICATION	4.331592879028677E-5	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.999908156643835	WITHOUT_CLASSIFICATION	9.184335616487049E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999214112602773	WITHOUT_CLASSIFICATION	7.85887397227006E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999214112602773	WITHOUT_CLASSIFICATION	7.85887397227006E-5	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999715821521399	WITHOUT_CLASSIFICATION	2.8417847860119186E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999733901922464	WITHOUT_CLASSIFICATION	2.660980775359817E-5	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999205105833529	WITHOUT_CLASSIFICATION	7.948941664715982E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999965816664172	WITHOUT_CLASSIFICATION	3.41833358280192E-5	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.999980892678849	WITHOUT_CLASSIFICATION	1.9107321150993452E-5	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999874972662343	WITHOUT_CLASSIFICATION	1.2502733765871448E-5	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999862545288661	WITHOUT_CLASSIFICATION	1.3745471133921599E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999965816664172	WITHOUT_CLASSIFICATION	3.41833358280192E-5	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999875919059674	WITHOUT_CLASSIFICATION	1.2408094032609E-5	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999547982672264	WITHOUT_CLASSIFICATION	4.5201732773602725E-5	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999626265448107	WITHOUT_CLASSIFICATION	3.737345518916531E-5	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999523725418618	WITHOUT_CLASSIFICATION	4.762745813827925E-5	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999968225741724	WITHOUT_CLASSIFICATION	3.177425827604236E-5	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999721502952504	WITHOUT_CLASSIFICATION	2.7849704749607953E-5	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999808890667679	WITHOUT_CLASSIFICATION	1.9110933232160408E-5	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999077850072013	WITHOUT_CLASSIFICATION	9.221499279861602E-5	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999641824911609	WITHOUT_CLASSIFICATION	3.5817508839030535E-5	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.999991774466506	WITHOUT_CLASSIFICATION	8.225533494032998E-6	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999649470679346	WITHOUT_CLASSIFICATION	3.505293206544692E-5	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999312244595494	WITHOUT_CLASSIFICATION	6.8775540450573E-5	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999718591489475	WITHOUT_CLASSIFICATION	2.8140851052528324E-5	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999223602308067	WITHOUT_CLASSIFICATION	7.763976919328215E-5	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999902841022694	WITHOUT_CLASSIFICATION	9.715897730666986E-6	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999288650637149	WITHOUT_CLASSIFICATION	7.113493628506753E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999687357581578	WITHOUT_CLASSIFICATION	3.1264241842165256E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999569256313553	WITHOUT_CLASSIFICATION	4.307436864470799E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998945233363895	WITHOUT_CLASSIFICATION	1.0547666361042172E-4	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999569256313553	WITHOUT_CLASSIFICATION	4.307436864470799E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999966850226189	WITHOUT_CLASSIFICATION	3.314977381101778E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999844890255027	WITHOUT_CLASSIFICATION	1.55109744972792E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999353181489421	WITHOUT_CLASSIFICATION	6.468185105787137E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999826116897143	WITHOUT_CLASSIFICATION	1.7388310285737595E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999687357581578	WITHOUT_CLASSIFICATION	3.1264241842165256E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998945233363895	WITHOUT_CLASSIFICATION	1.0547666361042172E-4	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999966850226189	WITHOUT_CLASSIFICATION	3.314977381101778E-5	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999297232258528	WITHOUT_CLASSIFICATION	7.02767741471506E-5	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999585816588159	WITHOUT_CLASSIFICATION	4.141834118414881E-5	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9999320963084976	WITHOUT_CLASSIFICATION	6.790369150242028E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9999460081950171	WITHOUT_CLASSIFICATION	5.3991804982851114E-5	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999866182107388	WITHOUT_CLASSIFICATION	1.338178926120235E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999918161041986	WITHOUT_CLASSIFICATION	8.183895801439101E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999391492063242	WITHOUT_CLASSIFICATION	6.0850793675741274E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999844890255027	WITHOUT_CLASSIFICATION	1.55109744972792E-5	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999988107338591	WITHOUT_CLASSIFICATION	1.1892661409146935E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999757561888399	WITHOUT_CLASSIFICATION	2.4243811160156695E-5	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999589223920599	WITHOUT_CLASSIFICATION	4.1077607940167E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999391492063242	WITHOUT_CLASSIFICATION	6.0850793675741274E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999218802902248	WITHOUT_CLASSIFICATION	7.811970977526543E-5	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999656193155834	WITHOUT_CLASSIFICATION	3.4380684416624726E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999391492063242	WITHOUT_CLASSIFICATION	6.0850793675741274E-5	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999793015115667	WITHOUT_CLASSIFICATION	2.0698488433306903E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999631978596657	WITHOUT_CLASSIFICATION	3.6802140334344796E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999218802902248	WITHOUT_CLASSIFICATION	7.811970977526543E-5	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9995194988368128	WITHOUT_CLASSIFICATION	4.8050116318718744E-4	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999284123555997	WITHOUT_CLASSIFICATION	7.158764440024848E-5	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999888847294615	WITHOUT_CLASSIFICATION	1.1115270538509665E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999468472523084	WITHOUT_CLASSIFICATION	5.315274769163413E-5	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999879698195983	WITHOUT_CLASSIFICATION	1.2030180401657263E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999495109293276	WITHOUT_CLASSIFICATION	5.048907067247488E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999684316061827	WITHOUT_CLASSIFICATION	3.156839381729328E-5	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999552524802473	WITHOUT_CLASSIFICATION	4.4747519752639104E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999990466010016	WITHOUT_CLASSIFICATION	9.533989983997818E-6	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9965876362711094	WITHOUT_CLASSIFICATION	0.0034123637288905884	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999444966798372	WITHOUT_CLASSIFICATION	5.550332016287608E-5	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999906270960445	WITHOUT_CLASSIFICATION	9.372903955489283E-6	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999184956137511	WITHOUT_CLASSIFICATION	8.150438624882978E-5	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999125890989523	WITHOUT_CLASSIFICATION	8.74109010477192E-5	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999612367898127	WITHOUT_CLASSIFICATION	3.8763210187200064E-5	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999889908614195	WITHOUT_CLASSIFICATION	1.1009138580621055E-5	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999785034212004	WITHOUT_CLASSIFICATION	2.1496578799514856E-5	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999871321304995	WITHOUT_CLASSIFICATION	1.2867869500573705E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999663884237618	WITHOUT_CLASSIFICATION	3.361157623817288E-5	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999777407428324	WITHOUT_CLASSIFICATION	2.2259257167647923E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9965876362711094	WITHOUT_CLASSIFICATION	0.0034123637288905884	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999408552808808	WITHOUT_CLASSIFICATION	5.914471911910241E-5	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999329641425705	WITHOUT_CLASSIFICATION	6.7035857429438E-5	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999319582809802	WITHOUT_CLASSIFICATION	6.804171901969958E-5	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999963496952223	WITHOUT_CLASSIFICATION	3.6503047776985147E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999880117963816	WITHOUT_CLASSIFICATION	1.1988203618244066E-5	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999851512165834	WITHOUT_CLASSIFICATION	1.484878341667685E-5	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999446331523258	WITHOUT_CLASSIFICATION	5.536684767423401E-5	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999172078141929	WITHOUT_CLASSIFICATION	8.279218580703381E-5	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999680159574796	WITHOUT_CLASSIFICATION	3.198404252037459E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9965876362711094	WITHOUT_CLASSIFICATION	0.0034123637288905884	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999627834743527	WITHOUT_CLASSIFICATION	3.721652564726477E-5	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999398222736073	WITHOUT_CLASSIFICATION	6.017772639267713E-5	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9999111734372698	WITHOUT_CLASSIFICATION	8.882656273025293E-5	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999282760838207	WITHOUT_CLASSIFICATION	7.172391617931272E-5	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999713627623533	WITHOUT_CLASSIFICATION	2.8637237646651066E-5	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999013997827554	WITHOUT_CLASSIFICATION	9.860021724461318E-5	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999930369790184	WITHOUT_CLASSIFICATION	6.963020981568173E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999218802902248	WITHOUT_CLASSIFICATION	7.811970977526543E-5	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999964423802457	WITHOUT_CLASSIFICATION	3.557619754309969E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999675487024867	WITHOUT_CLASSIFICATION	3.245129751335284E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999675487024867	WITHOUT_CLASSIFICATION	3.245129751335284E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999478265953236	WITHOUT_CLASSIFICATION	5.217340467650031E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999495109293276	WITHOUT_CLASSIFICATION	5.048907067247488E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999447216103965	WITHOUT_CLASSIFICATION	5.5278389603483476E-5	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999843626956917	WITHOUT_CLASSIFICATION	1.5637304308340445E-5	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999943311223537	WITHOUT_CLASSIFICATION	5.66887764620289E-6	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999750598877437	WITHOUT_CLASSIFICATION	2.494011225627396E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999538244819267	WITHOUT_CLASSIFICATION	4.617551807334252E-5	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9980479892480982	WITHOUT_CLASSIFICATION	0.0019520107519017207	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999716517778728	WITHOUT_CLASSIFICATION	2.834822212720827E-5	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999865636841442	WITHOUT_CLASSIFICATION	1.3436315855673788E-5	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999960008361862	WITHOUT_CLASSIFICATION	3.999163813791626E-5	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999772929256945	WITHOUT_CLASSIFICATION	2.2707074305610985E-5	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999905255171857	WITHOUT_CLASSIFICATION	9.474482814370838E-6	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999980873496949	WITHOUT_CLASSIFICATION	1.9126503051422295E-6	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999891617839395	WITHOUT_CLASSIFICATION	1.0838216060570519E-5	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999997790620159	WITHOUT_CLASSIFICATION	2.2093798406837145E-7	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999945116415621	WITHOUT_CLASSIFICATION	5.488358437895806E-5	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999863858315736	WITHOUT_CLASSIFICATION	1.361416842634062E-5	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999996988761746	WITHOUT_CLASSIFICATION	3.011238253968104E-6	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999928339247509	WITHOUT_CLASSIFICATION	7.166075249064482E-6	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999929629997557	WITHOUT_CLASSIFICATION	7.0370002442764E-6	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999835047583375	WITHOUT_CLASSIFICATION	1.6495241662503645E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999676813779069	WITHOUT_CLASSIFICATION	3.2318622093119535E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999989442115046	WITHOUT_CLASSIFICATION	1.0557884954734493E-6	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999013997827554	WITHOUT_CLASSIFICATION	9.860021724461318E-5	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999978491416139	WITHOUT_CLASSIFICATION	2.1508583859591625E-6	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999882623547907	WITHOUT_CLASSIFICATION	1.1737645209309968E-5	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999917037771106	WITHOUT_CLASSIFICATION	8.296222889399325E-6	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999602302708329	WITHOUT_CLASSIFICATION	3.976972916715834E-5	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999813198437839	WITHOUT_CLASSIFICATION	1.8680156216043262E-5	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999535184102836	WITHOUT_CLASSIFICATION	4.648158971633792E-5	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999916788992426	WITHOUT_CLASSIFICATION	8.321100757461513E-6	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999914212587157	WITHOUT_CLASSIFICATION	8.578741284295963E-6	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999916725427035	WITHOUT_CLASSIFICATION	8.327457296578548E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999925738050259	WITHOUT_CLASSIFICATION	7.426194974111868E-6	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999678927833249	WITHOUT_CLASSIFICATION	3.2107216675106964E-5	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999709570055639	WITHOUT_CLASSIFICATION	2.904299443604683E-5	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999430442979522	WITHOUT_CLASSIFICATION	5.6955702047795745E-5	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999693312651823	WITHOUT_CLASSIFICATION	3.066873481769565E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999680134638197	WITHOUT_CLASSIFICATION	3.198653618037656E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999680134638197	WITHOUT_CLASSIFICATION	3.198653618037656E-5	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999532896822007	WITHOUT_CLASSIFICATION	4.671031779948151E-5	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999361910994355	WITHOUT_CLASSIFICATION	6.380890056436883E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.99998303086304	WITHOUT_CLASSIFICATION	1.6969136960006416E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.99998303086304	WITHOUT_CLASSIFICATION	1.6969136960006416E-5	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999814282458985	WITHOUT_CLASSIFICATION	1.8571754101483253E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999451413428301	WITHOUT_CLASSIFICATION	5.485865716985964E-5	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999923254316337	WITHOUT_CLASSIFICATION	7.674568366297259E-6	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999951265547368	WITHOUT_CLASSIFICATION	4.873445263268049E-6	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999645544157965	WITHOUT_CLASSIFICATION	3.544558420348119E-5	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999652555353481	WITHOUT_CLASSIFICATION	3.474446465191044E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999878023394774	WITHOUT_CLASSIFICATION	1.2197660522516852E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999878023394774	WITHOUT_CLASSIFICATION	1.2197660522516852E-5	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999639208426842	WITHOUT_CLASSIFICATION	3.6079157315754815E-5	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999658809585632	WITHOUT_CLASSIFICATION	3.4119041436911604E-5	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999368407490855	WITHOUT_CLASSIFICATION	6.315925091448707E-5	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.999970243567055	WITHOUT_CLASSIFICATION	2.9756432944948637E-5	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.999970243567055	WITHOUT_CLASSIFICATION	2.9756432944948637E-5	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.999945719930309	WITHOUT_CLASSIFICATION	5.428006969091377E-5	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999706876398926	WITHOUT_CLASSIFICATION	2.93123601074016E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999770154810719	WITHOUT_CLASSIFICATION	2.2984518928108484E-5	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999689968347341	WITHOUT_CLASSIFICATION	3.1003165265912644E-5	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999957878184159	WITHOUT_CLASSIFICATION	4.212181584102848E-5	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999332039524239	WITHOUT_CLASSIFICATION	6.679604757601577E-5	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999778755836474	WITHOUT_CLASSIFICATION	2.212441635267678E-5	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999684024788592	WITHOUT_CLASSIFICATION	3.1597521140760004E-5	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999669876563166	WITHOUT_CLASSIFICATION	3.301234368328075E-5	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999516250961346	WITHOUT_CLASSIFICATION	4.8374903865338025E-5	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999745099627545	WITHOUT_CLASSIFICATION	2.549003724546558E-5	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999665051454348	WITHOUT_CLASSIFICATION	3.349485456514856E-5	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9996140831546031	WITHOUT_CLASSIFICATION	3.8591684539692926E-4	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999652132224977	WITHOUT_CLASSIFICATION	3.4786777502372E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999160511384815	WITHOUT_CLASSIFICATION	8.394886151863089E-5	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999991329425319	WITHOUT_CLASSIFICATION	8.67057468099147E-6	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999555626529226	WITHOUT_CLASSIFICATION	4.4437347077380536E-5	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999826407076557	WITHOUT_CLASSIFICATION	1.735929234420718E-5	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999873153182423	WITHOUT_CLASSIFICATION	1.2684681757782008E-5	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999712247177343	WITHOUT_CLASSIFICATION	2.877528226573477E-5	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999659080728573	WITHOUT_CLASSIFICATION	3.409192714269477E-5	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999134476207593	WITHOUT_CLASSIFICATION	8.655237924077548E-5	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999254827657218	WITHOUT_CLASSIFICATION	7.451723427818678E-5	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999655336311372	WITHOUT_CLASSIFICATION	3.446636886288317E-5	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9970483325575765	WITHOUT_CLASSIFICATION	0.0029516674424235213	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999764285503124	WITHOUT_CLASSIFICATION	2.357144968764842E-5	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999753351282391	WITHOUT_CLASSIFICATION	2.4664871760916136E-5	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999042413610282	WITHOUT_CLASSIFICATION	9.575863897183856E-5	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999947763831317	WITHOUT_CLASSIFICATION	5.22361686825158E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999673050707857	WITHOUT_CLASSIFICATION	3.269492921430309E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999901448982254	WITHOUT_CLASSIFICATION	9.855101774576447E-6	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999501818786256	WITHOUT_CLASSIFICATION	4.981812137439473E-5	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999914996607819	WITHOUT_CLASSIFICATION	8.500339217994936E-6	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999120019387265	WITHOUT_CLASSIFICATION	8.799806127346793E-5	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999644527116386	WITHOUT_CLASSIFICATION	3.554728836132762E-5	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999151929478729	WITHOUT_CLASSIFICATION	8.480705212716192E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999264167526815	WITHOUT_CLASSIFICATION	7.358324731852757E-5	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999949685517461	WITHOUT_CLASSIFICATION	5.031448253915105E-5	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999615383016641	WITHOUT_CLASSIFICATION	3.846169833587331E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999913677247432	WITHOUT_CLASSIFICATION	8.632275256750012E-6	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999667422242625	WITHOUT_CLASSIFICATION	3.325777573754568E-5	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999114358640416	WITHOUT_CLASSIFICATION	8.856413595838892E-5	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999493172996461	WITHOUT_CLASSIFICATION	5.068270035392646E-5	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999456486007096	WITHOUT_CLASSIFICATION	5.4351399290430305E-5	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999179382913839	WITHOUT_CLASSIFICATION	8.206170861616268E-5	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999307980460832	WITHOUT_CLASSIFICATION	6.920195391688139E-5	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.999921569856637	WITHOUT_CLASSIFICATION	7.843014336291738E-5	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999914763235562	WITHOUT_CLASSIFICATION	8.523676443891684E-6	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999832962708084	WITHOUT_CLASSIFICATION	1.6703729191626893E-5	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999825802616992	WITHOUT_CLASSIFICATION	1.741973830081864E-5	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999855139428903	WITHOUT_CLASSIFICATION	1.4486057109662316E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999475241094622	WITHOUT_CLASSIFICATION	5.2475890537783965E-5	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999298693543879	WITHOUT_CLASSIFICATION	7.013064561209668E-5	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999880018961368	WITHOUT_CLASSIFICATION	1.1998103863314927E-5	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999408784794285	WITHOUT_CLASSIFICATION	5.912152057162392E-5	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999527794886472	WITHOUT_CLASSIFICATION	4.7220511352750825E-5	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999320315297272	WITHOUT_CLASSIFICATION	6.796847027273003E-5	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999446929661598	WITHOUT_CLASSIFICATION	5.53070338401909E-5	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999864030469855	WITHOUT_CLASSIFICATION	1.3596953014536642E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.999975341053595	WITHOUT_CLASSIFICATION	2.4658946405029764E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999599804247269	WITHOUT_CLASSIFICATION	4.001957527313177E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999599804247269	WITHOUT_CLASSIFICATION	4.001957527313177E-5	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999935427004469	WITHOUT_CLASSIFICATION	6.457299553072596E-6	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999940146398557	WITHOUT_CLASSIFICATION	5.985360144300304E-6	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999995272307066	WITHOUT_CLASSIFICATION	4.7276929343369076E-7	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999931302267905	WITHOUT_CLASSIFICATION	6.869773209491139E-6	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999780757650634	WITHOUT_CLASSIFICATION	2.1924234936650086E-5	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999666867106145	WITHOUT_CLASSIFICATION	3.331328938544851E-5	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999952561112913	WITHOUT_CLASSIFICATION	4.7438887086737416E-6	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999966249766217	WITHOUT_CLASSIFICATION	3.375023378317021E-6	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999773065151132	WITHOUT_CLASSIFICATION	2.269348488679252E-5	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.999992691112302	WITHOUT_CLASSIFICATION	7.308887697975681E-6	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999925954481383	WITHOUT_CLASSIFICATION	7.404551861649626E-6	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999245902746324	WITHOUT_CLASSIFICATION	7.5409725367655E-5	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999937239756335	WITHOUT_CLASSIFICATION	6.276024366562757E-6	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999825114708071	WITHOUT_CLASSIFICATION	1.7488529192954068E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999607386533529	WITHOUT_CLASSIFICATION	3.926134664708152E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999607386533529	WITHOUT_CLASSIFICATION	3.926134664708152E-5	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999726663100469	WITHOUT_CLASSIFICATION	2.7333689953085106E-5	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999860271716026	WITHOUT_CLASSIFICATION	1.3972828397411881E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999736753706978	WITHOUT_CLASSIFICATION	2.6324629302126672E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999943107383362	WITHOUT_CLASSIFICATION	5.689261663885074E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999741448895176	WITHOUT_CLASSIFICATION	2.5855110482435618E-5	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999586661248808	WITHOUT_CLASSIFICATION	4.133387511910008E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999096970975067	WITHOUT_CLASSIFICATION	9.030290249344132E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9996145118284357	WITHOUT_CLASSIFICATION	3.854881715642401E-4	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999872867945325	WITHOUT_CLASSIFICATION	1.2713205467404934E-5	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999876386975045	WITHOUT_CLASSIFICATION	1.236130249537527E-5	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999965012942886	WITHOUT_CLASSIFICATION	3.498705711365107E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999627764114982	WITHOUT_CLASSIFICATION	3.722358850166576E-5	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999897673206251	WITHOUT_CLASSIFICATION	1.0232679374904272E-5	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999834752643525	WITHOUT_CLASSIFICATION	1.6524735647436667E-5	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.999993424333541	WITHOUT_CLASSIFICATION	6.575666459021953E-6	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999791211181974	WITHOUT_CLASSIFICATION	2.0878881802627684E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999865428315292	WITHOUT_CLASSIFICATION	1.3457168470705363E-5	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999969044856892	WITHOUT_CLASSIFICATION	3.09551431072813E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999631997300091	WITHOUT_CLASSIFICATION	3.680026999078005E-5	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999539142314184	WITHOUT_CLASSIFICATION	4.608576858157888E-5	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999866374342373	WITHOUT_CLASSIFICATION	1.336256576268256E-5	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999998941102328	WITHOUT_CLASSIFICATION	1.0588976719806368E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.99999733200375	WITHOUT_CLASSIFICATION	2.667996249913177E-6	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999163057560982	WITHOUT_CLASSIFICATION	8.36942439017365E-5	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999797082315797	WITHOUT_CLASSIFICATION	2.0291768420241163E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999810087792833	WITHOUT_CLASSIFICATION	1.8991220716743932E-5	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999919342960624	WITHOUT_CLASSIFICATION	8.065703937668345E-6	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999975819900523	WITHOUT_CLASSIFICATION	2.4180099476763704E-6	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999971867151728	WITHOUT_CLASSIFICATION	2.8132848271489532E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999932486800686	WITHOUT_CLASSIFICATION	6.7513199313368655E-6	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999935446641507	WITHOUT_CLASSIFICATION	6.455335849281524E-6	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999791122805294	WITHOUT_CLASSIFICATION	2.088771947060028E-5	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999807136959422	WITHOUT_CLASSIFICATION	1.9286304057732698E-5	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999864276527789	WITHOUT_CLASSIFICATION	1.3572347221025229E-5	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999955777551298	WITHOUT_CLASSIFICATION	4.422244870274474E-6	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999989069492979	WITHOUT_CLASSIFICATION	1.0930507021175515E-6	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999867532091933	WITHOUT_CLASSIFICATION	1.3246790806753437E-5	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999977910758635	WITHOUT_CLASSIFICATION	2.2089241364527802E-6	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999465550342923	WITHOUT_CLASSIFICATION	5.344496570780364E-5	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999938383832783	WITHOUT_CLASSIFICATION	6.1616167216973914E-6	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9994551541330932	WITHOUT_CLASSIFICATION	5.448458669068272E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9994551541330932	WITHOUT_CLASSIFICATION	5.448458669068272E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999970014414049	WITHOUT_CLASSIFICATION	2.998558595039464E-6	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999987696217572	WITHOUT_CLASSIFICATION	1.2303782429179827E-6	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999766473240127	WITHOUT_CLASSIFICATION	2.335267598724832E-5	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999561240185474	WITHOUT_CLASSIFICATION	4.387598145269276E-5	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999952018606296	WITHOUT_CLASSIFICATION	4.798139370355472E-6	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999793282712495	WITHOUT_CLASSIFICATION	2.0671728750574537E-5	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999680712043842	WITHOUT_CLASSIFICATION	3.192879561571834E-5	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999754302814405	WITHOUT_CLASSIFICATION	2.456971855945028E-5	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999855574548787	WITHOUT_CLASSIFICATION	1.4442545121223687E-5	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999643671305484	WITHOUT_CLASSIFICATION	3.5632869451595166E-5	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999564730536534	WITHOUT_CLASSIFICATION	4.352694634650251E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998915949698463	WITHOUT_CLASSIFICATION	1.0840503015370369E-4	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999925146219745	WITHOUT_CLASSIFICATION	7.485378025543098E-6	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999916344670235	WITHOUT_CLASSIFICATION	8.36553297642833E-6	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999979648776217	WITHOUT_CLASSIFICATION	2.0351223782921924E-6	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999934357025291	WITHOUT_CLASSIFICATION	6.5642974708893265E-6	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999519353332965	WITHOUT_CLASSIFICATION	4.8064666703516565E-5	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999967121143859	WITHOUT_CLASSIFICATION	3.287885614217877E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999645745697971	WITHOUT_CLASSIFICATION	3.542543020276835E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999882472911583	WITHOUT_CLASSIFICATION	1.175270884176975E-5	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999951644916347	WITHOUT_CLASSIFICATION	4.835508365253564E-6	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999865793797326	WITHOUT_CLASSIFICATION	1.3420620267564846E-5	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999777229721929	WITHOUT_CLASSIFICATION	2.227702780720684E-5	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999704120766457	WITHOUT_CLASSIFICATION	2.958792335425241E-5	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999307666783438	WITHOUT_CLASSIFICATION	6.923332165625828E-5	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999884127755605	WITHOUT_CLASSIFICATION	1.1587224439531045E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999965050150622	WITHOUT_CLASSIFICATION	3.49498493791249E-6	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999878897464	WITHOUT_CLASSIFICATION	1.2110253481135177E-8	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.999999780941038	WITHOUT_CLASSIFICATION	2.190589619837689E-7	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999722545577607	WITHOUT_CLASSIFICATION	2.774544223927479E-5	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.999991653715307	WITHOUT_CLASSIFICATION	8.346284693111907E-6	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999924675883246	WITHOUT_CLASSIFICATION	7.532411675401472E-6	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999998280148537	WITHOUT_CLASSIFICATION	1.7198514642743992E-7	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999892980640962	WITHOUT_CLASSIFICATION	1.0701935903850609E-5	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999994497599961	WITHOUT_CLASSIFICATION	5.502400038597569E-7	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999558947282523	WITHOUT_CLASSIFICATION	4.4105271747730545E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999882694695105	WITHOUT_CLASSIFICATION	1.1730530489495965E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999982427410584	WITHOUT_CLASSIFICATION	1.757258941578603E-6	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999974709812111	WITHOUT_CLASSIFICATION	2.5290187889969275E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999291034771914	WITHOUT_CLASSIFICATION	7.089652280854703E-5	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.999968731960871	WITHOUT_CLASSIFICATION	3.1268039129055654E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999956617039162	WITHOUT_CLASSIFICATION	4.33829608380401E-6	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999654972046783	WITHOUT_CLASSIFICATION	3.4502795321634745E-5	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999283179222	WITHOUT_CLASSIFICATION	7.168207777798047E-8	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999981453301486	WITHOUT_CLASSIFICATION	1.8546698513670749E-6	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999144887974933	WITHOUT_CLASSIFICATION	8.551120250672642E-5	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999984462245607	WITHOUT_CLASSIFICATION	1.5537754392331126E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999937239756335	WITHOUT_CLASSIFICATION	6.276024366562757E-6	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999966262635597	WITHOUT_CLASSIFICATION	3.373736440240031E-6	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999917582481884	WITHOUT_CLASSIFICATION	8.241751811546379E-6	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.99996913630508	WITHOUT_CLASSIFICATION	3.086369491995287E-5	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999984698173912	WITHOUT_CLASSIFICATION	1.530182608855965E-6	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999990140311127	WITHOUT_CLASSIFICATION	9.859688873540323E-7	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999949599462608	WITHOUT_CLASSIFICATION	5.040053739256853E-6	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999931006881583	WITHOUT_CLASSIFICATION	6.899311841799495E-6	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999942883535808	WITHOUT_CLASSIFICATION	5.711646419184598E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999680346790015	WITHOUT_CLASSIFICATION	3.196532099853353E-5	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999407773698653	WITHOUT_CLASSIFICATION	5.922263013466181E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999988927840562	WITHOUT_CLASSIFICATION	1.107215943756871E-6	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999616373944874	WITHOUT_CLASSIFICATION	3.8362605512506864E-5	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999953355135971	WITHOUT_CLASSIFICATION	4.664486402805202E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.999997525682014	WITHOUT_CLASSIFICATION	2.4743179859491518E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999342164489916	WITHOUT_CLASSIFICATION	6.578355100841067E-5	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999456011697431	WITHOUT_CLASSIFICATION	5.439883025700375E-5	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.999931305390515	WITHOUT_CLASSIFICATION	6.869460948503439E-5	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999909377815667	WITHOUT_CLASSIFICATION	9.062218433378058E-6	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999943172115533	WITHOUT_CLASSIFICATION	5.682788446737189E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999342164489916	WITHOUT_CLASSIFICATION	6.578355100841067E-5	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999741391093179	WITHOUT_CLASSIFICATION	2.5860890682127207E-5	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999963888187993	WITHOUT_CLASSIFICATION	3.6111812007753484E-6	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999985519045571	WITHOUT_CLASSIFICATION	1.4480954429333083E-6	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999974183074627	WITHOUT_CLASSIFICATION	2.5816925373187327E-6	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999598718693874	WITHOUT_CLASSIFICATION	4.012813061252814E-5	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999955980593218	WITHOUT_CLASSIFICATION	4.4019406781472166E-6	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999953297854808	WITHOUT_CLASSIFICATION	4.670214519180421E-6	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999589307283373	WITHOUT_CLASSIFICATION	4.10692716626576E-5	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999909777980146	WITHOUT_CLASSIFICATION	9.022201985400749E-6	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999948322164107	WITHOUT_CLASSIFICATION	5.167783589318876E-6	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999504436009421	WITHOUT_CLASSIFICATION	4.955639905797381E-5	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998333611834367	WITHOUT_CLASSIFICATION	1.6663881656334929E-4	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999679011571104	WITHOUT_CLASSIFICATION	3.209884288968434E-5	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999284916551704	WITHOUT_CLASSIFICATION	7.150834482962714E-5	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999799373800587	WITHOUT_CLASSIFICATION	2.0062619941313293E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999989442115046	WITHOUT_CLASSIFICATION	1.0557884954734493E-6	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999963059541599	WITHOUT_CLASSIFICATION	3.6940458400603646E-6	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999985876268167	WITHOUT_CLASSIFICATION	1.4123731833628327E-6	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9988900523009601	WITHOUT_CLASSIFICATION	0.0011099476990398796	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999896802568831	WITHOUT_CLASSIFICATION	1.0319743117004891E-5	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999879681597503	WITHOUT_CLASSIFICATION	1.203184024977376E-5	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999950991957683	WITHOUT_CLASSIFICATION	4.9008042317375314E-6	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999884442302851	WITHOUT_CLASSIFICATION	1.1555769714957294E-5	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999991384055444	WITHOUT_CLASSIFICATION	8.615944554750552E-7	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999878617867329	WITHOUT_CLASSIFICATION	1.2138213267075791E-5	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999961986404714	WITHOUT_CLASSIFICATION	3.8013595284746183E-6	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999990846170599	WITHOUT_CLASSIFICATION	9.153829401569135E-7	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999834157562315	WITHOUT_CLASSIFICATION	1.6584243768453244E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999983818706062	WITHOUT_CLASSIFICATION	1.6181293937678182E-6	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999996961991373	WITHOUT_CLASSIFICATION	3.038008626299365E-7	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999441723290501	WITHOUT_CLASSIFICATION	5.5827670950033704E-5	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999562056005148	WITHOUT_CLASSIFICATION	4.3794399485247075E-5	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999893422206002	WITHOUT_CLASSIFICATION	1.0657779399745215E-5	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999905632157259	WITHOUT_CLASSIFICATION	9.436784274163444E-6	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999983176023228	WITHOUT_CLASSIFICATION	1.6823976772054666E-6	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999727318518	WITHOUT_CLASSIFICATION	2.7268148279401978E-8	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999993515914628	WITHOUT_CLASSIFICATION	6.484085372757589E-7	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999690715906185	WITHOUT_CLASSIFICATION	3.092840938156348E-5	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999606125912531	WITHOUT_CLASSIFICATION	3.938740874691338E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999924231622336	WITHOUT_CLASSIFICATION	7.5768377663877E-6	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999719661395887	WITHOUT_CLASSIFICATION	2.803386041118194E-5	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999719661395887	WITHOUT_CLASSIFICATION	2.803386041118194E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.99998459118304	WITHOUT_CLASSIFICATION	1.5408816960065667E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999914706649439	WITHOUT_CLASSIFICATION	8.529335056242741E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999783860354894	WITHOUT_CLASSIFICATION	2.1613964510554755E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9997726277215998	WITHOUT_CLASSIFICATION	2.2737227840020184E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9997726277215998	WITHOUT_CLASSIFICATION	2.2737227840020184E-4	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999696470124174	WITHOUT_CLASSIFICATION	3.035298758252794E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999732797621662	WITHOUT_CLASSIFICATION	2.6720237833878542E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9970855638840707	WITHOUT_CLASSIFICATION	0.0029144361159294317	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999981499722474	WITHOUT_CLASSIFICATION	1.8500277526095857E-5	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999984864561815	WITHOUT_CLASSIFICATION	1.513543818391016E-6	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999761225743785	WITHOUT_CLASSIFICATION	2.3877425621478307E-5	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999914694606402	WITHOUT_CLASSIFICATION	8.530539359727531E-6	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999556501594048	WITHOUT_CLASSIFICATION	4.434984059520545E-5	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999766485148	WITHOUT_CLASSIFICATION	2.3351485157448947E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999461012625899	WITHOUT_CLASSIFICATION	5.389873741002224E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999461012625899	WITHOUT_CLASSIFICATION	5.389873741002224E-5	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999312923786569	WITHOUT_CLASSIFICATION	6.870762134317371E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999915828236135	WITHOUT_CLASSIFICATION	8.417176386507519E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999172522852993	WITHOUT_CLASSIFICATION	8.274771470071492E-5	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999478567429948	WITHOUT_CLASSIFICATION	5.214325700515332E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999218802902248	WITHOUT_CLASSIFICATION	7.811970977526543E-5	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999092957917199	WITHOUT_CLASSIFICATION	9.070420828016021E-5	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999607820961381	WITHOUT_CLASSIFICATION	3.92179038618014E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999218802902248	WITHOUT_CLASSIFICATION	7.811970977526543E-5	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999866532282506	WITHOUT_CLASSIFICATION	1.3346771749333693E-5	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999900132024243	WITHOUT_CLASSIFICATION	9.986797575668535E-6	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9998813789520893	WITHOUT_CLASSIFICATION	1.1862104791067242E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999900655296229	WITHOUT_CLASSIFICATION	9.934470377127746E-6	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999948322164107	WITHOUT_CLASSIFICATION	5.167783589318876E-6	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999504829237491	WITHOUT_CLASSIFICATION	4.951707625095391E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999190390803051	WITHOUT_CLASSIFICATION	8.096091969490522E-5	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999929929724858	WITHOUT_CLASSIFICATION	7.007027514292135E-6	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999507540509132	WITHOUT_CLASSIFICATION	4.924594908686622E-5	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999965720296215	WITHOUT_CLASSIFICATION	3.427970378490128E-5	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999508525987421	WITHOUT_CLASSIFICATION	4.9147401257914376E-5	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999567971001269	WITHOUT_CLASSIFICATION	4.320289987306158E-5	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999936624457888	WITHOUT_CLASSIFICATION	6.337554211150383E-6	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999721724720744	WITHOUT_CLASSIFICATION	2.782752792553008E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999197869559471	WITHOUT_CLASSIFICATION	8.021304405290294E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999197869559471	WITHOUT_CLASSIFICATION	8.021304405290294E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999965816664172	WITHOUT_CLASSIFICATION	3.41833358280192E-5	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999984269305975	WITHOUT_CLASSIFICATION	1.5730694025732503E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999214112602773	WITHOUT_CLASSIFICATION	7.85887397227006E-5	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999618699752073	WITHOUT_CLASSIFICATION	3.81300247926089E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999913721786289	WITHOUT_CLASSIFICATION	8.627821371143195E-6	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999940188879052	WITHOUT_CLASSIFICATION	5.981112094859656E-6	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999902841022694	WITHOUT_CLASSIFICATION	9.715897730666986E-6	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999991471470393	WITHOUT_CLASSIFICATION	8.528529607542498E-7	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999297232258528	WITHOUT_CLASSIFICATION	7.02767741471506E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999533372582134	WITHOUT_CLASSIFICATION	4.6662741786524093E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999391492063242	WITHOUT_CLASSIFICATION	6.0850793675741274E-5	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.999999141394489	WITHOUT_CLASSIFICATION	8.58605511079126E-7	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999836281552986	WITHOUT_CLASSIFICATION	1.637184470141018E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999962147222249	WITHOUT_CLASSIFICATION	3.7852777750906265E-6	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999675685670494	WITHOUT_CLASSIFICATION	3.243143295073727E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999955504188942	WITHOUT_CLASSIFICATION	4.44958110578903E-5	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999961982887398	WITHOUT_CLASSIFICATION	3.801711260192595E-6	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999791738624123	WITHOUT_CLASSIFICATION	2.0826137587578514E-5	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999094158128506	WITHOUT_CLASSIFICATION	9.058418714940812E-5	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.99999076716895	WITHOUT_CLASSIFICATION	9.232831050020882E-6	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999998596160337	WITHOUT_CLASSIFICATION	1.4038396644505814E-7	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999517259717	WITHOUT_CLASSIFICATION	4.8274028309815815E-8	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999770154810719	WITHOUT_CLASSIFICATION	2.2984518928108484E-5	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999981443531	WITHOUT_CLASSIFICATION	1.8556468631298506E-9	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999798066513108	WITHOUT_CLASSIFICATION	2.0193348689253054E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999798066513108	WITHOUT_CLASSIFICATION	2.0193348689253054E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999698789176782	WITHOUT_CLASSIFICATION	3.0121082321813183E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999875495559613	WITHOUT_CLASSIFICATION	1.2450444038703672E-5	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999990752748569	WITHOUT_CLASSIFICATION	9.247251431166471E-7	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999995531095056	WITHOUT_CLASSIFICATION	4.468904943246935E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.999957145088669	WITHOUT_CLASSIFICATION	4.285491133109091E-5	IMPLEMENTATION
