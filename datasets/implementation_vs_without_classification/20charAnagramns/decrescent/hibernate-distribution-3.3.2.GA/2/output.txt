// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9994610352204665	WITHOUT_CLASSIFICATION	5.389647795335813E-4	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9994610352204665	WITHOUT_CLASSIFICATION	5.389647795335813E-4	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9993199595813134	WITHOUT_CLASSIFICATION	6.800404186867112E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9990928481852431	WITHOUT_CLASSIFICATION	9.07151814756739E-4	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9997648776994743	WITHOUT_CLASSIFICATION	2.3512230052570235E-4	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.7956736499274972	IMPLEMENTATION	0.20432635007250277	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9972136656703438	WITHOUT_CLASSIFICATION	0.00278633432965635	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9391775102239303	WITHOUT_CLASSIFICATION	0.06082248977606976	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.999877670624388	WITHOUT_CLASSIFICATION	1.223293756119848E-4	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9987566625023993	WITHOUT_CLASSIFICATION	0.0012433374976008008	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9997964063068147	WITHOUT_CLASSIFICATION	2.0359369318530697E-4	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.9960425449546769	WITHOUT_CLASSIFICATION	0.00395745504532307	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9998489928324129	WITHOUT_CLASSIFICATION	1.5100716758720644E-4	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9998489928324129	WITHOUT_CLASSIFICATION	1.5100716758720644E-4	IMPLEMENTATION
/**	IMPLEMENTATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.6930334119385145	WITHOUT_CLASSIFICATION	0.30696658806148547	IMPLEMENTATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9569157307468923	IMPLEMENTATION	0.04308426925310768	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9291188148871405	WITHOUT_CLASSIFICATION	0.0708811851128595	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.999995454954054	WITHOUT_CLASSIFICATION	4.545045946043426E-6	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9995227694106315	WITHOUT_CLASSIFICATION	4.772305893686252E-4	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9995481271927846	WITHOUT_CLASSIFICATION	4.518728072153563E-4	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9999685137604786	WITHOUT_CLASSIFICATION	3.1486239521362064E-5	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9992220372864083	WITHOUT_CLASSIFICATION	7.77962713591583E-4	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9978213801046549	WITHOUT_CLASSIFICATION	0.0021786198953450474	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9978213801046549	WITHOUT_CLASSIFICATION	0.0021786198953450474	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9891063327785649	WITHOUT_CLASSIFICATION	0.010893667221435133	IMPLEMENTATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9997599809079709	WITHOUT_CLASSIFICATION	2.4001909202911304E-4	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9825801117998787	WITHOUT_CLASSIFICATION	0.01741988820012135	IMPLEMENTATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9995369010388648	WITHOUT_CLASSIFICATION	4.6309896113513166E-4	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9995455255611875	WITHOUT_CLASSIFICATION	4.544744388125449E-4	IMPLEMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9995121074103392	WITHOUT_CLASSIFICATION	4.878925896606891E-4	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9994009750956673	WITHOUT_CLASSIFICATION	5.990249043326789E-4	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9997677287307684	WITHOUT_CLASSIFICATION	2.3227126923167722E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9993995795381171	WITHOUT_CLASSIFICATION	6.004204618828831E-4	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9994828324019043	WITHOUT_CLASSIFICATION	5.171675980957289E-4	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9996075659987576	WITHOUT_CLASSIFICATION	3.9243400124236997E-4	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.7652439668415676	WITHOUT_CLASSIFICATION	0.2347560331584324	IMPLEMENTATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9995462457912527	WITHOUT_CLASSIFICATION	4.537542087472935E-4	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9992382281372642	WITHOUT_CLASSIFICATION	7.617718627358784E-4	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9175107657070466	WITHOUT_CLASSIFICATION	0.08248923429295339	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9175107657070466	WITHOUT_CLASSIFICATION	0.08248923429295339	IMPLEMENTATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9908636136763798	WITHOUT_CLASSIFICATION	0.009136386323620219	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9998371607767685	WITHOUT_CLASSIFICATION	1.6283922323142287E-4	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9999053585234978	WITHOUT_CLASSIFICATION	9.464147650213597E-5	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9506328764029811	WITHOUT_CLASSIFICATION	0.04936712359701883	IMPLEMENTATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9988782499312379	WITHOUT_CLASSIFICATION	0.0011217500687620947	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9986244265402823	WITHOUT_CLASSIFICATION	0.0013755734597176304	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9987833690360425	WITHOUT_CLASSIFICATION	0.001216630963957478	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9995447932321767	WITHOUT_CLASSIFICATION	4.5520676782321077E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9997262295097245	WITHOUT_CLASSIFICATION	2.737704902756256E-4	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9994666783562395	WITHOUT_CLASSIFICATION	5.333216437604182E-4	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9999006690174808	WITHOUT_CLASSIFICATION	9.933098251935464E-5	IMPLEMENTATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9995417864770677	WITHOUT_CLASSIFICATION	4.5821352293228755E-4	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9995913549934643	WITHOUT_CLASSIFICATION	4.086450065356359E-4	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9986627504001173	WITHOUT_CLASSIFICATION	0.001337249599882618	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9603063558458952	WITHOUT_CLASSIFICATION	0.03969364415410483	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9986627504001173	WITHOUT_CLASSIFICATION	0.001337249599882618	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9945268495975297	IMPLEMENTATION	0.005473150402470345	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.5534704730236822	WITHOUT_CLASSIFICATION	0.4465295269763178	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9986627504001173	WITHOUT_CLASSIFICATION	0.001337249599882618	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999697070940615	WITHOUT_CLASSIFICATION	3.0292905938421974E-5	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999715383763119	WITHOUT_CLASSIFICATION	2.8461623688092766E-5	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9997071097335929	WITHOUT_CLASSIFICATION	2.9289026640715233E-4	IMPLEMENTATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9999114569282065	WITHOUT_CLASSIFICATION	8.854307179355646E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9996702277127744	WITHOUT_CLASSIFICATION	3.297722872256318E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9986002968351672	WITHOUT_CLASSIFICATION	0.00139970316483285	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9986002968351672	WITHOUT_CLASSIFICATION	0.00139970316483285	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9997083190217966	WITHOUT_CLASSIFICATION	2.9168097820342776E-4	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997174880457727	WITHOUT_CLASSIFICATION	2.8251195422732177E-4	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9998282274380514	WITHOUT_CLASSIFICATION	1.717725619484346E-4	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9997022459052415	WITHOUT_CLASSIFICATION	2.977540947585305E-4	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9997022459052415	WITHOUT_CLASSIFICATION	2.977540947585305E-4	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9998050873090758	WITHOUT_CLASSIFICATION	1.9491269092425522E-4	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998716142359293	WITHOUT_CLASSIFICATION	1.2838576407074337E-4	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999244635891161	WITHOUT_CLASSIFICATION	7.553641088384429E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9996692716992219	WITHOUT_CLASSIFICATION	3.3072830077807966E-4	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9969673993602562	WITHOUT_CLASSIFICATION	0.003032600639743751	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9969673993602562	WITHOUT_CLASSIFICATION	0.003032600639743751	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9965115141713373	WITHOUT_CLASSIFICATION	0.0034884858286626133	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999508003791809	WITHOUT_CLASSIFICATION	4.919962081908904E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9997685974719905	WITHOUT_CLASSIFICATION	2.3140252800947278E-4	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9998423704171425	WITHOUT_CLASSIFICATION	1.5762958285742644E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999709231336626	WITHOUT_CLASSIFICATION	2.9076866337302445E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9966969558623222	WITHOUT_CLASSIFICATION	0.0033030441376777396	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9965135613696218	WITHOUT_CLASSIFICATION	0.0034864386303782853	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9995202443336902	WITHOUT_CLASSIFICATION	4.797556663097112E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9995227099899797	WITHOUT_CLASSIFICATION	4.7729001002028685E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9997586283754839	WITHOUT_CLASSIFICATION	2.413716245160563E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9998282494563013	WITHOUT_CLASSIFICATION	1.7175054369873686E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9979166200488462	WITHOUT_CLASSIFICATION	0.0020833799511537627	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9998412325244387	WITHOUT_CLASSIFICATION	1.5876747556128356E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998475903980425	WITHOUT_CLASSIFICATION	1.5240960195755446E-4	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999834040839036	WITHOUT_CLASSIFICATION	1.659591609631462E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9997903353301163	WITHOUT_CLASSIFICATION	2.0966466988364894E-4	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.999836972125091	WITHOUT_CLASSIFICATION	1.6302787490899985E-4	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999325004576575	WITHOUT_CLASSIFICATION	6.74995423425026E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997881812107813	WITHOUT_CLASSIFICATION	2.1181878921873714E-4	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9996052824628748	WITHOUT_CLASSIFICATION	3.9471753712525453E-4	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997469248658318	WITHOUT_CLASSIFICATION	2.530751341681988E-4	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997992297724889	WITHOUT_CLASSIFICATION	2.0077022751113522E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999112456892267	WITHOUT_CLASSIFICATION	8.87543107733136E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.997097458792995	WITHOUT_CLASSIFICATION	0.0029025412070049763	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999167754499899	WITHOUT_CLASSIFICATION	8.322455001008303E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9995542062358622	WITHOUT_CLASSIFICATION	4.4579376413784045E-4	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.997097458792995	WITHOUT_CLASSIFICATION	0.0029025412070049763	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9995542062358622	WITHOUT_CLASSIFICATION	4.4579376413784045E-4	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999044198943604	WITHOUT_CLASSIFICATION	9.558010563956867E-5	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999758035085909	WITHOUT_CLASSIFICATION	2.419649140903691E-5	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9998921151638825	WITHOUT_CLASSIFICATION	1.0788483611748757E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997957476164349	WITHOUT_CLASSIFICATION	2.0425238356521752E-4	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.999978244358884	WITHOUT_CLASSIFICATION	2.175564111593139E-5	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999282998590417	WITHOUT_CLASSIFICATION	7.170014095825748E-5	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998290073383205	WITHOUT_CLASSIFICATION	1.7099266167944408E-4	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9998868471993971	WITHOUT_CLASSIFICATION	1.1315280060279271E-4	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999508003777604	WITHOUT_CLASSIFICATION	4.91996222396751E-5	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9995760515328392	WITHOUT_CLASSIFICATION	4.2394846716072834E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9996801558343086	WITHOUT_CLASSIFICATION	3.1984416569142294E-4	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9995542062358622	WITHOUT_CLASSIFICATION	4.4579376413784045E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999802120867485	WITHOUT_CLASSIFICATION	1.978791325143693E-5	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9998269615093903	WITHOUT_CLASSIFICATION	1.7303849060975996E-4	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9998711445375004	WITHOUT_CLASSIFICATION	1.288554624997055E-4	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9998948698074828	WITHOUT_CLASSIFICATION	1.0513019251717293E-4	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9998765057047255	WITHOUT_CLASSIFICATION	1.2349429527440435E-4	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9998933368640607	WITHOUT_CLASSIFICATION	1.0666313593927402E-4	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999494054031076	WITHOUT_CLASSIFICATION	5.059459689239828E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999645568282008	WITHOUT_CLASSIFICATION	3.5443171799173546E-5	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999937091147906	WITHOUT_CLASSIFICATION	6.290885209409593E-5	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999344549232694	WITHOUT_CLASSIFICATION	6.554507673065348E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9997618270570927	WITHOUT_CLASSIFICATION	2.3817294290724445E-4	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999280358047876	WITHOUT_CLASSIFICATION	7.19641952123289E-5	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9627871458324339	WITHOUT_CLASSIFICATION	0.03721285416756621	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999643886374945	WITHOUT_CLASSIFICATION	3.561136250561216E-5	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999158230726273	WITHOUT_CLASSIFICATION	8.417692737272777E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.978455991114149	WITHOUT_CLASSIFICATION	0.02154400888585093	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999412179117327	WITHOUT_CLASSIFICATION	5.8782088267118096E-5	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999772991824131	WITHOUT_CLASSIFICATION	2.2700817586999725E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999618506924955	WITHOUT_CLASSIFICATION	3.814930750442719E-5	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9998804210504892	WITHOUT_CLASSIFICATION	1.1957894951065767E-4	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999427527401539	WITHOUT_CLASSIFICATION	5.7247259846210205E-5	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999728224038324	WITHOUT_CLASSIFICATION	2.7177596167604265E-4	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9997742062493731	WITHOUT_CLASSIFICATION	2.2579375062696855E-4	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999961419296752	WITHOUT_CLASSIFICATION	3.858070324765422E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999728224038324	WITHOUT_CLASSIFICATION	2.7177596167604265E-4	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999356793013768	WITHOUT_CLASSIFICATION	6.432069862307617E-5	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999439974595126	WITHOUT_CLASSIFICATION	5.600254048744616E-5	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9994540542955805	WITHOUT_CLASSIFICATION	5.459457044193781E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.999929822310548	WITHOUT_CLASSIFICATION	7.017768945191318E-5	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9998284816348458	WITHOUT_CLASSIFICATION	1.7151836515407376E-4	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998556333865081	WITHOUT_CLASSIFICATION	1.4436661349197312E-4	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998556333865081	WITHOUT_CLASSIFICATION	1.4436661349197312E-4	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9995542062358622	WITHOUT_CLASSIFICATION	4.4579376413784045E-4	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999935855523849	WITHOUT_CLASSIFICATION	6.414447615124915E-6	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9997159956553604	WITHOUT_CLASSIFICATION	2.840043446395726E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999435774402066	WITHOUT_CLASSIFICATION	5.642255979346581E-5	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9998594146225079	WITHOUT_CLASSIFICATION	1.4058537749205702E-4	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998999557908692	WITHOUT_CLASSIFICATION	1.0004420913069534E-4	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9997396081298066	WITHOUT_CLASSIFICATION	2.6039187019346493E-4	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9998343199516215	WITHOUT_CLASSIFICATION	1.6568004837850793E-4	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999369769202675	WITHOUT_CLASSIFICATION	6.302307973251345E-5	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999358808726596	WITHOUT_CLASSIFICATION	6.411912734030909E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998328470168321	WITHOUT_CLASSIFICATION	1.671529831679055E-4	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998328470168321	WITHOUT_CLASSIFICATION	1.671529831679055E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998668468345417	WITHOUT_CLASSIFICATION	1.3315316545835088E-4	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999946707254865	WITHOUT_CLASSIFICATION	5.329274513505348E-5	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9998446850119512	WITHOUT_CLASSIFICATION	1.5531498804873187E-4	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998328470168321	WITHOUT_CLASSIFICATION	1.671529831679055E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998668468345417	WITHOUT_CLASSIFICATION	1.3315316545835088E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998668468345417	WITHOUT_CLASSIFICATION	1.3315316545835088E-4	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999091130448309	WITHOUT_CLASSIFICATION	9.088695516914057E-5	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9996861811828919	WITHOUT_CLASSIFICATION	3.138188171080722E-4	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999260748339066	WITHOUT_CLASSIFICATION	7.392516609329441E-5	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9998785453874262	WITHOUT_CLASSIFICATION	1.2145461257377796E-4	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9997500721750275	WITHOUT_CLASSIFICATION	2.4992782497254605E-4	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9997500721750275	WITHOUT_CLASSIFICATION	2.4992782497254605E-4	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998098299753831	WITHOUT_CLASSIFICATION	1.9017002461685126E-4	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998320716665582	WITHOUT_CLASSIFICATION	1.6792833344181756E-4	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9998482380451089	WITHOUT_CLASSIFICATION	1.5176195489107576E-4	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998898720334601	WITHOUT_CLASSIFICATION	1.1012796653985515E-4	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998898720334601	WITHOUT_CLASSIFICATION	1.1012796653985515E-4	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9998195163454628	WITHOUT_CLASSIFICATION	1.8048365453706493E-4	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999842414086983	WITHOUT_CLASSIFICATION	1.5758591301706136E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999016242346132	WITHOUT_CLASSIFICATION	9.837576538684839E-5	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999800183324214	WITHOUT_CLASSIFICATION	1.9981667578541265E-5	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9998717645870803	WITHOUT_CLASSIFICATION	1.2823541291976311E-4	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999762076164895	WITHOUT_CLASSIFICATION	2.3792383510514824E-5	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9997529751888758	WITHOUT_CLASSIFICATION	2.4702481112414136E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9997573526732079	WITHOUT_CLASSIFICATION	2.4264732679215396E-4	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9997264994181924	WITHOUT_CLASSIFICATION	2.7350058180771326E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999016242346132	WITHOUT_CLASSIFICATION	9.837576538684839E-5	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9995222939070105	WITHOUT_CLASSIFICATION	4.777060929894756E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999030750403918	WITHOUT_CLASSIFICATION	9.692495960819741E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999030750403918	WITHOUT_CLASSIFICATION	9.692495960819741E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999858956451598	WITHOUT_CLASSIFICATION	1.4104354840241106E-5	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998573367413129	WITHOUT_CLASSIFICATION	1.426632586871136E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999580502473204	WITHOUT_CLASSIFICATION	4.1949752679511485E-5	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999551654034943	WITHOUT_CLASSIFICATION	4.4834596505654094E-5	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9996653725666285	WITHOUT_CLASSIFICATION	3.3462743337143774E-4	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.999522208455807	WITHOUT_CLASSIFICATION	4.7779154419305036E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9996143925192301	WITHOUT_CLASSIFICATION	3.8560748076991297E-4	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9998497122366404	WITHOUT_CLASSIFICATION	1.5028776335953767E-4	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999428736729306	WITHOUT_CLASSIFICATION	5.712632706939426E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999428736729306	WITHOUT_CLASSIFICATION	5.712632706939426E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9996268298428311	WITHOUT_CLASSIFICATION	3.7317015716885983E-4	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9996702277127744	WITHOUT_CLASSIFICATION	3.297722872256318E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999236128620859	WITHOUT_CLASSIFICATION	7.638713791415801E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9995542885842045	WITHOUT_CLASSIFICATION	4.4571141579557923E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9986002968351672	WITHOUT_CLASSIFICATION	0.00139970316483285	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9996416902215632	WITHOUT_CLASSIFICATION	3.583097784367804E-4	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9997580749454201	WITHOUT_CLASSIFICATION	2.4192505457983665E-4	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9996534612200935	WITHOUT_CLASSIFICATION	3.465387799064475E-4	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9995261746674212	WITHOUT_CLASSIFICATION	4.738253325788279E-4	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9997684780970562	WITHOUT_CLASSIFICATION	2.3152190294381845E-4	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9967801313204735	WITHOUT_CLASSIFICATION	0.00321986867952641	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9965154475867984	WITHOUT_CLASSIFICATION	0.003484552413201517	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998137168556466	WITHOUT_CLASSIFICATION	1.8628314435353518E-4	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997174880457727	WITHOUT_CLASSIFICATION	2.8251195422732177E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9995442321466549	WITHOUT_CLASSIFICATION	4.5576785334510187E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9995442321466549	WITHOUT_CLASSIFICATION	4.5576785334510187E-4	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9995616073418195	WITHOUT_CLASSIFICATION	4.3839265818053786E-4	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9997736474124522	WITHOUT_CLASSIFICATION	2.2635258754775576E-4	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9998542214582278	WITHOUT_CLASSIFICATION	1.4577854177222498E-4	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9996564935970839	WITHOUT_CLASSIFICATION	3.435064029160332E-4	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.999754852444384	WITHOUT_CLASSIFICATION	2.451475556159281E-4	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9998950935460489	WITHOUT_CLASSIFICATION	1.04906453951079E-4	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9997022459052415	WITHOUT_CLASSIFICATION	2.977540947585305E-4	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9998099987410957	WITHOUT_CLASSIFICATION	1.9000125890437716E-4	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.999814489438583	WITHOUT_CLASSIFICATION	1.855105614170417E-4	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9997540081824925	WITHOUT_CLASSIFICATION	2.459918175075514E-4	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9995223021673549	WITHOUT_CLASSIFICATION	4.776978326450069E-4	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9996534135979154	WITHOUT_CLASSIFICATION	3.465864020845873E-4	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998827575303642	WITHOUT_CLASSIFICATION	1.1724246963583761E-4	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9998682818316998	WITHOUT_CLASSIFICATION	1.3171816830014966E-4	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9997022459052415	WITHOUT_CLASSIFICATION	2.977540947585305E-4	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9998489266886156	WITHOUT_CLASSIFICATION	1.5107331138446798E-4	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9998659129071659	WITHOUT_CLASSIFICATION	1.3408709283412525E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9986002968351672	WITHOUT_CLASSIFICATION	0.00139970316483285	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9986002968351672	WITHOUT_CLASSIFICATION	0.00139970316483285	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9965154475867984	WITHOUT_CLASSIFICATION	0.003484552413201517	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9995442321466549	WITHOUT_CLASSIFICATION	4.5576785334510187E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9996534135979154	WITHOUT_CLASSIFICATION	3.465864020845873E-4	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9998050873090758	WITHOUT_CLASSIFICATION	1.9491269092425522E-4	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9996961668172305	WITHOUT_CLASSIFICATION	3.0383318276943445E-4	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9998653452703915	WITHOUT_CLASSIFICATION	1.3465472960845035E-4	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9997354547326233	WITHOUT_CLASSIFICATION	2.645452673767634E-4	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998399134238032	WITHOUT_CLASSIFICATION	1.6008657619676075E-4	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9996731330915871	WITHOUT_CLASSIFICATION	3.268669084127985E-4	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.999608038487391	WITHOUT_CLASSIFICATION	3.91961512609045E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999665406113321	WITHOUT_CLASSIFICATION	3.345938866790439E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999665406113321	WITHOUT_CLASSIFICATION	3.345938866790439E-4	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9998843938765719	WITHOUT_CLASSIFICATION	1.1560612342804225E-4	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999604251798541	WITHOUT_CLASSIFICATION	3.957482014595747E-5	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9997443604458596	WITHOUT_CLASSIFICATION	2.5563955414046E-4	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9996387144848838	WITHOUT_CLASSIFICATION	3.6128551511618753E-4	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9998621186964533	WITHOUT_CLASSIFICATION	1.378813035467578E-4	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.99989398999559	WITHOUT_CLASSIFICATION	1.0601000441003997E-4	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9997378958853292	WITHOUT_CLASSIFICATION	2.621041146707367E-4	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998716142359293	WITHOUT_CLASSIFICATION	1.2838576407074337E-4	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9996585039113773	WITHOUT_CLASSIFICATION	3.4149608862262947E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9996585039113773	WITHOUT_CLASSIFICATION	3.4149608862262947E-4	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9995910041889433	WITHOUT_CLASSIFICATION	4.0899581105659384E-4	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9998304198931769	WITHOUT_CLASSIFICATION	1.6958010682315572E-4	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9995910041889433	WITHOUT_CLASSIFICATION	4.0899581105659384E-4	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.999862988699423	WITHOUT_CLASSIFICATION	1.370113005770052E-4	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9965804493828134	WITHOUT_CLASSIFICATION	0.0034195506171864863	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9986002968351672	WITHOUT_CLASSIFICATION	0.00139970316483285	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9965154475867984	WITHOUT_CLASSIFICATION	0.003484552413201517	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997174880457727	WITHOUT_CLASSIFICATION	2.8251195422732177E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9996534135979154	WITHOUT_CLASSIFICATION	3.465864020845873E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9996534135979154	WITHOUT_CLASSIFICATION	3.465864020845873E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998696071050067	WITHOUT_CLASSIFICATION	1.303928949932644E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998696071050067	WITHOUT_CLASSIFICATION	1.303928949932644E-4	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9995793788471994	WITHOUT_CLASSIFICATION	4.2062115280061324E-4	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9995288092898976	WITHOUT_CLASSIFICATION	4.7119071010234663E-4	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9998307208942003	WITHOUT_CLASSIFICATION	1.6927910579968213E-4	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9996207782569364	WITHOUT_CLASSIFICATION	3.7922174306363504E-4	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999265946447974	WITHOUT_CLASSIFICATION	7.340535520264608E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9998583423911284	WITHOUT_CLASSIFICATION	1.4165760887173412E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9996692716992219	WITHOUT_CLASSIFICATION	3.3072830077807966E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9996692716992219	WITHOUT_CLASSIFICATION	3.3072830077807966E-4	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9985172970278979	WITHOUT_CLASSIFICATION	0.0014827029721021419	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9997327369610024	WITHOUT_CLASSIFICATION	2.672630389976637E-4	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9967296000337704	WITHOUT_CLASSIFICATION	0.0032703999662295107	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.996499380085312	WITHOUT_CLASSIFICATION	0.003500619914687857	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9971189767471627	WITHOUT_CLASSIFICATION	0.002881023252837378	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9969673993602562	WITHOUT_CLASSIFICATION	0.003032600639743751	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9965276053616502	WITHOUT_CLASSIFICATION	0.0034723946383497504	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9965276053616502	WITHOUT_CLASSIFICATION	0.0034723946383497504	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9965115141713373	WITHOUT_CLASSIFICATION	0.0034884858286626133	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9965115141713373	WITHOUT_CLASSIFICATION	0.0034884858286626133	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9995283885540615	WITHOUT_CLASSIFICATION	4.716114459385874E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9995283885540615	WITHOUT_CLASSIFICATION	4.716114459385874E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999737695974049	WITHOUT_CLASSIFICATION	2.6230402595097085E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999737695974049	WITHOUT_CLASSIFICATION	2.6230402595097085E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9996692716992219	WITHOUT_CLASSIFICATION	3.3072830077807966E-4	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9969673993602562	WITHOUT_CLASSIFICATION	0.003032600639743751	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9965276053616502	WITHOUT_CLASSIFICATION	0.0034723946383497504	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9965276053616502	WITHOUT_CLASSIFICATION	0.0034723946383497504	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9965115141713373	WITHOUT_CLASSIFICATION	0.0034884858286626133	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9995283885540615	WITHOUT_CLASSIFICATION	4.716114459385874E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9995283885540615	WITHOUT_CLASSIFICATION	4.716114459385874E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999737695974049	WITHOUT_CLASSIFICATION	2.6230402595097085E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9997223028193907	WITHOUT_CLASSIFICATION	2.776971806093488E-4	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9995407854062961	WITHOUT_CLASSIFICATION	4.5921459370382243E-4	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9995089438951212	WITHOUT_CLASSIFICATION	4.910561048788792E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999300594510917	WITHOUT_CLASSIFICATION	6.994054890819864E-5	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9996808826645895	WITHOUT_CLASSIFICATION	3.1911733541050254E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9965606236490716	WITHOUT_CLASSIFICATION	0.0034393763509284266	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9996442735809742	WITHOUT_CLASSIFICATION	3.557264190258205E-4	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999189175961825	WITHOUT_CLASSIFICATION	8.10824038174622E-5	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999308215532856	WITHOUT_CLASSIFICATION	6.917844671441189E-5	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999550966871877	WITHOUT_CLASSIFICATION	4.490331281230138E-5	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998161963229629	WITHOUT_CLASSIFICATION	1.8380367703703471E-4	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9998869874873096	WITHOUT_CLASSIFICATION	1.1301251269038015E-4	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9995542062358622	WITHOUT_CLASSIFICATION	4.4579376413784045E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9965606236490716	WITHOUT_CLASSIFICATION	0.0034393763509284266	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999076585752816	WITHOUT_CLASSIFICATION	9.234142471841539E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999780821972227	WITHOUT_CLASSIFICATION	2.1917802777269983E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999780821972227	WITHOUT_CLASSIFICATION	2.1917802777269983E-5	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999617236027213	WITHOUT_CLASSIFICATION	3.82763972787707E-5	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9998474175345407	WITHOUT_CLASSIFICATION	1.5258246545941305E-4	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9998792413744508	WITHOUT_CLASSIFICATION	1.2075862554921212E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999784943014026	WITHOUT_CLASSIFICATION	2.1505698597394128E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999784943014026	WITHOUT_CLASSIFICATION	2.1505698597394128E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999709231336626	WITHOUT_CLASSIFICATION	2.9076866337302445E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999713284692399	WITHOUT_CLASSIFICATION	2.867153076008475E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999713284692399	WITHOUT_CLASSIFICATION	2.867153076008475E-5	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999238879476754	WITHOUT_CLASSIFICATION	7.611205232470665E-5	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9998311870209194	WITHOUT_CLASSIFICATION	1.6881297908067475E-4	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.999742101088678	WITHOUT_CLASSIFICATION	2.5789891132203406E-4	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9995240472426431	WITHOUT_CLASSIFICATION	4.7595275735683705E-4	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9966037574251202	WITHOUT_CLASSIFICATION	0.003396242574879764	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9966969558623222	WITHOUT_CLASSIFICATION	0.0033030441376777396	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9908173591887965	WITHOUT_CLASSIFICATION	0.009182640811203508	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9995881140264343	WITHOUT_CLASSIFICATION	4.1188597356565135E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9998862873826893	WITHOUT_CLASSIFICATION	1.1371261731077543E-4	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999169189157511	WITHOUT_CLASSIFICATION	8.308108424889365E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999716338590093	WITHOUT_CLASSIFICATION	2.836614099061755E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9997761176602712	WITHOUT_CLASSIFICATION	2.2388233972876336E-4	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9998033915003831	WITHOUT_CLASSIFICATION	1.9660849961676248E-4	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9995275250548534	WITHOUT_CLASSIFICATION	4.724749451466666E-4	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9966721765058235	WITHOUT_CLASSIFICATION	0.00332782349417646	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9996242818920571	WITHOUT_CLASSIFICATION	3.757181079429225E-4	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9995793788471994	WITHOUT_CLASSIFICATION	4.2062115280061324E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9995228034091562	WITHOUT_CLASSIFICATION	4.7719659084375396E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9997586283754839	WITHOUT_CLASSIFICATION	2.413716245160563E-4	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9997406497538552	WITHOUT_CLASSIFICATION	2.5935024614474124E-4	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9996383952112501	WITHOUT_CLASSIFICATION	3.6160478874981597E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9966969558623222	WITHOUT_CLASSIFICATION	0.0033030441376777396	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9995228034091562	WITHOUT_CLASSIFICATION	4.7719659084375396E-4	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9997406497538552	WITHOUT_CLASSIFICATION	2.5935024614474124E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999756412482295	WITHOUT_CLASSIFICATION	2.4358751770498844E-4	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9997113555338532	WITHOUT_CLASSIFICATION	2.8864446614683365E-4	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9997140641224824	WITHOUT_CLASSIFICATION	2.859358775176537E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9995740679912607	WITHOUT_CLASSIFICATION	4.2593200873920414E-4	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9997755972330316	WITHOUT_CLASSIFICATION	2.2440276696849158E-4	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9996215566240515	WITHOUT_CLASSIFICATION	3.784433759484147E-4	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999598990732518	WITHOUT_CLASSIFICATION	4.0100926748185915E-5	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9996374616549166	WITHOUT_CLASSIFICATION	3.62538345083396E-4	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9998549876351129	WITHOUT_CLASSIFICATION	1.45012364886995E-4	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999192368047972	WITHOUT_CLASSIFICATION	8.076319520278768E-5	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9998135063708884	WITHOUT_CLASSIFICATION	1.8649362911157203E-4	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9998706391743736	WITHOUT_CLASSIFICATION	1.2936082562639125E-4	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999333101674827	WITHOUT_CLASSIFICATION	6.668983251736933E-5	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9995267914925544	WITHOUT_CLASSIFICATION	4.7320850744558216E-4	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9979166200488462	WITHOUT_CLASSIFICATION	0.0020833799511537627	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998565005301443	WITHOUT_CLASSIFICATION	1.4349946985576224E-4	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9995228034091562	WITHOUT_CLASSIFICATION	4.7719659084375396E-4	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9997444309462122	WITHOUT_CLASSIFICATION	2.555690537877485E-4	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9998272732978855	WITHOUT_CLASSIFICATION	1.7272670211458126E-4	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9997834198229871	WITHOUT_CLASSIFICATION	2.1658017701291536E-4	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9998857190950798	WITHOUT_CLASSIFICATION	1.1428090492026979E-4	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9997130282648062	WITHOUT_CLASSIFICATION	2.869717351937725E-4	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9997726682872473	WITHOUT_CLASSIFICATION	2.273317127527614E-4	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999705639074329	WITHOUT_CLASSIFICATION	2.943609256710828E-5	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9998840618455829	WITHOUT_CLASSIFICATION	1.1593815441718766E-4	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9995468358085904	WITHOUT_CLASSIFICATION	4.5316419140959985E-4	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9995793788471994	WITHOUT_CLASSIFICATION	4.2062115280061324E-4	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9954503868444582	WITHOUT_CLASSIFICATION	0.00454961315554181	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998475903980425	WITHOUT_CLASSIFICATION	1.5240960195755446E-4	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9998073749095925	WITHOUT_CLASSIFICATION	1.9262509040745272E-4	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9998232599394083	WITHOUT_CLASSIFICATION	1.767400605915397E-4	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9995979827604833	WITHOUT_CLASSIFICATION	4.020172395167892E-4	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9995601856448189	WITHOUT_CLASSIFICATION	4.3981435518109874E-4	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9996979503729789	WITHOUT_CLASSIFICATION	3.0204962702107426E-4	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9995666949218247	WITHOUT_CLASSIFICATION	4.3330507817529516E-4	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999797974063717	WITHOUT_CLASSIFICATION	2.0202593628326868E-5	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999027311595569	WITHOUT_CLASSIFICATION	9.726884044313535E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998754620785164	WITHOUT_CLASSIFICATION	1.245379214835162E-4	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9996943069785745	WITHOUT_CLASSIFICATION	3.0569302142547874E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997752857168122	WITHOUT_CLASSIFICATION	2.247142831878387E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997752857168122	WITHOUT_CLASSIFICATION	2.247142831878387E-4	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9995967372743929	WITHOUT_CLASSIFICATION	4.0326272560702216E-4	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9997537948627941	WITHOUT_CLASSIFICATION	2.4620513720580736E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999325642430982	WITHOUT_CLASSIFICATION	6.743575690179885E-5	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9998569301025187	WITHOUT_CLASSIFICATION	1.4306989748125043E-4	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998638893184146	WITHOUT_CLASSIFICATION	1.3611068158536806E-4	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9998246424728428	WITHOUT_CLASSIFICATION	1.753575271572985E-4	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9996038070285099	WITHOUT_CLASSIFICATION	3.9619297149009797E-4	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999105979120779	WITHOUT_CLASSIFICATION	8.940208792204806E-5	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998371160817605	WITHOUT_CLASSIFICATION	1.6288391823947535E-4	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.999623064210774	WITHOUT_CLASSIFICATION	3.7693578922614614E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.999591680601341	WITHOUT_CLASSIFICATION	4.083193986590393E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9997682249026776	WITHOUT_CLASSIFICATION	2.3177509732244674E-4	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999076730562599	WITHOUT_CLASSIFICATION	9.232694374005157E-5	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9998651976139385	WITHOUT_CLASSIFICATION	1.3480238606149752E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999735416392498	WITHOUT_CLASSIFICATION	2.645836075020753E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997526502131773	WITHOUT_CLASSIFICATION	2.473497868226555E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999585853684004	WITHOUT_CLASSIFICATION	4.141463159965643E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999279522365411	WITHOUT_CLASSIFICATION	7.204776345894797E-5	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.999857825900056	WITHOUT_CLASSIFICATION	1.421740999439578E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9998069252631817	WITHOUT_CLASSIFICATION	1.9307473681840203E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9967987151946901	WITHOUT_CLASSIFICATION	0.003201284805309822	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9967987151946901	WITHOUT_CLASSIFICATION	0.003201284805309822	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9995265180348202	WITHOUT_CLASSIFICATION	4.7348196517987715E-4	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9995265180348202	WITHOUT_CLASSIFICATION	4.7348196517987715E-4	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998754620785164	WITHOUT_CLASSIFICATION	1.245379214835162E-4	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9997456298000618	WITHOUT_CLASSIFICATION	2.543701999382002E-4	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998267550995606	WITHOUT_CLASSIFICATION	1.73244900439284E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999706768560957	WITHOUT_CLASSIFICATION	2.932314390430837E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9996268298428311	WITHOUT_CLASSIFICATION	3.7317015716885983E-4	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998267550995606	WITHOUT_CLASSIFICATION	1.73244900439284E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999706768560957	WITHOUT_CLASSIFICATION	2.932314390430837E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997826048325479	WITHOUT_CLASSIFICATION	2.173951674521961E-4	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9998616604959667	WITHOUT_CLASSIFICATION	1.3833950403337102E-4	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.999959391078031	WITHOUT_CLASSIFICATION	4.060892196894574E-5	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999116258763371	WITHOUT_CLASSIFICATION	8.837412366287508E-5	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999556708474707	WITHOUT_CLASSIFICATION	4.432915252935519E-5	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999442971828065	WITHOUT_CLASSIFICATION	5.570281719350251E-5	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9997238712199603	WITHOUT_CLASSIFICATION	2.761287800397776E-4	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9997090044754715	WITHOUT_CLASSIFICATION	2.9099552452848857E-4	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999503256417295	WITHOUT_CLASSIFICATION	4.967435827050086E-5	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999259996990113	WITHOUT_CLASSIFICATION	7.400030098863455E-5	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999347773800029	WITHOUT_CLASSIFICATION	6.52226199970549E-5	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999383022655043	WITHOUT_CLASSIFICATION	6.169773449574168E-5	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.999647054170879	WITHOUT_CLASSIFICATION	3.52945829120994E-4	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9997114645055042	WITHOUT_CLASSIFICATION	2.8853549449576836E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9996268298428311	WITHOUT_CLASSIFICATION	3.7317015716885983E-4	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9997051124632679	WITHOUT_CLASSIFICATION	2.9488753673209575E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9996634159508199	WITHOUT_CLASSIFICATION	3.365840491801805E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9996634159508199	WITHOUT_CLASSIFICATION	3.365840491801805E-4	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9998310076995636	WITHOUT_CLASSIFICATION	1.6899230043645062E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997826048325479	WITHOUT_CLASSIFICATION	2.173951674521961E-4	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9997366831607418	WITHOUT_CLASSIFICATION	2.633168392580678E-4	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9998439867437113	WITHOUT_CLASSIFICATION	1.560132562886238E-4	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9884835104273486	WITHOUT_CLASSIFICATION	0.011516489572651466	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998804489712616	WITHOUT_CLASSIFICATION	1.1955102873844985E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997188705189564	WITHOUT_CLASSIFICATION	2.811294810436033E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997826048325479	WITHOUT_CLASSIFICATION	2.173951674521961E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998804489712616	WITHOUT_CLASSIFICATION	1.1955102873844985E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997188705189564	WITHOUT_CLASSIFICATION	2.811294810436033E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9997818779456578	WITHOUT_CLASSIFICATION	2.1812205434216283E-4	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9995290085997841	WITHOUT_CLASSIFICATION	4.709914002159874E-4	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999844256159756	WITHOUT_CLASSIFICATION	1.557438402441087E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997826048325479	WITHOUT_CLASSIFICATION	2.173951674521961E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997826048325479	WITHOUT_CLASSIFICATION	2.173951674521961E-4	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9995711797162228	WITHOUT_CLASSIFICATION	4.288202837772145E-4	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9995740067811997	WITHOUT_CLASSIFICATION	4.2599321880041176E-4	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.999735105805286	WITHOUT_CLASSIFICATION	2.648941947139654E-4	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998492071625384	WITHOUT_CLASSIFICATION	1.507928374616321E-4	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9997634551439476	WITHOUT_CLASSIFICATION	2.3654485605248662E-4	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999862742174977	WITHOUT_CLASSIFICATION	1.372578250231188E-4	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9998053885106731	WITHOUT_CLASSIFICATION	1.9461148932687334E-4	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9997607907145472	WITHOUT_CLASSIFICATION	2.3920928545290228E-4	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999372931798738	WITHOUT_CLASSIFICATION	6.270682012623527E-5	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9996476714120486	WITHOUT_CLASSIFICATION	3.523285879514081E-4	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999568438750986	WITHOUT_CLASSIFICATION	4.315612490132277E-5	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9998376485912398	WITHOUT_CLASSIFICATION	1.6235140876016537E-4	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999506732416985	WITHOUT_CLASSIFICATION	4.93267583015024E-5	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9997089773245291	WITHOUT_CLASSIFICATION	2.9102267547084814E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99986287839041	WITHOUT_CLASSIFICATION	1.3712160959000318E-4	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999767189172606	WITHOUT_CLASSIFICATION	2.3281082739437554E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997881812107813	WITHOUT_CLASSIFICATION	2.1181878921873714E-4	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9998485878478688	WITHOUT_CLASSIFICATION	1.5141215213128743E-4	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9998094155667773	WITHOUT_CLASSIFICATION	1.9058443322284658E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9998284790033284	WITHOUT_CLASSIFICATION	1.7152099667161342E-4	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9995497326191086	WITHOUT_CLASSIFICATION	4.502673808913896E-4	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9995501355384138	WITHOUT_CLASSIFICATION	4.4986446158618736E-4	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9995501355384138	WITHOUT_CLASSIFICATION	4.4986446158618736E-4	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997881812107813	WITHOUT_CLASSIFICATION	2.1181878921873714E-4	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.999808964274123	WITHOUT_CLASSIFICATION	1.9103572587693033E-4	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9998929614566251	WITHOUT_CLASSIFICATION	1.0703854337488746E-4	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9996176230040323	WITHOUT_CLASSIFICATION	3.823769959677567E-4	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9998113406755195	WITHOUT_CLASSIFICATION	1.8865932448050823E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999487367579901	WITHOUT_CLASSIFICATION	5.1263242009939134E-5	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999418475901491	WITHOUT_CLASSIFICATION	5.815240985091964E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999379712430099	WITHOUT_CLASSIFICATION	6.202875699008324E-5	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9996536161289469	WITHOUT_CLASSIFICATION	3.463838710531306E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999825256421333	WITHOUT_CLASSIFICATION	1.7474357866757782E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998224107154964	WITHOUT_CLASSIFICATION	1.7758928450364273E-4	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9997901058906027	WITHOUT_CLASSIFICATION	2.0989410939725966E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999170572021151	WITHOUT_CLASSIFICATION	8.294279788491017E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999143309501426	WITHOUT_CLASSIFICATION	8.566904985744919E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9997194774448178	WITHOUT_CLASSIFICATION	2.805225551821821E-4	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999645092628245	WITHOUT_CLASSIFICATION	3.549073717546413E-5	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999555917642795	WITHOUT_CLASSIFICATION	4.440823572049983E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9997477810970833	WITHOUT_CLASSIFICATION	2.522189029166664E-4	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9998938051256671	WITHOUT_CLASSIFICATION	1.0619487433284795E-4	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9996891882201592	WITHOUT_CLASSIFICATION	3.1081177984077326E-4	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998502213727171	WITHOUT_CLASSIFICATION	1.497786272829734E-4	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999324688645682	WITHOUT_CLASSIFICATION	6.753113543169655E-5	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9998047789171842	WITHOUT_CLASSIFICATION	1.9522108281569414E-4	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999539404872975	WITHOUT_CLASSIFICATION	4.6059512702489304E-5	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990606921884784	WITHOUT_CLASSIFICATION	9.393078115215316E-4	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994249323703891	WITHOUT_CLASSIFICATION	5.750676296108958E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994607703024726	WITHOUT_CLASSIFICATION	5.392296975274657E-4	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997651425719533	WITHOUT_CLASSIFICATION	2.348574280467354E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993678981609381	WITHOUT_CLASSIFICATION	6.321018390619467E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995905681353024	WITHOUT_CLASSIFICATION	4.0943186469753333E-4	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993603835030072	WITHOUT_CLASSIFICATION	6.396164969928703E-4	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994303987092562	WITHOUT_CLASSIFICATION	5.696012907438948E-4	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9997676843625385	WITHOUT_CLASSIFICATION	2.3231563746139544E-4	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9997970965761903	WITHOUT_CLASSIFICATION	2.0290342380972E-4	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996254077256989	WITHOUT_CLASSIFICATION	3.7459227430107576E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996141376392224	WITHOUT_CLASSIFICATION	3.858623607776211E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995911776752064	WITHOUT_CLASSIFICATION	4.088223247936127E-4	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996201489841979	WITHOUT_CLASSIFICATION	3.79851015802177E-4	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996449061289457	WITHOUT_CLASSIFICATION	3.550938710542217E-4	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993752739848819	WITHOUT_CLASSIFICATION	6.247260151180735E-4	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994414744907498	WITHOUT_CLASSIFICATION	5.585255092501684E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993601237098476	WITHOUT_CLASSIFICATION	6.398762901524555E-4	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998224019975792	WITHOUT_CLASSIFICATION	1.7759800242078138E-4	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999844452071225	WITHOUT_CLASSIFICATION	1.5554792877505667E-4	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9998949590048499	WITHOUT_CLASSIFICATION	1.0504099515004281E-4	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998184906892548	WITHOUT_CLASSIFICATION	1.815093107452568E-4	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999363330332833	WITHOUT_CLASSIFICATION	6.366696671665445E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996621011505173	WITHOUT_CLASSIFICATION	3.3789884948265137E-4	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9995361608514745	WITHOUT_CLASSIFICATION	4.638391485255782E-4	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998240881884463	WITHOUT_CLASSIFICATION	1.7591181155366333E-4	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9997739799588536	WITHOUT_CLASSIFICATION	2.2602004114646016E-4	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9995496651633643	WITHOUT_CLASSIFICATION	4.503348366356935E-4	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9995357157778508	WITHOUT_CLASSIFICATION	4.6428422214917755E-4	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9996118205606279	WITHOUT_CLASSIFICATION	3.88179439372076E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998224107154964	WITHOUT_CLASSIFICATION	1.7758928450364273E-4	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9995808307257356	WITHOUT_CLASSIFICATION	4.1916927426455025E-4	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999699658571775	WITHOUT_CLASSIFICATION	3.0034142822431298E-5	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9997205929799676	WITHOUT_CLASSIFICATION	2.794070200323304E-4	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9998000016685572	WITHOUT_CLASSIFICATION	1.9999833144282163E-4	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999796036963733	WITHOUT_CLASSIFICATION	2.039630362676022E-5	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997762656623821	WITHOUT_CLASSIFICATION	2.2373433761796484E-4	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998726066482277	WITHOUT_CLASSIFICATION	1.273933517722803E-4	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997749318913763	WITHOUT_CLASSIFICATION	2.2506810862361892E-4	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997620793482511	WITHOUT_CLASSIFICATION	2.3792065174894566E-4	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9961223043542151	WITHOUT_CLASSIFICATION	0.0038776956457848553	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9998377184495265	WITHOUT_CLASSIFICATION	1.6228155047355282E-4	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9998761333325198	WITHOUT_CLASSIFICATION	1.2386666748026432E-4	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998942777034229	WITHOUT_CLASSIFICATION	1.0572229657709146E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997416387366208	WITHOUT_CLASSIFICATION	2.5836126337910696E-4	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9998751800939655	WITHOUT_CLASSIFICATION	1.2481990603456814E-4	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9998782217631054	WITHOUT_CLASSIFICATION	1.2177823689460834E-4	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9998104752388922	WITHOUT_CLASSIFICATION	1.8952476110780108E-4	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998965093210707	WITHOUT_CLASSIFICATION	1.0349067892935219E-4	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9997727313314112	WITHOUT_CLASSIFICATION	2.2726866858873844E-4	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9983094046136631	WITHOUT_CLASSIFICATION	0.0016905953863369243	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999247582774283	WITHOUT_CLASSIFICATION	7.524172257164909E-5	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9997784318065973	WITHOUT_CLASSIFICATION	2.2156819340265376E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998224107154964	WITHOUT_CLASSIFICATION	1.7758928450364273E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996621011505173	WITHOUT_CLASSIFICATION	3.3789884948265137E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998675863503153	WITHOUT_CLASSIFICATION	1.3241364968479599E-4	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999623074114515	WITHOUT_CLASSIFICATION	3.769258854859594E-5	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9996701944030899	WITHOUT_CLASSIFICATION	3.2980559691006854E-4	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998184906892548	WITHOUT_CLASSIFICATION	1.815093107452568E-4	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999785369478701	WITHOUT_CLASSIFICATION	2.146305212990973E-4	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9996201655246234	WITHOUT_CLASSIFICATION	3.798344753765741E-4	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9996429242156452	WITHOUT_CLASSIFICATION	3.5707578435478256E-4	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9998097842795737	WITHOUT_CLASSIFICATION	1.9021572042625365E-4	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9998045766203466	WITHOUT_CLASSIFICATION	1.9542337965344477E-4	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998563964519298	WITHOUT_CLASSIFICATION	1.4360354807011025E-4	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999803256752478	WITHOUT_CLASSIFICATION	1.9674324752188733E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997931988914527	WITHOUT_CLASSIFICATION	2.0680110854727647E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999165830391316	WITHOUT_CLASSIFICATION	8.341696086845115E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998224107154964	WITHOUT_CLASSIFICATION	1.7758928450364273E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998224107154964	WITHOUT_CLASSIFICATION	1.7758928450364273E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999666456468137	WITHOUT_CLASSIFICATION	3.3354353186294046E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9995737834754455	WITHOUT_CLASSIFICATION	4.2621652455453575E-4	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.999747088349957	WITHOUT_CLASSIFICATION	2.5291165004305034E-4	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9996485622003322	WITHOUT_CLASSIFICATION	3.5143779966773233E-4	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998274342819992	WITHOUT_CLASSIFICATION	1.7256571800092357E-4	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9998045775325077	WITHOUT_CLASSIFICATION	1.9542246749219489E-4	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9997572448414221	WITHOUT_CLASSIFICATION	2.4275515857783876E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998224107154964	WITHOUT_CLASSIFICATION	1.7758928450364273E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9998876862049612	WITHOUT_CLASSIFICATION	1.1231379503886896E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9998997095406611	WITHOUT_CLASSIFICATION	1.0029045933888482E-4	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998916195386371	WITHOUT_CLASSIFICATION	1.0838046136281482E-4	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9997705402642378	WITHOUT_CLASSIFICATION	2.2945973576206098E-4	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9997711704039057	WITHOUT_CLASSIFICATION	2.2882959609430502E-4	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9997503404031332	WITHOUT_CLASSIFICATION	2.4965959686684713E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9995445431819836	WITHOUT_CLASSIFICATION	4.5545681801637927E-4	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9996012399306111	WITHOUT_CLASSIFICATION	3.9876006938892674E-4	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998252559557651	WITHOUT_CLASSIFICATION	1.7474404423487692E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996621011505173	WITHOUT_CLASSIFICATION	3.3789884948265137E-4	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999029858757125	WITHOUT_CLASSIFICATION	9.70141242876446E-5	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999876022987804	WITHOUT_CLASSIFICATION	1.2397701219736665E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999341115503922	WITHOUT_CLASSIFICATION	6.588844960774181E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996621011505173	WITHOUT_CLASSIFICATION	3.3789884948265137E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9996812464956075	WITHOUT_CLASSIFICATION	3.1875350439249274E-4	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9998876862049612	WITHOUT_CLASSIFICATION	1.1231379503886896E-4	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9997830689469052	WITHOUT_CLASSIFICATION	2.1693105309483892E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998224107154964	WITHOUT_CLASSIFICATION	1.7758928450364273E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.99978955716082	WITHOUT_CLASSIFICATION	2.1044283918004826E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998224107154964	WITHOUT_CLASSIFICATION	1.7758928450364273E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999760665029525	WITHOUT_CLASSIFICATION	2.393349704759918E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998563964519298	WITHOUT_CLASSIFICATION	1.4360354807011025E-4	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999803256752478	WITHOUT_CLASSIFICATION	1.9674324752188733E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997931988914527	WITHOUT_CLASSIFICATION	2.0680110854727647E-4	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.999954296192484	WITHOUT_CLASSIFICATION	4.5703807516053766E-5	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9998519674954248	WITHOUT_CLASSIFICATION	1.4803250457518137E-4	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999387938469664	WITHOUT_CLASSIFICATION	6.12061530335911E-5	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999447403766217	WITHOUT_CLASSIFICATION	5.5259623378120574E-5	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999240701219071	WITHOUT_CLASSIFICATION	7.592987809292129E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998224107154964	WITHOUT_CLASSIFICATION	1.7758928450364273E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996621011505173	WITHOUT_CLASSIFICATION	3.3789884948265137E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999165830391316	WITHOUT_CLASSIFICATION	8.341696086845115E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999666456468137	WITHOUT_CLASSIFICATION	3.3354353186294046E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998509238050165	WITHOUT_CLASSIFICATION	1.4907619498352262E-4	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998425578755711	WITHOUT_CLASSIFICATION	1.5744212442884127E-4	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9998187263532339	WITHOUT_CLASSIFICATION	1.8127364676613934E-4	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9998733212123692	WITHOUT_CLASSIFICATION	1.2667878763082728E-4	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9997614167801644	WITHOUT_CLASSIFICATION	2.385832198354639E-4	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9998885427054331	WITHOUT_CLASSIFICATION	1.1145729456689904E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993601237098476	WITHOUT_CLASSIFICATION	6.398762901524555E-4	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999137017912499	WITHOUT_CLASSIFICATION	8.629820875012697E-5	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9995841631662878	WITHOUT_CLASSIFICATION	4.1583683371216457E-4	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9994712087531301	WITHOUT_CLASSIFICATION	5.287912468698462E-4	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999523030273592	WITHOUT_CLASSIFICATION	4.769697264090768E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9996347739285831	WITHOUT_CLASSIFICATION	3.652260714168502E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993678981609381	WITHOUT_CLASSIFICATION	6.321018390619467E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995905681353024	WITHOUT_CLASSIFICATION	4.0943186469753333E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996141376392224	WITHOUT_CLASSIFICATION	3.858623607776211E-4	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9996347739285831	WITHOUT_CLASSIFICATION	3.652260714168502E-4	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999271236880451	WITHOUT_CLASSIFICATION	7.287631195476234E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9997670437911105	WITHOUT_CLASSIFICATION	2.3295620888946878E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994033383418801	WITHOUT_CLASSIFICATION	5.96661658119883E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999360529598972	WITHOUT_CLASSIFICATION	6.394704010279781E-4	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999118478817328	WITHOUT_CLASSIFICATION	8.815211826724748E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998224107154964	WITHOUT_CLASSIFICATION	1.7758928450364273E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998224107154964	WITHOUT_CLASSIFICATION	1.7758928450364273E-4	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.999553854831642	WITHOUT_CLASSIFICATION	4.461451683580536E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995911776752064	WITHOUT_CLASSIFICATION	4.088223247936127E-4	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993752739848819	WITHOUT_CLASSIFICATION	6.247260151180735E-4	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998965093210707	WITHOUT_CLASSIFICATION	1.0349067892935219E-4	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999710187782228	WITHOUT_CLASSIFICATION	2.8981221777189945E-5	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999225961453561	WITHOUT_CLASSIFICATION	7.740385464388571E-5	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999697347136989	WITHOUT_CLASSIFICATION	3.026528630109388E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999567981951947	WITHOUT_CLASSIFICATION	4.32018048053256E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999589538595354	WITHOUT_CLASSIFICATION	4.10461404645506E-5	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9998177641104883	WITHOUT_CLASSIFICATION	1.822358895116494E-4	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9997839924187604	WITHOUT_CLASSIFICATION	2.16007581239691E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9995366933588581	WITHOUT_CLASSIFICATION	4.633066411419043E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999825256421333	WITHOUT_CLASSIFICATION	1.7474357866757782E-5	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9900492458562785	WITHOUT_CLASSIFICATION	0.009950754143721447	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999365325071604	WITHOUT_CLASSIFICATION	6.346749283968778E-5	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999288680915069	WITHOUT_CLASSIFICATION	7.1131908493113E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998705621157367	WITHOUT_CLASSIFICATION	1.2943788426338516E-4	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9997167957752409	WITHOUT_CLASSIFICATION	2.832042247590661E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999575707974455	WITHOUT_CLASSIFICATION	4.242920255450658E-4	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998326107118741	WITHOUT_CLASSIFICATION	1.6738928812598208E-4	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9941212450034911	WITHOUT_CLASSIFICATION	0.005878754996508854	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999201107869239	WITHOUT_CLASSIFICATION	7.988921307611927E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9996628420613564	WITHOUT_CLASSIFICATION	3.371579386436302E-4	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9995242250546965	WITHOUT_CLASSIFICATION	4.7577494530345925E-4	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998883449363395	WITHOUT_CLASSIFICATION	1.1165506366049795E-4	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998920113052899	WITHOUT_CLASSIFICATION	1.0798869471003637E-4	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99986468980998	WITHOUT_CLASSIFICATION	1.3531019002005612E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999123568341213	WITHOUT_CLASSIFICATION	8.764316587874003E-5	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999675033268344	WITHOUT_CLASSIFICATION	3.249667316561326E-4	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9997506828160927	WITHOUT_CLASSIFICATION	2.493171839072415E-4	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998721094803803	WITHOUT_CLASSIFICATION	1.2789051961970406E-4	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998696501030122	WITHOUT_CLASSIFICATION	1.303498969878847E-4	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998530903655926	WITHOUT_CLASSIFICATION	1.4690963440737602E-4	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998650499685459	WITHOUT_CLASSIFICATION	1.3495003145410625E-4	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9998853524054533	WITHOUT_CLASSIFICATION	1.1464759454669537E-4	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999954420353768	WITHOUT_CLASSIFICATION	4.557964623086007E-6	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999347299467853	WITHOUT_CLASSIFICATION	6.527005321458918E-5	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.99959117966471	WITHOUT_CLASSIFICATION	4.088203352899394E-4	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.999650346574913	WITHOUT_CLASSIFICATION	3.4965342508698325E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.999650346574913	WITHOUT_CLASSIFICATION	3.4965342508698325E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9998840309576813	WITHOUT_CLASSIFICATION	1.159690423187096E-4	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9998605085111939	WITHOUT_CLASSIFICATION	1.394914888060923E-4	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9997640418807278	WITHOUT_CLASSIFICATION	2.359581192722719E-4	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9998155574377534	WITHOUT_CLASSIFICATION	1.844425622465983E-4	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999743935941418	WITHOUT_CLASSIFICATION	2.5606405858336903E-5	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999282746818794	WITHOUT_CLASSIFICATION	7.172531812058186E-5	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999924266930031	WITHOUT_CLASSIFICATION	7.573306996765361E-6	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999672664700016	WITHOUT_CLASSIFICATION	3.27335299984157E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999712939390487	WITHOUT_CLASSIFICATION	2.8706060951215384E-5	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.99996747165365	WITHOUT_CLASSIFICATION	3.252834635009192E-5	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999650359759004	WITHOUT_CLASSIFICATION	3.496402409972272E-5	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999953436529018	WITHOUT_CLASSIFICATION	4.656347098169556E-6	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999517831508954	WITHOUT_CLASSIFICATION	4.8216849104544347E-5	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9994721886090026	WITHOUT_CLASSIFICATION	5.278113909973661E-4	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998336470622684	WITHOUT_CLASSIFICATION	1.6635293773159277E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9998421696396995	WITHOUT_CLASSIFICATION	1.578303603004817E-4	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9998691174275105	WITHOUT_CLASSIFICATION	1.3088257248953516E-4	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9998056011365607	WITHOUT_CLASSIFICATION	1.9439886343929557E-4	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9996924902426768	WITHOUT_CLASSIFICATION	3.0750975732324727E-4	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998090877932717	WITHOUT_CLASSIFICATION	1.9091220672826453E-4	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999831117366577	WITHOUT_CLASSIFICATION	1.688826334230753E-4	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9997240603707684	WITHOUT_CLASSIFICATION	2.7593962923151466E-4	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.999867516471813	WITHOUT_CLASSIFICATION	1.324835281869234E-4	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9998341237906848	WITHOUT_CLASSIFICATION	1.6587620931510577E-4	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9998424314559875	WITHOUT_CLASSIFICATION	1.5756854401254215E-4	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9998909734831498	WITHOUT_CLASSIFICATION	1.0902651685030566E-4	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999771879339896	WITHOUT_CLASSIFICATION	2.2812066010391026E-5	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999971901664495	WITHOUT_CLASSIFICATION	2.809833550506896E-5	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999425753844684	WITHOUT_CLASSIFICATION	5.74246155315968E-5	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9995288076557678	WITHOUT_CLASSIFICATION	4.711923442322121E-4	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.999719815997643	WITHOUT_CLASSIFICATION	2.8018400235693696E-4	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9997072776053828	WITHOUT_CLASSIFICATION	2.9272239461721237E-4	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999058784827557	WITHOUT_CLASSIFICATION	9.412151724428892E-5	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9997442018719771	WITHOUT_CLASSIFICATION	2.5579812802290836E-4	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9996732377337723	WITHOUT_CLASSIFICATION	3.267622662276407E-4	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9995240898074759	WITHOUT_CLASSIFICATION	4.759101925241078E-4	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9996957495015976	WITHOUT_CLASSIFICATION	3.042504984024492E-4	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9997322721188794	WITHOUT_CLASSIFICATION	2.6772788112062405E-4	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9997971577004479	WITHOUT_CLASSIFICATION	2.0284229955210993E-4	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999361532346835	WITHOUT_CLASSIFICATION	6.384676531638844E-5	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998306547937547	WITHOUT_CLASSIFICATION	1.6934520624533954E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.999754875192097	WITHOUT_CLASSIFICATION	2.451248079029294E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9997548806106012	WITHOUT_CLASSIFICATION	2.451193893987449E-4	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999166453623585	WITHOUT_CLASSIFICATION	8.335463764157102E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.999912546800014	WITHOUT_CLASSIFICATION	8.745319998596701E-5	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999466961794831	WITHOUT_CLASSIFICATION	5.330382051689735E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999319625196614	WITHOUT_CLASSIFICATION	6.80374803386341E-5	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998776476147663	WITHOUT_CLASSIFICATION	1.2235238523371634E-4	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999003147677793	WITHOUT_CLASSIFICATION	9.96852322206689E-5	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999469895011095	WITHOUT_CLASSIFICATION	5.301049889053694E-5	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999990340290503	WITHOUT_CLASSIFICATION	9.659709497292438E-7	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9996898451256334	WITHOUT_CLASSIFICATION	3.1015487436659783E-4	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9995834006309262	WITHOUT_CLASSIFICATION	4.1659936907381917E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996721148807485	WITHOUT_CLASSIFICATION	3.2788511925151495E-4	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9997635191034999	WITHOUT_CLASSIFICATION	2.36480896500052E-4	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9996615757560486	WITHOUT_CLASSIFICATION	3.3842424395141965E-4	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9997312366014222	WITHOUT_CLASSIFICATION	2.687633985779487E-4	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9997513883806687	WITHOUT_CLASSIFICATION	2.486116193312744E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9997374961605415	WITHOUT_CLASSIFICATION	2.625038394585038E-4	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9995340435979705	WITHOUT_CLASSIFICATION	4.6595640202954015E-4	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9995357740669515	WITHOUT_CLASSIFICATION	4.642259330484366E-4	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999577067241628	WITHOUT_CLASSIFICATION	4.2293275837182824E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9995483927613706	WITHOUT_CLASSIFICATION	4.516072386294117E-4	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9996079475942576	WITHOUT_CLASSIFICATION	3.920524057423612E-4	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9998299389520023	WITHOUT_CLASSIFICATION	1.7006104799766365E-4	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9995483927613706	WITHOUT_CLASSIFICATION	4.516072386294117E-4	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9997268221486711	WITHOUT_CLASSIFICATION	2.7317785132877054E-4	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9997367167417534	WITHOUT_CLASSIFICATION	2.632832582466513E-4	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9995460159956794	WITHOUT_CLASSIFICATION	4.5398400432068145E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9989972249823983	WITHOUT_CLASSIFICATION	0.001002775017601748	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9997906859974222	WITHOUT_CLASSIFICATION	2.0931400257793577E-4	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999097201146683	WITHOUT_CLASSIFICATION	9.027988533171413E-5	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9997043387222679	WITHOUT_CLASSIFICATION	2.9566127773210664E-4	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9998356846831666	WITHOUT_CLASSIFICATION	1.6431531683325145E-4	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9997594893458648	WITHOUT_CLASSIFICATION	2.4051065413535137E-4	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9997057065706284	WITHOUT_CLASSIFICATION	2.942934293714845E-4	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999054854772659	WITHOUT_CLASSIFICATION	9.451452273411993E-5	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999279734662251	WITHOUT_CLASSIFICATION	7.202653377483773E-5	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9745971623031544	WITHOUT_CLASSIFICATION	0.025402837696845558	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999770714038967	WITHOUT_CLASSIFICATION	2.2928596103269056E-5	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999509913116362	WITHOUT_CLASSIFICATION	4.90086883638031E-5	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9998193178926689	WITHOUT_CLASSIFICATION	1.806821073310098E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9995859326311097	WITHOUT_CLASSIFICATION	4.140673688901779E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9995859326311097	WITHOUT_CLASSIFICATION	4.140673688901779E-4	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999402612748992	WITHOUT_CLASSIFICATION	5.973872510087386E-5	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9996156538413032	WITHOUT_CLASSIFICATION	3.8434615869682693E-4	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9997031844324886	WITHOUT_CLASSIFICATION	2.968155675114284E-4	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9995360731097439	WITHOUT_CLASSIFICATION	4.6392689025603944E-4	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9998930941444542	WITHOUT_CLASSIFICATION	1.0690585554585144E-4	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999155966271034	WITHOUT_CLASSIFICATION	8.440337289665904E-5	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9996514060302252	WITHOUT_CLASSIFICATION	3.4859396977481277E-4	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.99993657288434	WITHOUT_CLASSIFICATION	6.342711565999387E-5	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9996958115285939	WITHOUT_CLASSIFICATION	3.04188471406208E-4	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998485023806029	WITHOUT_CLASSIFICATION	1.514976193970529E-4	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999563415601661	WITHOUT_CLASSIFICATION	4.365843983384221E-5	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999829930559713	WITHOUT_CLASSIFICATION	1.7006944028734595E-5	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9997238057308013	WITHOUT_CLASSIFICATION	2.7619426919862233E-4	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.999845445878695	WITHOUT_CLASSIFICATION	1.5455412130500052E-4	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.99996609876742	WITHOUT_CLASSIFICATION	3.3901232579932824E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999575707974455	WITHOUT_CLASSIFICATION	4.242920255450658E-4	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.999870376637707	WITHOUT_CLASSIFICATION	1.296233622930826E-4	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999613412713617	WITHOUT_CLASSIFICATION	3.865872863820041E-5	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9998442282221027	WITHOUT_CLASSIFICATION	1.557717778973179E-4	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9996295170581747	WITHOUT_CLASSIFICATION	3.7048294182522555E-4	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998837910434538	WITHOUT_CLASSIFICATION	1.1620895654617152E-4	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9995202839687395	WITHOUT_CLASSIFICATION	4.797160312604442E-4	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.999994325914339	WITHOUT_CLASSIFICATION	5.6740856609934744E-6	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999851765908692	WITHOUT_CLASSIFICATION	1.4823409130787336E-5	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9998822122178057	WITHOUT_CLASSIFICATION	1.1778778219429229E-4	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9998902206652495	WITHOUT_CLASSIFICATION	1.0977933475051628E-4	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999705032297544	WITHOUT_CLASSIFICATION	2.9496770245443114E-5	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.999960427975608	WITHOUT_CLASSIFICATION	3.9572024392061253E-5	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999596027558931	WITHOUT_CLASSIFICATION	4.039724410680144E-5	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9995454506109649	WITHOUT_CLASSIFICATION	4.5454938903516487E-4	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9998368657303375	WITHOUT_CLASSIFICATION	1.6313426966240298E-4	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9996483374446374	WITHOUT_CLASSIFICATION	3.5166255536258625E-4	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9965112494152708	WITHOUT_CLASSIFICATION	0.0034887505847293254	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9997877198229524	WITHOUT_CLASSIFICATION	2.1228017704745232E-4	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9995839815130212	WITHOUT_CLASSIFICATION	4.160184869788111E-4	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999533745179122	WITHOUT_CLASSIFICATION	4.662548208779028E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9998372113444783	WITHOUT_CLASSIFICATION	1.6278865552165137E-4	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9995849877925664	WITHOUT_CLASSIFICATION	4.1501220743351067E-4	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999438240477723	WITHOUT_CLASSIFICATION	5.617595222766808E-5	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999715123343941	WITHOUT_CLASSIFICATION	2.84876656059542E-5	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999023014413307	WITHOUT_CLASSIFICATION	9.76985586693007E-5	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9998096978792602	WITHOUT_CLASSIFICATION	1.9030212073989627E-4	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999438994370693	WITHOUT_CLASSIFICATION	5.6100562930648264E-5	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999868560646117	WITHOUT_CLASSIFICATION	1.3143935388307816E-4	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999700878767775	WITHOUT_CLASSIFICATION	2.9912123222505053E-5	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999756824344983	WITHOUT_CLASSIFICATION	2.4317565501672105E-5	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997169662611713	WITHOUT_CLASSIFICATION	2.8303373882867237E-4	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997501997430054	WITHOUT_CLASSIFICATION	2.498002569946548E-4	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997763250130224	WITHOUT_CLASSIFICATION	2.236749869775491E-4	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999596719364356	WITHOUT_CLASSIFICATION	4.032806356425802E-5	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999342260139092	WITHOUT_CLASSIFICATION	6.577398609074998E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9995366933588581	WITHOUT_CLASSIFICATION	4.633066411419043E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9995366933588581	WITHOUT_CLASSIFICATION	4.633066411419043E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9998701042768422	WITHOUT_CLASSIFICATION	1.2989572315790125E-4	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999933653040486	WITHOUT_CLASSIFICATION	6.634695951468704E-6	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.999635997963698	WITHOUT_CLASSIFICATION	3.640020363019924E-4	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997303783597895	WITHOUT_CLASSIFICATION	2.69621640210405E-4	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.999635997963698	WITHOUT_CLASSIFICATION	3.640020363019924E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9997450272474638	WITHOUT_CLASSIFICATION	2.549727525361552E-4	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9998286503924025	WITHOUT_CLASSIFICATION	1.7134960759741019E-4	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9997242265069232	WITHOUT_CLASSIFICATION	2.757734930767788E-4	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9996936140910136	WITHOUT_CLASSIFICATION	3.0638590898626343E-4	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998096076804581	WITHOUT_CLASSIFICATION	1.9039231954194003E-4	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9998562908565638	WITHOUT_CLASSIFICATION	1.4370914343624623E-4	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9998120761947563	WITHOUT_CLASSIFICATION	1.8792380524364325E-4	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.999690841207999	WITHOUT_CLASSIFICATION	3.0915879200095345E-4	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9998801864297859	WITHOUT_CLASSIFICATION	1.1981357021401512E-4	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999096217473893	WITHOUT_CLASSIFICATION	9.037825261073682E-5	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9996633486289048	WITHOUT_CLASSIFICATION	3.366513710951845E-4	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.999766637191195	WITHOUT_CLASSIFICATION	2.333628088051E-4	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9996690869952144	WITHOUT_CLASSIFICATION	3.3091300478562096E-4	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999409543919635	WITHOUT_CLASSIFICATION	5.904560803635438E-5	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.999735741312407	WITHOUT_CLASSIFICATION	2.6425868759305873E-4	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999164816580466	WITHOUT_CLASSIFICATION	8.351834195343667E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.999885472203467	WITHOUT_CLASSIFICATION	1.1452779653293916E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.999885472203467	WITHOUT_CLASSIFICATION	1.1452779653293916E-4	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9995844310292271	WITHOUT_CLASSIFICATION	4.15568970772829E-4	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999089175350323	WITHOUT_CLASSIFICATION	9.108246496771784E-5	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.999974718099068	WITHOUT_CLASSIFICATION	2.5281900931896676E-5	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999582993531495	WITHOUT_CLASSIFICATION	4.170064685053853E-5	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999652895948842	WITHOUT_CLASSIFICATION	3.4710405115827696E-5	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999689603317975	WITHOUT_CLASSIFICATION	3.103966820254247E-5	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9997867811079187	WITHOUT_CLASSIFICATION	2.1321889208128465E-4	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9997915759157308	WITHOUT_CLASSIFICATION	2.084240842693472E-4	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9997921819091461	WITHOUT_CLASSIFICATION	2.0781809085399536E-4	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999900278881785	WITHOUT_CLASSIFICATION	9.972111821487793E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997913731684703	WITHOUT_CLASSIFICATION	2.0862683152964357E-4	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999877728592914	WITHOUT_CLASSIFICATION	1.2227140708634084E-5	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.999797367688704	WITHOUT_CLASSIFICATION	2.0263231129592887E-4	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9997459373636116	WITHOUT_CLASSIFICATION	2.540626363883999E-4	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998364505789475	WITHOUT_CLASSIFICATION	1.6354942105237385E-4	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.99995268536251	WITHOUT_CLASSIFICATION	4.7314637490014554E-5	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999056109522716	WITHOUT_CLASSIFICATION	9.438904772848109E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9998069282955672	WITHOUT_CLASSIFICATION	1.9307170443274028E-4	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9998074748463078	WITHOUT_CLASSIFICATION	1.9252515369224565E-4	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9998752760509794	WITHOUT_CLASSIFICATION	1.2472394902059882E-4	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9997766985991157	WITHOUT_CLASSIFICATION	2.233014008842634E-4	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9998195183013887	WITHOUT_CLASSIFICATION	1.8048169861126497E-4	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9998397927424777	WITHOUT_CLASSIFICATION	1.6020725752232605E-4	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9998595671858136	WITHOUT_CLASSIFICATION	1.4043281418631997E-4	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9997552073116336	WITHOUT_CLASSIFICATION	2.4479268836635347E-4	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999369535794144	WITHOUT_CLASSIFICATION	6.3046420585585E-5	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9998247466962109	WITHOUT_CLASSIFICATION	1.7525330378902215E-4	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9998874026034147	WITHOUT_CLASSIFICATION	1.1259739658530148E-4	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9996570528832158	WITHOUT_CLASSIFICATION	3.4294711678413604E-4	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999772244892616	WITHOUT_CLASSIFICATION	2.2775510738426738E-5	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9998788196610982	WITHOUT_CLASSIFICATION	1.2118033890190136E-4	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998152439931479	WITHOUT_CLASSIFICATION	1.847560068520246E-4	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999568098951259	WITHOUT_CLASSIFICATION	4.319010487399533E-5	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998048505535415	WITHOUT_CLASSIFICATION	1.9514944645857284E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999832854472813	WITHOUT_CLASSIFICATION	1.671455271869431E-5	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999921697786735	WITHOUT_CLASSIFICATION	7.830221326509677E-5	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999447904781554	WITHOUT_CLASSIFICATION	5.520952184467516E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9997851915436338	WITHOUT_CLASSIFICATION	2.1480845636624393E-4	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.999846664697283	WITHOUT_CLASSIFICATION	1.5333530271704178E-4	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999768542923097	WITHOUT_CLASSIFICATION	2.314570769028938E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997342655726507	WITHOUT_CLASSIFICATION	2.6573442734934824E-4	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9995577709533581	WITHOUT_CLASSIFICATION	4.422290466419252E-4	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9938364219942001	WITHOUT_CLASSIFICATION	0.006163578005799989	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999475940038889	WITHOUT_CLASSIFICATION	5.240599611112205E-5	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9998345742483205	WITHOUT_CLASSIFICATION	1.6542575167960828E-4	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9938537393937613	WITHOUT_CLASSIFICATION	0.00614626060623871	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999832918877508	WITHOUT_CLASSIFICATION	1.6708112249142913E-5	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.999843611751158	WITHOUT_CLASSIFICATION	1.5638824884206567E-4	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999244391809943	WITHOUT_CLASSIFICATION	7.55608190056352E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997396296475319	WITHOUT_CLASSIFICATION	2.6037035246802824E-4	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999840460426697	WITHOUT_CLASSIFICATION	1.595395733029625E-4	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999931123692437	WITHOUT_CLASSIFICATION	6.887630756313265E-6	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999878565436326	WITHOUT_CLASSIFICATION	1.2143456367398777E-4	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9995520299379473	WITHOUT_CLASSIFICATION	4.479700620527005E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9996812464956075	WITHOUT_CLASSIFICATION	3.1875350439249274E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9996812464956075	WITHOUT_CLASSIFICATION	3.1875350439249274E-4	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999983275741709	WITHOUT_CLASSIFICATION	1.672425829109455E-5	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9997990276654914	WITHOUT_CLASSIFICATION	2.0097233450850046E-4	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9998049428352327	WITHOUT_CLASSIFICATION	1.9505716476722498E-4	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999787312910615	WITHOUT_CLASSIFICATION	2.126870893851179E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9998625187969566	WITHOUT_CLASSIFICATION	1.3748120304329255E-4	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.999933556063841	WITHOUT_CLASSIFICATION	6.644393615893186E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999289955286015	WITHOUT_CLASSIFICATION	7.100447139854451E-5	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.999935020926757	WITHOUT_CLASSIFICATION	6.497907324297352E-5	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998151656998215	WITHOUT_CLASSIFICATION	1.8483430017838704E-4	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999743706724817	WITHOUT_CLASSIFICATION	2.5629327518349397E-5	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999161290208747	WITHOUT_CLASSIFICATION	8.387097912538608E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9995819907814588	WITHOUT_CLASSIFICATION	4.180092185411672E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999104210390672	WITHOUT_CLASSIFICATION	8.957896093277414E-5	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999962401244234	WITHOUT_CLASSIFICATION	3.759875576607168E-5	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999906250825632	WITHOUT_CLASSIFICATION	9.374917436803292E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999848140791964	WITHOUT_CLASSIFICATION	1.5185920803599015E-5	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.99952455226219	WITHOUT_CLASSIFICATION	4.754477378100995E-4	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999161922807387	WITHOUT_CLASSIFICATION	8.380771926131268E-5	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9995132285062635	WITHOUT_CLASSIFICATION	4.867714937364784E-4	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999661075718976	WITHOUT_CLASSIFICATION	3.389242810238466E-5	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9997110268344505	WITHOUT_CLASSIFICATION	2.889731655495423E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998706970775417	WITHOUT_CLASSIFICATION	1.2930292245825296E-4	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999676821294354	WITHOUT_CLASSIFICATION	3.231787056462133E-5	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.999962862044837	WITHOUT_CLASSIFICATION	3.7137955163031954E-5	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9998724212281822	WITHOUT_CLASSIFICATION	1.2757877181777724E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995281724583982	WITHOUT_CLASSIFICATION	4.718275416018864E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9997839777652757	WITHOUT_CLASSIFICATION	2.160222347242586E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999131071230063	WITHOUT_CLASSIFICATION	8.689287699378836E-5	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.999998604429085	WITHOUT_CLASSIFICATION	1.3955709149908257E-6	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9965176029805807	WITHOUT_CLASSIFICATION	0.0034823970194191927	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9995427701272366	WITHOUT_CLASSIFICATION	4.572298727633038E-4	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999954209696435	WITHOUT_CLASSIFICATION	4.57903035650302E-5	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999004203487768	WITHOUT_CLASSIFICATION	9.957965122325359E-5	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9998274616444146	WITHOUT_CLASSIFICATION	1.725383555855062E-4	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999486322872604	WITHOUT_CLASSIFICATION	5.1367712739585556E-5	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9997351943140961	WITHOUT_CLASSIFICATION	2.648056859038865E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9995427701272366	WITHOUT_CLASSIFICATION	4.572298727633038E-4	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999519780436221	WITHOUT_CLASSIFICATION	4.802195637796765E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999476946486465	WITHOUT_CLASSIFICATION	5.230535135353762E-5	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998260776437874	WITHOUT_CLASSIFICATION	1.739223562126151E-4	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9996999142009875	WITHOUT_CLASSIFICATION	3.0008579901249073E-4	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997913731684703	WITHOUT_CLASSIFICATION	2.0862683152964357E-4	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999790544337074	WITHOUT_CLASSIFICATION	2.094556629259763E-4	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9997755189348855	WITHOUT_CLASSIFICATION	2.244810651146145E-4	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999623301220028	WITHOUT_CLASSIFICATION	3.766987799718972E-5	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9998962332541081	WITHOUT_CLASSIFICATION	1.0376674589175545E-4	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9998637113969191	WITHOUT_CLASSIFICATION	1.3628860308103214E-4	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9998401617596687	WITHOUT_CLASSIFICATION	1.5983824033127732E-4	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.99987531448398	WITHOUT_CLASSIFICATION	1.246855160198556E-4	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999830597910311	WITHOUT_CLASSIFICATION	1.694020896892392E-5	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9995884982442848	WITHOUT_CLASSIFICATION	4.1150175571523924E-4	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9998904008389863	WITHOUT_CLASSIFICATION	1.0959916101376573E-4	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9998581639613718	WITHOUT_CLASSIFICATION	1.4183603862810487E-4	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999262328656469	WITHOUT_CLASSIFICATION	7.376713435310156E-5	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9995879621881044	WITHOUT_CLASSIFICATION	4.120378118955409E-4	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9998726406306282	WITHOUT_CLASSIFICATION	1.2735936937182822E-4	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999756368938517	WITHOUT_CLASSIFICATION	2.436310614828823E-4	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999333519430076	WITHOUT_CLASSIFICATION	6.664805699241373E-5	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9998485843289238	WITHOUT_CLASSIFICATION	1.5141567107612673E-4	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9998493229761845	WITHOUT_CLASSIFICATION	1.5067702381559378E-4	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9997199693152511	WITHOUT_CLASSIFICATION	2.8003068474900084E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9997093509587006	WITHOUT_CLASSIFICATION	2.906490412994088E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9998335162008558	WITHOUT_CLASSIFICATION	1.6648379914426062E-4	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9998753021580622	WITHOUT_CLASSIFICATION	1.2469784193780908E-4	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999209519139073	WITHOUT_CLASSIFICATION	7.904808609273803E-5	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9997896080295735	WITHOUT_CLASSIFICATION	2.1039197042646088E-4	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9994245096033206	WITHOUT_CLASSIFICATION	5.754903966793396E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999026288435082	WITHOUT_CLASSIFICATION	9.737115649188065E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997711509745749	WITHOUT_CLASSIFICATION	2.2884902542507848E-4	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995871062110405	WITHOUT_CLASSIFICATION	4.128937889594737E-4	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999288235947063	WITHOUT_CLASSIFICATION	7.117640529373142E-5	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9996606519221319	WITHOUT_CLASSIFICATION	3.3934807786801505E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999841257353393	WITHOUT_CLASSIFICATION	1.5874264660696337E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9996347977979644	WITHOUT_CLASSIFICATION	3.652022020356143E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9996347977979644	WITHOUT_CLASSIFICATION	3.652022020356143E-4	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999948531293773	WITHOUT_CLASSIFICATION	5.146870622704682E-6	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9996842385650149	WITHOUT_CLASSIFICATION	3.1576143498516823E-4	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9998541822471033	WITHOUT_CLASSIFICATION	1.4581775289658293E-4	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999955497924511	WITHOUT_CLASSIFICATION	4.450207548907117E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9997894158142667	WITHOUT_CLASSIFICATION	2.1058418573327386E-4	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9997582181234589	WITHOUT_CLASSIFICATION	2.4178187654105832E-4	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9998699527114329	WITHOUT_CLASSIFICATION	1.3004728856717124E-4	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999876556191511	WITHOUT_CLASSIFICATION	1.2344380848910614E-4	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9997463165133199	WITHOUT_CLASSIFICATION	2.5368348668017537E-4	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999766629344644	WITHOUT_CLASSIFICATION	2.333706553557866E-5	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999742038900305	WITHOUT_CLASSIFICATION	2.5796109969502477E-4	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999623543897634	WITHOUT_CLASSIFICATION	3.764561023644762E-5	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9998884585994733	WITHOUT_CLASSIFICATION	1.1154140052681927E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9996347977979644	WITHOUT_CLASSIFICATION	3.652022020356143E-4	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9997457475375305	WITHOUT_CLASSIFICATION	2.54252462469423E-4	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9997345353451986	WITHOUT_CLASSIFICATION	2.654646548013933E-4	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999240933413482	WITHOUT_CLASSIFICATION	7.590665865179401E-5	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9997845816444895	WITHOUT_CLASSIFICATION	2.15418355510574E-4	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999186256645206	WITHOUT_CLASSIFICATION	8.137433547942184E-5	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998145662040674	WITHOUT_CLASSIFICATION	1.854337959326005E-4	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999795129024105	WITHOUT_CLASSIFICATION	2.048709758945947E-5	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9998455458321872	WITHOUT_CLASSIFICATION	1.5445416781275707E-4	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999168816539251	WITHOUT_CLASSIFICATION	8.311834607484795E-5	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998573833722224	WITHOUT_CLASSIFICATION	1.4261662777756407E-4	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999096059485839	WITHOUT_CLASSIFICATION	9.039405141608327E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997711509745749	WITHOUT_CLASSIFICATION	2.2884902542507848E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9996347977979644	WITHOUT_CLASSIFICATION	3.652022020356143E-4	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9997610028429355	WITHOUT_CLASSIFICATION	2.3899715706454566E-4	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999285550991893	WITHOUT_CLASSIFICATION	7.1444900810667E-5	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9965319568443834	WITHOUT_CLASSIFICATION	0.003468043155616446	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9997491617728977	WITHOUT_CLASSIFICATION	2.5083822710230595E-4	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999491857972285	WITHOUT_CLASSIFICATION	5.0814202771621087E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9998283529233883	WITHOUT_CLASSIFICATION	1.7164707661173435E-4	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998137128040658	WITHOUT_CLASSIFICATION	1.8628719593419572E-4	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999947621393753	WITHOUT_CLASSIFICATION	5.2378606246898195E-5	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999146982521828	WITHOUT_CLASSIFICATION	8.530174781710994E-5	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9998456875156663	WITHOUT_CLASSIFICATION	1.543124843336667E-4	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999223431582311	WITHOUT_CLASSIFICATION	7.765684176889404E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999551873809778	WITHOUT_CLASSIFICATION	4.481261902227409E-5	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999346389169113	WITHOUT_CLASSIFICATION	6.536108308864817E-5	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9996116635739117	WITHOUT_CLASSIFICATION	3.8833642608818413E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9997450272474638	WITHOUT_CLASSIFICATION	2.549727525361552E-4	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999458229438071	WITHOUT_CLASSIFICATION	5.4177056192949396E-5	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999486802358347	WITHOUT_CLASSIFICATION	5.131976416522968E-5	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.999874945342045	WITHOUT_CLASSIFICATION	1.2505465795497903E-4	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9995470676346327	WITHOUT_CLASSIFICATION	4.529323653672852E-4	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999873191508375	WITHOUT_CLASSIFICATION	1.2680849162433241E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997305866643718	WITHOUT_CLASSIFICATION	2.694133356283053E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997305866643718	WITHOUT_CLASSIFICATION	2.694133356283053E-4	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9998803142105163	WITHOUT_CLASSIFICATION	1.1968578948368985E-4	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999090991068728	WITHOUT_CLASSIFICATION	9.090089312721425E-5	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999447200247846	WITHOUT_CLASSIFICATION	5.5279975215322095E-5	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.999953703252115	WITHOUT_CLASSIFICATION	4.629674788496987E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9997834971571178	WITHOUT_CLASSIFICATION	2.165028428821067E-4	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9997750759449233	WITHOUT_CLASSIFICATION	2.249240550767583E-4	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9996324518425782	WITHOUT_CLASSIFICATION	3.675481574217163E-4	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998766259155395	WITHOUT_CLASSIFICATION	1.2337408446048986E-4	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998766259155395	WITHOUT_CLASSIFICATION	1.2337408446048986E-4	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9996603064651369	WITHOUT_CLASSIFICATION	3.396935348630295E-4	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9997168268614129	WITHOUT_CLASSIFICATION	2.831731385870838E-4	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999018458758147	WITHOUT_CLASSIFICATION	9.81541241853307E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998477336089967	WITHOUT_CLASSIFICATION	1.5226639100329026E-4	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998477336089967	WITHOUT_CLASSIFICATION	1.5226639100329026E-4	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998477336089967	WITHOUT_CLASSIFICATION	1.5226639100329026E-4	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9998618345904428	WITHOUT_CLASSIFICATION	1.381654095573157E-4	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.99990038672927	WITHOUT_CLASSIFICATION	9.961327073013556E-5	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9996704772627417	WITHOUT_CLASSIFICATION	3.295227372582723E-4	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9995870850667455	WITHOUT_CLASSIFICATION	4.1291493325448385E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999861099968893	WITHOUT_CLASSIFICATION	1.3890003110693378E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9996347977979644	WITHOUT_CLASSIFICATION	3.652022020356143E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9996347977979644	WITHOUT_CLASSIFICATION	3.652022020356143E-4	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999133316365878	WITHOUT_CLASSIFICATION	8.66683634121783E-5	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999812282675826	WITHOUT_CLASSIFICATION	1.877173241733067E-5	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9998407883996564	WITHOUT_CLASSIFICATION	1.5921160034359624E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999254320194157	WITHOUT_CLASSIFICATION	7.45679805843133E-5	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.999628531424241	WITHOUT_CLASSIFICATION	3.7146857575904516E-4	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.999833336225381	WITHOUT_CLASSIFICATION	1.6666377461912148E-4	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.999800965816519	WITHOUT_CLASSIFICATION	1.9903418348104774E-4	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9998295752634127	WITHOUT_CLASSIFICATION	1.7042473658721515E-4	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999481908073173	WITHOUT_CLASSIFICATION	5.18091926826994E-5	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9998285910741616	WITHOUT_CLASSIFICATION	1.7140892583842186E-4	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999115337649509	WITHOUT_CLASSIFICATION	8.84662350491172E-5	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9995793788471994	WITHOUT_CLASSIFICATION	4.2062115280061324E-4	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9995793788471994	WITHOUT_CLASSIFICATION	4.2062115280061324E-4	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9995793788471994	WITHOUT_CLASSIFICATION	4.2062115280061324E-4	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9995793788471994	WITHOUT_CLASSIFICATION	4.2062115280061324E-4	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9995793788471994	WITHOUT_CLASSIFICATION	4.2062115280061324E-4	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9997041623272281	WITHOUT_CLASSIFICATION	2.9583767277180736E-4	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9997041623272281	WITHOUT_CLASSIFICATION	2.9583767277180736E-4	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9997049858613314	WITHOUT_CLASSIFICATION	2.950141386685004E-4	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997041623272281	WITHOUT_CLASSIFICATION	2.9583767277180736E-4	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999009468264747	WITHOUT_CLASSIFICATION	9.905317352536689E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997305866643718	WITHOUT_CLASSIFICATION	2.694133356283053E-4	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9998163381710161	WITHOUT_CLASSIFICATION	1.8366182898397684E-4	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997041623272281	WITHOUT_CLASSIFICATION	2.9583767277180736E-4	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9997991616887066	WITHOUT_CLASSIFICATION	2.0083831129328393E-4	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9997479128920302	WITHOUT_CLASSIFICATION	2.520871079697639E-4	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999580767784974	WITHOUT_CLASSIFICATION	4.1923221502607395E-4	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9995805033802566	WITHOUT_CLASSIFICATION	4.19496619743385E-4	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999361776959895	WITHOUT_CLASSIFICATION	6.382230401047639E-5	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999785242916615	WITHOUT_CLASSIFICATION	2.147570833850524E-4	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999653932128255	WITHOUT_CLASSIFICATION	3.460678717445526E-5	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9998281910133899	WITHOUT_CLASSIFICATION	1.718089866101332E-4	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9998579806512956	WITHOUT_CLASSIFICATION	1.4201934870449303E-4	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999911891396598	WITHOUT_CLASSIFICATION	8.810860340156302E-6	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999418514545956	WITHOUT_CLASSIFICATION	5.8148545404413005E-5	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9975430934079336	WITHOUT_CLASSIFICATION	0.0024569065920664063	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9995263940686376	WITHOUT_CLASSIFICATION	4.7360593136245904E-4	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.999622608298879	WITHOUT_CLASSIFICATION	3.773917011209903E-4	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999178004191213	WITHOUT_CLASSIFICATION	8.219958087873944E-5	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9998851607239158	WITHOUT_CLASSIFICATION	1.1483927608433946E-4	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9994754228289411	WITHOUT_CLASSIFICATION	5.245771710589249E-4	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9996452572873478	WITHOUT_CLASSIFICATION	3.547427126523396E-4	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9996452572873478	WITHOUT_CLASSIFICATION	3.547427126523396E-4	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.999887692289238	WITHOUT_CLASSIFICATION	1.1230771076197135E-4	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999633804311646	WITHOUT_CLASSIFICATION	3.661956883534858E-5	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999132814596734	WITHOUT_CLASSIFICATION	8.671854032659363E-5	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9997300648985885	WITHOUT_CLASSIFICATION	2.6993510141152117E-4	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9997615106240949	WITHOUT_CLASSIFICATION	2.384893759050419E-4	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9998958721776994	WITHOUT_CLASSIFICATION	1.0412782230062944E-4	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9994639503944422	WITHOUT_CLASSIFICATION	5.360496055578686E-4	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999327274362187	WITHOUT_CLASSIFICATION	6.727256378127523E-5	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.99989902200549	WITHOUT_CLASSIFICATION	1.0097799450993836E-4	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.999888342077702	WITHOUT_CLASSIFICATION	1.116579222979057E-4	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9997240384421375	WITHOUT_CLASSIFICATION	2.759615578625184E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999551873809778	WITHOUT_CLASSIFICATION	4.481261902227409E-5	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999870967494038	WITHOUT_CLASSIFICATION	1.2903250596138089E-5	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999818180046822	WITHOUT_CLASSIFICATION	1.8181995317844725E-5	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999384376481149	WITHOUT_CLASSIFICATION	6.156235188514477E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999732533152716	WITHOUT_CLASSIFICATION	2.6746684728409485E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999447293485102	WITHOUT_CLASSIFICATION	5.527065148994305E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999447293485102	WITHOUT_CLASSIFICATION	5.527065148994305E-5	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998946914923666	WITHOUT_CLASSIFICATION	1.0530850763330678E-4	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999975158795196	WITHOUT_CLASSIFICATION	2.4841204804584115E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999343509681147	WITHOUT_CLASSIFICATION	6.564903188529174E-5	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999634982489806	WITHOUT_CLASSIFICATION	3.6501751019470715E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999509400215387	WITHOUT_CLASSIFICATION	4.905997846123538E-5	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9998967650882411	WITHOUT_CLASSIFICATION	1.0323491175899352E-4	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9996631373016109	WITHOUT_CLASSIFICATION	3.3686269838897914E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999675633985312	WITHOUT_CLASSIFICATION	3.24366014687084E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998412204383599	WITHOUT_CLASSIFICATION	1.5877956164005877E-4	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.999879979910223	WITHOUT_CLASSIFICATION	1.2002008977685414E-4	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.99998779097433	WITHOUT_CLASSIFICATION	1.2209025669924173E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999675633985312	WITHOUT_CLASSIFICATION	3.24366014687084E-5	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999938842021933	WITHOUT_CLASSIFICATION	6.115797806714257E-5	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.999843656889171	WITHOUT_CLASSIFICATION	1.5634311082908926E-4	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999204423000495	WITHOUT_CLASSIFICATION	7.955769995048802E-5	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9996545538865554	WITHOUT_CLASSIFICATION	3.454461134444959E-4	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999810682778266	WITHOUT_CLASSIFICATION	1.8931722173413886E-5	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999575568230495	WITHOUT_CLASSIFICATION	4.2443176950332E-5	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9997649198958809	WITHOUT_CLASSIFICATION	2.3508010411913346E-4	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999426881018878	WITHOUT_CLASSIFICATION	5.731189811211523E-5	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999777807814932	WITHOUT_CLASSIFICATION	2.221921850678831E-5	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999547820797763	WITHOUT_CLASSIFICATION	4.521792022381E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998034479140628	WITHOUT_CLASSIFICATION	1.9655208593712765E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999072114893923	WITHOUT_CLASSIFICATION	9.278851060761785E-5	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9997266740947401	WITHOUT_CLASSIFICATION	2.7332590525977837E-4	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9998887707625382	WITHOUT_CLASSIFICATION	1.1122923746177275E-4	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999684294860906	WITHOUT_CLASSIFICATION	3.1570513909395413E-4	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999927929110491	WITHOUT_CLASSIFICATION	7.207088950751325E-6	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9998840415874292	WITHOUT_CLASSIFICATION	1.1595841257080955E-4	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9996208500659981	WITHOUT_CLASSIFICATION	3.791499340018798E-4	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9996208500659981	WITHOUT_CLASSIFICATION	3.791499340018798E-4	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9997576831923274	WITHOUT_CLASSIFICATION	2.4231680767247232E-4	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999315380639624	WITHOUT_CLASSIFICATION	6.846193603755428E-5	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.999715803392449	WITHOUT_CLASSIFICATION	2.841966075509974E-4	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9997899095282591	WITHOUT_CLASSIFICATION	2.100904717408916E-4	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999107027984036	WITHOUT_CLASSIFICATION	8.929720159642365E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999030750403918	WITHOUT_CLASSIFICATION	9.692495960819741E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999795183318271	WITHOUT_CLASSIFICATION	2.0481668172904984E-5	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999776732068041	WITHOUT_CLASSIFICATION	2.2326793195920915E-5	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999001228371284	WITHOUT_CLASSIFICATION	9.98771628715659E-5	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999532449610856	WITHOUT_CLASSIFICATION	4.6755038914400154E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999814948048872	WITHOUT_CLASSIFICATION	1.8505195112872168E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999141821802852	WITHOUT_CLASSIFICATION	8.58178197147942E-5	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998835021426556	WITHOUT_CLASSIFICATION	1.1649785734443134E-4	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999654038122424	WITHOUT_CLASSIFICATION	3.459618775761883E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997482791502562	WITHOUT_CLASSIFICATION	2.517208497438456E-4	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999667925987501	WITHOUT_CLASSIFICATION	3.320740124988374E-5	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999873420401797	WITHOUT_CLASSIFICATION	1.2657959820272152E-5	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999567510947526	WITHOUT_CLASSIFICATION	4.3248905247489934E-5	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999260463104848	WITHOUT_CLASSIFICATION	7.395368951520254E-5	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9998765704310427	WITHOUT_CLASSIFICATION	1.2342956895727774E-4	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999870596713452	WITHOUT_CLASSIFICATION	1.2940328654941782E-5	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999973659253651	WITHOUT_CLASSIFICATION	2.634074634894931E-5	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998987487433115	WITHOUT_CLASSIFICATION	1.0125125668849838E-4	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999894490208349	WITHOUT_CLASSIFICATION	1.0550979165217975E-5	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.99989343383024	WITHOUT_CLASSIFICATION	1.0656616976002008E-4	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9998358417661056	WITHOUT_CLASSIFICATION	1.6415823389434575E-4	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999796770002698	WITHOUT_CLASSIFICATION	2.032299973014956E-5	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999270249384412	WITHOUT_CLASSIFICATION	7.297506155873603E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999386839901049	WITHOUT_CLASSIFICATION	6.13160098950812E-5	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9998930983909915	WITHOUT_CLASSIFICATION	1.0690160900851756E-4	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998423786094375	WITHOUT_CLASSIFICATION	1.576213905624763E-4	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9997488334214378	WITHOUT_CLASSIFICATION	2.511665785622021E-4	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999558248237254	WITHOUT_CLASSIFICATION	4.417517627462581E-5	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999597026686827	WITHOUT_CLASSIFICATION	4.029733131718118E-5	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.999984590077835	WITHOUT_CLASSIFICATION	1.5409922164960625E-5	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9998874051687746	WITHOUT_CLASSIFICATION	1.1259483122548422E-4	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998237561920434	WITHOUT_CLASSIFICATION	1.7624380795652636E-4	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999511538675576	WITHOUT_CLASSIFICATION	4.8846132442443974E-5	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9998438175228316	WITHOUT_CLASSIFICATION	1.5618247716839056E-4	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.999870312959267	WITHOUT_CLASSIFICATION	1.29687040733039E-4	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9998902012433892	WITHOUT_CLASSIFICATION	1.097987566106698E-4	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999411982333948	WITHOUT_CLASSIFICATION	5.880176660519223E-5	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9997487649603675	WITHOUT_CLASSIFICATION	2.5123503963256686E-4	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999632949962841	WITHOUT_CLASSIFICATION	3.670500371589243E-5	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9998699037148243	WITHOUT_CLASSIFICATION	1.300962851756825E-4	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999390304085474	WITHOUT_CLASSIFICATION	6.096959145255808E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998423786094375	WITHOUT_CLASSIFICATION	1.576213905624763E-4	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9997555975970496	WITHOUT_CLASSIFICATION	2.4440240295041225E-4	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9997327517796037	WITHOUT_CLASSIFICATION	2.6724822039621765E-4	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999595170039413	WITHOUT_CLASSIFICATION	4.048299605861034E-5	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.999985750379579	WITHOUT_CLASSIFICATION	1.4249620421064098E-5	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9996046704202441	WITHOUT_CLASSIFICATION	3.953295797558535E-4	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999062916038389	WITHOUT_CLASSIFICATION	9.370839616099698E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998412204383599	WITHOUT_CLASSIFICATION	1.5877956164005877E-4	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999913807762607	WITHOUT_CLASSIFICATION	8.619223739249682E-6	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997482791502562	WITHOUT_CLASSIFICATION	2.517208497438456E-4	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9996099336953055	WITHOUT_CLASSIFICATION	3.9006630469458646E-4	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9997612361018107	WITHOUT_CLASSIFICATION	2.387638981893087E-4	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9998814664474516	WITHOUT_CLASSIFICATION	1.1853355254835777E-4	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9998820622240338	WITHOUT_CLASSIFICATION	1.1793777596632205E-4	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9997525620559135	WITHOUT_CLASSIFICATION	2.474379440865574E-4	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.999912937888814	WITHOUT_CLASSIFICATION	8.706211118607684E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998907229208758	WITHOUT_CLASSIFICATION	1.0927707912422635E-4	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9998742434774109	WITHOUT_CLASSIFICATION	1.2575652258915032E-4	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999552632298251	WITHOUT_CLASSIFICATION	4.473677017490047E-5	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999267493613638	WITHOUT_CLASSIFICATION	7.325063863613859E-5	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9998521079331013	WITHOUT_CLASSIFICATION	1.4789206689873674E-4	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999700956528448	WITHOUT_CLASSIFICATION	2.9904347155207766E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998310013819904	WITHOUT_CLASSIFICATION	1.6899861800958663E-4	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998310013819904	WITHOUT_CLASSIFICATION	1.6899861800958663E-4	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999174572267098	WITHOUT_CLASSIFICATION	8.254277329019236E-5	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999873412647692	WITHOUT_CLASSIFICATION	1.265873523080092E-4	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999635125055065	WITHOUT_CLASSIFICATION	3.648749449349082E-5	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999906340181646	WITHOUT_CLASSIFICATION	9.36598183538962E-6	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999837971136705	WITHOUT_CLASSIFICATION	1.62028863295777E-5	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999059096749657	WITHOUT_CLASSIFICATION	9.409032503433926E-5	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999881286836032	WITHOUT_CLASSIFICATION	1.1871316396764115E-5	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999721794164649	WITHOUT_CLASSIFICATION	2.782058353511194E-5	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999068355054723	WITHOUT_CLASSIFICATION	9.316449452758746E-5	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9997970374412235	WITHOUT_CLASSIFICATION	2.0296255877652405E-4	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9996058580582968	WITHOUT_CLASSIFICATION	3.941419417032208E-4	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9998448734953047	WITHOUT_CLASSIFICATION	1.551265046952285E-4	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9998303488824173	WITHOUT_CLASSIFICATION	1.6965111758266365E-4	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999961576309353	WITHOUT_CLASSIFICATION	3.842369064692667E-6	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9997700608152741	WITHOUT_CLASSIFICATION	2.2993918472590492E-4	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9998565378924427	WITHOUT_CLASSIFICATION	1.4346210755735578E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998312603592708	WITHOUT_CLASSIFICATION	1.6873964072911982E-4	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999934174505362	WITHOUT_CLASSIFICATION	6.582549463806517E-6	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999493332769699	WITHOUT_CLASSIFICATION	5.066672303012543E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998224107154964	WITHOUT_CLASSIFICATION	1.7758928450364273E-4	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999649326047589	WITHOUT_CLASSIFICATION	3.5067395240983044E-5	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.999970786948938	WITHOUT_CLASSIFICATION	2.921305106195356E-5	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999755490235301	WITHOUT_CLASSIFICATION	2.445097646987702E-5	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999100181539806	WITHOUT_CLASSIFICATION	8.998184601940257E-5	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.999528169818938	WITHOUT_CLASSIFICATION	4.7183018106212077E-4	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9998593098026988	WITHOUT_CLASSIFICATION	1.4069019730118002E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998224107154964	WITHOUT_CLASSIFICATION	1.7758928450364273E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998224107154964	WITHOUT_CLASSIFICATION	1.7758928450364273E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999170572021151	WITHOUT_CLASSIFICATION	8.294279788491017E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999696479900653	WITHOUT_CLASSIFICATION	3.0352009934649674E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9998105486201934	WITHOUT_CLASSIFICATION	1.8945137980662646E-4	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999848526280489	WITHOUT_CLASSIFICATION	1.5147371951098227E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9997320085722222	WITHOUT_CLASSIFICATION	2.679914277778827E-4	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999732300388208	WITHOUT_CLASSIFICATION	2.6769961179113542E-5	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.997687954976384	WITHOUT_CLASSIFICATION	0.002312045023616029	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9997897179261637	WITHOUT_CLASSIFICATION	2.1028207383639704E-4	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999442705505421	WITHOUT_CLASSIFICATION	5.572944945776931E-5	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9997439189976441	WITHOUT_CLASSIFICATION	2.560810023559038E-4	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999275824971863	WITHOUT_CLASSIFICATION	7.241750281376095E-5	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9998500046006521	WITHOUT_CLASSIFICATION	1.499953993479539E-4	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998275241598679	WITHOUT_CLASSIFICATION	1.7247584013215105E-4	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992766765632942	WITHOUT_CLASSIFICATION	7.233234367059131E-4	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999803114112858	WITHOUT_CLASSIFICATION	1.96885887142638E-5	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9995935308838308	WITHOUT_CLASSIFICATION	4.064691161691161E-4	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9997200995012319	WITHOUT_CLASSIFICATION	2.7990049876808556E-4	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9997213222254802	WITHOUT_CLASSIFICATION	2.786777745198075E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994033383418801	WITHOUT_CLASSIFICATION	5.96661658119883E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9978513986396205	WITHOUT_CLASSIFICATION	0.002148601360379525	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999602202172301	WITHOUT_CLASSIFICATION	3.977978276990703E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999908455847536	WITHOUT_CLASSIFICATION	9.154415246360421E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998827056074352	WITHOUT_CLASSIFICATION	1.1729439256479819E-4	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999521222784343	WITHOUT_CLASSIFICATION	4.7877721565712665E-4	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9998944852040846	WITHOUT_CLASSIFICATION	1.0551479591538276E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999672040879996	WITHOUT_CLASSIFICATION	3.279591200045071E-5	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999181177524257	WITHOUT_CLASSIFICATION	8.18822475743312E-5	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9997854359528884	WITHOUT_CLASSIFICATION	2.145640471115905E-4	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9997560501807768	WITHOUT_CLASSIFICATION	2.439498192231261E-4	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.999972060876874	WITHOUT_CLASSIFICATION	2.7939123125938896E-5	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9996545068955087	WITHOUT_CLASSIFICATION	3.454931044912659E-4	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9996079708792132	WITHOUT_CLASSIFICATION	3.9202912078674493E-4	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9998321900579238	WITHOUT_CLASSIFICATION	1.6780994207613424E-4	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998333397915777	WITHOUT_CLASSIFICATION	1.6666020842218859E-4	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999168158290788	WITHOUT_CLASSIFICATION	8.318417092120886E-5	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9998330805261886	WITHOUT_CLASSIFICATION	1.6691947381151513E-4	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9996257045811153	WITHOUT_CLASSIFICATION	3.7429541888469784E-4	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9998969569859807	WITHOUT_CLASSIFICATION	1.0304301401921847E-4	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9998741778729665	WITHOUT_CLASSIFICATION	1.25822127033516E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998029162162824	WITHOUT_CLASSIFICATION	1.9708378371774657E-4	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999533437130541	WITHOUT_CLASSIFICATION	4.665628694596332E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999169051150105	WITHOUT_CLASSIFICATION	8.309488498944543E-5	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9998249950094446	WITHOUT_CLASSIFICATION	1.7500499055539257E-4	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999169051150105	WITHOUT_CLASSIFICATION	8.309488498944543E-5	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999831173040724	WITHOUT_CLASSIFICATION	1.6882695927642047E-5	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9998946658361805	WITHOUT_CLASSIFICATION	1.0533416381961607E-4	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999644199318127	WITHOUT_CLASSIFICATION	3.558006818726329E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999752364150453	WITHOUT_CLASSIFICATION	2.476358495476489E-5	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999238631566757	WITHOUT_CLASSIFICATION	7.61368433243227E-5	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999963994522157	WITHOUT_CLASSIFICATION	3.600547784297658E-5	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999568815865636	WITHOUT_CLASSIFICATION	4.311841343635354E-5	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998241263080354	WITHOUT_CLASSIFICATION	1.758736919645922E-4	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999106003040962	WITHOUT_CLASSIFICATION	8.939969590386452E-5	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9997536530019656	WITHOUT_CLASSIFICATION	2.4634699803438614E-4	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9998970939280152	WITHOUT_CLASSIFICATION	1.0290607198483366E-4	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999778403976882	WITHOUT_CLASSIFICATION	2.2159602311787674E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999915530420211	WITHOUT_CLASSIFICATION	8.446957978741547E-6	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999373398828871	WITHOUT_CLASSIFICATION	6.266011711285941E-5	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999502676420471	WITHOUT_CLASSIFICATION	4.973235795292585E-5	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999948162502562	WITHOUT_CLASSIFICATION	5.183749743783246E-5	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999447757911256	WITHOUT_CLASSIFICATION	5.522420887438172E-5	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9998395472080265	WITHOUT_CLASSIFICATION	1.6045279197346546E-4	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999441623622052	WITHOUT_CLASSIFICATION	5.583763779488903E-5	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999247359239374	WITHOUT_CLASSIFICATION	7.526407606259229E-5	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.99995912991705	WITHOUT_CLASSIFICATION	4.087008295000911E-5	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9997584075164019	WITHOUT_CLASSIFICATION	2.4159248359823692E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999181686088504	WITHOUT_CLASSIFICATION	8.183139114962934E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999902674876829	WITHOUT_CLASSIFICATION	9.732512317098491E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997376091072695	WITHOUT_CLASSIFICATION	2.623908927305255E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999860662628494	WITHOUT_CLASSIFICATION	1.3933737150542818E-5	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9997583368423435	WITHOUT_CLASSIFICATION	2.4166315765641161E-4	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9997190175620603	WITHOUT_CLASSIFICATION	2.8098243793963593E-4	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997285244198503	WITHOUT_CLASSIFICATION	2.7147558014968797E-4	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9998537330404803	WITHOUT_CLASSIFICATION	1.4626695951965854E-4	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9995097269527237	WITHOUT_CLASSIFICATION	4.902730472763009E-4	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999804722773947	WITHOUT_CLASSIFICATION	1.9527722605252166E-5	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999719353233086	WITHOUT_CLASSIFICATION	2.806467669140786E-5	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9996970580368725	WITHOUT_CLASSIFICATION	3.029419631275114E-4	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9995243391121659	WITHOUT_CLASSIFICATION	4.7566088783424095E-4	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.999730927927464	WITHOUT_CLASSIFICATION	2.6907207253611327E-4	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997257301653683	WITHOUT_CLASSIFICATION	2.742698346317105E-4	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.999517556160839	WITHOUT_CLASSIFICATION	4.8244383916098694E-4	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998302072907886	WITHOUT_CLASSIFICATION	1.6979270921140238E-4	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9997570077775491	WITHOUT_CLASSIFICATION	2.4299222245088178E-4	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9996013774598091	WITHOUT_CLASSIFICATION	3.986225401908812E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999341115503922	WITHOUT_CLASSIFICATION	6.588844960774181E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999860662628494	WITHOUT_CLASSIFICATION	1.3933737150542818E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9997536250657069	WITHOUT_CLASSIFICATION	2.463749342931042E-4	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9997101608188628	WITHOUT_CLASSIFICATION	2.898391811372265E-4	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9998780136173849	WITHOUT_CLASSIFICATION	1.219863826151048E-4	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9994256401068866	WITHOUT_CLASSIFICATION	5.743598931134774E-4	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9998698293607376	WITHOUT_CLASSIFICATION	1.3017063926239346E-4	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9998180331111401	WITHOUT_CLASSIFICATION	1.819668888599356E-4	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9996777846342392	WITHOUT_CLASSIFICATION	3.222153657607758E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997361530236629	WITHOUT_CLASSIFICATION	2.6384697633709703E-4	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999497934842586	WITHOUT_CLASSIFICATION	5.020651574127518E-5	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9996500795129116	WITHOUT_CLASSIFICATION	3.499204870883556E-4	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.999934898709038	WITHOUT_CLASSIFICATION	6.510129096210287E-5	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9997799754255663	WITHOUT_CLASSIFICATION	2.2002457443375976E-4	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999580060537348	WITHOUT_CLASSIFICATION	4.1993946265187854E-4	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9997228952323267	WITHOUT_CLASSIFICATION	2.771047676732483E-4	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999657859946536	WITHOUT_CLASSIFICATION	3.421400534638265E-5	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9997264485001209	WITHOUT_CLASSIFICATION	2.7355149987905804E-4	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9997410301505892	WITHOUT_CLASSIFICATION	2.5896984941071826E-4	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999655120086584	WITHOUT_CLASSIFICATION	3.44879913416412E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9997222462266808	WITHOUT_CLASSIFICATION	2.7775377331920457E-4	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9998244115498391	WITHOUT_CLASSIFICATION	1.755884501609251E-4	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9997215373277096	WITHOUT_CLASSIFICATION	2.784626722904121E-4	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998315554841288	WITHOUT_CLASSIFICATION	1.6844451587113532E-4	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999601549771628	WITHOUT_CLASSIFICATION	3.984502283721656E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9982508354639961	WITHOUT_CLASSIFICATION	0.0017491645360039965	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9982508354639961	WITHOUT_CLASSIFICATION	0.0017491645360039965	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999417423615348	WITHOUT_CLASSIFICATION	5.8257638465218955E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9982508354639961	WITHOUT_CLASSIFICATION	0.0017491645360039965	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9982508354639961	WITHOUT_CLASSIFICATION	0.0017491645360039965	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9998042744439033	WITHOUT_CLASSIFICATION	1.9572555609675545E-4	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9998373648648504	WITHOUT_CLASSIFICATION	1.6263513514969165E-4	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9997522832875101	WITHOUT_CLASSIFICATION	2.477167124899223E-4	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9997536572078921	WITHOUT_CLASSIFICATION	2.463427921078587E-4	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999380150417869	WITHOUT_CLASSIFICATION	6.198495821305512E-5	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.99990448197428	WITHOUT_CLASSIFICATION	9.551802572001525E-5	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9997472817985271	WITHOUT_CLASSIFICATION	2.5271820147286E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999657706419124	WITHOUT_CLASSIFICATION	3.4229358087666385E-5	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9995201731117149	WITHOUT_CLASSIFICATION	4.798268882849924E-4	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.999572236711013	WITHOUT_CLASSIFICATION	4.277632889869256E-4	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998300503813565	WITHOUT_CLASSIFICATION	1.6994961864346498E-4	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9996722806030026	WITHOUT_CLASSIFICATION	3.277193969973968E-4	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9996871452194527	WITHOUT_CLASSIFICATION	3.1285478054724695E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9996943304637337	WITHOUT_CLASSIFICATION	3.0566953626620793E-4	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999738492603983	WITHOUT_CLASSIFICATION	2.615073960170331E-4	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998876821226838	WITHOUT_CLASSIFICATION	1.1231787731627767E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9998701042768422	WITHOUT_CLASSIFICATION	1.2989572315790125E-4	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9997906930951949	WITHOUT_CLASSIFICATION	2.093069048050933E-4	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9996759580484573	WITHOUT_CLASSIFICATION	3.240419515427009E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9996943304637337	WITHOUT_CLASSIFICATION	3.0566953626620793E-4	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9998761458039304	WITHOUT_CLASSIFICATION	1.238541960696532E-4	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9997593177599366	WITHOUT_CLASSIFICATION	2.4068224006336462E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9998701042768422	WITHOUT_CLASSIFICATION	1.2989572315790125E-4	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9997583368423435	WITHOUT_CLASSIFICATION	2.4166315765641161E-4	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9995842269538945	WITHOUT_CLASSIFICATION	4.1577304610555896E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999123568341213	WITHOUT_CLASSIFICATION	8.764316587874003E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998721094803803	WITHOUT_CLASSIFICATION	1.2789051961970406E-4	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9996058034530533	WITHOUT_CLASSIFICATION	3.94196546946635E-4	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999066493718495	WITHOUT_CLASSIFICATION	9.335062815052657E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9995722912484183	WITHOUT_CLASSIFICATION	4.27708751581738E-4	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999074635277094	WITHOUT_CLASSIFICATION	9.253647229056818E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9995125868351223	WITHOUT_CLASSIFICATION	4.8741316487766975E-4	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9998048769406436	WITHOUT_CLASSIFICATION	1.9512305935630195E-4	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9997378687842565	WITHOUT_CLASSIFICATION	2.621312157434871E-4	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9998562749151306	WITHOUT_CLASSIFICATION	1.4372508486934458E-4	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999769554468537	WITHOUT_CLASSIFICATION	2.3044553146308932E-4	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999938613993673	WITHOUT_CLASSIFICATION	6.138600632697361E-5	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998778242079711	WITHOUT_CLASSIFICATION	1.2217579202891395E-4	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999269428371218	WITHOUT_CLASSIFICATION	7.305716287828604E-5	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9997586204455217	WITHOUT_CLASSIFICATION	2.413795544783808E-4	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.999776049171483	WITHOUT_CLASSIFICATION	2.2395082851711927E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999225886604309	WITHOUT_CLASSIFICATION	7.741133956912348E-5	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998541369924215	WITHOUT_CLASSIFICATION	1.4586300757851522E-4	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9997386041800453	WITHOUT_CLASSIFICATION	2.6139581995473875E-4	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9996757191921833	WITHOUT_CLASSIFICATION	3.2428080781669367E-4	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9998843637137992	WITHOUT_CLASSIFICATION	1.1563628620084994E-4	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9995125868351223	WITHOUT_CLASSIFICATION	4.8741316487766975E-4	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9996777709151426	WITHOUT_CLASSIFICATION	3.2222908485739763E-4	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9996584449302435	WITHOUT_CLASSIFICATION	3.4155506975647903E-4	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9996646225342746	WITHOUT_CLASSIFICATION	3.3537746572547385E-4	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9994752167601866	WITHOUT_CLASSIFICATION	5.247832398134392E-4	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997487195503182	WITHOUT_CLASSIFICATION	2.512804496818082E-4	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9995546637434332	WITHOUT_CLASSIFICATION	4.453362565668353E-4	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9995350284054381	WITHOUT_CLASSIFICATION	4.649715945618753E-4	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9993916817962225	WITHOUT_CLASSIFICATION	6.083182037775253E-4	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9995973575804153	WITHOUT_CLASSIFICATION	4.0264241958467087E-4	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.999509606761967	WITHOUT_CLASSIFICATION	4.903932380329816E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.99984085421557	WITHOUT_CLASSIFICATION	1.5914578442995092E-4	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9998891377706012	WITHOUT_CLASSIFICATION	1.1086222939879649E-4	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999268061909703	WITHOUT_CLASSIFICATION	7.319380902979365E-5	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999720435391245	WITHOUT_CLASSIFICATION	2.7956460875494806E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9996268298428311	WITHOUT_CLASSIFICATION	3.7317015716885983E-4	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999929144025116	WITHOUT_CLASSIFICATION	7.085597488446129E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999803021297071	WITHOUT_CLASSIFICATION	1.96978702929138E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.99984085421557	WITHOUT_CLASSIFICATION	1.5914578442995092E-4	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999987603718718	WITHOUT_CLASSIFICATION	1.239628128203798E-5	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9996740985080386	WITHOUT_CLASSIFICATION	3.2590149196137487E-4	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9998090835728195	WITHOUT_CLASSIFICATION	1.9091642718052534E-4	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998088330329836	WITHOUT_CLASSIFICATION	1.9116696701637054E-4	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9998705067472763	WITHOUT_CLASSIFICATION	1.2949325272369855E-4	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999520882840974	WITHOUT_CLASSIFICATION	4.7911715902642603E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9996268298428311	WITHOUT_CLASSIFICATION	3.7317015716885983E-4	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9998562565953493	WITHOUT_CLASSIFICATION	1.4374340465083738E-4	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999324373279848	WITHOUT_CLASSIFICATION	6.756267201525804E-5	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998775886194708	WITHOUT_CLASSIFICATION	1.224113805291103E-4	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9904234256234322	WITHOUT_CLASSIFICATION	0.009576574376567743	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9897075642279842	WITHOUT_CLASSIFICATION	0.01029243577201581	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9907184125808833	WITHOUT_CLASSIFICATION	0.00928158741911672	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998642601663336	WITHOUT_CLASSIFICATION	1.3573983366642223E-4	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998642601663336	WITHOUT_CLASSIFICATION	1.3573983366642223E-4	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9997112033382902	WITHOUT_CLASSIFICATION	2.887966617098584E-4	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999061067104091	WITHOUT_CLASSIFICATION	9.389328959092851E-5	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9995703435198582	WITHOUT_CLASSIFICATION	4.296564801418335E-4	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9995859737858261	WITHOUT_CLASSIFICATION	4.140262141737941E-4	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9998971224008905	WITHOUT_CLASSIFICATION	1.0287759910946217E-4	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998026635324688	WITHOUT_CLASSIFICATION	1.973364675311731E-4	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998226371515081	WITHOUT_CLASSIFICATION	1.773628484918736E-4	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997191769842182	WITHOUT_CLASSIFICATION	2.8082301578187025E-4	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999858612405261	WITHOUT_CLASSIFICATION	1.4138759473892654E-5	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998522854739866	WITHOUT_CLASSIFICATION	1.4771452601338524E-4	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998026635324688	WITHOUT_CLASSIFICATION	1.973364675311731E-4	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998226371515081	WITHOUT_CLASSIFICATION	1.773628484918736E-4	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997191769842182	WITHOUT_CLASSIFICATION	2.8082301578187025E-4	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9976016570744821	WITHOUT_CLASSIFICATION	0.002398342925517817	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9995247238337919	WITHOUT_CLASSIFICATION	4.7527616620809704E-4	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999440917153976	WITHOUT_CLASSIFICATION	5.590828460246923E-5	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999525719112902	WITHOUT_CLASSIFICATION	4.742808870977991E-5	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9998583714138669	WITHOUT_CLASSIFICATION	1.416285861331146E-4	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999214250602003	WITHOUT_CLASSIFICATION	7.857493979969383E-5	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9997870373198283	WITHOUT_CLASSIFICATION	2.1296268017171574E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9996120902805647	WITHOUT_CLASSIFICATION	3.8790971943527283E-4	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9996084906691175	WITHOUT_CLASSIFICATION	3.91509330882561E-4	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9997250955865937	WITHOUT_CLASSIFICATION	2.749044134062166E-4	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999315030335154	WITHOUT_CLASSIFICATION	6.849696648461353E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9998739188930794	WITHOUT_CLASSIFICATION	1.2608110692052083E-4	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9997822123972754	WITHOUT_CLASSIFICATION	2.1778760272450935E-4	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998906655088114	WITHOUT_CLASSIFICATION	1.093344911885449E-4	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.999590622659219	WITHOUT_CLASSIFICATION	4.093773407809276E-4	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9998500925675179	WITHOUT_CLASSIFICATION	1.49907432482041E-4	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9996818094791551	WITHOUT_CLASSIFICATION	3.18190520844899E-4	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999582454215405	WITHOUT_CLASSIFICATION	4.175457845951684E-5	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9998848643556936	WITHOUT_CLASSIFICATION	1.1513564430639233E-4	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999967291652401	WITHOUT_CLASSIFICATION	3.270834759899043E-5	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999333547928315	WITHOUT_CLASSIFICATION	6.664520716849721E-5	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999723415027172	WITHOUT_CLASSIFICATION	2.7658497282761476E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999740231597891	WITHOUT_CLASSIFICATION	2.597684021083834E-5	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.999699545758712	WITHOUT_CLASSIFICATION	3.004542412880052E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997329397805294	WITHOUT_CLASSIFICATION	2.67060219470601E-4	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998409931452643	WITHOUT_CLASSIFICATION	1.590068547355886E-4	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999963636292676	WITHOUT_CLASSIFICATION	3.6363707323016722E-6	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999788764249193	WITHOUT_CLASSIFICATION	2.1123575080689587E-4	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999753932289127	WITHOUT_CLASSIFICATION	2.4606771087308684E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996721148807485	WITHOUT_CLASSIFICATION	3.2788511925151495E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996721148807485	WITHOUT_CLASSIFICATION	3.2788511925151495E-4	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999466090811608	WITHOUT_CLASSIFICATION	5.339091883915333E-5	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999624841622916	WITHOUT_CLASSIFICATION	3.751583770844839E-5	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9997634763866851	WITHOUT_CLASSIFICATION	2.3652361331495843E-4	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999551873809778	WITHOUT_CLASSIFICATION	4.481261902227409E-5	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9996473203877774	WITHOUT_CLASSIFICATION	3.526796122226895E-4	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999417416559218	WITHOUT_CLASSIFICATION	5.8258344078195044E-5	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9965105318286238	WITHOUT_CLASSIFICATION	0.0034894681713761367	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9997924255868205	WITHOUT_CLASSIFICATION	2.0757441317960482E-4	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9995357740669515	WITHOUT_CLASSIFICATION	4.642259330484366E-4	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998914672371877	WITHOUT_CLASSIFICATION	1.0853276281230799E-4	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999001746258696	WITHOUT_CLASSIFICATION	9.982537413045561E-5	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998632506488921	WITHOUT_CLASSIFICATION	1.3674935110782833E-4	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998688538670166	WITHOUT_CLASSIFICATION	1.3114613298339912E-4	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999868967486472	WITHOUT_CLASSIFICATION	1.3103251352808705E-4	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998645065133834	WITHOUT_CLASSIFICATION	1.3549348661656083E-4	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999891276119942	WITHOUT_CLASSIFICATION	1.087238800579955E-4	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999143481570237	WITHOUT_CLASSIFICATION	8.565184297628826E-5	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999879397033785	WITHOUT_CLASSIFICATION	1.206029662149051E-4	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998547544746408	WITHOUT_CLASSIFICATION	1.4524552535927088E-4	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998707714427015	WITHOUT_CLASSIFICATION	1.2922855729843977E-4	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999014903692309	WITHOUT_CLASSIFICATION	9.850963076909978E-5	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999162204435943	WITHOUT_CLASSIFICATION	8.377955640572835E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9992734610089615	WITHOUT_CLASSIFICATION	7.265389910384313E-4	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999829404335588	WITHOUT_CLASSIFICATION	1.7059566441141293E-5	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999684065912862	WITHOUT_CLASSIFICATION	3.159340871380106E-5	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9990277169576595	WITHOUT_CLASSIFICATION	9.722830423406179E-4	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999253948232207	WITHOUT_CLASSIFICATION	7.460517677919908E-5	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.999805697551767	WITHOUT_CLASSIFICATION	1.9430244823310247E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9992734610089615	WITHOUT_CLASSIFICATION	7.265389910384313E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9992734610089615	WITHOUT_CLASSIFICATION	7.265389910384313E-4	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.999964374326725	WITHOUT_CLASSIFICATION	3.5625673274944665E-5	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9997055054655568	WITHOUT_CLASSIFICATION	2.944945344432247E-4	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999844557958588	WITHOUT_CLASSIFICATION	1.5544204141127927E-5	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999442486124541	WITHOUT_CLASSIFICATION	5.575138754589046E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9995263940686376	WITHOUT_CLASSIFICATION	4.7360593136245904E-4	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999582454215405	WITHOUT_CLASSIFICATION	4.175457845951684E-5	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999810326072722	WITHOUT_CLASSIFICATION	1.8967392727786415E-4	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9997681743667569	WITHOUT_CLASSIFICATION	2.3182563324311228E-4	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9998288887471783	WITHOUT_CLASSIFICATION	1.7111125282174083E-4	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999782892657324	WITHOUT_CLASSIFICATION	2.1710734267605934E-4	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999930266307287	WITHOUT_CLASSIFICATION	6.973369271301437E-5	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998391469805239	WITHOUT_CLASSIFICATION	1.6085301947612967E-4	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999786334912164	WITHOUT_CLASSIFICATION	2.1366508783603658E-4	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999786334912164	WITHOUT_CLASSIFICATION	2.1366508783603658E-4	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999786334912164	WITHOUT_CLASSIFICATION	2.136650878360364E-4	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999786334912164	WITHOUT_CLASSIFICATION	2.136650878360364E-4	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997168033232463	WITHOUT_CLASSIFICATION	2.831966767537527E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999758530341857	WITHOUT_CLASSIFICATION	2.4146965814295568E-4	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999291546539577	WITHOUT_CLASSIFICATION	7.084534604225974E-5	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997272683319821	WITHOUT_CLASSIFICATION	2.7273166801791514E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999697050396518	WITHOUT_CLASSIFICATION	3.0294960348351967E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9998804491773321	WITHOUT_CLASSIFICATION	1.1955082266787925E-4	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998297433326617	WITHOUT_CLASSIFICATION	1.7025666733835748E-4	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999868557194672	WITHOUT_CLASSIFICATION	1.3144280532787031E-4	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9997735543559877	WITHOUT_CLASSIFICATION	2.2644564401234888E-4	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.999665866104077	WITHOUT_CLASSIFICATION	3.3413389592286803E-4	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999835004860936	WITHOUT_CLASSIFICATION	1.649951390639333E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9995366933588581	WITHOUT_CLASSIFICATION	4.633066411419043E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9998391512986569	WITHOUT_CLASSIFICATION	1.6084870134302923E-4	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9998303674802508	WITHOUT_CLASSIFICATION	1.6963251974912963E-4	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9996544839261109	WITHOUT_CLASSIFICATION	3.4551607388916267E-4	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.999598719299065	WITHOUT_CLASSIFICATION	4.0128070093513004E-4	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.999598719299065	WITHOUT_CLASSIFICATION	4.0128070093513004E-4	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999466525875113	WITHOUT_CLASSIFICATION	5.334741248873097E-5	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9995715302297782	WITHOUT_CLASSIFICATION	4.284697702217752E-4	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999381538079534	WITHOUT_CLASSIFICATION	6.184619204661856E-5	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997667045534594	WITHOUT_CLASSIFICATION	2.3329544654064879E-4	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999749310550846	WITHOUT_CLASSIFICATION	2.5068944915392034E-4	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9998386222957034	WITHOUT_CLASSIFICATION	1.6137770429650527E-4	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9924070086429182	WITHOUT_CLASSIFICATION	0.0075929913570819026	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999230767946102	WITHOUT_CLASSIFICATION	7.692320538977285E-5	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999813943224847	WITHOUT_CLASSIFICATION	1.8605677515404574E-5	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999701109201102	WITHOUT_CLASSIFICATION	2.988907988985118E-5	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999177725043857	WITHOUT_CLASSIFICATION	8.222749561415697E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99986287839041	WITHOUT_CLASSIFICATION	1.3712160959000318E-4	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999791021194436	WITHOUT_CLASSIFICATION	2.0897880556272663E-5	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9996878516123158	WITHOUT_CLASSIFICATION	3.1214838768424765E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9995128429703827	WITHOUT_CLASSIFICATION	4.871570296172784E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999576204216558	WITHOUT_CLASSIFICATION	4.237957834424334E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9998173369743009	WITHOUT_CLASSIFICATION	1.8266302569915934E-4	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9998287440642017	WITHOUT_CLASSIFICATION	1.712559357982355E-4	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999109477264649	WITHOUT_CLASSIFICATION	8.905227353497817E-5	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999980638672026	WITHOUT_CLASSIFICATION	1.9361327973532727E-6	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999661501932244	WITHOUT_CLASSIFICATION	3.3849806775557094E-5	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999846072210355	WITHOUT_CLASSIFICATION	1.5392778964401318E-5	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999467137671785	WITHOUT_CLASSIFICATION	5.328623282153373E-5	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9997240673635296	WITHOUT_CLASSIFICATION	2.7593263647035835E-4	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999448298721246	WITHOUT_CLASSIFICATION	5.5170127875328004E-5	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9997908127406382	WITHOUT_CLASSIFICATION	2.0918725936194723E-4	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.999700193017055	WITHOUT_CLASSIFICATION	2.99806982945019E-4	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999692752960967	WITHOUT_CLASSIFICATION	3.072470390321359E-5	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9997877198229524	WITHOUT_CLASSIFICATION	2.1228017704745232E-4	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999947995571576	WITHOUT_CLASSIFICATION	5.2004428423817726E-6	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9997130892712827	WITHOUT_CLASSIFICATION	2.8691072871734556E-4	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9997811697743334	WITHOUT_CLASSIFICATION	2.1883022566664506E-4	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9996469075167574	WITHOUT_CLASSIFICATION	3.5309248324258023E-4	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9996114113069798	WITHOUT_CLASSIFICATION	3.885886930202009E-4	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9996134332019962	WITHOUT_CLASSIFICATION	3.865667980038579E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999848140791964	WITHOUT_CLASSIFICATION	1.5185920803599015E-5	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9996635296235108	WITHOUT_CLASSIFICATION	3.364703764891242E-4	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9997957510119427	WITHOUT_CLASSIFICATION	2.0424898805712882E-4	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9995871108283679	WITHOUT_CLASSIFICATION	4.1288917163202624E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999911457504875	WITHOUT_CLASSIFICATION	8.854249512379877E-6	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9998186059955946	WITHOUT_CLASSIFICATION	1.8139400440543102E-4	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9998697330543864	WITHOUT_CLASSIFICATION	1.3026694561348403E-4	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999769702596281	WITHOUT_CLASSIFICATION	2.30297403719326E-5	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999404424370453	WITHOUT_CLASSIFICATION	5.955756295484426E-5	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9997160097483819	WITHOUT_CLASSIFICATION	2.8399025161806484E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9996228227738344	WITHOUT_CLASSIFICATION	3.7717722616559935E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.999885472203467	WITHOUT_CLASSIFICATION	1.1452779653293916E-4	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9998218471360938	WITHOUT_CLASSIFICATION	1.7815286390617479E-4	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9997775787691042	WITHOUT_CLASSIFICATION	2.2242123089577317E-4	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999434000702634	WITHOUT_CLASSIFICATION	5.659992973671295E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9997990603056852	WITHOUT_CLASSIFICATION	2.0093969431484232E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998580864502359	WITHOUT_CLASSIFICATION	1.4191354976419136E-4	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.99983975275548	WITHOUT_CLASSIFICATION	1.6024724451992948E-4	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9996714398980547	WITHOUT_CLASSIFICATION	3.2856010194517196E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9997069942081835	WITHOUT_CLASSIFICATION	2.9300579181642833E-4	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.999829600875841	WITHOUT_CLASSIFICATION	1.7039912415895778E-4	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9998076647023706	WITHOUT_CLASSIFICATION	1.9233529762947905E-4	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9998758919683507	WITHOUT_CLASSIFICATION	1.2410803164934268E-4	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.999488456621024	WITHOUT_CLASSIFICATION	5.115433789759033E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999332189020415	WITHOUT_CLASSIFICATION	6.678109795854499E-5	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999607566523595	WITHOUT_CLASSIFICATION	3.9243347640427496E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999774209892145	WITHOUT_CLASSIFICATION	2.2579010785490043E-5	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999977293192131	WITHOUT_CLASSIFICATION	2.270680786896749E-5	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999945430290558	WITHOUT_CLASSIFICATION	5.456970944199039E-5	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999143931714166	WITHOUT_CLASSIFICATION	8.560682858337457E-5	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999971553102999	WITHOUT_CLASSIFICATION	2.8446897001038875E-5	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9998237856923348	WITHOUT_CLASSIFICATION	1.762143076653681E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9997199152483836	WITHOUT_CLASSIFICATION	2.8008475161646215E-4	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9997920342704445	WITHOUT_CLASSIFICATION	2.079657295553935E-4	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9997779433623573	WITHOUT_CLASSIFICATION	2.2205663764278134E-4	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999298631135095	WITHOUT_CLASSIFICATION	7.013688649050318E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999135029018844	WITHOUT_CLASSIFICATION	8.649709811557997E-5	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9996976849140653	WITHOUT_CLASSIFICATION	3.023150859346464E-4	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9997412736875142	WITHOUT_CLASSIFICATION	2.587263124858189E-4	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999589971906673	WITHOUT_CLASSIFICATION	4.1002809332626394E-5	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9995232883156536	WITHOUT_CLASSIFICATION	4.7671168434641547E-4	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999408043036944	WITHOUT_CLASSIFICATION	5.919569630558702E-5	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999345354957768	WITHOUT_CLASSIFICATION	6.546450422319683E-5	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9998908855038626	WITHOUT_CLASSIFICATION	1.0911449613734383E-4	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9995492103809799	WITHOUT_CLASSIFICATION	4.5078961902009776E-4	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9997408583174004	WITHOUT_CLASSIFICATION	2.591416825995516E-4	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9997399207915391	WITHOUT_CLASSIFICATION	2.600792084609652E-4	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9993762378829221	WITHOUT_CLASSIFICATION	6.237621170779627E-4	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9997643838240369	WITHOUT_CLASSIFICATION	2.356161759629824E-4	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9990657023758505	WITHOUT_CLASSIFICATION	9.342976241494749E-4	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9996014214466611	WITHOUT_CLASSIFICATION	3.9857855333890493E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.999743679399486	WITHOUT_CLASSIFICATION	2.563206005140018E-4	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9996598700085841	WITHOUT_CLASSIFICATION	3.401299914158757E-4	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9998240249627305	WITHOUT_CLASSIFICATION	1.7597503726949045E-4	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999110089009983	WITHOUT_CLASSIFICATION	8.899109900170626E-5	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998559693112912	WITHOUT_CLASSIFICATION	1.4403068870881E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999695452074651	WITHOUT_CLASSIFICATION	3.0454792534920747E-5	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9995838257333869	WITHOUT_CLASSIFICATION	4.1617426661310004E-4	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9996846259469525	WITHOUT_CLASSIFICATION	3.1537405304751803E-4	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997168184912741	WITHOUT_CLASSIFICATION	2.831815087258952E-4	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9997552377133022	WITHOUT_CLASSIFICATION	2.4476228669772387E-4	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999511074636639	WITHOUT_CLASSIFICATION	4.889253633612577E-5	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9998170907984368	WITHOUT_CLASSIFICATION	1.8290920156317347E-4	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9994620076154417	WITHOUT_CLASSIFICATION	5.379923845583205E-4	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9997129195281224	WITHOUT_CLASSIFICATION	2.870804718777217E-4	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9997088177869411	WITHOUT_CLASSIFICATION	2.9118221305886424E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998142408497325	WITHOUT_CLASSIFICATION	1.857591502674848E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998142408497325	WITHOUT_CLASSIFICATION	1.857591502674848E-4	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9997731419285768	WITHOUT_CLASSIFICATION	2.2685807142322882E-4	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9997000150934771	WITHOUT_CLASSIFICATION	2.999849065229408E-4	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9998185297089415	WITHOUT_CLASSIFICATION	1.8147029105843325E-4	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999692961304419	WITHOUT_CLASSIFICATION	3.070386955799177E-5	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999733098585736	WITHOUT_CLASSIFICATION	2.6690141426446814E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999323159991566	WITHOUT_CLASSIFICATION	6.768400084338035E-5	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998443025868636	WITHOUT_CLASSIFICATION	1.556974131364968E-4	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9997963114479727	WITHOUT_CLASSIFICATION	2.0368855202744594E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998610623877354	WITHOUT_CLASSIFICATION	1.3893761226463355E-4	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999401163519198	WITHOUT_CLASSIFICATION	5.988364808018055E-5	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999886839932868	WITHOUT_CLASSIFICATION	1.1316006713201716E-5	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999100473446574	WITHOUT_CLASSIFICATION	8.995265534262295E-5	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999233739695138	WITHOUT_CLASSIFICATION	7.662603048613268E-5	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998999909105225	WITHOUT_CLASSIFICATION	1.0000908947750529E-4	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9998611901442366	WITHOUT_CLASSIFICATION	1.3880985576340368E-4	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9996854899067584	WITHOUT_CLASSIFICATION	3.1451009324157E-4	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9996854899067584	WITHOUT_CLASSIFICATION	3.1451009324157E-4	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999956670053339	WITHOUT_CLASSIFICATION	4.3329946661013276E-5	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9998970990842231	WITHOUT_CLASSIFICATION	1.0290091577691652E-4	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999901158172632	WITHOUT_CLASSIFICATION	9.884182736792296E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999147046085246	WITHOUT_CLASSIFICATION	8.529539147544627E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9995366933588581	WITHOUT_CLASSIFICATION	4.633066411419043E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995281724583982	WITHOUT_CLASSIFICATION	4.718275416018864E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9997086330028532	WITHOUT_CLASSIFICATION	2.9136699714684794E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9997958468386055	WITHOUT_CLASSIFICATION	2.0415316139457432E-4	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9997958468386055	WITHOUT_CLASSIFICATION	2.0415316139457432E-4	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999131943451941	WITHOUT_CLASSIFICATION	8.680565480582404E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9998459854989034	WITHOUT_CLASSIFICATION	1.5401450109662563E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999534346100853	WITHOUT_CLASSIFICATION	4.6565389914688304E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999991594155839	WITHOUT_CLASSIFICATION	8.405844161036542E-7	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999975781867662	WITHOUT_CLASSIFICATION	2.4218132339404174E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9998531042133801	WITHOUT_CLASSIFICATION	1.4689578661983665E-4	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999009468264747	WITHOUT_CLASSIFICATION	9.905317352536689E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9996347977979644	WITHOUT_CLASSIFICATION	3.652022020356143E-4	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998374863901578	WITHOUT_CLASSIFICATION	1.625136098421955E-4	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999240933413482	WITHOUT_CLASSIFICATION	7.590665865179401E-5	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9997491617728977	WITHOUT_CLASSIFICATION	2.5083822710230595E-4	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998023265499305	WITHOUT_CLASSIFICATION	1.9767345006943893E-4	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9995793788471994	WITHOUT_CLASSIFICATION	4.2062115280061324E-4	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9998105486201934	WITHOUT_CLASSIFICATION	1.8945137980662646E-4	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999901612875992	WITHOUT_CLASSIFICATION	9.838712400794248E-5	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9997969914159384	WITHOUT_CLASSIFICATION	2.0300858406167215E-4	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9997254513006589	WITHOUT_CLASSIFICATION	2.745486993410413E-4	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9998761454419001	WITHOUT_CLASSIFICATION	1.2385455809995507E-4	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.993202380139278	WITHOUT_CLASSIFICATION	0.006797619860722084	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9996382048304437	WITHOUT_CLASSIFICATION	3.617951695561941E-4	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9997049858613314	WITHOUT_CLASSIFICATION	2.950141386685004E-4	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998882967794156	WITHOUT_CLASSIFICATION	1.1170322058437477E-4	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9998393714165568	WITHOUT_CLASSIFICATION	1.6062858344325192E-4	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9998018000075422	WITHOUT_CLASSIFICATION	1.9819999245776888E-4	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999171108038064	WITHOUT_CLASSIFICATION	8.288919619359837E-4	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999913897509282	WITHOUT_CLASSIFICATION	8.610249071766445E-6	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999806332764782	WITHOUT_CLASSIFICATION	1.9366723521689288E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9996899901290022	WITHOUT_CLASSIFICATION	3.1000987099783465E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999447293485102	WITHOUT_CLASSIFICATION	5.527065148994305E-5	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999853202072994	WITHOUT_CLASSIFICATION	1.4679792700599017E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.999518876119193	WITHOUT_CLASSIFICATION	4.8112388080712024E-4	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9998568068043091	WITHOUT_CLASSIFICATION	1.431931956908853E-4	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999559012971446	WITHOUT_CLASSIFICATION	4.409870285542425E-5	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9995223552448638	WITHOUT_CLASSIFICATION	4.7764475513621804E-4	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.999721564028273	WITHOUT_CLASSIFICATION	2.7843597172710113E-4	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9995457172433576	WITHOUT_CLASSIFICATION	4.542827566424363E-4	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9995683735294104	WITHOUT_CLASSIFICATION	4.316264705896273E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9995304323069437	WITHOUT_CLASSIFICATION	4.6956769305631855E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9998743233946785	WITHOUT_CLASSIFICATION	1.2567660532146878E-4	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999699804134418	WITHOUT_CLASSIFICATION	3.001958655821616E-5	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999290741626621	WITHOUT_CLASSIFICATION	7.092583733792303E-5	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9994902592781234	WITHOUT_CLASSIFICATION	5.097407218765815E-4	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9998646429020442	WITHOUT_CLASSIFICATION	1.3535709795576542E-4	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999981966489391	WITHOUT_CLASSIFICATION	1.8033510608480736E-6	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9997524338563212	WITHOUT_CLASSIFICATION	2.4756614367882254E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9995304323069437	WITHOUT_CLASSIFICATION	4.6956769305631855E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9998743233946785	WITHOUT_CLASSIFICATION	1.2567660532146878E-4	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998839740239305	WITHOUT_CLASSIFICATION	1.1602597606953943E-4	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9996211024322187	WITHOUT_CLASSIFICATION	3.7889756778129675E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9998472360387367	WITHOUT_CLASSIFICATION	1.527639612632546E-4	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9997994988825031	WITHOUT_CLASSIFICATION	2.0050111749703184E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999603229936929	WITHOUT_CLASSIFICATION	3.967700630704644E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999736059061254	WITHOUT_CLASSIFICATION	2.639409387459031E-5	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997026917499424	WITHOUT_CLASSIFICATION	2.973082500576513E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9997972551349195	WITHOUT_CLASSIFICATION	2.02744865080573E-4	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9997880411323299	WITHOUT_CLASSIFICATION	2.1195886767018683E-4	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999842578422654	WITHOUT_CLASSIFICATION	1.5742157734625064E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9997880411323299	WITHOUT_CLASSIFICATION	2.1195886767018683E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999416439049423	WITHOUT_CLASSIFICATION	5.835609505761423E-5	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999772782916429	WITHOUT_CLASSIFICATION	2.2721708357088206E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999402047098445	WITHOUT_CLASSIFICATION	5.9795290155571817E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997029556153831	WITHOUT_CLASSIFICATION	2.9704438461678807E-4	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999110429249873	WITHOUT_CLASSIFICATION	8.895707501257239E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9998508637327342	WITHOUT_CLASSIFICATION	1.4913626726578575E-4	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9998991336268259	WITHOUT_CLASSIFICATION	1.0086637317410888E-4	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9998031151644946	WITHOUT_CLASSIFICATION	1.9688483550536417E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9995804585629621	WITHOUT_CLASSIFICATION	4.1954143703795254E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998114741592269	WITHOUT_CLASSIFICATION	1.8852584077315706E-4	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9997801084099688	WITHOUT_CLASSIFICATION	2.198915900312581E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9995632414050123	WITHOUT_CLASSIFICATION	4.3675859498771034E-4	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9997796977142439	WITHOUT_CLASSIFICATION	2.20302285756083E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9976902406744043	WITHOUT_CLASSIFICATION	0.002309759325595661	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9997007346370901	WITHOUT_CLASSIFICATION	2.992653629098778E-4	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999195489141695	WITHOUT_CLASSIFICATION	8.045108583053316E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9995669014527334	WITHOUT_CLASSIFICATION	4.3309854726650737E-4	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999129535999972	WITHOUT_CLASSIFICATION	8.704640000279057E-5	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9997980088802468	WITHOUT_CLASSIFICATION	2.0199111975319632E-4	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9997887159196942	WITHOUT_CLASSIFICATION	2.112840803057195E-4	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998473077144806	WITHOUT_CLASSIFICATION	1.5269228551928685E-4	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9998310984607525	WITHOUT_CLASSIFICATION	1.6890153924754722E-4	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9965108769815764	WITHOUT_CLASSIFICATION	0.0034891230184235784	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998744265387282	WITHOUT_CLASSIFICATION	1.2557346127182512E-4	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9997228700894139	WITHOUT_CLASSIFICATION	2.7712991058618895E-4	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998383420926624	WITHOUT_CLASSIFICATION	1.6165790733761913E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9998180804014087	WITHOUT_CLASSIFICATION	1.819195985912941E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998167099108759	WITHOUT_CLASSIFICATION	1.832900891241318E-4	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9995252935695186	WITHOUT_CLASSIFICATION	4.747064304813838E-4	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999323516333926	WITHOUT_CLASSIFICATION	6.764836660744338E-5	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9936867530400655	WITHOUT_CLASSIFICATION	0.0063132469599345275	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998524104751004	WITHOUT_CLASSIFICATION	1.4758952489969508E-4	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.999880066652188	WITHOUT_CLASSIFICATION	1.1993334781203504E-4	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9998224649956634	WITHOUT_CLASSIFICATION	1.7753500433663038E-4	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9998068211844809	WITHOUT_CLASSIFICATION	1.9317881551913577E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9995632414050123	WITHOUT_CLASSIFICATION	4.3675859498771034E-4	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9995909975638514	WITHOUT_CLASSIFICATION	4.090024361485813E-4	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9995003498015544	WITHOUT_CLASSIFICATION	4.996501984455335E-4	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9995268879523144	WITHOUT_CLASSIFICATION	4.7311204768569137E-4	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9996041019120679	WITHOUT_CLASSIFICATION	3.958980879320813E-4	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999088017397607	WITHOUT_CLASSIFICATION	9.119826023934004E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9998758907940086	WITHOUT_CLASSIFICATION	1.2410920599140784E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9995804585629621	WITHOUT_CLASSIFICATION	4.1954143703795254E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9995804585629621	WITHOUT_CLASSIFICATION	4.1954143703795254E-4	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9998824929904018	WITHOUT_CLASSIFICATION	1.1750700959815529E-4	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9998117087318806	WITHOUT_CLASSIFICATION	1.8829126811942357E-4	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.99955239990424	WITHOUT_CLASSIFICATION	4.4760009575996315E-4	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9998836726511858	WITHOUT_CLASSIFICATION	1.1632734881420205E-4	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9995967544262597	WITHOUT_CLASSIFICATION	4.032455737401716E-4	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9997896740941397	WITHOUT_CLASSIFICATION	2.1032590586032856E-4	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9997546369330877	WITHOUT_CLASSIFICATION	2.4536306691221786E-4	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999168114359139	WITHOUT_CLASSIFICATION	8.318856408606507E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998962635637169	WITHOUT_CLASSIFICATION	1.037364362830909E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999227106171934	WITHOUT_CLASSIFICATION	7.72893828065187E-5	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999890371162896	WITHOUT_CLASSIFICATION	1.0962883710400017E-4	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995201460256251	WITHOUT_CLASSIFICATION	4.798539743749147E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9995496078588443	WITHOUT_CLASSIFICATION	4.5039214115563333E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999227106171934	WITHOUT_CLASSIFICATION	7.72893828065187E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998028469329492	WITHOUT_CLASSIFICATION	1.9715306705093475E-4	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9998796319513829	WITHOUT_CLASSIFICATION	1.203680486171313E-4	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9997394462274773	WITHOUT_CLASSIFICATION	2.605537725226518E-4	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9910151104729333	WITHOUT_CLASSIFICATION	0.00898488952706661	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995201460256251	WITHOUT_CLASSIFICATION	4.798539743749147E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998965201485928	WITHOUT_CLASSIFICATION	1.0347985140720112E-4	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999989942201257	WITHOUT_CLASSIFICATION	1.0057798742960897E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999904778977133	WITHOUT_CLASSIFICATION	9.522102286618008E-6	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999561885031223	WITHOUT_CLASSIFICATION	4.381149687780816E-5	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9995206257258641	WITHOUT_CLASSIFICATION	4.7937427413593197E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9995303822853892	WITHOUT_CLASSIFICATION	4.6961771461091957E-4	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9998116201936542	WITHOUT_CLASSIFICATION	1.88379806345809E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998600949633777	WITHOUT_CLASSIFICATION	1.3990503662241572E-4	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998342188956687	WITHOUT_CLASSIFICATION	1.657811043313214E-4	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9998986167454426	WITHOUT_CLASSIFICATION	1.0138325455739876E-4	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9996427699996376	WITHOUT_CLASSIFICATION	3.5723000036239983E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999227106171934	WITHOUT_CLASSIFICATION	7.72893828065187E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998965201485928	WITHOUT_CLASSIFICATION	1.0347985140720112E-4	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999904778977133	WITHOUT_CLASSIFICATION	9.522102286618008E-6	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.999715346574053	WITHOUT_CLASSIFICATION	2.846534259469753E-4	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999641802626027	WITHOUT_CLASSIFICATION	3.581973739727284E-5	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.999799898835627	WITHOUT_CLASSIFICATION	2.001011643730057E-4	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995201460256251	WITHOUT_CLASSIFICATION	4.798539743749147E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9998941281640209	WITHOUT_CLASSIFICATION	1.0587183597907586E-4	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9995669521273516	WITHOUT_CLASSIFICATION	4.330478726484617E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998028469329492	WITHOUT_CLASSIFICATION	1.9715306705093475E-4	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9997886399487876	WITHOUT_CLASSIFICATION	2.1136005121237E-4	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9995437642537545	WITHOUT_CLASSIFICATION	4.5623574624553925E-4	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9996080299033429	WITHOUT_CLASSIFICATION	3.919700966571391E-4	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9990921812041728	WITHOUT_CLASSIFICATION	9.078187958272355E-4	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9987203950591756	WITHOUT_CLASSIFICATION	0.0012796049408244114	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9995873167994245	WITHOUT_CLASSIFICATION	4.1268320057551866E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997029556153831	WITHOUT_CLASSIFICATION	2.9704438461678807E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997791522406612	WITHOUT_CLASSIFICATION	2.2084775933888906E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997041623272281	WITHOUT_CLASSIFICATION	2.9583767277180736E-4	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999743526213277	WITHOUT_CLASSIFICATION	2.564737867226927E-5	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999420811766964	WITHOUT_CLASSIFICATION	5.791882330374907E-5	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999415956371093	WITHOUT_CLASSIFICATION	5.8404362890599215E-5	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999440789115545	WITHOUT_CLASSIFICATION	5.592108844548036E-5	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999002728569342	WITHOUT_CLASSIFICATION	9.97271430659072E-5	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9996466427031572	WITHOUT_CLASSIFICATION	3.533572968428925E-4	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9998603400892034	WITHOUT_CLASSIFICATION	1.396599107966435E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997041623272281	WITHOUT_CLASSIFICATION	2.9583767277180736E-4	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9995217216731246	WITHOUT_CLASSIFICATION	4.7827832687540164E-4	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9995297445908164	WITHOUT_CLASSIFICATION	4.702554091835575E-4	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9995793788471994	WITHOUT_CLASSIFICATION	4.2062115280061324E-4	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9995147069576095	WITHOUT_CLASSIFICATION	4.8529304239048216E-4	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999410474631879	WITHOUT_CLASSIFICATION	5.89525368120571E-5	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.999764131589659	WITHOUT_CLASSIFICATION	2.3586841034097222E-4	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9995795308982117	WITHOUT_CLASSIFICATION	4.20469101788278E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998226053849724	WITHOUT_CLASSIFICATION	1.773946150276314E-4	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9966795437798839	WITHOUT_CLASSIFICATION	0.003320456220116054	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9995679451655125	WITHOUT_CLASSIFICATION	4.3205483448746277E-4	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999438716020579	WITHOUT_CLASSIFICATION	5.612839794219817E-5	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999135105567515	WITHOUT_CLASSIFICATION	8.648944324857221E-5	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9995509466541784	WITHOUT_CLASSIFICATION	4.4905334582158343E-4	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999820265992265	WITHOUT_CLASSIFICATION	1.7973400773454532E-5	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999990685692134	WITHOUT_CLASSIFICATION	9.314307866062241E-6	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999867822871866	WITHOUT_CLASSIFICATION	1.3217712813315368E-5	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9997018736682964	WITHOUT_CLASSIFICATION	2.9812633170360085E-4	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9998850096278628	WITHOUT_CLASSIFICATION	1.149903721373197E-4	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9998372187340626	WITHOUT_CLASSIFICATION	1.6278126593747685E-4	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9997655249974862	WITHOUT_CLASSIFICATION	2.344750025137358E-4	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9996992671764064	WITHOUT_CLASSIFICATION	3.0073282359352704E-4	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999590515294151	WITHOUT_CLASSIFICATION	4.094847058495482E-5	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9997438594269867	WITHOUT_CLASSIFICATION	2.5614057301322104E-4	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8632279694143058	WITHOUT_CLASSIFICATION	0.1367720305856942	IMPLEMENTATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9997942082412699	WITHOUT_CLASSIFICATION	2.057917587302448E-4	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9997967257776015	WITHOUT_CLASSIFICATION	2.032742223984629E-4	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999203456172662	WITHOUT_CLASSIFICATION	7.965438273382466E-5	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9993243079970341	WITHOUT_CLASSIFICATION	6.756920029659996E-4	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999848347257067	WITHOUT_CLASSIFICATION	1.5165274293285105E-5	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999547820797763	WITHOUT_CLASSIFICATION	4.521792022381E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999845687544153	WITHOUT_CLASSIFICATION	1.5431245584706746E-4	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999913807762607	WITHOUT_CLASSIFICATION	8.619223739249682E-6	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999568081084776	WITHOUT_CLASSIFICATION	4.3191891522364674E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9998564118251666	WITHOUT_CLASSIFICATION	1.4358817483345804E-4	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9998771296263679	WITHOUT_CLASSIFICATION	1.228703736320828E-4	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999384003761321	WITHOUT_CLASSIFICATION	6.159962386787608E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9998564118251666	WITHOUT_CLASSIFICATION	1.4358817483345804E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999568081084776	WITHOUT_CLASSIFICATION	4.3191891522364674E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9998771296263679	WITHOUT_CLASSIFICATION	1.228703736320828E-4	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9998742986692268	WITHOUT_CLASSIFICATION	1.2570133077324095E-4	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999458640082077	WITHOUT_CLASSIFICATION	5.4135991792208564E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999669195825261	WITHOUT_CLASSIFICATION	3.3080417473877484E-5	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9996795761371808	WITHOUT_CLASSIFICATION	3.2042386281922185E-4	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999993005568643	WITHOUT_CLASSIFICATION	6.99443135785307E-7	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9874844523436096	WITHOUT_CLASSIFICATION	0.012515547656390335	IMPLEMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9998944250521158	WITHOUT_CLASSIFICATION	1.0557494788420602E-4	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998335433527784	WITHOUT_CLASSIFICATION	1.6645664722153962E-4	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999112682377489	WITHOUT_CLASSIFICATION	8.873176225119948E-5	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999847093481328	WITHOUT_CLASSIFICATION	1.5290651867187155E-4	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9996208427917449	WITHOUT_CLASSIFICATION	3.7915720825516927E-4	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999577059096779	WITHOUT_CLASSIFICATION	4.2294090322111436E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998137298530345	WITHOUT_CLASSIFICATION	1.8627014696557119E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9996629351444084	WITHOUT_CLASSIFICATION	3.3706485559150876E-4	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999650743938507	WITHOUT_CLASSIFICATION	3.492560614918441E-5	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9998981041145889	WITHOUT_CLASSIFICATION	1.0189588541111686E-4	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999815366625796	WITHOUT_CLASSIFICATION	1.8463337420461183E-5	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9998544260297901	WITHOUT_CLASSIFICATION	1.455739702098187E-4	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999804730089855	WITHOUT_CLASSIFICATION	1.9526991014448932E-5	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998046156035458	WITHOUT_CLASSIFICATION	1.953843964542113E-4	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9995850354345827	WITHOUT_CLASSIFICATION	4.149645654173382E-4	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.999902485275922	WITHOUT_CLASSIFICATION	9.751472407813811E-5	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9996820352392781	WITHOUT_CLASSIFICATION	3.1796476072186317E-4	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999728134825299	WITHOUT_CLASSIFICATION	2.71865174700688E-5	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9997918870116005	WITHOUT_CLASSIFICATION	2.0811298839958986E-4	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9997918870116005	WITHOUT_CLASSIFICATION	2.0811298839958986E-4	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9998849094723458	WITHOUT_CLASSIFICATION	1.1509052765429357E-4	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9998849094723458	WITHOUT_CLASSIFICATION	1.1509052765429357E-4	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9980894434679861	WITHOUT_CLASSIFICATION	0.001910556532013995	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999815366625796	WITHOUT_CLASSIFICATION	1.8463337420461183E-5	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998229967534876	WITHOUT_CLASSIFICATION	1.7700324651243504E-4	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9998795562797111	WITHOUT_CLASSIFICATION	1.2044372028886651E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9994338378543196	WITHOUT_CLASSIFICATION	5.661621456804314E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9994338378543196	WITHOUT_CLASSIFICATION	5.661621456804314E-4	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999314782371772	WITHOUT_CLASSIFICATION	6.852176282289357E-5	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999366660712319	WITHOUT_CLASSIFICATION	6.333392876803124E-5	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9998989720961329	WITHOUT_CLASSIFICATION	1.0102790386718476E-4	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9997170530430175	WITHOUT_CLASSIFICATION	2.8294695698254715E-4	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9998564157671352	WITHOUT_CLASSIFICATION	1.4358423286485716E-4	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999979083018257	WITHOUT_CLASSIFICATION	2.091698174407518E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9997705987807096	WITHOUT_CLASSIFICATION	2.2940121929028808E-4	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.999685377780558	WITHOUT_CLASSIFICATION	3.146222194420756E-4	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9996278244612441	WITHOUT_CLASSIFICATION	3.721755387558944E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999649236136292	WITHOUT_CLASSIFICATION	3.507638637078805E-5	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9997904122598489	WITHOUT_CLASSIFICATION	2.0958774015103222E-4	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9996292424971996	WITHOUT_CLASSIFICATION	3.7075750280037137E-4	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9996758370011916	WITHOUT_CLASSIFICATION	3.241629988084953E-4	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9995844755829951	WITHOUT_CLASSIFICATION	4.15524417004936E-4	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9997004999088129	WITHOUT_CLASSIFICATION	2.9950009118709153E-4	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999850437900611	WITHOUT_CLASSIFICATION	1.495620993889549E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997423373025924	WITHOUT_CLASSIFICATION	2.5766269740754364E-4	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9974569713636746	WITHOUT_CLASSIFICATION	0.0025430286363253983	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.999576084718282	WITHOUT_CLASSIFICATION	4.239152817180631E-4	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999892844419535	WITHOUT_CLASSIFICATION	1.0715558046499593E-5	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9997625894444837	WITHOUT_CLASSIFICATION	2.3741055551626357E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9998120319614618	WITHOUT_CLASSIFICATION	1.879680385381379E-4	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9995876649213749	WITHOUT_CLASSIFICATION	4.1233507862515045E-4	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999490624601375	WITHOUT_CLASSIFICATION	5.0937539862447515E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999551873809778	WITHOUT_CLASSIFICATION	4.481261902227409E-5	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999063625629979	WITHOUT_CLASSIFICATION	9.363743700217785E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997041623272281	WITHOUT_CLASSIFICATION	2.9583767277180736E-4	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999438716020579	WITHOUT_CLASSIFICATION	5.612839794219817E-5	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999011852224874	WITHOUT_CLASSIFICATION	9.881477751268272E-5	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999764866682976	WITHOUT_CLASSIFICATION	2.3513331702306596E-5	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997024406956531	WITHOUT_CLASSIFICATION	2.975593043469889E-4	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997283273725514	WITHOUT_CLASSIFICATION	2.71672627448634E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9995792865528664	WITHOUT_CLASSIFICATION	4.207134471335047E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9995792865528664	WITHOUT_CLASSIFICATION	4.207134471335047E-4	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999393096996454	WITHOUT_CLASSIFICATION	6.069030035451412E-5	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9995678697533738	WITHOUT_CLASSIFICATION	4.3213024662628013E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999322208845444	WITHOUT_CLASSIFICATION	6.777911545557802E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999322208845444	WITHOUT_CLASSIFICATION	6.777911545557802E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998237561920434	WITHOUT_CLASSIFICATION	1.7624380795652636E-4	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999820723643864	WITHOUT_CLASSIFICATION	1.79276356135965E-4	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.999805104124922	WITHOUT_CLASSIFICATION	1.9489587507795606E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9995263940686376	WITHOUT_CLASSIFICATION	4.7360593136245904E-4	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9996909876253421	WITHOUT_CLASSIFICATION	3.0901237465788263E-4	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999363337566132	WITHOUT_CLASSIFICATION	6.366624338675E-5	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9993525386390707	WITHOUT_CLASSIFICATION	6.474613609293414E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9997223028193907	WITHOUT_CLASSIFICATION	2.776971806093488E-4	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999902436078601	WITHOUT_CLASSIFICATION	9.756392139899814E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999902436078601	WITHOUT_CLASSIFICATION	9.756392139899814E-5	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999907997856237	WITHOUT_CLASSIFICATION	9.200214376313817E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9996635587494491	WITHOUT_CLASSIFICATION	3.364412505508292E-4	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9996635587494491	WITHOUT_CLASSIFICATION	3.364412505508292E-4	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999922332408825	WITHOUT_CLASSIFICATION	7.766759117505994E-5	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9998422958120348	WITHOUT_CLASSIFICATION	1.5770418796520419E-4	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9969436514449895	WITHOUT_CLASSIFICATION	0.0030563485550103926	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9998505949815829	WITHOUT_CLASSIFICATION	1.4940501841715522E-4	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9998747679630913	WITHOUT_CLASSIFICATION	1.2523203690880262E-4	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999005309324149	WITHOUT_CLASSIFICATION	9.946906758505227E-5	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.999997380990678	WITHOUT_CLASSIFICATION	2.6190093220536997E-6	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998992990128515	WITHOUT_CLASSIFICATION	1.0070098714851242E-4	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999431656143132	WITHOUT_CLASSIFICATION	5.683438568675853E-5	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9997018210281675	WITHOUT_CLASSIFICATION	2.9817897183253184E-4	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999974948489013	WITHOUT_CLASSIFICATION	2.505151098706496E-5	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9998465247357363	WITHOUT_CLASSIFICATION	1.5347526426369164E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999487367579901	WITHOUT_CLASSIFICATION	5.1263242009939134E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999487367579901	WITHOUT_CLASSIFICATION	5.1263242009939134E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999487367579901	WITHOUT_CLASSIFICATION	5.1263242009939134E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999487367579901	WITHOUT_CLASSIFICATION	5.1263242009939134E-5	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9997447731726087	WITHOUT_CLASSIFICATION	2.5522682739129355E-4	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999730982421392	WITHOUT_CLASSIFICATION	2.6901757860888678E-5	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9995878385117432	WITHOUT_CLASSIFICATION	4.121614882568237E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9995272190344314	WITHOUT_CLASSIFICATION	4.7278096556863054E-4	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998657980313973	WITHOUT_CLASSIFICATION	1.3420196860263088E-4	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9996083955255041	WITHOUT_CLASSIFICATION	3.916044744959098E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9995366933588581	WITHOUT_CLASSIFICATION	4.633066411419043E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9996098569739172	WITHOUT_CLASSIFICATION	3.901430260826897E-4	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9995742926137678	WITHOUT_CLASSIFICATION	4.257073862321377E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9995366933588581	WITHOUT_CLASSIFICATION	4.633066411419043E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9995366933588581	WITHOUT_CLASSIFICATION	4.633066411419043E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9998766245045135	WITHOUT_CLASSIFICATION	1.2337549548645474E-4	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9998323413724396	WITHOUT_CLASSIFICATION	1.6765862756043607E-4	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9995207403524845	WITHOUT_CLASSIFICATION	4.7925964751551397E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998481109865287	WITHOUT_CLASSIFICATION	1.518890134712814E-4	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999177094076275	WITHOUT_CLASSIFICATION	8.229059237249306E-5	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999013279641414	WITHOUT_CLASSIFICATION	9.867203585854834E-5	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999378423285297	WITHOUT_CLASSIFICATION	6.215767147031865E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998481109865287	WITHOUT_CLASSIFICATION	1.518890134712814E-4	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999461322336112	WITHOUT_CLASSIFICATION	5.386776638888541E-5	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998185463667894	WITHOUT_CLASSIFICATION	1.81453633210617E-4	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999243251754037	WITHOUT_CLASSIFICATION	7.567482459627973E-5	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9997329189570177	WITHOUT_CLASSIFICATION	2.6708104298227715E-4	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999620930812865	WITHOUT_CLASSIFICATION	3.7906918713475086E-5	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9998590348551272	WITHOUT_CLASSIFICATION	1.4096514487275838E-4	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999320118268049	WITHOUT_CLASSIFICATION	6.798817319506005E-5	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.999770554619838	WITHOUT_CLASSIFICATION	2.2944538016197714E-4	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999694460037657	WITHOUT_CLASSIFICATION	3.0553996234297225E-4	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999585358820441	WITHOUT_CLASSIFICATION	4.146411795584351E-5	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996935406321427	WITHOUT_CLASSIFICATION	3.064593678573372E-4	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9997101861838189	WITHOUT_CLASSIFICATION	2.898138161810496E-4	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999228060292444	WITHOUT_CLASSIFICATION	7.719397075548344E-5	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9996097711131632	WITHOUT_CLASSIFICATION	3.902288868367928E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999937635656823	WITHOUT_CLASSIFICATION	6.236434317696124E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998149292004155	WITHOUT_CLASSIFICATION	1.8507079958449292E-4	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998894123510398	WITHOUT_CLASSIFICATION	1.1058764896028119E-4	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999811602872634	WITHOUT_CLASSIFICATION	1.8839712736604808E-4	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997173611774849	WITHOUT_CLASSIFICATION	2.8263882251508603E-4	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999811602872634	WITHOUT_CLASSIFICATION	1.8839712736604808E-4	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998940881097974	WITHOUT_CLASSIFICATION	1.0591189020256853E-4	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999019091617584	WITHOUT_CLASSIFICATION	9.809083824174673E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9996405636155777	WITHOUT_CLASSIFICATION	3.594363844222634E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999903634309102	WITHOUT_CLASSIFICATION	9.636569089799476E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998894123510398	WITHOUT_CLASSIFICATION	1.1058764896028119E-4	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997173611774849	WITHOUT_CLASSIFICATION	2.8263882251508603E-4	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998940881097974	WITHOUT_CLASSIFICATION	1.0591189020256853E-4	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9997901913841488	WITHOUT_CLASSIFICATION	2.0980861585109044E-4	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9997219070730009	WITHOUT_CLASSIFICATION	2.7809292699914695E-4	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9996121439477791	WITHOUT_CLASSIFICATION	3.8785605222095245E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9996860299318026	WITHOUT_CLASSIFICATION	3.1397006819743756E-4	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999706378551614	WITHOUT_CLASSIFICATION	2.9362144838596677E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999579644838021	WITHOUT_CLASSIFICATION	4.20355161979308E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997423373025924	WITHOUT_CLASSIFICATION	2.5766269740754364E-4	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999019091617584	WITHOUT_CLASSIFICATION	9.809083824174673E-5	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999758952979111	WITHOUT_CLASSIFICATION	2.4104702088908365E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9998834383765564	WITHOUT_CLASSIFICATION	1.1656162344356191E-4	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9997388662473514	WITHOUT_CLASSIFICATION	2.611337526486426E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997423373025924	WITHOUT_CLASSIFICATION	2.5766269740754364E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997041623272281	WITHOUT_CLASSIFICATION	2.9583767277180736E-4	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9998898697946283	WITHOUT_CLASSIFICATION	1.1013020537169696E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997423373025924	WITHOUT_CLASSIFICATION	2.5766269740754364E-4	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9998480001568485	WITHOUT_CLASSIFICATION	1.5199984315156982E-4	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998275241598679	WITHOUT_CLASSIFICATION	1.7247584013215105E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997041623272281	WITHOUT_CLASSIFICATION	2.9583767277180736E-4	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9990331618389342	WITHOUT_CLASSIFICATION	9.668381610658759E-4	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9995558867328407	WITHOUT_CLASSIFICATION	4.441132671592762E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999602202172301	WITHOUT_CLASSIFICATION	3.977978276990703E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.999627745072825	WITHOUT_CLASSIFICATION	3.7225492717494194E-4	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999617192993215	WITHOUT_CLASSIFICATION	3.828070067844368E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997700038882659	WITHOUT_CLASSIFICATION	2.2999611173413987E-4	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.999822982280562	WITHOUT_CLASSIFICATION	1.770177194379715E-4	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9997039962436223	WITHOUT_CLASSIFICATION	2.9600375637778243E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999534061986924	WITHOUT_CLASSIFICATION	4.659380130755609E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9969436514449895	WITHOUT_CLASSIFICATION	0.0030563485550103926	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.999682780191434	WITHOUT_CLASSIFICATION	3.172198085661083E-4	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999516084823911	WITHOUT_CLASSIFICATION	4.839151760895582E-5	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9995284937893516	WITHOUT_CLASSIFICATION	4.7150621064840476E-4	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9995935308838308	WITHOUT_CLASSIFICATION	4.064691161691161E-4	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9998559947732689	WITHOUT_CLASSIFICATION	1.4400522673108776E-4	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999356691339849	WITHOUT_CLASSIFICATION	6.43308660150693E-5	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.999641488320144	WITHOUT_CLASSIFICATION	3.585116798560584E-4	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999522971494015	WITHOUT_CLASSIFICATION	4.770285059854957E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9998883730638164	WITHOUT_CLASSIFICATION	1.116269361835128E-4	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999124087117636	WITHOUT_CLASSIFICATION	8.759128823643038E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9969436514449895	WITHOUT_CLASSIFICATION	0.0030563485550103926	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9997409832665085	WITHOUT_CLASSIFICATION	2.5901673349147615E-4	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999692836697237	WITHOUT_CLASSIFICATION	3.071633027630605E-4	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9996674709806338	WITHOUT_CLASSIFICATION	3.3252901936623873E-4	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9998412261801837	WITHOUT_CLASSIFICATION	1.5877381981623114E-4	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9998791185475527	WITHOUT_CLASSIFICATION	1.2088145244734197E-4	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9998921015017984	WITHOUT_CLASSIFICATION	1.0789849820158287E-4	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9997274655011867	WITHOUT_CLASSIFICATION	2.7253449881327E-4	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9996458249930918	WITHOUT_CLASSIFICATION	3.5417500690813376E-4	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.999861279669863	WITHOUT_CLASSIFICATION	1.3872033013702777E-4	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9969436514449895	WITHOUT_CLASSIFICATION	0.0030563485550103926	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998029162162824	WITHOUT_CLASSIFICATION	1.9708378371774657E-4	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9997731869874392	WITHOUT_CLASSIFICATION	2.2681301256078816E-4	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9995072736857997	WITHOUT_CLASSIFICATION	4.927263142003359E-4	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9996709167679287	WITHOUT_CLASSIFICATION	3.2908323207129196E-4	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9998926277749174	WITHOUT_CLASSIFICATION	1.073722250826658E-4	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9995798914691283	WITHOUT_CLASSIFICATION	4.201085308717194E-4	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999752759874921	WITHOUT_CLASSIFICATION	2.4724012507835116E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997041623272281	WITHOUT_CLASSIFICATION	2.9583767277180736E-4	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999824754558443	WITHOUT_CLASSIFICATION	1.7524544155691203E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9998407906712016	WITHOUT_CLASSIFICATION	1.5920932879843054E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9998407906712016	WITHOUT_CLASSIFICATION	1.5920932879843054E-4	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.999712600974597	WITHOUT_CLASSIFICATION	2.8739902540296486E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997700038882659	WITHOUT_CLASSIFICATION	2.2999611173413987E-4	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9997545271308097	WITHOUT_CLASSIFICATION	2.45472869190308E-4	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999375185051688	WITHOUT_CLASSIFICATION	6.248149483126452E-5	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999949619254383	WITHOUT_CLASSIFICATION	5.0380745617098576E-5	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998540308285208	WITHOUT_CLASSIFICATION	1.4596917147924492E-4	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9997026116473687	WITHOUT_CLASSIFICATION	2.9738835263131807E-4	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9998266631692654	WITHOUT_CLASSIFICATION	1.7333683073455724E-4	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999241672052496	WITHOUT_CLASSIFICATION	7.583279475035285E-5	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997709407019384	WITHOUT_CLASSIFICATION	2.2905929806154364E-4	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9998519639683756	WITHOUT_CLASSIFICATION	1.4803603162436333E-4	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999759799184225	WITHOUT_CLASSIFICATION	2.40200815775287E-5	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999902301978859	WITHOUT_CLASSIFICATION	9.769802114033093E-6	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999544988094128	WITHOUT_CLASSIFICATION	4.550119058723898E-5	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999975770866781	WITHOUT_CLASSIFICATION	2.4229133219313763E-6	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9997602942024736	WITHOUT_CLASSIFICATION	2.397057975264473E-4	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9998819323720096	WITHOUT_CLASSIFICATION	1.1806762799030272E-4	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999751066132058	WITHOUT_CLASSIFICATION	2.4893386794305027E-5	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999521185354621	WITHOUT_CLASSIFICATION	4.788146453796269E-5	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999788818594382	WITHOUT_CLASSIFICATION	2.111814056185819E-5	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9998548358580686	WITHOUT_CLASSIFICATION	1.451641419313814E-4	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998626381656439	WITHOUT_CLASSIFICATION	1.3736183435608267E-4	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999898427854276	WITHOUT_CLASSIFICATION	1.0157214572484036E-5	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9995798914691283	WITHOUT_CLASSIFICATION	4.201085308717194E-4	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999739934868868	WITHOUT_CLASSIFICATION	2.6006513113223536E-5	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999364083952923	WITHOUT_CLASSIFICATION	6.359160470770413E-5	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999797212026251	WITHOUT_CLASSIFICATION	2.0278797374857932E-5	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998978583262915	WITHOUT_CLASSIFICATION	1.0214167370850861E-4	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999172273043967	WITHOUT_CLASSIFICATION	8.277269560331169E-5	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998617690262442	WITHOUT_CLASSIFICATION	1.3823097375577063E-4	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999798816669246	WITHOUT_CLASSIFICATION	2.0118333075337543E-5	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999795804770086	WITHOUT_CLASSIFICATION	2.0419522991378288E-5	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999789737524077	WITHOUT_CLASSIFICATION	2.1026247592175998E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999768729359323	WITHOUT_CLASSIFICATION	2.3127064067653473E-5	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.999841010169789	WITHOUT_CLASSIFICATION	1.5898983021103797E-4	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9998242937984536	WITHOUT_CLASSIFICATION	1.7570620154646544E-4	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9998412541728058	WITHOUT_CLASSIFICATION	1.587458271942542E-4	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9998348992415165	WITHOUT_CLASSIFICATION	1.65100758483627E-4	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998541148730621	WITHOUT_CLASSIFICATION	1.4588512693785837E-4	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998541148730621	WITHOUT_CLASSIFICATION	1.4588512693785837E-4	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9997168396750377	WITHOUT_CLASSIFICATION	2.8316032496231847E-4	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9994781568326657	WITHOUT_CLASSIFICATION	5.218431673342765E-4	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998827400270919	WITHOUT_CLASSIFICATION	1.1725997290812758E-4	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998827400270919	WITHOUT_CLASSIFICATION	1.1725997290812758E-4	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9998740087737622	WITHOUT_CLASSIFICATION	1.2599122623775544E-4	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9996722806030026	WITHOUT_CLASSIFICATION	3.277193969973968E-4	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999730935523309	WITHOUT_CLASSIFICATION	2.6906447669205918E-5	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999769896496812	WITHOUT_CLASSIFICATION	2.3010350318843627E-5	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998906718413942	WITHOUT_CLASSIFICATION	1.0932815860582625E-4	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998994547077826	WITHOUT_CLASSIFICATION	1.0054529221745704E-4	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999035869886169	WITHOUT_CLASSIFICATION	9.641301138300016E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999035869886169	WITHOUT_CLASSIFICATION	9.641301138300016E-5	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998998586497096	WITHOUT_CLASSIFICATION	1.0014135029037329E-4	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9998153637228551	WITHOUT_CLASSIFICATION	1.8463627714503233E-4	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9996460454808984	WITHOUT_CLASSIFICATION	3.5395451910167714E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9998086413087212	WITHOUT_CLASSIFICATION	1.9135869127872372E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9998086413087212	WITHOUT_CLASSIFICATION	1.9135869127872372E-4	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9996056859711984	WITHOUT_CLASSIFICATION	3.943140288016391E-4	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998007814012879	WITHOUT_CLASSIFICATION	1.9921859871201307E-4	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999527033939246	WITHOUT_CLASSIFICATION	4.7296606075375965E-5	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9998301448827025	WITHOUT_CLASSIFICATION	1.6985511729747645E-4	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999808951106483	WITHOUT_CLASSIFICATION	1.910488935169435E-4	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9995309872433442	WITHOUT_CLASSIFICATION	4.6901275665584534E-4	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998345353949418	WITHOUT_CLASSIFICATION	1.654646050581127E-4	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9998560330895356	WITHOUT_CLASSIFICATION	1.4396691046428622E-4	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9998426184618793	WITHOUT_CLASSIFICATION	1.5738153812079928E-4	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9997047883015926	WITHOUT_CLASSIFICATION	2.9521169840729204E-4	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9998697323700254	WITHOUT_CLASSIFICATION	1.302676299745416E-4	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9998287844904427	WITHOUT_CLASSIFICATION	1.712155095573225E-4	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9981781809187267	WITHOUT_CLASSIFICATION	0.0018218190812733894	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9998432504408927	WITHOUT_CLASSIFICATION	1.567495591072908E-4	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9995205134098689	WITHOUT_CLASSIFICATION	4.794865901311528E-4	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999983600299227	WITHOUT_CLASSIFICATION	1.639970077298732E-5	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9997527424690043	WITHOUT_CLASSIFICATION	2.472575309956976E-4	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999549240671097	WITHOUT_CLASSIFICATION	4.507593289022784E-5	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999078507250543	WITHOUT_CLASSIFICATION	9.214927494569637E-5	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9998573895663345	WITHOUT_CLASSIFICATION	1.4261043366543586E-4	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9998138243888957	WITHOUT_CLASSIFICATION	1.861756111042987E-4	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9996846391718088	WITHOUT_CLASSIFICATION	3.1536082819118744E-4	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9997561006794217	WITHOUT_CLASSIFICATION	2.4389932057835464E-4	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9998413755809611	WITHOUT_CLASSIFICATION	1.5862441903884004E-4	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9965133567325373	WITHOUT_CLASSIFICATION	0.0034866432674626755	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999145581830493	WITHOUT_CLASSIFICATION	8.544181695062347E-5	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9998950490117463	WITHOUT_CLASSIFICATION	1.0495098825365216E-4	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9995720944334513	WITHOUT_CLASSIFICATION	4.279055665487488E-4	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999563263259088	WITHOUT_CLASSIFICATION	4.3673674091249894E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998906655088114	WITHOUT_CLASSIFICATION	1.093344911885449E-4	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999967291652401	WITHOUT_CLASSIFICATION	3.270834759899043E-5	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9997917301305239	WITHOUT_CLASSIFICATION	2.082698694761014E-4	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999971487648128	WITHOUT_CLASSIFICATION	2.8512351871951953E-5	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9996090625295886	WITHOUT_CLASSIFICATION	3.909374704114767E-4	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9998888178256768	WITHOUT_CLASSIFICATION	1.1118217432315485E-4	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9995754151001952	WITHOUT_CLASSIFICATION	4.245848998046963E-4	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9995649260801915	WITHOUT_CLASSIFICATION	4.350739198085355E-4	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9997955176893447	WITHOUT_CLASSIFICATION	2.044823106552089E-4	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9998757425280207	WITHOUT_CLASSIFICATION	1.2425747197930746E-4	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999657647078579	WITHOUT_CLASSIFICATION	3.423529214210838E-5	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999852944735335	WITHOUT_CLASSIFICATION	1.4705526466496946E-4	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9995905113637098	WITHOUT_CLASSIFICATION	4.094886362901825E-4	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9996003039878035	WITHOUT_CLASSIFICATION	3.9969601219650455E-4	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9997072198355497	WITHOUT_CLASSIFICATION	2.9278016445026935E-4	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9995273195843067	WITHOUT_CLASSIFICATION	4.7268041569331084E-4	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9995827728949875	WITHOUT_CLASSIFICATION	4.172271050124448E-4	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9995504231650012	WITHOUT_CLASSIFICATION	4.4957683499876965E-4	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999724988209826	WITHOUT_CLASSIFICATION	2.7501179017433767E-5	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999728455231517	WITHOUT_CLASSIFICATION	2.7154476848289412E-5	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999019685874628	WITHOUT_CLASSIFICATION	9.803141253720123E-5	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999226324262109	WITHOUT_CLASSIFICATION	7.736757378903341E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9996787885047071	WITHOUT_CLASSIFICATION	3.212114952929414E-4	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9996478074507749	WITHOUT_CLASSIFICATION	3.5219254922520777E-4	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999627316294988	WITHOUT_CLASSIFICATION	3.726837050117337E-5	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9997017337329999	WITHOUT_CLASSIFICATION	2.9826626700013895E-4	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9998465060440792	WITHOUT_CLASSIFICATION	1.5349395592086784E-4	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9996142131463895	WITHOUT_CLASSIFICATION	3.8578685361041125E-4	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9995882113658879	WITHOUT_CLASSIFICATION	4.1178863411205503E-4	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999176242660038	WITHOUT_CLASSIFICATION	8.237573399620677E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9998887382669767	WITHOUT_CLASSIFICATION	1.1126173302332774E-4	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998961068860293	WITHOUT_CLASSIFICATION	1.0389311397076604E-4	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998961068860293	WITHOUT_CLASSIFICATION	1.0389311397076604E-4	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999808285115366	WITHOUT_CLASSIFICATION	1.9171488463479263E-5	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999863603572663	WITHOUT_CLASSIFICATION	1.3639642733760592E-5	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999964850026666	WITHOUT_CLASSIFICATION	3.514997333298951E-6	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999948003650915	WITHOUT_CLASSIFICATION	5.199634908503593E-5	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9998966849124741	WITHOUT_CLASSIFICATION	1.0331508752585845E-4	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9998776837254446	WITHOUT_CLASSIFICATION	1.223162745554798E-4	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.999964943806784	WITHOUT_CLASSIFICATION	3.505619321596677E-5	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999488986056265	WITHOUT_CLASSIFICATION	5.110139437349305E-5	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.999853926502782	WITHOUT_CLASSIFICATION	1.4607349721795941E-4	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999751578211973	WITHOUT_CLASSIFICATION	2.484217880279101E-5	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999776915389126	WITHOUT_CLASSIFICATION	2.2308461087472355E-5	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9997721746731891	WITHOUT_CLASSIFICATION	2.278253268109726E-4	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999778878456957	WITHOUT_CLASSIFICATION	2.2112154304190716E-5	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999100412939838	WITHOUT_CLASSIFICATION	8.995870601633241E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999803021297071	WITHOUT_CLASSIFICATION	1.96978702929138E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999803021297071	WITHOUT_CLASSIFICATION	1.96978702929138E-4	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9998261544623771	WITHOUT_CLASSIFICATION	1.7384553762300856E-4	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999584456941247	WITHOUT_CLASSIFICATION	4.155430587526541E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9998660413798872	WITHOUT_CLASSIFICATION	1.3395862011269694E-4	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999539706430152	WITHOUT_CLASSIFICATION	4.6029356984825865E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.99984085421557	WITHOUT_CLASSIFICATION	1.5914578442995092E-4	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997403195452763	WITHOUT_CLASSIFICATION	2.596804547237158E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9995758975216816	WITHOUT_CLASSIFICATION	4.24102478318467E-4	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9980006973699115	WITHOUT_CLASSIFICATION	0.0019993026300885366	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9998899097402499	WITHOUT_CLASSIFICATION	1.1009025975004015E-4	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999590293927825	WITHOUT_CLASSIFICATION	4.0970607217603275E-5	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999942587493927	WITHOUT_CLASSIFICATION	5.741250607304187E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9998199509773025	WITHOUT_CLASSIFICATION	1.800490226975801E-4	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999532570914973	WITHOUT_CLASSIFICATION	4.674290850268895E-5	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999432274149237	WITHOUT_CLASSIFICATION	5.6772585076253204E-5	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999417654159841	WITHOUT_CLASSIFICATION	5.823458401585828E-5	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998675863503153	WITHOUT_CLASSIFICATION	1.3241364968479599E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999760665029525	WITHOUT_CLASSIFICATION	2.393349704759918E-5	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999897419783945	WITHOUT_CLASSIFICATION	1.0258021605408918E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9998132572980414	WITHOUT_CLASSIFICATION	1.8674270195867825E-4	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9996479328498854	WITHOUT_CLASSIFICATION	3.520671501146587E-4	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999589851536218	WITHOUT_CLASSIFICATION	4.1014846378299136E-5	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999938167925765	WITHOUT_CLASSIFICATION	6.183207423587698E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999953970079006	WITHOUT_CLASSIFICATION	4.6029920994412195E-6	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9995239920164539	WITHOUT_CLASSIFICATION	4.7600798354606623E-4	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999315030335154	WITHOUT_CLASSIFICATION	6.849696648461353E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9998977375233188	WITHOUT_CLASSIFICATION	1.0226247668120122E-4	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999312065275046	WITHOUT_CLASSIFICATION	6.879347249547032E-5	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999603277650395	WITHOUT_CLASSIFICATION	3.967223496056883E-5	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999973963830015	WITHOUT_CLASSIFICATION	2.603616998492822E-5	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999692281334179	WITHOUT_CLASSIFICATION	3.077186658208825E-5	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999871184564129	WITHOUT_CLASSIFICATION	1.288154358704913E-5	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9998761415538673	WITHOUT_CLASSIFICATION	1.238584461327202E-4	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999209392063042	WITHOUT_CLASSIFICATION	7.906079369580556E-5	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999303089450493	WITHOUT_CLASSIFICATION	6.96910549506689E-5	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999561479301327	WITHOUT_CLASSIFICATION	4.3852069867262115E-5	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999902620369913	WITHOUT_CLASSIFICATION	9.737963008817909E-6	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999160001709816	WITHOUT_CLASSIFICATION	8.39998290184781E-5	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999785389626815	WITHOUT_CLASSIFICATION	2.146103731852194E-5	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9997287283910211	WITHOUT_CLASSIFICATION	2.7127160897886133E-4	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999303553423501	WITHOUT_CLASSIFICATION	6.964465764997495E-5	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9974735991333157	WITHOUT_CLASSIFICATION	0.002526400866684288	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9974735991333157	WITHOUT_CLASSIFICATION	0.002526400866684288	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999690881950705	WITHOUT_CLASSIFICATION	3.091180492945875E-5	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999969950867221	WITHOUT_CLASSIFICATION	3.0049132777792127E-6	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999474494400115	WITHOUT_CLASSIFICATION	5.255055998854043E-5	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998145491750768	WITHOUT_CLASSIFICATION	1.8545082492306392E-4	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999780404789691	WITHOUT_CLASSIFICATION	2.195952103085876E-5	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999436048778936	WITHOUT_CLASSIFICATION	5.6395122106451555E-5	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9997823400021486	WITHOUT_CLASSIFICATION	2.1765999785143222E-4	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999259243005457	WITHOUT_CLASSIFICATION	7.407569945424733E-5	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999656762808921	WITHOUT_CLASSIFICATION	3.432371910796878E-5	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999883086540128	WITHOUT_CLASSIFICATION	1.1691345987194762E-4	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999861274885092	WITHOUT_CLASSIFICATION	1.387251149080478E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9992734610089615	WITHOUT_CLASSIFICATION	7.265389910384313E-4	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999618814351666	WITHOUT_CLASSIFICATION	3.8118564833347964E-5	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.999930138877153	WITHOUT_CLASSIFICATION	6.986112284704142E-5	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999840327642537	WITHOUT_CLASSIFICATION	1.5967235746309486E-5	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999105730117511	WITHOUT_CLASSIFICATION	8.942698824881407E-5	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9998366657632599	WITHOUT_CLASSIFICATION	1.633342367400962E-4	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.999985212969722	WITHOUT_CLASSIFICATION	1.4787030278045963E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9998234958658889	WITHOUT_CLASSIFICATION	1.765041341110292E-4	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999636313154081	WITHOUT_CLASSIFICATION	3.6368684591986766E-5	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999788313062996	WITHOUT_CLASSIFICATION	2.116869370035543E-5	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999402172137742	WITHOUT_CLASSIFICATION	5.97827862256455E-5	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999640279103248	WITHOUT_CLASSIFICATION	3.597208967522242E-5	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9998497243520971	WITHOUT_CLASSIFICATION	1.5027564790288508E-4	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9997301636008581	WITHOUT_CLASSIFICATION	2.6983639914189664E-4	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999775876463449	WITHOUT_CLASSIFICATION	2.2412353655112148E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999811651770145	WITHOUT_CLASSIFICATION	1.883482298552319E-5	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999224082985	WITHOUT_CLASSIFICATION	7.759170154709301E-8	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999997446310099	WITHOUT_CLASSIFICATION	2.553689900178654E-7	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9997667690645231	WITHOUT_CLASSIFICATION	2.3323093547681983E-4	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999225522442896	WITHOUT_CLASSIFICATION	7.744775571036009E-5	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999462059472719	WITHOUT_CLASSIFICATION	5.379405272814951E-5	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999991042477736	WITHOUT_CLASSIFICATION	8.957522263471673E-7	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999267493613638	WITHOUT_CLASSIFICATION	7.325063863613859E-5	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.999997503666905	WITHOUT_CLASSIFICATION	2.496333095128242E-6	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999902674876829	WITHOUT_CLASSIFICATION	9.732512317098491E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999529976582885	WITHOUT_CLASSIFICATION	4.700234171152865E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999929324294575	WITHOUT_CLASSIFICATION	7.067570542482472E-6	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999887345814971	WITHOUT_CLASSIFICATION	1.1265418502904169E-5	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9995784699195934	WITHOUT_CLASSIFICATION	4.215300804066154E-4	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998960576956812	WITHOUT_CLASSIFICATION	1.0394230431882105E-4	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999856262334622	WITHOUT_CLASSIFICATION	1.437376653786765E-5	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999193939111217	WITHOUT_CLASSIFICATION	8.060608887825487E-5	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999989558244551	WITHOUT_CLASSIFICATION	1.0441755449338567E-6	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.999991451596901	WITHOUT_CLASSIFICATION	8.5484030990352E-6	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9997507277612732	WITHOUT_CLASSIFICATION	2.4927223872682865E-4	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999929478980669	WITHOUT_CLASSIFICATION	7.052101933136068E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999778878456957	WITHOUT_CLASSIFICATION	2.2112154304190716E-5	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999640987603791	WITHOUT_CLASSIFICATION	3.5901239620977703E-5	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999332053558475	WITHOUT_CLASSIFICATION	6.679464415250381E-5	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999205794550585	WITHOUT_CLASSIFICATION	7.94205449414907E-5	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999916082099862	WITHOUT_CLASSIFICATION	8.391790013745784E-6	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999879003581704	WITHOUT_CLASSIFICATION	1.2099641829634403E-5	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999793662772909	WITHOUT_CLASSIFICATION	2.0633722709203657E-5	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999665933381355	WITHOUT_CLASSIFICATION	3.340666186444078E-5	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999692779915288	WITHOUT_CLASSIFICATION	3.072200847113819E-5	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999835004860936	WITHOUT_CLASSIFICATION	1.649951390639333E-4	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9995844901735352	WITHOUT_CLASSIFICATION	4.1550982646469697E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999986960211371	WITHOUT_CLASSIFICATION	1.3039788628951056E-6	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998315554841288	WITHOUT_CLASSIFICATION	1.6844451587113532E-4	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.999961575991834	WITHOUT_CLASSIFICATION	3.84240081659456E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999905587756345	WITHOUT_CLASSIFICATION	9.441224365540158E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997290614768519	WITHOUT_CLASSIFICATION	2.7093852314797885E-4	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9996962048959581	WITHOUT_CLASSIFICATION	3.0379510404196356E-4	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9997236916838137	WITHOUT_CLASSIFICATION	2.7630831618628555E-4	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999592876601625	WITHOUT_CLASSIFICATION	4.07123398374737E-5	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999711467743085	WITHOUT_CLASSIFICATION	2.885322569145137E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997290614768519	WITHOUT_CLASSIFICATION	2.7093852314797885E-4	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999265089679038	WITHOUT_CLASSIFICATION	7.349103209630273E-5	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999736829084823	WITHOUT_CLASSIFICATION	2.6317091517724326E-5	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999971760314638	WITHOUT_CLASSIFICATION	2.8239685361317587E-6	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999897701244562	WITHOUT_CLASSIFICATION	1.0229875543700991E-5	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999262459593393	WITHOUT_CLASSIFICATION	7.375404066069835E-5	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999978755107337	WITHOUT_CLASSIFICATION	2.1244892662992107E-5	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999685611080693	WITHOUT_CLASSIFICATION	3.14388919307034E-5	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9997538828848855	WITHOUT_CLASSIFICATION	2.4611711511455256E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999640440439462	WITHOUT_CLASSIFICATION	3.5955956053712926E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.999960691977667	WITHOUT_CLASSIFICATION	3.930802233301435E-5	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998579921186457	WITHOUT_CLASSIFICATION	1.4200788135434363E-4	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9997047672667801	WITHOUT_CLASSIFICATION	2.9523273321990963E-4	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999017030627381	WITHOUT_CLASSIFICATION	9.829693726198082E-5	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9997234012318835	WITHOUT_CLASSIFICATION	2.765987681163952E-4	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9998398261667152	WITHOUT_CLASSIFICATION	1.6017383328485903E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999898427854276	WITHOUT_CLASSIFICATION	1.0157214572484036E-5	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999610191866822	WITHOUT_CLASSIFICATION	3.89808133177362E-5	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999945478372669	WITHOUT_CLASSIFICATION	5.452162733075802E-6	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9863871044363681	WITHOUT_CLASSIFICATION	0.013612895563631863	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9998538023974342	WITHOUT_CLASSIFICATION	1.4619760256583784E-4	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999473574408618	WITHOUT_CLASSIFICATION	5.264255913806882E-5	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999635787809283	WITHOUT_CLASSIFICATION	3.642121907163683E-5	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999344949181698	WITHOUT_CLASSIFICATION	6.55050818301813E-5	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999806200532853	WITHOUT_CLASSIFICATION	1.937994671475254E-5	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999404927877058	WITHOUT_CLASSIFICATION	5.9507212294107184E-5	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999918737118705	WITHOUT_CLASSIFICATION	8.1262881294494E-6	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.999997657899689	WITHOUT_CLASSIFICATION	2.3421003110373422E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999576204216558	WITHOUT_CLASSIFICATION	4.237957834424334E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999782866484378	WITHOUT_CLASSIFICATION	2.171335156213851E-5	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999981051363461	WITHOUT_CLASSIFICATION	1.8948636538842957E-6	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.999690078311327	WITHOUT_CLASSIFICATION	3.099216886731392E-4	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998651459606167	WITHOUT_CLASSIFICATION	1.3485403938328183E-4	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999605308110067	WITHOUT_CLASSIFICATION	3.946918899331934E-5	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999357419946842	WITHOUT_CLASSIFICATION	6.425800531578078E-5	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999730505619236	WITHOUT_CLASSIFICATION	2.6949438076258333E-5	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999994561536778	WITHOUT_CLASSIFICATION	5.438463221053767E-7	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.999996524314098	WITHOUT_CLASSIFICATION	3.4756859019241934E-6	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999619290031602	WITHOUT_CLASSIFICATION	3.807099683975992E-5	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9998274529678641	WITHOUT_CLASSIFICATION	1.7254703213593934E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999695452074651	WITHOUT_CLASSIFICATION	3.0454792534920747E-5	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998922138075168	WITHOUT_CLASSIFICATION	1.0778619248319089E-4	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998922138075168	WITHOUT_CLASSIFICATION	1.0778619248319089E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999323159991566	WITHOUT_CLASSIFICATION	6.768400084338035E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999401163519198	WITHOUT_CLASSIFICATION	5.988364808018055E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999147046085246	WITHOUT_CLASSIFICATION	8.529539147544627E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9995263940686376	WITHOUT_CLASSIFICATION	4.7360593136245904E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9995263940686376	WITHOUT_CLASSIFICATION	4.7360593136245904E-4	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9998563997580228	WITHOUT_CLASSIFICATION	1.4360024197721783E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999901612875992	WITHOUT_CLASSIFICATION	9.838712400794248E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9965089853955853	WITHOUT_CLASSIFICATION	0.0034910146044145975	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998882967794156	WITHOUT_CLASSIFICATION	1.1170322058437477E-4	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999952131120511	WITHOUT_CLASSIFICATION	4.786887948989388E-6	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999383604995362	WITHOUT_CLASSIFICATION	6.16395004637454E-5	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999618055347295	WITHOUT_CLASSIFICATION	3.8194465270502166E-5	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9998124139919226	WITHOUT_CLASSIFICATION	1.8758600807749915E-4	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999381817223	WITHOUT_CLASSIFICATION	6.181827773212387E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998091936375348	WITHOUT_CLASSIFICATION	1.9080636246515415E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998091936375348	WITHOUT_CLASSIFICATION	1.9080636246515415E-4	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9997491232632473	WITHOUT_CLASSIFICATION	2.508767367527879E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9995199641853578	WITHOUT_CLASSIFICATION	4.800358146421905E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9995303822853892	WITHOUT_CLASSIFICATION	4.6961771461091957E-4	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9997901233419989	WITHOUT_CLASSIFICATION	2.098766580009921E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997041623272281	WITHOUT_CLASSIFICATION	2.9583767277180736E-4	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9995584921901619	WITHOUT_CLASSIFICATION	4.4150780983813747E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997791522406612	WITHOUT_CLASSIFICATION	2.2084775933888906E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997041623272281	WITHOUT_CLASSIFICATION	2.9583767277180736E-4	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999164814843159	WITHOUT_CLASSIFICATION	8.351851568417168E-5	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999498246692925	WITHOUT_CLASSIFICATION	5.017533070741064E-5	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9996627142000143	WITHOUT_CLASSIFICATION	3.3728579998577055E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999511035195561	WITHOUT_CLASSIFICATION	4.889648044388462E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.999960691977667	WITHOUT_CLASSIFICATION	3.930802233301435E-5	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9998378808693668	WITHOUT_CLASSIFICATION	1.621191306333381E-4	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9996875179112169	WITHOUT_CLASSIFICATION	3.1248208878309085E-4	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999605607724655	WITHOUT_CLASSIFICATION	3.943922753448531E-5	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9997891126008901	WITHOUT_CLASSIFICATION	2.108873991099591E-4	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998175360298379	WITHOUT_CLASSIFICATION	1.8246397016206703E-4	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9998466138341757	WITHOUT_CLASSIFICATION	1.5338616582424055E-4	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9997635880354802	WITHOUT_CLASSIFICATION	2.3641196451990173E-4	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999521194533094	WITHOUT_CLASSIFICATION	4.788054669061676E-5	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9998925729180477	WITHOUT_CLASSIFICATION	1.0742708195230428E-4	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9996927361194914	WITHOUT_CLASSIFICATION	3.0726388050860977E-4	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9996927361194914	WITHOUT_CLASSIFICATION	3.0726388050860977E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998481109865287	WITHOUT_CLASSIFICATION	1.518890134712814E-4	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999979612897613	WITHOUT_CLASSIFICATION	2.0387102387680007E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9995366933588581	WITHOUT_CLASSIFICATION	4.633066411419043E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9998989045018133	WITHOUT_CLASSIFICATION	1.0109549818670567E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.999929822310548	WITHOUT_CLASSIFICATION	7.017768945191318E-5	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999824763268438	WITHOUT_CLASSIFICATION	1.7523673156251713E-5	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999937635656823	WITHOUT_CLASSIFICATION	6.236434317696124E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999909128353035	WITHOUT_CLASSIFICATION	9.087164696530119E-6	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9997901913841488	WITHOUT_CLASSIFICATION	2.0980861585109044E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997957476164349	WITHOUT_CLASSIFICATION	2.0425238356521752E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997423373025924	WITHOUT_CLASSIFICATION	2.5766269740754364E-4	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999950537921318	WITHOUT_CLASSIFICATION	4.946207868201877E-6	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.999942234483913	WITHOUT_CLASSIFICATION	5.776551608700765E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999802120867485	WITHOUT_CLASSIFICATION	1.978791325143693E-5	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9998995872292864	WITHOUT_CLASSIFICATION	1.0041277071354809E-4	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9997618270570927	WITHOUT_CLASSIFICATION	2.3817294290724445E-4	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999727594596048	WITHOUT_CLASSIFICATION	2.7240540395202274E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999280358047876	WITHOUT_CLASSIFICATION	7.19641952123289E-5	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9997809574923741	WITHOUT_CLASSIFICATION	2.1904250762599345E-4	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999669583822224	WITHOUT_CLASSIFICATION	3.304161777774982E-5	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999991876490146	WITHOUT_CLASSIFICATION	8.123509852957976E-7	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999991013887617	WITHOUT_CLASSIFICATION	8.986112382828436E-7	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999527033939246	WITHOUT_CLASSIFICATION	4.7296606075375965E-5	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999809711486	WITHOUT_CLASSIFICATION	1.9028851351911796E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998556333865081	WITHOUT_CLASSIFICATION	1.4436661349197312E-4	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998556333865081	WITHOUT_CLASSIFICATION	1.4436661349197312E-4	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999842414086983	WITHOUT_CLASSIFICATION	1.5758591301706136E-4	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999580502473204	WITHOUT_CLASSIFICATION	4.1949752679511485E-5	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999948005058633	WITHOUT_CLASSIFICATION	5.199494136651573E-6	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999983138918649	WITHOUT_CLASSIFICATION	1.6861081351010106E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9996268298428311	WITHOUT_CLASSIFICATION	3.7317015716885983E-4	IMPLEMENTATION
