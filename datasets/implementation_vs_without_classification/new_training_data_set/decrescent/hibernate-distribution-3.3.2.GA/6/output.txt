todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9992558640146214	WITHOUT_CLASSIFICATION	7.441359853785266E-4	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9992558640146214	WITHOUT_CLASSIFICATION	7.441359853785266E-4	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.613000252921759	WITHOUT_CLASSIFICATION	0.38699974707824114	IMPLEMENTATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.7103963340368699	WITHOUT_CLASSIFICATION	0.28960366596313003	IMPLEMENTATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.8628695722844035	WITHOUT_CLASSIFICATION	0.13713042771559644	IMPLEMENTATION
TODO: handle TypeDefs	IMPLEMENTATION	0.9240682911338729	IMPLEMENTATION	0.07593170886612703	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9939518588284284	WITHOUT_CLASSIFICATION	0.006048141171571545	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.6010538126098163	IMPLEMENTATION	0.3989461873901836	WITHOUT_CLASSIFICATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.5576186954252462	WITHOUT_CLASSIFICATION	0.44238130457475394	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.5256212262430449	WITHOUT_CLASSIFICATION	0.47437877375695514	IMPLEMENTATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.995949447416176	WITHOUT_CLASSIFICATION	0.0040505525838240575	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.9240682911338729	IMPLEMENTATION	0.07593170886612703	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9221160262308498	IMPLEMENTATION	0.07788397376915017	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9221160262308498	IMPLEMENTATION	0.07788397376915017	WITHOUT_CLASSIFICATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.9715606959150744	WITHOUT_CLASSIFICATION	0.028439304084925624	IMPLEMENTATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.5140366297670819	IMPLEMENTATION	0.4859633702329183	WITHOUT_CLASSIFICATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999995193590668	IMPLEMENTATION	4.80640933096283E-7	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.8121858924613738	WITHOUT_CLASSIFICATION	0.1878141075386261	IMPLEMENTATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.9999908553109635	WITHOUT_CLASSIFICATION	9.144689036409046E-6	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.638171816454319	IMPLEMENTATION	0.36182818354568114	WITHOUT_CLASSIFICATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.8720530446753137	IMPLEMENTATION	0.12794695532468625	WITHOUT_CLASSIFICATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9971911389102763	WITHOUT_CLASSIFICATION	0.0028088610897236224	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.7939987864626639	IMPLEMENTATION	0.20600121353733614	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9621959952132795	IMPLEMENTATION	0.037804004786720434	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9621959952132795	IMPLEMENTATION	0.037804004786720434	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.8708741258095041	WITHOUT_CLASSIFICATION	0.129125874190496	IMPLEMENTATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.6443779379361337	IMPLEMENTATION	0.3556220620638664	WITHOUT_CLASSIFICATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.7191839446611763	WITHOUT_CLASSIFICATION	0.2808160553388237	IMPLEMENTATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.6539209793545522	IMPLEMENTATION	0.34607902064544777	WITHOUT_CLASSIFICATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9866683340143757	IMPLEMENTATION	0.013331665985624292	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.6748301180205666	WITHOUT_CLASSIFICATION	0.3251698819794335	IMPLEMENTATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.6010538126098163	IMPLEMENTATION	0.3989461873901836	WITHOUT_CLASSIFICATION
todo : look at optimizing these...	IMPLEMENTATION	0.999745403914301	WITHOUT_CLASSIFICATION	2.545960856990625E-4	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.8045246438799983	IMPLEMENTATION	0.19547535612000166	WITHOUT_CLASSIFICATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9995364637559836	IMPLEMENTATION	4.6353624401637705E-4	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.7407386979000052	IMPLEMENTATION	0.2592613020999949	WITHOUT_CLASSIFICATION
TODO: not visible to the user!	IMPLEMENTATION	0.9390397683583727	IMPLEMENTATION	0.06096023164162742	WITHOUT_CLASSIFICATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.5240428179392055	WITHOUT_CLASSIFICATION	0.47595718206079446	IMPLEMENTATION
TODO: use these in methods above	IMPLEMENTATION	0.6533825718206565	WITHOUT_CLASSIFICATION	0.3466174281793435	IMPLEMENTATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9686448755663383	IMPLEMENTATION	0.03135512443366168	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9686448755663383	IMPLEMENTATION	0.03135512443366168	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.964535275026583	WITHOUT_CLASSIFICATION	0.035464724973416975	IMPLEMENTATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999438832751603	WITHOUT_CLASSIFICATION	5.6116724839692895E-5	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9988556498074153	WITHOUT_CLASSIFICATION	0.0011443501925847296	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9951497919617555	IMPLEMENTATION	0.0048502080382445195	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.5253363416111464	WITHOUT_CLASSIFICATION	0.4746636583888535	IMPLEMENTATION
TODO: formulas ?	IMPLEMENTATION	0.5004481442940995	IMPLEMENTATION	0.49955185570590055	WITHOUT_CLASSIFICATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.7407431633397459	WITHOUT_CLASSIFICATION	0.259256836660254	IMPLEMENTATION
todo : cache this sql...	IMPLEMENTATION	0.9997104763921705	WITHOUT_CLASSIFICATION	2.8952360782959E-4	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.531298711199848	WITHOUT_CLASSIFICATION	0.468701288800152	IMPLEMENTATION
TODO: cache this in an instvar	IMPLEMENTATION	0.8613977950017232	WITHOUT_CLASSIFICATION	0.1386022049982767	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.6816310147756554	WITHOUT_CLASSIFICATION	0.3183689852243446	IMPLEMENTATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.5283515856929653	WITHOUT_CLASSIFICATION	0.4716484143070347	IMPLEMENTATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.9857036690263183	IMPLEMENTATION	0.014296330973681668	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.5572096647827021	IMPLEMENTATION	0.442790335217298	WITHOUT_CLASSIFICATION
TODO: terrible implementation!	IMPLEMENTATION	0.5152550652094242	IMPLEMENTATION	0.4847449347905756	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.5572096647827021	IMPLEMENTATION	0.442790335217298	WITHOUT_CLASSIFICATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9971629958258399	IMPLEMENTATION	0.002837004174160058	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.8121107575061447	IMPLEMENTATION	0.18788924249385533	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.5572096647827021	IMPLEMENTATION	0.442790335217298	WITHOUT_CLASSIFICATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999681865235728	WITHOUT_CLASSIFICATION	3.181347642718556E-5	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999681865235728	WITHOUT_CLASSIFICATION	3.181347642718556E-5	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9999715166360342	IMPLEMENTATION	2.848336396580814E-5	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.6261945231442155	IMPLEMENTATION	0.37380547685578447	WITHOUT_CLASSIFICATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999927412824396	WITHOUT_CLASSIFICATION	7.2587175604524755E-6	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999618172384556	WITHOUT_CLASSIFICATION	3.8182761544443244E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999618172384556	WITHOUT_CLASSIFICATION	3.8182761544443244E-5	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999094692096209	WITHOUT_CLASSIFICATION	9.053079037924196E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999800642928329	WITHOUT_CLASSIFICATION	1.9935707167104678E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999638327516799	WITHOUT_CLASSIFICATION	3.616724832013264E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999638327516799	WITHOUT_CLASSIFICATION	3.616724832013264E-5	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999853417891806	WITHOUT_CLASSIFICATION	1.4658210819298543E-5	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999279332773571	WITHOUT_CLASSIFICATION	7.206672264294123E-5	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999863244086376	WITHOUT_CLASSIFICATION	1.3675591362355105E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999897304798049	WITHOUT_CLASSIFICATION	1.0269520195057194E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999997386207654	WITHOUT_CLASSIFICATION	2.6137923459877217E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999997386207654	WITHOUT_CLASSIFICATION	2.6137923459877217E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999358104327863	WITHOUT_CLASSIFICATION	6.418956721367753E-5	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9986924997672026	WITHOUT_CLASSIFICATION	0.0013075002327973925	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.9999553375997945	WITHOUT_CLASSIFICATION	4.46624002054055E-5	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999963195639536	WITHOUT_CLASSIFICATION	3.680436046497735E-6	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999982484632772	WITHOUT_CLASSIFICATION	1.7515367228231387E-6	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999444789309155	WITHOUT_CLASSIFICATION	5.5521069084549726E-5	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.999835649008951	WITHOUT_CLASSIFICATION	1.643509910488384E-4	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9998860907467993	WITHOUT_CLASSIFICATION	1.1390925320059554E-4	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999382140721952	WITHOUT_CLASSIFICATION	6.17859278048156E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999979848028934	WITHOUT_CLASSIFICATION	2.0151971066070483E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999441247139285	WITHOUT_CLASSIFICATION	5.5875286071457677E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999441247139285	WITHOUT_CLASSIFICATION	5.5875286071457677E-5	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9980850593051639	WITHOUT_CLASSIFICATION	0.001914940694836081	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999494755611809	WITHOUT_CLASSIFICATION	5.05244388191103E-5	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999916136016818	WITHOUT_CLASSIFICATION	8.386398318210152E-6	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999531919113638	WITHOUT_CLASSIFICATION	4.6808088636248775E-5	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9253507117820776	WITHOUT_CLASSIFICATION	0.07464928821792237	IMPLEMENTATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999973619485649	WITHOUT_CLASSIFICATION	2.6380514351195806E-6	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999866906661639	WITHOUT_CLASSIFICATION	1.3309333836114852E-5	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999899130651145	WITHOUT_CLASSIFICATION	1.0086934885587725E-5	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999859374655129	WITHOUT_CLASSIFICATION	1.4062534487163884E-5	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999296432423391	WITHOUT_CLASSIFICATION	7.035675766084197E-5	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999939520366655	WITHOUT_CLASSIFICATION	6.047963334388737E-6	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9997242477719606	WITHOUT_CLASSIFICATION	2.7575222803943693E-4	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999878404317358	WITHOUT_CLASSIFICATION	1.215956826410901E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999965151778685	WITHOUT_CLASSIFICATION	3.4848221315852727E-6	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999657175122745	WITHOUT_CLASSIFICATION	3.428248772549015E-5	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999236466438639	WITHOUT_CLASSIFICATION	7.635335613601558E-5	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999238279421148	WITHOUT_CLASSIFICATION	7.617205788512387E-5	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999263598648873	WITHOUT_CLASSIFICATION	7.364013511274453E-5	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999671801457903	WITHOUT_CLASSIFICATION	3.2819854209700274E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9997323695678101	WITHOUT_CLASSIFICATION	2.676304321900093E-4	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999463317131223	WITHOUT_CLASSIFICATION	5.366828687771909E-5	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999463317131223	WITHOUT_CLASSIFICATION	5.366828687771909E-5	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999671801457903	WITHOUT_CLASSIFICATION	3.2819854209700274E-4	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9885042914931207	WITHOUT_CLASSIFICATION	0.011495708506879268	IMPLEMENTATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999146058957348	WITHOUT_CLASSIFICATION	8.539410426522905E-5	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999034504617186	WITHOUT_CLASSIFICATION	9.654953828141747E-5	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999976949245202	WITHOUT_CLASSIFICATION	2.305075479891718E-6	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999921970402289	WITHOUT_CLASSIFICATION	7.802959771053874E-6	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9977710511936315	WITHOUT_CLASSIFICATION	0.002228948806368545	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9998899303548409	WITHOUT_CLASSIFICATION	1.1006964515916255E-4	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9990923484255363	WITHOUT_CLASSIFICATION	9.076515744637492E-4	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9995503110150701	WITHOUT_CLASSIFICATION	4.4968898492996615E-4	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9994987105897256	WITHOUT_CLASSIFICATION	5.012894102743185E-4	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999463317131223	WITHOUT_CLASSIFICATION	5.366828687771909E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999919116960663	WITHOUT_CLASSIFICATION	8.088303933608225E-6	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9996202266526737	WITHOUT_CLASSIFICATION	3.797733473263109E-4	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999945226160822	WITHOUT_CLASSIFICATION	5.477383917834454E-6	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999997134793569	WITHOUT_CLASSIFICATION	2.865206430954879E-6	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999809369054377	WITHOUT_CLASSIFICATION	1.906309456231782E-5	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999967497886014	WITHOUT_CLASSIFICATION	3.2502113986612997E-6	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999951020355662	WITHOUT_CLASSIFICATION	4.8979644338036085E-6	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999969972176982	WITHOUT_CLASSIFICATION	3.0027823017217656E-6	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999508618611389	WITHOUT_CLASSIFICATION	4.913813886114047E-5	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999993754255623	WITHOUT_CLASSIFICATION	6.245744378221354E-7	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999846028596947	WITHOUT_CLASSIFICATION	1.5397140305284127E-4	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999246547008617	WITHOUT_CLASSIFICATION	7.534529913836061E-5	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.6770221610072734	IMPLEMENTATION	0.3229778389927266	WITHOUT_CLASSIFICATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9995620500830847	WITHOUT_CLASSIFICATION	4.3794991691524726E-4	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999990435108736	WITHOUT_CLASSIFICATION	9.564891264030504E-6	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9935847430592434	WITHOUT_CLASSIFICATION	0.006415256940756561	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999948016183003	WITHOUT_CLASSIFICATION	5.198381699706342E-6	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999996823235406	WITHOUT_CLASSIFICATION	3.176764594011069E-6	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9997803885796883	WITHOUT_CLASSIFICATION	2.1961142031166393E-4	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999677311244157	WITHOUT_CLASSIFICATION	3.226887558430866E-5	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999974337076905	WITHOUT_CLASSIFICATION	2.566292309641086E-6	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999922492619787	WITHOUT_CLASSIFICATION	7.750738021171191E-6	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999929043374572	WITHOUT_CLASSIFICATION	7.095662542777634E-6	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999847485764	WITHOUT_CLASSIFICATION	1.5251423575602365E-8	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999922492619787	WITHOUT_CLASSIFICATION	7.750738021171191E-6	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9973739010951573	WITHOUT_CLASSIFICATION	0.0026260989048425467	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998874341580848	WITHOUT_CLASSIFICATION	1.1256584191519928E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999282807818641	WITHOUT_CLASSIFICATION	7.171921813583011E-5	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.9999505466796005	WITHOUT_CLASSIFICATION	4.945332039950763E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999745919973295	WITHOUT_CLASSIFICATION	2.5408002670525728E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999745919973295	WITHOUT_CLASSIFICATION	2.5408002670525728E-5	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999384698142241	WITHOUT_CLASSIFICATION	6.153018577593271E-5	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999998334943077	WITHOUT_CLASSIFICATION	1.6650569231432418E-7	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9998648713833752	WITHOUT_CLASSIFICATION	1.3512861662485357E-4	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999998347591784	WITHOUT_CLASSIFICATION	1.6524082159833598E-6	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9998729458993665	WITHOUT_CLASSIFICATION	1.2705410063349598E-4	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999997673498039	WITHOUT_CLASSIFICATION	2.326501960894684E-6	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999451196689059	WITHOUT_CLASSIFICATION	5.488033109412E-5	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.998784432286565	WITHOUT_CLASSIFICATION	0.0012155677134349167	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999704238473406	WITHOUT_CLASSIFICATION	2.9576152659429544E-5	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.999992786886042	WITHOUT_CLASSIFICATION	7.213113957958628E-6	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999808658252296	WITHOUT_CLASSIFICATION	1.9134174770412057E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999808658252296	WITHOUT_CLASSIFICATION	1.9134174770412057E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999261434626711	WITHOUT_CLASSIFICATION	7.38565373289245E-5	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998974437871496	WITHOUT_CLASSIFICATION	1.02556212850447E-4	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999833902674211	WITHOUT_CLASSIFICATION	1.6609732578929258E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999808658252296	WITHOUT_CLASSIFICATION	1.9134174770412057E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999261434626711	WITHOUT_CLASSIFICATION	7.38565373289245E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999261434626711	WITHOUT_CLASSIFICATION	7.38565373289245E-5	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999962119991218	WITHOUT_CLASSIFICATION	3.7880008780572565E-6	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998413452898349	WITHOUT_CLASSIFICATION	1.586547101651257E-4	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999571355055	WITHOUT_CLASSIFICATION	4.2864494404107115E-8	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.99999899199863	WITHOUT_CLASSIFICATION	1.0080013699810714E-6	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9987653204997817	WITHOUT_CLASSIFICATION	0.001234679500218212	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9987653204997817	WITHOUT_CLASSIFICATION	0.001234679500218212	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999893017136244	WITHOUT_CLASSIFICATION	1.0698286375511824E-5	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999581158309506	WITHOUT_CLASSIFICATION	4.188416904937266E-5	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.9999968398238543	WITHOUT_CLASSIFICATION	3.1601761457204405E-6	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.999997530055603	WITHOUT_CLASSIFICATION	2.469944397072521E-6	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.999997530055603	WITHOUT_CLASSIFICATION	2.469944397072521E-6	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999979112820653	WITHOUT_CLASSIFICATION	2.0887179347066578E-5	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9985968754245078	WITHOUT_CLASSIFICATION	0.001403124575492133	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999811575290868	WITHOUT_CLASSIFICATION	1.8842470913213697E-5	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999829119564	WITHOUT_CLASSIFICATION	1.7088043737176295E-8	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999893062106604	WITHOUT_CLASSIFICATION	1.0693789339567446E-5	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9998910865124588	WITHOUT_CLASSIFICATION	1.0891348754120598E-4	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998871709063669	WITHOUT_CLASSIFICATION	1.128290936331057E-4	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.9999024499956906	WITHOUT_CLASSIFICATION	9.755000430937592E-5	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999811575290868	WITHOUT_CLASSIFICATION	1.8842470913213697E-5	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.9999850206005184	WITHOUT_CLASSIFICATION	1.4979399481674555E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999821109685044	WITHOUT_CLASSIFICATION	1.7889031495673746E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999821109685044	WITHOUT_CLASSIFICATION	1.7889031495673746E-5	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999863224077	WITHOUT_CLASSIFICATION	1.36775921992392E-8	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999842551325181	WITHOUT_CLASSIFICATION	1.5744867481891235E-5	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9998547505036348	WITHOUT_CLASSIFICATION	1.452494963651804E-4	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9898543420079083	WITHOUT_CLASSIFICATION	0.010145657992091611	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999408423647356	WITHOUT_CLASSIFICATION	5.915763526450592E-5	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999052042252522	WITHOUT_CLASSIFICATION	9.479577474777818E-5	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9999860022808402	WITHOUT_CLASSIFICATION	1.3997719159858065E-5	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.9999627003888346	WITHOUT_CLASSIFICATION	3.729961116545658E-5	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9997852047139798	WITHOUT_CLASSIFICATION	2.1479528602025633E-4	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999993993628336	WITHOUT_CLASSIFICATION	6.006371663887655E-7	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999993993628336	WITHOUT_CLASSIFICATION	6.006371663887655E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.999988767015945	WITHOUT_CLASSIFICATION	1.1232984055105887E-5	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999927412824396	WITHOUT_CLASSIFICATION	7.2587175604524755E-6	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999793856907631	WITHOUT_CLASSIFICATION	2.0614309237024326E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999618172384556	WITHOUT_CLASSIFICATION	3.8182761544443244E-5	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999345168393344	WITHOUT_CLASSIFICATION	6.548316066565512E-5	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.999944338163247	WITHOUT_CLASSIFICATION	5.566183675300719E-5	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999180001425502	WITHOUT_CLASSIFICATION	8.199985744981535E-5	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.9999523640421744	WITHOUT_CLASSIFICATION	4.763595782560886E-5	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999694454757897	WITHOUT_CLASSIFICATION	3.0554524210360876E-5	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.9999513246388627	WITHOUT_CLASSIFICATION	4.8675361137338015E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999470532737688	WITHOUT_CLASSIFICATION	5.294672623123115E-5	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999665708573227	WITHOUT_CLASSIFICATION	3.3429142677415016E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.9999523640421744	WITHOUT_CLASSIFICATION	4.763595782560886E-5	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9998815374372737	WITHOUT_CLASSIFICATION	1.184625627262355E-4	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9998075494305736	WITHOUT_CLASSIFICATION	1.924505694264831E-4	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999182585167694	WITHOUT_CLASSIFICATION	8.17414832305533E-5	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.999966116197881	WITHOUT_CLASSIFICATION	3.388380211890056E-5	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999882512316534	WITHOUT_CLASSIFICATION	1.1748768346626259E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999638327516799	WITHOUT_CLASSIFICATION	3.616724832013264E-5	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9996530066082465	WITHOUT_CLASSIFICATION	3.469933917534368E-4	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999362730357227	WITHOUT_CLASSIFICATION	6.37269642771997E-5	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.999984080011415	WITHOUT_CLASSIFICATION	1.5919988584990658E-5	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999747564239827	WITHOUT_CLASSIFICATION	2.5243576017253947E-5	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999445717702011	WITHOUT_CLASSIFICATION	5.542822979891542E-5	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999815628070159	WITHOUT_CLASSIFICATION	1.8437192984087776E-5	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999912710782208	WITHOUT_CLASSIFICATION	8.728921779186672E-6	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.9998816599142867	WITHOUT_CLASSIFICATION	1.183400857132755E-4	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9961052159865844	WITHOUT_CLASSIFICATION	0.0038947840134156376	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.9999950185994293	WITHOUT_CLASSIFICATION	4.981400570739172E-6	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999618172384556	WITHOUT_CLASSIFICATION	3.8182761544443244E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999618172384556	WITHOUT_CLASSIFICATION	3.8182761544443244E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999470532737688	WITHOUT_CLASSIFICATION	5.294672623123115E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999445717702011	WITHOUT_CLASSIFICATION	5.542822979891542E-5	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999853417891806	WITHOUT_CLASSIFICATION	1.4658210819298543E-5	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999456480876106	WITHOUT_CLASSIFICATION	5.435191238953002E-5	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999528618818356	WITHOUT_CLASSIFICATION	4.713811816426673E-5	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999565960807735	WITHOUT_CLASSIFICATION	4.3403919226615735E-5	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9999444054968208	WITHOUT_CLASSIFICATION	5.559450317904495E-5	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999695898551044	WITHOUT_CLASSIFICATION	3.0410144895573647E-5	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9999441629480312	WITHOUT_CLASSIFICATION	5.583705196863012E-5	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.9997547790203514	WITHOUT_CLASSIFICATION	2.45220979648641E-4	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9998036314975495	WITHOUT_CLASSIFICATION	1.9636850245052426E-4	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9998036314975495	WITHOUT_CLASSIFICATION	1.9636850245052426E-4	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999946283993044	WITHOUT_CLASSIFICATION	5.3716006956709806E-6	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999892724390328	WITHOUT_CLASSIFICATION	1.0727560967217708E-5	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999253808948221	WITHOUT_CLASSIFICATION	7.461910517792979E-5	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999190172599358	WITHOUT_CLASSIFICATION	8.09827400641568E-5	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999556574822783	WITHOUT_CLASSIFICATION	4.434251772159773E-5	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.9999787953792318	WITHOUT_CLASSIFICATION	2.120462076826634E-5	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.9999905772973241	WITHOUT_CLASSIFICATION	9.422702675851013E-6	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999279332773571	WITHOUT_CLASSIFICATION	7.206672264294123E-5	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999738776370933	WITHOUT_CLASSIFICATION	2.6122362906665353E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999738776370933	WITHOUT_CLASSIFICATION	2.6122362906665353E-5	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.999961729876288	WITHOUT_CLASSIFICATION	3.8270123712148806E-5	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999806135617901	WITHOUT_CLASSIFICATION	1.9386438209868244E-5	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.999961729876288	WITHOUT_CLASSIFICATION	3.8270123712148806E-5	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999569955525803	WITHOUT_CLASSIFICATION	4.3004447419685526E-5	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.9999755147876175	WITHOUT_CLASSIFICATION	2.4485212382529844E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999618172384556	WITHOUT_CLASSIFICATION	3.8182761544443244E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999470532737688	WITHOUT_CLASSIFICATION	5.294672623123115E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999445717702011	WITHOUT_CLASSIFICATION	5.542822979891542E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999445717702011	WITHOUT_CLASSIFICATION	5.542822979891542E-5	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.9999623248998751	WITHOUT_CLASSIFICATION	3.767510012482005E-5	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.9999319245797476	WITHOUT_CLASSIFICATION	6.807542025235939E-5	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999911685577182	WITHOUT_CLASSIFICATION	8.83144228188432E-6	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999897304798049	WITHOUT_CLASSIFICATION	1.0269520195057194E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999897304798049	WITHOUT_CLASSIFICATION	1.0269520195057194E-5	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.9973852143303039	WITHOUT_CLASSIFICATION	0.0026147856696960774	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.9999962001793326	WITHOUT_CLASSIFICATION	3.7998206675110825E-6	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.9999748516865933	WITHOUT_CLASSIFICATION	2.5148313406650543E-5	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.9999467442771777	WITHOUT_CLASSIFICATION	5.325572282226567E-5	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9999858194544117	WITHOUT_CLASSIFICATION	1.4180545588255599E-5	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.999944693187686	WITHOUT_CLASSIFICATION	5.530681231391989E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999997386207654	WITHOUT_CLASSIFICATION	2.6137923459877217E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999445127726342	WITHOUT_CLASSIFICATION	5.5487227365788387E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999445127726342	WITHOUT_CLASSIFICATION	5.5487227365788387E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999358104327863	WITHOUT_CLASSIFICATION	6.418956721367753E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999358104327863	WITHOUT_CLASSIFICATION	6.418956721367753E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999407601612486	WITHOUT_CLASSIFICATION	5.923983875145455E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999407601612486	WITHOUT_CLASSIFICATION	5.923983875145455E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999265054931967	WITHOUT_CLASSIFICATION	7.349450680334701E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999265054931967	WITHOUT_CLASSIFICATION	7.349450680334701E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999897304798049	WITHOUT_CLASSIFICATION	1.0269520195057194E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999997386207654	WITHOUT_CLASSIFICATION	2.6137923459877217E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999445127726342	WITHOUT_CLASSIFICATION	5.5487227365788387E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999445127726342	WITHOUT_CLASSIFICATION	5.5487227365788387E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999358104327863	WITHOUT_CLASSIFICATION	6.418956721367753E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999407601612486	WITHOUT_CLASSIFICATION	5.923983875145455E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999407601612486	WITHOUT_CLASSIFICATION	5.923983875145455E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999265054931967	WITHOUT_CLASSIFICATION	7.349450680334701E-5	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999494601008996	WITHOUT_CLASSIFICATION	5.0539899100339575E-5	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999805328304482	WITHOUT_CLASSIFICATION	1.9467169551892547E-5	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.9999691877708977	WITHOUT_CLASSIFICATION	3.0812229102216584E-5	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999308739741672	WITHOUT_CLASSIFICATION	6.91260258327979E-4	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.9999564263453649	WITHOUT_CLASSIFICATION	4.357365463510877E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999441100892585	WITHOUT_CLASSIFICATION	5.5889910741450706E-5	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999999801060813	WITHOUT_CLASSIFICATION	1.9893918705298818E-7	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999966690098979	WITHOUT_CLASSIFICATION	3.330990102029909E-6	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999988566144713	WITHOUT_CLASSIFICATION	1.1433855287012566E-6	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9997007406544098	WITHOUT_CLASSIFICATION	2.9925934559015487E-4	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999189385364253	WITHOUT_CLASSIFICATION	8.10614635746938E-5	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999849760957995	WITHOUT_CLASSIFICATION	1.5023904200394602E-5	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999384698142241	WITHOUT_CLASSIFICATION	6.153018577593271E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999441100892585	WITHOUT_CLASSIFICATION	5.5889910741450706E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999441100892585	WITHOUT_CLASSIFICATION	5.5889910741450706E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999441100892585	WITHOUT_CLASSIFICATION	5.5889910741450706E-5	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999965957541666	WITHOUT_CLASSIFICATION	3.4042458333769357E-6	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999248472548308	WITHOUT_CLASSIFICATION	7.515274516924525E-5	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999248472548308	WITHOUT_CLASSIFICATION	7.515274516924525E-5	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.999882047220818	WITHOUT_CLASSIFICATION	1.1795277918208734E-4	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999617469265	WITHOUT_CLASSIFICATION	3.825307352525932E-8	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.999997226930463	WITHOUT_CLASSIFICATION	2.773069537045522E-6	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9994917410863418	WITHOUT_CLASSIFICATION	5.082589136582199E-4	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9994917410863418	WITHOUT_CLASSIFICATION	5.082589136582199E-4	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999982484632772	WITHOUT_CLASSIFICATION	1.7515367228231387E-6	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999378488388687	WITHOUT_CLASSIFICATION	6.21511611312748E-5	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999378488388687	WITHOUT_CLASSIFICATION	6.21511611312748E-5	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9997352823510776	WITHOUT_CLASSIFICATION	2.6471764892240803E-4	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999971436776846	WITHOUT_CLASSIFICATION	2.8563223154737432E-6	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999979848028934	WITHOUT_CLASSIFICATION	2.0151971066070483E-6	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.9999490176028232	WITHOUT_CLASSIFICATION	5.098239717682471E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999444789309155	WITHOUT_CLASSIFICATION	5.5521069084549726E-5	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.5232661200083227	IMPLEMENTATION	0.47673387999167727	WITHOUT_CLASSIFICATION
ID	WITHOUT_CLASSIFICATION	0.9998306477532829	WITHOUT_CLASSIFICATION	1.6935224671701065E-4	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999813635478852	WITHOUT_CLASSIFICATION	1.8636452114660443E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.99994068097557	WITHOUT_CLASSIFICATION	5.93190244300145E-5	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999681728906117	WITHOUT_CLASSIFICATION	3.182710938835052E-5	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999991769414986	WITHOUT_CLASSIFICATION	8.230585014126319E-7	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999531919113638	WITHOUT_CLASSIFICATION	4.6808088636248775E-5	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999246788181091	WITHOUT_CLASSIFICATION	7.532118189091604E-5	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999370612208728	WITHOUT_CLASSIFICATION	6.293877912722991E-5	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9999443865545494	WITHOUT_CLASSIFICATION	5.561344545053028E-5	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999441325968103	WITHOUT_CLASSIFICATION	5.586740318975115E-5	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999404192032345	WITHOUT_CLASSIFICATION	5.958079676543492E-5	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999693479404408	WITHOUT_CLASSIFICATION	3.065205955930658E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999979848028934	WITHOUT_CLASSIFICATION	2.0151971066070483E-6	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9998594315845623	WITHOUT_CLASSIFICATION	1.4056841543781434E-4	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.9999832215976426	WITHOUT_CLASSIFICATION	1.677840235734577E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999454338388002	WITHOUT_CLASSIFICATION	5.4566161199786035E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999444789309155	WITHOUT_CLASSIFICATION	5.5521069084549726E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999693479404408	WITHOUT_CLASSIFICATION	3.065205955930658E-5	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9998594315845623	WITHOUT_CLASSIFICATION	1.4056841543781434E-4	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999454338388002	WITHOUT_CLASSIFICATION	5.4566161199786035E-5	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998944918160001	WITHOUT_CLASSIFICATION	1.0550818400000335E-4	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.9999441423180556	WITHOUT_CLASSIFICATION	5.585768194431756E-5	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998944918160001	WITHOUT_CLASSIFICATION	1.0550818400000335E-4	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999441247139285	WITHOUT_CLASSIFICATION	5.5875286071457677E-5	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9998465568646869	WITHOUT_CLASSIFICATION	1.5344313531301878E-4	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.9999151867297816	WITHOUT_CLASSIFICATION	8.48132702183401E-5	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999998062006319	WITHOUT_CLASSIFICATION	1.9379936800546216E-7	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999960232849033	WITHOUT_CLASSIFICATION	3.9767150965592E-6	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9976498545945972	WITHOUT_CLASSIFICATION	0.002350145405402816	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999840646239078	WITHOUT_CLASSIFICATION	1.59353760921805E-5	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.998487844513581	WITHOUT_CLASSIFICATION	0.0015121554864189755	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.998349098608485	WITHOUT_CLASSIFICATION	0.001650901391515003	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999840646239078	WITHOUT_CLASSIFICATION	1.59353760921805E-5	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999494755611809	WITHOUT_CLASSIFICATION	5.05244388191103E-5	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9995463714482442	WITHOUT_CLASSIFICATION	4.536285517558638E-4	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999693479404408	WITHOUT_CLASSIFICATION	3.065205955930658E-5	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999440831707359	WITHOUT_CLASSIFICATION	5.591682926398165E-5	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.9999677692033797	WITHOUT_CLASSIFICATION	3.223079662032444E-5	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9960307182942405	WITHOUT_CLASSIFICATION	0.0039692817057595045	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.99993886204062	WITHOUT_CLASSIFICATION	6.113795938002354E-5	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999832904852295	WITHOUT_CLASSIFICATION	1.67095147705569E-5	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999997109232655	WITHOUT_CLASSIFICATION	2.890767345643902E-7	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999926683735523	WITHOUT_CLASSIFICATION	7.331626447740468E-6	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.9998636688037674	WITHOUT_CLASSIFICATION	1.363311962325909E-4	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.9999461987761346	WITHOUT_CLASSIFICATION	5.3801223865440585E-5	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999805842533581	WITHOUT_CLASSIFICATION	1.9415746641909305E-4	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999458279257581	WITHOUT_CLASSIFICATION	5.417207424186308E-5	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9982543480975011	WITHOUT_CLASSIFICATION	0.0017456519024988707	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999531919113638	WITHOUT_CLASSIFICATION	4.6808088636248775E-5	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.999929502822619	WITHOUT_CLASSIFICATION	7.049717738096271E-5	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999655266378819	WITHOUT_CLASSIFICATION	3.4473362118111166E-5	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.9998651142382422	WITHOUT_CLASSIFICATION	1.3488576175783366E-4	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999607183015271	WITHOUT_CLASSIFICATION	3.928169847293425E-5	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.9999654198543096	WITHOUT_CLASSIFICATION	3.4580145690464614E-5	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999722479982623	WITHOUT_CLASSIFICATION	2.7752001737609247E-5	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999134499844	WITHOUT_CLASSIFICATION	8.655001555641447E-8	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999948468982599	WITHOUT_CLASSIFICATION	5.153101740109084E-6	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9972854280873535	WITHOUT_CLASSIFICATION	0.0027145719126463906	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999509340569799	WITHOUT_CLASSIFICATION	4.906594302012835E-5	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9984866599155996	WITHOUT_CLASSIFICATION	0.00151334008440032	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9984866599155996	WITHOUT_CLASSIFICATION	0.00151334008440032	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999692203071731	WITHOUT_CLASSIFICATION	3.077969282686114E-5	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999819861625603	WITHOUT_CLASSIFICATION	1.8013837439670617E-5	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999361817275024	WITHOUT_CLASSIFICATION	6.381827249760684E-5	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999500824241494	WITHOUT_CLASSIFICATION	4.991757585054973E-5	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999703459917204	WITHOUT_CLASSIFICATION	2.9654008279592565E-5	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9998399782196603	WITHOUT_CLASSIFICATION	1.600217803397681E-4	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999857712025637	WITHOUT_CLASSIFICATION	1.4228797436218992E-5	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9898641922696642	WITHOUT_CLASSIFICATION	0.010135807730335858	IMPLEMENTATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999947185273066	WITHOUT_CLASSIFICATION	5.281472693431421E-6	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999507353719763	WITHOUT_CLASSIFICATION	4.92646280237585E-5	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.999937176939026	WITHOUT_CLASSIFICATION	6.282306097401598E-5	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9996628221403453	WITHOUT_CLASSIFICATION	3.371778596546795E-4	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999026804867487	WITHOUT_CLASSIFICATION	9.731951325135654E-5	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999946230107638	WITHOUT_CLASSIFICATION	5.3769892362098284E-5	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9993448288958648	WITHOUT_CLASSIFICATION	6.551711041350788E-4	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999642624703243	WITHOUT_CLASSIFICATION	3.573752967562921E-5	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999627970194993	WITHOUT_CLASSIFICATION	3.7202980500823E-5	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999775626961578	WITHOUT_CLASSIFICATION	2.243730384221027E-5	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998779827421347	WITHOUT_CLASSIFICATION	1.2201725786529213E-4	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9998576763655818	WITHOUT_CLASSIFICATION	1.4232363441822073E-4	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999709223270522	WITHOUT_CLASSIFICATION	2.9077672947779457E-5	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999594631641641	WITHOUT_CLASSIFICATION	4.0536835835913136E-5	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999642624703243	WITHOUT_CLASSIFICATION	3.573752967562921E-5	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999056208872508	WITHOUT_CLASSIFICATION	9.437911274932454E-5	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998827641431884	WITHOUT_CLASSIFICATION	1.1723585681151559E-4	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9998824165936454	WITHOUT_CLASSIFICATION	1.1758340635462968E-4	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999767268867	WITHOUT_CLASSIFICATION	2.3273113304704994E-8	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999585175317922	WITHOUT_CLASSIFICATION	4.148246820785429E-5	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999775626961578	WITHOUT_CLASSIFICATION	2.243730384221027E-5	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999646941508724	WITHOUT_CLASSIFICATION	3.530584912762901E-5	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9997719568683923	WITHOUT_CLASSIFICATION	2.2804313160772904E-4	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9998652468170088	WITHOUT_CLASSIFICATION	1.3475318299116957E-4	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999430701421856	WITHOUT_CLASSIFICATION	5.6929857814373716E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999430701421856	WITHOUT_CLASSIFICATION	5.6929857814373716E-5	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999263598648873	WITHOUT_CLASSIFICATION	7.364013511274453E-5	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999615497120312	WITHOUT_CLASSIFICATION	3.845028796869813E-5	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999359160960106	WITHOUT_CLASSIFICATION	6.40839039894319E-5	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999359160960106	WITHOUT_CLASSIFICATION	6.40839039894319E-5	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9972854280873535	WITHOUT_CLASSIFICATION	0.0027145719126463906	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9998075771099622	WITHOUT_CLASSIFICATION	1.9242289003781367E-4	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993572073920483	WITHOUT_CLASSIFICATION	6.427926079516921E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999469493829495	WITHOUT_CLASSIFICATION	5.305061705059721E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.999988767015945	WITHOUT_CLASSIFICATION	1.1232984055105887E-5	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993572073920483	WITHOUT_CLASSIFICATION	6.427926079516921E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999469493829495	WITHOUT_CLASSIFICATION	5.305061705059721E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.921958792204771	WITHOUT_CLASSIFICATION	0.07804120779522901	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999994605890001	WITHOUT_CLASSIFICATION	5.39410999853369E-7	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999753575911364	WITHOUT_CLASSIFICATION	2.464240886359727E-5	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.9999992863911841	WITHOUT_CLASSIFICATION	7.136088158637064E-7	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9990560403980728	WITHOUT_CLASSIFICATION	9.439596019271025E-4	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.8422805113947514	WITHOUT_CLASSIFICATION	0.15771948860524876	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.999525621344456	WITHOUT_CLASSIFICATION	4.743786555440027E-4	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.999525621344456	WITHOUT_CLASSIFICATION	4.743786555440027E-4	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999925823655428	WITHOUT_CLASSIFICATION	7.417634457346433E-6	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999989601520705	WITHOUT_CLASSIFICATION	1.0398479295474068E-6	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9997901291340718	WITHOUT_CLASSIFICATION	2.0987086592825466E-4	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999996885212186	WITHOUT_CLASSIFICATION	3.114787814072191E-7	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999955986754168	WITHOUT_CLASSIFICATION	4.401324583214537E-6	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9998454567022519	WITHOUT_CLASSIFICATION	1.5454329774819596E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.999988767015945	WITHOUT_CLASSIFICATION	1.1232984055105887E-5	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9998454567022519	WITHOUT_CLASSIFICATION	1.5454329774819596E-4	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999948659592859	WITHOUT_CLASSIFICATION	5.134040714139365E-6	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999948659592859	WITHOUT_CLASSIFICATION	5.134040714139365E-6	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999997419629036	WITHOUT_CLASSIFICATION	2.5803709640130414E-6	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.921958792204771	WITHOUT_CLASSIFICATION	0.07804120779522901	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.995589619587947	WITHOUT_CLASSIFICATION	0.004410380412052983	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999915352382874	WITHOUT_CLASSIFICATION	8.464761712620552E-6	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9929120597108032	WITHOUT_CLASSIFICATION	0.007087940289196809	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.99999296014611	WITHOUT_CLASSIFICATION	7.0398538899674E-6	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997866559160241	WITHOUT_CLASSIFICATION	2.1334408397597843E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.921958792204771	WITHOUT_CLASSIFICATION	0.07804120779522901	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.99999296014611	WITHOUT_CLASSIFICATION	7.0398538899674E-6	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997866559160241	WITHOUT_CLASSIFICATION	2.1334408397597843E-4	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999954778385483	WITHOUT_CLASSIFICATION	4.522161451835884E-6	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998995363785051	WITHOUT_CLASSIFICATION	1.0046362149477968E-4	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999942950343946	WITHOUT_CLASSIFICATION	5.70496560537468E-6	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.921958792204771	WITHOUT_CLASSIFICATION	0.07804120779522901	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.921958792204771	WITHOUT_CLASSIFICATION	0.07804120779522901	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9999924932338893	WITHOUT_CLASSIFICATION	7.506766110720581E-6	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.9999917630060385	WITHOUT_CLASSIFICATION	8.23699396139591E-6	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.9999949577448706	WITHOUT_CLASSIFICATION	5.0422551293258105E-6	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999965151778685	WITHOUT_CLASSIFICATION	3.4848221315852727E-6	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.9999890731026556	WITHOUT_CLASSIFICATION	1.0926897344270218E-5	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999921891154204	WITHOUT_CLASSIFICATION	7.810884579571237E-6	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9997940154769477	WITHOUT_CLASSIFICATION	2.059845230522304E-4	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999825719035288	WITHOUT_CLASSIFICATION	1.742809647120903E-5	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999864213534871	WITHOUT_CLASSIFICATION	1.3578646512759062E-5	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.999962539181785	WITHOUT_CLASSIFICATION	3.746081821499907E-5	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9971575191007804	WITHOUT_CLASSIFICATION	0.002842480899219573	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9944473915560004	WITHOUT_CLASSIFICATION	0.005552608443999643	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999983348835717	WITHOUT_CLASSIFICATION	1.6651164282346112E-6	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9994871531829614	WITHOUT_CLASSIFICATION	5.128468170384697E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999857441890576	WITHOUT_CLASSIFICATION	1.4255810942402267E-4	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.999999221272826	WITHOUT_CLASSIFICATION	7.787271740562264E-7	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999965151778685	WITHOUT_CLASSIFICATION	3.4848221315852727E-6	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999867810926304	WITHOUT_CLASSIFICATION	1.3218907369541807E-5	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999770326891555	WITHOUT_CLASSIFICATION	2.296731084452381E-5	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.999873996779785	WITHOUT_CLASSIFICATION	1.2600322021512976E-4	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9997616300899649	WITHOUT_CLASSIFICATION	2.3836991003514576E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999359255573597	WITHOUT_CLASSIFICATION	6.407444264044212E-5	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999359255573597	WITHOUT_CLASSIFICATION	6.407444264044212E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999965151778685	WITHOUT_CLASSIFICATION	3.4848221315852727E-6	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9996746858662688	WITHOUT_CLASSIFICATION	3.2531413373124753E-4	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999949367513742	WITHOUT_CLASSIFICATION	5.0632486257603685E-6	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9875569744422369	WITHOUT_CLASSIFICATION	0.012443025557763153	IMPLEMENTATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999814205278945	WITHOUT_CLASSIFICATION	1.857947210541043E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999442431866448	WITHOUT_CLASSIFICATION	5.575681335529195E-5	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999943636603604	WITHOUT_CLASSIFICATION	5.636339639523532E-6	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999382613728061	WITHOUT_CLASSIFICATION	6.173862719400205E-5	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9997535325784845	WITHOUT_CLASSIFICATION	2.464674215155013E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272347001801	WITHOUT_CLASSIFICATION	7.276529981993202E-5	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999908555545998	WITHOUT_CLASSIFICATION	9.144445400179784E-6	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999950670216065	WITHOUT_CLASSIFICATION	4.932978393538166E-6	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999903095492277	WITHOUT_CLASSIFICATION	9.690450772350296E-6	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999517706910545	WITHOUT_CLASSIFICATION	4.822930894550794E-5	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9998592318969305	WITHOUT_CLASSIFICATION	1.4076810306942438E-4	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921892384374	WITHOUT_CLASSIFICATION	7.810761562672858E-6	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999508569077644	WITHOUT_CLASSIFICATION	4.9143092235611286E-5	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9954694734990243	WITHOUT_CLASSIFICATION	0.004530526500975813	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9995054490526232	WITHOUT_CLASSIFICATION	4.945509473768483E-4	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999127766588395	WITHOUT_CLASSIFICATION	8.722334116042118E-5	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999970513544886	WITHOUT_CLASSIFICATION	2.9486455113621536E-6	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9997327010387549	WITHOUT_CLASSIFICATION	2.672989612450576E-4	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999883362327173	WITHOUT_CLASSIFICATION	1.166376728276173E-5	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964227306489096	WITHOUT_CLASSIFICATION	0.0035772693510903956	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982523567756622	WITHOUT_CLASSIFICATION	0.001747643224337828	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998119317143179	WITHOUT_CLASSIFICATION	0.001880682856820959	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999945175575943	WITHOUT_CLASSIFICATION	5.4824424056979515E-5	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975371819424766	WITHOUT_CLASSIFICATION	0.002462818057523392	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976856109247577	WITHOUT_CLASSIFICATION	0.0023143890752422543	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975371819424766	WITHOUT_CLASSIFICATION	0.002462818057523392	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975371819424766	WITHOUT_CLASSIFICATION	0.002462818057523392	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.9997255797107536	WITHOUT_CLASSIFICATION	2.744202892463799E-4	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999135372479152	WITHOUT_CLASSIFICATION	8.646275208478678E-5	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982154180498006	WITHOUT_CLASSIFICATION	0.0017845819501994347	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983826715897013	WITHOUT_CLASSIFICATION	0.0016173284102986869	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9955939858783149	WITHOUT_CLASSIFICATION	0.004406014121685158	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9956455860785717	WITHOUT_CLASSIFICATION	0.004354413921428302	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975553727203907	WITHOUT_CLASSIFICATION	0.002444627279609231	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975371819424766	WITHOUT_CLASSIFICATION	0.002462818057523392	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972325776340585	WITHOUT_CLASSIFICATION	0.0027674223659415417	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975371819424766	WITHOUT_CLASSIFICATION	0.002462818057523392	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999899335802535	WITHOUT_CLASSIFICATION	1.0066419746548325E-5	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999923825586844	WITHOUT_CLASSIFICATION	7.61744131560372E-5	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.7738466119856281	IMPLEMENTATION	0.22615338801437182	WITHOUT_CLASSIFICATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999939611865789	WITHOUT_CLASSIFICATION	6.038813421088768E-6	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999965966532397	WITHOUT_CLASSIFICATION	3.4033467603972897E-6	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999462770301326	WITHOUT_CLASSIFICATION	5.372296986742768E-5	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.9998952977090393	WITHOUT_CLASSIFICATION	1.047022909606939E-4	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999714745661792	WITHOUT_CLASSIFICATION	2.8525433820823874E-5	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999849822996936	WITHOUT_CLASSIFICATION	1.5017700306415172E-5	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.99993634563414	WITHOUT_CLASSIFICATION	6.365436585987175E-5	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999380967077264	WITHOUT_CLASSIFICATION	6.190329227369897E-5	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999485734886278	WITHOUT_CLASSIFICATION	5.1426511372230394E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272347001801	WITHOUT_CLASSIFICATION	7.276529981993202E-5	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999628011488086	WITHOUT_CLASSIFICATION	3.7198851191391336E-5	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999444940344698	WITHOUT_CLASSIFICATION	5.5505965530118204E-5	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999606774836556	WITHOUT_CLASSIFICATION	3.9322516344326895E-5	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9997585490706639	WITHOUT_CLASSIFICATION	2.4145092933621645E-4	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999192017043977	WITHOUT_CLASSIFICATION	8.079829560233735E-5	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9996819103548243	WITHOUT_CLASSIFICATION	3.180896451756987E-4	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999232395811098	WITHOUT_CLASSIFICATION	7.676041889025619E-5	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999514194968642	WITHOUT_CLASSIFICATION	4.858050313574378E-5	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999315849158322	WITHOUT_CLASSIFICATION	6.841508416783632E-5	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999245331804231	WITHOUT_CLASSIFICATION	7.546681957691256E-5	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9990786267424024	WITHOUT_CLASSIFICATION	9.213732575976346E-4	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9998887411867474	WITHOUT_CLASSIFICATION	1.1125881325268604E-4	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999769443458753	WITHOUT_CLASSIFICATION	2.3055654124805183E-5	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998175967899585	WITHOUT_CLASSIFICATION	1.8240321004156076E-4	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998001681652111	WITHOUT_CLASSIFICATION	1.9983183478894284E-4	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999537286053993	WITHOUT_CLASSIFICATION	4.627139460058082E-5	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.999989972767959	WITHOUT_CLASSIFICATION	1.0027232041003171E-5	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999957332066445	WITHOUT_CLASSIFICATION	4.26679335549227E-5	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998748135168448	WITHOUT_CLASSIFICATION	1.251864831552496E-4	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999821535366271	WITHOUT_CLASSIFICATION	1.7846463372900098E-4	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9982508529244515	WITHOUT_CLASSIFICATION	0.0017491470755485695	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999970463783819	WITHOUT_CLASSIFICATION	2.9536216180811947E-6	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.99988442724343	WITHOUT_CLASSIFICATION	1.1557275657001669E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272347001801	WITHOUT_CLASSIFICATION	7.276529981993202E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999462770301326	WITHOUT_CLASSIFICATION	5.372296986742768E-5	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999764270552575	WITHOUT_CLASSIFICATION	2.3572944742492985E-4	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999944114332452	WITHOUT_CLASSIFICATION	5.588566754896493E-6	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9998251001692953	WITHOUT_CLASSIFICATION	1.7489983070482077E-4	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999939611865789	WITHOUT_CLASSIFICATION	6.038813421088768E-6	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.99992226187892	WITHOUT_CLASSIFICATION	7.77381210799913E-5	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.9999671129506915	WITHOUT_CLASSIFICATION	3.288704930853732E-5	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9990786267424024	WITHOUT_CLASSIFICATION	9.213732575976346E-4	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999976623485537	WITHOUT_CLASSIFICATION	2.337651446328847E-6	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9997937736208985	WITHOUT_CLASSIFICATION	2.062263791014892E-4	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999664706529358	WITHOUT_CLASSIFICATION	3.352934706421334E-5	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999819207094181	WITHOUT_CLASSIFICATION	1.8079290581885532E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999336243799845	WITHOUT_CLASSIFICATION	6.637562001555856E-5	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999474799897475	WITHOUT_CLASSIFICATION	5.252001025238693E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272347001801	WITHOUT_CLASSIFICATION	7.276529981993202E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272347001801	WITHOUT_CLASSIFICATION	7.276529981993202E-5	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9990910913739091	WITHOUT_CLASSIFICATION	9.089086260909272E-4	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999966841905578	WITHOUT_CLASSIFICATION	3.315809442123203E-6	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999995460691317	WITHOUT_CLASSIFICATION	4.539308683258969E-7	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999966263398364	WITHOUT_CLASSIFICATION	3.3736601634481617E-6	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999896747916682	WITHOUT_CLASSIFICATION	1.0325208331761068E-5	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999939141966275	WITHOUT_CLASSIFICATION	6.08580337248607E-6	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999745904730044	WITHOUT_CLASSIFICATION	2.5409526995504645E-5	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.9999590510778097	WITHOUT_CLASSIFICATION	4.0948922190327785E-5	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999264642262612	WITHOUT_CLASSIFICATION	7.353577373883169E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272347001801	WITHOUT_CLASSIFICATION	7.276529981993202E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999978289660482	WITHOUT_CLASSIFICATION	2.1710339518395906E-6	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999969206955846	WITHOUT_CLASSIFICATION	3.079304415411355E-5	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999933103528501	WITHOUT_CLASSIFICATION	6.68964714979534E-6	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999886559575342	WITHOUT_CLASSIFICATION	1.1344042465848267E-5	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998041484813753	WITHOUT_CLASSIFICATION	1.9585151862465676E-4	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999749784806092	WITHOUT_CLASSIFICATION	2.5021519390675647E-5	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9998596477487304	WITHOUT_CLASSIFICATION	1.4035225126967675E-4	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.9999919705694417	WITHOUT_CLASSIFICATION	8.029430558372798E-6	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999132072585256	WITHOUT_CLASSIFICATION	8.679274147436966E-5	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999687103030352	WITHOUT_CLASSIFICATION	3.128969696476207E-5	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999681759072105	WITHOUT_CLASSIFICATION	3.1824092789329184E-5	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999939611865789	WITHOUT_CLASSIFICATION	6.038813421088768E-6	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999462770301326	WITHOUT_CLASSIFICATION	5.372296986742768E-5	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9997571066349169	WITHOUT_CLASSIFICATION	2.4289336508315852E-4	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9949073067853424	WITHOUT_CLASSIFICATION	0.005092693214657582	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9911358058845411	WITHOUT_CLASSIFICATION	0.008864194115458994	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999263598648873	WITHOUT_CLASSIFICATION	7.364013511274453E-5	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999265146162918	WITHOUT_CLASSIFICATION	7.348538370820759E-5	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999266187583711	WITHOUT_CLASSIFICATION	7.338124162889504E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999462770301326	WITHOUT_CLASSIFICATION	5.372296986742768E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999359396116719	WITHOUT_CLASSIFICATION	6.406038832808668E-5	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999969206955846	WITHOUT_CLASSIFICATION	3.079304415411355E-5	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9997843439132554	WITHOUT_CLASSIFICATION	2.1565608674442078E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999978289660482	WITHOUT_CLASSIFICATION	2.1710339518395906E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272347001801	WITHOUT_CLASSIFICATION	7.276529981993202E-5	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999895264163278	WITHOUT_CLASSIFICATION	1.0473583672294737E-5	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9992037550925235	WITHOUT_CLASSIFICATION	7.962449074765825E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272347001801	WITHOUT_CLASSIFICATION	7.276529981993202E-5	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999982122330318	WITHOUT_CLASSIFICATION	1.7877669682665683E-6	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999664706529358	WITHOUT_CLASSIFICATION	3.352934706421334E-5	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999819207094181	WITHOUT_CLASSIFICATION	1.8079290581885532E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999336243799845	WITHOUT_CLASSIFICATION	6.637562001555856E-5	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999698405090841	WITHOUT_CLASSIFICATION	3.0159490915812992E-5	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9998834941472448	WITHOUT_CLASSIFICATION	1.1650585275513225E-4	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999592355336917	WITHOUT_CLASSIFICATION	4.07644663083642E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999978289660482	WITHOUT_CLASSIFICATION	2.1710339518395906E-6	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999895264163278	WITHOUT_CLASSIFICATION	1.0473583672294737E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272347001801	WITHOUT_CLASSIFICATION	7.276529981993202E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999462770301326	WITHOUT_CLASSIFICATION	5.372296986742768E-5	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999474799897475	WITHOUT_CLASSIFICATION	5.252001025238693E-5	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9990910913739091	WITHOUT_CLASSIFICATION	9.089086260909272E-4	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999966841905578	WITHOUT_CLASSIFICATION	3.315809442123203E-6	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999704782258566	WITHOUT_CLASSIFICATION	2.95217741434614E-5	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997760397201569	WITHOUT_CLASSIFICATION	2.2396027984312696E-4	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999193020912431	WITHOUT_CLASSIFICATION	8.069790875687047E-5	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999924694250228	WITHOUT_CLASSIFICATION	7.530574977083116E-6	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.998280255012915	WITHOUT_CLASSIFICATION	0.00171974498708497	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975371819424766	WITHOUT_CLASSIFICATION	0.002462818057523392	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999995054740337	WITHOUT_CLASSIFICATION	4.945259662028009E-7	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999176524817838	WITHOUT_CLASSIFICATION	8.234751821629125E-5	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.999971137482635	WITHOUT_CLASSIFICATION	2.8862517364949346E-5	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9998928818333113	WITHOUT_CLASSIFICATION	1.0711816668867656E-4	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975371819424766	WITHOUT_CLASSIFICATION	0.002462818057523392	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976856109247577	WITHOUT_CLASSIFICATION	0.0023143890752422543	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983826715897013	WITHOUT_CLASSIFICATION	0.0016173284102986869	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999939907705018	WITHOUT_CLASSIFICATION	6.009229498193349E-5	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999973471469534	WITHOUT_CLASSIFICATION	2.6528530466008624E-5	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978322536869396	WITHOUT_CLASSIFICATION	0.0021677463130604264	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975371819424766	WITHOUT_CLASSIFICATION	0.002462818057523392	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9968520168242554	WITHOUT_CLASSIFICATION	0.0031479831757446715	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272347001801	WITHOUT_CLASSIFICATION	7.276529981993202E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272347001801	WITHOUT_CLASSIFICATION	7.276529981993202E-5	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9955939858783149	WITHOUT_CLASSIFICATION	0.004406014121685158	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975371819424766	WITHOUT_CLASSIFICATION	0.002462818057523392	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998748135168448	WITHOUT_CLASSIFICATION	1.251864831552496E-4	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999930032922192	WITHOUT_CLASSIFICATION	6.996707780731233E-6	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999927765067816	WITHOUT_CLASSIFICATION	7.223493218446298E-6	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999822830577096	WITHOUT_CLASSIFICATION	1.7716942290435595E-5	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999858526520635	WITHOUT_CLASSIFICATION	1.4147347936446336E-5	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.999997811275092	WITHOUT_CLASSIFICATION	2.1887249079672516E-6	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9998944918160001	WITHOUT_CLASSIFICATION	1.0550818400000335E-4	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999935393598938	WITHOUT_CLASSIFICATION	6.460640106177771E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999920054389487	WITHOUT_CLASSIFICATION	7.994561051302695E-5	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9997535325784845	WITHOUT_CLASSIFICATION	2.464674215155013E-4	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9996142387567581	WITHOUT_CLASSIFICATION	3.8576124324189015E-4	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999189817201708	WITHOUT_CLASSIFICATION	8.101827982916687E-5	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999746359574881	WITHOUT_CLASSIFICATION	2.5364042511901554E-5	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999723924742713	WITHOUT_CLASSIFICATION	2.7607525728723056E-5	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999873546615666	WITHOUT_CLASSIFICATION	1.2645338433496852E-5	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999477005232785	WITHOUT_CLASSIFICATION	5.229947672136475E-5	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999193250436559	WITHOUT_CLASSIFICATION	8.067495634404681E-5	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999039488625034	WITHOUT_CLASSIFICATION	9.605113749652239E-5	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999913994577364	WITHOUT_CLASSIFICATION	8.600542263624295E-6	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9996729809879442	WITHOUT_CLASSIFICATION	3.2701901205574253E-4	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9997976734004104	WITHOUT_CLASSIFICATION	2.0232659958971822E-4	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999850380966651	WITHOUT_CLASSIFICATION	1.4961903334907184E-5	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999788759999303	WITHOUT_CLASSIFICATION	2.1124000069759116E-5	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998950237595907	WITHOUT_CLASSIFICATION	1.0497624040927505E-4	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999726437010157	WITHOUT_CLASSIFICATION	2.73562989842676E-5	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9997865981947246	WITHOUT_CLASSIFICATION	2.1340180527531862E-4	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999521501612346	WITHOUT_CLASSIFICATION	4.7849838765477215E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998950237595907	WITHOUT_CLASSIFICATION	1.0497624040927505E-4	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999981364176571	WITHOUT_CLASSIFICATION	1.8635823429468093E-6	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999943881912416	WITHOUT_CLASSIFICATION	5.611808758342716E-6	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999947652411209	WITHOUT_CLASSIFICATION	5.234758879117259E-5	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999641739108818	WITHOUT_CLASSIFICATION	3.582608911829012E-5	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999382986894192	WITHOUT_CLASSIFICATION	6.170131058087112E-5	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999489080496444	WITHOUT_CLASSIFICATION	5.109195035553085E-5	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.9999720222475288	WITHOUT_CLASSIFICATION	2.7977752471246113E-5	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999573408371628	WITHOUT_CLASSIFICATION	4.2659162837208696E-5	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999573408371628	WITHOUT_CLASSIFICATION	4.2659162837208696E-5	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999788904957702	WITHOUT_CLASSIFICATION	2.1109504229943214E-5	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999954337276424	WITHOUT_CLASSIFICATION	4.566272357604924E-5	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998485850859314	WITHOUT_CLASSIFICATION	1.5141491406852202E-4	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999451725164875	WITHOUT_CLASSIFICATION	5.482748351260295E-5	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999719627561	WITHOUT_CLASSIFICATION	2.8037243965184606E-8	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9998804742120098	WITHOUT_CLASSIFICATION	1.1952578799027612E-4	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999997312952594	WITHOUT_CLASSIFICATION	2.6870474058610567E-7	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999974585106038	WITHOUT_CLASSIFICATION	2.541489396050361E-6	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999858598864325	WITHOUT_CLASSIFICATION	1.414011356738039E-5	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999934673778664	WITHOUT_CLASSIFICATION	6.532622133554841E-6	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999628194022947	WITHOUT_CLASSIFICATION	3.7180597705410976E-5	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999893941835694	WITHOUT_CLASSIFICATION	1.060581643059773E-5	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9997499601368411	WITHOUT_CLASSIFICATION	2.5003986315885404E-4	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9406229652681845	WITHOUT_CLASSIFICATION	0.0593770347318155	IMPLEMENTATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998216364409496	WITHOUT_CLASSIFICATION	1.783635590504607E-4	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.999865050760159	WITHOUT_CLASSIFICATION	1.3494923984102043E-4	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999532486536276	WITHOUT_CLASSIFICATION	4.675134637246802E-5	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9993731804557958	WITHOUT_CLASSIFICATION	6.268195442041731E-4	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9993801285901044	WITHOUT_CLASSIFICATION	6.198714098956016E-4	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999650522119123	WITHOUT_CLASSIFICATION	3.4947788087770745E-5	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999944826169722	WITHOUT_CLASSIFICATION	5.517383027819027E-6	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999744892914152	WITHOUT_CLASSIFICATION	2.551070858481365E-5	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9944314181240825	WITHOUT_CLASSIFICATION	0.0055685818759174934	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999980037161674	WITHOUT_CLASSIFICATION	1.996283832680824E-6	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999892599372339	WITHOUT_CLASSIFICATION	1.0740062766018258E-5	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9996791734388	WITHOUT_CLASSIFICATION	3.2082656120003113E-4	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9935706961840158	WITHOUT_CLASSIFICATION	0.00642930381598423	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9991096442924203	WITHOUT_CLASSIFICATION	8.903557075795944E-4	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9955029207530085	WITHOUT_CLASSIFICATION	0.004497079246991501	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9998456656610246	WITHOUT_CLASSIFICATION	1.543343389752654E-4	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999815293235537	WITHOUT_CLASSIFICATION	1.847067644632052E-5	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.9999845807534687	WITHOUT_CLASSIFICATION	1.541924653125393E-5	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999923095778745	WITHOUT_CLASSIFICATION	7.69042212537822E-6	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.9999911267230043	WITHOUT_CLASSIFICATION	8.87327699566962E-6	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999907039533441	WITHOUT_CLASSIFICATION	9.296046655893105E-6	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.9999551282540483	WITHOUT_CLASSIFICATION	4.48717459517693E-5	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.999953731246095	WITHOUT_CLASSIFICATION	4.626875390499018E-5	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9959177817531972	WITHOUT_CLASSIFICATION	0.004082218246802801	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999156491838121	WITHOUT_CLASSIFICATION	8.435081618783504E-5	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999950518835173	WITHOUT_CLASSIFICATION	4.948116482678448E-6	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999447215175775	WITHOUT_CLASSIFICATION	5.52784824224226E-5	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999896747916682	WITHOUT_CLASSIFICATION	1.0325208331761068E-5	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999896747916682	WITHOUT_CLASSIFICATION	1.0325208331761068E-5	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999961135392131	WITHOUT_CLASSIFICATION	3.8864607869047984E-5	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999990432074048	WITHOUT_CLASSIFICATION	9.567925951245117E-7	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999850372490374	WITHOUT_CLASSIFICATION	1.4962750962591262E-5	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999993156348342	WITHOUT_CLASSIFICATION	6.843651658511722E-7	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999878605196434	WITHOUT_CLASSIFICATION	1.2139480356750765E-5	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.9999321836935129	WITHOUT_CLASSIFICATION	6.781630648718733E-5	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999475900682461	WITHOUT_CLASSIFICATION	5.240993175397335E-5	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999532063310782	WITHOUT_CLASSIFICATION	4.679366892173234E-5	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.999999511399745	WITHOUT_CLASSIFICATION	4.886002551204885E-7	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.9995127595063749	WITHOUT_CLASSIFICATION	4.8724049362504574E-4	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999713809493331	WITHOUT_CLASSIFICATION	2.861905066695221E-5	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999948120338603	WITHOUT_CLASSIFICATION	5.1879661395993396E-6	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999864872203081	WITHOUT_CLASSIFICATION	1.351277969191035E-4	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999232365222438	WITHOUT_CLASSIFICATION	7.676347775617996E-5	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.999948846330113	WITHOUT_CLASSIFICATION	5.115366988690049E-5	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999785602296314	WITHOUT_CLASSIFICATION	2.1439770368619485E-5	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9999503167898371	WITHOUT_CLASSIFICATION	4.9683210162760145E-5	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9996136516210027	WITHOUT_CLASSIFICATION	3.863483789973473E-4	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9996607062311752	WITHOUT_CLASSIFICATION	3.392937688248097E-4	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999694280018073	WITHOUT_CLASSIFICATION	3.0571998192650284E-5	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.9998673106064314	WITHOUT_CLASSIFICATION	1.3268939356861315E-4	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999989769064662	WITHOUT_CLASSIFICATION	1.0230935337918474E-6	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999694280018073	WITHOUT_CLASSIFICATION	3.0571998192650284E-5	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999943599923973	WITHOUT_CLASSIFICATION	5.640007602697594E-6	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.9999944559456244	WITHOUT_CLASSIFICATION	5.5440543755871795E-6	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9997842754155993	WITHOUT_CLASSIFICATION	2.1572458440060867E-4	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998332196192217	WITHOUT_CLASSIFICATION	1.6678038077839143E-4	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.9998516509531594	WITHOUT_CLASSIFICATION	1.483490468405774E-4	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999970342136156	WITHOUT_CLASSIFICATION	2.9657863843607753E-6	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999953381174361	WITHOUT_CLASSIFICATION	4.661882563904985E-5	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998629423187436	WITHOUT_CLASSIFICATION	1.3705768125634861E-4	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999234416175395	WITHOUT_CLASSIFICATION	7.655838246048278E-5	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999997242642785	WITHOUT_CLASSIFICATION	2.7573572146562634E-7	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999916857462697	WITHOUT_CLASSIFICATION	8.31425373031415E-6	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9997189453649814	WITHOUT_CLASSIFICATION	2.8105463501853047E-4	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999820600837496	WITHOUT_CLASSIFICATION	1.7939916250414125E-5	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9986008769675321	WITHOUT_CLASSIFICATION	0.0013991230324679612	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.999935884802038	WITHOUT_CLASSIFICATION	6.411519796200843E-5	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999458279257581	WITHOUT_CLASSIFICATION	5.417207424186308E-5	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999458279257581	WITHOUT_CLASSIFICATION	5.417207424186308E-5	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.998051820815955	WITHOUT_CLASSIFICATION	0.0019481791840449294	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9999596244417728	WITHOUT_CLASSIFICATION	4.037555822728199E-5	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.9999658956524136	WITHOUT_CLASSIFICATION	3.410434758643755E-5	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999183619493646	WITHOUT_CLASSIFICATION	8.16380506354224E-5	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9987013645470443	WITHOUT_CLASSIFICATION	0.00129863545295578	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9999242219964012	WITHOUT_CLASSIFICATION	7.577800359882487E-5	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999748143092921	WITHOUT_CLASSIFICATION	2.518569070787699E-5	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.999979041686765	WITHOUT_CLASSIFICATION	2.095831323504297E-5	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9938848086590536	WITHOUT_CLASSIFICATION	0.006115191340946463	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.8347426687425186	WITHOUT_CLASSIFICATION	0.16525733125748146	IMPLEMENTATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9998740964367081	WITHOUT_CLASSIFICATION	1.2590356329180992E-4	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9979698445295979	WITHOUT_CLASSIFICATION	0.002030155470402019	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999526094351612	WITHOUT_CLASSIFICATION	4.739056483885063E-5	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999599394037916	WITHOUT_CLASSIFICATION	4.006059620845957E-5	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999477005232785	WITHOUT_CLASSIFICATION	5.229947672136475E-5	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9998494154820169	WITHOUT_CLASSIFICATION	1.5058451798320276E-4	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999952659935136	WITHOUT_CLASSIFICATION	4.734006486425427E-6	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9991010491494048	WITHOUT_CLASSIFICATION	8.989508505952528E-4	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999898404510897	WITHOUT_CLASSIFICATION	1.0159548910252687E-5	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999983230793963	WITHOUT_CLASSIFICATION	1.676920603765385E-6	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.9999414093713042	WITHOUT_CLASSIFICATION	5.859062869592796E-5	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9701744158594469	WITHOUT_CLASSIFICATION	0.029825584140553103	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999946721091353	WITHOUT_CLASSIFICATION	5.327890864715385E-6	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999634660419715	WITHOUT_CLASSIFICATION	3.6533958028589115E-5	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999379338347303	WITHOUT_CLASSIFICATION	6.206616526972495E-5	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999981446895535	WITHOUT_CLASSIFICATION	1.8553104465837211E-6	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999319883351189	WITHOUT_CLASSIFICATION	6.801166488116854E-5	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9990794144236095	WITHOUT_CLASSIFICATION	9.205855763905804E-4	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9999631437503107	WITHOUT_CLASSIFICATION	3.685624968921875E-5	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.999979078417908	WITHOUT_CLASSIFICATION	2.0921582091937607E-5	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999251360391026	WITHOUT_CLASSIFICATION	7.486396089744827E-5	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999902558371897	WITHOUT_CLASSIFICATION	9.744162810389797E-6	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999207107723685	WITHOUT_CLASSIFICATION	7.928922763145866E-5	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999998473065879	WITHOUT_CLASSIFICATION	1.5269341211055065E-7	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999795170057222	WITHOUT_CLASSIFICATION	2.0482994277888617E-5	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999475373976828	WITHOUT_CLASSIFICATION	5.246260231721451E-5	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999471429387696	WITHOUT_CLASSIFICATION	5.285706123044391E-5	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9997128399418344	WITHOUT_CLASSIFICATION	2.871600581656275E-4	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.9996216406499654	WITHOUT_CLASSIFICATION	3.783593500346319E-4	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.9998739830363416	WITHOUT_CLASSIFICATION	1.2601696365841233E-4	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9997503023085866	WITHOUT_CLASSIFICATION	2.4969769141337393E-4	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.999997138067847	WITHOUT_CLASSIFICATION	2.861932152992559E-6	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9978862874298923	WITHOUT_CLASSIFICATION	0.0021137125701076844	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9958963526131841	WITHOUT_CLASSIFICATION	0.00410364738681587	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999223799182279	WITHOUT_CLASSIFICATION	7.762008177220216E-5	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999844145485371	WITHOUT_CLASSIFICATION	1.5585451462895775E-4	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999643509973174	WITHOUT_CLASSIFICATION	3.564900268266338E-5	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999936920468917	WITHOUT_CLASSIFICATION	6.307953108325311E-6	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999699668735822	WITHOUT_CLASSIFICATION	3.0033126417816616E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999920054389487	WITHOUT_CLASSIFICATION	7.994561051302695E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999920054389487	WITHOUT_CLASSIFICATION	7.994561051302695E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999996987807227	WITHOUT_CLASSIFICATION	3.0121927729574862E-6	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9958103479341506	WITHOUT_CLASSIFICATION	0.004189652065849469	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999358291989742	WITHOUT_CLASSIFICATION	6.417080102576407E-5	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999057923870301	WITHOUT_CLASSIFICATION	9.420761296982029E-5	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999358291989742	WITHOUT_CLASSIFICATION	6.417080102576407E-5	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999647088764761	WITHOUT_CLASSIFICATION	3.5291123523878576E-5	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999939061491359	WITHOUT_CLASSIFICATION	6.0938508640708135E-6	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999953337274555	WITHOUT_CLASSIFICATION	4.666272544458748E-6	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999960613301084	WITHOUT_CLASSIFICATION	3.9386698915399E-6	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999877033796496	WITHOUT_CLASSIFICATION	1.2296620350472708E-5	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999666843999829	WITHOUT_CLASSIFICATION	3.331560001718795E-5	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999430581636884	WITHOUT_CLASSIFICATION	5.6941836311498226E-5	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.9999809467374865	WITHOUT_CLASSIFICATION	1.9053262513419546E-5	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.999844218325857	WITHOUT_CLASSIFICATION	1.5578167414298584E-4	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.8551739302172814	WITHOUT_CLASSIFICATION	0.14482606978271867	IMPLEMENTATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.9995253003502316	WITHOUT_CLASSIFICATION	4.746996497684017E-4	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9988014515030476	WITHOUT_CLASSIFICATION	0.0011985484969524614	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999801307114987	WITHOUT_CLASSIFICATION	1.9869288501242077E-5	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999977393289485	WITHOUT_CLASSIFICATION	2.2606710514467166E-6	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9749142434763	WITHOUT_CLASSIFICATION	0.02508575652370008	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999445406594424	WITHOUT_CLASSIFICATION	5.545934055760194E-4	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999895680653065	WITHOUT_CLASSIFICATION	1.0431934693623799E-5	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999895680653065	WITHOUT_CLASSIFICATION	1.0431934693623799E-5	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.999957857056626	WITHOUT_CLASSIFICATION	4.214294337398328E-5	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9998411860738546	WITHOUT_CLASSIFICATION	1.588139261454736E-4	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999997530461445	WITHOUT_CLASSIFICATION	2.469538555121985E-7	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999914619492146	WITHOUT_CLASSIFICATION	8.538050785428971E-6	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999949935442037	WITHOUT_CLASSIFICATION	5.006455796244484E-6	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999990557023022	WITHOUT_CLASSIFICATION	9.44297697885047E-7	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9998952241108332	WITHOUT_CLASSIFICATION	1.047758891668369E-4	IMPLEMENTATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999945818872218	WITHOUT_CLASSIFICATION	5.4181127782690476E-6	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.9999435601692326	WITHOUT_CLASSIFICATION	5.6439830767414706E-5	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999953461538307	WITHOUT_CLASSIFICATION	4.6538461693151E-6	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999989015853145	WITHOUT_CLASSIFICATION	1.0984146855499596E-6	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999459765594202	WITHOUT_CLASSIFICATION	5.402344057990149E-5	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999090375919647	WITHOUT_CLASSIFICATION	9.096240803526034E-5	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999986766630691	WITHOUT_CLASSIFICATION	1.3233369309649306E-6	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9995294256353502	WITHOUT_CLASSIFICATION	4.70574364649804E-4	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9997061736833157	WITHOUT_CLASSIFICATION	2.938263166843214E-4	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.999998555393546	WITHOUT_CLASSIFICATION	1.4446064540165072E-6	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999594258284078	WITHOUT_CLASSIFICATION	4.0574171592208143E-4	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.9996840146598049	WITHOUT_CLASSIFICATION	3.1598534019506793E-4	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999988707098346	WITHOUT_CLASSIFICATION	1.1292901654153332E-6	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999948039337481	WITHOUT_CLASSIFICATION	5.1960662518964766E-6	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9985899178583924	WITHOUT_CLASSIFICATION	0.0014100821416077435	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9985391554304724	WITHOUT_CLASSIFICATION	0.0014608445695275976	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9866537178072696	WITHOUT_CLASSIFICATION	0.013346282192730388	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.999994403375663	WITHOUT_CLASSIFICATION	5.596624336925706E-6	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.9999995412000632	WITHOUT_CLASSIFICATION	4.58799936835106E-7	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999698883303295	WITHOUT_CLASSIFICATION	3.011166967037156E-5	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9988596435472921	WITHOUT_CLASSIFICATION	0.0011403564527080014	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999837462848137	WITHOUT_CLASSIFICATION	1.6253715186369618E-5	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999996781513605	WITHOUT_CLASSIFICATION	3.218486395698669E-7	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999845224823672	WITHOUT_CLASSIFICATION	1.5477517632759936E-5	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999986743802077	WITHOUT_CLASSIFICATION	1.3256197921597695E-6	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999088370850774	WITHOUT_CLASSIFICATION	9.116291492261424E-5	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9908001537662592	WITHOUT_CLASSIFICATION	0.009199846233740788	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999628902886053	WITHOUT_CLASSIFICATION	3.710971139462998E-5	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999960309708188	WITHOUT_CLASSIFICATION	3.9690291812685775E-6	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999848963793281	WITHOUT_CLASSIFICATION	1.5103620671905723E-5	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999971255819537	WITHOUT_CLASSIFICATION	2.8744180462101836E-6	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999993708444216	WITHOUT_CLASSIFICATION	6.291555783635103E-7	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9991835582629192	WITHOUT_CLASSIFICATION	8.16441737080839E-4	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999817336160894	WITHOUT_CLASSIFICATION	1.8266383910464035E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999250746302618	WITHOUT_CLASSIFICATION	7.492536973827375E-5	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9997827425907815	WITHOUT_CLASSIFICATION	2.1725740921854373E-4	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.8883572077377228	WITHOUT_CLASSIFICATION	0.11164279226227726	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9980417982575267	WITHOUT_CLASSIFICATION	0.001958201742473175	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999821303851351	WITHOUT_CLASSIFICATION	1.786961486492538E-5	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999435929994569	WITHOUT_CLASSIFICATION	5.640700054318088E-5	IMPLEMENTATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999277727346	WITHOUT_CLASSIFICATION	7.222726543150438E-8	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998964133496666	WITHOUT_CLASSIFICATION	1.0358665033338565E-4	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999942215246903	WITHOUT_CLASSIFICATION	5.778475309737098E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999250746302618	WITHOUT_CLASSIFICATION	7.492536973827375E-5	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999953201930907	WITHOUT_CLASSIFICATION	4.679806909276763E-6	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999922293031716	WITHOUT_CLASSIFICATION	7.770696828497609E-6	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9972693465269847	WITHOUT_CLASSIFICATION	0.0027306534730152606	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.9999863502516398	WITHOUT_CLASSIFICATION	1.3649748360105695E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999359396116719	WITHOUT_CLASSIFICATION	6.406038832808668E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999359396116719	WITHOUT_CLASSIFICATION	6.406038832808668E-5	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999995842739585	WITHOUT_CLASSIFICATION	4.157260414765708E-7	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999993020744532	WITHOUT_CLASSIFICATION	6.979255467086424E-7	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999996026452839	WITHOUT_CLASSIFICATION	3.973547160749325E-7	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999613643575527	WITHOUT_CLASSIFICATION	3.863564244735211E-5	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9996422703646287	WITHOUT_CLASSIFICATION	3.577296353712815E-4	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9996225453401465	WITHOUT_CLASSIFICATION	3.7745465985348256E-4	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999536996787679	WITHOUT_CLASSIFICATION	4.6300321232005894E-5	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999571436444586	WITHOUT_CLASSIFICATION	4.2856355541441175E-5	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999959156537902	WITHOUT_CLASSIFICATION	4.084346209830147E-6	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999098963485016	WITHOUT_CLASSIFICATION	9.01036514984112E-5	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999535077962487	WITHOUT_CLASSIFICATION	4.6492203751210444E-5	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999987751275272	WITHOUT_CLASSIFICATION	1.2248724727667418E-6	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999429022880812	WITHOUT_CLASSIFICATION	5.709771191878126E-5	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999362968635875	WITHOUT_CLASSIFICATION	6.370313641251069E-5	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999070356661514	WITHOUT_CLASSIFICATION	9.296433384865637E-5	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9995166857571552	WITHOUT_CLASSIFICATION	4.833142428446938E-4	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9945341678091719	WITHOUT_CLASSIFICATION	0.005465832190828019	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999979358138487	WITHOUT_CLASSIFICATION	2.0641861513016406E-6	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999574240215808	WITHOUT_CLASSIFICATION	4.257597841924591E-5	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999124732725728	WITHOUT_CLASSIFICATION	8.75267274270865E-5	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999263598648873	WITHOUT_CLASSIFICATION	7.364013511274453E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998518303199867	WITHOUT_CLASSIFICATION	1.4816968001333942E-4	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999973624338545	WITHOUT_CLASSIFICATION	2.637566145618172E-6	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9813880847978387	WITHOUT_CLASSIFICATION	0.01861191520216136	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9978650545876718	WITHOUT_CLASSIFICATION	0.0021349454123281786	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999651761857835	WITHOUT_CLASSIFICATION	3.482381421648313E-5	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9998957771149605	WITHOUT_CLASSIFICATION	1.0422288503947645E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999282515809704	WITHOUT_CLASSIFICATION	7.174841902957844E-5	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999605558456	WITHOUT_CLASSIFICATION	3.944415428579613E-8	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999818010843593	WITHOUT_CLASSIFICATION	1.8198915640653536E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999991173137237	WITHOUT_CLASSIFICATION	8.826862762911618E-7	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999994190077001	WITHOUT_CLASSIFICATION	5.809923000612842E-7	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999119296270395	WITHOUT_CLASSIFICATION	8.807037296048932E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999991159918303	WITHOUT_CLASSIFICATION	8.8400816958439E-7	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9979422175095223	WITHOUT_CLASSIFICATION	0.0020577824904777576	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999818010843593	WITHOUT_CLASSIFICATION	1.8198915640653536E-5	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999961971501337	WITHOUT_CLASSIFICATION	3.8028498664451485E-6	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999991159918303	WITHOUT_CLASSIFICATION	8.8400816958439E-7	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999957328747662	WITHOUT_CLASSIFICATION	4.2671252338370106E-6	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9995524148957006	WITHOUT_CLASSIFICATION	4.4758510429943835E-4	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999989015853145	WITHOUT_CLASSIFICATION	1.0984146855499596E-6	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999824286038359	WITHOUT_CLASSIFICATION	1.757139616402377E-5	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9998944918160001	WITHOUT_CLASSIFICATION	1.0550818400000335E-4	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999989582185672	WITHOUT_CLASSIFICATION	1.0417814328616346E-6	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999884957422189	WITHOUT_CLASSIFICATION	1.1504257781018843E-5	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999997369450964	WITHOUT_CLASSIFICATION	2.6305490366989254E-7	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.9999965874080105	WITHOUT_CLASSIFICATION	3.412591989604232E-6	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999531315960934	WITHOUT_CLASSIFICATION	4.686840390653749E-5	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999944377022528	WITHOUT_CLASSIFICATION	5.5622977471441435E-6	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999458279257581	WITHOUT_CLASSIFICATION	5.417207424186308E-5	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999957386905046	WITHOUT_CLASSIFICATION	4.261309495399277E-6	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999361453642397	WITHOUT_CLASSIFICATION	6.385463576032346E-5	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999908494867656	WITHOUT_CLASSIFICATION	9.150513234417285E-6	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9997305834923601	WITHOUT_CLASSIFICATION	2.694165076399123E-4	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9999035154805844	WITHOUT_CLASSIFICATION	9.64845194155776E-5	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9996508359765772	WITHOUT_CLASSIFICATION	3.49164023422837E-4	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999669237646115	WITHOUT_CLASSIFICATION	3.307623538845654E-5	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9998847983941228	WITHOUT_CLASSIFICATION	1.1520160587727047E-4	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999840028223924	WITHOUT_CLASSIFICATION	1.599717760764063E-5	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.999987548690349	WITHOUT_CLASSIFICATION	1.2451309650955555E-5	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999458279257581	WITHOUT_CLASSIFICATION	5.417207424186308E-5	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999260094841487	WITHOUT_CLASSIFICATION	7.39905158512594E-5	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999900914763147	WITHOUT_CLASSIFICATION	9.90852368541175E-6	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999997015601157	WITHOUT_CLASSIFICATION	2.9843988430917704E-6	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999683787023141	WITHOUT_CLASSIFICATION	3.162129768579771E-5	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.9999145719860397	WITHOUT_CLASSIFICATION	8.54280139603099E-5	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.9999580640173046	WITHOUT_CLASSIFICATION	4.19359826954703E-5	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9968630693077368	WITHOUT_CLASSIFICATION	0.003136930692263158	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989914297337837	WITHOUT_CLASSIFICATION	0.0010085702662163284	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9996834987087746	WITHOUT_CLASSIFICATION	3.165012912253548E-4	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9996922949330762	WITHOUT_CLASSIFICATION	3.077050669237755E-4	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999898877312599	WITHOUT_CLASSIFICATION	1.011226874021992E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999671911159778	WITHOUT_CLASSIFICATION	3.2808884022165714E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999671911159778	WITHOUT_CLASSIFICATION	3.2808884022165714E-5	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999960371152175	WITHOUT_CLASSIFICATION	3.962884782511921E-5	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9996238868821542	WITHOUT_CLASSIFICATION	3.7611311784573417E-4	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999633801735306	WITHOUT_CLASSIFICATION	3.661982646940111E-5	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999802226427768	WITHOUT_CLASSIFICATION	1.9777357223207233E-5	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9994031063345394	WITHOUT_CLASSIFICATION	5.968936654605371E-4	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999524388380291	WITHOUT_CLASSIFICATION	4.756116197090723E-5	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999987387505799	WITHOUT_CLASSIFICATION	1.2612494201212826E-6	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999894088677929	WITHOUT_CLASSIFICATION	1.0591132207104182E-5	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999512768045039	WITHOUT_CLASSIFICATION	4.87231954961731E-5	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999968286308939	WITHOUT_CLASSIFICATION	3.171369106153377E-6	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999831610209164	WITHOUT_CLASSIFICATION	1.683897908352323E-5	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999991781628247	WITHOUT_CLASSIFICATION	8.21837175302757E-6	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999969540364296	WITHOUT_CLASSIFICATION	3.0459635703732505E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999671911159778	WITHOUT_CLASSIFICATION	3.2808884022165714E-5	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999465430295994	WITHOUT_CLASSIFICATION	5.345697040054496E-5	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999557979514745	WITHOUT_CLASSIFICATION	4.4202048525451894E-5	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999805671063744	WITHOUT_CLASSIFICATION	1.943289362560031E-5	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.999932932267196	WITHOUT_CLASSIFICATION	6.706773280392754E-5	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999979898823743	WITHOUT_CLASSIFICATION	2.0101176256915146E-6	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998066333330207	WITHOUT_CLASSIFICATION	1.933666669793328E-4	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999578525588064	WITHOUT_CLASSIFICATION	4.2147441193622084E-5	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999786185514609	WITHOUT_CLASSIFICATION	2.1381448539056907E-5	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999943062548017	WITHOUT_CLASSIFICATION	5.693745198240623E-6	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999855509709379	WITHOUT_CLASSIFICATION	1.4449029062073593E-5	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998855495610609	WITHOUT_CLASSIFICATION	1.1445043893918443E-4	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9968630693077368	WITHOUT_CLASSIFICATION	0.003136930692263158	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999671911159778	WITHOUT_CLASSIFICATION	3.2808884022165714E-5	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999856033851484	WITHOUT_CLASSIFICATION	1.4396614851594415E-5	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9983241613081103	WITHOUT_CLASSIFICATION	0.001675838691889669	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.9999596140577208	WITHOUT_CLASSIFICATION	4.038594227923006E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9994853668678033	WITHOUT_CLASSIFICATION	5.146331321967216E-4	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999931244726148	WITHOUT_CLASSIFICATION	6.875527385198001E-6	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999273460179217	WITHOUT_CLASSIFICATION	7.265398207836433E-5	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997958402191313	WITHOUT_CLASSIFICATION	2.0415978086872527E-4	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999997549091607	WITHOUT_CLASSIFICATION	2.450908392959858E-7	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.999994178370956	WITHOUT_CLASSIFICATION	5.821629044017935E-6	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999774520891499	WITHOUT_CLASSIFICATION	2.2547910850073184E-5	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999067916253169	WITHOUT_CLASSIFICATION	9.320837468309637E-4	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999837462848137	WITHOUT_CLASSIFICATION	1.6253715186369618E-5	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999834817522575	WITHOUT_CLASSIFICATION	1.6518247742428755E-5	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999670614503153	WITHOUT_CLASSIFICATION	3.293854968467738E-5	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999647088764761	WITHOUT_CLASSIFICATION	3.5291123523878576E-5	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999943846263348	WITHOUT_CLASSIFICATION	5.615373665268696E-6	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999989074634047	WITHOUT_CLASSIFICATION	1.0925365953599807E-6	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999916096756113	WITHOUT_CLASSIFICATION	8.390324388634143E-6	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.9999672084755112	WITHOUT_CLASSIFICATION	3.279152448875497E-5	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999469047909338	WITHOUT_CLASSIFICATION	5.309520906613395E-5	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999762383231524	WITHOUT_CLASSIFICATION	2.3761676847654714E-5	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999762383231524	WITHOUT_CLASSIFICATION	2.3761676847654714E-5	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9997003057971708	WITHOUT_CLASSIFICATION	2.9969420282919315E-4	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999919622816338	WITHOUT_CLASSIFICATION	8.037718366137402E-6	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999901641862406	WITHOUT_CLASSIFICATION	9.83581375931905E-6	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.999982363063062	WITHOUT_CLASSIFICATION	1.7636936937997803E-5	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999876040186011	WITHOUT_CLASSIFICATION	1.2395981398868949E-5	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999900788359805	WITHOUT_CLASSIFICATION	9.921164019444916E-6	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9996077463928373	WITHOUT_CLASSIFICATION	3.922536071626355E-4	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9988659480766354	WITHOUT_CLASSIFICATION	0.0011340519233645878	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9988659480766354	WITHOUT_CLASSIFICATION	0.0011340519233645878	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.8660602605959631	WITHOUT_CLASSIFICATION	0.133939739404037	IMPLEMENTATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999608472520813	WITHOUT_CLASSIFICATION	3.915274791870901E-5	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999979667024846	WITHOUT_CLASSIFICATION	2.0332975154263113E-6	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999507451928248	WITHOUT_CLASSIFICATION	4.925480717523714E-5	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999507451928248	WITHOUT_CLASSIFICATION	4.925480717523714E-5	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999507451928248	WITHOUT_CLASSIFICATION	4.925480717523714E-5	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999972646639546	WITHOUT_CLASSIFICATION	2.735336045400903E-5	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999973831962248	WITHOUT_CLASSIFICATION	2.6168037751402207E-6	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9846450811145943	WITHOUT_CLASSIFICATION	0.015354918885405832	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999846641747447	WITHOUT_CLASSIFICATION	1.5335825255294637E-5	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999966859353524	WITHOUT_CLASSIFICATION	3.314064647586606E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999671911159778	WITHOUT_CLASSIFICATION	3.2808884022165714E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999671911159778	WITHOUT_CLASSIFICATION	3.2808884022165714E-5	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9993050715750164	WITHOUT_CLASSIFICATION	6.949284249836489E-4	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999935565819263	WITHOUT_CLASSIFICATION	6.443418073703332E-6	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9981139471686072	WITHOUT_CLASSIFICATION	0.0018860528313927613	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.999887226866833	WITHOUT_CLASSIFICATION	1.1277313316702801E-4	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999911426509629	WITHOUT_CLASSIFICATION	8.857349037046656E-6	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.9999430602400281	WITHOUT_CLASSIFICATION	5.693975997184409E-5	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.99997180308795	WITHOUT_CLASSIFICATION	2.8196912050045512E-5	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.999978260283526	WITHOUT_CLASSIFICATION	2.173971647408341E-5	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999982268341793	WITHOUT_CLASSIFICATION	1.773165820694105E-5	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.99999949296038	WITHOUT_CLASSIFICATION	5.070396199693945E-7	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999920112008082	WITHOUT_CLASSIFICATION	7.988799191818432E-6	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999182336134845	WITHOUT_CLASSIFICATION	8.176638651554295E-5	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999580012117534	WITHOUT_CLASSIFICATION	4.199878824658932E-5	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999580012117534	WITHOUT_CLASSIFICATION	4.199878824658932E-5	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999580012117534	WITHOUT_CLASSIFICATION	4.199878824658932E-5	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999580012117534	WITHOUT_CLASSIFICATION	4.199878824658932E-5	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999580012117534	WITHOUT_CLASSIFICATION	4.199878824658932E-5	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999404722874474	WITHOUT_CLASSIFICATION	5.952771255251524E-5	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999404722874474	WITHOUT_CLASSIFICATION	5.952771255251524E-5	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999404722874474	WITHOUT_CLASSIFICATION	5.952771255251524E-5	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999404722874474	WITHOUT_CLASSIFICATION	5.952771255251524E-5	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9997566967888359	WITHOUT_CLASSIFICATION	2.4330321116415875E-4	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999762383231524	WITHOUT_CLASSIFICATION	2.3761676847654714E-5	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9996959627588666	WITHOUT_CLASSIFICATION	3.04037241133388E-4	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999404722874474	WITHOUT_CLASSIFICATION	5.952771255251524E-5	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9995943587938708	WITHOUT_CLASSIFICATION	4.056412061292464E-4	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999730445307944	WITHOUT_CLASSIFICATION	2.695546920560095E-5	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999677112070118	WITHOUT_CLASSIFICATION	3.228879298820305E-5	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999745137598429	WITHOUT_CLASSIFICATION	2.5486240157021585E-5	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999728770934	WITHOUT_CLASSIFICATION	2.712290657082403E-8	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999430284480181	WITHOUT_CLASSIFICATION	5.697155198197547E-5	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9998117178140864	WITHOUT_CLASSIFICATION	1.8828218591373667E-4	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999934269526155	WITHOUT_CLASSIFICATION	6.5730473844912905E-6	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999951245502575	WITHOUT_CLASSIFICATION	4.875449742505611E-6	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999553416401	WITHOUT_CLASSIFICATION	4.465835996145419E-8	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999986234403957	WITHOUT_CLASSIFICATION	1.3765596043054613E-6	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.9999736818877872	WITHOUT_CLASSIFICATION	2.631811221274835E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999324326339203	WITHOUT_CLASSIFICATION	6.756736607980778E-5	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.9997840451503389	WITHOUT_CLASSIFICATION	2.1595484966114542E-4	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9470654869454018	WITHOUT_CLASSIFICATION	0.05293451305459814	IMPLEMENTATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999911703428359	WITHOUT_CLASSIFICATION	8.829657164162194E-6	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999938665000034	WITHOUT_CLASSIFICATION	6.133499996599275E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999890699451782	WITHOUT_CLASSIFICATION	1.0930054821732972E-5	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999890699451782	WITHOUT_CLASSIFICATION	1.0930054821732972E-5	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.999974365388607	WITHOUT_CLASSIFICATION	2.563461139304675E-5	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999985063545755	WITHOUT_CLASSIFICATION	1.493645424533961E-6	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.99997193696133	WITHOUT_CLASSIFICATION	2.8063038669914644E-5	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999174082426064	WITHOUT_CLASSIFICATION	8.259175739349473E-5	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999696387331009	WITHOUT_CLASSIFICATION	3.0361266899088337E-5	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999644260006562	WITHOUT_CLASSIFICATION	3.55739993438281E-5	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999481862191449	WITHOUT_CLASSIFICATION	5.181378085493628E-5	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999907817740172	WITHOUT_CLASSIFICATION	9.218225982776194E-6	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999694300756007	WITHOUT_CLASSIFICATION	3.056992439942554E-5	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999995108890299	WITHOUT_CLASSIFICATION	4.891109700447132E-7	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999596945386868	WITHOUT_CLASSIFICATION	4.030546131311658E-5	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999837462848137	WITHOUT_CLASSIFICATION	1.6253715186369618E-5	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999931615911203	WITHOUT_CLASSIFICATION	6.838408879785775E-6	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999979773549306	WITHOUT_CLASSIFICATION	2.0226450694303705E-6	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999704643786927	WITHOUT_CLASSIFICATION	2.953562130724444E-5	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999834796464432	WITHOUT_CLASSIFICATION	1.6520353556720272E-5	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999998885007474	WITHOUT_CLASSIFICATION	1.1149925263277865E-7	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999998885007474	WITHOUT_CLASSIFICATION	1.1149925263277865E-7	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998432847215204	WITHOUT_CLASSIFICATION	1.567152784794912E-4	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999997807443183	WITHOUT_CLASSIFICATION	2.1925568168680496E-7	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999893555209688	WITHOUT_CLASSIFICATION	1.0644479031174464E-5	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.999992449183245	WITHOUT_CLASSIFICATION	7.550816754862429E-6	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.9999873109076555	WITHOUT_CLASSIFICATION	1.2689092344600416E-5	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999863811908932	WITHOUT_CLASSIFICATION	1.361880910675535E-5	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9998980168009639	WITHOUT_CLASSIFICATION	1.0198319903606479E-4	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999736509624909	WITHOUT_CLASSIFICATION	2.634903750904492E-5	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999648489491625	WITHOUT_CLASSIFICATION	3.5151050837484934E-5	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999599926196	WITHOUT_CLASSIFICATION	4.0007380394712567E-8	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999491888088735	WITHOUT_CLASSIFICATION	5.081119112648454E-5	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999736509624909	WITHOUT_CLASSIFICATION	2.634903750904492E-5	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999615908861624	WITHOUT_CLASSIFICATION	3.8409113837573283E-5	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9991619481724102	WITHOUT_CLASSIFICATION	8.380518275897818E-4	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999884883453857	WITHOUT_CLASSIFICATION	1.1511654614421589E-5	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9999544282009111	WITHOUT_CLASSIFICATION	4.557179908888291E-5	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999911338343	WITHOUT_CLASSIFICATION	8.866165690594875E-9	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999865487572779	WITHOUT_CLASSIFICATION	1.3451242722151515E-5	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9987382393451659	WITHOUT_CLASSIFICATION	0.0012617606548340618	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999684221412743	WITHOUT_CLASSIFICATION	3.1577858725599986E-5	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999951943712516	WITHOUT_CLASSIFICATION	4.805628748353558E-6	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998838811980807	WITHOUT_CLASSIFICATION	1.161188019193209E-4	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998642659348427	WITHOUT_CLASSIFICATION	1.3573406515732622E-4	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999898676717995	WITHOUT_CLASSIFICATION	1.0132328200558213E-5	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998109683451342	WITHOUT_CLASSIFICATION	1.8903165486581128E-4	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9984076154303608	WITHOUT_CLASSIFICATION	0.0015923845696391718	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9997399806903003	WITHOUT_CLASSIFICATION	2.600193096996449E-4	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.999992052591651	WITHOUT_CLASSIFICATION	7.94740834900947E-6	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999903691947083	WITHOUT_CLASSIFICATION	9.630805291654299E-6	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9969397111751884	WITHOUT_CLASSIFICATION	0.00306028882481145	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9969397111751884	WITHOUT_CLASSIFICATION	0.00306028882481145	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9987382393451659	WITHOUT_CLASSIFICATION	0.0012617606548340618	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9938851649747763	WITHOUT_CLASSIFICATION	0.00611483502522371	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999775221702673	WITHOUT_CLASSIFICATION	2.2477829732820088E-5	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999169372734288	WITHOUT_CLASSIFICATION	8.306272657125933E-5	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.9999494356744312	WITHOUT_CLASSIFICATION	5.056432556876075E-5	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999879942098208	WITHOUT_CLASSIFICATION	1.2005790179289245E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999821109685044	WITHOUT_CLASSIFICATION	1.7889031495673746E-5	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999987959986108	WITHOUT_CLASSIFICATION	1.204001389195696E-5	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9996294903257581	WITHOUT_CLASSIFICATION	3.705096742419333E-4	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999217868885769	WITHOUT_CLASSIFICATION	7.82131114231934E-5	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999855209751594	WITHOUT_CLASSIFICATION	1.4479024840628594E-5	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999821437676727	WITHOUT_CLASSIFICATION	1.7856232327327888E-5	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999633827536769	WITHOUT_CLASSIFICATION	3.661724632317897E-5	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9997686519932629	WITHOUT_CLASSIFICATION	2.3134800673701896E-4	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999882445163584	WITHOUT_CLASSIFICATION	1.1755483641591797E-5	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999099436000805	WITHOUT_CLASSIFICATION	9.005639991946792E-5	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999944182272227	WITHOUT_CLASSIFICATION	5.581772777246323E-6	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999997648471364	WITHOUT_CLASSIFICATION	2.3515286353955201E-7	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999918038700718	WITHOUT_CLASSIFICATION	8.19612992821704E-6	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999259107052852	WITHOUT_CLASSIFICATION	7.408929471470283E-5	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999400155179808	WITHOUT_CLASSIFICATION	5.998448201913724E-5	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9997433632408586	WITHOUT_CLASSIFICATION	2.566367591414093E-4	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999964955162195	WITHOUT_CLASSIFICATION	3.5044837803918727E-6	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9995103838522942	WITHOUT_CLASSIFICATION	4.896161477058544E-4	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999965516483164	WITHOUT_CLASSIFICATION	3.4483516837318768E-6	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999907479701644	WITHOUT_CLASSIFICATION	9.252029835549803E-6	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999815496898184	WITHOUT_CLASSIFICATION	1.8450310181547773E-5	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999958811576282	WITHOUT_CLASSIFICATION	4.118842371829329E-6	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999883003370014	WITHOUT_CLASSIFICATION	1.1699662998642379E-5	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999978564091146	WITHOUT_CLASSIFICATION	2.1435908854179692E-6	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999315967723519	WITHOUT_CLASSIFICATION	6.840322764812733E-5	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999236466438639	WITHOUT_CLASSIFICATION	7.635335613601558E-5	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999099436000805	WITHOUT_CLASSIFICATION	9.005639991946792E-5	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999874320456013	WITHOUT_CLASSIFICATION	1.2567954398771866E-5	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999124793983	WITHOUT_CLASSIFICATION	8.752060157891146E-8	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999944472417022	WITHOUT_CLASSIFICATION	5.552758297793205E-6	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999316742487362	WITHOUT_CLASSIFICATION	6.832575126372103E-5	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997216557147239	WITHOUT_CLASSIFICATION	2.7834428527604484E-4	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999966356993965	WITHOUT_CLASSIFICATION	3.364300603547236E-6	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.9999864411075504	WITHOUT_CLASSIFICATION	1.3558892449603236E-5	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999512784442899	WITHOUT_CLASSIFICATION	4.872155571016846E-5	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9945338850869739	WITHOUT_CLASSIFICATION	0.005466114913026037	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9990770716187565	WITHOUT_CLASSIFICATION	9.229283812436078E-4	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.9999388830747598	WITHOUT_CLASSIFICATION	6.111692524020207E-5	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999028331817	WITHOUT_CLASSIFICATION	9.716681821198904E-8	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9998645776571545	WITHOUT_CLASSIFICATION	1.3542234284547096E-4	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999866619616959	WITHOUT_CLASSIFICATION	1.3338038304020266E-5	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999236466438639	WITHOUT_CLASSIFICATION	7.635335613601558E-5	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999478120173553	WITHOUT_CLASSIFICATION	5.2187982644679093E-5	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.990873767377813	WITHOUT_CLASSIFICATION	0.009126232622187052	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999998231990405	WITHOUT_CLASSIFICATION	1.768009595858265E-7	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999990255539803	WITHOUT_CLASSIFICATION	9.744460196733466E-7	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9987646709641155	WITHOUT_CLASSIFICATION	0.0012353290358844994	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999924428808941	WITHOUT_CLASSIFICATION	7.557119105974168E-6	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999648489491625	WITHOUT_CLASSIFICATION	3.5151050837484934E-5	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999703306928978	WITHOUT_CLASSIFICATION	2.9669307102209257E-5	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999099436000805	WITHOUT_CLASSIFICATION	9.005639991946792E-5	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999714112640979	WITHOUT_CLASSIFICATION	2.8588735902102224E-5	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999992004962235	WITHOUT_CLASSIFICATION	7.99503776504741E-6	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999893816389758	WITHOUT_CLASSIFICATION	1.0618361024121032E-5	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999893207421565	WITHOUT_CLASSIFICATION	1.0679257843556264E-5	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999499388708922	WITHOUT_CLASSIFICATION	5.00611291077467E-5	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999933173353464	WITHOUT_CLASSIFICATION	6.682664653706594E-6	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9972112614825877	WITHOUT_CLASSIFICATION	0.002788738517412316	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999917206909548	WITHOUT_CLASSIFICATION	8.279309045211454E-6	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999084684944629	WITHOUT_CLASSIFICATION	9.153150553702014E-5	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999687808981101	WITHOUT_CLASSIFICATION	3.1219101889831655E-5	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9983623846220372	WITHOUT_CLASSIFICATION	0.00163761537796289	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999279862517426	WITHOUT_CLASSIFICATION	7.201374825742133E-5	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9831767549795409	WITHOUT_CLASSIFICATION	0.016823245020459062	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9831767549795409	WITHOUT_CLASSIFICATION	0.016823245020459062	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999998838184816	WITHOUT_CLASSIFICATION	1.1618151836948942E-7	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9917384931378129	WITHOUT_CLASSIFICATION	0.00826150686218696	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9890170633602569	WITHOUT_CLASSIFICATION	0.010982936639743163	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999995156625701	WITHOUT_CLASSIFICATION	4.843374299521278E-7	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999992843812106	WITHOUT_CLASSIFICATION	7.156187894795568E-7	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999229761115552	WITHOUT_CLASSIFICATION	7.702388844478547E-5	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999991398619663	WITHOUT_CLASSIFICATION	8.601380337407695E-7	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999919025680526	WITHOUT_CLASSIFICATION	8.097431947380288E-6	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999805086434428	WITHOUT_CLASSIFICATION	1.949135655726684E-5	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.9997668697921305	WITHOUT_CLASSIFICATION	2.3313020786948306E-4	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.9997668697921305	WITHOUT_CLASSIFICATION	2.3313020786948306E-4	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.999669595205726	WITHOUT_CLASSIFICATION	3.304047942740615E-4	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999873295609	WITHOUT_CLASSIFICATION	1.2670439128813642E-8	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999290640161737	WITHOUT_CLASSIFICATION	7.093598382634045E-5	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999996750888221	WITHOUT_CLASSIFICATION	3.2491117786689836E-7	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9998439626424316	WITHOUT_CLASSIFICATION	1.560373575682999E-4	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998821281864654	WITHOUT_CLASSIFICATION	1.1787181353465651E-4	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999991846797383	WITHOUT_CLASSIFICATION	8.153202616835145E-7	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999925397289179	WITHOUT_CLASSIFICATION	7.460271082109755E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272347001801	WITHOUT_CLASSIFICATION	7.276529981993202E-5	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999996562451775	WITHOUT_CLASSIFICATION	3.437548225485615E-7	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999973599682866	WITHOUT_CLASSIFICATION	2.6400317134161006E-6	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999952692571117	WITHOUT_CLASSIFICATION	4.730742888369311E-6	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999921288378256	WITHOUT_CLASSIFICATION	7.871162174456098E-6	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.9999440980836133	WITHOUT_CLASSIFICATION	5.5901916386660205E-5	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9997951302087196	WITHOUT_CLASSIFICATION	2.0486979128041824E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272347001801	WITHOUT_CLASSIFICATION	7.276529981993202E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272347001801	WITHOUT_CLASSIFICATION	7.276529981993202E-5	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999950670216065	WITHOUT_CLASSIFICATION	4.932978393538166E-6	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999486916389063	WITHOUT_CLASSIFICATION	5.130836109358916E-5	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999979112820653	WITHOUT_CLASSIFICATION	2.0887179347066578E-5	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999940182669349	WITHOUT_CLASSIFICATION	5.981733065122063E-6	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999957986146261	WITHOUT_CLASSIFICATION	4.201385373956858E-6	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999770326891555	WITHOUT_CLASSIFICATION	2.296731084452381E-5	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999932172858932	WITHOUT_CLASSIFICATION	6.78271410673684E-6	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9976359416989136	WITHOUT_CLASSIFICATION	0.002364058301086483	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999263598648873	WITHOUT_CLASSIFICATION	7.364013511274453E-5	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999906914676969	WITHOUT_CLASSIFICATION	9.308532303004458E-6	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999601270994197	WITHOUT_CLASSIFICATION	3.987290058018727E-5	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9998445036918021	WITHOUT_CLASSIFICATION	1.554963081979135E-4	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999729440580403	WITHOUT_CLASSIFICATION	2.7055941959768227E-5	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998538089096349	WITHOUT_CLASSIFICATION	1.4619109036500405E-4	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980047381400188	WITHOUT_CLASSIFICATION	0.001995261859981316	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999973926758965	WITHOUT_CLASSIFICATION	2.6073241036318378E-6	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999946742276481	WITHOUT_CLASSIFICATION	5.3257723519150715E-5	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998867992381385	WITHOUT_CLASSIFICATION	1.1320076186152284E-4	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978322536869396	WITHOUT_CLASSIFICATION	0.0021677463130604264	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.5232661200083227	IMPLEMENTATION	0.47673387999167727	WITHOUT_CLASSIFICATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999680909796865	WITHOUT_CLASSIFICATION	3.190902031347504E-5	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999994942640468	WITHOUT_CLASSIFICATION	5.057359532174372E-7	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999502385439655	WITHOUT_CLASSIFICATION	4.976145603447276E-5	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997909853557591	WITHOUT_CLASSIFICATION	0.002090146442409073	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999981760170168	WITHOUT_CLASSIFICATION	1.8239829831985143E-5	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.999988526747832	WITHOUT_CLASSIFICATION	1.1473252168063932E-5	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999681706405346	WITHOUT_CLASSIFICATION	3.182935946546487E-5	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999413360534027	WITHOUT_CLASSIFICATION	5.866394659736145E-5	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999950822372288	WITHOUT_CLASSIFICATION	4.9177627712077944E-6	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.999965737663732	WITHOUT_CLASSIFICATION	3.4262336268119725E-5	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.9995798976080138	WITHOUT_CLASSIFICATION	4.201023919861953E-4	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.9999481618916949	WITHOUT_CLASSIFICATION	5.1838108305138005E-5	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999737333043738	WITHOUT_CLASSIFICATION	2.6266695626264492E-5	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998341629963605	WITHOUT_CLASSIFICATION	1.65837003639511E-4	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999997412688383	WITHOUT_CLASSIFICATION	2.587311617669894E-7	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999772587203112	WITHOUT_CLASSIFICATION	2.274127968876397E-5	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9998456477490721	WITHOUT_CLASSIFICATION	1.5435225092775786E-4	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999972130039476	WITHOUT_CLASSIFICATION	2.7869960523234178E-6	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999904162703707	WITHOUT_CLASSIFICATION	9.583729629280587E-6	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999825523947738	WITHOUT_CLASSIFICATION	1.7447605226156915E-5	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999966207783275	WITHOUT_CLASSIFICATION	3.3792216724435565E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9997396422026227	WITHOUT_CLASSIFICATION	2.6035779737730764E-4	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9997531245367869	WITHOUT_CLASSIFICATION	2.468754632131245E-4	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9997396422026227	WITHOUT_CLASSIFICATION	2.6035779737730764E-4	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999811492237434	WITHOUT_CLASSIFICATION	1.8850776256639172E-5	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999287475759734	WITHOUT_CLASSIFICATION	7.125242402659362E-5	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9996968685923724	WITHOUT_CLASSIFICATION	3.031314076276551E-4	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999417746201487	WITHOUT_CLASSIFICATION	5.8225379851300024E-5	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999530372428367	WITHOUT_CLASSIFICATION	4.696275716319139E-5	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9996968685923724	WITHOUT_CLASSIFICATION	3.031314076276551E-4	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999954935820232	WITHOUT_CLASSIFICATION	4.506417976827293E-6	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999845716393047	WITHOUT_CLASSIFICATION	1.5428360695294248E-4	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999911387364097	WITHOUT_CLASSIFICATION	8.861263590414336E-6	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9991569633289153	WITHOUT_CLASSIFICATION	8.430366710847646E-4	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999799027689186	WITHOUT_CLASSIFICATION	2.0097231081446842E-5	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999915030782757	WITHOUT_CLASSIFICATION	8.496921724387707E-6	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999767144259379	WITHOUT_CLASSIFICATION	2.328557406212229E-5	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.7538440742076165	IMPLEMENTATION	0.24615592579238355	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9998156554208766	WITHOUT_CLASSIFICATION	1.8434457912341578E-4	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999925560188775	WITHOUT_CLASSIFICATION	7.4439811225021695E-6	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999981244142656	WITHOUT_CLASSIFICATION	1.8755857343472424E-6	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999812905634706	WITHOUT_CLASSIFICATION	1.8709436529380043E-5	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999998821895608	WITHOUT_CLASSIFICATION	1.1781043920907058E-6	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999842629786607	WITHOUT_CLASSIFICATION	1.5737021339250617E-5	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999881747044	WITHOUT_CLASSIFICATION	1.1825295515792474E-8	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9998762595719487	WITHOUT_CLASSIFICATION	1.2374042805123994E-4	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.999990724605135	WITHOUT_CLASSIFICATION	9.275394864917294E-6	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999678560720966	WITHOUT_CLASSIFICATION	3.214392790335739E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999862362923065	WITHOUT_CLASSIFICATION	1.3763707693496773E-4	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999998097789995	WITHOUT_CLASSIFICATION	1.9022100041802851E-7	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999964370367411	WITHOUT_CLASSIFICATION	3.5629632588930535E-6	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.9999589166808334	WITHOUT_CLASSIFICATION	4.10833191666581E-5	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999870115680144	WITHOUT_CLASSIFICATION	1.298843198560046E-4	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9972902840098097	WITHOUT_CLASSIFICATION	0.0027097159901902437	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.9999672946841629	WITHOUT_CLASSIFICATION	3.270531583708711E-5	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9998596846014336	WITHOUT_CLASSIFICATION	1.4031539856633143E-4	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999999903806	WITHOUT_CLASSIFICATION	9.619354417845225E-12	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9998313491626143	WITHOUT_CLASSIFICATION	1.6865083738565412E-4	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.9999837073113214	WITHOUT_CLASSIFICATION	1.629268867860152E-5	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9999772083089425	WITHOUT_CLASSIFICATION	2.2791691057563342E-5	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999870115680144	WITHOUT_CLASSIFICATION	1.298843198560046E-4	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998686222589849	WITHOUT_CLASSIFICATION	1.3137774101511893E-4	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.9999875601603316	WITHOUT_CLASSIFICATION	1.2439839668473625E-5	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.9997154556597277	WITHOUT_CLASSIFICATION	2.845443402722476E-4	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9911358058845411	WITHOUT_CLASSIFICATION	0.008864194115458994	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999998097789995	WITHOUT_CLASSIFICATION	1.9022100041802851E-7	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999975618399504	WITHOUT_CLASSIFICATION	2.4381600496940245E-6	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999933275033038	WITHOUT_CLASSIFICATION	6.672496696192044E-6	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999688152644336	WITHOUT_CLASSIFICATION	3.118473556643391E-5	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.9999401807335008	WITHOUT_CLASSIFICATION	5.981926649919615E-5	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999965141241851	WITHOUT_CLASSIFICATION	3.4858758149799833E-6	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999987943406718	WITHOUT_CLASSIFICATION	1.2056593281687E-6	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999919475123072	WITHOUT_CLASSIFICATION	8.052487692784643E-6	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998623587539208	WITHOUT_CLASSIFICATION	1.3764124607911662E-4	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.999909590783871	WITHOUT_CLASSIFICATION	9.040921612892211E-5	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.9998657536520699	WITHOUT_CLASSIFICATION	1.3424634793016856E-4	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999957053535979	WITHOUT_CLASSIFICATION	4.294646402017845E-6	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999458279257581	WITHOUT_CLASSIFICATION	5.417207424186308E-5	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999458279257581	WITHOUT_CLASSIFICATION	5.417207424186308E-5	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999938187889558	WITHOUT_CLASSIFICATION	6.181211044299257E-6	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999892996749176	WITHOUT_CLASSIFICATION	1.0700325082565375E-5	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999389978916946	WITHOUT_CLASSIFICATION	6.100210830534071E-5	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999655592694933	WITHOUT_CLASSIFICATION	3.444073050662887E-5	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999876512687319	WITHOUT_CLASSIFICATION	1.2348731268036165E-5	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9808520551330876	WITHOUT_CLASSIFICATION	0.01914794486691239	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998574458437871	WITHOUT_CLASSIFICATION	1.4255415621290056E-4	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9992289924413431	WITHOUT_CLASSIFICATION	7.710075586568734E-4	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.999995334118822	WITHOUT_CLASSIFICATION	4.665881177923644E-6	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9967170733354255	WITHOUT_CLASSIFICATION	0.0032829266645744	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9967170733354255	WITHOUT_CLASSIFICATION	0.0032829266645744	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999943636603604	WITHOUT_CLASSIFICATION	5.636339639523542E-6	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9967170733354255	WITHOUT_CLASSIFICATION	0.0032829266645744	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9967170733354255	WITHOUT_CLASSIFICATION	0.0032829266645744	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9975089596226336	WITHOUT_CLASSIFICATION	0.0024910403773664236	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999678529909996	WITHOUT_CLASSIFICATION	3.2147009000335513E-5	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999256677005072	WITHOUT_CLASSIFICATION	7.433229949282154E-5	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999256677005072	WITHOUT_CLASSIFICATION	7.433229949282154E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999382613728061	WITHOUT_CLASSIFICATION	6.173862719400205E-5	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999053801285616	WITHOUT_CLASSIFICATION	9.46198714384346E-5	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999398560754823	WITHOUT_CLASSIFICATION	6.0143924517782897E-5	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999668145019	WITHOUT_CLASSIFICATION	3.318549814344581E-8	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999495951003483	WITHOUT_CLASSIFICATION	5.0404899651612695E-5	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.9998811306228567	WITHOUT_CLASSIFICATION	1.1886937714331975E-4	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9996259184168843	WITHOUT_CLASSIFICATION	3.7408158311559776E-4	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999833691861892	WITHOUT_CLASSIFICATION	1.66308138107589E-5	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999210849276816	WITHOUT_CLASSIFICATION	7.891507231840723E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999941774918708	WITHOUT_CLASSIFICATION	5.822508129219225E-6	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999349427993236	WITHOUT_CLASSIFICATION	6.505720067648012E-5	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999838214732184	WITHOUT_CLASSIFICATION	1.6178526781587765E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999996987807227	WITHOUT_CLASSIFICATION	3.0121927729574862E-6	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999359658717218	WITHOUT_CLASSIFICATION	6.403412827813463E-5	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999424680602149	WITHOUT_CLASSIFICATION	5.7531939785085956E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9998952375113886	WITHOUT_CLASSIFICATION	1.0476248861143527E-4	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999434034124228	WITHOUT_CLASSIFICATION	5.659658757716526E-5	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.9999301375076878	WITHOUT_CLASSIFICATION	6.98624923121688E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999996987807227	WITHOUT_CLASSIFICATION	3.0121927729574862E-6	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999964370367411	WITHOUT_CLASSIFICATION	3.5629632588930535E-6	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.9997622214628785	WITHOUT_CLASSIFICATION	2.3777853712145938E-4	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999726437010157	WITHOUT_CLASSIFICATION	2.73562989842676E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998950237595907	WITHOUT_CLASSIFICATION	1.0497624040927505E-4	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.9996451211958651	WITHOUT_CLASSIFICATION	3.548788041349077E-4	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999933675602361	WITHOUT_CLASSIFICATION	6.632439763908734E-5	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.9995615538724836	WITHOUT_CLASSIFICATION	4.384461275163589E-4	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998668506299966	WITHOUT_CLASSIFICATION	1.3314937000343777E-4	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.999972512409598	WITHOUT_CLASSIFICATION	2.748759040195693E-5	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999983522241324	WITHOUT_CLASSIFICATION	1.6477758676361494E-6	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.99999100122949	WITHOUT_CLASSIFICATION	8.998770510030546E-6	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999956077830522	WITHOUT_CLASSIFICATION	4.392216947819532E-6	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9998982569720084	WITHOUT_CLASSIFICATION	1.01743027991575E-4	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998809929683049	WITHOUT_CLASSIFICATION	1.1900703169506252E-4	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9941704490681148	WITHOUT_CLASSIFICATION	0.005829550931885153	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999696093469322	WITHOUT_CLASSIFICATION	3.0390653067730698E-5	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.9998718419903433	WITHOUT_CLASSIFICATION	1.2815800965667017E-4	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9995173122212742	WITHOUT_CLASSIFICATION	4.8268777872584106E-4	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999891647503812	WITHOUT_CLASSIFICATION	1.0835249618847175E-5	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999762429896009	WITHOUT_CLASSIFICATION	2.3757010399090033E-4	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999841622150171	WITHOUT_CLASSIFICATION	1.583778498298744E-5	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.9992140938147198	WITHOUT_CLASSIFICATION	7.859061852801933E-4	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999985391004794	WITHOUT_CLASSIFICATION	1.460899520613048E-6	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.999972512409598	WITHOUT_CLASSIFICATION	2.748759040195693E-5	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999233684689949	WITHOUT_CLASSIFICATION	7.663153100515175E-5	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.9999310563862011	WITHOUT_CLASSIFICATION	6.894361379892977E-5	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9981118146311828	WITHOUT_CLASSIFICATION	0.001888185368817184	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999756205088582	WITHOUT_CLASSIFICATION	2.4379491141776864E-5	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999236466438639	WITHOUT_CLASSIFICATION	7.635335613601558E-5	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.9999375049455174	WITHOUT_CLASSIFICATION	6.24950544826404E-5	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.9998954009740526	WITHOUT_CLASSIFICATION	1.0459902594731514E-4	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.999035488755931	WITHOUT_CLASSIFICATION	9.645112440690988E-4	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.9998952578646536	WITHOUT_CLASSIFICATION	1.0474213534633591E-4	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.9997722748620299	WITHOUT_CLASSIFICATION	2.2772513797012363E-4	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999674388927172	WITHOUT_CLASSIFICATION	3.2561107282899174E-5	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999731463258899	WITHOUT_CLASSIFICATION	2.6853674110088007E-5	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999992996347962	WITHOUT_CLASSIFICATION	7.003652038010622E-7	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999942170416227	WITHOUT_CLASSIFICATION	5.782958377232425E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.999988767015945	WITHOUT_CLASSIFICATION	1.1232984055105887E-5	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999950505323801	WITHOUT_CLASSIFICATION	4.949467619926898E-6	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999953553829553	WITHOUT_CLASSIFICATION	4.644617044747802E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999674388927172	WITHOUT_CLASSIFICATION	3.2561107282899174E-5	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999893087524941	WITHOUT_CLASSIFICATION	1.06912475058847E-5	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999941424444373	WITHOUT_CLASSIFICATION	5.857555562686146E-6	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999650522119123	WITHOUT_CLASSIFICATION	3.4947788087770745E-5	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999907089451955	WITHOUT_CLASSIFICATION	9.291054804461338E-6	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.9999607125587815	WITHOUT_CLASSIFICATION	3.928744121847388E-5	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.999773727849825	WITHOUT_CLASSIFICATION	2.2627215017498198E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.999988767015945	WITHOUT_CLASSIFICATION	1.1232984055105887E-5	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999664925935821	WITHOUT_CLASSIFICATION	3.350740641793719E-5	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999455007461722	WITHOUT_CLASSIFICATION	5.449925382775709E-5	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999189385364253	WITHOUT_CLASSIFICATION	8.10614635746938E-5	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994533130358487	WITHOUT_CLASSIFICATION	5.46686964151302E-4	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994533130358487	WITHOUT_CLASSIFICATION	5.46686964151302E-4	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994533130358487	WITHOUT_CLASSIFICATION	5.46686964151302E-4	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999911718826993	WITHOUT_CLASSIFICATION	8.828117300663509E-6	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999911718826993	WITHOUT_CLASSIFICATION	8.828117300663509E-6	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999970108089908	WITHOUT_CLASSIFICATION	2.9891910091941637E-6	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999939213736416	WITHOUT_CLASSIFICATION	6.0786263583176185E-6	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.9999412485536635	WITHOUT_CLASSIFICATION	5.8751446336443744E-5	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.9999062781989766	WITHOUT_CLASSIFICATION	9.372180102340607E-5	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9849506283570996	WITHOUT_CLASSIFICATION	0.015049371642900398	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237848367258	WITHOUT_CLASSIFICATION	7.621516327417153E-5	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999509583398827	WITHOUT_CLASSIFICATION	4.904166011728682E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999236466438639	WITHOUT_CLASSIFICATION	7.635335613601558E-5	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999993064885964	WITHOUT_CLASSIFICATION	6.935114036030455E-7	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999956541291201	WITHOUT_CLASSIFICATION	4.345870879886003E-5	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237848367258	WITHOUT_CLASSIFICATION	7.621516327417153E-5	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999509583398827	WITHOUT_CLASSIFICATION	4.904166011728682E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999236466438639	WITHOUT_CLASSIFICATION	7.635335613601558E-5	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.999999543922579	WITHOUT_CLASSIFICATION	4.5607742116073483E-7	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999991888725544	WITHOUT_CLASSIFICATION	8.11127445593145E-6	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999979497684679	WITHOUT_CLASSIFICATION	2.0502315321042866E-6	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999992103972741	WITHOUT_CLASSIFICATION	7.896027258298127E-7	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999574766005775	WITHOUT_CLASSIFICATION	4.252339942236812E-5	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.9999908008249018	WITHOUT_CLASSIFICATION	9.199175098200566E-6	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9999659625880885	WITHOUT_CLASSIFICATION	3.4037411911512934E-5	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999458279257581	WITHOUT_CLASSIFICATION	5.417207424186308E-5	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.999972591065152	WITHOUT_CLASSIFICATION	2.7408934847904725E-5	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999977345851758	WITHOUT_CLASSIFICATION	2.2654148242004098E-5	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9997275661219851	WITHOUT_CLASSIFICATION	2.724338780148773E-4	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999901384184221	WITHOUT_CLASSIFICATION	9.861581577861015E-6	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999921813203281	WITHOUT_CLASSIFICATION	7.81867967190037E-6	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999819380475325	WITHOUT_CLASSIFICATION	1.8061952467495362E-5	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999944319482695	WITHOUT_CLASSIFICATION	5.5680517305100054E-6	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999361453642397	WITHOUT_CLASSIFICATION	6.385463576032346E-5	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.999980588081673	WITHOUT_CLASSIFICATION	1.9411918327028825E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9997987787232107	WITHOUT_CLASSIFICATION	2.0122127678922011E-4	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999976420569135	WITHOUT_CLASSIFICATION	2.3579430863941915E-6	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999467044408222	WITHOUT_CLASSIFICATION	5.3295559177816325E-5	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9933246736494478	WITHOUT_CLASSIFICATION	0.006675326350552203	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999692561488108	WITHOUT_CLASSIFICATION	3.0743851189215303E-5	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999970921216629	WITHOUT_CLASSIFICATION	2.9078783370742033E-6	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9904708624059875	WITHOUT_CLASSIFICATION	0.009529137594012537	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999924181783838	WITHOUT_CLASSIFICATION	7.581821616196197E-5	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999990209057903	WITHOUT_CLASSIFICATION	9.790942097338102E-7	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999307424059556	WITHOUT_CLASSIFICATION	6.925759404438437E-5	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999498198066593	WITHOUT_CLASSIFICATION	5.018019334062041E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999713809493331	WITHOUT_CLASSIFICATION	2.861905066695221E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999713809493331	WITHOUT_CLASSIFICATION	2.861905066695221E-5	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999699017065348	WITHOUT_CLASSIFICATION	3.0098293465181106E-5	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999572824400836	WITHOUT_CLASSIFICATION	4.27175599163789E-5	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9982465609979001	WITHOUT_CLASSIFICATION	0.0017534390020999193	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999837462848137	WITHOUT_CLASSIFICATION	1.6253715186369618E-5	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.998930715400533	WITHOUT_CLASSIFICATION	0.0010692845994668895	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999986699946073	WITHOUT_CLASSIFICATION	1.3300053926736938E-6	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.9999799550125009	WITHOUT_CLASSIFICATION	2.004498749907153E-5	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.9999558057828359	WITHOUT_CLASSIFICATION	4.419421716405611E-5	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9996136516210027	WITHOUT_CLASSIFICATION	3.863483789973473E-4	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997634150195732	WITHOUT_CLASSIFICATION	2.3658498042671504E-4	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997634150195732	WITHOUT_CLASSIFICATION	2.3658498042671504E-4	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997634150195732	WITHOUT_CLASSIFICATION	2.3658498042671504E-4	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997634150195732	WITHOUT_CLASSIFICATION	2.3658498042671504E-4	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997634150195732	WITHOUT_CLASSIFICATION	2.3658498042671504E-4	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997634150195732	WITHOUT_CLASSIFICATION	2.3658498042671504E-4	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997634150195732	WITHOUT_CLASSIFICATION	2.3658498042671504E-4	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997634150195732	WITHOUT_CLASSIFICATION	2.3658498042671504E-4	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997634150195732	WITHOUT_CLASSIFICATION	2.3658498042671504E-4	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997634150195732	WITHOUT_CLASSIFICATION	2.3658498042671504E-4	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997634150195732	WITHOUT_CLASSIFICATION	2.3658498042671504E-4	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9961313524113445	WITHOUT_CLASSIFICATION	0.0038686475886553374	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9998868586916438	WITHOUT_CLASSIFICATION	1.1314130835622104E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999818466007587	WITHOUT_CLASSIFICATION	1.8153399241252743E-5	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999916091364308	WITHOUT_CLASSIFICATION	8.390863569151365E-6	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999347117378	WITHOUT_CLASSIFICATION	6.528826221482269E-8	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.9983328734431246	WITHOUT_CLASSIFICATION	0.00166712655687537	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999911814846556	WITHOUT_CLASSIFICATION	8.81851534439362E-6	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9997855650736774	WITHOUT_CLASSIFICATION	2.1443492632246597E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999818466007587	WITHOUT_CLASSIFICATION	1.8153399241252743E-5	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999818466007587	WITHOUT_CLASSIFICATION	1.8153399241252743E-5	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.999998990563793	WITHOUT_CLASSIFICATION	1.0094362070463562E-6	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999736768491305	WITHOUT_CLASSIFICATION	2.6323150869478E-5	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997484807887776	WITHOUT_CLASSIFICATION	2.5151921122244656E-4	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999901667505192	WITHOUT_CLASSIFICATION	9.833249480808835E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999324326339203	WITHOUT_CLASSIFICATION	6.756736607980778E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9997987787232107	WITHOUT_CLASSIFICATION	2.0122127678922011E-4	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999784418852749	WITHOUT_CLASSIFICATION	2.155811472508879E-4	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999668147665701	WITHOUT_CLASSIFICATION	3.318523342996915E-5	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999856710162074	WITHOUT_CLASSIFICATION	1.432898379272563E-5	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997605527393801	WITHOUT_CLASSIFICATION	2.3944726061978752E-4	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999980840340529	WITHOUT_CLASSIFICATION	1.9159659471419214E-6	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999543568976175	WITHOUT_CLASSIFICATION	4.564310238257293E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999520192869386	WITHOUT_CLASSIFICATION	4.798071306146532E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999520192869386	WITHOUT_CLASSIFICATION	4.798071306146532E-5	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999520192869386	WITHOUT_CLASSIFICATION	4.798071306146532E-5	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999520192869386	WITHOUT_CLASSIFICATION	4.798071306146532E-5	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999236466438639	WITHOUT_CLASSIFICATION	7.635335613601558E-5	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999365239979828	WITHOUT_CLASSIFICATION	6.34760020172063E-5	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999932493537242	WITHOUT_CLASSIFICATION	6.750646275748252E-6	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999236466438639	WITHOUT_CLASSIFICATION	7.635335613601558E-5	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9975720075203017	WITHOUT_CLASSIFICATION	0.00242799247969819	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999928156439566	WITHOUT_CLASSIFICATION	7.184356043397539E-6	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999291190848327	WITHOUT_CLASSIFICATION	7.088091516727074E-5	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999166956786716	WITHOUT_CLASSIFICATION	8.330432132841598E-5	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.999965342414236	WITHOUT_CLASSIFICATION	3.465758576404072E-5	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9999936910815281	WITHOUT_CLASSIFICATION	6.308918471868438E-6	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999451026948	WITHOUT_CLASSIFICATION	5.489730520952037E-7	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999920054389487	WITHOUT_CLASSIFICATION	7.994561051302695E-5	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999384043452203	WITHOUT_CLASSIFICATION	6.15956547797611E-5	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999315482256851	WITHOUT_CLASSIFICATION	6.845177431490435E-5	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9998903324061362	WITHOUT_CLASSIFICATION	1.0966759386378914E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9998839310291168	WITHOUT_CLASSIFICATION	1.1606897088314107E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9998839310291168	WITHOUT_CLASSIFICATION	1.1606897088314107E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9998839310291168	WITHOUT_CLASSIFICATION	1.1606897088314107E-4	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999873507004492	WITHOUT_CLASSIFICATION	1.2649299550905521E-5	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.9999890173182976	WITHOUT_CLASSIFICATION	1.0982681702355939E-5	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999636296028	WITHOUT_CLASSIFICATION	3.6370397206997976E-8	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999248535461962	WITHOUT_CLASSIFICATION	7.514645380377836E-5	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999248535461962	WITHOUT_CLASSIFICATION	7.514645380377836E-5	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999987904789292	WITHOUT_CLASSIFICATION	1.2095210708035145E-5	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994533130358487	WITHOUT_CLASSIFICATION	5.46686964151302E-4	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9959830241896811	WITHOUT_CLASSIFICATION	0.004016975810318862	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999918877072286	WITHOUT_CLASSIFICATION	8.112292771493793E-6	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999871167599474	WITHOUT_CLASSIFICATION	1.2883240052556876E-5	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9998815245467885	WITHOUT_CLASSIFICATION	1.1847545321152216E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999857441890576	WITHOUT_CLASSIFICATION	1.4255810942402267E-4	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999993545543738	WITHOUT_CLASSIFICATION	6.454456262875496E-7	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9997784728343896	WITHOUT_CLASSIFICATION	2.215271656104086E-4	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999913212458885	WITHOUT_CLASSIFICATION	8.678754111551728E-6	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999533808259394	WITHOUT_CLASSIFICATION	4.661917406054578E-5	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999721602902351	WITHOUT_CLASSIFICATION	2.783970976496279E-5	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999823351083575	WITHOUT_CLASSIFICATION	1.766489164245414E-5	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.999979228386943	WITHOUT_CLASSIFICATION	2.0771613057018292E-5	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999970705618	WITHOUT_CLASSIFICATION	2.929438321463682E-9	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998237514443	WITHOUT_CLASSIFICATION	1.76248555720665E-7	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999318355394	WITHOUT_CLASSIFICATION	6.816446055913626E-8	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999998457789859	WITHOUT_CLASSIFICATION	1.542210140273572E-7	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9998855738527098	WITHOUT_CLASSIFICATION	1.1442614729020196E-4	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999373600552061	WITHOUT_CLASSIFICATION	6.263994479391172E-5	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999997777834636	WITHOUT_CLASSIFICATION	2.2221653640423482E-7	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.9999715753903402	WITHOUT_CLASSIFICATION	2.8424609659708884E-5	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999816524608	WITHOUT_CLASSIFICATION	1.8347539212468913E-8	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999902558371897	WITHOUT_CLASSIFICATION	9.744162810389797E-6	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.999999769940673	WITHOUT_CLASSIFICATION	2.30059327045047E-7	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.999972670219371	WITHOUT_CLASSIFICATION	2.7329780629052487E-5	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.999981072539073	WITHOUT_CLASSIFICATION	1.892746092706983E-5	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.981715009498396	WITHOUT_CLASSIFICATION	0.01828499050160402	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999458279257581	WITHOUT_CLASSIFICATION	5.417207424186308E-5	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999704966643803	WITHOUT_CLASSIFICATION	2.9503335619666832E-5	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9945341678091719	WITHOUT_CLASSIFICATION	0.005465832190828019	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.9996603976803805	WITHOUT_CLASSIFICATION	3.39602319619507E-4	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999642523292871	WITHOUT_CLASSIFICATION	3.574767071283638E-5	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.999890732590185	WITHOUT_CLASSIFICATION	1.0926740981491195E-4	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.999999082631588	WITHOUT_CLASSIFICATION	9.173684120628235E-7	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999541518763032	WITHOUT_CLASSIFICATION	4.5848123696852124E-5	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9936534666381214	WITHOUT_CLASSIFICATION	0.00634653336187859	IMPLEMENTATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.99999546176342	WITHOUT_CLASSIFICATION	4.538236580073966E-6	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999835041898	WITHOUT_CLASSIFICATION	1.649581022175497E-8	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999724859207506	WITHOUT_CLASSIFICATION	2.751407924934869E-5	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.999989974227761	WITHOUT_CLASSIFICATION	1.0025772238931628E-5	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999895680653065	WITHOUT_CLASSIFICATION	1.0431934693623799E-5	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999577732811747	WITHOUT_CLASSIFICATION	4.2226718825254784E-5	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999992557079781	WITHOUT_CLASSIFICATION	7.442920218578374E-7	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999988925406399	WITHOUT_CLASSIFICATION	1.1074593601222725E-6	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998815947080353	WITHOUT_CLASSIFICATION	1.1840529196465253E-4	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999753608389068	WITHOUT_CLASSIFICATION	2.4639161093197227E-4	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998962045246474	WITHOUT_CLASSIFICATION	1.0379547535257435E-4	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9994805752419041	WITHOUT_CLASSIFICATION	5.194247580958781E-4	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.999975248542574	WITHOUT_CLASSIFICATION	2.475145742605275E-5	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9992056420607807	WITHOUT_CLASSIFICATION	7.943579392194183E-4	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.9999904528021292	WITHOUT_CLASSIFICATION	9.547197870694317E-6	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999837884637699	WITHOUT_CLASSIFICATION	1.62115362301309E-5	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9984406572317388	WITHOUT_CLASSIFICATION	0.0015593427682612049	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999899428170046	WITHOUT_CLASSIFICATION	1.0057182995446116E-5	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999992114598663	WITHOUT_CLASSIFICATION	7.885401337594435E-7	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999729630762	WITHOUT_CLASSIFICATION	2.7036923826564496E-8	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999776476142436	WITHOUT_CLASSIFICATION	2.2352385756525138E-5	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999865705430604	WITHOUT_CLASSIFICATION	1.3429456939519542E-5	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999967169754921	WITHOUT_CLASSIFICATION	3.2830245079155747E-6	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999858070899467	WITHOUT_CLASSIFICATION	1.4192910053387338E-5	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999269488379563	WITHOUT_CLASSIFICATION	7.305116204376659E-5	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9772353277366044	WITHOUT_CLASSIFICATION	0.022764672263395604	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998277326960465	WITHOUT_CLASSIFICATION	1.7226730395343838E-4	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999918478622115	WITHOUT_CLASSIFICATION	8.152137788543597E-6	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999172690250155	WITHOUT_CLASSIFICATION	8.273097498455361E-5	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999087486811852	WITHOUT_CLASSIFICATION	9.125131881479708E-5	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999926775017394	WITHOUT_CLASSIFICATION	7.3224982606873425E-6	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.999999296662029	WITHOUT_CLASSIFICATION	7.033379709468474E-7	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.999953450133706	WITHOUT_CLASSIFICATION	4.6549866294040766E-5	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999955706808873	WITHOUT_CLASSIFICATION	4.429319112688302E-6	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9998372364789252	WITHOUT_CLASSIFICATION	1.6276352107482604E-4	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999845412193844	WITHOUT_CLASSIFICATION	1.5458780615590326E-5	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.9999276029484305	WITHOUT_CLASSIFICATION	7.239705156947097E-5	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999565833921416	WITHOUT_CLASSIFICATION	4.341660785836667E-5	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998042884992023	WITHOUT_CLASSIFICATION	1.9571150079762117E-4	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.638540627888141	IMPLEMENTATION	0.3614593721118589	WITHOUT_CLASSIFICATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999248479164227	WITHOUT_CLASSIFICATION	7.515208357734502E-5	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9742600426191023	WITHOUT_CLASSIFICATION	0.025739957380897734	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.6245287473230999	WITHOUT_CLASSIFICATION	0.3754712526769002	IMPLEMENTATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9998714375078245	WITHOUT_CLASSIFICATION	1.285624921755251E-4	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9999276840363297	WITHOUT_CLASSIFICATION	7.231596367039794E-5	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999707158999782	WITHOUT_CLASSIFICATION	2.928410002181797E-5	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9992646605777707	WITHOUT_CLASSIFICATION	7.353394222291665E-4	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999550876380032	WITHOUT_CLASSIFICATION	4.491236199683267E-5	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9997653279052714	WITHOUT_CLASSIFICATION	2.3467209472856354E-4	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.9999732872000932	WITHOUT_CLASSIFICATION	2.67127999068426E-5	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999375592101398	WITHOUT_CLASSIFICATION	6.244078986022904E-5	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999901766958862	WITHOUT_CLASSIFICATION	9.82330411384328E-6	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999888425233254	WITHOUT_CLASSIFICATION	1.1157476674627257E-5	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9995152453206892	WITHOUT_CLASSIFICATION	4.8475467931080325E-4	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999996384188349	WITHOUT_CLASSIFICATION	3.61581165108269E-6	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999393529443421	WITHOUT_CLASSIFICATION	6.064705565795927E-5	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.9999836002752059	WITHOUT_CLASSIFICATION	1.6399724794114527E-5	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.999947812868759	WITHOUT_CLASSIFICATION	5.218713124111824E-5	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998014168008375	WITHOUT_CLASSIFICATION	1.985831991626368E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998014168008375	WITHOUT_CLASSIFICATION	1.985831991626368E-4	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999900653333594	WITHOUT_CLASSIFICATION	9.934666640564245E-6	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9992237824974899	WITHOUT_CLASSIFICATION	7.762175025100863E-4	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999465741176957	WITHOUT_CLASSIFICATION	5.342588230430733E-5	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999883378636767	WITHOUT_CLASSIFICATION	1.1662136323420393E-5	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9997774043544391	WITHOUT_CLASSIFICATION	2.2259564556093893E-4	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999804203756595	WITHOUT_CLASSIFICATION	1.9579624340524152E-5	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999884356384708	WITHOUT_CLASSIFICATION	1.1564361529108243E-5	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999091433373583	WITHOUT_CLASSIFICATION	9.085666264178792E-5	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999761362085939	WITHOUT_CLASSIFICATION	2.386379140611384E-5	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9375266677772927	WITHOUT_CLASSIFICATION	0.062473332222707234	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999989207143095	WITHOUT_CLASSIFICATION	1.079285690474809E-6	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999998925831057	WITHOUT_CLASSIFICATION	1.0741689421056137E-7	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9949749420543469	WITHOUT_CLASSIFICATION	0.005025057945653177	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999951783224569	WITHOUT_CLASSIFICATION	4.8216775430912054E-6	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999503213057626	WITHOUT_CLASSIFICATION	4.967869423739793E-5	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999937786173869	WITHOUT_CLASSIFICATION	6.221382613067007E-6	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9909776023394854	IMPLEMENTATION	0.009022397660514736	WITHOUT_CLASSIFICATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9909776023394854	IMPLEMENTATION	0.009022397660514736	WITHOUT_CLASSIFICATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999735655274693	WITHOUT_CLASSIFICATION	2.6434472530630165E-5	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999977873490534	WITHOUT_CLASSIFICATION	2.212650946528639E-6	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998534093220572	WITHOUT_CLASSIFICATION	1.4659067794268045E-4	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999580553417792	WITHOUT_CLASSIFICATION	4.194465822091974E-5	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999412898570604	WITHOUT_CLASSIFICATION	5.8710142939681486E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999920054389487	WITHOUT_CLASSIFICATION	7.994561051302695E-5	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999651761857835	WITHOUT_CLASSIFICATION	3.482381421648313E-5	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999412898570604	WITHOUT_CLASSIFICATION	5.8710142939681486E-5	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999873987534195	WITHOUT_CLASSIFICATION	1.260124658063316E-5	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999291870882683	WITHOUT_CLASSIFICATION	7.081291173174247E-5	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9998501747884684	WITHOUT_CLASSIFICATION	1.4982521153171117E-4	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9998501747884684	WITHOUT_CLASSIFICATION	1.4982521153171117E-4	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999980336929724	WITHOUT_CLASSIFICATION	1.966307027593307E-5	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999812356047577	WITHOUT_CLASSIFICATION	1.8764395242322105E-5	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999263598648873	WITHOUT_CLASSIFICATION	7.364013511274453E-5	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9998456177221082	WITHOUT_CLASSIFICATION	1.543822778918711E-4	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999263598648873	WITHOUT_CLASSIFICATION	7.364013511274453E-5	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999999680284	WITHOUT_CLASSIFICATION	3.197153298453316E-11	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.999893189230818	WITHOUT_CLASSIFICATION	1.0681076918196739E-4	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999932724264142	WITHOUT_CLASSIFICATION	6.727573585677146E-6	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9997566967888359	WITHOUT_CLASSIFICATION	2.4330321116415875E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999671911159778	WITHOUT_CLASSIFICATION	3.2808884022165714E-5	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999904152056119	WITHOUT_CLASSIFICATION	9.584794387999075E-6	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999805671063744	WITHOUT_CLASSIFICATION	1.943289362560031E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9994853668678033	WITHOUT_CLASSIFICATION	5.146331321967216E-4	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999879630906647	WITHOUT_CLASSIFICATION	1.2036909335195335E-5	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999580012117534	WITHOUT_CLASSIFICATION	4.199878824658932E-5	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999979112820653	WITHOUT_CLASSIFICATION	2.0887179347066578E-5	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998762956230742	WITHOUT_CLASSIFICATION	1.237043769256586E-4	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999864872203081	WITHOUT_CLASSIFICATION	1.351277969191035E-4	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.9999949837524461	WITHOUT_CLASSIFICATION	5.016247553860796E-6	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9997788051248508	WITHOUT_CLASSIFICATION	2.2119487514912664E-4	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9998094142017122	WITHOUT_CLASSIFICATION	1.905857982877965E-4	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999741465810029	WITHOUT_CLASSIFICATION	2.5853418997106967E-5	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999404722874474	WITHOUT_CLASSIFICATION	5.952771255251524E-5	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9989842787910199	WITHOUT_CLASSIFICATION	0.0010157212089800592	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9991995517128758	WITHOUT_CLASSIFICATION	8.004482871241057E-4	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999549961278053	WITHOUT_CLASSIFICATION	4.500387219466044E-5	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999817867327087	WITHOUT_CLASSIFICATION	1.8213267291316047E-5	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9581801446762878	WITHOUT_CLASSIFICATION	0.041819855323712275	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999975578368714	WITHOUT_CLASSIFICATION	2.4421631287178072E-6	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9996216542774873	WITHOUT_CLASSIFICATION	3.783457225127163E-4	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999998885007474	WITHOUT_CLASSIFICATION	1.1149925263277865E-7	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999695396449229	WITHOUT_CLASSIFICATION	3.0460355077168965E-5	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9999389331557914	WITHOUT_CLASSIFICATION	6.10668442085909E-5	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999962656341059	WITHOUT_CLASSIFICATION	3.7343658940843365E-6	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.962346114736068	WITHOUT_CLASSIFICATION	0.037653885263931985	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999567283451362	WITHOUT_CLASSIFICATION	4.327165486382771E-5	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999582086648776	WITHOUT_CLASSIFICATION	4.17913351224229E-5	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999650931462611	WITHOUT_CLASSIFICATION	3.4906853738842446E-5	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999650931462611	WITHOUT_CLASSIFICATION	3.4906853738842446E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999693723386198	WITHOUT_CLASSIFICATION	3.06276613801668E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.99994068097557	WITHOUT_CLASSIFICATION	5.93190244300145E-5	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9996815834778944	WITHOUT_CLASSIFICATION	3.184165221056307E-4	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.9999312234757406	WITHOUT_CLASSIFICATION	6.877652425940936E-5	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9998838175921245	WITHOUT_CLASSIFICATION	1.1618240787547361E-4	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999995759618335	WITHOUT_CLASSIFICATION	4.240381664854744E-7	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999997131354916	WITHOUT_CLASSIFICATION	2.868645083297911E-7	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9992902509508221	WITHOUT_CLASSIFICATION	7.097490491777224E-4	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999693723386198	WITHOUT_CLASSIFICATION	3.06276613801668E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.99994068097557	WITHOUT_CLASSIFICATION	5.93190244300145E-5	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9997669397764082	WITHOUT_CLASSIFICATION	2.3306022359188854E-4	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.7648578763584453	WITHOUT_CLASSIFICATION	0.23514212364155465	IMPLEMENTATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.999998874198665	WITHOUT_CLASSIFICATION	1.1258013350433422E-6	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999386875663381	WITHOUT_CLASSIFICATION	6.131243366192064E-5	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999996909384059	WITHOUT_CLASSIFICATION	3.090615941087879E-7	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9801484684992495	WITHOUT_CLASSIFICATION	0.01985153150075049	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999065147762762	WITHOUT_CLASSIFICATION	9.348522372369353E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999613453678946	WITHOUT_CLASSIFICATION	3.865463210552755E-5	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999961629866353	WITHOUT_CLASSIFICATION	3.837013364708977E-6	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8167648315488324	IMPLEMENTATION	0.18323516845116763	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9997696415884643	WITHOUT_CLASSIFICATION	2.3035841153583013E-4	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8167648315488324	IMPLEMENTATION	0.18323516845116763	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999409534776482	WITHOUT_CLASSIFICATION	5.9046522351799195E-5	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999269488379563	WITHOUT_CLASSIFICATION	7.305116204376659E-5	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999409534776482	WITHOUT_CLASSIFICATION	5.9046522351799195E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999680201322545	WITHOUT_CLASSIFICATION	3.1979867745520316E-5	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999883420212989	WITHOUT_CLASSIFICATION	1.1657978701082801E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999613453678946	WITHOUT_CLASSIFICATION	3.865463210552755E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999613453678946	WITHOUT_CLASSIFICATION	3.865463210552755E-5	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999475900682461	WITHOUT_CLASSIFICATION	5.240993175397335E-5	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999477860637106	WITHOUT_CLASSIFICATION	5.221393628939601E-5	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999475900682461	WITHOUT_CLASSIFICATION	5.240993175397335E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999937227724371	WITHOUT_CLASSIFICATION	6.27722756289332E-5	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999630231212053	WITHOUT_CLASSIFICATION	3.6976878794747604E-5	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999464627680583	WITHOUT_CLASSIFICATION	5.3537231941690374E-5	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9746025456242219	WITHOUT_CLASSIFICATION	0.02539745437577805	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999405694562737	WITHOUT_CLASSIFICATION	5.9430543726146544E-5	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999896684464078	WITHOUT_CLASSIFICATION	1.033155359214102E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999454338388002	WITHOUT_CLASSIFICATION	5.4566161199786035E-5	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.9999467455791846	WITHOUT_CLASSIFICATION	5.325442081535213E-5	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.9999655524015767	WITHOUT_CLASSIFICATION	3.444759842330465E-5	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999920468291613	WITHOUT_CLASSIFICATION	7.953170838685419E-6	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.9999088354425626	WITHOUT_CLASSIFICATION	9.11645574374283E-5	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9999553330035386	WITHOUT_CLASSIFICATION	4.466699646133558E-5	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.99998446611699	WITHOUT_CLASSIFICATION	1.553388300995781E-5	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999750186261098	WITHOUT_CLASSIFICATION	2.4981373890184655E-5	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999671623464845	WITHOUT_CLASSIFICATION	3.2837653515539316E-5	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999474926530335	WITHOUT_CLASSIFICATION	5.250734696652621E-5	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999864872203081	WITHOUT_CLASSIFICATION	1.351277969191035E-4	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999774824073365	WITHOUT_CLASSIFICATION	2.251759266351914E-5	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999431379245199	WITHOUT_CLASSIFICATION	5.686207548010901E-5	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999004710550559	WITHOUT_CLASSIFICATION	9.952894494421633E-5	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.999864872203081	WITHOUT_CLASSIFICATION	1.351277969191035E-4	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998706749171841	WITHOUT_CLASSIFICATION	1.2932508281602906E-4	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999444940140187	WITHOUT_CLASSIFICATION	5.5505985981289905E-5	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.999090140537906	WITHOUT_CLASSIFICATION	9.098594620938855E-4	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.6348106414328765	WITHOUT_CLASSIFICATION	0.36518935856712353	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9996774744713504	WITHOUT_CLASSIFICATION	3.2252552864960813E-4	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998844069085437	WITHOUT_CLASSIFICATION	1.1559309145625011E-4	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9530204122729582	WITHOUT_CLASSIFICATION	0.04697958772704181	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9998826354990876	WITHOUT_CLASSIFICATION	1.1736450091245E-4	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999405694562737	WITHOUT_CLASSIFICATION	5.9430543726146544E-5	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999582965961703	WITHOUT_CLASSIFICATION	4.1703403829635723E-5	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.8673913146159238	WITHOUT_CLASSIFICATION	0.1326086853840762	IMPLEMENTATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.728514548088331	IMPLEMENTATION	0.2714854519116688	WITHOUT_CLASSIFICATION
an assertion	WITHOUT_CLASSIFICATION	0.9999802298794186	WITHOUT_CLASSIFICATION	1.9770120581407447E-5	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999830860810887	WITHOUT_CLASSIFICATION	1.6913918911360668E-5	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.9999462133139194	WITHOUT_CLASSIFICATION	5.378668608056712E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999937227724371	WITHOUT_CLASSIFICATION	6.27722756289332E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999937227724371	WITHOUT_CLASSIFICATION	6.27722756289332E-5	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9996281985959735	WITHOUT_CLASSIFICATION	3.718014040265834E-4	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999872995388079	WITHOUT_CLASSIFICATION	1.270046119208926E-5	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.9998967551121458	WITHOUT_CLASSIFICATION	1.0324488785416546E-4	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999496932836388	WITHOUT_CLASSIFICATION	5.0306716361166576E-5	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9995831474066482	WITHOUT_CLASSIFICATION	4.168525933518084E-4	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9998977674931693	WITHOUT_CLASSIFICATION	1.0223250683069074E-4	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.999987324025683	WITHOUT_CLASSIFICATION	1.267597431696018E-5	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999998074454334	WITHOUT_CLASSIFICATION	1.9255456651735037E-7	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999033541884201	WITHOUT_CLASSIFICATION	9.664581157983488E-5	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999631129526775	WITHOUT_CLASSIFICATION	3.688704732245303E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999991950569495	WITHOUT_CLASSIFICATION	8.049430504913211E-6	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.99998446611699	WITHOUT_CLASSIFICATION	1.553388300995781E-5	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999693723386198	WITHOUT_CLASSIFICATION	3.06276613801668E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999991950569495	WITHOUT_CLASSIFICATION	8.049430504913211E-6	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999617457331581	WITHOUT_CLASSIFICATION	3.825426684179689E-5	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9998743347376327	WITHOUT_CLASSIFICATION	1.2566526236740123E-4	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999817150971868	WITHOUT_CLASSIFICATION	1.828490281316197E-5	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.9114021778742678	IMPLEMENTATION	0.08859782212573211	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9995619387876312	WITHOUT_CLASSIFICATION	4.380612123687849E-4	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999996537025338	WITHOUT_CLASSIFICATION	3.462974662051272E-6	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999960642418348	WITHOUT_CLASSIFICATION	3.935758165091971E-6	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.999999999150449	WITHOUT_CLASSIFICATION	8.495511326809302E-10	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999481823179971	WITHOUT_CLASSIFICATION	5.1817682002802914E-5	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.9998997148495422	WITHOUT_CLASSIFICATION	1.0028515045788025E-4	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999531919113638	WITHOUT_CLASSIFICATION	4.6808088636248775E-5	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999531919113638	WITHOUT_CLASSIFICATION	4.6808088636248775E-5	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999607061352802	WITHOUT_CLASSIFICATION	3.929386471979439E-5	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9934419692988019	WITHOUT_CLASSIFICATION	0.006558030701198038	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999991950569495	WITHOUT_CLASSIFICATION	8.049430504913211E-6	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9995619387876312	WITHOUT_CLASSIFICATION	4.380612123687849E-4	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999960642418348	WITHOUT_CLASSIFICATION	3.935758165091971E-6	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999777108026459	WITHOUT_CLASSIFICATION	2.228919735413606E-5	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9997335758777554	WITHOUT_CLASSIFICATION	2.664241222446078E-4	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.9999151967907869	WITHOUT_CLASSIFICATION	8.480320921305581E-5	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999607583494675	WITHOUT_CLASSIFICATION	3.9241650532514026E-5	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999547756754927	WITHOUT_CLASSIFICATION	4.522432450723698E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999441247139285	WITHOUT_CLASSIFICATION	5.5875286071457677E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999617457331581	WITHOUT_CLASSIFICATION	3.825426684179689E-5	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999292175536247	WITHOUT_CLASSIFICATION	7.078244637524165E-5	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999583651214825	WITHOUT_CLASSIFICATION	4.163487851754382E-5	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9992596459162147	WITHOUT_CLASSIFICATION	7.403540837852486E-4	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.7992049482148773	WITHOUT_CLASSIFICATION	0.20079505178512275	IMPLEMENTATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.7911967919618772	WITHOUT_CLASSIFICATION	0.20880320803812277	IMPLEMENTATION
render the SQL	WITHOUT_CLASSIFICATION	0.9999789575226099	WITHOUT_CLASSIFICATION	2.1042477390156468E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999680201322545	WITHOUT_CLASSIFICATION	3.1979867745520316E-5	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995072167196	WITHOUT_CLASSIFICATION	4.927832804024411E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999991461531238	WITHOUT_CLASSIFICATION	8.538468763600668E-7	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999482834470805	WITHOUT_CLASSIFICATION	5.171655291945995E-5	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999963564377705	WITHOUT_CLASSIFICATION	3.6435622295777275E-6	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999985501771373	WITHOUT_CLASSIFICATION	1.4498228627274408E-6	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999631041318812	WITHOUT_CLASSIFICATION	3.689586811880771E-5	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.999954779989416	WITHOUT_CLASSIFICATION	4.5220010584046495E-5	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999916750513324	WITHOUT_CLASSIFICATION	8.324948667702905E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999441247139285	WITHOUT_CLASSIFICATION	5.5875286071457677E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999415491384871	WITHOUT_CLASSIFICATION	5.845086151279189E-5	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999459048016955	WITHOUT_CLASSIFICATION	5.4095198304524084E-5	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.9999842948618523	WITHOUT_CLASSIFICATION	1.5705138147656485E-5	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999769354004041	WITHOUT_CLASSIFICATION	2.30645995959924E-5	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999813553904123	WITHOUT_CLASSIFICATION	1.8644609587676733E-5	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.9998347925408657	WITHOUT_CLASSIFICATION	1.6520745913420077E-4	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999146988196098	WITHOUT_CLASSIFICATION	8.530118039016288E-5	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9895457136564748	WITHOUT_CLASSIFICATION	0.010454286343525125	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999038497438879	WITHOUT_CLASSIFICATION	9.615025611206156E-5	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999996559877135	WITHOUT_CLASSIFICATION	3.440122865633069E-7	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.996883628769009	WITHOUT_CLASSIFICATION	0.0031163712309908178	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.9999715024409193	WITHOUT_CLASSIFICATION	2.849755908072013E-5	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.999985597372539	WITHOUT_CLASSIFICATION	1.4402627460974302E-5	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999834207074837	WITHOUT_CLASSIFICATION	1.6579292516307327E-5	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9998972489188881	WITHOUT_CLASSIFICATION	1.0275108111186102E-4	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999725225682291	WITHOUT_CLASSIFICATION	2.747743177100129E-5	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9988373622555788	WITHOUT_CLASSIFICATION	0.0011626377444211432	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999834250396594	WITHOUT_CLASSIFICATION	1.6574960340625237E-5	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999810584447262	WITHOUT_CLASSIFICATION	1.8941555273867868E-5	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999817381265063	WITHOUT_CLASSIFICATION	1.826187349366546E-5	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999982666734132	WITHOUT_CLASSIFICATION	1.7333265867061128E-6	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9998901660500062	WITHOUT_CLASSIFICATION	1.098339499938374E-4	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.6649598651867202	IMPLEMENTATION	0.33504013481327977	WITHOUT_CLASSIFICATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9998859726012436	WITHOUT_CLASSIFICATION	1.1402739875649645E-4	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999434462451459	WITHOUT_CLASSIFICATION	5.6553754854118074E-5	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999956873265369	WITHOUT_CLASSIFICATION	4.312673463129418E-6	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5152550652094242	IMPLEMENTATION	0.4847449347905756	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999899208537263	WITHOUT_CLASSIFICATION	1.0079146273737864E-5	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998838811980807	WITHOUT_CLASSIFICATION	1.161188019193209E-4	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999922861437414	WITHOUT_CLASSIFICATION	7.713856258650018E-6	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999703306928978	WITHOUT_CLASSIFICATION	2.9669307102209257E-5	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999761352280505	WITHOUT_CLASSIFICATION	2.3864771949500305E-5	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9998351406515609	WITHOUT_CLASSIFICATION	1.648593484392023E-4	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999713654413565	WITHOUT_CLASSIFICATION	2.863455864354253E-5	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9995794814631094	WITHOUT_CLASSIFICATION	4.205185368907277E-4	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9998351406515609	WITHOUT_CLASSIFICATION	1.648593484392023E-4	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999761352280505	WITHOUT_CLASSIFICATION	2.3864771949500305E-5	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999713654413565	WITHOUT_CLASSIFICATION	2.863455864354253E-5	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.9999825403982022	WITHOUT_CLASSIFICATION	1.7459601797822682E-5	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999778735217277	WITHOUT_CLASSIFICATION	2.212647827223687E-5	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9984671037069387	WITHOUT_CLASSIFICATION	0.0015328962930612718	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999805202517726	WITHOUT_CLASSIFICATION	1.9479748227312554E-5	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999195696101	WITHOUT_CLASSIFICATION	8.0430389958742E-8	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8648399229619848	WITHOUT_CLASSIFICATION	0.13516007703801527	IMPLEMENTATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9975343408929487	WITHOUT_CLASSIFICATION	0.0024656591070513247	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999958302126558	WITHOUT_CLASSIFICATION	4.169787344188771E-6	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999611925748	WITHOUT_CLASSIFICATION	3.880742525338206E-8	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999964553173916	WITHOUT_CLASSIFICATION	3.5446826084141846E-5	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.999870335258381	WITHOUT_CLASSIFICATION	1.2966474161896148E-4	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.999993610465618	WITHOUT_CLASSIFICATION	6.389534381982599E-6	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999542970136134	WITHOUT_CLASSIFICATION	4.5702986386597915E-4	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999805202517726	WITHOUT_CLASSIFICATION	1.9479748227312554E-5	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999889379761349	WITHOUT_CLASSIFICATION	1.1062023865058786E-5	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999936191604089	WITHOUT_CLASSIFICATION	6.380839591130467E-6	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.99990560219292	WITHOUT_CLASSIFICATION	9.43978070799464E-5	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999993473134855	WITHOUT_CLASSIFICATION	6.526865145620359E-7	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999313508292305	WITHOUT_CLASSIFICATION	6.864917076944322E-5	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998753676602307	WITHOUT_CLASSIFICATION	1.2463233976939828E-4	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9936898983903276	WITHOUT_CLASSIFICATION	0.0063101016096723805	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.999968457569271	WITHOUT_CLASSIFICATION	3.154243072889462E-5	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9993667320160107	WITHOUT_CLASSIFICATION	6.332679839893291E-4	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9997684061023306	WITHOUT_CLASSIFICATION	2.315938976693217E-4	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998776504159057	WITHOUT_CLASSIFICATION	1.2234958409424333E-4	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998776504159057	WITHOUT_CLASSIFICATION	1.2234958409424333E-4	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999315993355739	WITHOUT_CLASSIFICATION	6.840066442618419E-5	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999315993355739	WITHOUT_CLASSIFICATION	6.840066442618419E-5	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.9990226620300476	WITHOUT_CLASSIFICATION	9.773379699523133E-4	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.99990560219292	WITHOUT_CLASSIFICATION	9.43978070799464E-5	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9991620088665669	WITHOUT_CLASSIFICATION	8.379911334331874E-4	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999921616137564	WITHOUT_CLASSIFICATION	7.838386243593411E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999467937924106	WITHOUT_CLASSIFICATION	5.32062075893714E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999467937924106	WITHOUT_CLASSIFICATION	5.32062075893714E-5	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999639671680701	WITHOUT_CLASSIFICATION	3.603283192984124E-5	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999593733187253	WITHOUT_CLASSIFICATION	4.0626681274716464E-5	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999947246093622	WITHOUT_CLASSIFICATION	5.275390637797178E-5	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.9999621008118921	WITHOUT_CLASSIFICATION	3.78991881078447E-5	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999974265876487	WITHOUT_CLASSIFICATION	2.5734123513246226E-6	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999976303554812	WITHOUT_CLASSIFICATION	2.369644518843923E-6	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999838905216955	WITHOUT_CLASSIFICATION	1.6109478304502678E-5	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9998716306556444	WITHOUT_CLASSIFICATION	1.2836934435566538E-4	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.9999507253662175	WITHOUT_CLASSIFICATION	4.927463378235616E-5	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999992776516573	WITHOUT_CLASSIFICATION	7.223483426447423E-7	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.9999202236621534	WITHOUT_CLASSIFICATION	7.977633784659898E-5	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.999895574455339	WITHOUT_CLASSIFICATION	1.044255446609544E-4	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999702864324109	WITHOUT_CLASSIFICATION	2.9713567589060324E-5	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9999669267004105	WITHOUT_CLASSIFICATION	3.307329958953999E-5	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9892814704796796	WITHOUT_CLASSIFICATION	0.01071852952032029	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999757146585808	WITHOUT_CLASSIFICATION	2.4285341419188878E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999304258705087	WITHOUT_CLASSIFICATION	6.957412949135665E-5	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9993215858789594	WITHOUT_CLASSIFICATION	6.784141210406965E-4	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9818618345614234	WITHOUT_CLASSIFICATION	0.018138165438576524	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999998028011979	WITHOUT_CLASSIFICATION	1.9719880211872553E-7	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9979509000275745	WITHOUT_CLASSIFICATION	0.0020490999724254856	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999933794085988	WITHOUT_CLASSIFICATION	6.620591401172591E-6	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9997465582483653	WITHOUT_CLASSIFICATION	2.5344175163462935E-4	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999993048103687	WITHOUT_CLASSIFICATION	6.951896312884844E-7	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999837462848137	WITHOUT_CLASSIFICATION	1.6253715186369618E-5	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999256204439333	WITHOUT_CLASSIFICATION	7.437955606671378E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999996559877135	WITHOUT_CLASSIFICATION	3.440122865633069E-7	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999832859153547	WITHOUT_CLASSIFICATION	1.6714084645331495E-5	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.999998752069779	WITHOUT_CLASSIFICATION	1.247930221072862E-6	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272234078183	WITHOUT_CLASSIFICATION	7.277659218167376E-5	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999232799956187	WITHOUT_CLASSIFICATION	7.672000438130395E-5	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999936656775372	WITHOUT_CLASSIFICATION	6.334322462670348E-6	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999936656775372	WITHOUT_CLASSIFICATION	6.334322462670348E-6	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999979128392316	WITHOUT_CLASSIFICATION	2.0871607684017277E-5	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9999277742800268	WITHOUT_CLASSIFICATION	7.222571997328765E-5	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999310331758746	WITHOUT_CLASSIFICATION	6.896682412543003E-5	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999310331758746	WITHOUT_CLASSIFICATION	6.896682412543003E-5	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997216557147239	WITHOUT_CLASSIFICATION	2.7834428527604484E-4	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999260952491428	WITHOUT_CLASSIFICATION	7.39047508572796E-5	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.9873490273651586	WITHOUT_CLASSIFICATION	0.012650972634841372	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999324326339203	WITHOUT_CLASSIFICATION	6.756736607980778E-5	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.999946030296653	WITHOUT_CLASSIFICATION	5.396970334711808E-5	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999991739983116	WITHOUT_CLASSIFICATION	8.260016884948554E-7	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999494601008996	WITHOUT_CLASSIFICATION	5.0539899100339575E-5	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999555536930682	WITHOUT_CLASSIFICATION	4.44463069318687E-5	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999555536930682	WITHOUT_CLASSIFICATION	4.44463069318687E-5	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9998046132633034	WITHOUT_CLASSIFICATION	1.953867366965968E-4	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999930007738179	WITHOUT_CLASSIFICATION	6.999226182079988E-6	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999930007738179	WITHOUT_CLASSIFICATION	6.999226182079988E-6	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999624557484078	WITHOUT_CLASSIFICATION	3.754425159222648E-5	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.999972069975095	WITHOUT_CLASSIFICATION	2.7930024904941165E-5	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.9999880707126478	WITHOUT_CLASSIFICATION	1.1929287352262902E-5	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999899236374044	WITHOUT_CLASSIFICATION	1.0076362595638356E-5	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999581953403929	WITHOUT_CLASSIFICATION	4.18046596072095E-5	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.999999562881132	WITHOUT_CLASSIFICATION	4.371188680621136E-7	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999967259685543	WITHOUT_CLASSIFICATION	3.274031445728494E-6	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999749011798926	WITHOUT_CLASSIFICATION	2.5098820107380358E-5	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.999134378275998	WITHOUT_CLASSIFICATION	8.656217240020019E-4	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.999734213272156	WITHOUT_CLASSIFICATION	2.6578672784405364E-4	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9841967099128002	WITHOUT_CLASSIFICATION	0.01580329008719983	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999442431866448	WITHOUT_CLASSIFICATION	5.575681335529195E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999442431866448	WITHOUT_CLASSIFICATION	5.575681335529195E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999442431866448	WITHOUT_CLASSIFICATION	5.575681335529195E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999442431866448	WITHOUT_CLASSIFICATION	5.575681335529195E-5	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999972701993303	WITHOUT_CLASSIFICATION	2.7298006696989536E-5	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9997849146263718	WITHOUT_CLASSIFICATION	2.1508537362822664E-4	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.999983703284519	WITHOUT_CLASSIFICATION	1.6296715481047365E-5	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998859266289836	WITHOUT_CLASSIFICATION	1.1407337101635272E-4	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9999193594497758	WITHOUT_CLASSIFICATION	8.064055022422258E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999920054389487	WITHOUT_CLASSIFICATION	7.994561051302695E-5	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998243546379603	WITHOUT_CLASSIFICATION	1.7564536203965684E-4	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9998959661467822	WITHOUT_CLASSIFICATION	1.0403385321778166E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999920054389487	WITHOUT_CLASSIFICATION	7.994561051302695E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999920054389487	WITHOUT_CLASSIFICATION	7.994561051302695E-5	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999586608456811	WITHOUT_CLASSIFICATION	4.1339154319046614E-5	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.9981207106231635	WITHOUT_CLASSIFICATION	0.001879289376836475	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.9998884687944158	WITHOUT_CLASSIFICATION	1.1153120558420922E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999848315029595	WITHOUT_CLASSIFICATION	1.516849704038776E-5	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999999635536944	WITHOUT_CLASSIFICATION	3.6446305757901936E-8	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.6590932864911311	IMPLEMENTATION	0.3409067135088688	WITHOUT_CLASSIFICATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999592650752721	WITHOUT_CLASSIFICATION	4.0734924727956514E-5	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999848315029595	WITHOUT_CLASSIFICATION	1.516849704038776E-5	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.8440046076945527	WITHOUT_CLASSIFICATION	0.15599539230544732	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998604439450631	WITHOUT_CLASSIFICATION	1.3955605493686413E-4	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999998491104511	WITHOUT_CLASSIFICATION	1.5088954889664837E-6	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999856216733862	WITHOUT_CLASSIFICATION	1.4378326613824111E-5	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999810907892364	WITHOUT_CLASSIFICATION	1.890921076364633E-5	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9990815599393027	WITHOUT_CLASSIFICATION	9.184400606974298E-4	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999937716928492	WITHOUT_CLASSIFICATION	6.228307150703384E-6	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999938018847395	WITHOUT_CLASSIFICATION	6.198115260438283E-6	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958281499709	WITHOUT_CLASSIFICATION	4.171850029010359E-6	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999972799917567	WITHOUT_CLASSIFICATION	2.7200082433742274E-6	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958281499709	WITHOUT_CLASSIFICATION	4.171850029010359E-6	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999957588181917	WITHOUT_CLASSIFICATION	4.2411818083877355E-6	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998673508797223	WITHOUT_CLASSIFICATION	1.3264912027760462E-4	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.7554434236240978	WITHOUT_CLASSIFICATION	0.2445565763759023	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999735292395052	WITHOUT_CLASSIFICATION	2.6470760494767738E-5	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999148222357389	WITHOUT_CLASSIFICATION	8.517776426104764E-5	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999989695572092	WITHOUT_CLASSIFICATION	1.0304427908081333E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999547690218171	WITHOUT_CLASSIFICATION	4.5230978182940944E-5	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999903998060823	WITHOUT_CLASSIFICATION	9.600193917717776E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999547690218171	WITHOUT_CLASSIFICATION	4.5230978182940944E-5	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999652452819637	WITHOUT_CLASSIFICATION	3.4754718036276744E-5	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999874536406609	WITHOUT_CLASSIFICATION	1.2546359339016243E-5	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999754549634406	WITHOUT_CLASSIFICATION	2.454503655930402E-5	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999696737957413	WITHOUT_CLASSIFICATION	3.032620425874023E-5	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999524334305008	WITHOUT_CLASSIFICATION	4.75665694992157E-5	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.999864872203081	WITHOUT_CLASSIFICATION	1.351277969191035E-4	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999993788179344	WITHOUT_CLASSIFICATION	6.211820656128888E-7	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999989695572092	WITHOUT_CLASSIFICATION	1.0304427908081333E-6	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999903998060823	WITHOUT_CLASSIFICATION	9.600193917717776E-6	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999652452819637	WITHOUT_CLASSIFICATION	3.4754718036276744E-5	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9996948540087693	WITHOUT_CLASSIFICATION	3.0514599123066747E-4	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.9999562237239568	WITHOUT_CLASSIFICATION	4.3776276043192586E-5	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.9998932537886163	WITHOUT_CLASSIFICATION	1.067462113837655E-4	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999997288047371	WITHOUT_CLASSIFICATION	2.711952628424167E-7	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.9997567067999192	WITHOUT_CLASSIFICATION	2.4329320008073348E-4	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9993568003955764	WITHOUT_CLASSIFICATION	6.43199604423564E-4	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999579546215291	WITHOUT_CLASSIFICATION	4.2045378470753884E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999304258705087	WITHOUT_CLASSIFICATION	6.957412949135665E-5	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999874536406609	WITHOUT_CLASSIFICATION	1.2546359339016243E-5	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9673520292566765	WITHOUT_CLASSIFICATION	0.03264797074332338	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999475900682461	WITHOUT_CLASSIFICATION	5.240993175397335E-5	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9968063195512504	WITHOUT_CLASSIFICATION	0.0031936804487494343	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999797234795802	WITHOUT_CLASSIFICATION	2.0276520419795105E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999304258705087	WITHOUT_CLASSIFICATION	6.957412949135665E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999790034519357	WITHOUT_CLASSIFICATION	2.0996548064327408E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999304258705087	WITHOUT_CLASSIFICATION	6.957412949135665E-5	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999697996506982	WITHOUT_CLASSIFICATION	3.020034930178911E-5	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998538089096349	WITHOUT_CLASSIFICATION	1.4619109036500405E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998087791896043	WITHOUT_CLASSIFICATION	1.9122081039560918E-4	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9995406333960809	WITHOUT_CLASSIFICATION	4.593666039190688E-4	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999680909796865	WITHOUT_CLASSIFICATION	3.190902031347504E-5	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.9999689032600753	WITHOUT_CLASSIFICATION	3.109673992485017E-5	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998359110901155	WITHOUT_CLASSIFICATION	1.6408890988459592E-4	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999964958431772	WITHOUT_CLASSIFICATION	3.5041568228271833E-6	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999560945399134	WITHOUT_CLASSIFICATION	4.390546008650298E-5	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.9999910329794487	WITHOUT_CLASSIFICATION	8.967020551277137E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999783069873571	WITHOUT_CLASSIFICATION	2.169301264293452E-5	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999895296408351	WITHOUT_CLASSIFICATION	1.0470359164880472E-5	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9994767649853691	WITHOUT_CLASSIFICATION	5.232350146308958E-4	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999494236091203	WITHOUT_CLASSIFICATION	5.057639087969056E-5	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999911661316913	WITHOUT_CLASSIFICATION	8.833868308729433E-6	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999840224825892	WITHOUT_CLASSIFICATION	1.597751741079585E-5	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999969899620568	WITHOUT_CLASSIFICATION	3.0100379432438647E-6	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.999994863889915	WITHOUT_CLASSIFICATION	5.136110085030668E-6	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999999573647096	WITHOUT_CLASSIFICATION	4.2635290404626817E-7	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999894147166903	WITHOUT_CLASSIFICATION	1.0585283309686245E-5	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999522377229355	WITHOUT_CLASSIFICATION	4.7762277064474615E-5	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999522377229355	WITHOUT_CLASSIFICATION	4.7762277064474615E-5	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999880042723998	WITHOUT_CLASSIFICATION	1.1995727600280095E-5	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999925377648009	WITHOUT_CLASSIFICATION	7.462235199172533E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999441100892585	WITHOUT_CLASSIFICATION	5.5889910741450706E-5	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999998201693439	WITHOUT_CLASSIFICATION	1.7983065605760757E-7	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9996590471578932	WITHOUT_CLASSIFICATION	3.4095284210685186E-4	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999082799813853	WITHOUT_CLASSIFICATION	9.172001861466935E-5	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999517706910545	WITHOUT_CLASSIFICATION	4.822930894550794E-5	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999993445002341	WITHOUT_CLASSIFICATION	6.554997659702903E-7	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.8962334479917202	WITHOUT_CLASSIFICATION	0.1037665520082798	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999825523947738	WITHOUT_CLASSIFICATION	1.7447605226156915E-5	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999484492635689	WITHOUT_CLASSIFICATION	5.1550736431219675E-5	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.9997747597543036	WITHOUT_CLASSIFICATION	2.2524024569643561E-4	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998907256618461	WITHOUT_CLASSIFICATION	1.092743381538878E-4	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999311355186216	WITHOUT_CLASSIFICATION	6.886448137841176E-5	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999417746201487	WITHOUT_CLASSIFICATION	5.8225379851300024E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999800392048208	WITHOUT_CLASSIFICATION	1.9960795179138344E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999821109685044	WITHOUT_CLASSIFICATION	1.7889031495673746E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999821109685044	WITHOUT_CLASSIFICATION	1.7889031495673746E-5	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999597390778353	WITHOUT_CLASSIFICATION	4.026092216474787E-5	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999964958431772	WITHOUT_CLASSIFICATION	3.5041568228271833E-6	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9933093047202473	WITHOUT_CLASSIFICATION	0.006690695279752771	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999862720751659	WITHOUT_CLASSIFICATION	1.3727924834137601E-5	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9995726369421676	WITHOUT_CLASSIFICATION	4.2736305783234253E-4	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999964986426677	WITHOUT_CLASSIFICATION	3.5013573322586193E-6	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.9997771809988545	WITHOUT_CLASSIFICATION	2.2281900114543154E-4	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.999949435326037	WITHOUT_CLASSIFICATION	5.056467396302613E-5	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9996059898233008	WITHOUT_CLASSIFICATION	3.940101766991503E-4	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997936362313564	WITHOUT_CLASSIFICATION	2.063637686435979E-4	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.9999709647429055	WITHOUT_CLASSIFICATION	2.903525709460472E-5	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999997682323628	WITHOUT_CLASSIFICATION	2.3176763714308032E-7	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999167693117	WITHOUT_CLASSIFICATION	8.323068834642988E-8	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999997057353637	WITHOUT_CLASSIFICATION	2.9426463629858957E-7	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9991913197304768	WITHOUT_CLASSIFICATION	8.086802695231421E-4	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999365761476039	WITHOUT_CLASSIFICATION	6.342385239608172E-5	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999929183939393	WITHOUT_CLASSIFICATION	7.081606060609163E-6	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999871919562907	WITHOUT_CLASSIFICATION	1.2808043709341332E-5	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9997518542411747	WITHOUT_CLASSIFICATION	2.4814575882536107E-4	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9998266253759741	WITHOUT_CLASSIFICATION	1.7337462402582297E-4	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999638657457541	WITHOUT_CLASSIFICATION	3.613425424582475E-5	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999906570932118	WITHOUT_CLASSIFICATION	9.342906788177378E-6	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9993539755431645	WITHOUT_CLASSIFICATION	6.460244568355731E-4	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.999883293211401	WITHOUT_CLASSIFICATION	1.1670678859900397E-4	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999996087385796	WITHOUT_CLASSIFICATION	3.912614204354083E-7	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999994456618808	WITHOUT_CLASSIFICATION	5.543381191631801E-7	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999662652323628	WITHOUT_CLASSIFICATION	3.373476763719162E-5	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9095025053814934	WITHOUT_CLASSIFICATION	0.0904974946185066	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9997471661973459	WITHOUT_CLASSIFICATION	2.528338026540573E-4	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9997748403604533	WITHOUT_CLASSIFICATION	2.251596395467764E-4	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999237848367258	WITHOUT_CLASSIFICATION	7.621516327417153E-5	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999255353007316	WITHOUT_CLASSIFICATION	7.446469926834922E-5	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999791841899269	WITHOUT_CLASSIFICATION	2.081581007310739E-5	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999698782705999	WITHOUT_CLASSIFICATION	3.0121729400047545E-5	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999844220006732	WITHOUT_CLASSIFICATION	1.557799932679132E-5	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9998757888403563	WITHOUT_CLASSIFICATION	1.24211159643597E-4	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999769149648349	WITHOUT_CLASSIFICATION	2.3085035165083742E-5	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999616723899478	WITHOUT_CLASSIFICATION	3.8327610052040454E-5	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997256497096666	WITHOUT_CLASSIFICATION	2.7435029033334946E-4	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997256497096666	WITHOUT_CLASSIFICATION	2.7435029033334946E-4	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9998889575410135	WITHOUT_CLASSIFICATION	1.110424589865521E-4	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999705032850168	WITHOUT_CLASSIFICATION	2.949671498312072E-5	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999984806618455	WITHOUT_CLASSIFICATION	1.5193381544227983E-6	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999984806618455	WITHOUT_CLASSIFICATION	1.5193381544227983E-6	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.9999698335362129	WITHOUT_CLASSIFICATION	3.0166463787080388E-5	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999833691861892	WITHOUT_CLASSIFICATION	1.66308138107589E-5	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9998696974942143	WITHOUT_CLASSIFICATION	1.303025057857027E-4	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999921104180283	WITHOUT_CLASSIFICATION	7.889581971662402E-6	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999496173295006	WITHOUT_CLASSIFICATION	5.038267049937091E-5	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999335672163178	WITHOUT_CLASSIFICATION	6.643278368224226E-5	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.999994860463454	WITHOUT_CLASSIFICATION	5.139536546078282E-6	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.999994860463454	WITHOUT_CLASSIFICATION	5.139536546078282E-6	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999335672163178	WITHOUT_CLASSIFICATION	6.643278368224226E-5	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999358553075379	WITHOUT_CLASSIFICATION	6.414469246213055E-5	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.999937227724371	WITHOUT_CLASSIFICATION	6.27722756289332E-5	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.999934613141127	WITHOUT_CLASSIFICATION	6.538685887311214E-5	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.999934613141127	WITHOUT_CLASSIFICATION	6.538685887311214E-5	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.9999719098971905	WITHOUT_CLASSIFICATION	2.809010280942245E-5	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999944940008539	WITHOUT_CLASSIFICATION	5.505999146117304E-5	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9995809333973938	WITHOUT_CLASSIFICATION	4.1906660260619303E-4	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9999824139575607	WITHOUT_CLASSIFICATION	1.7586042439272478E-5	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999992569911633	WITHOUT_CLASSIFICATION	7.430088367739614E-7	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999432033316923	WITHOUT_CLASSIFICATION	5.679666830772813E-5	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999876526498712	WITHOUT_CLASSIFICATION	1.2347350128780961E-5	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.9998777932863776	WITHOUT_CLASSIFICATION	1.2220671362233267E-4	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.999975678515738	WITHOUT_CLASSIFICATION	2.4321484262076467E-5	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999985866685215	WITHOUT_CLASSIFICATION	1.4133314784181833E-6	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999802159676697	WITHOUT_CLASSIFICATION	1.9784032330260003E-5	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9584562315356496	WITHOUT_CLASSIFICATION	0.04154376846435031	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.9348443595530828	WITHOUT_CLASSIFICATION	0.06515564044691735	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.99999920762567	WITHOUT_CLASSIFICATION	7.923743300219904E-7	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.9999443339658117	WITHOUT_CLASSIFICATION	5.566603418833324E-5	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999937413534921	WITHOUT_CLASSIFICATION	6.258646507864194E-6	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999438635496617	WITHOUT_CLASSIFICATION	5.6136450338414264E-5	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9648259240101724	WITHOUT_CLASSIFICATION	0.03517407598982752	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9971702425262754	WITHOUT_CLASSIFICATION	0.002829757473724594	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9992833787137194	WITHOUT_CLASSIFICATION	7.166212862805558E-4	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9986183350754169	WITHOUT_CLASSIFICATION	0.0013816649245832497	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9998480610725778	WITHOUT_CLASSIFICATION	1.5193892742227668E-4	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9989807286793533	WITHOUT_CLASSIFICATION	0.0010192713206467045	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999925671143651	WITHOUT_CLASSIFICATION	7.432885634962709E-6	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.9999914186010196	WITHOUT_CLASSIFICATION	8.581398980357355E-6	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999806838207992	WITHOUT_CLASSIFICATION	1.931617920080479E-5	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9997154125020382	WITHOUT_CLASSIFICATION	2.845874979617779E-4	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999987838409365	WITHOUT_CLASSIFICATION	1.2161590634561168E-6	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999921813203281	WITHOUT_CLASSIFICATION	7.81867967190037E-6	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999467044408222	WITHOUT_CLASSIFICATION	5.3295559177816325E-5	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999592235487758	WITHOUT_CLASSIFICATION	4.077645122432447E-5	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999668138712932	WITHOUT_CLASSIFICATION	3.318612870682352E-5	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999358752638153	WITHOUT_CLASSIFICATION	6.412473618469697E-5	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.999924285051288	WITHOUT_CLASSIFICATION	7.571494871192937E-5	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999458279257581	WITHOUT_CLASSIFICATION	5.417207424186308E-5	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999622693354238	WITHOUT_CLASSIFICATION	3.773066457627286E-5	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999966470651009	WITHOUT_CLASSIFICATION	3.3529348990511606E-6	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999888745354378	WITHOUT_CLASSIFICATION	1.1125464562174183E-5	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999786600154525	WITHOUT_CLASSIFICATION	2.1339984547489295E-5	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.9999522512354618	WITHOUT_CLASSIFICATION	4.774876453806796E-5	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.999968308529817	WITHOUT_CLASSIFICATION	3.169147018291417E-5	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9999684878667466	WITHOUT_CLASSIFICATION	3.151213325326571E-5	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.999938437704607	WITHOUT_CLASSIFICATION	6.156229539294417E-5	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.9999795042389403	WITHOUT_CLASSIFICATION	2.049576105966846E-5	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999496192852633	WITHOUT_CLASSIFICATION	5.0380714736668974E-5	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9930406722097546	WITHOUT_CLASSIFICATION	0.0069593277902455	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9997863073177662	WITHOUT_CLASSIFICATION	2.136926822338795E-4	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999422321544755	WITHOUT_CLASSIFICATION	5.77678455244692E-5	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9996558150131422	WITHOUT_CLASSIFICATION	3.4418498685789936E-4	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.7114982574743581	IMPLEMENTATION	0.2885017425256418	WITHOUT_CLASSIFICATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9984465373330118	WITHOUT_CLASSIFICATION	0.001553462666988156	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999839967852236	WITHOUT_CLASSIFICATION	1.6003214776349912E-5	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999874920204784	WITHOUT_CLASSIFICATION	1.2507979521631578E-5	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999863802154448	WITHOUT_CLASSIFICATION	1.361978455522304E-5	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999701857552449	WITHOUT_CLASSIFICATION	2.9814244755095534E-5	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9998818399793304	WITHOUT_CLASSIFICATION	1.1816002066957236E-4	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999998873914412	WITHOUT_CLASSIFICATION	1.1260855880486195E-7	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9995579457007829	WITHOUT_CLASSIFICATION	4.4205429921705147E-4	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9995579457007829	WITHOUT_CLASSIFICATION	4.4205429921705147E-4	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999993865992	WITHOUT_CLASSIFICATION	6.134007528094555E-10	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9997177085030056	WITHOUT_CLASSIFICATION	2.82291496994371E-4	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999992409506413	WITHOUT_CLASSIFICATION	7.590493585897572E-7	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999916344300196	WITHOUT_CLASSIFICATION	8.36556998043509E-6	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999775917480094	WITHOUT_CLASSIFICATION	2.240825199056498E-5	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999863832107491	WITHOUT_CLASSIFICATION	1.3616789250911964E-5	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999825496085091	WITHOUT_CLASSIFICATION	1.7450391490882712E-5	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999349133476	WITHOUT_CLASSIFICATION	6.508665240127847E-8	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999947185240503	WITHOUT_CLASSIFICATION	5.2814759495913764E-6	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999978785877054	WITHOUT_CLASSIFICATION	2.1214122945487927E-6	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.99993732652205	WITHOUT_CLASSIFICATION	6.267347794990188E-5	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9992732760817682	WITHOUT_CLASSIFICATION	7.267239182317593E-4	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999852946907	WITHOUT_CLASSIFICATION	1.470530929715114E-7	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.999954998911747	WITHOUT_CLASSIFICATION	4.500108825293113E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999953553829553	WITHOUT_CLASSIFICATION	4.644617044747802E-6	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999953553829553	WITHOUT_CLASSIFICATION	4.644617044747802E-6	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999971436776846	WITHOUT_CLASSIFICATION	2.8563223154737432E-6	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.99994247780074	WITHOUT_CLASSIFICATION	5.75221992599899E-5	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999858737717932	WITHOUT_CLASSIFICATION	1.412622820678855E-5	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.999997730005473	WITHOUT_CLASSIFICATION	2.2699945270530302E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999674388927172	WITHOUT_CLASSIFICATION	3.2561107282899174E-5	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999533427586577	WITHOUT_CLASSIFICATION	4.665724134245888E-5	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9998576802243787	WITHOUT_CLASSIFICATION	1.4231977562125287E-4	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.9999929900944661	WITHOUT_CLASSIFICATION	7.009905533842266E-6	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999936070396551	WITHOUT_CLASSIFICATION	6.392960344905338E-6	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9998353007225116	WITHOUT_CLASSIFICATION	1.6469927748836717E-4	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9992284574015488	WITHOUT_CLASSIFICATION	7.715425984512736E-4	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9973745285136648	WITHOUT_CLASSIFICATION	0.0026254714863351947	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999330542311236	WITHOUT_CLASSIFICATION	6.694576887641442E-5	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999955740144083	WITHOUT_CLASSIFICATION	4.425985591712074E-6	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9995250849917813	WITHOUT_CLASSIFICATION	4.7491500821878987E-4	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9998719014254067	WITHOUT_CLASSIFICATION	1.2809857459333108E-4	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999764270552575	WITHOUT_CLASSIFICATION	2.3572944742492985E-4	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999982122330318	WITHOUT_CLASSIFICATION	1.7877669682665683E-6	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999991276862313	WITHOUT_CLASSIFICATION	8.723137686470227E-7	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999895264163278	WITHOUT_CLASSIFICATION	1.0473583672294737E-5	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999985532938581	WITHOUT_CLASSIFICATION	1.4467061418951084E-6	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999986371004901	WITHOUT_CLASSIFICATION	1.3628995099414089E-6	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.99999973871283	WITHOUT_CLASSIFICATION	2.612871700383708E-7	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999990300012768	WITHOUT_CLASSIFICATION	9.699987232485999E-7	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999916220723646	WITHOUT_CLASSIFICATION	8.377927635493154E-6	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.9999358668374776	WITHOUT_CLASSIFICATION	6.413316252233297E-5	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999977345851758	WITHOUT_CLASSIFICATION	2.2654148242004098E-5	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.998995067372364	WITHOUT_CLASSIFICATION	0.001004932627636066	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9998022895914234	WITHOUT_CLASSIFICATION	1.9771040857661634E-4	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9995328028257935	WITHOUT_CLASSIFICATION	4.67197174206483E-4	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9998917085503081	WITHOUT_CLASSIFICATION	1.08291449691996E-4	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999989473237523	WITHOUT_CLASSIFICATION	1.0526762477235682E-6	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999951751068397	WITHOUT_CLASSIFICATION	4.8248931604047555E-6	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999952571247895	WITHOUT_CLASSIFICATION	4.742875210568032E-6	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999870442179274	WITHOUT_CLASSIFICATION	1.2955782072663199E-5	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9939684564898214	WITHOUT_CLASSIFICATION	0.006031543510178732	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9914278269673361	WITHOUT_CLASSIFICATION	0.008572173032663897	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9991922245367976	WITHOUT_CLASSIFICATION	8.077754632023585E-4	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999880747168896	WITHOUT_CLASSIFICATION	1.1925283110429545E-5	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999993981293964	WITHOUT_CLASSIFICATION	6.018706036055383E-7	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.980877131360439	WITHOUT_CLASSIFICATION	0.019122868639561065	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999535491937	WITHOUT_CLASSIFICATION	4.645080626868643E-8	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999629355934144	WITHOUT_CLASSIFICATION	3.7064406585595973E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999629355934144	WITHOUT_CLASSIFICATION	3.7064406585595973E-4	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999988121156351	WITHOUT_CLASSIFICATION	1.1878843648586758E-6	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999746049616031	WITHOUT_CLASSIFICATION	2.5395038396820405E-5	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.999657370999866	WITHOUT_CLASSIFICATION	3.426290001340075E-4	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999888426576354	WITHOUT_CLASSIFICATION	1.1157342364566933E-5	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9812218011190202	WITHOUT_CLASSIFICATION	0.018778198880979768	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999993388859557	WITHOUT_CLASSIFICATION	6.61114044284481E-7	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999858984194034	WITHOUT_CLASSIFICATION	1.4101580596590452E-5	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9997966334679926	WITHOUT_CLASSIFICATION	2.033665320074752E-4	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999932719816498	WITHOUT_CLASSIFICATION	6.72801835028498E-6	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997634150195732	WITHOUT_CLASSIFICATION	2.3658498042671504E-4	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997634150195732	WITHOUT_CLASSIFICATION	2.3658498042671504E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999818466007587	WITHOUT_CLASSIFICATION	1.8153399241252743E-5	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999606377027	WITHOUT_CLASSIFICATION	3.9362297375245446E-8	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999988407053012	WITHOUT_CLASSIFICATION	1.159294698771708E-6	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9893692013850369	WITHOUT_CLASSIFICATION	0.010630798614963114	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999834121008593	WITHOUT_CLASSIFICATION	1.6587899140669687E-5	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999876704796679	WITHOUT_CLASSIFICATION	1.2329520332208803E-5	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999972862675109	WITHOUT_CLASSIFICATION	2.7137324890287766E-6	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999075554099969	WITHOUT_CLASSIFICATION	9.244459000312875E-5	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999710996309631	WITHOUT_CLASSIFICATION	2.8900369036829352E-5	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999805455321134	WITHOUT_CLASSIFICATION	1.9454467886753654E-5	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999992411922479	WITHOUT_CLASSIFICATION	7.588077519954856E-7	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.999163945556576	WITHOUT_CLASSIFICATION	8.360544434240257E-4	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9997274024278551	WITHOUT_CLASSIFICATION	2.7259757214494884E-4	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999652958318755	WITHOUT_CLASSIFICATION	3.470416812441836E-5	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999893992226432	WITHOUT_CLASSIFICATION	1.060077735677013E-5	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9998845899104524	WITHOUT_CLASSIFICATION	1.1541008954762591E-4	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9997214887124066	WITHOUT_CLASSIFICATION	2.7851128759330855E-4	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9998912462753321	WITHOUT_CLASSIFICATION	1.0875372466785049E-4	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9962491105803635	WITHOUT_CLASSIFICATION	0.003750889419636597	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.999937000412569	WITHOUT_CLASSIFICATION	6.29995874308912E-5	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9992503840198207	WITHOUT_CLASSIFICATION	7.496159801793804E-4	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999995302171744	WITHOUT_CLASSIFICATION	4.6978282573983716E-7	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999993016620783	WITHOUT_CLASSIFICATION	6.983379217742681E-7	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999687808981101	WITHOUT_CLASSIFICATION	3.1219101889831655E-5	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999891782657	WITHOUT_CLASSIFICATION	1.0821734199444206E-8	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999678560720966	WITHOUT_CLASSIFICATION	3.214392790335739E-5	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999984180386536	WITHOUT_CLASSIFICATION	1.581961346293863E-6	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999270095671179	WITHOUT_CLASSIFICATION	7.29904328821019E-5	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999958928684086	WITHOUT_CLASSIFICATION	4.107131591361056E-6	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999481065643027	WITHOUT_CLASSIFICATION	5.1893435697279924E-5	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999943552047675	WITHOUT_CLASSIFICATION	5.644795232391633E-6	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999633735405766	WITHOUT_CLASSIFICATION	3.662645942334515E-5	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999992909151747	WITHOUT_CLASSIFICATION	7.090848252790074E-7	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999835758101129	WITHOUT_CLASSIFICATION	1.6424189887053517E-5	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999442452642484	WITHOUT_CLASSIFICATION	5.575473575155276E-5	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999594562815061	WITHOUT_CLASSIFICATION	4.054371849384685E-5	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9903205430095984	WITHOUT_CLASSIFICATION	0.009679456990401623	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999996287868748	WITHOUT_CLASSIFICATION	3.7121312524654885E-7	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999852946907	WITHOUT_CLASSIFICATION	1.470530929715114E-7	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.99998660748879	WITHOUT_CLASSIFICATION	1.3392511210066113E-5	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999995831147686	WITHOUT_CLASSIFICATION	4.168852314323999E-7	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9980424447169565	WITHOUT_CLASSIFICATION	0.0019575552830435996	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999167824223	WITHOUT_CLASSIFICATION	8.321757779735952E-8	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999122247913	WITHOUT_CLASSIFICATION	8.777520858555317E-8	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9998054243967041	WITHOUT_CLASSIFICATION	1.945756032959257E-4	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.999730054393603	WITHOUT_CLASSIFICATION	2.6994560639705367E-4	IMPLEMENTATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9275094253472195	WITHOUT_CLASSIFICATION	0.07249057465278055	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999451026948	WITHOUT_CLASSIFICATION	5.489730520952037E-7	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.997996743396235	WITHOUT_CLASSIFICATION	0.0020032566037649245	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999991000502668	WITHOUT_CLASSIFICATION	8.999497332674114E-7	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9998021826080269	WITHOUT_CLASSIFICATION	1.978173919729677E-4	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9992289924413431	WITHOUT_CLASSIFICATION	7.710075586568734E-4	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999914905148289	WITHOUT_CLASSIFICATION	8.509485171082542E-6	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9809451990068805	WITHOUT_CLASSIFICATION	0.019054800993119486	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684420023842	WITHOUT_CLASSIFICATION	3.155799761580035E-5	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999864872203081	WITHOUT_CLASSIFICATION	1.351277969191035E-4	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999819903030145	WITHOUT_CLASSIFICATION	1.800969698550414E-5	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9972269534489516	WITHOUT_CLASSIFICATION	0.0027730465510483896	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999820471088576	WITHOUT_CLASSIFICATION	1.7952891142355868E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684420023842	WITHOUT_CLASSIFICATION	3.155799761580035E-5	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.5046061206567868	IMPLEMENTATION	0.4953938793432133	WITHOUT_CLASSIFICATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9986560037247307	WITHOUT_CLASSIFICATION	0.0013439962752693584	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9997895897108106	WITHOUT_CLASSIFICATION	2.1041028918931766E-4	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9979598246426843	WITHOUT_CLASSIFICATION	0.0020401753573157685	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999481523847935	WITHOUT_CLASSIFICATION	5.184761520647499E-5	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998775865095678	WITHOUT_CLASSIFICATION	1.2241349043222135E-4	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999988130779017	WITHOUT_CLASSIFICATION	1.1869220982737559E-6	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9857483871873212	WITHOUT_CLASSIFICATION	0.014251612812678794	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999980962579239	WITHOUT_CLASSIFICATION	1.9037420760814158E-6	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9981573978079533	WITHOUT_CLASSIFICATION	0.0018426021920466464	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9997636653412018	WITHOUT_CLASSIFICATION	2.3633465879836798E-4	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9855105958655745	WITHOUT_CLASSIFICATION	0.014489404134425414	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999934364065395	WITHOUT_CLASSIFICATION	6.563593460480989E-6	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9704713761909431	WITHOUT_CLASSIFICATION	0.029528623809056822	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9998952484610099	WITHOUT_CLASSIFICATION	1.047515389902136E-4	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9998704001147134	WITHOUT_CLASSIFICATION	1.2959988528666105E-4	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9993539755431645	WITHOUT_CLASSIFICATION	6.460244568355731E-4	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999970165460286	WITHOUT_CLASSIFICATION	2.9834539714703954E-6	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.999996355742562	WITHOUT_CLASSIFICATION	3.6442574381217986E-6	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9988521980880815	WITHOUT_CLASSIFICATION	0.0011478019119185118	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9983677414692705	WITHOUT_CLASSIFICATION	0.0016322585307295546	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9988474209418833	WITHOUT_CLASSIFICATION	0.0011525790581166449	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999763438749023	WITHOUT_CLASSIFICATION	2.3656125097646836E-5	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9995011881590884	WITHOUT_CLASSIFICATION	4.988118409115586E-4	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999991240812	WITHOUT_CLASSIFICATION	8.75918723383814E-10	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.999995992569643	WITHOUT_CLASSIFICATION	4.0074303569282435E-6	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999926776450663	WITHOUT_CLASSIFICATION	7.322354933606542E-6	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9919919399157161	WITHOUT_CLASSIFICATION	0.008008060084283921	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999533808259394	WITHOUT_CLASSIFICATION	4.661917406054578E-5	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9924982527767918	WITHOUT_CLASSIFICATION	0.007501747223208198	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9998035373548214	WITHOUT_CLASSIFICATION	1.9646264517868015E-4	IMPLEMENTATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999662965340047	WITHOUT_CLASSIFICATION	3.370346599537582E-5	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999720186557968	WITHOUT_CLASSIFICATION	2.7981344203279528E-5	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999781493651171	WITHOUT_CLASSIFICATION	2.1850634882873293E-5	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999974980938658	WITHOUT_CLASSIFICATION	2.501906134195263E-6	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999996799123774	WITHOUT_CLASSIFICATION	3.2008762269465744E-7	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999263096491	WITHOUT_CLASSIFICATION	7.369035088382428E-8	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999998467151233	WITHOUT_CLASSIFICATION	1.532848766671357E-7	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9996051363054719	WITHOUT_CLASSIFICATION	3.948636945280994E-4	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999336022975582	WITHOUT_CLASSIFICATION	6.639770244173482E-5	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9997653279052714	WITHOUT_CLASSIFICATION	2.3467209472856354E-4	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999897236587153	WITHOUT_CLASSIFICATION	1.027634128471304E-5	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999897236587153	WITHOUT_CLASSIFICATION	1.027634128471304E-5	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999804203756595	WITHOUT_CLASSIFICATION	1.9579624340524152E-5	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999989207143095	WITHOUT_CLASSIFICATION	1.079285690474809E-6	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999580553417792	WITHOUT_CLASSIFICATION	4.194465822091974E-5	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999973737561292	WITHOUT_CLASSIFICATION	2.6262438708351534E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999324326339203	WITHOUT_CLASSIFICATION	6.756736607980778E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999324326339203	WITHOUT_CLASSIFICATION	6.756736607980778E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999613453678946	WITHOUT_CLASSIFICATION	3.865463210552755E-5	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.999983489656514	WITHOUT_CLASSIFICATION	1.6510343486015838E-5	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9996900358481003	WITHOUT_CLASSIFICATION	3.09964151899597E-4	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998762956230742	WITHOUT_CLASSIFICATION	1.237043769256586E-4	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.999864872203081	WITHOUT_CLASSIFICATION	1.351277969191035E-4	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9989842787910199	WITHOUT_CLASSIFICATION	0.0010157212089800592	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.8782207499267011	WITHOUT_CLASSIFICATION	0.12177925007329894	IMPLEMENTATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999556687531681	WITHOUT_CLASSIFICATION	4.4331246831861285E-5	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9998502398992444	WITHOUT_CLASSIFICATION	1.4976010075575015E-4	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999507883015906	WITHOUT_CLASSIFICATION	4.921169840957103E-5	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999988271376347	WITHOUT_CLASSIFICATION	1.1728623653227937E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988154258724	WITHOUT_CLASSIFICATION	1.1845741275896811E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988154258724	WITHOUT_CLASSIFICATION	1.1845741275896811E-5	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9998704001147134	WITHOUT_CLASSIFICATION	1.2959988528666105E-4	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999440613080224	WITHOUT_CLASSIFICATION	5.593869197757396E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999481823179971	WITHOUT_CLASSIFICATION	5.1817682002802914E-5	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999611113078424	WITHOUT_CLASSIFICATION	3.888869215772365E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999834340156317	WITHOUT_CLASSIFICATION	1.656598436836513E-5	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995072167196	WITHOUT_CLASSIFICATION	4.927832804024411E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999995078877693	WITHOUT_CLASSIFICATION	4.921122307454369E-7	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999802080238286	WITHOUT_CLASSIFICATION	1.9791976171364805E-5	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9998595546968807	WITHOUT_CLASSIFICATION	1.4044530311930678E-4	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999927843072954	WITHOUT_CLASSIFICATION	7.2156927045869735E-6	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9981573978079533	WITHOUT_CLASSIFICATION	0.0018426021920466464	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999556088822614	WITHOUT_CLASSIFICATION	4.4391117738556476E-5	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999007819231545	WITHOUT_CLASSIFICATION	9.921807684560495E-5	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999992657005957	WITHOUT_CLASSIFICATION	7.3429940418412E-7	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.9999389415609437	WITHOUT_CLASSIFICATION	6.105843905634354E-5	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999333821443062	WITHOUT_CLASSIFICATION	6.661785569384452E-5	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999232186590655	WITHOUT_CLASSIFICATION	7.678134093453243E-5	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9998192730834888	WITHOUT_CLASSIFICATION	1.8072691651112622E-4	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9995117687505948	WITHOUT_CLASSIFICATION	4.882312494052451E-4	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9997050237183611	WITHOUT_CLASSIFICATION	2.949762816389562E-4	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9976506634096177	WITHOUT_CLASSIFICATION	0.00234933659038215	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9976506634096177	WITHOUT_CLASSIFICATION	0.00234933659038215	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999848315029595	WITHOUT_CLASSIFICATION	1.516849704038776E-5	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999910323762662	WITHOUT_CLASSIFICATION	8.967623733821383E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999920054389487	WITHOUT_CLASSIFICATION	7.994561051302695E-5	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999201344488218	WITHOUT_CLASSIFICATION	7.986555117825006E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999282807818641	WITHOUT_CLASSIFICATION	7.171921813583011E-5	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9997275864862967	WITHOUT_CLASSIFICATION	2.724135137033557E-4	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999735292395052	WITHOUT_CLASSIFICATION	2.6470760494767738E-5	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999999069379	WITHOUT_CLASSIFICATION	9.306204227111717E-11	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9996948540087693	WITHOUT_CLASSIFICATION	3.0514599123066747E-4	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999034504617186	WITHOUT_CLASSIFICATION	9.654953828141747E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999304258705087	WITHOUT_CLASSIFICATION	6.957412949135665E-5	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9998277054851887	WITHOUT_CLASSIFICATION	1.7229451481114017E-4	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999253194417447	WITHOUT_CLASSIFICATION	7.468055825537273E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999919116960663	WITHOUT_CLASSIFICATION	8.088303933608225E-6	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999956472785808	WITHOUT_CLASSIFICATION	4.352721419242762E-6	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999846028596947	WITHOUT_CLASSIFICATION	1.5397140305284127E-4	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999586024106829	WITHOUT_CLASSIFICATION	4.1397589317018596E-5	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999246547008617	WITHOUT_CLASSIFICATION	7.534529913836061E-5	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9977661568883534	WITHOUT_CLASSIFICATION	0.0022338431116466755	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999998985030035	WITHOUT_CLASSIFICATION	1.0149699646784178E-7	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999962332396478	WITHOUT_CLASSIFICATION	3.766760352190219E-6	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999965909818	WITHOUT_CLASSIFICATION	3.409018070576997E-9	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9995809333973938	WITHOUT_CLASSIFICATION	4.1906660260619303E-4	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999250232758	WITHOUT_CLASSIFICATION	7.497672417236957E-8	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999745919973295	WITHOUT_CLASSIFICATION	2.5408002670525728E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999745919973295	WITHOUT_CLASSIFICATION	2.5408002670525728E-5	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9985968754245078	WITHOUT_CLASSIFICATION	0.001403124575492133	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9898543420079083	WITHOUT_CLASSIFICATION	0.010145657992091611	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999930097079024	WITHOUT_CLASSIFICATION	6.99029209765432E-6	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999600650188836	WITHOUT_CLASSIFICATION	3.9934981116401955E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.999988767015945	WITHOUT_CLASSIFICATION	1.1232984055105887E-5	IMPLEMENTATION
