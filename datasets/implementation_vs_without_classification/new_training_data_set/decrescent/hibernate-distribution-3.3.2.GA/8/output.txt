todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.996989550981916	WITHOUT_CLASSIFICATION	0.003010449018084058	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.996989550981916	WITHOUT_CLASSIFICATION	0.003010449018084058	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.5092771080718032	IMPLEMENTATION	0.4907228919281969	WITHOUT_CLASSIFICATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.6749733915569784	WITHOUT_CLASSIFICATION	0.3250266084430215	IMPLEMENTATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.8547161804346117	WITHOUT_CLASSIFICATION	0.1452838195653883	IMPLEMENTATION
TODO: handle TypeDefs	IMPLEMENTATION	0.9306774464535122	IMPLEMENTATION	0.06932255354648775	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9963116490683145	WITHOUT_CLASSIFICATION	0.0036883509316854093	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.5738042072156186	IMPLEMENTATION	0.42619579278438136	WITHOUT_CLASSIFICATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.6243883861764833	WITHOUT_CLASSIFICATION	0.37561161382351677	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.5150301907999921	IMPLEMENTATION	0.4849698092000078	WITHOUT_CLASSIFICATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9902222859656781	WITHOUT_CLASSIFICATION	0.009777714034322016	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.9306774464535122	IMPLEMENTATION	0.06932255354648775	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9313531790527163	IMPLEMENTATION	0.06864682094728373	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9313531790527163	IMPLEMENTATION	0.06864682094728373	WITHOUT_CLASSIFICATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.9760587553422495	WITHOUT_CLASSIFICATION	0.023941244657750597	IMPLEMENTATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.50135436617475	IMPLEMENTATION	0.49864563382525	WITHOUT_CLASSIFICATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999994927917149	IMPLEMENTATION	5.072082851901829E-7	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.7750881077497699	WITHOUT_CLASSIFICATION	0.22491189225023006	IMPLEMENTATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.999966929014874	WITHOUT_CLASSIFICATION	3.3070985125956965E-5	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.7781790901197191	IMPLEMENTATION	0.22182090988028086	WITHOUT_CLASSIFICATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.8671196491954223	IMPLEMENTATION	0.1328803508045776	WITHOUT_CLASSIFICATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9980445892460887	WITHOUT_CLASSIFICATION	0.001955410753911249	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.8104407642762523	IMPLEMENTATION	0.18955923572374767	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9388689152605729	IMPLEMENTATION	0.06113108473942703	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9388689152605729	IMPLEMENTATION	0.06113108473942703	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.6876696054458947	WITHOUT_CLASSIFICATION	0.3123303945541054	IMPLEMENTATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.7149146393903802	IMPLEMENTATION	0.28508536060961986	WITHOUT_CLASSIFICATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.7975698984573993	IMPLEMENTATION	0.20243010154260058	WITHOUT_CLASSIFICATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.6123648322491825	IMPLEMENTATION	0.38763516775081747	WITHOUT_CLASSIFICATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9966110356214687	IMPLEMENTATION	0.0033889643785311933	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.658274817688199	IMPLEMENTATION	0.341725182311801	WITHOUT_CLASSIFICATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.5737576110688081	IMPLEMENTATION	0.426242388931192	WITHOUT_CLASSIFICATION
todo : look at optimizing these...	IMPLEMENTATION	0.9995007526536733	WITHOUT_CLASSIFICATION	4.992473463265801E-4	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.7828121026853083	IMPLEMENTATION	0.21718789731469162	WITHOUT_CLASSIFICATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9992276119666941	IMPLEMENTATION	7.723880333058479E-4	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.6174831913657921	IMPLEMENTATION	0.3825168086342078	WITHOUT_CLASSIFICATION
TODO: not visible to the user!	IMPLEMENTATION	0.9267570175314833	IMPLEMENTATION	0.07324298246851668	WITHOUT_CLASSIFICATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.5064380101815784	WITHOUT_CLASSIFICATION	0.49356198981842164	IMPLEMENTATION
TODO: use these in methods above	IMPLEMENTATION	0.6730365274827566	WITHOUT_CLASSIFICATION	0.3269634725172434	IMPLEMENTATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8711363800481919	IMPLEMENTATION	0.12886361995180806	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8711363800481919	IMPLEMENTATION	0.12886361995180806	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9047046784207954	WITHOUT_CLASSIFICATION	0.0952953215792046	IMPLEMENTATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999040593458278	WITHOUT_CLASSIFICATION	9.594065417209202E-5	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9978494037790785	WITHOUT_CLASSIFICATION	0.00215059622092158	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9978235388672124	IMPLEMENTATION	0.002176461132787628	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.6192241789538592	IMPLEMENTATION	0.38077582104614077	WITHOUT_CLASSIFICATION
TODO: formulas ?	IMPLEMENTATION	0.5086689160111767	IMPLEMENTATION	0.4913310839888232	WITHOUT_CLASSIFICATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.6044851768113416	WITHOUT_CLASSIFICATION	0.39551482318865827	IMPLEMENTATION
todo : cache this sql...	IMPLEMENTATION	0.9993324639247928	WITHOUT_CLASSIFICATION	6.675360752072089E-4	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.8522216143359679	WITHOUT_CLASSIFICATION	0.14777838566403206	IMPLEMENTATION
TODO: cache this in an instvar	IMPLEMENTATION	0.7855770165374519	WITHOUT_CLASSIFICATION	0.21442298346254804	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.6014848886687594	IMPLEMENTATION	0.3985151113312406	WITHOUT_CLASSIFICATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.7939814322828652	IMPLEMENTATION	0.2060185677171349	WITHOUT_CLASSIFICATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.9947352566061619	IMPLEMENTATION	0.005264743393838133	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.6217120065545011	IMPLEMENTATION	0.3782879934454989	WITHOUT_CLASSIFICATION
TODO: terrible implementation!	IMPLEMENTATION	0.5021274869420894	IMPLEMENTATION	0.4978725130579107	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.6217120065545011	IMPLEMENTATION	0.3782879934454989	WITHOUT_CLASSIFICATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9988488894256591	IMPLEMENTATION	0.0011511105743410041	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.7572563113930719	IMPLEMENTATION	0.2427436886069281	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.6217120065545011	IMPLEMENTATION	0.3782879934454989	WITHOUT_CLASSIFICATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9998764994818145	WITHOUT_CLASSIFICATION	1.2350051818551294E-4	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9998764994818145	WITHOUT_CLASSIFICATION	1.2350051818551294E-4	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9999557463666782	IMPLEMENTATION	4.4253633321889904E-5	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.5264535619141318	IMPLEMENTATION	0.47354643808586827	WITHOUT_CLASSIFICATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999905556501336	WITHOUT_CLASSIFICATION	9.44434986635785E-6	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999502203900116	WITHOUT_CLASSIFICATION	4.977960998843623E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999502203900116	WITHOUT_CLASSIFICATION	4.977960998843623E-5	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999493867534441	WITHOUT_CLASSIFICATION	5.061324655591356E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999829329413494	WITHOUT_CLASSIFICATION	1.706705865057293E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999011992700504	WITHOUT_CLASSIFICATION	9.880072994969059E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999011992700504	WITHOUT_CLASSIFICATION	9.880072994969059E-5	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999935282566099	WITHOUT_CLASSIFICATION	6.471743390023816E-6	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999485801295107	WITHOUT_CLASSIFICATION	5.1419870489187273E-5	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999649748017916	WITHOUT_CLASSIFICATION	3.502519820842389E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999855319301019	WITHOUT_CLASSIFICATION	1.446806989805631E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999977708232903	WITHOUT_CLASSIFICATION	2.22917670979005E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999977708232903	WITHOUT_CLASSIFICATION	2.22917670979005E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999560007746346	WITHOUT_CLASSIFICATION	4.399922536544761E-5	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.998708660914742	WITHOUT_CLASSIFICATION	0.0012913390852579431	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.9999698908719528	WITHOUT_CLASSIFICATION	3.010912804734463E-5	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999983615065051	WITHOUT_CLASSIFICATION	1.6384934949300273E-6	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999993970048018	WITHOUT_CLASSIFICATION	6.029951980793975E-7	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.999955259559965	WITHOUT_CLASSIFICATION	4.474044003502341E-5	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.9998856390057054	WITHOUT_CLASSIFICATION	1.1436099429457817E-4	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9998743467516017	WITHOUT_CLASSIFICATION	1.2565324839840792E-4	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999346236489906	WITHOUT_CLASSIFICATION	6.537635100949583E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999978893517839	WITHOUT_CLASSIFICATION	2.1106482160627873E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999550395274553	WITHOUT_CLASSIFICATION	4.4960472544602064E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999550395274553	WITHOUT_CLASSIFICATION	4.4960472544602064E-5	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9998265564143083	WITHOUT_CLASSIFICATION	1.7344358569159886E-4	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999597188542408	WITHOUT_CLASSIFICATION	4.028114575918444E-5	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999937140647591	WITHOUT_CLASSIFICATION	6.285935240881116E-6	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999714972466502	WITHOUT_CLASSIFICATION	2.850275334973115E-5	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9418734814583368	WITHOUT_CLASSIFICATION	0.058126518541663154	IMPLEMENTATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999828676349386	WITHOUT_CLASSIFICATION	1.7132365061372768E-5	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999904249914354	WITHOUT_CLASSIFICATION	9.57500856446528E-6	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999926529742753	WITHOUT_CLASSIFICATION	7.347025724769797E-6	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999942730223815	WITHOUT_CLASSIFICATION	5.726977618428987E-6	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999428089453867	WITHOUT_CLASSIFICATION	5.719105461329029E-5	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999996169327431	WITHOUT_CLASSIFICATION	3.830672568957583E-6	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9998113183932483	WITHOUT_CLASSIFICATION	1.8868160675162E-4	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999749641968895	WITHOUT_CLASSIFICATION	2.503580311051397E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999973535157829	WITHOUT_CLASSIFICATION	2.64648421714656E-6	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.999976553844064	WITHOUT_CLASSIFICATION	2.3446155935987466E-5	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99995396223887	WITHOUT_CLASSIFICATION	4.6037761129977275E-5	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999541973773608	WITHOUT_CLASSIFICATION	4.580262263917156E-5	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999470563159979	WITHOUT_CLASSIFICATION	5.294368400203825E-5	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9997776133357944	WITHOUT_CLASSIFICATION	2.2238666420568802E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9998257858644504	WITHOUT_CLASSIFICATION	1.7421413554952693E-4	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999570066603435	WITHOUT_CLASSIFICATION	4.2993339656481855E-5	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999570066603435	WITHOUT_CLASSIFICATION	4.2993339656481855E-5	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9997776133357944	WITHOUT_CLASSIFICATION	2.2238666420568802E-4	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9306530734898419	WITHOUT_CLASSIFICATION	0.06934692651015802	IMPLEMENTATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999423539555748	WITHOUT_CLASSIFICATION	5.764604442507157E-5	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999842101049077	WITHOUT_CLASSIFICATION	1.5789895092318337E-5	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999990556574053	WITHOUT_CLASSIFICATION	9.443425946347984E-7	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999821621146687	WITHOUT_CLASSIFICATION	1.7837885331207978E-5	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9992331648609234	WITHOUT_CLASSIFICATION	7.668351390766248E-4	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9998676332365152	WITHOUT_CLASSIFICATION	1.323667634848438E-4	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9998052141370081	WITHOUT_CLASSIFICATION	1.947858629919794E-4	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9997743385473756	WITHOUT_CLASSIFICATION	2.2566145262435252E-4	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9994718037494799	WITHOUT_CLASSIFICATION	5.281962505202308E-4	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999570066603435	WITHOUT_CLASSIFICATION	4.2993339656481855E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999997334327848	WITHOUT_CLASSIFICATION	2.665672152071118E-6	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9996955093799461	WITHOUT_CLASSIFICATION	3.0449062005395656E-4	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999931337466655	WITHOUT_CLASSIFICATION	6.866253334527301E-6	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999985481944318	WITHOUT_CLASSIFICATION	1.4518055682472037E-6	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.999976608668033	WITHOUT_CLASSIFICATION	2.339133196704561E-5	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999963148389481	WITHOUT_CLASSIFICATION	3.685161051891661E-6	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999950631359577	WITHOUT_CLASSIFICATION	4.9368640424497405E-6	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999967820595841	WITHOUT_CLASSIFICATION	3.2179404158851654E-6	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999575248605779	WITHOUT_CLASSIFICATION	4.247513942208697E-5	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999998684307024	WITHOUT_CLASSIFICATION	1.3156929752652955E-7	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999322740019932	WITHOUT_CLASSIFICATION	6.772599800678452E-5	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999632649549786	WITHOUT_CLASSIFICATION	3.673504502138761E-5	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.8148654200827065	IMPLEMENTATION	0.18513457991729354	WITHOUT_CLASSIFICATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9997729815793027	WITHOUT_CLASSIFICATION	2.270184206973061E-4	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999785782797147	WITHOUT_CLASSIFICATION	2.1421720285282496E-5	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9777606718511469	WITHOUT_CLASSIFICATION	0.02223932814885316	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999939654377272	WITHOUT_CLASSIFICATION	6.034562272776478E-6	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999949974289385	WITHOUT_CLASSIFICATION	5.002571061511677E-6	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9998771855917443	WITHOUT_CLASSIFICATION	1.228144082557624E-4	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999805813302962	WITHOUT_CLASSIFICATION	1.9418669703736155E-5	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999954174319043	WITHOUT_CLASSIFICATION	4.582568095598695E-6	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999958378563107	WITHOUT_CLASSIFICATION	4.162143689294306E-6	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999923520781793	WITHOUT_CLASSIFICATION	7.647921820782631E-6	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999999938358584	WITHOUT_CLASSIFICATION	6.164141606658856E-8	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999958378563107	WITHOUT_CLASSIFICATION	4.162143689294306E-6	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9975801597466211	WITHOUT_CLASSIFICATION	0.0024198402533788755	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999460872490491	WITHOUT_CLASSIFICATION	5.391275095089737E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999433632136832	WITHOUT_CLASSIFICATION	5.663678631676692E-5	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.9999526499624068	WITHOUT_CLASSIFICATION	4.73500375930758E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999983965242358	WITHOUT_CLASSIFICATION	1.6034757642062965E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999983965242358	WITHOUT_CLASSIFICATION	1.6034757642062965E-5	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999361487404673	WITHOUT_CLASSIFICATION	6.38512595327376E-5	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999999859827553	WITHOUT_CLASSIFICATION	1.4017244687738737E-7	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9998571654254925	WITHOUT_CLASSIFICATION	1.4283457450749666E-4	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999975530620109	WITHOUT_CLASSIFICATION	2.446937989030426E-6	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9998414753345503	WITHOUT_CLASSIFICATION	1.5852466544966036E-4	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999979120918934	WITHOUT_CLASSIFICATION	2.0879081066342853E-6	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999523934464339	WITHOUT_CLASSIFICATION	4.7606553566096355E-5	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.9983966874346502	WITHOUT_CLASSIFICATION	0.001603312565349901	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999802975016379	WITHOUT_CLASSIFICATION	1.970249836214522E-5	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999951592949111	WITHOUT_CLASSIFICATION	4.840705088828667E-6	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999826433623938	WITHOUT_CLASSIFICATION	1.7356637606189775E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999826433623938	WITHOUT_CLASSIFICATION	1.7356637606189775E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999420189036962	WITHOUT_CLASSIFICATION	5.798109630383724E-5	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999944553227293	WITHOUT_CLASSIFICATION	5.544677270693084E-5	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999780157098934	WITHOUT_CLASSIFICATION	2.1984290106490637E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999826433623938	WITHOUT_CLASSIFICATION	1.7356637606189775E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999420189036962	WITHOUT_CLASSIFICATION	5.798109630383724E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999420189036962	WITHOUT_CLASSIFICATION	5.798109630383724E-5	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999948588006227	WITHOUT_CLASSIFICATION	5.141199377364269E-6	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999095217882681	WITHOUT_CLASSIFICATION	9.047821173198417E-5	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998405087048	WITHOUT_CLASSIFICATION	1.5949129525465336E-7	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999999160679194	WITHOUT_CLASSIFICATION	8.393208059715233E-7	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9991711156365792	WITHOUT_CLASSIFICATION	8.288843634208263E-4	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9991711156365792	WITHOUT_CLASSIFICATION	8.288843634208263E-4	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999957043916042	WITHOUT_CLASSIFICATION	4.295608395833272E-6	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999691666276258	WITHOUT_CLASSIFICATION	3.083337237409942E-5	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.9999970828723794	WITHOUT_CLASSIFICATION	2.9171276205627926E-6	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999987814449024	WITHOUT_CLASSIFICATION	1.2185550975964295E-6	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999987814449024	WITHOUT_CLASSIFICATION	1.2185550975964295E-6	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999835475599436	WITHOUT_CLASSIFICATION	1.6452440056483807E-5	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999296518009434	WITHOUT_CLASSIFICATION	7.034819905655398E-5	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999900685358564	WITHOUT_CLASSIFICATION	9.931464143659672E-6	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999893378447	WITHOUT_CLASSIFICATION	1.0662155344289045E-8	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999945169982497	WITHOUT_CLASSIFICATION	5.483001750352088E-6	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999299917253849	WITHOUT_CLASSIFICATION	7.000827461513514E-5	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998253445168754	WITHOUT_CLASSIFICATION	1.7465548312456204E-4	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.9999374636609821	WITHOUT_CLASSIFICATION	6.253633901785047E-5	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999900685358564	WITHOUT_CLASSIFICATION	9.931464143659672E-6	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.9999860543559665	WITHOUT_CLASSIFICATION	1.3945644033485656E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999856018002035	WITHOUT_CLASSIFICATION	1.4398199796573305E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999856018002035	WITHOUT_CLASSIFICATION	1.4398199796573305E-5	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999928133367	WITHOUT_CLASSIFICATION	7.186663212252163E-9	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999877148912216	WITHOUT_CLASSIFICATION	1.22851087784505E-5	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9998610418778199	WITHOUT_CLASSIFICATION	1.3895812218013827E-4	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9975302910886733	WITHOUT_CLASSIFICATION	0.0024697089113267364	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999418539069629	WITHOUT_CLASSIFICATION	5.814609303712778E-5	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.999942465510466	WITHOUT_CLASSIFICATION	5.7534489534140534E-5	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9999869127736685	WITHOUT_CLASSIFICATION	1.3087226331545816E-5	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.9999570523088326	WITHOUT_CLASSIFICATION	4.2947691167285135E-5	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.999901989885993	WITHOUT_CLASSIFICATION	9.801011400701592E-5	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999993722527761	WITHOUT_CLASSIFICATION	6.277472238760495E-7	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999993722527761	WITHOUT_CLASSIFICATION	6.277472238760495E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999853286887721	WITHOUT_CLASSIFICATION	1.4671311227881968E-5	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999905556501336	WITHOUT_CLASSIFICATION	9.44434986635785E-6	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999790894895123	WITHOUT_CLASSIFICATION	2.0910510487713246E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999502203900116	WITHOUT_CLASSIFICATION	4.977960998843623E-5	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999288787501336	WITHOUT_CLASSIFICATION	7.112124986644772E-5	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999527187638929	WITHOUT_CLASSIFICATION	4.7281236107237884E-5	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999044967778764	WITHOUT_CLASSIFICATION	9.550322212355727E-5	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.9999545828725951	WITHOUT_CLASSIFICATION	4.5417127404970406E-5	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999795440051664	WITHOUT_CLASSIFICATION	2.0455994833622382E-5	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.9999581158341212	WITHOUT_CLASSIFICATION	4.188416587886696E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999567739723846	WITHOUT_CLASSIFICATION	4.322602761540437E-5	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.999972152001843	WITHOUT_CLASSIFICATION	2.7847998157053572E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.9999545828725951	WITHOUT_CLASSIFICATION	4.5417127404970406E-5	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999733516624844	WITHOUT_CLASSIFICATION	2.6648337515673135E-5	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999488566510972	WITHOUT_CLASSIFICATION	5.114334890270793E-5	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999100516475639	WITHOUT_CLASSIFICATION	8.994835243615134E-5	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999717219117841	WITHOUT_CLASSIFICATION	2.8278088215957508E-5	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999897803161748	WITHOUT_CLASSIFICATION	1.0219683825318446E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999011992700504	WITHOUT_CLASSIFICATION	9.880072994969059E-5	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999098333242552	WITHOUT_CLASSIFICATION	9.016667574478012E-5	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.999950302743582	WITHOUT_CLASSIFICATION	4.969725641790673E-5	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999872904158906	WITHOUT_CLASSIFICATION	1.2709584109232441E-5	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999798028210086	WITHOUT_CLASSIFICATION	2.0197178991318976E-5	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999556029464123	WITHOUT_CLASSIFICATION	4.439705358767899E-5	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999849606141845	WITHOUT_CLASSIFICATION	1.5039385815494884E-5	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999926120818046	WITHOUT_CLASSIFICATION	7.3879181954653515E-6	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.9997308229905867	WITHOUT_CLASSIFICATION	2.6917700941321587E-4	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.99874394526657	WITHOUT_CLASSIFICATION	0.001256054733430012	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.999998096501642	WITHOUT_CLASSIFICATION	1.903498357958758E-6	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999502203900116	WITHOUT_CLASSIFICATION	4.977960998843623E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999502203900116	WITHOUT_CLASSIFICATION	4.977960998843623E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999567739723846	WITHOUT_CLASSIFICATION	4.322602761540437E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999556029464123	WITHOUT_CLASSIFICATION	4.439705358767899E-5	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999935282566099	WITHOUT_CLASSIFICATION	6.471743390023816E-6	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999790278029504	WITHOUT_CLASSIFICATION	2.0972197049512617E-5	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999618268519307	WITHOUT_CLASSIFICATION	3.817314806920723E-5	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999843823019785	WITHOUT_CLASSIFICATION	1.5617698021502144E-5	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9999596744644548	WITHOUT_CLASSIFICATION	4.03255355451293E-5	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.999977914769504	WITHOUT_CLASSIFICATION	2.208523049597191E-5	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9999555247054733	WITHOUT_CLASSIFICATION	4.4475294526680676E-5	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.9998398894542556	WITHOUT_CLASSIFICATION	1.6011054574433556E-4	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9997716629675081	WITHOUT_CLASSIFICATION	2.2833703249177382E-4	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9997716629675081	WITHOUT_CLASSIFICATION	2.2833703249177382E-4	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999907788420005	WITHOUT_CLASSIFICATION	9.221157999610932E-6	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999583722649257	WITHOUT_CLASSIFICATION	4.162773507423074E-5	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999541886488799	WITHOUT_CLASSIFICATION	4.581135112014749E-5	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.999930005379769	WITHOUT_CLASSIFICATION	6.999462023099973E-5	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999331083968327	WITHOUT_CLASSIFICATION	6.689160316729544E-5	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.9999446711272597	WITHOUT_CLASSIFICATION	5.5328872740344595E-5	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.999969695644834	WITHOUT_CLASSIFICATION	3.030435516608453E-5	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999485801295107	WITHOUT_CLASSIFICATION	5.1419870489187273E-5	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999305986923446	WITHOUT_CLASSIFICATION	6.940130765546265E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999305986923446	WITHOUT_CLASSIFICATION	6.940130765546265E-5	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.9999372437448711	WITHOUT_CLASSIFICATION	6.275625512892923E-5	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999350795240945	WITHOUT_CLASSIFICATION	6.492047590542654E-5	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.9999372437448711	WITHOUT_CLASSIFICATION	6.275625512892923E-5	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999517297346219	WITHOUT_CLASSIFICATION	4.827026537807407E-5	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.9999846857822411	WITHOUT_CLASSIFICATION	1.5314217758930953E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999502203900116	WITHOUT_CLASSIFICATION	4.977960998843623E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999567739723846	WITHOUT_CLASSIFICATION	4.322602761540437E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999556029464123	WITHOUT_CLASSIFICATION	4.439705358767899E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999556029464123	WITHOUT_CLASSIFICATION	4.439705358767899E-5	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.9999515998982972	WITHOUT_CLASSIFICATION	4.8400101702798456E-5	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.9997475845737777	WITHOUT_CLASSIFICATION	2.524154262222956E-4	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.999956756131452	WITHOUT_CLASSIFICATION	4.324386854802821E-5	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999855319301019	WITHOUT_CLASSIFICATION	1.446806989805631E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999855319301019	WITHOUT_CLASSIFICATION	1.446806989805631E-5	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.9978527291542524	WITHOUT_CLASSIFICATION	0.002147270845747693	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.9999953247341394	WITHOUT_CLASSIFICATION	4.675265860632728E-6	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.9999803755176688	WITHOUT_CLASSIFICATION	1.962448233106646E-5	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.9999581440356282	WITHOUT_CLASSIFICATION	4.185596437169916E-5	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9999829917209423	WITHOUT_CLASSIFICATION	1.7008279057693322E-5	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.9999554695269879	WITHOUT_CLASSIFICATION	4.453047301205221E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999977708232903	WITHOUT_CLASSIFICATION	2.22917670979005E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999554837731676	WITHOUT_CLASSIFICATION	4.451622683241201E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999554837731676	WITHOUT_CLASSIFICATION	4.451622683241201E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999560007746346	WITHOUT_CLASSIFICATION	4.399922536544761E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999560007746346	WITHOUT_CLASSIFICATION	4.399922536544761E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9998353996396712	WITHOUT_CLASSIFICATION	1.646003603289166E-4	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9998353996396712	WITHOUT_CLASSIFICATION	1.646003603289166E-4	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999947282880534	WITHOUT_CLASSIFICATION	5.271711946588487E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999947282880534	WITHOUT_CLASSIFICATION	5.271711946588487E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999855319301019	WITHOUT_CLASSIFICATION	1.446806989805631E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999977708232903	WITHOUT_CLASSIFICATION	2.22917670979005E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999554837731676	WITHOUT_CLASSIFICATION	4.451622683241201E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999554837731676	WITHOUT_CLASSIFICATION	4.451622683241201E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999560007746346	WITHOUT_CLASSIFICATION	4.399922536544761E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9998353996396712	WITHOUT_CLASSIFICATION	1.646003603289166E-4	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9998353996396712	WITHOUT_CLASSIFICATION	1.646003603289166E-4	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999947282880534	WITHOUT_CLASSIFICATION	5.271711946588487E-5	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999099110713816	WITHOUT_CLASSIFICATION	9.008892861843322E-5	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999734976689045	WITHOUT_CLASSIFICATION	2.65023310955305E-5	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.9999661863571894	WITHOUT_CLASSIFICATION	3.3813642810686844E-5	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9994841024934128	WITHOUT_CLASSIFICATION	5.158975065871988E-4	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.9999602532781113	WITHOUT_CLASSIFICATION	3.974672188868626E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999550357489303	WITHOUT_CLASSIFICATION	4.496425106969211E-5	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999002643699	WITHOUT_CLASSIFICATION	9.973563011898511E-8	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999749342231474	WITHOUT_CLASSIFICATION	2.506577685255685E-5	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999981827852796	WITHOUT_CLASSIFICATION	1.8172147203489811E-6	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9998326390934533	WITHOUT_CLASSIFICATION	1.6736090654666138E-4	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999404763584693	WITHOUT_CLASSIFICATION	5.9523641530788534E-5	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999884381650669	WITHOUT_CLASSIFICATION	1.1561834933172134E-5	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999361487404673	WITHOUT_CLASSIFICATION	6.38512595327376E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999550357489303	WITHOUT_CLASSIFICATION	4.496425106969211E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999550357489303	WITHOUT_CLASSIFICATION	4.496425106969211E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999550357489303	WITHOUT_CLASSIFICATION	4.496425106969211E-5	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999985146169229	WITHOUT_CLASSIFICATION	1.4853830771466008E-6	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999487461605516	WITHOUT_CLASSIFICATION	5.125383944824087E-5	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999487461605516	WITHOUT_CLASSIFICATION	5.125383944824087E-5	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9997401787218825	WITHOUT_CLASSIFICATION	2.598212781174623E-4	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999768543536	WITHOUT_CLASSIFICATION	2.3145646366514155E-8	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.999994223842959	WITHOUT_CLASSIFICATION	5.776157041010474E-6	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9997373191312364	WITHOUT_CLASSIFICATION	2.6268086876350075E-4	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9997373191312364	WITHOUT_CLASSIFICATION	2.6268086876350075E-4	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999993970048018	WITHOUT_CLASSIFICATION	6.029951980793975E-7	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999824434106291	WITHOUT_CLASSIFICATION	1.7556589370802107E-5	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999824434106291	WITHOUT_CLASSIFICATION	1.7556589370802107E-5	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9988671845977233	WITHOUT_CLASSIFICATION	0.0011328154022767108	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999971824328686	WITHOUT_CLASSIFICATION	2.8175671313882988E-6	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999978893517839	WITHOUT_CLASSIFICATION	2.1106482160627873E-6	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.9999583023770797	WITHOUT_CLASSIFICATION	4.169762292033778E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.999955259559965	WITHOUT_CLASSIFICATION	4.474044003502341E-5	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.5253006788639335	IMPLEMENTATION	0.4746993211360665	WITHOUT_CLASSIFICATION
ID	WITHOUT_CLASSIFICATION	0.9998842219792022	WITHOUT_CLASSIFICATION	1.1577802079782871E-4	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999809805808835	WITHOUT_CLASSIFICATION	1.9019419116554086E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999961846076909	WITHOUT_CLASSIFICATION	3.815392309108408E-5	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999865510309951	WITHOUT_CLASSIFICATION	1.3448969004813361E-5	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999693902661	WITHOUT_CLASSIFICATION	3.0609733804031756E-8	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999714972466502	WITHOUT_CLASSIFICATION	2.850275334973115E-5	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999569116027598	WITHOUT_CLASSIFICATION	4.308839724019513E-5	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999343505006721	WITHOUT_CLASSIFICATION	6.564949932791262E-5	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9999561029001813	WITHOUT_CLASSIFICATION	4.3897099818622365E-5	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999550304500001	WITHOUT_CLASSIFICATION	4.49695499999446E-5	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999375763312062	WITHOUT_CLASSIFICATION	6.242366879390205E-5	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999933225558501	WITHOUT_CLASSIFICATION	6.677444149906002E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999771450115085	WITHOUT_CLASSIFICATION	2.2854988491503872E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999978893517839	WITHOUT_CLASSIFICATION	2.1106482160627873E-6	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999758022721668	WITHOUT_CLASSIFICATION	2.419772783329327E-5	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.9999808363620495	WITHOUT_CLASSIFICATION	1.916363795055138E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999561018232671	WITHOUT_CLASSIFICATION	4.38981767328884E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.999955259559965	WITHOUT_CLASSIFICATION	4.474044003502341E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999771450115085	WITHOUT_CLASSIFICATION	2.2854988491503872E-5	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999758022721668	WITHOUT_CLASSIFICATION	2.419772783329327E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999561018232671	WITHOUT_CLASSIFICATION	4.38981767328884E-5	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999257925770971	WITHOUT_CLASSIFICATION	7.420742290293118E-5	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.9999550412103652	WITHOUT_CLASSIFICATION	4.49587896348411E-5	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999257925770971	WITHOUT_CLASSIFICATION	7.420742290293118E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999550395274553	WITHOUT_CLASSIFICATION	4.4960472544602064E-5	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9997911464250226	WITHOUT_CLASSIFICATION	2.088535749772579E-4	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.999898131173524	WITHOUT_CLASSIFICATION	1.0186882647602508E-4	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999997892715101	WITHOUT_CLASSIFICATION	2.107284898077779E-7	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999932161148808	WITHOUT_CLASSIFICATION	6.783885119186844E-6	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9985589543483337	WITHOUT_CLASSIFICATION	0.001441045651666209	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999792817636024	WITHOUT_CLASSIFICATION	2.0718236397594314E-5	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9998122680475192	WITHOUT_CLASSIFICATION	1.8773195248080376E-4	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9981918633645006	WITHOUT_CLASSIFICATION	0.001808136635499356	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999792817636024	WITHOUT_CLASSIFICATION	2.0718236397594314E-5	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999597188542408	WITHOUT_CLASSIFICATION	4.028114575918444E-5	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9996246492842887	WITHOUT_CLASSIFICATION	3.753507157112767E-4	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.9999550131685555	WITHOUT_CLASSIFICATION	4.4986831444501816E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999771450115085	WITHOUT_CLASSIFICATION	2.2854988491503872E-5	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999463174420381	WITHOUT_CLASSIFICATION	5.368255796191305E-5	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.9999579275676871	WITHOUT_CLASSIFICATION	4.2072432312838515E-5	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9977671585425287	WITHOUT_CLASSIFICATION	0.0022328414574712937	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.999958185297178	WITHOUT_CLASSIFICATION	4.1814702822001596E-5	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999905781730145	WITHOUT_CLASSIFICATION	9.421826985587664E-6	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999998062198515	WITHOUT_CLASSIFICATION	1.9378014851333226E-7	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999923203941372	WITHOUT_CLASSIFICATION	7.679605862790527E-6	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.9990749473040239	WITHOUT_CLASSIFICATION	9.250526959760482E-4	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.9999569421104605	WITHOUT_CLASSIFICATION	4.305788953944623E-5	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998280591488772	WITHOUT_CLASSIFICATION	1.7194085112286152E-4	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999589750305303	WITHOUT_CLASSIFICATION	4.1024969469712556E-5	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9988680877621444	WITHOUT_CLASSIFICATION	0.0011319122378555572	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999714972466502	WITHOUT_CLASSIFICATION	2.850275334973115E-5	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.9999084378080844	WITHOUT_CLASSIFICATION	9.15621919156959E-5	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999422609141785	WITHOUT_CLASSIFICATION	5.773908582158571E-5	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.9998422995249091	WITHOUT_CLASSIFICATION	1.577004750908916E-4	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999566958301017	WITHOUT_CLASSIFICATION	4.330416989826113E-5	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.999961141826795	WITHOUT_CLASSIFICATION	3.885817320494056E-5	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999849882160048	WITHOUT_CLASSIFICATION	1.5011783995303831E-5	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999998306116645	WITHOUT_CLASSIFICATION	1.6938833557203815E-7	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999980365731715	WITHOUT_CLASSIFICATION	1.963426828501588E-5	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.998086526155195	WITHOUT_CLASSIFICATION	0.0019134738448050802	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999493290268697	WITHOUT_CLASSIFICATION	5.067097313038912E-5	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9987365043966662	WITHOUT_CLASSIFICATION	0.0012634956033338316	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9987365043966662	WITHOUT_CLASSIFICATION	0.0012634956033338316	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999736700915678	WITHOUT_CLASSIFICATION	2.6329908432243354E-5	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999842959725895	WITHOUT_CLASSIFICATION	1.5704027410499578E-5	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.999994208182697	WITHOUT_CLASSIFICATION	5.791817302968115E-6	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999612481556824	WITHOUT_CLASSIFICATION	3.875184431766424E-5	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999979189227572	WITHOUT_CLASSIFICATION	2.0810772427970218E-5	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9998724396059349	WITHOUT_CLASSIFICATION	1.2756039406519837E-4	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999898335355287	WITHOUT_CLASSIFICATION	1.0166464471296394E-5	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9941341021725585	WITHOUT_CLASSIFICATION	0.0058658978274415555	IMPLEMENTATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999960959557895	WITHOUT_CLASSIFICATION	3.904044210461877E-6	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.999964182481381	WITHOUT_CLASSIFICATION	3.5817518619141575E-5	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.9999346125789533	WITHOUT_CLASSIFICATION	6.538742104667802E-5	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9987102526366421	WITHOUT_CLASSIFICATION	0.001289747363357886	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999389315380245	WITHOUT_CLASSIFICATION	6.106846197545953E-5	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999680940878621	WITHOUT_CLASSIFICATION	3.190591213787624E-5	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9993560812823896	WITHOUT_CLASSIFICATION	6.439187176103458E-4	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999143661082901	WITHOUT_CLASSIFICATION	8.563389170992424E-5	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977430518041	WITHOUT_CLASSIFICATION	2.256948195892317E-5	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999831476570108	WITHOUT_CLASSIFICATION	1.6852342989259062E-5	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996715118655781	WITHOUT_CLASSIFICATION	3.2848813442183666E-4	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.999890316397563	WITHOUT_CLASSIFICATION	1.0968360243700156E-4	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999690775955236	WITHOUT_CLASSIFICATION	3.092240447651149E-5	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999858871485765	WITHOUT_CLASSIFICATION	1.4112851423606277E-5	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999143661082901	WITHOUT_CLASSIFICATION	8.563389170992424E-5	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999271967981218	WITHOUT_CLASSIFICATION	7.2803201878186E-5	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998675606005534	WITHOUT_CLASSIFICATION	1.3243939944661555E-4	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9998670869239384	WITHOUT_CLASSIFICATION	1.3291307606150922E-4	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999999978590995	WITHOUT_CLASSIFICATION	2.1409005035802245E-8	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999783762514335	WITHOUT_CLASSIFICATION	2.1623748566558467E-5	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999831476570108	WITHOUT_CLASSIFICATION	1.6852342989259062E-5	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999775547724284	WITHOUT_CLASSIFICATION	2.244522757151997E-5	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9997881496045861	WITHOUT_CLASSIFICATION	2.118503954138757E-4	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9998578269052745	WITHOUT_CLASSIFICATION	1.4217309472553798E-4	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999498100957606	WITHOUT_CLASSIFICATION	5.0189904239464715E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999498100957606	WITHOUT_CLASSIFICATION	5.0189904239464715E-5	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999470563159979	WITHOUT_CLASSIFICATION	5.294368400203825E-5	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999693824983954	WITHOUT_CLASSIFICATION	3.061750160457375E-5	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999332044557817	WITHOUT_CLASSIFICATION	6.679554421826357E-5	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999332044557817	WITHOUT_CLASSIFICATION	6.679554421826357E-5	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.998086526155195	WITHOUT_CLASSIFICATION	0.0019134738448050802	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999860752224387	WITHOUT_CLASSIFICATION	1.392477756130787E-4	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999132122065653	WITHOUT_CLASSIFICATION	8.678779343469286E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999930290493356	WITHOUT_CLASSIFICATION	6.970950664399228E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999853286887721	WITHOUT_CLASSIFICATION	1.4671311227881968E-5	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999132122065653	WITHOUT_CLASSIFICATION	8.678779343469286E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999930290493356	WITHOUT_CLASSIFICATION	6.970950664399228E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9172514009162037	WITHOUT_CLASSIFICATION	0.08274859908379631	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999992726089295	WITHOUT_CLASSIFICATION	7.2739107047715E-7	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999670848275221	WITHOUT_CLASSIFICATION	3.291517247793248E-5	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.999999448678716	WITHOUT_CLASSIFICATION	5.513212839042614E-7	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9991308583779959	WITHOUT_CLASSIFICATION	8.691416220040224E-4	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.8458860572264328	WITHOUT_CLASSIFICATION	0.1541139427735672	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.99977168101166	WITHOUT_CLASSIFICATION	2.2831898834011367E-4	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.99977168101166	WITHOUT_CLASSIFICATION	2.2831898834011367E-4	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999990033358603	WITHOUT_CLASSIFICATION	9.966641397568154E-7	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999988573975936	WITHOUT_CLASSIFICATION	1.142602406334994E-6	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9998948778693195	WITHOUT_CLASSIFICATION	1.0512213068053253E-4	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999980159216884	WITHOUT_CLASSIFICATION	1.9840783117292577E-6	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999933696107617	WITHOUT_CLASSIFICATION	6.630389238301132E-6	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9996996837218325	WITHOUT_CLASSIFICATION	3.00316278167465E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999853286887721	WITHOUT_CLASSIFICATION	1.4671311227881968E-5	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9996996837218325	WITHOUT_CLASSIFICATION	3.00316278167465E-4	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999952450434632	WITHOUT_CLASSIFICATION	4.754956536795982E-6	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999952450434632	WITHOUT_CLASSIFICATION	4.754956536795982E-6	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999998271380042	WITHOUT_CLASSIFICATION	1.7286199579150083E-6	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9172514009162037	WITHOUT_CLASSIFICATION	0.08274859908379631	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9971639855305785	WITHOUT_CLASSIFICATION	0.00283601446942151	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999935318575727	WITHOUT_CLASSIFICATION	6.468142427317287E-6	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9917593954061519	WITHOUT_CLASSIFICATION	0.008240604593848067	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999914148132594	WITHOUT_CLASSIFICATION	8.585186740638776E-6	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999002293484187	WITHOUT_CLASSIFICATION	9.977065158137523E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9172514009162037	WITHOUT_CLASSIFICATION	0.08274859908379631	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999914148132594	WITHOUT_CLASSIFICATION	8.585186740638776E-6	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999002293484187	WITHOUT_CLASSIFICATION	9.977065158137523E-5	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999977880174848	WITHOUT_CLASSIFICATION	2.2119825152644746E-6	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998872973152398	WITHOUT_CLASSIFICATION	1.1270268476010099E-4	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999793860168709	WITHOUT_CLASSIFICATION	2.061398312913814E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9172514009162037	WITHOUT_CLASSIFICATION	0.08274859908379631	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9172514009162037	WITHOUT_CLASSIFICATION	0.08274859908379631	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9999936522786029	WITHOUT_CLASSIFICATION	6.347721397018819E-6	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.9999888181471465	WITHOUT_CLASSIFICATION	1.1181852853586274E-5	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.9999953914011414	WITHOUT_CLASSIFICATION	4.608598858677352E-6	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999973535157829	WITHOUT_CLASSIFICATION	2.64648421714656E-6	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.9999899724756915	WITHOUT_CLASSIFICATION	1.0027524308589592E-5	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999964157454836	WITHOUT_CLASSIFICATION	3.584254516313232E-6	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9988558904809239	WITHOUT_CLASSIFICATION	0.0011441095190760867	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999908367360169	WITHOUT_CLASSIFICATION	9.163263983238074E-6	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999842800788171	WITHOUT_CLASSIFICATION	1.571992118288192E-5	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.9999450307498239	WITHOUT_CLASSIFICATION	5.496925017618922E-5	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9983860115459403	WITHOUT_CLASSIFICATION	0.0016139884540596137	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9890321134190638	WITHOUT_CLASSIFICATION	0.010967886580936195	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999987203644067	WITHOUT_CLASSIFICATION	1.279635593177867E-6	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9993890089756526	WITHOUT_CLASSIFICATION	6.109910243473163E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999154450433195	WITHOUT_CLASSIFICATION	8.455495668043731E-5	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999992458108661	WITHOUT_CLASSIFICATION	7.541891339657748E-7	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999973535157829	WITHOUT_CLASSIFICATION	2.64648421714656E-6	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999888234323605	WITHOUT_CLASSIFICATION	1.1176567639505502E-5	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999860470111503	WITHOUT_CLASSIFICATION	1.3952988849694197E-5	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.999865154129259	WITHOUT_CLASSIFICATION	1.3484587074097493E-4	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998280135137863	WITHOUT_CLASSIFICATION	1.719864862137531E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999331957262757	WITHOUT_CLASSIFICATION	6.680427372432511E-5	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999331957262757	WITHOUT_CLASSIFICATION	6.680427372432511E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999973535157829	WITHOUT_CLASSIFICATION	2.64648421714656E-6	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999599264347193	WITHOUT_CLASSIFICATION	4.00735652806647E-5	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999968088299025	WITHOUT_CLASSIFICATION	3.1911700975795267E-6	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9930979844064282	WITHOUT_CLASSIFICATION	0.006902015593571811	IMPLEMENTATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999873976217906	WITHOUT_CLASSIFICATION	1.260237820936806E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999955106253298	WITHOUT_CLASSIFICATION	4.489374670196469E-5	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999848204823834	WITHOUT_CLASSIFICATION	1.517951761673374E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999329511906153	WITHOUT_CLASSIFICATION	6.704880938470033E-5	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999075345206955	WITHOUT_CLASSIFICATION	9.24654793045197E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999947753978848	WITHOUT_CLASSIFICATION	5.2246021151969676E-5	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999892632179799	WITHOUT_CLASSIFICATION	1.0736782020137784E-5	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999952061534714	WITHOUT_CLASSIFICATION	4.79384652864831E-6	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999953533794794	WITHOUT_CLASSIFICATION	4.6466205205818875E-6	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999685617280324	WITHOUT_CLASSIFICATION	3.1438271967488535E-5	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999893720069366	WITHOUT_CLASSIFICATION	1.062799306339371E-4	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992934410404	WITHOUT_CLASSIFICATION	7.065589595978129E-6	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999647839100668	WITHOUT_CLASSIFICATION	3.521608993320258E-5	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9974646810913554	WITHOUT_CLASSIFICATION	0.0025353189086445294	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.999671104282334	WITHOUT_CLASSIFICATION	3.2889571766598583E-4	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999330685112973	WITHOUT_CLASSIFICATION	6.693148870266881E-5	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999966229061494	WITHOUT_CLASSIFICATION	3.3770938504932177E-6	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9998470450506068	WITHOUT_CLASSIFICATION	1.5295494939306513E-4	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999881218827121	WITHOUT_CLASSIFICATION	1.187811728787177E-5	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998409462735016	WITHOUT_CLASSIFICATION	0.0015905372649840158	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999400912232986	WITHOUT_CLASSIFICATION	5.990877670140872E-4	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989514160654097	WITHOUT_CLASSIFICATION	0.0010485839345902206	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999648855231026	WITHOUT_CLASSIFICATION	3.511447689749296E-5	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985488550345817	WITHOUT_CLASSIFICATION	0.0014511449654182672	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986012353002962	WITHOUT_CLASSIFICATION	0.0013987646997038153	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985488550345817	WITHOUT_CLASSIFICATION	0.0014511449654182672	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985488550345817	WITHOUT_CLASSIFICATION	0.0014511449654182672	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.9999175586841771	WITHOUT_CLASSIFICATION	8.244131582299507E-5	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999664496458319	WITHOUT_CLASSIFICATION	3.355035416801793E-5	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989728667816001	WITHOUT_CLASSIFICATION	0.0010271332183999107	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990717266437691	WITHOUT_CLASSIFICATION	9.28273356230927E-4	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979394708528105	WITHOUT_CLASSIFICATION	0.0020605291471893932	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9948301746836234	WITHOUT_CLASSIFICATION	0.005169825316376555	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985676193434271	WITHOUT_CLASSIFICATION	0.0014323806565728916	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985488550345817	WITHOUT_CLASSIFICATION	0.0014511449654182672	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982551526355126	WITHOUT_CLASSIFICATION	0.0017448473644873705	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985488550345817	WITHOUT_CLASSIFICATION	0.0014511449654182672	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999890181597397	WITHOUT_CLASSIFICATION	1.0981840260187893E-5	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999456463525961	WITHOUT_CLASSIFICATION	5.435364740382386E-5	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.5169446342174394	WITHOUT_CLASSIFICATION	0.48305536578256053	IMPLEMENTATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999962674709179	WITHOUT_CLASSIFICATION	3.732529082205562E-6	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999974441295638	WITHOUT_CLASSIFICATION	2.55587043607908E-6	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999719298185162	WITHOUT_CLASSIFICATION	2.8070181483764835E-5	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.9999028903859659	WITHOUT_CLASSIFICATION	9.710961403405487E-5	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999787004161529	WITHOUT_CLASSIFICATION	2.1299583847195427E-5	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999830605372725	WITHOUT_CLASSIFICATION	1.69394627274134E-5	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999335541028062	WITHOUT_CLASSIFICATION	6.644589719383236E-5	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999350651472585	WITHOUT_CLASSIFICATION	6.49348527414237E-5	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999606899735791	WITHOUT_CLASSIFICATION	3.931002642089303E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999947753978848	WITHOUT_CLASSIFICATION	5.2246021151969676E-5	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999596306335518	WITHOUT_CLASSIFICATION	4.036936644827416E-5	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999556944211355	WITHOUT_CLASSIFICATION	4.430557886448304E-5	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999405215100855	WITHOUT_CLASSIFICATION	5.9478489914462096E-5	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9996442050888554	WITHOUT_CLASSIFICATION	3.5579491114453123E-4	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.999880815271812	WITHOUT_CLASSIFICATION	1.1918472818793353E-4	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9997881139666788	WITHOUT_CLASSIFICATION	2.118860333212057E-4	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999452468640386	WITHOUT_CLASSIFICATION	5.475313596123146E-5	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999962804323147	WITHOUT_CLASSIFICATION	3.719567685300416E-5	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999534865236005	WITHOUT_CLASSIFICATION	4.6513476399584705E-5	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999459410828374	WITHOUT_CLASSIFICATION	5.405891716260096E-5	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9990697723288641	WITHOUT_CLASSIFICATION	9.302276711359066E-4	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999463551295481	WITHOUT_CLASSIFICATION	5.3644870451866975E-5	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999813420148272	WITHOUT_CLASSIFICATION	1.8657985172794093E-5	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998499332096561	WITHOUT_CLASSIFICATION	1.5006679034385224E-4	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998280326545065	WITHOUT_CLASSIFICATION	1.7196734549344893E-4	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999590542041347	WITHOUT_CLASSIFICATION	4.09457958652867E-5	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999877769815625	WITHOUT_CLASSIFICATION	1.2223018437428167E-5	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999717381250022	WITHOUT_CLASSIFICATION	2.826187499777076E-5	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999478797218698	WITHOUT_CLASSIFICATION	5.212027813020449E-5	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9997818369176245	WITHOUT_CLASSIFICATION	2.181630823755829E-4	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9991115981715388	WITHOUT_CLASSIFICATION	8.884018284611306E-4	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999963882933703	WITHOUT_CLASSIFICATION	3.611706629748155E-6	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9998650319663401	WITHOUT_CLASSIFICATION	1.349680336598352E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999947753978848	WITHOUT_CLASSIFICATION	5.2246021151969676E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999719298185162	WITHOUT_CLASSIFICATION	2.8070181483764835E-5	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9992923899214101	WITHOUT_CLASSIFICATION	7.076100785897509E-4	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999900134108946	WITHOUT_CLASSIFICATION	9.986589105457318E-6	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9998531980964911	WITHOUT_CLASSIFICATION	1.4680190350882074E-4	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999962674709179	WITHOUT_CLASSIFICATION	3.732529082205562E-6	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999449781595541	WITHOUT_CLASSIFICATION	5.5021840446013254E-5	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.9999597151721116	WITHOUT_CLASSIFICATION	4.028482788846267E-5	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9990697723288641	WITHOUT_CLASSIFICATION	9.302276711359066E-4	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999982834075068	WITHOUT_CLASSIFICATION	1.7165924932089594E-6	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9998352551377014	WITHOUT_CLASSIFICATION	1.647448622985407E-4	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999803875242452	WITHOUT_CLASSIFICATION	1.961247575476108E-5	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998585610622416	WITHOUT_CLASSIFICATION	1.414389377583606E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999551195955462	WITHOUT_CLASSIFICATION	4.488040445368546E-5	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999962488112165	WITHOUT_CLASSIFICATION	3.7511887834985096E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999947753978848	WITHOUT_CLASSIFICATION	5.2246021151969676E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999947753978848	WITHOUT_CLASSIFICATION	5.2246021151969676E-5	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9393834392190019	WITHOUT_CLASSIFICATION	0.060616560780998016	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999847501350684	WITHOUT_CLASSIFICATION	1.524986493161634E-5	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999998020770356	WITHOUT_CLASSIFICATION	1.9792296437589132E-7	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999955352651918	WITHOUT_CLASSIFICATION	4.46473480820638E-6	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999939170001206	WITHOUT_CLASSIFICATION	6.082999879336578E-6	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999962503528124	WITHOUT_CLASSIFICATION	3.749647187578898E-6	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999841052064936	WITHOUT_CLASSIFICATION	1.589479350634833E-5	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.9999128638718083	WITHOUT_CLASSIFICATION	8.713612819178218E-5	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999471133872244	WITHOUT_CLASSIFICATION	5.2886612775636075E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999947753978848	WITHOUT_CLASSIFICATION	5.2246021151969676E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999991084397345	WITHOUT_CLASSIFICATION	8.915602656535636E-7	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999811195124473	WITHOUT_CLASSIFICATION	1.8880487552754492E-5	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999899253939596	WITHOUT_CLASSIFICATION	1.0074606040337095E-5	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.99999135418069	WITHOUT_CLASSIFICATION	8.645819310090017E-6	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9997952954019917	WITHOUT_CLASSIFICATION	2.0470459800819336E-4	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999772006365769	WITHOUT_CLASSIFICATION	2.2799363423043863E-5	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999482967223057	WITHOUT_CLASSIFICATION	5.170327769438565E-5	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.9999903855021416	WITHOUT_CLASSIFICATION	9.614497858423966E-6	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999198789010447	WITHOUT_CLASSIFICATION	8.012109895522227E-5	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999795700416785	WITHOUT_CLASSIFICATION	2.042995832152709E-5	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999794603846742	WITHOUT_CLASSIFICATION	2.053961532580802E-5	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999962674709179	WITHOUT_CLASSIFICATION	3.732529082205562E-6	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999719298185162	WITHOUT_CLASSIFICATION	2.8070181483764835E-5	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9998499808562205	WITHOUT_CLASSIFICATION	1.5001914377964231E-4	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9970990644588602	WITHOUT_CLASSIFICATION	0.0029009355411397826	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9856083177672144	WITHOUT_CLASSIFICATION	0.014391682232785722	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999470563159979	WITHOUT_CLASSIFICATION	5.294368400203825E-5	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999471406624234	WITHOUT_CLASSIFICATION	5.285933757656539E-5	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999471976427325	WITHOUT_CLASSIFICATION	5.280235726751897E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999719298185162	WITHOUT_CLASSIFICATION	2.8070181483764835E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999334453876952	WITHOUT_CLASSIFICATION	6.655461230483294E-5	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999811195124473	WITHOUT_CLASSIFICATION	1.8880487552754492E-5	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9998426492786012	WITHOUT_CLASSIFICATION	1.5735072139877292E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999991084397345	WITHOUT_CLASSIFICATION	8.915602656535636E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999947753978848	WITHOUT_CLASSIFICATION	5.2246021151969676E-5	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999969361283002	WITHOUT_CLASSIFICATION	3.063871699789376E-6	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9993907986712108	WITHOUT_CLASSIFICATION	6.092013287891828E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999947753978848	WITHOUT_CLASSIFICATION	5.2246021151969676E-5	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999935374236522	WITHOUT_CLASSIFICATION	6.46257634789442E-6	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999803875242452	WITHOUT_CLASSIFICATION	1.961247575476108E-5	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998585610622416	WITHOUT_CLASSIFICATION	1.414389377583606E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999551195955462	WITHOUT_CLASSIFICATION	4.488040445368546E-5	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999736055707132	WITHOUT_CLASSIFICATION	2.6394429286862966E-5	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9998061547727345	WITHOUT_CLASSIFICATION	1.9384522726545493E-4	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999580388031891	WITHOUT_CLASSIFICATION	4.1961196810987314E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999991084397345	WITHOUT_CLASSIFICATION	8.915602656535636E-7	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999969361283002	WITHOUT_CLASSIFICATION	3.063871699789376E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999947753978848	WITHOUT_CLASSIFICATION	5.2246021151969676E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999719298185162	WITHOUT_CLASSIFICATION	2.8070181483764835E-5	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999962488112165	WITHOUT_CLASSIFICATION	3.7511887834985096E-5	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9393834392190019	WITHOUT_CLASSIFICATION	0.060616560780998016	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999847501350684	WITHOUT_CLASSIFICATION	1.524986493161634E-5	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999653557598968	WITHOUT_CLASSIFICATION	3.464424010315946E-5	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998891468967683	WITHOUT_CLASSIFICATION	1.1085310323167393E-4	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999596534394861	WITHOUT_CLASSIFICATION	4.034656051394145E-5	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999956256455097	WITHOUT_CLASSIFICATION	4.374354490280216E-6	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9987309425231382	WITHOUT_CLASSIFICATION	0.0012690574768618142	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985488550345817	WITHOUT_CLASSIFICATION	0.0014511449654182672	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999986056611178	WITHOUT_CLASSIFICATION	1.3943388822549488E-6	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999692814455966	WITHOUT_CLASSIFICATION	3.071855440343175E-5	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.999969232640306	WITHOUT_CLASSIFICATION	3.076735969402255E-5	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.999909461808368	WITHOUT_CLASSIFICATION	9.053819163185656E-5	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985488550345817	WITHOUT_CLASSIFICATION	0.0014511449654182672	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986012353002962	WITHOUT_CLASSIFICATION	0.0013987646997038153	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990717266437691	WITHOUT_CLASSIFICATION	9.28273356230927E-4	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999218279963109	WITHOUT_CLASSIFICATION	7.817200368904498E-5	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999812971526721	WITHOUT_CLASSIFICATION	1.870284732792084E-5	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987440662255821	WITHOUT_CLASSIFICATION	0.0012559337744178997	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985488550345817	WITHOUT_CLASSIFICATION	0.0014511449654182672	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9864996100466767	WITHOUT_CLASSIFICATION	0.01350038995332319	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999947753978848	WITHOUT_CLASSIFICATION	5.2246021151969676E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999947753978848	WITHOUT_CLASSIFICATION	5.2246021151969676E-5	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.9999550412103652	WITHOUT_CLASSIFICATION	4.49587896348411E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979394708528105	WITHOUT_CLASSIFICATION	0.0020605291471893932	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985488550345817	WITHOUT_CLASSIFICATION	0.0014511449654182672	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999478797218698	WITHOUT_CLASSIFICATION	5.212027813020449E-5	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999745453888891	WITHOUT_CLASSIFICATION	2.545461111090297E-5	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999972205341107	WITHOUT_CLASSIFICATION	2.7794658893850066E-6	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999892658019831	WITHOUT_CLASSIFICATION	1.0734198016913646E-5	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999833915250792	WITHOUT_CLASSIFICATION	1.6608474920824517E-5	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999994655682092	WITHOUT_CLASSIFICATION	5.344317908660315E-7	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999257925770971	WITHOUT_CLASSIFICATION	7.420742290293118E-5	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999912076296562	WITHOUT_CLASSIFICATION	8.792370343780584E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997412654526852	WITHOUT_CLASSIFICATION	2.5873454731488004E-4	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999075345206955	WITHOUT_CLASSIFICATION	9.24654793045197E-5	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9996916375576647	WITHOUT_CLASSIFICATION	3.083624423353917E-4	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9996555294884412	WITHOUT_CLASSIFICATION	3.4447051155885787E-4	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999774586058107	WITHOUT_CLASSIFICATION	2.2541394189327023E-5	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999829008961656	WITHOUT_CLASSIFICATION	1.7099103834435475E-5	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999873530742663	WITHOUT_CLASSIFICATION	1.26469257336282E-5	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999485602572178	WITHOUT_CLASSIFICATION	5.1439742782285034E-5	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999942568164865	WITHOUT_CLASSIFICATION	5.743183513503759E-5	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999138176407518	WITHOUT_CLASSIFICATION	8.618235924815497E-5	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999906275484781	WITHOUT_CLASSIFICATION	9.372451521902039E-6	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9992487306318851	WITHOUT_CLASSIFICATION	7.512693681149856E-4	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9998598565694687	WITHOUT_CLASSIFICATION	1.4014343053120088E-4	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999919948070536	WITHOUT_CLASSIFICATION	8.00519294645712E-6	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999882669388627	WITHOUT_CLASSIFICATION	1.173306113738329E-5	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999167425161715	WITHOUT_CLASSIFICATION	8.325748382851286E-5	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999779331476095	WITHOUT_CLASSIFICATION	2.2066852390429513E-5	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9997049072740622	WITHOUT_CLASSIFICATION	2.9509272593777924E-4	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999519443101151	WITHOUT_CLASSIFICATION	4.805568988497244E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999167425161715	WITHOUT_CLASSIFICATION	8.325748382851286E-5	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999982126160094	WITHOUT_CLASSIFICATION	1.7873839906817887E-6	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999963202333495	WITHOUT_CLASSIFICATION	3.679766650511388E-6	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999466079567844	WITHOUT_CLASSIFICATION	5.339204321568076E-5	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999790468263163	WITHOUT_CLASSIFICATION	2.095317368368177E-5	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999779688038712	WITHOUT_CLASSIFICATION	2.203119612881306E-5	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999526323538803	WITHOUT_CLASSIFICATION	4.736764611969694E-5	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.9999669859257471	WITHOUT_CLASSIFICATION	3.3014074252912195E-5	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999659055623874	WITHOUT_CLASSIFICATION	3.409443761255007E-5	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999659055623874	WITHOUT_CLASSIFICATION	3.409443761255007E-5	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999957807666173	WITHOUT_CLASSIFICATION	4.219233382736226E-6	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999640210608293	WITHOUT_CLASSIFICATION	3.5978939170762474E-5	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999199163071136	WITHOUT_CLASSIFICATION	8.008369288636372E-5	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999687920146771	WITHOUT_CLASSIFICATION	3.120798532284105E-5	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999539840352	WITHOUT_CLASSIFICATION	4.601596492893732E-8	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9998739184357165	WITHOUT_CLASSIFICATION	1.2608156428348458E-4	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999992833669534	WITHOUT_CLASSIFICATION	7.166330465570962E-7	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999977422617796	WITHOUT_CLASSIFICATION	2.2577382203415285E-6	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999805995322181	WITHOUT_CLASSIFICATION	1.9400467781937206E-5	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999868673593173	WITHOUT_CLASSIFICATION	1.3132640682771212E-5	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999393657903846	WITHOUT_CLASSIFICATION	6.063420961536842E-5	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999832461144259	WITHOUT_CLASSIFICATION	1.6753885574033698E-5	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998630799710493	WITHOUT_CLASSIFICATION	1.369200289507504E-4	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9193259020667778	WITHOUT_CLASSIFICATION	0.08067409793322222	IMPLEMENTATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9997928054466529	WITHOUT_CLASSIFICATION	2.0719455334704067E-4	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9998791401934015	WITHOUT_CLASSIFICATION	1.2085980659839614E-4	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999652064176872	WITHOUT_CLASSIFICATION	3.4793582312942146E-5	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9997690067178819	WITHOUT_CLASSIFICATION	2.3099328211806226E-4	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9994541695497918	WITHOUT_CLASSIFICATION	5.458304502081411E-4	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.999975169007935	WITHOUT_CLASSIFICATION	2.4830992064928956E-5	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999932194725342	WITHOUT_CLASSIFICATION	6.780527465794077E-6	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999803234637664	WITHOUT_CLASSIFICATION	1.967653623352898E-5	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9912261649294976	WITHOUT_CLASSIFICATION	0.008773835070502398	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999973496247977	WITHOUT_CLASSIFICATION	2.650375202258961E-6	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999917636538544	WITHOUT_CLASSIFICATION	8.236346145477994E-6	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9997980857031813	WITHOUT_CLASSIFICATION	2.019142968186193E-4	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9988539957599659	WITHOUT_CLASSIFICATION	0.0011460042400339991	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9997616313956397	WITHOUT_CLASSIFICATION	2.3836860436037956E-4	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9810151316125143	WITHOUT_CLASSIFICATION	0.018984868387485757	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9998278786168433	WITHOUT_CLASSIFICATION	1.7212138315675493E-4	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999859702435083	WITHOUT_CLASSIFICATION	1.4029756491685103E-5	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.9999849501834818	WITHOUT_CLASSIFICATION	1.5049816518073065E-5	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999942569130431	WITHOUT_CLASSIFICATION	5.743086956876152E-6	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.9999897677359847	WITHOUT_CLASSIFICATION	1.023226401523747E-5	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999801285483689	WITHOUT_CLASSIFICATION	1.9871451630988792E-5	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.9999518909925036	WITHOUT_CLASSIFICATION	4.810900749640521E-5	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9971380797989997	WITHOUT_CLASSIFICATION	0.0028619202010002794	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9973121440338134	WITHOUT_CLASSIFICATION	0.002687855966186644	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999571178213891	WITHOUT_CLASSIFICATION	4.2882178610955785E-5	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999944994675989	WITHOUT_CLASSIFICATION	5.500532401139631E-6	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998694449589759	WITHOUT_CLASSIFICATION	1.305550410241683E-4	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999939170001206	WITHOUT_CLASSIFICATION	6.082999879336578E-6	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999939170001206	WITHOUT_CLASSIFICATION	6.082999879336578E-6	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999727224719281	WITHOUT_CLASSIFICATION	2.7277528071923327E-5	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999993234170661	WITHOUT_CLASSIFICATION	6.76582933832702E-7	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999904014260769	WITHOUT_CLASSIFICATION	9.598573923166609E-6	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999989404446672	WITHOUT_CLASSIFICATION	1.0595553327927986E-6	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999892850780984	WITHOUT_CLASSIFICATION	1.0714921901498776E-5	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.9998747834976337	WITHOUT_CLASSIFICATION	1.2521650236631515E-4	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999394363522902	WITHOUT_CLASSIFICATION	6.05636477098533E-5	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999833131065592	WITHOUT_CLASSIFICATION	1.6686893440714846E-5	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999994690503402	WITHOUT_CLASSIFICATION	5.309496598253297E-7	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.999551930691647	WITHOUT_CLASSIFICATION	4.4806930835301326E-4	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999802574175161	WITHOUT_CLASSIFICATION	1.9742582483909608E-5	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999969102192083	WITHOUT_CLASSIFICATION	3.089780791773149E-6	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998571583280731	WITHOUT_CLASSIFICATION	1.428416719269183E-4	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999452463092332	WITHOUT_CLASSIFICATION	5.4753690766801156E-5	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999411960806548	WITHOUT_CLASSIFICATION	5.8803919345089225E-5	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999867753741735	WITHOUT_CLASSIFICATION	1.3224625826552511E-5	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9999682955876182	WITHOUT_CLASSIFICATION	3.170441238189273E-5	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9998023293909347	WITHOUT_CLASSIFICATION	1.9767060906538878E-4	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9997842884643362	WITHOUT_CLASSIFICATION	2.1571153566383872E-4	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999736346411775	WITHOUT_CLASSIFICATION	2.6365358822448858E-5	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.9998426793204968	WITHOUT_CLASSIFICATION	1.573206795032785E-4	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999999047759441	WITHOUT_CLASSIFICATION	9.522405588724625E-7	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999736346411775	WITHOUT_CLASSIFICATION	2.6365358822448858E-5	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999918806805804	WITHOUT_CLASSIFICATION	8.119319419657431E-6	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.999995612231814	WITHOUT_CLASSIFICATION	4.387768186118643E-6	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998950646464876	WITHOUT_CLASSIFICATION	1.0493535351250373E-4	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999024875122565	WITHOUT_CLASSIFICATION	9.751248774358505E-5	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.9997864972096515	WITHOUT_CLASSIFICATION	2.1350279034845952E-4	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999986794771949	WITHOUT_CLASSIFICATION	1.3205228050562425E-6	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.99994544542524	WITHOUT_CLASSIFICATION	5.455457475999705E-5	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999680272782555	WITHOUT_CLASSIFICATION	3.197272174440978E-5	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998090992414729	WITHOUT_CLASSIFICATION	1.909007585271468E-4	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999946730535237	WITHOUT_CLASSIFICATION	5.3269464763002336E-5	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999997240373585	WITHOUT_CLASSIFICATION	2.7596264150005367E-7	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999940013023957	WITHOUT_CLASSIFICATION	5.998697604294991E-6	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9998550285595943	WITHOUT_CLASSIFICATION	1.4497144040571199E-4	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999669488195722	WITHOUT_CLASSIFICATION	3.3051180427922866E-5	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9982133853312505	WITHOUT_CLASSIFICATION	0.0017866146687495553	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999799275888861	WITHOUT_CLASSIFICATION	2.0072411113885434E-5	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999589750305303	WITHOUT_CLASSIFICATION	4.1024969469712556E-5	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999589750305303	WITHOUT_CLASSIFICATION	4.1024969469712556E-5	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9977540596538574	WITHOUT_CLASSIFICATION	0.002245940346142545	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9999542710841172	WITHOUT_CLASSIFICATION	4.5728915882729324E-5	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.9999719374115894	WITHOUT_CLASSIFICATION	2.8062588410554588E-5	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999624962903837	WITHOUT_CLASSIFICATION	3.7503709616290746E-5	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9998096810222805	WITHOUT_CLASSIFICATION	1.903189777194569E-4	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9999109796493606	WITHOUT_CLASSIFICATION	8.90203506393793E-5	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999845570764305	WITHOUT_CLASSIFICATION	1.5442923569407308E-5	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.9999770218355921	WITHOUT_CLASSIFICATION	2.297816440789702E-5	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9973697978513484	WITHOUT_CLASSIFICATION	0.0026302021486516117	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.6281545746891039	IMPLEMENTATION	0.371845425310896	WITHOUT_CLASSIFICATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999839847301443	WITHOUT_CLASSIFICATION	1.6015269855692478E-4	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9989702886015653	WITHOUT_CLASSIFICATION	0.001029711398434662	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.99997821382859	WITHOUT_CLASSIFICATION	2.1786171410051254E-5	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999618375719757	WITHOUT_CLASSIFICATION	3.816242802436802E-5	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999485602572178	WITHOUT_CLASSIFICATION	5.1439742782285034E-5	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999267630584547	WITHOUT_CLASSIFICATION	7.32369415451745E-5	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999960838927221	WITHOUT_CLASSIFICATION	3.916107277956389E-6	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9994993734711952	WITHOUT_CLASSIFICATION	5.006265288046598E-4	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999908114495096	WITHOUT_CLASSIFICATION	9.188550490465272E-6	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999958996409705	WITHOUT_CLASSIFICATION	4.100359029434509E-6	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.999939455814878	WITHOUT_CLASSIFICATION	6.054418512205867E-5	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9863348830359451	WITHOUT_CLASSIFICATION	0.013665116964054876	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999981886407637	WITHOUT_CLASSIFICATION	1.8113592363197296E-6	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999737090380719	WITHOUT_CLASSIFICATION	2.629096192805958E-5	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999957213652457	WITHOUT_CLASSIFICATION	4.278634754297824E-5	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999975561225012	WITHOUT_CLASSIFICATION	2.443877498779788E-6	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999432848478236	WITHOUT_CLASSIFICATION	5.671515217637794E-5	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9995556907874069	WITHOUT_CLASSIFICATION	4.44309212593119E-4	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9999667393339419	WITHOUT_CLASSIFICATION	3.326066605819303E-5	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.999988276918285	WITHOUT_CLASSIFICATION	1.1723081715061793E-5	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9998801762701456	WITHOUT_CLASSIFICATION	1.1982372985445295E-4	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999962970327745	WITHOUT_CLASSIFICATION	3.702967225645746E-6	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999042344566869	WITHOUT_CLASSIFICATION	9.576554331302963E-5	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999997763749322	WITHOUT_CLASSIFICATION	2.23625067754916E-7	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.999986531314658	WITHOUT_CLASSIFICATION	1.3468685342119974E-5	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999254584574373	WITHOUT_CLASSIFICATION	7.454154256264305E-5	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999628121810291	WITHOUT_CLASSIFICATION	3.71878189708806E-5	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998309920070343	WITHOUT_CLASSIFICATION	1.690079929658412E-4	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.999757422085661	WITHOUT_CLASSIFICATION	2.4257791433909346E-4	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.9999159698868697	WITHOUT_CLASSIFICATION	8.403011313025415E-5	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9998659375752519	WITHOUT_CLASSIFICATION	1.3406242474814505E-4	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999986242508566	WITHOUT_CLASSIFICATION	1.3757491434151824E-6	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9953675455531947	WITHOUT_CLASSIFICATION	0.004632454446805273	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9989265588153569	WITHOUT_CLASSIFICATION	0.001073441184643163	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999702850197608	WITHOUT_CLASSIFICATION	2.9714980239234896E-5	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999051185994322	WITHOUT_CLASSIFICATION	9.488140056770615E-5	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999733697484331	WITHOUT_CLASSIFICATION	2.6630251566853646E-5	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999889250640711	WITHOUT_CLASSIFICATION	1.1074935928820213E-5	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999798470622243	WITHOUT_CLASSIFICATION	2.015293777568344E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997412654526852	WITHOUT_CLASSIFICATION	2.5873454731488004E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997412654526852	WITHOUT_CLASSIFICATION	2.5873454731488004E-4	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999975405874123	WITHOUT_CLASSIFICATION	2.4594125877727466E-6	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9918256886297686	WITHOUT_CLASSIFICATION	0.008174311370231358	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999085656367862	WITHOUT_CLASSIFICATION	9.143436321381759E-5	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999534435158746	WITHOUT_CLASSIFICATION	4.655648412538839E-5	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999085656367862	WITHOUT_CLASSIFICATION	9.143436321381759E-5	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999112112524945	WITHOUT_CLASSIFICATION	8.878874750555061E-5	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999923694230906	WITHOUT_CLASSIFICATION	7.630576909447053E-6	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999954329828373	WITHOUT_CLASSIFICATION	4.567017162614941E-6	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999936080186733	WITHOUT_CLASSIFICATION	6.391981326733101E-6	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999870212178436	WITHOUT_CLASSIFICATION	1.2978782156513102E-5	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999759540987261	WITHOUT_CLASSIFICATION	2.4045901273968774E-5	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999632093051297	WITHOUT_CLASSIFICATION	3.679069487026069E-5	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.9999861847232412	WITHOUT_CLASSIFICATION	1.381527675880114E-5	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9998721585616613	WITHOUT_CLASSIFICATION	1.2784143833873219E-4	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9564295168314352	WITHOUT_CLASSIFICATION	0.04357048316856474	IMPLEMENTATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.9998022083609278	WITHOUT_CLASSIFICATION	1.9779163907208684E-4	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9996513077422985	WITHOUT_CLASSIFICATION	3.486922577015184E-4	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999863035667814	WITHOUT_CLASSIFICATION	1.3696433218595782E-5	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.999974943523223	WITHOUT_CLASSIFICATION	2.5056476776967555E-5	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9946790350811678	WITHOUT_CLASSIFICATION	0.005320964918832143	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9998077060795927	WITHOUT_CLASSIFICATION	1.9229392040731995E-4	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999926635733053	WITHOUT_CLASSIFICATION	7.336426694788782E-6	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999926635733053	WITHOUT_CLASSIFICATION	7.336426694788782E-6	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999668637233691	WITHOUT_CLASSIFICATION	3.31362766309201E-5	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9998336184593962	WITHOUT_CLASSIFICATION	1.6638154060380833E-4	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999998681680783	WITHOUT_CLASSIFICATION	1.3183192172003813E-7	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999930354800868	WITHOUT_CLASSIFICATION	6.964519913275087E-6	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999968179633294	WITHOUT_CLASSIFICATION	3.182036670574209E-6	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999972576702907	WITHOUT_CLASSIFICATION	2.742329709240463E-6	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9994056885607978	WITHOUT_CLASSIFICATION	5.943114392021386E-4	IMPLEMENTATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999927245920402	WITHOUT_CLASSIFICATION	7.275407959671611E-6	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.9999023887405727	WITHOUT_CLASSIFICATION	9.761125942735571E-5	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999971373215945	WITHOUT_CLASSIFICATION	2.862678405492453E-6	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999991246862436	WITHOUT_CLASSIFICATION	8.753137562237699E-7	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9997856110626901	WITHOUT_CLASSIFICATION	2.1438893730979088E-4	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999615904344822	WITHOUT_CLASSIFICATION	3.840956551768694E-5	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999979347123209	WITHOUT_CLASSIFICATION	2.065287679185346E-6	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998462653889888	WITHOUT_CLASSIFICATION	1.5373461101115494E-4	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999156992368184	WITHOUT_CLASSIFICATION	8.430076318153432E-5	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999900960031013	WITHOUT_CLASSIFICATION	9.903996898714757E-6	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9994582087716128	WITHOUT_CLASSIFICATION	5.417912283871511E-4	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.9998670632502485	WITHOUT_CLASSIFICATION	1.3293674975143891E-4	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999992973278349	WITHOUT_CLASSIFICATION	7.026721651468524E-7	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999958903515241	WITHOUT_CLASSIFICATION	4.109648475885403E-6	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9990425056812865	WITHOUT_CLASSIFICATION	9.574943187135401E-4	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9987549802495048	WITHOUT_CLASSIFICATION	0.001245019750495187	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9939209897978704	WITHOUT_CLASSIFICATION	0.006079010202129557	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.9999962312324648	WITHOUT_CLASSIFICATION	3.7687675350811855E-6	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.9999995485210509	WITHOUT_CLASSIFICATION	4.5147894912878926E-7	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999826231136304	WITHOUT_CLASSIFICATION	1.7376886369621764E-5	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9997077519057977	WITHOUT_CLASSIFICATION	2.922480942023086E-4	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999871934980635	WITHOUT_CLASSIFICATION	1.2806501936415655E-5	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999998475366484	WITHOUT_CLASSIFICATION	1.5246335153259424E-7	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999951256604019	WITHOUT_CLASSIFICATION	4.8743395980927865E-6	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999992413218086	WITHOUT_CLASSIFICATION	7.586781913033647E-7	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998975139323268	WITHOUT_CLASSIFICATION	1.0248606767320922E-4	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9936848341219016	WITHOUT_CLASSIFICATION	0.006315165878098361	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999137007100865	WITHOUT_CLASSIFICATION	8.629928991355758E-5	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999957006869881	WITHOUT_CLASSIFICATION	4.299313011863728E-6	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999979681206847	WITHOUT_CLASSIFICATION	2.0318793153034642E-5	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999973007445043	WITHOUT_CLASSIFICATION	2.6992554955783212E-6	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999991087404945	WITHOUT_CLASSIFICATION	8.912595055891164E-7	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9995109099519932	WITHOUT_CLASSIFICATION	4.890900480068216E-4	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999883577513099	WITHOUT_CLASSIFICATION	1.1642248690088245E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999535865754892	WITHOUT_CLASSIFICATION	4.64134245107806E-5	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9998471060844503	WITHOUT_CLASSIFICATION	1.5289391554973442E-4	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9148584307804252	WITHOUT_CLASSIFICATION	0.08514156921957486	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9983461305318696	WITHOUT_CLASSIFICATION	0.0016538694681303894	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999792348014062	WITHOUT_CLASSIFICATION	2.076519859382359E-5	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999744994368934	WITHOUT_CLASSIFICATION	2.5500563106510497E-5	IMPLEMENTATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999997569694168	WITHOUT_CLASSIFICATION	2.4303058325340316E-7	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999323123216497	WITHOUT_CLASSIFICATION	6.768767835030018E-5	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999887370188201	WITHOUT_CLASSIFICATION	1.1262981180000297E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999535865754892	WITHOUT_CLASSIFICATION	4.64134245107806E-5	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999996636148432	WITHOUT_CLASSIFICATION	3.363851567874723E-6	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999968486619115	WITHOUT_CLASSIFICATION	3.151338088437571E-6	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.998902442874671	WITHOUT_CLASSIFICATION	0.0010975571253290248	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.9999838587500861	WITHOUT_CLASSIFICATION	1.6141249913896137E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999334453876952	WITHOUT_CLASSIFICATION	6.655461230483294E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999334453876952	WITHOUT_CLASSIFICATION	6.655461230483294E-5	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999997274231862	WITHOUT_CLASSIFICATION	2.725768138075127E-7	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999992589027606	WITHOUT_CLASSIFICATION	7.410972394347814E-7	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999991975221116	WITHOUT_CLASSIFICATION	8.024778883432747E-7	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999581274243196	WITHOUT_CLASSIFICATION	4.187257568051337E-5	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9996915307267656	WITHOUT_CLASSIFICATION	3.084692732343662E-4	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9998251752964507	WITHOUT_CLASSIFICATION	1.748247035493328E-4	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999594017961603	WITHOUT_CLASSIFICATION	4.0598203839752105E-5	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999429270787153	WITHOUT_CLASSIFICATION	5.707292128472936E-5	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999942643456015	WITHOUT_CLASSIFICATION	5.735654398485915E-6	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.999949479862628	WITHOUT_CLASSIFICATION	5.052013737198162E-5	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999907533773769	WITHOUT_CLASSIFICATION	9.246622623227323E-6	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999984646218232	WITHOUT_CLASSIFICATION	1.535378176833003E-6	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999487704049942	WITHOUT_CLASSIFICATION	5.122959500587646E-5	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999603749583826	WITHOUT_CLASSIFICATION	3.962504161740037E-5	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9998573121132591	WITHOUT_CLASSIFICATION	1.4268788674092264E-4	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9995947228863671	WITHOUT_CLASSIFICATION	4.0527711363293125E-4	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9927615390143338	WITHOUT_CLASSIFICATION	0.007238460985666052	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999987216923435	WITHOUT_CLASSIFICATION	1.2783076564987893E-6	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999663258674001	WITHOUT_CLASSIFICATION	3.367413259986115E-5	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9998995550100966	WITHOUT_CLASSIFICATION	1.004449899033438E-4	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999470563159979	WITHOUT_CLASSIFICATION	5.294368400203825E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9997882225429892	WITHOUT_CLASSIFICATION	2.1177745701093652E-4	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999858119269314	WITHOUT_CLASSIFICATION	1.4188073068575855E-5	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9383339435116929	WITHOUT_CLASSIFICATION	0.061666056488307155	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9951449571418794	WITHOUT_CLASSIFICATION	0.00485504285812051	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999617336094611	WITHOUT_CLASSIFICATION	3.8266390538886186E-5	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999643041120385	WITHOUT_CLASSIFICATION	3.569588796160124E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9998876720775451	WITHOUT_CLASSIFICATION	1.1232792245496866E-4	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999998666664753	WITHOUT_CLASSIFICATION	1.3333352460204816E-7	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999664028114377	WITHOUT_CLASSIFICATION	3.3597188562368956E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999999217276158	WITHOUT_CLASSIFICATION	7.827238420164409E-7	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999998783138841	WITHOUT_CLASSIFICATION	1.2168611586537911E-7	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9997251233199079	WITHOUT_CLASSIFICATION	2.748766800920989E-4	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999992156481883	WITHOUT_CLASSIFICATION	7.843518117649251E-7	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.998612031621196	WITHOUT_CLASSIFICATION	0.001387968378804034	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999664028114377	WITHOUT_CLASSIFICATION	3.3597188562368956E-5	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999818245567592	WITHOUT_CLASSIFICATION	1.8175443240799388E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999992156481883	WITHOUT_CLASSIFICATION	7.843518117649251E-7	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999942491912057	WITHOUT_CLASSIFICATION	5.750808794269268E-6	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.999654119878541	WITHOUT_CLASSIFICATION	3.4588012145899603E-4	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999991246862436	WITHOUT_CLASSIFICATION	8.753137562237699E-7	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999895947673592	WITHOUT_CLASSIFICATION	1.0405232640937843E-5	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999257925770971	WITHOUT_CLASSIFICATION	7.420742290293118E-5	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999995351870963	WITHOUT_CLASSIFICATION	4.64812903749721E-7	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999922368155515	WITHOUT_CLASSIFICATION	7.763184448486361E-6	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999999605117334	WITHOUT_CLASSIFICATION	3.9488266602389356E-7	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.9999976666856091	WITHOUT_CLASSIFICATION	2.333314390968468E-6	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999671362439666	WITHOUT_CLASSIFICATION	3.286375603339255E-5	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999945477296506	WITHOUT_CLASSIFICATION	5.452270349450031E-6	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999589750305303	WITHOUT_CLASSIFICATION	4.1024969469712556E-5	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999976376810736	WITHOUT_CLASSIFICATION	2.3623189263500347E-6	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999335554120101	WITHOUT_CLASSIFICATION	6.64445879898739E-5	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999880883305095	WITHOUT_CLASSIFICATION	1.1911669490524327E-5	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9995763440572708	WITHOUT_CLASSIFICATION	4.2365594272913553E-4	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9999202133372602	WITHOUT_CLASSIFICATION	7.97866627397628E-5	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.999848031221862	WITHOUT_CLASSIFICATION	1.519687781378937E-4	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999780086101614	WITHOUT_CLASSIFICATION	2.1991389838627664E-5	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999389721703369	WITHOUT_CLASSIFICATION	6.1027829663255175E-5	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999855511393075	WITHOUT_CLASSIFICATION	1.4448860692413641E-5	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999921756114031	WITHOUT_CLASSIFICATION	7.824388596915E-6	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999946206913523	WITHOUT_CLASSIFICATION	5.379308647701422E-5	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999589750305303	WITHOUT_CLASSIFICATION	4.1024969469712556E-5	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.99989057863296	WITHOUT_CLASSIFICATION	1.0942136703994125E-4	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999859090509674	WITHOUT_CLASSIFICATION	1.4090949032524911E-5	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999980314502868	WITHOUT_CLASSIFICATION	1.968549713214225E-6	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999817773660971	WITHOUT_CLASSIFICATION	1.8222633902956337E-5	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.9999119299332592	WITHOUT_CLASSIFICATION	8.807006674082316E-5	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.9999787025406797	WITHOUT_CLASSIFICATION	2.1297459320315208E-5	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977008810032396	WITHOUT_CLASSIFICATION	0.0022991189967604183	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993267972593585	WITHOUT_CLASSIFICATION	6.732027406415226E-4	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9998429598390438	WITHOUT_CLASSIFICATION	1.57040160956286E-4	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.999475681412555	WITHOUT_CLASSIFICATION	5.243185874449991E-4	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999943949301758	WITHOUT_CLASSIFICATION	5.6050698241023094E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999722393298426	WITHOUT_CLASSIFICATION	2.7760670157408393E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999722393298426	WITHOUT_CLASSIFICATION	2.7760670157408393E-5	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999838099920093	WITHOUT_CLASSIFICATION	1.6190007990659023E-5	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9996438440385952	WITHOUT_CLASSIFICATION	3.561559614048864E-4	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999971291613814	WITHOUT_CLASSIFICATION	2.8708386185932876E-5	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999883654115636	WITHOUT_CLASSIFICATION	1.1634588436500736E-5	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9950547195259407	WITHOUT_CLASSIFICATION	0.004945280474059283	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9998974932079193	WITHOUT_CLASSIFICATION	1.0250679208065459E-4	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999994411763928	WITHOUT_CLASSIFICATION	5.588236071717873E-7	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999829042176019	WITHOUT_CLASSIFICATION	1.7095782398013342E-5	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.999968005091862	WITHOUT_CLASSIFICATION	3.1994908137861744E-5	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999950528547016	WITHOUT_CLASSIFICATION	4.9471452984266075E-6	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999288396762586	WITHOUT_CLASSIFICATION	7.116032374140418E-5	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999980983027552	WITHOUT_CLASSIFICATION	1.9016972447692735E-6	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999858672779846	WITHOUT_CLASSIFICATION	1.4132722015318079E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999722393298426	WITHOUT_CLASSIFICATION	2.7760670157408393E-5	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999900724545083	WITHOUT_CLASSIFICATION	9.927545491681093E-6	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999519778448437	WITHOUT_CLASSIFICATION	4.8022155156246536E-5	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999964523735863	WITHOUT_CLASSIFICATION	3.547626413795979E-6	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999513738396258	WITHOUT_CLASSIFICATION	4.862616037417433E-5	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999988123031974	WITHOUT_CLASSIFICATION	1.1876968026188968E-6	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998393619837692	WITHOUT_CLASSIFICATION	1.6063801623081677E-4	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999582622973361	WITHOUT_CLASSIFICATION	4.1737702663900606E-5	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999851542449296	WITHOUT_CLASSIFICATION	1.4845755070450218E-5	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999920709514526	WITHOUT_CLASSIFICATION	7.929048547325424E-6	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999951831871375	WITHOUT_CLASSIFICATION	4.816812862414957E-6	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999682872417667	WITHOUT_CLASSIFICATION	3.171275823331174E-5	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977008810032396	WITHOUT_CLASSIFICATION	0.0022991189967604183	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999722393298426	WITHOUT_CLASSIFICATION	2.7760670157408393E-5	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999878957547808	WITHOUT_CLASSIFICATION	1.2104245219243304E-5	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9996617337554364	WITHOUT_CLASSIFICATION	3.382662445635025E-4	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.9999664797376104	WITHOUT_CLASSIFICATION	3.3520262389476714E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9994910742902764	WITHOUT_CLASSIFICATION	5.089257097236052E-4	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999768471010367	WITHOUT_CLASSIFICATION	2.3152898963225174E-5	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999583659032256	WITHOUT_CLASSIFICATION	4.1634096774302406E-5	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998187137881008	WITHOUT_CLASSIFICATION	1.8128621189918102E-4	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999989579400204	WITHOUT_CLASSIFICATION	1.0420599795907525E-6	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999968665915495	WITHOUT_CLASSIFICATION	3.133408450447277E-6	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999408210984821	WITHOUT_CLASSIFICATION	5.91789015178013E-5	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9995262653246079	WITHOUT_CLASSIFICATION	4.737346753921638E-4	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999871934980635	WITHOUT_CLASSIFICATION	1.2806501936415655E-5	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999909376266025	WITHOUT_CLASSIFICATION	9.062373397514742E-6	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999645538997944	WITHOUT_CLASSIFICATION	3.5446100205574564E-5	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999112112524945	WITHOUT_CLASSIFICATION	8.878874750555061E-5	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999972988776288	WITHOUT_CLASSIFICATION	2.7011223712523343E-6	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999958247667406	WITHOUT_CLASSIFICATION	4.175233259343689E-6	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999936636823072	WITHOUT_CLASSIFICATION	6.336317692685977E-6	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.9999642235171109	WITHOUT_CLASSIFICATION	3.5776482889113784E-5	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9998850260143781	WITHOUT_CLASSIFICATION	1.1497398562181605E-4	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999792582245187	WITHOUT_CLASSIFICATION	2.0741775481214156E-5	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999792582245187	WITHOUT_CLASSIFICATION	2.0741775481214156E-5	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9998258312099599	WITHOUT_CLASSIFICATION	1.741687900399437E-4	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.999995908443844	WITHOUT_CLASSIFICATION	4.091556155999083E-6	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999910923190016	WITHOUT_CLASSIFICATION	8.907680998287388E-6	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999825036469019	WITHOUT_CLASSIFICATION	1.7496353098199632E-5	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999319085579442	WITHOUT_CLASSIFICATION	6.809144205588258E-5	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999623140377919	WITHOUT_CLASSIFICATION	3.7685962207999336E-5	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9989675897547252	WITHOUT_CLASSIFICATION	0.0010324102452748216	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9925305654625075	WITHOUT_CLASSIFICATION	0.007469434537492591	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9925305654625075	WITHOUT_CLASSIFICATION	0.007469434537492591	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9108110550187316	WITHOUT_CLASSIFICATION	0.08918894498126848	IMPLEMENTATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999571447282565	WITHOUT_CLASSIFICATION	4.285527174361157E-5	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999972087188432	WITHOUT_CLASSIFICATION	2.791281156712623E-6	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999651275861697	WITHOUT_CLASSIFICATION	3.487241383030256E-5	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999651275861697	WITHOUT_CLASSIFICATION	3.487241383030256E-5	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999651275861697	WITHOUT_CLASSIFICATION	3.487241383030256E-5	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999207724571834	WITHOUT_CLASSIFICATION	7.92275428166219E-5	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999786242129055	WITHOUT_CLASSIFICATION	2.1375787094471432E-5	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9929747661548135	WITHOUT_CLASSIFICATION	0.00702523384518645	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999823274635229	WITHOUT_CLASSIFICATION	1.7672536477145334E-5	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999996340935911	WITHOUT_CLASSIFICATION	3.6590640889553566E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999722393298426	WITHOUT_CLASSIFICATION	2.7760670157408393E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999722393298426	WITHOUT_CLASSIFICATION	2.7760670157408393E-5	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9997454162828128	WITHOUT_CLASSIFICATION	2.5458371718725117E-4	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999982735619638	WITHOUT_CLASSIFICATION	1.7264380361313536E-6	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9993072982254296	WITHOUT_CLASSIFICATION	6.927017745703791E-4	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.999871506259421	WITHOUT_CLASSIFICATION	1.2849374057901226E-4	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999915620901563	WITHOUT_CLASSIFICATION	8.43790984376708E-6	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.999941073948754	WITHOUT_CLASSIFICATION	5.8926051246032135E-5	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999856757848639	WITHOUT_CLASSIFICATION	1.4324215136136218E-5	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.999976891354458	WITHOUT_CLASSIFICATION	2.3108645542106345E-5	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999706093511923	WITHOUT_CLASSIFICATION	2.9390648807623703E-5	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999985923407028	WITHOUT_CLASSIFICATION	1.4076592972099102E-6	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999924232535097	WITHOUT_CLASSIFICATION	7.57674649032103E-6	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999461471019526	WITHOUT_CLASSIFICATION	5.3852898047353765E-5	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999690919785205	WITHOUT_CLASSIFICATION	3.090802147949034E-5	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999690919785205	WITHOUT_CLASSIFICATION	3.090802147949034E-5	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999690919785205	WITHOUT_CLASSIFICATION	3.090802147949034E-5	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999690919785205	WITHOUT_CLASSIFICATION	3.090802147949034E-5	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999690919785205	WITHOUT_CLASSIFICATION	3.090802147949034E-5	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999587403600405	WITHOUT_CLASSIFICATION	4.125963995942981E-5	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999587403600405	WITHOUT_CLASSIFICATION	4.125963995942981E-5	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999587403600405	WITHOUT_CLASSIFICATION	4.125963995942981E-5	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999587403600405	WITHOUT_CLASSIFICATION	4.125963995942981E-5	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998156605190897	WITHOUT_CLASSIFICATION	1.8433948091035773E-4	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999792582245187	WITHOUT_CLASSIFICATION	2.0741775481214156E-5	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9996843416869013	WITHOUT_CLASSIFICATION	3.156583130986556E-4	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999587403600405	WITHOUT_CLASSIFICATION	4.125963995942981E-5	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9998797944116044	WITHOUT_CLASSIFICATION	1.2020558839566481E-4	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999698804075425	WITHOUT_CLASSIFICATION	3.011959245746358E-5	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999751198975219	WITHOUT_CLASSIFICATION	2.4880102478101253E-5	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999794895469339	WITHOUT_CLASSIFICATION	2.051045306598016E-5	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999496164318	WITHOUT_CLASSIFICATION	5.03835682083906E-8	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999666856796897	WITHOUT_CLASSIFICATION	3.33143203102472E-5	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999908314653046	WITHOUT_CLASSIFICATION	9.168534695396553E-5	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999946643933958	WITHOUT_CLASSIFICATION	5.335606604156119E-6	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999903938711134	WITHOUT_CLASSIFICATION	9.606128886600009E-6	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999264329618	WITHOUT_CLASSIFICATION	7.35670382074441E-8	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999984788200303	WITHOUT_CLASSIFICATION	1.5211799696687617E-6	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.9999787193162054	WITHOUT_CLASSIFICATION	2.128068379462122E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999584132926241	WITHOUT_CLASSIFICATION	4.158670737591905E-5	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.9997801594531355	WITHOUT_CLASSIFICATION	2.1984054686457737E-4	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.8960315122052519	IMPLEMENTATION	0.10396848779474811	WITHOUT_CLASSIFICATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999969828241907	WITHOUT_CLASSIFICATION	3.0171758093306816E-6	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999947299117327	WITHOUT_CLASSIFICATION	5.270088267313776E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999934752186475	WITHOUT_CLASSIFICATION	6.524781352621167E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999934752186475	WITHOUT_CLASSIFICATION	6.524781352621167E-6	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999794251555401	WITHOUT_CLASSIFICATION	2.0574844459907532E-5	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999974200949298	WITHOUT_CLASSIFICATION	2.579905070138393E-6	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999784303949895	WITHOUT_CLASSIFICATION	2.156960501054489E-5	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999472491267556	WITHOUT_CLASSIFICATION	5.275087324430826E-5	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999748830860837	WITHOUT_CLASSIFICATION	2.5116913916291256E-5	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999573607600937	WITHOUT_CLASSIFICATION	4.2639239906186696E-5	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999639648919244	WITHOUT_CLASSIFICATION	3.6035108075600704E-5	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999956026533003	WITHOUT_CLASSIFICATION	4.39734669964642E-6	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999818636492175	WITHOUT_CLASSIFICATION	1.8136350782446212E-5	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999988974498184	WITHOUT_CLASSIFICATION	1.1025501815732205E-6	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999608894949035	WITHOUT_CLASSIFICATION	3.9110505096589665E-5	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999871934980635	WITHOUT_CLASSIFICATION	1.2806501936415655E-5	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999944486873056	WITHOUT_CLASSIFICATION	5.551312694498893E-6	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999987158187581	WITHOUT_CLASSIFICATION	1.2841812418285153E-6	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999933757263796	WITHOUT_CLASSIFICATION	6.62427362035235E-6	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999894784961584	WITHOUT_CLASSIFICATION	1.0521503841594954E-5	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999428254223	WITHOUT_CLASSIFICATION	5.717457771970866E-8	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999428254223	WITHOUT_CLASSIFICATION	5.717457771970866E-8	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9991744227742372	WITHOUT_CLASSIFICATION	8.255772257628529E-4	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999997439825662	WITHOUT_CLASSIFICATION	2.5601743381053773E-7	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999918286657895	WITHOUT_CLASSIFICATION	8.171334210402495E-6	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.9999938368376582	WITHOUT_CLASSIFICATION	6.1631623418711744E-6	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.9999830027181135	WITHOUT_CLASSIFICATION	1.6997281886563252E-5	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999931820672243	WITHOUT_CLASSIFICATION	6.817932775724387E-6	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9998935050356897	WITHOUT_CLASSIFICATION	1.0649496431030304E-4	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999836156235277	WITHOUT_CLASSIFICATION	1.638437647225838E-5	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999490842625199	WITHOUT_CLASSIFICATION	5.0915737480163014E-5	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999367561603	WITHOUT_CLASSIFICATION	6.324383965942119E-8	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999406375734965	WITHOUT_CLASSIFICATION	5.9362426503602894E-5	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999836156235277	WITHOUT_CLASSIFICATION	1.638437647225838E-5	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9998330150896588	WITHOUT_CLASSIFICATION	1.6698491034113403E-4	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.998626548005919	WITHOUT_CLASSIFICATION	0.0013734519940810245	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999841452206858	WITHOUT_CLASSIFICATION	1.5854779314240094E-5	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9999694464038736	WITHOUT_CLASSIFICATION	3.0553596126383645E-5	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999871684365	WITHOUT_CLASSIFICATION	1.2831563599721826E-8	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999711447932574	WITHOUT_CLASSIFICATION	2.8855206742488245E-5	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9991698602677832	WITHOUT_CLASSIFICATION	8.301397322169148E-4	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999879631810893	WITHOUT_CLASSIFICATION	1.203681891080925E-5	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999919063488844	WITHOUT_CLASSIFICATION	8.093651115563962E-6	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998764528992016	WITHOUT_CLASSIFICATION	1.235471007984632E-4	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9995625913234262	WITHOUT_CLASSIFICATION	4.3740867657370475E-4	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999952944579541	WITHOUT_CLASSIFICATION	4.705542045872984E-6	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998522870828487	WITHOUT_CLASSIFICATION	1.4771291715130744E-4	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.999569941691144	WITHOUT_CLASSIFICATION	4.3005830885609617E-4	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998426860891507	WITHOUT_CLASSIFICATION	1.573139108492846E-4	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999944204586635	WITHOUT_CLASSIFICATION	5.57954133647577E-6	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999828435351417	WITHOUT_CLASSIFICATION	1.715646485832458E-5	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9886098896453305	WITHOUT_CLASSIFICATION	0.011390110354669563	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9886098896453305	WITHOUT_CLASSIFICATION	0.011390110354669563	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9991698602677832	WITHOUT_CLASSIFICATION	8.301397322169148E-4	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9910113200997226	WITHOUT_CLASSIFICATION	0.008988679900277324	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999630734980118	WITHOUT_CLASSIFICATION	3.692650198811908E-5	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999585622767284	WITHOUT_CLASSIFICATION	4.143772327149845E-5	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.9999572649987188	WITHOUT_CLASSIFICATION	4.273500128109906E-5	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999931177041903	WITHOUT_CLASSIFICATION	6.8822958097111414E-6	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999856018002035	WITHOUT_CLASSIFICATION	1.4398199796573305E-5	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999903307387038	WITHOUT_CLASSIFICATION	9.669261296186128E-6	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9998192314833552	WITHOUT_CLASSIFICATION	1.8076851664488544E-4	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999672489643427	WITHOUT_CLASSIFICATION	3.275103565724092E-5	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999630435198167	WITHOUT_CLASSIFICATION	3.6956480183306376E-5	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999865336886676	WITHOUT_CLASSIFICATION	1.3466311332353108E-5	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999844107549989	WITHOUT_CLASSIFICATION	1.5589245001154536E-5	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998447124376362	WITHOUT_CLASSIFICATION	1.5528756236379918E-4	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.999986167322909	WITHOUT_CLASSIFICATION	1.3832677090856822E-5	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999034998885533	WITHOUT_CLASSIFICATION	9.65001114467654E-5	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999975621572206	WITHOUT_CLASSIFICATION	2.4378427794779443E-6	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999997751604083	WITHOUT_CLASSIFICATION	2.2483959187437813E-7	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999955916268745	WITHOUT_CLASSIFICATION	4.408373125557426E-6	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999511142648126	WITHOUT_CLASSIFICATION	4.8885735187310665E-5	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999596665035888	WITHOUT_CLASSIFICATION	4.0333496411239116E-5	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9998041092718591	WITHOUT_CLASSIFICATION	1.9589072814096793E-4	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999986162150227	WITHOUT_CLASSIFICATION	1.3837849772876518E-6	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9995952288605828	WITHOUT_CLASSIFICATION	4.0477113941723536E-4	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999995438308366	WITHOUT_CLASSIFICATION	4.56169163400905E-6	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.999975109778079	WITHOUT_CLASSIFICATION	2.489022192095933E-5	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999922837582045	WITHOUT_CLASSIFICATION	7.716241795514492E-6	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999947876446285	WITHOUT_CLASSIFICATION	5.212355371501753E-6	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999917653901335	WITHOUT_CLASSIFICATION	8.234609866446553E-6	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999981280146807	WITHOUT_CLASSIFICATION	1.8719853193472846E-6	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999263249012551	WITHOUT_CLASSIFICATION	7.367509874485527E-5	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99995396223887	WITHOUT_CLASSIFICATION	4.6037761129977275E-5	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999034819730461	WITHOUT_CLASSIFICATION	9.651802695394388E-5	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999461671551338	WITHOUT_CLASSIFICATION	5.383284486608357E-5	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999999879433796	WITHOUT_CLASSIFICATION	1.205662040439837E-7	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999970715421533	WITHOUT_CLASSIFICATION	2.928457846559291E-6	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999702515354502	WITHOUT_CLASSIFICATION	2.9748464549852735E-5	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998038890277533	WITHOUT_CLASSIFICATION	1.9611097224670897E-4	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999973824171823	WITHOUT_CLASSIFICATION	2.6175828178052475E-6	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.9999886633177508	WITHOUT_CLASSIFICATION	1.1336682249035352E-5	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999803257976659	WITHOUT_CLASSIFICATION	1.967420233399106E-5	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9651893807458475	WITHOUT_CLASSIFICATION	0.034810619254152506	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9996157297385274	WITHOUT_CLASSIFICATION	3.842702614726426E-4	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.9999488582160879	WITHOUT_CLASSIFICATION	5.114178391216324E-5	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999994862589895	WITHOUT_CLASSIFICATION	5.137410104783401E-7	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9995307313101437	WITHOUT_CLASSIFICATION	4.6926868985630295E-4	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999853743868339	WITHOUT_CLASSIFICATION	1.462561316600073E-5	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99995396223887	WITHOUT_CLASSIFICATION	4.6037761129977275E-5	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999775593487419	WITHOUT_CLASSIFICATION	2.2440651258147314E-5	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9979300514604885	WITHOUT_CLASSIFICATION	0.0020699485395114132	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999996955002686	WITHOUT_CLASSIFICATION	3.0449973141390327E-7	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999993895610517	WITHOUT_CLASSIFICATION	6.104389483076077E-7	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9990238176295816	WITHOUT_CLASSIFICATION	9.761823704182513E-4	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999928868537402	WITHOUT_CLASSIFICATION	7.113146259765547E-6	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999490842625199	WITHOUT_CLASSIFICATION	5.0915737480163014E-5	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999586362758821	WITHOUT_CLASSIFICATION	4.136372411787159E-5	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999034998885533	WITHOUT_CLASSIFICATION	9.65001114467654E-5	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.999912757255366	WITHOUT_CLASSIFICATION	8.724274463397536E-5	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999942053147529	WITHOUT_CLASSIFICATION	5.794685247137162E-6	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999988181266201	WITHOUT_CLASSIFICATION	1.1818733798970019E-5	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999881131410255	WITHOUT_CLASSIFICATION	1.1886858974419352E-5	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999490655959485	WITHOUT_CLASSIFICATION	5.093440405140443E-5	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999923394558298	WITHOUT_CLASSIFICATION	7.660544170348894E-6	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9961825897088157	WITHOUT_CLASSIFICATION	0.0038174102911843312	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999957225013673	WITHOUT_CLASSIFICATION	4.277498632733263E-6	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999385273456586	WITHOUT_CLASSIFICATION	6.147265434141139E-5	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999684832271531	WITHOUT_CLASSIFICATION	3.151677284691604E-5	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9987111399822541	WITHOUT_CLASSIFICATION	0.0012888600177458304	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999638444265946	WITHOUT_CLASSIFICATION	3.615557340538711E-5	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9868731933256611	WITHOUT_CLASSIFICATION	0.01312680667433887	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9868731933256611	WITHOUT_CLASSIFICATION	0.01312680667433887	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.999999825536787	WITHOUT_CLASSIFICATION	1.7446321298592183E-7	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9927330615436171	WITHOUT_CLASSIFICATION	0.007266938456382903	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.995991492728842	WITHOUT_CLASSIFICATION	0.004008507271157977	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999986876780854	WITHOUT_CLASSIFICATION	1.3123219146744417E-6	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999988441963438	WITHOUT_CLASSIFICATION	1.1558036562451986E-6	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999949144634662	WITHOUT_CLASSIFICATION	5.085536533806611E-5	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999992876630976	WITHOUT_CLASSIFICATION	7.123369023704544E-7	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999932776223065	WITHOUT_CLASSIFICATION	6.722377693521697E-6	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999826731652812	WITHOUT_CLASSIFICATION	1.732683471881861E-5	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.9998475286434926	WITHOUT_CLASSIFICATION	1.5247135650741454E-4	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.9998475286434926	WITHOUT_CLASSIFICATION	1.5247135650741454E-4	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9997964716973395	WITHOUT_CLASSIFICATION	2.035283026605532E-4	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999961727511	WITHOUT_CLASSIFICATION	3.827248884143742E-9	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998952434694014	WITHOUT_CLASSIFICATION	1.047565305986485E-4	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999995999612327	WITHOUT_CLASSIFICATION	4.0003876736056763E-7	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999301162299445	WITHOUT_CLASSIFICATION	6.988377005548717E-5	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.999925366409986	WITHOUT_CLASSIFICATION	7.463359001405899E-5	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999992698202163	WITHOUT_CLASSIFICATION	7.301797837027314E-7	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999880010170398	WITHOUT_CLASSIFICATION	1.1998982960357249E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999947753978848	WITHOUT_CLASSIFICATION	5.2246021151969676E-5	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999996561809411	WITHOUT_CLASSIFICATION	3.438190589811639E-7	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.999996405632159	WITHOUT_CLASSIFICATION	3.594367841090487E-6	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999976515675469	WITHOUT_CLASSIFICATION	2.3484324529964506E-6	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999925620821317	WITHOUT_CLASSIFICATION	7.437917868301076E-6	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.999955055350107	WITHOUT_CLASSIFICATION	4.4944649893043056E-5	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9998070594439181	WITHOUT_CLASSIFICATION	1.9294055608185234E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999947753978848	WITHOUT_CLASSIFICATION	5.2246021151969676E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999947753978848	WITHOUT_CLASSIFICATION	5.2246021151969676E-5	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999952061534714	WITHOUT_CLASSIFICATION	4.79384652864831E-6	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999708798899162	WITHOUT_CLASSIFICATION	2.912011008386079E-5	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999835475599436	WITHOUT_CLASSIFICATION	1.6452440056483807E-5	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999962815070433	WITHOUT_CLASSIFICATION	3.718492956751538E-6	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999969537210845	WITHOUT_CLASSIFICATION	3.0462789153330693E-6	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999860470111503	WITHOUT_CLASSIFICATION	1.3952988849694197E-5	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999690334803999	WITHOUT_CLASSIFICATION	3.096651960015152E-5	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9931472326218239	WITHOUT_CLASSIFICATION	0.006852767378176101	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999470563159979	WITHOUT_CLASSIFICATION	5.294368400203825E-5	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999864381459402	WITHOUT_CLASSIFICATION	1.3561854059897732E-5	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999606956186489	WITHOUT_CLASSIFICATION	3.930438135107266E-5	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9996351369459338	WITHOUT_CLASSIFICATION	3.6486305406616874E-4	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999571438372001	WITHOUT_CLASSIFICATION	4.2856162799840684E-5	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999615183780415	WITHOUT_CLASSIFICATION	3.848162195860309E-5	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987427157129618	WITHOUT_CLASSIFICATION	0.001257284287038144	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999998130311498	WITHOUT_CLASSIFICATION	1.8696885019197217E-6	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999598503178337	WITHOUT_CLASSIFICATION	4.014968216630865E-5	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998992599023965	WITHOUT_CLASSIFICATION	1.007400976034568E-4	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987440662255821	WITHOUT_CLASSIFICATION	0.0012559337744178997	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.5253006788639335	IMPLEMENTATION	0.4746993211360665	WITHOUT_CLASSIFICATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999678664259521	WITHOUT_CLASSIFICATION	3.213357404777756E-5	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999984823354451	WITHOUT_CLASSIFICATION	1.517664554841025E-6	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999657526013591	WITHOUT_CLASSIFICATION	3.424739864095067E-5	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987509466566834	WITHOUT_CLASSIFICATION	0.0012490533433166392	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999722934796726	WITHOUT_CLASSIFICATION	2.770652032726813E-5	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999923360848667	WITHOUT_CLASSIFICATION	7.663915133298992E-6	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999776083104188	WITHOUT_CLASSIFICATION	2.2391689581174856E-5	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999586157284345	WITHOUT_CLASSIFICATION	4.1384271565540335E-5	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999942193481312	WITHOUT_CLASSIFICATION	5.780651868817889E-6	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999772924576132	WITHOUT_CLASSIFICATION	2.2707542386670948E-5	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.9995498940548353	WITHOUT_CLASSIFICATION	4.5010594516474325E-4	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.9999421804591937	WITHOUT_CLASSIFICATION	5.7819540806211164E-5	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999809121480799	WITHOUT_CLASSIFICATION	1.908785192011661E-5	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9996080073490848	WITHOUT_CLASSIFICATION	3.919926509150912E-4	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999998250643695	WITHOUT_CLASSIFICATION	1.7493563066226442E-7	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.999973048412786	WITHOUT_CLASSIFICATION	2.6951587213969615E-5	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999350945403868	WITHOUT_CLASSIFICATION	6.490545961326688E-5	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.99999661232315	WITHOUT_CLASSIFICATION	3.3876768500383027E-6	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999953388055517	WITHOUT_CLASSIFICATION	4.661194448345192E-6	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999855970492235	WITHOUT_CLASSIFICATION	1.4402950776537259E-5	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999966835446452	WITHOUT_CLASSIFICATION	3.316455354901624E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998927288576854	WITHOUT_CLASSIFICATION	1.0727114231451203E-4	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9998307480155133	WITHOUT_CLASSIFICATION	1.6925198448671961E-4	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998927288576854	WITHOUT_CLASSIFICATION	1.0727114231451203E-4	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9996504402477409	WITHOUT_CLASSIFICATION	3.4955975225905604E-4	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999355470562112	WITHOUT_CLASSIFICATION	6.445294378873394E-5	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9981772675563997	WITHOUT_CLASSIFICATION	0.0018227324436004104	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999666900387317	WITHOUT_CLASSIFICATION	3.330996126825852E-5	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999634939819975	WITHOUT_CLASSIFICATION	3.6506018002500836E-5	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9981772675563997	WITHOUT_CLASSIFICATION	0.0018227324436004104	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.999993301765361	WITHOUT_CLASSIFICATION	6.698234638994183E-6	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9997603824611997	WITHOUT_CLASSIFICATION	2.3961753880026056E-4	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999918137717118	WITHOUT_CLASSIFICATION	8.186228288227073E-6	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9995050319643856	WITHOUT_CLASSIFICATION	4.949680356145074E-4	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999809019568301	WITHOUT_CLASSIFICATION	1.9098043169904208E-5	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.99999074507085	WITHOUT_CLASSIFICATION	9.254929150010842E-6	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999941512590195	WITHOUT_CLASSIFICATION	5.848740980489574E-6	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.5006653804985942	WITHOUT_CLASSIFICATION	0.49933461950140584	IMPLEMENTATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9995423176790433	WITHOUT_CLASSIFICATION	4.5768232095664266E-4	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999963857858788	WITHOUT_CLASSIFICATION	3.614214121241447E-6	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999981854943899	WITHOUT_CLASSIFICATION	1.8145056101879138E-6	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9998895610777111	WITHOUT_CLASSIFICATION	1.1043892228888056E-4	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999978046784027	WITHOUT_CLASSIFICATION	2.195321597310768E-6	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999831346243221	WITHOUT_CLASSIFICATION	1.686537567790542E-5	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999997456927947	WITHOUT_CLASSIFICATION	2.543072052808096E-7	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999196734632206	WITHOUT_CLASSIFICATION	8.032653677936724E-5	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999791896048696	WITHOUT_CLASSIFICATION	2.0810395130358827E-5	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999882448476558	WITHOUT_CLASSIFICATION	1.1755152344165371E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999069466888238	WITHOUT_CLASSIFICATION	9.305331117613238E-5	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999998580589672	WITHOUT_CLASSIFICATION	1.4194103284083642E-7	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999975588497964	WITHOUT_CLASSIFICATION	2.4411502035743454E-6	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.999968709772221	WITHOUT_CLASSIFICATION	3.129022777908402E-5	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998614148781328	WITHOUT_CLASSIFICATION	1.385851218671996E-4	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9984039782112691	WITHOUT_CLASSIFICATION	0.0015960217887308857	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.9999705198971962	WITHOUT_CLASSIFICATION	2.9480102803723114E-5	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999613763237255	WITHOUT_CLASSIFICATION	3.862367627455796E-5	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999999974899	WITHOUT_CLASSIFICATION	2.510124821067078E-12	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999060849168492	WITHOUT_CLASSIFICATION	9.391508315086617E-5	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.9999723326722617	WITHOUT_CLASSIFICATION	2.7667327738291375E-5	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9999783631899699	WITHOUT_CLASSIFICATION	2.1636810030142406E-5	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998614148781328	WITHOUT_CLASSIFICATION	1.385851218671996E-4	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998605163529563	WITHOUT_CLASSIFICATION	1.39483647043799E-4	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.9999768433106768	WITHOUT_CLASSIFICATION	2.3156689323253442E-5	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.9996461063669738	WITHOUT_CLASSIFICATION	3.5389363302617416E-4	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9856083177672144	WITHOUT_CLASSIFICATION	0.014391682232785722	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999998580589672	WITHOUT_CLASSIFICATION	1.4194103284083642E-7	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999331493976663	WITHOUT_CLASSIFICATION	6.685060233366686E-5	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999983228590221	WITHOUT_CLASSIFICATION	1.6771409778780368E-6	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999946448227806	WITHOUT_CLASSIFICATION	5.3551772194240955E-6	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999661537441761	WITHOUT_CLASSIFICATION	3.3846255824026094E-5	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.9999616374725424	WITHOUT_CLASSIFICATION	3.836252745761193E-5	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999939476603048	WITHOUT_CLASSIFICATION	6.052339695210026E-6	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999976267222623	WITHOUT_CLASSIFICATION	2.373277737735889E-6	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999797406660141	WITHOUT_CLASSIFICATION	2.025933398584464E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999906932745891	WITHOUT_CLASSIFICATION	9.306725410895687E-5	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9998963456672766	WITHOUT_CLASSIFICATION	1.0365433272342587E-4	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.9999192961032587	WITHOUT_CLASSIFICATION	8.070389674136354E-5	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999953107613319	WITHOUT_CLASSIFICATION	4.689238668154167E-6	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999589750305303	WITHOUT_CLASSIFICATION	4.1024969469712556E-5	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999589750305303	WITHOUT_CLASSIFICATION	4.1024969469712556E-5	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999975302475665	WITHOUT_CLASSIFICATION	2.4697524335134724E-6	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999891327540097	WITHOUT_CLASSIFICATION	1.0867245990355565E-5	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.999969116814563	WITHOUT_CLASSIFICATION	3.088318543696616E-5	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999689605308874	WITHOUT_CLASSIFICATION	3.103946911259689E-5	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999749858283685	WITHOUT_CLASSIFICATION	2.5014171631494056E-5	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999331493976663	WITHOUT_CLASSIFICATION	6.685060233366686E-5	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9875079338077385	WITHOUT_CLASSIFICATION	0.012492066192261555	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999151595718008	WITHOUT_CLASSIFICATION	8.484042819927687E-5	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9980181504705644	WITHOUT_CLASSIFICATION	0.00198184952943561	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999959249970682	WITHOUT_CLASSIFICATION	4.075002931735797E-6	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9973638870889857	WITHOUT_CLASSIFICATION	0.0026361129110142527	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9973638870889857	WITHOUT_CLASSIFICATION	0.0026361129110142527	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999848204823834	WITHOUT_CLASSIFICATION	1.5179517616733712E-5	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9973638870889857	WITHOUT_CLASSIFICATION	0.0026361129110142527	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9973638870889857	WITHOUT_CLASSIFICATION	0.0026361129110142527	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9992441928664351	WITHOUT_CLASSIFICATION	7.558071335649782E-4	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999909527259842	WITHOUT_CLASSIFICATION	9.04727401574463E-6	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999464170170635	WITHOUT_CLASSIFICATION	5.358298293647499E-5	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999464170170635	WITHOUT_CLASSIFICATION	5.358298293647499E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999329511906153	WITHOUT_CLASSIFICATION	6.704880938470033E-5	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9995820909015406	WITHOUT_CLASSIFICATION	4.17909098459347E-4	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999443416835553	WITHOUT_CLASSIFICATION	5.5658316444611984E-5	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999491981582	WITHOUT_CLASSIFICATION	5.080184185685157E-8	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999451274067013	WITHOUT_CLASSIFICATION	5.487259329876418E-5	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.9998927935750783	WITHOUT_CLASSIFICATION	1.0720642492167088E-4	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998008345547059	WITHOUT_CLASSIFICATION	1.991654452941381E-4	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999695459702165	WITHOUT_CLASSIFICATION	3.0454029783588915E-5	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999459969823656	WITHOUT_CLASSIFICATION	5.4003017634340146E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999966128584674	WITHOUT_CLASSIFICATION	3.3871415326414466E-6	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999943155838686	WITHOUT_CLASSIFICATION	5.684416131411116E-5	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999956667059271	WITHOUT_CLASSIFICATION	4.333294072855606E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999975405874123	WITHOUT_CLASSIFICATION	2.4594125877727466E-6	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999787783604925	WITHOUT_CLASSIFICATION	2.122163950752469E-5	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999146797522719	WITHOUT_CLASSIFICATION	8.532024772811431E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.999943957936811	WITHOUT_CLASSIFICATION	5.6042063188965335E-5	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999230066326593	WITHOUT_CLASSIFICATION	7.69933673407035E-5	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.9999346183409754	WITHOUT_CLASSIFICATION	6.538165902465492E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999975405874123	WITHOUT_CLASSIFICATION	2.4594125877727466E-6	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999975588497964	WITHOUT_CLASSIFICATION	2.4411502035743454E-6	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.9998029258365625	WITHOUT_CLASSIFICATION	1.9707416343750294E-4	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999779331476095	WITHOUT_CLASSIFICATION	2.2066852390429513E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999167425161715	WITHOUT_CLASSIFICATION	8.325748382851286E-5	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.9998062517970888	WITHOUT_CLASSIFICATION	1.937482029112237E-4	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999642038442079	WITHOUT_CLASSIFICATION	3.579615579215475E-5	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.9995689121844815	WITHOUT_CLASSIFICATION	4.310878155184123E-4	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999241696271035	WITHOUT_CLASSIFICATION	7.583037289646895E-5	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999775372815578	WITHOUT_CLASSIFICATION	2.2462718442244718E-5	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999998098253433	WITHOUT_CLASSIFICATION	1.9017465659499603E-7	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.999992694095305	WITHOUT_CLASSIFICATION	7.305904694990894E-6	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.999996748547256	WITHOUT_CLASSIFICATION	3.2514527441177315E-6	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999667275520131	WITHOUT_CLASSIFICATION	3.327244798703345E-5	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998950956623449	WITHOUT_CLASSIFICATION	1.0490433765503335E-4	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9983785348375748	WITHOUT_CLASSIFICATION	0.001621465162425248	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999538389476164	WITHOUT_CLASSIFICATION	4.616105238367487E-5	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.9998855342733852	WITHOUT_CLASSIFICATION	1.1446572661475805E-4	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.999640256616929	WITHOUT_CLASSIFICATION	3.597433830710326E-4	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999942358213038	WITHOUT_CLASSIFICATION	5.764178696209225E-6	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998978430643308	WITHOUT_CLASSIFICATION	1.0215693566923132E-4	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999749370178607	WITHOUT_CLASSIFICATION	2.5062982139302145E-5	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.9981838354110816	WITHOUT_CLASSIFICATION	0.001816164588918471	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999975742583954	WITHOUT_CLASSIFICATION	2.4257416046082116E-6	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999775372815578	WITHOUT_CLASSIFICATION	2.2462718442244718E-5	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999472681531884	WITHOUT_CLASSIFICATION	5.273184681162012E-5	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.9999569810072845	WITHOUT_CLASSIFICATION	4.301899271550909E-5	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9986699179213239	WITHOUT_CLASSIFICATION	0.001330082078676096	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999811190196807	WITHOUT_CLASSIFICATION	1.8880980319286562E-5	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99995396223887	WITHOUT_CLASSIFICATION	4.6037761129977275E-5	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.9999342999763484	WITHOUT_CLASSIFICATION	6.570002365153932E-5	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.9998351806079416	WITHOUT_CLASSIFICATION	1.6481939205838862E-4	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.9991048235645429	WITHOUT_CLASSIFICATION	8.951764354569908E-4	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.9998350068838198	WITHOUT_CLASSIFICATION	1.6499311618035301E-4	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.9997181997734791	WITHOUT_CLASSIFICATION	2.8180022652090297E-4	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999750202882134	WITHOUT_CLASSIFICATION	2.497971178665182E-5	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9998014378357584	WITHOUT_CLASSIFICATION	1.985621642416942E-4	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999995212591688	WITHOUT_CLASSIFICATION	4.787408311688053E-7	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999833692937073	WITHOUT_CLASSIFICATION	1.663070629265356E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999853286887721	WITHOUT_CLASSIFICATION	1.4671311227881968E-5	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999954327593848	WITHOUT_CLASSIFICATION	4.5672406152051965E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999977992051071	WITHOUT_CLASSIFICATION	2.2007948929265264E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999750202882134	WITHOUT_CLASSIFICATION	2.497971178665182E-5	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999925722966717	WITHOUT_CLASSIFICATION	7.427703328266855E-6	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999925181724951	WITHOUT_CLASSIFICATION	7.481827504800988E-6	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.999975169007935	WITHOUT_CLASSIFICATION	2.4830992064928956E-5	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999869212082197	WITHOUT_CLASSIFICATION	1.3078791780298762E-5	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.9999566867239743	WITHOUT_CLASSIFICATION	4.331327602570552E-5	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9994337473990134	WITHOUT_CLASSIFICATION	5.662526009866497E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999853286887721	WITHOUT_CLASSIFICATION	1.4671311227881968E-5	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999780012062748	WITHOUT_CLASSIFICATION	2.199879372521588E-5	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858701787581	WITHOUT_CLASSIFICATION	1.4129821242074123E-5	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999404763584693	WITHOUT_CLASSIFICATION	5.9523641530788534E-5	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995884000157562	WITHOUT_CLASSIFICATION	4.1159998424375173E-4	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995884000157562	WITHOUT_CLASSIFICATION	4.1159998424375173E-4	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995884000157562	WITHOUT_CLASSIFICATION	4.1159998424375173E-4	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999945766603268	WITHOUT_CLASSIFICATION	5.423339673252332E-6	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999945766603268	WITHOUT_CLASSIFICATION	5.423339673252332E-6	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999981618518077	WITHOUT_CLASSIFICATION	1.8381481923623915E-6	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.999995781923153	WITHOUT_CLASSIFICATION	4.21807684703435E-6	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.9999480750739754	WITHOUT_CLASSIFICATION	5.1924926024548945E-5	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.9999254122634098	WITHOUT_CLASSIFICATION	7.458773659016263E-5	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9799331321983381	WITHOUT_CLASSIFICATION	0.020066867801661982	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999469873064106	WITHOUT_CLASSIFICATION	5.301269358930033E-5	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999969357147036	WITHOUT_CLASSIFICATION	3.0642852964001156E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99995396223887	WITHOUT_CLASSIFICATION	4.6037761129977275E-5	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999999776024917	WITHOUT_CLASSIFICATION	2.2397508316291547E-8	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999164086423991	WITHOUT_CLASSIFICATION	8.359135760092163E-5	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999469873064106	WITHOUT_CLASSIFICATION	5.301269358930033E-5	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999969357147036	WITHOUT_CLASSIFICATION	3.0642852964001156E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99995396223887	WITHOUT_CLASSIFICATION	4.6037761129977275E-5	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999996569677438	WITHOUT_CLASSIFICATION	3.4303225619566117E-7	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999953341963154	WITHOUT_CLASSIFICATION	4.6658036846356115E-6	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999987615366801	WITHOUT_CLASSIFICATION	1.2384633198701613E-6	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999979184424743	WITHOUT_CLASSIFICATION	2.0815575256442262E-6	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999674886903906	WITHOUT_CLASSIFICATION	3.251130960938457E-5	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.9999915098274931	WITHOUT_CLASSIFICATION	8.490172506989003E-6	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9999728986638944	WITHOUT_CLASSIFICATION	2.71013361056753E-5	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999589750305303	WITHOUT_CLASSIFICATION	4.1024969469712556E-5	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.99998464643726	WITHOUT_CLASSIFICATION	1.5353562739882928E-5	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999860061318858	WITHOUT_CLASSIFICATION	1.3993868114211413E-4	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9997964801621788	WITHOUT_CLASSIFICATION	2.0351983782112E-4	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999908398513018	WITHOUT_CLASSIFICATION	9.160148698270021E-6	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999886465425276	WITHOUT_CLASSIFICATION	1.1353457472370598E-5	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999738342385309	WITHOUT_CLASSIFICATION	2.616576146898756E-5	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999850456662378	WITHOUT_CLASSIFICATION	1.4954333762247354E-5	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999335554120101	WITHOUT_CLASSIFICATION	6.64445879898739E-5	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999804376765367	WITHOUT_CLASSIFICATION	1.9562323463347348E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998817850061846	WITHOUT_CLASSIFICATION	1.1821499381544583E-4	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999987485005867	WITHOUT_CLASSIFICATION	1.251499413257028E-6	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999480371258089	WITHOUT_CLASSIFICATION	5.196287419110244E-5	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9958617180421876	WITHOUT_CLASSIFICATION	0.004138281957812393	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.999990003702934	WITHOUT_CLASSIFICATION	9.996297066006618E-6	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999982491572743	WITHOUT_CLASSIFICATION	1.7508427256894356E-6	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9930619366201849	WITHOUT_CLASSIFICATION	0.006938063379814993	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999452355857714	WITHOUT_CLASSIFICATION	5.4764414228494136E-5	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999463002303666	WITHOUT_CLASSIFICATION	5.3699769633386375E-5	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999983928516484	WITHOUT_CLASSIFICATION	1.6071483516890617E-6	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999487767140648	WITHOUT_CLASSIFICATION	5.12232859352046E-5	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999961547541935	WITHOUT_CLASSIFICATION	3.845245806498432E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999802574175161	WITHOUT_CLASSIFICATION	1.9742582483909608E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999802574175161	WITHOUT_CLASSIFICATION	1.9742582483909608E-5	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.999967992625613	WITHOUT_CLASSIFICATION	3.200737438704774E-5	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9994818818868898	WITHOUT_CLASSIFICATION	5.181181131101732E-4	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9982954008382283	WITHOUT_CLASSIFICATION	0.001704599161771681	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999871934980635	WITHOUT_CLASSIFICATION	1.2806501936415655E-5	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9995248301491245	WITHOUT_CLASSIFICATION	4.7516985087545235E-4	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999995183533323	WITHOUT_CLASSIFICATION	4.816466676912265E-7	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.9999785358786258	WITHOUT_CLASSIFICATION	2.146412137421133E-5	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.999972952769305	WITHOUT_CLASSIFICATION	2.704723069497527E-5	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9998023293909347	WITHOUT_CLASSIFICATION	1.9767060906538878E-4	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447484429703	WITHOUT_CLASSIFICATION	1.5525155702955E-4	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447484429703	WITHOUT_CLASSIFICATION	1.5525155702955E-4	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447484429703	WITHOUT_CLASSIFICATION	1.5525155702955E-4	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447484429703	WITHOUT_CLASSIFICATION	1.5525155702955E-4	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447484429703	WITHOUT_CLASSIFICATION	1.5525155702955E-4	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447484429703	WITHOUT_CLASSIFICATION	1.5525155702955E-4	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447484429703	WITHOUT_CLASSIFICATION	1.5525155702955E-4	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447484429703	WITHOUT_CLASSIFICATION	1.5525155702955E-4	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447484429703	WITHOUT_CLASSIFICATION	1.5525155702955E-4	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447484429703	WITHOUT_CLASSIFICATION	1.5525155702955E-4	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447484429703	WITHOUT_CLASSIFICATION	1.5525155702955E-4	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9977483472154047	WITHOUT_CLASSIFICATION	0.0022516527845953334	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.99991497918882	WITHOUT_CLASSIFICATION	8.502081117998955E-5	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999855112041781	WITHOUT_CLASSIFICATION	1.448879582175432E-5	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999912116772313	WITHOUT_CLASSIFICATION	8.78832276870529E-6	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999996940221981	WITHOUT_CLASSIFICATION	3.059778018950227E-7	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.9986908796829157	WITHOUT_CLASSIFICATION	0.001309120317084272	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999904942699207	WITHOUT_CLASSIFICATION	9.5057300793188E-6	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9992013135134794	WITHOUT_CLASSIFICATION	7.986864865205019E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999855112041781	WITHOUT_CLASSIFICATION	1.448879582175432E-5	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999855112041781	WITHOUT_CLASSIFICATION	1.448879582175432E-5	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999970057581655	WITHOUT_CLASSIFICATION	2.9942418344393395E-6	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999699546127331	WITHOUT_CLASSIFICATION	3.0045387266967925E-5	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9995921222836025	WITHOUT_CLASSIFICATION	4.0787771639750454E-4	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999921991114044	WITHOUT_CLASSIFICATION	7.80088859567529E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999584132926241	WITHOUT_CLASSIFICATION	4.158670737591905E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998817850061846	WITHOUT_CLASSIFICATION	1.1821499381544583E-4	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999536378045851	WITHOUT_CLASSIFICATION	4.636219541497463E-5	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999973419848689	WITHOUT_CLASSIFICATION	2.6580151310966364E-5	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999897062452129	WITHOUT_CLASSIFICATION	1.0293754787152448E-5	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998627172370274	WITHOUT_CLASSIFICATION	1.3728276297274238E-4	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999996721246469	WITHOUT_CLASSIFICATION	3.2787535309701475E-6	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999537232419168	WITHOUT_CLASSIFICATION	4.6276758083196385E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999576870428447	WITHOUT_CLASSIFICATION	4.231295715532828E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999576870428447	WITHOUT_CLASSIFICATION	4.231295715532828E-5	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999576870428447	WITHOUT_CLASSIFICATION	4.231295715532828E-5	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999576870428447	WITHOUT_CLASSIFICATION	4.231295715532828E-5	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99995396223887	WITHOUT_CLASSIFICATION	4.6037761129977275E-5	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999537121572698	WITHOUT_CLASSIFICATION	4.6287842730160726E-5	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999967187261878	WITHOUT_CLASSIFICATION	3.281273812192518E-5	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99995396223887	WITHOUT_CLASSIFICATION	4.6037761129977275E-5	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9983103749249566	WITHOUT_CLASSIFICATION	0.0016896250750434647	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999960791489809	WITHOUT_CLASSIFICATION	3.920851019115795E-6	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999507169866927	WITHOUT_CLASSIFICATION	4.928301330733879E-5	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999298041977894	WITHOUT_CLASSIFICATION	7.019580221058514E-5	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999851788785593	WITHOUT_CLASSIFICATION	1.482112144073324E-5	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9999926495568185	WITHOUT_CLASSIFICATION	7.350443181357494E-6	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999989642028573	WITHOUT_CLASSIFICATION	1.035797142747143E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997412654526852	WITHOUT_CLASSIFICATION	2.5873454731488004E-4	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999558010070201	WITHOUT_CLASSIFICATION	4.419899297980102E-5	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999630414056072	WITHOUT_CLASSIFICATION	3.695859439286744E-5	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9998843212082895	WITHOUT_CLASSIFICATION	1.1567879171046119E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999371951768057	WITHOUT_CLASSIFICATION	6.280482319436679E-5	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999371951768057	WITHOUT_CLASSIFICATION	6.280482319436679E-5	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999371951768057	WITHOUT_CLASSIFICATION	6.280482319436679E-5	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999945248447326	WITHOUT_CLASSIFICATION	5.475155267324581E-6	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.9999861792182169	WITHOUT_CLASSIFICATION	1.3820781783202667E-5	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999604061597	WITHOUT_CLASSIFICATION	3.959384027500863E-8	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999545636962013	WITHOUT_CLASSIFICATION	4.5436303798755355E-5	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999545636962013	WITHOUT_CLASSIFICATION	4.5436303798755355E-5	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999806552729392	WITHOUT_CLASSIFICATION	1.934472706078082E-5	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995884000157562	WITHOUT_CLASSIFICATION	4.1159998424375173E-4	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.927995164581058	WITHOUT_CLASSIFICATION	0.07200483541894193	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999943138331633	WITHOUT_CLASSIFICATION	5.686166836666023E-6	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999918492423076	WITHOUT_CLASSIFICATION	8.150757692515128E-6	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9806406733636117	WITHOUT_CLASSIFICATION	0.01935932663638823	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999154450433195	WITHOUT_CLASSIFICATION	8.455495668043731E-5	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999992745258856	WITHOUT_CLASSIFICATION	7.254741144408197E-7	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999096435187648	WITHOUT_CLASSIFICATION	9.035648123513344E-5	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9997733340567662	WITHOUT_CLASSIFICATION	2.2666594323372835E-4	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999736114704826	WITHOUT_CLASSIFICATION	2.6388529517413585E-5	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999902127230283	WITHOUT_CLASSIFICATION	9.787276971623526E-6	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999942391803354	WITHOUT_CLASSIFICATION	5.7608196645499E-6	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999884423815829	WITHOUT_CLASSIFICATION	1.1557618417052593E-5	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.99999999783485	WITHOUT_CLASSIFICATION	2.165149919008226E-9	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999459656085	WITHOUT_CLASSIFICATION	5.403439148917762E-8	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999812339313	WITHOUT_CLASSIFICATION	1.876606870954357E-8	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999995846860232	WITHOUT_CLASSIFICATION	4.1531397672678746E-7	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9998960942146837	WITHOUT_CLASSIFICATION	1.0390578531623706E-4	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9998810610929727	WITHOUT_CLASSIFICATION	1.1893890702740213E-4	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999999751132542	WITHOUT_CLASSIFICATION	2.48867457989889E-7	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.9999769552234069	WITHOUT_CLASSIFICATION	2.3044776593179414E-5	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999385259725	WITHOUT_CLASSIFICATION	6.147402750346305E-8	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999962970327745	WITHOUT_CLASSIFICATION	3.702967225645746E-6	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999998055959515	WITHOUT_CLASSIFICATION	1.94404048561137E-7	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999661624894121	WITHOUT_CLASSIFICATION	3.383751058789172E-5	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.999988424692522	WITHOUT_CLASSIFICATION	1.1575307478085079E-5	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9626317556457543	WITHOUT_CLASSIFICATION	0.03736824435424573	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999589750305303	WITHOUT_CLASSIFICATION	4.1024969469712556E-5	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999742888423911	WITHOUT_CLASSIFICATION	2.5711157608780565E-5	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9927615390143338	WITHOUT_CLASSIFICATION	0.007238460985666052	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.9997023815994468	WITHOUT_CLASSIFICATION	2.976184005531561E-4	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999884722473967	WITHOUT_CLASSIFICATION	1.1527752603152221E-5	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.9998800963755077	WITHOUT_CLASSIFICATION	1.1990362449222145E-4	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999993850831219	WITHOUT_CLASSIFICATION	6.149168780710709E-7	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999545206786785	WITHOUT_CLASSIFICATION	4.547932132152369E-5	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9794537923022383	WITHOUT_CLASSIFICATION	0.020546207697761814	IMPLEMENTATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999992532280492	WITHOUT_CLASSIFICATION	7.46771950791617E-6	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999945082768	WITHOUT_CLASSIFICATION	5.49172320556554E-9	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.999973885824736	WITHOUT_CLASSIFICATION	2.611417526392764E-5	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.9999920872075809	WITHOUT_CLASSIFICATION	7.912792419100653E-6	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999926635733053	WITHOUT_CLASSIFICATION	7.336426694788782E-6	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999653257217118	WITHOUT_CLASSIFICATION	3.46742782882121E-5	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999994994561948	WITHOUT_CLASSIFICATION	5.005438051304816E-7	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999998906431254	WITHOUT_CLASSIFICATION	1.0935687460781626E-6	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998386871038458	WITHOUT_CLASSIFICATION	1.6131289615414597E-4	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998598502937301	WITHOUT_CLASSIFICATION	1.4014970626983488E-4	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999100351347997	WITHOUT_CLASSIFICATION	8.99648652003168E-5	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998281729033397	WITHOUT_CLASSIFICATION	1.7182709666024336E-4	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.9999645142553738	WITHOUT_CLASSIFICATION	3.5485744626204856E-5	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9994380971008391	WITHOUT_CLASSIFICATION	5.619028991609192E-4	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.9999907022398239	WITHOUT_CLASSIFICATION	9.297760176179561E-6	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999812620608838	WITHOUT_CLASSIFICATION	1.8737939116286764E-5	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9990801248096928	WITHOUT_CLASSIFICATION	9.198751903072441E-4	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999880193246905	WITHOUT_CLASSIFICATION	1.1980675309435398E-5	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999991170817205	WITHOUT_CLASSIFICATION	8.829182795169696E-7	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999776528047	WITHOUT_CLASSIFICATION	2.2347195251001506E-8	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999828448636411	WITHOUT_CLASSIFICATION	1.7155136358897726E-5	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999895725499267	WITHOUT_CLASSIFICATION	1.0427450073301318E-5	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999970782656985	WITHOUT_CLASSIFICATION	2.921734301575338E-6	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999995332974519	WITHOUT_CLASSIFICATION	4.667025480970645E-6	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999497115349947	WITHOUT_CLASSIFICATION	5.028846500531981E-5	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9847185536103678	WITHOUT_CLASSIFICATION	0.015281446389632285	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998322388068971	WITHOUT_CLASSIFICATION	1.6776119310295802E-4	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999727995101391	WITHOUT_CLASSIFICATION	2.7200489860951923E-5	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999084057831769	WITHOUT_CLASSIFICATION	9.159421682311295E-5	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999468807237237	WITHOUT_CLASSIFICATION	5.311927627623698E-5	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999945561272299	WITHOUT_CLASSIFICATION	5.443872770144055E-6	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999994840176916	WITHOUT_CLASSIFICATION	5.159823083868054E-7	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.999955574942654	WITHOUT_CLASSIFICATION	4.4425057345963924E-5	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999863909141474	WITHOUT_CLASSIFICATION	1.3609085852590897E-5	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999174770413983	WITHOUT_CLASSIFICATION	8.25229586017105E-5	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999933651898608	WITHOUT_CLASSIFICATION	6.634810139132558E-6	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.9999388908886216	WITHOUT_CLASSIFICATION	6.11091113783453E-5	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999818474657013	WITHOUT_CLASSIFICATION	1.815253429870498E-5	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.999791042247455	WITHOUT_CLASSIFICATION	2.0895775254503634E-4	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.574945792323553	IMPLEMENTATION	0.42505420767644697	WITHOUT_CLASSIFICATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999466742693396	WITHOUT_CLASSIFICATION	5.3325730660374925E-5	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9829143303413771	WITHOUT_CLASSIFICATION	0.017085669658622887	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.688431602266645	WITHOUT_CLASSIFICATION	0.3115683977333548	IMPLEMENTATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999229200415621	WITHOUT_CLASSIFICATION	7.70799584379045E-5	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9998561955709736	WITHOUT_CLASSIFICATION	1.4380442902632692E-4	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999823077586564	WITHOUT_CLASSIFICATION	1.769224134362501E-5	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9996357213930963	WITHOUT_CLASSIFICATION	3.6427860690364474E-4	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999546875353857	WITHOUT_CLASSIFICATION	4.531246461424697E-5	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999066654436359	WITHOUT_CLASSIFICATION	9.333455636413423E-5	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.9999824792685709	WITHOUT_CLASSIFICATION	1.75207314291269E-5	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999447426680096	WITHOUT_CLASSIFICATION	5.525733199038547E-5	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999913646892382	WITHOUT_CLASSIFICATION	8.635310761769807E-6	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999889578439731	WITHOUT_CLASSIFICATION	1.1042156026985445E-5	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9997272831591673	WITHOUT_CLASSIFICATION	2.727168408327125E-4	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999957495136987	WITHOUT_CLASSIFICATION	4.250486301251428E-6	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999436310025838	WITHOUT_CLASSIFICATION	5.6368997416341854E-5	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.9999818364021903	WITHOUT_CLASSIFICATION	1.8163597809702323E-5	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.9999413650668287	WITHOUT_CLASSIFICATION	5.8634933171259464E-5	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999049462811405	WITHOUT_CLASSIFICATION	9.50537188594987E-5	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999049462811405	WITHOUT_CLASSIFICATION	9.50537188594987E-5	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999820973500004	WITHOUT_CLASSIFICATION	1.7902649999470873E-5	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9983983009984775	WITHOUT_CLASSIFICATION	0.0016016990015225634	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999959850128597	WITHOUT_CLASSIFICATION	4.0149871403029844E-5	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999926569031261	WITHOUT_CLASSIFICATION	7.343096873908111E-6	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9998238881640921	WITHOUT_CLASSIFICATION	1.7611183590788754E-4	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999521404951723	WITHOUT_CLASSIFICATION	4.785950482762893E-5	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999870863256297	WITHOUT_CLASSIFICATION	1.2913674370227832E-5	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.99994138035393	WITHOUT_CLASSIFICATION	5.861964607003227E-5	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999822664378906	WITHOUT_CLASSIFICATION	1.7733562109430577E-5	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9417398407318668	WITHOUT_CLASSIFICATION	0.05826015926813323	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999991037920107	WITHOUT_CLASSIFICATION	8.962079891781548E-7	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999998497773943	WITHOUT_CLASSIFICATION	1.5022260563548393E-7	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.997588788292396	WITHOUT_CLASSIFICATION	0.0024112117076040595	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999928832017259	WITHOUT_CLASSIFICATION	7.1167982740863165E-6	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999583801028842	WITHOUT_CLASSIFICATION	4.1619897115752585E-5	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.999994414421643	WITHOUT_CLASSIFICATION	5.585578356924124E-6	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9930346909046068	IMPLEMENTATION	0.006965309095393234	WITHOUT_CLASSIFICATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9930346909046068	IMPLEMENTATION	0.006965309095393234	WITHOUT_CLASSIFICATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999634026124683	WITHOUT_CLASSIFICATION	3.6597387531597994E-5	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999997804217517	WITHOUT_CLASSIFICATION	2.1957824828297306E-6	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998656995056103	WITHOUT_CLASSIFICATION	1.3430049438963878E-4	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999609145591078	WITHOUT_CLASSIFICATION	3.908544089219971E-5	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999259541362253	WITHOUT_CLASSIFICATION	7.404586377460481E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997412654526852	WITHOUT_CLASSIFICATION	2.5873454731488004E-4	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999617336094611	WITHOUT_CLASSIFICATION	3.8266390538886186E-5	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999259541362253	WITHOUT_CLASSIFICATION	7.404586377460481E-5	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999863970698558	WITHOUT_CLASSIFICATION	1.3602930144277311E-5	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999104524957158	WITHOUT_CLASSIFICATION	8.954750428435303E-5	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9999250297104798	WITHOUT_CLASSIFICATION	7.49702895201983E-5	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9999250297104798	WITHOUT_CLASSIFICATION	7.49702895201983E-5	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999927950767653	WITHOUT_CLASSIFICATION	7.20492323473865E-6	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999875792808454	WITHOUT_CLASSIFICATION	1.2420719154541901E-5	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999470563159979	WITHOUT_CLASSIFICATION	5.294368400203825E-5	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9997829677688843	WITHOUT_CLASSIFICATION	2.1703223111568874E-4	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999470563159979	WITHOUT_CLASSIFICATION	5.294368400203825E-5	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999999870289	WITHOUT_CLASSIFICATION	1.2971128089740295E-11	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999719558845439	WITHOUT_CLASSIFICATION	2.8044115456063483E-5	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999936804983482	WITHOUT_CLASSIFICATION	6.319501651808682E-6	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998156605190897	WITHOUT_CLASSIFICATION	1.8433948091035773E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999722393298426	WITHOUT_CLASSIFICATION	2.7760670157408393E-5	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999953118914973	WITHOUT_CLASSIFICATION	4.688108502748111E-6	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999964523735863	WITHOUT_CLASSIFICATION	3.547626413795979E-6	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9994910742902764	WITHOUT_CLASSIFICATION	5.089257097236052E-4	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999822177736569	WITHOUT_CLASSIFICATION	1.778222634311179E-5	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999690919785205	WITHOUT_CLASSIFICATION	3.090802147949034E-5	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999835475599436	WITHOUT_CLASSIFICATION	1.6452440056483807E-5	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999806907885679	WITHOUT_CLASSIFICATION	1.9309211432090473E-4	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9998571583280731	WITHOUT_CLASSIFICATION	1.428416719269183E-4	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.9999960816771993	WITHOUT_CLASSIFICATION	3.918322800743965E-6	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999000939901316	WITHOUT_CLASSIFICATION	9.990600986847408E-5	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9998556597695029	WITHOUT_CLASSIFICATION	1.4434023049717751E-4	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.999981939758515	WITHOUT_CLASSIFICATION	1.806024148500168E-5	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999587403600405	WITHOUT_CLASSIFICATION	4.125963995942981E-5	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9985024867724147	WITHOUT_CLASSIFICATION	0.0014975132275853735	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9993666358043322	WITHOUT_CLASSIFICATION	6.333641956677952E-4	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999543442997427	WITHOUT_CLASSIFICATION	4.56557002572791E-5	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999820018698367	WITHOUT_CLASSIFICATION	1.7998130163419505E-5	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9814797853990592	WITHOUT_CLASSIFICATION	0.018520214600940808	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999969855714419	WITHOUT_CLASSIFICATION	3.014428557994899E-6	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999017635988752	WITHOUT_CLASSIFICATION	9.823640112492479E-5	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999428254223	WITHOUT_CLASSIFICATION	5.717457771970866E-8	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999681322469235	WITHOUT_CLASSIFICATION	3.18677530764404E-5	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9999377446752382	WITHOUT_CLASSIFICATION	6.22553247618111E-5	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999976130605929	WITHOUT_CLASSIFICATION	2.3869394070902423E-6	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9796480493815287	WITHOUT_CLASSIFICATION	0.020351950618471202	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999582881284481	WITHOUT_CLASSIFICATION	4.171187155187518E-5	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999696316310974	WITHOUT_CLASSIFICATION	3.036836890263047E-5	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999629293088821	WITHOUT_CLASSIFICATION	3.707069111788215E-5	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999629293088821	WITHOUT_CLASSIFICATION	3.707069111788215E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999771605675027	WITHOUT_CLASSIFICATION	2.283943249722928E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999961846076909	WITHOUT_CLASSIFICATION	3.815392309108408E-5	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999478852638947	WITHOUT_CLASSIFICATION	5.211473610523287E-5	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.9999455594761588	WITHOUT_CLASSIFICATION	5.444052384115405E-5	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999205542631238	WITHOUT_CLASSIFICATION	7.944573687624693E-5	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999995349623109	WITHOUT_CLASSIFICATION	4.6503768901194753E-7	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999900132595	WITHOUT_CLASSIFICATION	9.986740545033103E-9	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9993997099782522	WITHOUT_CLASSIFICATION	6.002900217476796E-4	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999771605675027	WITHOUT_CLASSIFICATION	2.283943249722928E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999961846076909	WITHOUT_CLASSIFICATION	3.815392309108408E-5	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999383051901952	WITHOUT_CLASSIFICATION	6.16948098047383E-5	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.8192910696734625	WITHOUT_CLASSIFICATION	0.1807089303265375	IMPLEMENTATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.999999443877542	WITHOUT_CLASSIFICATION	5.561224579564467E-7	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9998952019543912	WITHOUT_CLASSIFICATION	1.0479804560892417E-4	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999996097987223	WITHOUT_CLASSIFICATION	3.902012777826199E-7	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9939664665204806	WITHOUT_CLASSIFICATION	0.006033533479519336	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9998901070582207	WITHOUT_CLASSIFICATION	1.0989294177934328E-4	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999706481905833	WITHOUT_CLASSIFICATION	2.9351809416670784E-5	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999974862957004	WITHOUT_CLASSIFICATION	2.5137042996246904E-6	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9145474700695111	IMPLEMENTATION	0.08545252993048891	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999050459017631	WITHOUT_CLASSIFICATION	9.49540982369506E-5	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9145474700695111	IMPLEMENTATION	0.08545252993048891	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999397429215992	WITHOUT_CLASSIFICATION	6.0257078400961175E-5	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999497115349947	WITHOUT_CLASSIFICATION	5.028846500531981E-5	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999397429215992	WITHOUT_CLASSIFICATION	6.0257078400961175E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999817367533982	WITHOUT_CLASSIFICATION	1.8263246601797045E-5	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999952078340642	WITHOUT_CLASSIFICATION	4.7921659357934196E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999706481905833	WITHOUT_CLASSIFICATION	2.9351809416670784E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999706481905833	WITHOUT_CLASSIFICATION	2.9351809416670784E-5	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999394363522902	WITHOUT_CLASSIFICATION	6.05636477098533E-5	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999396940104036	WITHOUT_CLASSIFICATION	6.030598959647387E-5	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999394363522902	WITHOUT_CLASSIFICATION	6.05636477098533E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999349055696718	WITHOUT_CLASSIFICATION	6.509443032828276E-5	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999546309276449	WITHOUT_CLASSIFICATION	4.5369072355104864E-5	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999723728365532	WITHOUT_CLASSIFICATION	2.762716344677715E-5	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9846335594123756	WITHOUT_CLASSIFICATION	0.015366440587624429	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999394441669255	WITHOUT_CLASSIFICATION	6.0555833074624596E-5	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999939143058594	WITHOUT_CLASSIFICATION	6.085694140717764E-6	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999561018232671	WITHOUT_CLASSIFICATION	4.38981767328884E-5	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.9999520918081775	WITHOUT_CLASSIFICATION	4.790819182249399E-5	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.9999668009536662	WITHOUT_CLASSIFICATION	3.319904633382238E-5	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999819337486011	WITHOUT_CLASSIFICATION	1.8066251398866097E-5	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.9999109511433688	WITHOUT_CLASSIFICATION	8.904885663123957E-5	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9999690160697569	WITHOUT_CLASSIFICATION	3.098393024311897E-5	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999876630655953	WITHOUT_CLASSIFICATION	1.2336934404583226E-5	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999768670077773	WITHOUT_CLASSIFICATION	2.3132992222656534E-5	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999720539548177	WITHOUT_CLASSIFICATION	2.7946045182289E-5	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999646968266476	WITHOUT_CLASSIFICATION	3.53031733524433E-5	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9998571583280731	WITHOUT_CLASSIFICATION	1.428416719269183E-4	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999781833488542	WITHOUT_CLASSIFICATION	2.1816651145728763E-5	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999389307202993	WITHOUT_CLASSIFICATION	6.106927970079712E-5	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999113837885931	WITHOUT_CLASSIFICATION	8.861621140691386E-5	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9998571583280731	WITHOUT_CLASSIFICATION	1.428416719269183E-4	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998647431527982	WITHOUT_CLASSIFICATION	1.3525684720178244E-4	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999478389898007	WITHOUT_CLASSIFICATION	5.216101019935247E-5	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9981634390680745	WITHOUT_CLASSIFICATION	0.0018365609319255672	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.6578302819886827	WITHOUT_CLASSIFICATION	0.3421697180113173	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998809707496928	WITHOUT_CLASSIFICATION	1.1902925030712845E-4	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999432401793125	WITHOUT_CLASSIFICATION	5.675982068753317E-5	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9002005107422542	WITHOUT_CLASSIFICATION	0.0997994892577458	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999271813303084	WITHOUT_CLASSIFICATION	7.281866969158529E-5	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999394441669255	WITHOUT_CLASSIFICATION	6.0555833074624596E-5	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999696865603758	WITHOUT_CLASSIFICATION	3.0313439624234375E-5	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.8433106908838398	WITHOUT_CLASSIFICATION	0.15668930911616014	IMPLEMENTATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.696946236037984	IMPLEMENTATION	0.30305376396201594	WITHOUT_CLASSIFICATION
an assertion	WITHOUT_CLASSIFICATION	0.9999643309457389	WITHOUT_CLASSIFICATION	3.566905426101577E-5	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999558910073718	WITHOUT_CLASSIFICATION	4.410899262815528E-5	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.999944446312084	WITHOUT_CLASSIFICATION	5.555368791584545E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999349055696718	WITHOUT_CLASSIFICATION	6.509443032828276E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999349055696718	WITHOUT_CLASSIFICATION	6.509443032828276E-5	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9992987908528254	WITHOUT_CLASSIFICATION	7.012091471745826E-4	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999851576059199	WITHOUT_CLASSIFICATION	1.4842394080179074E-5	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.99990636618714	WITHOUT_CLASSIFICATION	9.363381285993463E-5	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.9997819506810226	WITHOUT_CLASSIFICATION	2.1804931897739492E-4	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9996643931810207	WITHOUT_CLASSIFICATION	3.3560681897919307E-4	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9998548287250465	WITHOUT_CLASSIFICATION	1.4517127495356475E-4	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999931800598597	WITHOUT_CLASSIFICATION	6.81994014036952E-6	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999997954465164	WITHOUT_CLASSIFICATION	2.045534835697947E-7	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.999938031484323	WITHOUT_CLASSIFICATION	6.196851567689527E-5	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999785165866671	WITHOUT_CLASSIFICATION	2.1483413332850372E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999955943911699	WITHOUT_CLASSIFICATION	4.405608830048571E-6	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999876630655953	WITHOUT_CLASSIFICATION	1.2336934404583226E-5	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999771605675027	WITHOUT_CLASSIFICATION	2.283943249722928E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999955943911699	WITHOUT_CLASSIFICATION	4.405608830048571E-6	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.999960390752424	WITHOUT_CLASSIFICATION	3.960924757597972E-5	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9998605389716804	WITHOUT_CLASSIFICATION	1.394610283196104E-4	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999858446575545	WITHOUT_CLASSIFICATION	1.4155342445623703E-5	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.9187752721835745	IMPLEMENTATION	0.0812247278164256	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999459091278029	WITHOUT_CLASSIFICATION	5.4090872197119005E-5	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999995175562417	WITHOUT_CLASSIFICATION	4.824437583307917E-7	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999997734264314	WITHOUT_CLASSIFICATION	2.265735686003394E-6	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999986913685	WITHOUT_CLASSIFICATION	1.308631472719469E-9	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999574665666876	WITHOUT_CLASSIFICATION	4.253343331250058E-5	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999842296402852	WITHOUT_CLASSIFICATION	1.5770359714788826E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999714972466502	WITHOUT_CLASSIFICATION	2.850275334973115E-5	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999714972466502	WITHOUT_CLASSIFICATION	2.850275334973115E-5	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999204787559046	WITHOUT_CLASSIFICATION	7.952124409540743E-5	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9924949994020377	WITHOUT_CLASSIFICATION	0.007505000597962303	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999955943911699	WITHOUT_CLASSIFICATION	4.405608830048571E-6	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999459091278029	WITHOUT_CLASSIFICATION	5.4090872197119005E-5	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999997734264314	WITHOUT_CLASSIFICATION	2.265735686003394E-6	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999853458951492	WITHOUT_CLASSIFICATION	1.4654104850693748E-5	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9998886240020601	WITHOUT_CLASSIFICATION	1.1137599793986773E-4	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.999898146048065	WITHOUT_CLASSIFICATION	1.0185395193501179E-4	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999628699133352	WITHOUT_CLASSIFICATION	3.7130086664875436E-5	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999527920246349	WITHOUT_CLASSIFICATION	4.7207975365123585E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999550395274553	WITHOUT_CLASSIFICATION	4.4960472544602064E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.999960390752424	WITHOUT_CLASSIFICATION	3.960924757597972E-5	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999486341265662	WITHOUT_CLASSIFICATION	5.136587343393666E-5	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.999963962492029	WITHOUT_CLASSIFICATION	3.603750797093642E-5	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9993691938881195	WITHOUT_CLASSIFICATION	6.308061118804676E-4	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.8358918589610447	WITHOUT_CLASSIFICATION	0.16410814103895532	IMPLEMENTATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.8442645181045613	WITHOUT_CLASSIFICATION	0.15573548189543873	IMPLEMENTATION
render the SQL	WITHOUT_CLASSIFICATION	0.9999783915700367	WITHOUT_CLASSIFICATION	2.160842996335143E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999817367533982	WITHOUT_CLASSIFICATION	1.8263246601797045E-5	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933277422233	WITHOUT_CLASSIFICATION	6.6722577767126755E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999995931473264	WITHOUT_CLASSIFICATION	4.0685267357734303E-7	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999344014157886	WITHOUT_CLASSIFICATION	6.559858421147881E-5	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999986414185332	WITHOUT_CLASSIFICATION	1.358581466746568E-6	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999974726832768	WITHOUT_CLASSIFICATION	2.527316723240679E-6	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999722104835883	WITHOUT_CLASSIFICATION	2.778951641170753E-5	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.9998855725613224	WITHOUT_CLASSIFICATION	1.1442743867755735E-4	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999953618324023	WITHOUT_CLASSIFICATION	4.638167597642554E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999550395274553	WITHOUT_CLASSIFICATION	4.4960472544602064E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999384393761882	WITHOUT_CLASSIFICATION	6.15606238118309E-5	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999591173845496	WITHOUT_CLASSIFICATION	4.08826154503629E-5	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.9999433606633283	WITHOUT_CLASSIFICATION	5.6639336671677134E-5	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999935885003718	WITHOUT_CLASSIFICATION	6.411499628202475E-6	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999473633914497	WITHOUT_CLASSIFICATION	5.263660855033658E-5	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.9999218466297111	WITHOUT_CLASSIFICATION	7.81533702889279E-5	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999601734728973	WITHOUT_CLASSIFICATION	3.982652710276726E-5	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9866786870333479	WITHOUT_CLASSIFICATION	0.013321312966652142	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999126800739575	WITHOUT_CLASSIFICATION	8.731992604245578E-5	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999995307564834	WITHOUT_CLASSIFICATION	4.692435166443065E-7	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9965975618091671	WITHOUT_CLASSIFICATION	0.0034024381908327626	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.9999686854233216	WITHOUT_CLASSIFICATION	3.1314576678463946E-5	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999967456084508	WITHOUT_CLASSIFICATION	3.254391549281656E-6	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999944855641466	WITHOUT_CLASSIFICATION	5.514435853394832E-6	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999032795796828	WITHOUT_CLASSIFICATION	9.672042031723755E-5	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999782056011215	WITHOUT_CLASSIFICATION	2.179439887859572E-5	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9991898897537687	WITHOUT_CLASSIFICATION	8.101102462313702E-4	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999724797458222	WITHOUT_CLASSIFICATION	2.7520254177773156E-5	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999895283415167	WITHOUT_CLASSIFICATION	1.04716584833421E-5	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999814225257121	WITHOUT_CLASSIFICATION	1.8577474287791372E-5	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999982002794998	WITHOUT_CLASSIFICATION	1.7997205001981444E-6	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999428632961609	WITHOUT_CLASSIFICATION	5.71367038391938E-5	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8110771590717569	IMPLEMENTATION	0.1889228409282431	WITHOUT_CLASSIFICATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9998418686805784	WITHOUT_CLASSIFICATION	1.5813131942157678E-4	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999628815151259	WITHOUT_CLASSIFICATION	3.711848487407613E-5	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999969678955203	WITHOUT_CLASSIFICATION	3.0321044796661287E-6	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5021274869420894	IMPLEMENTATION	0.4978725130579107	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999916705121893	WITHOUT_CLASSIFICATION	8.32948781066111E-6	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998764528992016	WITHOUT_CLASSIFICATION	1.235471007984632E-4	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999921914928189	WITHOUT_CLASSIFICATION	7.808507181091867E-6	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999586362758821	WITHOUT_CLASSIFICATION	4.136372411787159E-5	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999841765429087	WITHOUT_CLASSIFICATION	1.582345709120575E-5	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.999940723553668	WITHOUT_CLASSIFICATION	5.927644633201459E-5	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999551907050828	WITHOUT_CLASSIFICATION	4.4809294917252475E-5	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9981217953052057	WITHOUT_CLASSIFICATION	0.0018782046947942636	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.999940723553668	WITHOUT_CLASSIFICATION	5.927644633201459E-5	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999841765429087	WITHOUT_CLASSIFICATION	1.582345709120575E-5	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999551907050828	WITHOUT_CLASSIFICATION	4.4809294917252475E-5	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.999968068262375	WITHOUT_CLASSIFICATION	3.193173762483818E-5	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999169977177259	WITHOUT_CLASSIFICATION	8.300228227411328E-5	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.998395107449116	WITHOUT_CLASSIFICATION	0.0016048925508839493	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999808301808737	WITHOUT_CLASSIFICATION	1.9169819126295766E-5	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999997226790536	WITHOUT_CLASSIFICATION	2.7732094639008534E-7	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5814613387670637	WITHOUT_CLASSIFICATION	0.4185386612329364	IMPLEMENTATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9950460824200276	WITHOUT_CLASSIFICATION	0.004953917579972525	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999850035140341	WITHOUT_CLASSIFICATION	1.4996485965880113E-5	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999605142904	WITHOUT_CLASSIFICATION	3.9485709531775454E-8	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999803924238856	WITHOUT_CLASSIFICATION	1.9607576114395387E-5	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.9998599638384906	WITHOUT_CLASSIFICATION	1.4003616150945345E-4	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999930659147808	WITHOUT_CLASSIFICATION	6.9340852191329995E-6	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9996198239664467	WITHOUT_CLASSIFICATION	3.8017603355327233E-4	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999808301808737	WITHOUT_CLASSIFICATION	1.9169819126295766E-5	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999990205174156	WITHOUT_CLASSIFICATION	9.79482584389303E-6	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999971513415027	WITHOUT_CLASSIFICATION	2.8486584972387947E-6	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998943745879169	WITHOUT_CLASSIFICATION	1.0562541208318698E-4	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999994454903769	WITHOUT_CLASSIFICATION	5.545096231181535E-7	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.999350167773933	WITHOUT_CLASSIFICATION	6.498322260669676E-4	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9989388059942932	WITHOUT_CLASSIFICATION	0.001061194005706836	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9964107953989226	WITHOUT_CLASSIFICATION	0.003589204601077417	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999905803620375	WITHOUT_CLASSIFICATION	9.419637962582234E-6	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9993526166738003	WITHOUT_CLASSIFICATION	6.473833261996254E-4	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999825521715588	WITHOUT_CLASSIFICATION	1.7447828441138085E-5	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.99894321693375	WITHOUT_CLASSIFICATION	0.0010567830662500397	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.99894321693375	WITHOUT_CLASSIFICATION	0.0010567830662500397	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999717585557175	WITHOUT_CLASSIFICATION	2.8241444282561244E-5	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999717585557175	WITHOUT_CLASSIFICATION	2.8241444282561244E-5	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.999127690496773	WITHOUT_CLASSIFICATION	8.723095032269429E-4	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998943745879169	WITHOUT_CLASSIFICATION	1.0562541208318698E-4	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.998774298093291	WITHOUT_CLASSIFICATION	0.0012257019067090581	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999063210939185	WITHOUT_CLASSIFICATION	9.367890608139521E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.999972565446869	WITHOUT_CLASSIFICATION	2.7434553131052038E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.999972565446869	WITHOUT_CLASSIFICATION	2.7434553131052038E-5	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999585764000924	WITHOUT_CLASSIFICATION	4.1423599907520415E-5	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999440140536221	WITHOUT_CLASSIFICATION	5.598594637785159E-5	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999740370663137	WITHOUT_CLASSIFICATION	2.5962933686247166E-5	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.9999508763910498	WITHOUT_CLASSIFICATION	4.912360895009575E-5	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.999998233021964	WITHOUT_CLASSIFICATION	1.7669780360489186E-6	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999992369629985	WITHOUT_CLASSIFICATION	7.630370015054061E-6	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999845126188458	WITHOUT_CLASSIFICATION	1.5487381154264654E-5	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.99986284333035	WITHOUT_CLASSIFICATION	1.3715666965003525E-4	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.9999582641179686	WITHOUT_CLASSIFICATION	4.173588203132331E-5	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999989552141058	WITHOUT_CLASSIFICATION	1.0447858942967936E-6	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.9999614737780892	WITHOUT_CLASSIFICATION	3.8526221910771886E-5	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.9999087345831401	WITHOUT_CLASSIFICATION	9.12654168598519E-5	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999791545276705	WITHOUT_CLASSIFICATION	2.084547232942389E-5	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9999771249798272	WITHOUT_CLASSIFICATION	2.2875020172865596E-5	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9974643049556651	WITHOUT_CLASSIFICATION	0.0025356950443348836	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998774463276927	WITHOUT_CLASSIFICATION	1.2255367230718629E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999505109121972	WITHOUT_CLASSIFICATION	4.948908780273689E-5	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9996880492625454	WITHOUT_CLASSIFICATION	3.11950737454616E-4	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9838737645654344	WITHOUT_CLASSIFICATION	0.01612623543456561	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999996806560236	WITHOUT_CLASSIFICATION	3.1934397630889944E-7	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9990872012141642	WITHOUT_CLASSIFICATION	9.127987858358517E-4	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999983004615528	WITHOUT_CLASSIFICATION	1.6995384471598728E-6	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998283446125823	WITHOUT_CLASSIFICATION	1.7165538741770905E-4	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999989714457795	WITHOUT_CLASSIFICATION	1.0285542204732629E-6	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999871934980635	WITHOUT_CLASSIFICATION	1.2806501936415655E-5	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9994868761226088	WITHOUT_CLASSIFICATION	5.131238773912575E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999995307564834	WITHOUT_CLASSIFICATION	4.692435166443065E-7	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999801909146554	WITHOUT_CLASSIFICATION	1.980908534455513E-5	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999888580770312	WITHOUT_CLASSIFICATION	1.1141922968807202E-5	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474943714829	WITHOUT_CLASSIFICATION	5.2505628517141496E-5	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999455650296177	WITHOUT_CLASSIFICATION	5.4434970382194785E-5	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999948448035009	WITHOUT_CLASSIFICATION	5.155196499078117E-6	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999948448035009	WITHOUT_CLASSIFICATION	5.155196499078117E-6	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999887318422815	WITHOUT_CLASSIFICATION	1.1268157718531206E-5	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9999455148858857	WITHOUT_CLASSIFICATION	5.448511411432786E-5	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999480263240074	WITHOUT_CLASSIFICATION	5.1973675992556696E-5	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999480263240074	WITHOUT_CLASSIFICATION	5.1973675992556696E-5	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998038890277533	WITHOUT_CLASSIFICATION	1.9611097224670897E-4	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.99993845450149	WITHOUT_CLASSIFICATION	6.154549850998353E-5	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.9936425399516329	WITHOUT_CLASSIFICATION	0.006357460048367046	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999584132926241	WITHOUT_CLASSIFICATION	4.158670737591905E-5	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.9999466974271499	WITHOUT_CLASSIFICATION	5.3302572850004586E-5	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999981982235021	WITHOUT_CLASSIFICATION	1.8017764977986795E-6	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999099110713816	WITHOUT_CLASSIFICATION	9.008892861843322E-5	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999735223729017	WITHOUT_CLASSIFICATION	2.6477627098351495E-5	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999735223729017	WITHOUT_CLASSIFICATION	2.6477627098351495E-5	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9998541439790606	WITHOUT_CLASSIFICATION	1.4585602093941774E-4	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999938673488625	WITHOUT_CLASSIFICATION	6.132651137474984E-6	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999938673488625	WITHOUT_CLASSIFICATION	6.132651137474984E-6	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999827533574862	WITHOUT_CLASSIFICATION	1.72466425138091E-5	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999758528703477	WITHOUT_CLASSIFICATION	2.4147129652248042E-5	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.9999935314637312	WITHOUT_CLASSIFICATION	6.46853626887649E-6	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999960304959322	WITHOUT_CLASSIFICATION	3.969504067765507E-6	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999503551616109	WITHOUT_CLASSIFICATION	4.964483838916472E-5	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.999993492070714	WITHOUT_CLASSIFICATION	6.5079292861416185E-6	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999970405810376	WITHOUT_CLASSIFICATION	2.9594189624371786E-6	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999893893165294	WITHOUT_CLASSIFICATION	1.0610683470597782E-5	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.999514874687239	WITHOUT_CLASSIFICATION	4.8512531276104925E-4	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997648871606988	WITHOUT_CLASSIFICATION	2.3511283930132014E-4	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.901717237641161	WITHOUT_CLASSIFICATION	0.09828276235883895	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999955106253298	WITHOUT_CLASSIFICATION	4.489374670196469E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999955106253298	WITHOUT_CLASSIFICATION	4.489374670196469E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999955106253298	WITHOUT_CLASSIFICATION	4.489374670196469E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999955106253298	WITHOUT_CLASSIFICATION	4.489374670196469E-5	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999834295640834	WITHOUT_CLASSIFICATION	1.6570435916709758E-5	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998307104897596	WITHOUT_CLASSIFICATION	1.6928951024042276E-4	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.9999834144845309	WITHOUT_CLASSIFICATION	1.6585515469177353E-5	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998700208593171	WITHOUT_CLASSIFICATION	1.2997914068287955E-4	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9999567269519745	WITHOUT_CLASSIFICATION	4.32730480254411E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997412654526852	WITHOUT_CLASSIFICATION	2.5873454731488004E-4	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999118954157579	WITHOUT_CLASSIFICATION	8.810458424217564E-5	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999603578291477	WITHOUT_CLASSIFICATION	3.964217085225772E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997412654526852	WITHOUT_CLASSIFICATION	2.5873454731488004E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997412654526852	WITHOUT_CLASSIFICATION	2.5873454731488004E-4	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.999811884836108	WITHOUT_CLASSIFICATION	1.881151638921247E-4	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.9978814876259805	WITHOUT_CLASSIFICATION	0.002118512374019588	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.9998769840178985	WITHOUT_CLASSIFICATION	1.230159821014499E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999862124247465	WITHOUT_CLASSIFICATION	1.3787575253504703E-5	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999999930107326	WITHOUT_CLASSIFICATION	6.989267393531605E-9	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.7226238153097205	IMPLEMENTATION	0.2773761846902795	WITHOUT_CLASSIFICATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999768793562026	WITHOUT_CLASSIFICATION	2.3120643797462093E-5	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999862124247465	WITHOUT_CLASSIFICATION	1.3787575253504703E-5	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.8639711205759977	WITHOUT_CLASSIFICATION	0.13602887942400232	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999142066712944	WITHOUT_CLASSIFICATION	8.579332870564857E-5	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999998803010095	WITHOUT_CLASSIFICATION	1.196989904941855E-6	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999748518375284	WITHOUT_CLASSIFICATION	2.5148162471579136E-5	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999720962362856	WITHOUT_CLASSIFICATION	2.790376371443198E-5	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9993404885027368	WITHOUT_CLASSIFICATION	6.595114972631571E-4	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999919962612734	WITHOUT_CLASSIFICATION	8.00373872659288E-6	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999915767235374	WITHOUT_CLASSIFICATION	8.42327646249208E-6	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960977999781	WITHOUT_CLASSIFICATION	3.902200021808219E-6	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999973438250257	WITHOUT_CLASSIFICATION	2.6561749743114364E-6	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960977999781	WITHOUT_CLASSIFICATION	3.902200021808219E-6	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999965227619416	WITHOUT_CLASSIFICATION	3.4772380583183274E-6	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999039631186878	WITHOUT_CLASSIFICATION	9.603688131222407E-5	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.7548344441038936	WITHOUT_CLASSIFICATION	0.24516555589610653	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999977737055488	WITHOUT_CLASSIFICATION	2.226294451198782E-5	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998094947650091	WITHOUT_CLASSIFICATION	1.9050523499088362E-4	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999998851169696	WITHOUT_CLASSIFICATION	1.1488303039867767E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999653597861718	WITHOUT_CLASSIFICATION	3.464021382806471E-5	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999906870036653	WITHOUT_CLASSIFICATION	9.312996334620743E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999653597861718	WITHOUT_CLASSIFICATION	3.464021382806471E-5	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999973817090134	WITHOUT_CLASSIFICATION	2.6182909865998914E-5	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999946321132449	WITHOUT_CLASSIFICATION	5.36788675507372E-6	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999818394547288	WITHOUT_CLASSIFICATION	1.8160545271125854E-5	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999722885265917	WITHOUT_CLASSIFICATION	2.7711473408243992E-5	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.999976634382487	WITHOUT_CLASSIFICATION	2.3365617513081916E-5	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9998571583280731	WITHOUT_CLASSIFICATION	1.428416719269183E-4	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999998134581171	WITHOUT_CLASSIFICATION	1.865418828982652E-6	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999998851169696	WITHOUT_CLASSIFICATION	1.1488303039867767E-6	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999906870036653	WITHOUT_CLASSIFICATION	9.312996334620743E-6	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999973817090134	WITHOUT_CLASSIFICATION	2.6182909865998914E-5	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9997588197671982	WITHOUT_CLASSIFICATION	2.411802328018018E-4	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.9999260704016667	WITHOUT_CLASSIFICATION	7.392959833331813E-5	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.9998786288861128	WITHOUT_CLASSIFICATION	1.213711138871185E-4	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999996302065008	WITHOUT_CLASSIFICATION	3.6979349924332786E-7	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.9998819215593696	WITHOUT_CLASSIFICATION	1.1807844063034097E-4	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9996990797756856	WITHOUT_CLASSIFICATION	3.009202243143712E-4	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999645471123884	WITHOUT_CLASSIFICATION	3.545288761165268E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999505109121972	WITHOUT_CLASSIFICATION	4.948908780273689E-5	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999946321132449	WITHOUT_CLASSIFICATION	5.36788675507372E-6	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9314402403229959	WITHOUT_CLASSIFICATION	0.0685597596770041	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999394363522902	WITHOUT_CLASSIFICATION	6.05636477098533E-5	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9978293937580873	WITHOUT_CLASSIFICATION	0.0021706062419126525	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999838281648423	WITHOUT_CLASSIFICATION	1.617183515765278E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999505109121972	WITHOUT_CLASSIFICATION	4.948908780273689E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999860188047404	WITHOUT_CLASSIFICATION	1.3981195259577008E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999505109121972	WITHOUT_CLASSIFICATION	4.948908780273689E-5	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999921248413592	WITHOUT_CLASSIFICATION	7.875158640781538E-6	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999615183780415	WITHOUT_CLASSIFICATION	3.848162195860309E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9997642174861462	WITHOUT_CLASSIFICATION	2.3578251385377366E-4	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.999736315002847	WITHOUT_CLASSIFICATION	2.6368499715309396E-4	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999678664259521	WITHOUT_CLASSIFICATION	3.213357404777756E-5	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.9999688955382934	WITHOUT_CLASSIFICATION	3.110446170671941E-5	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998539649299811	WITHOUT_CLASSIFICATION	1.4603507001894434E-4	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999972858839266	WITHOUT_CLASSIFICATION	2.7141160734740434E-6	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.999963145690746	WITHOUT_CLASSIFICATION	3.685430925397767E-5	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.9999941777738972	WITHOUT_CLASSIFICATION	5.82222610282302E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9991991978253176	WITHOUT_CLASSIFICATION	8.008021746823057E-4	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999921293630616	WITHOUT_CLASSIFICATION	7.870636938416587E-6	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9997897008282193	WITHOUT_CLASSIFICATION	2.10299171780683E-4	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999434888495615	WITHOUT_CLASSIFICATION	5.6511150438445496E-5	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999913095576165	WITHOUT_CLASSIFICATION	8.690442383545584E-6	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999862200254037	WITHOUT_CLASSIFICATION	1.3779974596233917E-5	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999978778355504	WITHOUT_CLASSIFICATION	2.1221644495866977E-6	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999931707367821	WITHOUT_CLASSIFICATION	6.829263217979958E-6	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999997075477589	WITHOUT_CLASSIFICATION	2.9245224103257496E-7	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999786035670161	WITHOUT_CLASSIFICATION	2.1396432983979406E-5	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999915579559947	WITHOUT_CLASSIFICATION	8.442044005359876E-6	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999915579559947	WITHOUT_CLASSIFICATION	8.442044005359876E-6	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999923281766425	WITHOUT_CLASSIFICATION	7.671823357465786E-6	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999897865514329	WITHOUT_CLASSIFICATION	1.021344856706251E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999550357489303	WITHOUT_CLASSIFICATION	4.496425106969211E-5	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999998754092185	WITHOUT_CLASSIFICATION	1.2459078142282657E-7	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9997102064874182	WITHOUT_CLASSIFICATION	2.897935125818278E-4	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999342613007078	WITHOUT_CLASSIFICATION	6.573869929212198E-5	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999685617280324	WITHOUT_CLASSIFICATION	3.1438271967488535E-5	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999993674072082	WITHOUT_CLASSIFICATION	6.325927917646759E-7	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.8774155378581756	WITHOUT_CLASSIFICATION	0.12258446214182434	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999855970492235	WITHOUT_CLASSIFICATION	1.4402950776537259E-5	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999963733600969	WITHOUT_CLASSIFICATION	3.626639903099495E-5	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.9998359239212995	WITHOUT_CLASSIFICATION	1.6407607870051074E-4	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999221220303329	WITHOUT_CLASSIFICATION	7.787796966716183E-5	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999902174134182	WITHOUT_CLASSIFICATION	9.782586581777982E-6	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999666900387317	WITHOUT_CLASSIFICATION	3.330996126825852E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999853992606047	WITHOUT_CLASSIFICATION	1.4600739395274892E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999856018002035	WITHOUT_CLASSIFICATION	1.4398199796573305E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999856018002035	WITHOUT_CLASSIFICATION	1.4398199796573305E-5	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999791720286761	WITHOUT_CLASSIFICATION	2.082797132387859E-5	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999972858839266	WITHOUT_CLASSIFICATION	2.7141160734740434E-6	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9940218160636195	WITHOUT_CLASSIFICATION	0.0059781839363805015	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999897681972054	WITHOUT_CLASSIFICATION	1.0231802794619078E-5	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9998346783524629	WITHOUT_CLASSIFICATION	1.6532164753710254E-4	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999973022279656	WITHOUT_CLASSIFICATION	2.6977720343640884E-6	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.9998265366389029	WITHOUT_CLASSIFICATION	1.734633610970448E-4	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.999957963546697	WITHOUT_CLASSIFICATION	4.2036453303097636E-5	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.999817867746125	WITHOUT_CLASSIFICATION	1.8213225387501142E-4	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997134130881743	WITHOUT_CLASSIFICATION	2.8658691182576336E-4	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.9999491964366198	WITHOUT_CLASSIFICATION	5.080356338007594E-5	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999995056381537	WITHOUT_CLASSIFICATION	4.943618464431284E-7	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999570522434	WITHOUT_CLASSIFICATION	4.294775665356495E-8	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999997717358692	WITHOUT_CLASSIFICATION	2.2826413090926976E-7	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9989256408984953	WITHOUT_CLASSIFICATION	0.0010743591015047048	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999631676268487	WITHOUT_CLASSIFICATION	3.683237315145975E-5	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999948826289103	WITHOUT_CLASSIFICATION	5.117371089631486E-6	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999937200124406	WITHOUT_CLASSIFICATION	6.279987559493243E-6	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999531379693156	WITHOUT_CLASSIFICATION	4.6862030684432574E-5	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999405105952339	WITHOUT_CLASSIFICATION	5.9489404765993034E-5	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999823529422941	WITHOUT_CLASSIFICATION	1.7647057705899333E-5	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999991934567902	WITHOUT_CLASSIFICATION	8.06543209791189E-6	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999259460456977	WITHOUT_CLASSIFICATION	7.405395430230927E-4	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999468877521062	WITHOUT_CLASSIFICATION	5.311224789385623E-5	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999986227516279	WITHOUT_CLASSIFICATION	1.3772483721738656E-6	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.999999122696673	WITHOUT_CLASSIFICATION	8.773033270108571E-7	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999865604229646	WITHOUT_CLASSIFICATION	1.3439577035328656E-5	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.8339260411336035	WITHOUT_CLASSIFICATION	0.16607395886639653	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999079092295664	WITHOUT_CLASSIFICATION	9.209077043355962E-5	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9998049457967163	WITHOUT_CLASSIFICATION	1.9505420328381503E-4	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999469965875678	WITHOUT_CLASSIFICATION	5.300341243223261E-5	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999468493644954	WITHOUT_CLASSIFICATION	5.3150635504732854E-5	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999808381664227	WITHOUT_CLASSIFICATION	1.9161833577312954E-5	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999760466493496	WITHOUT_CLASSIFICATION	2.3953350650376898E-5	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999830164166038	WITHOUT_CLASSIFICATION	1.6983583396184612E-5	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999518237560008	WITHOUT_CLASSIFICATION	4.817624399928676E-5	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999742043394342	WITHOUT_CLASSIFICATION	2.5795660565824363E-5	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999555663353145	WITHOUT_CLASSIFICATION	4.443366468552152E-5	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998830824184327	WITHOUT_CLASSIFICATION	1.1691758156734709E-4	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998830824184327	WITHOUT_CLASSIFICATION	1.1691758156734709E-4	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999105704879746	WITHOUT_CLASSIFICATION	8.94295120254239E-5	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999791841630602	WITHOUT_CLASSIFICATION	2.081583693985239E-5	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999998389167557	WITHOUT_CLASSIFICATION	1.6108324428828523E-6	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999998389167557	WITHOUT_CLASSIFICATION	1.6108324428828523E-6	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.9999852938091335	WITHOUT_CLASSIFICATION	1.4706190866580444E-5	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999695459702165	WITHOUT_CLASSIFICATION	3.0454029783588915E-5	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.999940248774326	WITHOUT_CLASSIFICATION	5.975122567403648E-5	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999968365433263	WITHOUT_CLASSIFICATION	3.163456673681393E-6	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999634586887534	WITHOUT_CLASSIFICATION	3.654131124663019E-5	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999527874659017	WITHOUT_CLASSIFICATION	4.7212534098380494E-5	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999947482161673	WITHOUT_CLASSIFICATION	5.25178383268795E-6	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999947482161673	WITHOUT_CLASSIFICATION	5.25178383268795E-6	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999527874659017	WITHOUT_CLASSIFICATION	4.7212534098380494E-5	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999051496584583	WITHOUT_CLASSIFICATION	9.485034154172835E-5	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999349055696718	WITHOUT_CLASSIFICATION	6.509443032828276E-5	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999318952928118	WITHOUT_CLASSIFICATION	6.810470718825743E-5	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999318952928118	WITHOUT_CLASSIFICATION	6.810470718825743E-5	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.999871193204245	WITHOUT_CLASSIFICATION	1.288067957550324E-4	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999310796884654	WITHOUT_CLASSIFICATION	6.892031153460707E-5	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999662595649734	WITHOUT_CLASSIFICATION	3.3740435026599034E-4	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9999842085255185	WITHOUT_CLASSIFICATION	1.579147448149185E-5	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999991385989712	WITHOUT_CLASSIFICATION	8.614010287775729E-7	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999403667157614	WITHOUT_CLASSIFICATION	5.963328423855078E-5	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999742687274082	WITHOUT_CLASSIFICATION	2.5731272591748143E-5	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.9997641675229951	WITHOUT_CLASSIFICATION	2.3583247700482778E-4	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.9999858822801965	WITHOUT_CLASSIFICATION	1.411771980357544E-5	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999977461361432	WITHOUT_CLASSIFICATION	2.2538638567097673E-6	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999853367139259	WITHOUT_CLASSIFICATION	1.466328607417346E-5	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9571653974327309	WITHOUT_CLASSIFICATION	0.042834602567269134	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.9072886266199053	WITHOUT_CLASSIFICATION	0.09271137338009477	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999990888320635	WITHOUT_CLASSIFICATION	9.111679364694442E-7	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.9999611879577379	WITHOUT_CLASSIFICATION	3.8812042262138945E-5	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999915061354986	WITHOUT_CLASSIFICATION	8.493864501400904E-6	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999596377942156	WITHOUT_CLASSIFICATION	4.036220578440536E-5	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9879747253257009	WITHOUT_CLASSIFICATION	0.012025274674299258	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9979757788674104	WITHOUT_CLASSIFICATION	0.0020242211325896273	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9997555490970217	WITHOUT_CLASSIFICATION	2.4445090297829484E-4	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9991203263257845	WITHOUT_CLASSIFICATION	8.796736742155543E-4	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9998218584334247	WITHOUT_CLASSIFICATION	1.7814156657525328E-4	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9989491848399813	WITHOUT_CLASSIFICATION	0.0010508151600186995	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999962503419187	WITHOUT_CLASSIFICATION	3.749658081270588E-6	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.9999907144416277	WITHOUT_CLASSIFICATION	9.28555837225736E-6	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999878423971857	WITHOUT_CLASSIFICATION	1.2157602814285474E-5	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9996460411243123	WITHOUT_CLASSIFICATION	3.539588756876225E-4	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999994288088248	WITHOUT_CLASSIFICATION	5.711911752327815E-7	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999886465425276	WITHOUT_CLASSIFICATION	1.1353457472370598E-5	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999480371258089	WITHOUT_CLASSIFICATION	5.196287419110244E-5	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999754809643858	WITHOUT_CLASSIFICATION	2.4519035614236722E-5	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999851704433577	WITHOUT_CLASSIFICATION	1.4829556642334131E-5	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999331650619682	WITHOUT_CLASSIFICATION	6.68349380318556E-5	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999340509604594	WITHOUT_CLASSIFICATION	6.59490395405068E-5	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999589750305303	WITHOUT_CLASSIFICATION	4.1024969469712556E-5	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999627631768707	WITHOUT_CLASSIFICATION	3.723682312928799E-5	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999976696526692	WITHOUT_CLASSIFICATION	2.3303473308094568E-6	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999456962676129	WITHOUT_CLASSIFICATION	5.430373238715697E-5	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999727043755666	WITHOUT_CLASSIFICATION	2.7295624433435838E-5	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.9999511407286855	WITHOUT_CLASSIFICATION	4.885927131445122E-5	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.9999734192688264	WITHOUT_CLASSIFICATION	2.65807311735486E-5	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9999734894692622	WITHOUT_CLASSIFICATION	2.6510530737765936E-5	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.999936703129207	WITHOUT_CLASSIFICATION	6.329687079299157E-5	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.9999734613450003	WITHOUT_CLASSIFICATION	2.653865499974531E-5	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9998730455265418	WITHOUT_CLASSIFICATION	1.2695447345829682E-4	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9950950647381582	WITHOUT_CLASSIFICATION	0.004904935261841757	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9998746735578065	WITHOUT_CLASSIFICATION	1.2532644219357262E-4	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999343723871713	WITHOUT_CLASSIFICATION	6.562761282869682E-5	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9998460324864239	WITHOUT_CLASSIFICATION	1.5396751357619787E-4	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.7808893144007325	IMPLEMENTATION	0.21911068559926747	WITHOUT_CLASSIFICATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9985789357721415	WITHOUT_CLASSIFICATION	0.0014210642278584724	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999876974573462	WITHOUT_CLASSIFICATION	1.2302542653882731E-5	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999941049191373	WITHOUT_CLASSIFICATION	5.895080862646341E-6	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999876227016684	WITHOUT_CLASSIFICATION	1.237729833154938E-5	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999734657471367	WITHOUT_CLASSIFICATION	2.653425286319945E-5	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9992364996058766	WITHOUT_CLASSIFICATION	7.635003941234456E-4	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999997452040342	WITHOUT_CLASSIFICATION	2.5479596578955483E-7	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998047557398514	WITHOUT_CLASSIFICATION	1.9524426014858043E-4	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998047557398514	WITHOUT_CLASSIFICATION	1.9524426014858043E-4	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999999489545	WITHOUT_CLASSIFICATION	5.104541249374342E-11	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999341131993553	WITHOUT_CLASSIFICATION	6.588680064469242E-5	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999970260631151	WITHOUT_CLASSIFICATION	2.9739368849182493E-6	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999974416424932	WITHOUT_CLASSIFICATION	2.558357506798761E-6	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999820527022094	WITHOUT_CLASSIFICATION	1.7947297790665956E-5	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999913643409282	WITHOUT_CLASSIFICATION	8.635659071929217E-6	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.999986450606674	WITHOUT_CLASSIFICATION	1.3549393325959927E-5	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999903288931	WITHOUT_CLASSIFICATION	9.671106917332951E-9	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999950472371617	WITHOUT_CLASSIFICATION	4.95276283826406E-6	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999979293547876	WITHOUT_CLASSIFICATION	2.0706452124422175E-6	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999016445096103	WITHOUT_CLASSIFICATION	9.835549038972707E-5	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9994333052519293	WITHOUT_CLASSIFICATION	5.666947480707494E-4	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999415030169	WITHOUT_CLASSIFICATION	5.84969830791791E-8	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9998135847333566	WITHOUT_CLASSIFICATION	1.8641526664351662E-4	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999977992051071	WITHOUT_CLASSIFICATION	2.2007948929265264E-6	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999977992051071	WITHOUT_CLASSIFICATION	2.2007948929265264E-6	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999971824328686	WITHOUT_CLASSIFICATION	2.8175671313882988E-6	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.999964212045196	WITHOUT_CLASSIFICATION	3.578795480407783E-5	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999910120078142	WITHOUT_CLASSIFICATION	8.987992185863847E-6	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.999997900192608	WITHOUT_CLASSIFICATION	2.099807391976037E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999750202882134	WITHOUT_CLASSIFICATION	2.497971178665182E-5	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999967954114497	WITHOUT_CLASSIFICATION	3.2045885503060745E-5	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9998903055359276	WITHOUT_CLASSIFICATION	1.0969446407244959E-4	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.9999902071013482	WITHOUT_CLASSIFICATION	9.792898651816981E-6	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999904097367313	WITHOUT_CLASSIFICATION	9.590263268638265E-6	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999757748040978	WITHOUT_CLASSIFICATION	2.422519590213924E-5	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9997193333019273	WITHOUT_CLASSIFICATION	2.806666980726915E-4	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9991642410077827	WITHOUT_CLASSIFICATION	8.357589922172512E-4	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999458183238431	WITHOUT_CLASSIFICATION	5.4181676156823235E-5	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999931488900435	WITHOUT_CLASSIFICATION	6.851109956364197E-6	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999851719354941	WITHOUT_CLASSIFICATION	1.4828064505894304E-4	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9997836836806333	WITHOUT_CLASSIFICATION	2.163163193665895E-4	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9992923899214101	WITHOUT_CLASSIFICATION	7.076100785897509E-4	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999935374236522	WITHOUT_CLASSIFICATION	6.46257634789442E-6	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999971482364404	WITHOUT_CLASSIFICATION	2.8517635595390242E-6	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999969361283002	WITHOUT_CLASSIFICATION	3.063871699789376E-6	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999994430211895	WITHOUT_CLASSIFICATION	5.569788104630248E-7	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999984706588121	WITHOUT_CLASSIFICATION	1.5293411879340039E-6	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999997293934806	WITHOUT_CLASSIFICATION	2.7060651950143396E-7	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999995429804608	WITHOUT_CLASSIFICATION	4.570195392231463E-7	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999966119239604	WITHOUT_CLASSIFICATION	3.3880760396016583E-6	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.9999331490010339	WITHOUT_CLASSIFICATION	6.685099896607966E-5	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999860061318858	WITHOUT_CLASSIFICATION	1.3993868114211413E-4	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9993146332279592	WITHOUT_CLASSIFICATION	6.853667720407322E-4	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999727437315322	WITHOUT_CLASSIFICATION	2.7256268467719316E-5	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999462489639014	WITHOUT_CLASSIFICATION	5.3751036098617186E-5	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9998237594858307	WITHOUT_CLASSIFICATION	1.762405141693722E-4	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999975780916596	WITHOUT_CLASSIFICATION	2.4219083403785054E-6	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999948116607332	WITHOUT_CLASSIFICATION	5.1883392667003225E-6	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999860485774887	WITHOUT_CLASSIFICATION	1.3951422511248159E-5	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999921302846975	WITHOUT_CLASSIFICATION	7.869715302644248E-6	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9944557724762216	WITHOUT_CLASSIFICATION	0.005544227523778357	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9397312023126559	WITHOUT_CLASSIFICATION	0.06026879768734401	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9998588652361783	WITHOUT_CLASSIFICATION	1.411347638216951E-4	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999725530591029	WITHOUT_CLASSIFICATION	2.7446940897121738E-5	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999995206679132	WITHOUT_CLASSIFICATION	4.793320868962272E-7	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9743435609095474	WITHOUT_CLASSIFICATION	0.02565643909045247	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999921801035475	WITHOUT_CLASSIFICATION	7.819896452483901E-6	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997902066426378	WITHOUT_CLASSIFICATION	2.0979335736212422E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997902066426378	WITHOUT_CLASSIFICATION	2.0979335736212422E-4	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999988215105861	WITHOUT_CLASSIFICATION	1.1784894139220558E-6	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999764927322818	WITHOUT_CLASSIFICATION	2.350726771809918E-5	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9980717558542684	WITHOUT_CLASSIFICATION	0.0019282441457315704	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999890545915175	WITHOUT_CLASSIFICATION	1.094540848238793E-5	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9894439753745223	WITHOUT_CLASSIFICATION	0.010556024625477651	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999997018989959	WITHOUT_CLASSIFICATION	2.9810100409170973E-7	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999831021677635	WITHOUT_CLASSIFICATION	1.6897832236362444E-5	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9998938176546944	WITHOUT_CLASSIFICATION	1.0618234530561415E-4	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999833354470614	WITHOUT_CLASSIFICATION	1.6664552938572118E-5	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447484429703	WITHOUT_CLASSIFICATION	1.5525155702955E-4	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447484429703	WITHOUT_CLASSIFICATION	1.5525155702955E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999855112041781	WITHOUT_CLASSIFICATION	1.448879582175432E-5	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999296639787	WITHOUT_CLASSIFICATION	7.033602134299516E-8	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999980914719565	WITHOUT_CLASSIFICATION	1.908528043510044E-6	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9785214847690443	WITHOUT_CLASSIFICATION	0.021478515230955602	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999840358682863	WITHOUT_CLASSIFICATION	1.596413171366565E-5	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999767858908246	WITHOUT_CLASSIFICATION	2.3214109175389786E-5	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.999992847787552	WITHOUT_CLASSIFICATION	7.152212447987952E-6	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999183946446937	WITHOUT_CLASSIFICATION	8.160535530625786E-5	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999829283606292	WITHOUT_CLASSIFICATION	1.7071639370789744E-5	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999129759775284	WITHOUT_CLASSIFICATION	8.702402247166747E-5	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999995192990722	WITHOUT_CLASSIFICATION	4.807009277544426E-7	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9988780785731544	WITHOUT_CLASSIFICATION	0.0011219214268456386	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9978324356943737	WITHOUT_CLASSIFICATION	0.0021675643056262967	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999745157638559	WITHOUT_CLASSIFICATION	2.548423614412542E-5	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999922479823933	WITHOUT_CLASSIFICATION	7.752017606797315E-6	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999149142461276	WITHOUT_CLASSIFICATION	8.508575387233897E-5	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999427752156929	WITHOUT_CLASSIFICATION	5.7224784307221456E-5	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999117747996741	WITHOUT_CLASSIFICATION	8.822520032598955E-5	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9964678464000488	WITHOUT_CLASSIFICATION	0.0035321535999511865	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999514328079928	WITHOUT_CLASSIFICATION	4.8567192007149835E-5	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9996621926612651	WITHOUT_CLASSIFICATION	3.37807338734827E-4	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.999999415745834	WITHOUT_CLASSIFICATION	5.842541660137516E-7	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999987464265929	WITHOUT_CLASSIFICATION	1.2535734070997057E-6	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999684832271531	WITHOUT_CLASSIFICATION	3.151677284691604E-5	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999688236851	WITHOUT_CLASSIFICATION	3.117631492269904E-8	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999882448476558	WITHOUT_CLASSIFICATION	1.1755152344165371E-5	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999988322389113	WITHOUT_CLASSIFICATION	1.1677610887010599E-6	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999486256969657	WITHOUT_CLASSIFICATION	5.137430303413929E-5	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999976703128621	WITHOUT_CLASSIFICATION	2.3296871377754834E-6	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9998621062173834	WITHOUT_CLASSIFICATION	1.378937826166681E-4	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999910911246743	WITHOUT_CLASSIFICATION	8.908875325610341E-6	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999671889473356	WITHOUT_CLASSIFICATION	3.2811052664429913E-5	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999987375864963	WITHOUT_CLASSIFICATION	1.2624135037117812E-6	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.99999501018216	WITHOUT_CLASSIFICATION	4.9898178401166885E-6	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9998930774774005	WITHOUT_CLASSIFICATION	1.0692252259951965E-4	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9998564880145236	WITHOUT_CLASSIFICATION	1.4351198547626922E-4	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9938312643148999	WITHOUT_CLASSIFICATION	0.006168735685100118	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.999999382988769	WITHOUT_CLASSIFICATION	6.170112310607665E-7	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999415030169	WITHOUT_CLASSIFICATION	5.84969830791791E-8	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999890891126422	WITHOUT_CLASSIFICATION	1.0910887357782111E-5	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999994560125328	WITHOUT_CLASSIFICATION	5.439874670970892E-7	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9998171399411275	WITHOUT_CLASSIFICATION	1.8286005887238596E-4	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999998934249662	WITHOUT_CLASSIFICATION	1.0657503373508832E-7	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999868818441	WITHOUT_CLASSIFICATION	1.3118155901893478E-8	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9998617427388455	WITHOUT_CLASSIFICATION	1.3825726115433096E-4	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9998300243522165	WITHOUT_CLASSIFICATION	1.6997564778355908E-4	IMPLEMENTATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9104687842911446	WITHOUT_CLASSIFICATION	0.08953121570885536	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999989642028573	WITHOUT_CLASSIFICATION	1.035797142747143E-6	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9881051812101681	WITHOUT_CLASSIFICATION	0.01189481878983189	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999992893197166	WITHOUT_CLASSIFICATION	7.106802833252931E-7	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999709170423592	WITHOUT_CLASSIFICATION	2.9082957640865614E-5	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9980181504705644	WITHOUT_CLASSIFICATION	0.00198184952943561	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999954710560447	WITHOUT_CLASSIFICATION	4.528943955339123E-6	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9941659356419589	WITHOUT_CLASSIFICATION	0.005834064358041147	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822450219968	WITHOUT_CLASSIFICATION	1.775497800313108E-5	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998571583280731	WITHOUT_CLASSIFICATION	1.428416719269183E-4	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999851434545624	WITHOUT_CLASSIFICATION	1.4856545437692023E-5	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9992355127153002	WITHOUT_CLASSIFICATION	7.644872846997748E-4	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999955861703044	WITHOUT_CLASSIFICATION	4.413829695608507E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822450219968	WITHOUT_CLASSIFICATION	1.775497800313108E-5	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.7555073667330249	WITHOUT_CLASSIFICATION	0.24449263326697504	IMPLEMENTATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999488405596345	WITHOUT_CLASSIFICATION	5.115944036545184E-5	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999904243023953	WITHOUT_CLASSIFICATION	9.575697604693486E-6	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9975166653754792	WITHOUT_CLASSIFICATION	0.0024833346245207552	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999731751341586	WITHOUT_CLASSIFICATION	2.682486584128454E-5	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998767966310578	WITHOUT_CLASSIFICATION	1.2320336894225842E-4	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999982345000836	WITHOUT_CLASSIFICATION	1.765499916372435E-6	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9796841859566203	WITHOUT_CLASSIFICATION	0.020315814043379694	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999977359805776	WITHOUT_CLASSIFICATION	2.26401942230397E-6	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998761895924684	WITHOUT_CLASSIFICATION	1.238104075315649E-4	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9997825839264504	WITHOUT_CLASSIFICATION	2.1741607354967488E-4	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9945143869573351	WITHOUT_CLASSIFICATION	0.005485613042664901	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999791833373515	WITHOUT_CLASSIFICATION	2.0816662648518605E-5	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9943903982928132	WITHOUT_CLASSIFICATION	0.005609601707186807	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999024973236229	WITHOUT_CLASSIFICATION	9.750267637703374E-5	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9998619077419596	WITHOUT_CLASSIFICATION	1.3809225804047484E-4	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999259460456977	WITHOUT_CLASSIFICATION	7.405395430230927E-4	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999995076625341	WITHOUT_CLASSIFICATION	4.923374658974647E-6	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999942723651092	WITHOUT_CLASSIFICATION	5.7276348908084465E-6	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9991119063349481	WITHOUT_CLASSIFICATION	8.880936650519981E-4	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9971941366829654	WITHOUT_CLASSIFICATION	0.0028058633170346065	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9992451600131622	WITHOUT_CLASSIFICATION	7.548399868377755E-4	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999977935733663	WITHOUT_CLASSIFICATION	2.2064266337352954E-6	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9997291381718424	WITHOUT_CLASSIFICATION	2.7086182815759194E-4	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999999616815	WITHOUT_CLASSIFICATION	3.831849240796406E-11	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999929452256598	WITHOUT_CLASSIFICATION	7.05477434010374E-6	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999557471110837	WITHOUT_CLASSIFICATION	4.425288891638165E-5	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9973686248806615	WITHOUT_CLASSIFICATION	0.002631375119338532	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999736114704826	WITHOUT_CLASSIFICATION	2.6388529517413585E-5	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9984726481309477	WITHOUT_CLASSIFICATION	0.0015273518690522272	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9989464399418878	WITHOUT_CLASSIFICATION	0.001053560058112233	IMPLEMENTATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999618375763237	WITHOUT_CLASSIFICATION	3.8162423676310735E-5	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.999970715211022	WITHOUT_CLASSIFICATION	2.928478897804782E-5	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999854726979414	WITHOUT_CLASSIFICATION	1.4527302058647824E-5	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999972329591189	WITHOUT_CLASSIFICATION	2.7670408811726443E-6	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999998949830284	WITHOUT_CLASSIFICATION	1.0501697154117043E-7	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999999951712315	WITHOUT_CLASSIFICATION	4.8287684976406576E-8	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999995066782699	WITHOUT_CLASSIFICATION	4.933217301848842E-7	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9996218495601326	WITHOUT_CLASSIFICATION	3.7815043986748846E-4	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999553558113288	WITHOUT_CLASSIFICATION	4.464418867122315E-5	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999066654436359	WITHOUT_CLASSIFICATION	9.333455636413423E-5	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999928201525353	WITHOUT_CLASSIFICATION	7.179847464652689E-6	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999928201525353	WITHOUT_CLASSIFICATION	7.179847464652689E-6	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999521404951723	WITHOUT_CLASSIFICATION	4.785950482762893E-5	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999991037920107	WITHOUT_CLASSIFICATION	8.962079891781548E-7	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999609145591078	WITHOUT_CLASSIFICATION	3.908544089219971E-5	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999967433969308	WITHOUT_CLASSIFICATION	3.256603069239205E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999584132926241	WITHOUT_CLASSIFICATION	4.158670737591905E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999584132926241	WITHOUT_CLASSIFICATION	4.158670737591905E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999706481905833	WITHOUT_CLASSIFICATION	2.9351809416670784E-5	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999895567464631	WITHOUT_CLASSIFICATION	1.0443253536965748E-5	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9996204666349753	WITHOUT_CLASSIFICATION	3.7953336502481754E-4	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999806907885679	WITHOUT_CLASSIFICATION	1.9309211432090473E-4	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9998571583280731	WITHOUT_CLASSIFICATION	1.428416719269183E-4	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9985024867724147	WITHOUT_CLASSIFICATION	0.0014975132275853735	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9881140375273935	WITHOUT_CLASSIFICATION	0.011885962472606506	IMPLEMENTATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999978132397502	WITHOUT_CLASSIFICATION	2.186760249792492E-5	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9998849429161206	WITHOUT_CLASSIFICATION	1.1505708387932584E-4	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999309103189017	WITHOUT_CLASSIFICATION	6.908968109823977E-5	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999918997988968	WITHOUT_CLASSIFICATION	8.100201103138406E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902965201467	WITHOUT_CLASSIFICATION	9.703479853182237E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902965201467	WITHOUT_CLASSIFICATION	9.703479853182237E-6	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9998619077419596	WITHOUT_CLASSIFICATION	1.3809225804047484E-4	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999549867842461	WITHOUT_CLASSIFICATION	4.5013215753895975E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999574665666876	WITHOUT_CLASSIFICATION	4.253343331250058E-5	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999737836665551	WITHOUT_CLASSIFICATION	2.621633344482365E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999842693818979	WITHOUT_CLASSIFICATION	1.5730618102200713E-5	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933277422233	WITHOUT_CLASSIFICATION	6.6722577767126755E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999990614599545	WITHOUT_CLASSIFICATION	9.385400453467822E-7	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999902983230393	WITHOUT_CLASSIFICATION	9.701676960806006E-6	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.999892539500996	WITHOUT_CLASSIFICATION	1.0746049900401295E-4	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999854164635185	WITHOUT_CLASSIFICATION	1.458353648162453E-5	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998761895924684	WITHOUT_CLASSIFICATION	1.238104075315649E-4	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999895296729138	WITHOUT_CLASSIFICATION	1.0470327086153907E-5	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999167161575164	WITHOUT_CLASSIFICATION	8.328384248360338E-5	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999992531736818	WITHOUT_CLASSIFICATION	7.468263183674199E-7	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.9999635082476123	WITHOUT_CLASSIFICATION	3.6491752387679496E-5	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999149603919518	WITHOUT_CLASSIFICATION	8.503960804819919E-5	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999452352608438	WITHOUT_CLASSIFICATION	5.4764739156072056E-5	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9992738009066982	WITHOUT_CLASSIFICATION	7.261990933017807E-4	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9998460953874143	WITHOUT_CLASSIFICATION	1.5390461258571684E-4	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9998530078162711	WITHOUT_CLASSIFICATION	1.4699218372896962E-4	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.997141390631349	WITHOUT_CLASSIFICATION	0.0028586093686510093	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.997141390631349	WITHOUT_CLASSIFICATION	0.0028586093686510093	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999862124247465	WITHOUT_CLASSIFICATION	1.3787575253504703E-5	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.999996795504488	WITHOUT_CLASSIFICATION	3.2044955119509058E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997412654526852	WITHOUT_CLASSIFICATION	2.5873454731488004E-4	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999204955708982	WITHOUT_CLASSIFICATION	7.950442910177969E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999433632136832	WITHOUT_CLASSIFICATION	5.663678631676692E-5	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999352128660919	WITHOUT_CLASSIFICATION	6.478713390804449E-5	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999977737055488	WITHOUT_CLASSIFICATION	2.226294451198782E-5	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.999999999972556	WITHOUT_CLASSIFICATION	2.7444030055927172E-11	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9997588197671982	WITHOUT_CLASSIFICATION	2.411802328018018E-4	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999842101049077	WITHOUT_CLASSIFICATION	1.5789895092318337E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999505109121972	WITHOUT_CLASSIFICATION	4.948908780273689E-5	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9998228553998917	WITHOUT_CLASSIFICATION	1.771446001083155E-4	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999947535603644	WITHOUT_CLASSIFICATION	5.246439635636122E-6	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999997334327848	WITHOUT_CLASSIFICATION	2.665672152071118E-6	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999990054931145	WITHOUT_CLASSIFICATION	9.945068854445886E-7	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999322740019932	WITHOUT_CLASSIFICATION	6.772599800678452E-5	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9998560555756185	WITHOUT_CLASSIFICATION	1.439444243814983E-4	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999632649549786	WITHOUT_CLASSIFICATION	3.673504502138761E-5	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9991135163350564	WITHOUT_CLASSIFICATION	8.864836649434789E-4	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999530964381	WITHOUT_CLASSIFICATION	4.690356192424765E-8	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999968689948973	WITHOUT_CLASSIFICATION	3.1310051027465963E-6	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999845679354	WITHOUT_CLASSIFICATION	1.5432064684285432E-8	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999662595649734	WITHOUT_CLASSIFICATION	3.3740435026599034E-4	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999946101299635	WITHOUT_CLASSIFICATION	5.389870036485086E-6	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999983965242358	WITHOUT_CLASSIFICATION	1.6034757642062965E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999983965242358	WITHOUT_CLASSIFICATION	1.6034757642062965E-5	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999296518009434	WITHOUT_CLASSIFICATION	7.034819905655398E-5	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9975302910886733	WITHOUT_CLASSIFICATION	0.0024697089113267364	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999952373198595	WITHOUT_CLASSIFICATION	4.762680140409387E-6	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999341376020594	WITHOUT_CLASSIFICATION	6.586239794055769E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999853286887721	WITHOUT_CLASSIFICATION	1.4671311227881968E-5	IMPLEMENTATION
