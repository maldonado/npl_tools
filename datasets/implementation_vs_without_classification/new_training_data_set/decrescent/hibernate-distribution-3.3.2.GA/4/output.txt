todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9981316791681173	WITHOUT_CLASSIFICATION	0.0018683208318826857	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9981316791681173	WITHOUT_CLASSIFICATION	0.0018683208318826857	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.6857057473136936	WITHOUT_CLASSIFICATION	0.31429425268630645	IMPLEMENTATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.6567187232869263	WITHOUT_CLASSIFICATION	0.34328127671307374	IMPLEMENTATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.7906913889665689	WITHOUT_CLASSIFICATION	0.20930861103343115	IMPLEMENTATION
TODO: handle TypeDefs	IMPLEMENTATION	0.844645234598229	IMPLEMENTATION	0.1553547654017709	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9264027765717505	WITHOUT_CLASSIFICATION	0.07359722342824947	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.6439940562061105	IMPLEMENTATION	0.3560059437938895	WITHOUT_CLASSIFICATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.5963069503038521	WITHOUT_CLASSIFICATION	0.4036930496961479	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.5303663934235429	WITHOUT_CLASSIFICATION	0.4696336065764572	IMPLEMENTATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9970007007718463	WITHOUT_CLASSIFICATION	0.002999299228153673	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.844645234598229	IMPLEMENTATION	0.1553547654017709	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9067378292442713	IMPLEMENTATION	0.09326217075572865	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9067378292442713	IMPLEMENTATION	0.09326217075572865	WITHOUT_CLASSIFICATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.8916914959457739	WITHOUT_CLASSIFICATION	0.10830850405422614	IMPLEMENTATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.5361325887049719	WITHOUT_CLASSIFICATION	0.46386741129502806	IMPLEMENTATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999998046689124	IMPLEMENTATION	1.953310876529891E-7	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.5366714411749485	IMPLEMENTATION	0.46332855882505164	WITHOUT_CLASSIFICATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.9999895691174616	WITHOUT_CLASSIFICATION	1.0430882538383578E-5	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.8551778290748189	IMPLEMENTATION	0.14482217092518118	WITHOUT_CLASSIFICATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.8029924643235195	IMPLEMENTATION	0.19700753567648055	WITHOUT_CLASSIFICATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9997951595530677	WITHOUT_CLASSIFICATION	2.0484044693229038E-4	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.6765536174361921	WITHOUT_CLASSIFICATION	0.32344638256380787	IMPLEMENTATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.980660000687377	IMPLEMENTATION	0.019339999312622955	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.980660000687377	IMPLEMENTATION	0.019339999312622955	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.8112895936633395	WITHOUT_CLASSIFICATION	0.1887104063366605	IMPLEMENTATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.605315839839168	IMPLEMENTATION	0.3946841601608319	WITHOUT_CLASSIFICATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.6461362668111008	WITHOUT_CLASSIFICATION	0.35386373318889924	IMPLEMENTATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.5393698512657807	IMPLEMENTATION	0.46063014873421926	WITHOUT_CLASSIFICATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9988069001819527	IMPLEMENTATION	0.0011930998180473818	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.6799161483137776	WITHOUT_CLASSIFICATION	0.3200838516862224	IMPLEMENTATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.6439940562061105	IMPLEMENTATION	0.3560059437938895	WITHOUT_CLASSIFICATION
todo : look at optimizing these...	IMPLEMENTATION	0.9997941087969441	WITHOUT_CLASSIFICATION	2.0589120305583754E-4	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.925700045431528	IMPLEMENTATION	0.07429995456847208	WITHOUT_CLASSIFICATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.99483990858644	IMPLEMENTATION	0.005160091413559964	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.8113996630535267	IMPLEMENTATION	0.1886003369464732	WITHOUT_CLASSIFICATION
TODO: not visible to the user!	IMPLEMENTATION	0.912545232694776	IMPLEMENTATION	0.08745476730522406	WITHOUT_CLASSIFICATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.5207835053552922	IMPLEMENTATION	0.4792164946447078	WITHOUT_CLASSIFICATION
TODO: use these in methods above	IMPLEMENTATION	0.7396139258305341	WITHOUT_CLASSIFICATION	0.2603860741694659	IMPLEMENTATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8933854310744823	IMPLEMENTATION	0.10661456892551763	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8933854310744823	IMPLEMENTATION	0.10661456892551763	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9408101574795846	WITHOUT_CLASSIFICATION	0.059189842520415335	IMPLEMENTATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999672160370343	WITHOUT_CLASSIFICATION	3.2783962965776E-5	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9985792599472882	WITHOUT_CLASSIFICATION	0.0014207400527117572	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9868102768788313	IMPLEMENTATION	0.013189723121168749	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.64919950786676	IMPLEMENTATION	0.35080049213324005	WITHOUT_CLASSIFICATION
TODO: formulas ?	IMPLEMENTATION	0.7496139301033514	IMPLEMENTATION	0.25038606989664847	WITHOUT_CLASSIFICATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.7553848061910455	WITHOUT_CLASSIFICATION	0.24461519380895455	IMPLEMENTATION
todo : cache this sql...	IMPLEMENTATION	0.9997690040509825	WITHOUT_CLASSIFICATION	2.3099594901762987E-4	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.5387665751208873	IMPLEMENTATION	0.46123342487911273	WITHOUT_CLASSIFICATION
TODO: cache this in an instvar	IMPLEMENTATION	0.9398746565557387	WITHOUT_CLASSIFICATION	0.060125343444261396	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.880383727107493	WITHOUT_CLASSIFICATION	0.11961627289250706	IMPLEMENTATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.697231974181781	IMPLEMENTATION	0.302768025818219	WITHOUT_CLASSIFICATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.941289288073639	IMPLEMENTATION	0.058710711926361014	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.5455573816800341	IMPLEMENTATION	0.4544426183199658	WITHOUT_CLASSIFICATION
TODO: terrible implementation!	IMPLEMENTATION	0.5341678959760567	WITHOUT_CLASSIFICATION	0.46583210402394315	IMPLEMENTATION
TODO: proxies!	IMPLEMENTATION	0.5455573816800341	IMPLEMENTATION	0.4544426183199658	WITHOUT_CLASSIFICATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.838488041907896	IMPLEMENTATION	0.16151195809210386	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.8960225001612756	IMPLEMENTATION	0.1039774998387243	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.5455573816800341	IMPLEMENTATION	0.4544426183199658	WITHOUT_CLASSIFICATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9997234219787546	WITHOUT_CLASSIFICATION	2.765780212454318E-4	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9997234219787546	WITHOUT_CLASSIFICATION	2.765780212454318E-4	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9976155918427744	IMPLEMENTATION	0.002384408157225551	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.6985939634857227	IMPLEMENTATION	0.30140603651427733	WITHOUT_CLASSIFICATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999937572096725	WITHOUT_CLASSIFICATION	6.2427903274960665E-6	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999601632730807	WITHOUT_CLASSIFICATION	3.983672691943638E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999601632730807	WITHOUT_CLASSIFICATION	3.983672691943638E-5	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999030272300763	WITHOUT_CLASSIFICATION	9.697276992378414E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.999933444603711	WITHOUT_CLASSIFICATION	6.655539628894238E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9998732385391241	WITHOUT_CLASSIFICATION	1.2676146087586883E-4	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9998732385391241	WITHOUT_CLASSIFICATION	1.2676146087586883E-4	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999643025127974	WITHOUT_CLASSIFICATION	3.569748720259042E-5	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998686852357619	WITHOUT_CLASSIFICATION	1.3131476423801992E-4	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999834264776972	WITHOUT_CLASSIFICATION	1.657352230281225E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999928286831419	WITHOUT_CLASSIFICATION	7.171316858095579E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999969910648216	WITHOUT_CLASSIFICATION	3.0089351783761818E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999969910648216	WITHOUT_CLASSIFICATION	3.0089351783761818E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999297602356926	WITHOUT_CLASSIFICATION	7.023976430740396E-5	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9985966419915099	WITHOUT_CLASSIFICATION	0.00140335800849016	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.9999467214430143	WITHOUT_CLASSIFICATION	5.327855698568253E-5	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999929473349122	WITHOUT_CLASSIFICATION	7.052665087812178E-6	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999986862414582	WITHOUT_CLASSIFICATION	1.3137585418779656E-6	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999375839268487	WITHOUT_CLASSIFICATION	6.241607315124515E-5	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.9998344581801707	WITHOUT_CLASSIFICATION	1.6554181982919044E-4	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9998315417960348	WITHOUT_CLASSIFICATION	1.6845820396516848E-4	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999088500029861	WITHOUT_CLASSIFICATION	9.114999701391631E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999962520445814	WITHOUT_CLASSIFICATION	3.747955418538311E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9938301577833806	WITHOUT_CLASSIFICATION	0.006169842216619435	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999436882646335	WITHOUT_CLASSIFICATION	5.631173536638789E-5	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999815108686783	WITHOUT_CLASSIFICATION	1.8489131321756555E-5	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999164107350704	WITHOUT_CLASSIFICATION	8.358926492955331E-5	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9428493338920858	WITHOUT_CLASSIFICATION	0.05715066610791425	IMPLEMENTATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999984850182259	WITHOUT_CLASSIFICATION	1.5149817740828877E-6	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999410487366694	WITHOUT_CLASSIFICATION	5.8951263330619014E-5	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999816368679366	WITHOUT_CLASSIFICATION	1.8363132063372933E-5	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999677594580016	WITHOUT_CLASSIFICATION	3.2240541998319574E-5	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9998593407598263	WITHOUT_CLASSIFICATION	1.406592401737529E-4	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999964675233826	WITHOUT_CLASSIFICATION	3.532476617401829E-5	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9998713965112872	WITHOUT_CLASSIFICATION	1.2860348871269922E-4	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999797370735883	WITHOUT_CLASSIFICATION	2.0262926411640736E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999944116916318	WITHOUT_CLASSIFICATION	5.5883083681240406E-6	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999496079382801	WITHOUT_CLASSIFICATION	5.0392061719804866E-5	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998605040122691	WITHOUT_CLASSIFICATION	1.3949598773085303E-4	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998607797768627	WITHOUT_CLASSIFICATION	1.3922022313716956E-4	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9998652454636999	WITHOUT_CLASSIFICATION	1.3475453629999687E-4	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9993472036486678	WITHOUT_CLASSIFICATION	6.527963513321411E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9997679219482288	WITHOUT_CLASSIFICATION	2.320780517712327E-4	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999377010837122	WITHOUT_CLASSIFICATION	6.229891628777235E-5	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999377010837122	WITHOUT_CLASSIFICATION	6.229891628777235E-5	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9993472036486678	WITHOUT_CLASSIFICATION	6.527963513321411E-4	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.7621609496164933	WITHOUT_CLASSIFICATION	0.2378390503835068	IMPLEMENTATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9998451135336488	WITHOUT_CLASSIFICATION	1.5488646635118642E-4	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997377295329444	WITHOUT_CLASSIFICATION	2.6227046705556826E-4	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999927720121452	WITHOUT_CLASSIFICATION	7.22798785476325E-6	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999874982481278	WITHOUT_CLASSIFICATION	1.2501751872117258E-5	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9951442497871217	WITHOUT_CLASSIFICATION	0.004855750212878279	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9998408659435876	WITHOUT_CLASSIFICATION	1.5913405641241512E-4	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9962848736549039	WITHOUT_CLASSIFICATION	0.0037151263450961296	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9996445259281471	WITHOUT_CLASSIFICATION	3.5547407185278673E-4	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999221304512703	WITHOUT_CLASSIFICATION	7.786954872961636E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999377010837122	WITHOUT_CLASSIFICATION	6.229891628777235E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999538087502966	WITHOUT_CLASSIFICATION	4.61912497035094E-5	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9986408211089784	WITHOUT_CLASSIFICATION	0.0013591788910215143	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999911110064091	WITHOUT_CLASSIFICATION	8.888993590924042E-6	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999941915754174	WITHOUT_CLASSIFICATION	5.8084245826440286E-6	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999674137254203	WITHOUT_CLASSIFICATION	3.258627457974421E-5	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999889480985958	WITHOUT_CLASSIFICATION	1.1051901404127537E-5	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999800247560346	WITHOUT_CLASSIFICATION	1.997524396527635E-5	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999879147730679	WITHOUT_CLASSIFICATION	1.2085226932071166E-5	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999426138894743	WITHOUT_CLASSIFICATION	5.7386110525730626E-5	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999799273084005	WITHOUT_CLASSIFICATION	2.007269159952979E-5	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998299866938781	WITHOUT_CLASSIFICATION	1.7001330612192945E-4	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9996189918037569	WITHOUT_CLASSIFICATION	3.810081962431366E-4	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.8280673050860883	IMPLEMENTATION	0.1719326949139117	WITHOUT_CLASSIFICATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.999262644803596	WITHOUT_CLASSIFICATION	7.373551964041174E-4	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999859951789792	WITHOUT_CLASSIFICATION	1.4004821020814353E-5	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9946413684448326	WITHOUT_CLASSIFICATION	0.0053586315551672715	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999836532080723	WITHOUT_CLASSIFICATION	1.6346791927706574E-5	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999777234287901	WITHOUT_CLASSIFICATION	2.2276571209864288E-5	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9982537117576905	WITHOUT_CLASSIFICATION	0.0017462882423094105	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999358024000568	WITHOUT_CLASSIFICATION	6.419759994332917E-5	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999964301409665	WITHOUT_CLASSIFICATION	3.5698590335988204E-6	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999365343122808	WITHOUT_CLASSIFICATION	6.346568771925911E-5	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999907843107677	WITHOUT_CLASSIFICATION	9.215689232263768E-6	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999998648012566	WITHOUT_CLASSIFICATION	1.3519874340386437E-7	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999365343122808	WITHOUT_CLASSIFICATION	6.346568771925911E-5	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9923772410924241	WITHOUT_CLASSIFICATION	0.007622758907575926	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9997767846585702	WITHOUT_CLASSIFICATION	2.2321534142979757E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.999900127679445	WITHOUT_CLASSIFICATION	9.987232055491126E-5	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.9999312906658042	WITHOUT_CLASSIFICATION	6.87093341957855E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999957401296218	WITHOUT_CLASSIFICATION	4.259870378200409E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999957401296218	WITHOUT_CLASSIFICATION	4.259870378200409E-5	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999079655094922	WITHOUT_CLASSIFICATION	9.203449050777806E-5	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999984075396763	WITHOUT_CLASSIFICATION	1.5924603236770664E-6	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9997867927582981	WITHOUT_CLASSIFICATION	2.1320724170188898E-4	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999964396367401	WITHOUT_CLASSIFICATION	3.5603632597582546E-6	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9997005305609766	WITHOUT_CLASSIFICATION	2.9946943902333924E-4	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999894335970353	WITHOUT_CLASSIFICATION	1.0566402964689291E-5	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9998882597492698	WITHOUT_CLASSIFICATION	1.1174025073025977E-4	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.9984248199755661	WITHOUT_CLASSIFICATION	0.0015751800244339542	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999141941769508	WITHOUT_CLASSIFICATION	8.580582304922598E-5	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999864545682151	WITHOUT_CLASSIFICATION	1.3545431784776546E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999631688032418	WITHOUT_CLASSIFICATION	3.6831196758253245E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999631688032418	WITHOUT_CLASSIFICATION	3.6831196758253245E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999069852278498	WITHOUT_CLASSIFICATION	9.301477215017792E-5	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998682033725765	WITHOUT_CLASSIFICATION	1.317966274234323E-4	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999692490636084	WITHOUT_CLASSIFICATION	3.0750936391683053E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999631688032418	WITHOUT_CLASSIFICATION	3.6831196758253245E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999069852278498	WITHOUT_CLASSIFICATION	9.301477215017792E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999069852278498	WITHOUT_CLASSIFICATION	9.301477215017792E-5	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999933714773775	WITHOUT_CLASSIFICATION	6.628522622500286E-6	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998096173836658	WITHOUT_CLASSIFICATION	1.903826163342958E-4	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998449728653	WITHOUT_CLASSIFICATION	1.5502713476007788E-7	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999997296241	WITHOUT_CLASSIFICATION	2.703759000016942E-6	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9986437870859454	WITHOUT_CLASSIFICATION	0.001356212914054649	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9986437870859454	WITHOUT_CLASSIFICATION	0.001356212914054649	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.999974596483954	WITHOUT_CLASSIFICATION	2.54035160459726E-5	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998745575802169	WITHOUT_CLASSIFICATION	1.254424197830157E-4	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.9999936317477448	WITHOUT_CLASSIFICATION	6.368252255199105E-6	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999944090230163	WITHOUT_CLASSIFICATION	5.590976983760927E-6	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999944090230163	WITHOUT_CLASSIFICATION	5.590976983760927E-6	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999543945206786	WITHOUT_CLASSIFICATION	4.5605479321498265E-5	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.997958094240213	WITHOUT_CLASSIFICATION	0.002041905759786998	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999279925806558	WITHOUT_CLASSIFICATION	7.20074193441996E-5	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999998863768541	WITHOUT_CLASSIFICATION	1.1362314592026306E-7	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999883248456893	WITHOUT_CLASSIFICATION	1.1675154310566182E-5	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999811079396382	WITHOUT_CLASSIFICATION	1.889206036179807E-4	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9996266804315371	WITHOUT_CLASSIFICATION	3.7331956846289025E-4	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.9998880331830541	WITHOUT_CLASSIFICATION	1.1196681694579616E-4	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999279925806558	WITHOUT_CLASSIFICATION	7.20074193441996E-5	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.9999776405638703	WITHOUT_CLASSIFICATION	2.2359436129723136E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999815347379698	WITHOUT_CLASSIFICATION	1.846526203021279E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999815347379698	WITHOUT_CLASSIFICATION	1.846526203021279E-5	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999168877224	WITHOUT_CLASSIFICATION	8.311227763368817E-8	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999518835163712	WITHOUT_CLASSIFICATION	4.811648362886769E-5	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.999577810863144	WITHOUT_CLASSIFICATION	4.2218913685590075E-4	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9929201887982616	WITHOUT_CLASSIFICATION	0.007079811201738451	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998826644281494	WITHOUT_CLASSIFICATION	1.1733557185054298E-4	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.9998875344775106	WITHOUT_CLASSIFICATION	1.124655224894373E-4	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9999802022028361	WITHOUT_CLASSIFICATION	1.9797797163844274E-5	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.9999448590692613	WITHOUT_CLASSIFICATION	5.514093073865898E-5	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9990589774121975	WITHOUT_CLASSIFICATION	9.410225878025653E-4	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999994455774653	WITHOUT_CLASSIFICATION	5.544225346542844E-7	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999994455774653	WITHOUT_CLASSIFICATION	5.544225346542844E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999791700139081	WITHOUT_CLASSIFICATION	2.0829986091912792E-5	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999937572096725	WITHOUT_CLASSIFICATION	6.2427903274960665E-6	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999674513473917	WITHOUT_CLASSIFICATION	3.254865260831816E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999601632730807	WITHOUT_CLASSIFICATION	3.983672691943638E-5	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999215338285159	WITHOUT_CLASSIFICATION	7.84661714841677E-5	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999114877957658	WITHOUT_CLASSIFICATION	8.85122042342717E-5	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9998059233381115	WITHOUT_CLASSIFICATION	1.9407666188842957E-4	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.9999397591808985	WITHOUT_CLASSIFICATION	6.0240819101571725E-5	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999269320629642	WITHOUT_CLASSIFICATION	7.306793703573896E-5	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.9999473039041618	WITHOUT_CLASSIFICATION	5.2696095838314686E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999401161732723	WITHOUT_CLASSIFICATION	5.988382672775625E-5	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999657279046396	WITHOUT_CLASSIFICATION	3.427209536036661E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.9999397591808985	WITHOUT_CLASSIFICATION	6.0240819101571725E-5	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9998285166170914	WITHOUT_CLASSIFICATION	1.7148338290871526E-4	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9996226429000277	WITHOUT_CLASSIFICATION	3.773570999723094E-4	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.9998071599782569	WITHOUT_CLASSIFICATION	1.9284002174318324E-4	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999655512183376	WITHOUT_CLASSIFICATION	3.4448781662299936E-5	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999682414460371	WITHOUT_CLASSIFICATION	3.175855396299741E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9998732385391241	WITHOUT_CLASSIFICATION	1.2676146087586883E-4	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9979200225077015	WITHOUT_CLASSIFICATION	0.0020799774922985004	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999149021293927	WITHOUT_CLASSIFICATION	8.509787060720215E-5	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999730933625325	WITHOUT_CLASSIFICATION	2.690663746750305E-5	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.999977675364317	WITHOUT_CLASSIFICATION	2.2324635682895454E-5	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999376333986598	WITHOUT_CLASSIFICATION	6.236660134017667E-5	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999702068882964	WITHOUT_CLASSIFICATION	2.9793111703546977E-5	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999858768179158	WITHOUT_CLASSIFICATION	1.412318208422243E-5	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.9998302850788955	WITHOUT_CLASSIFICATION	1.6971492110463086E-4	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9953558389882164	WITHOUT_CLASSIFICATION	0.004644161011783595	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.999991388250929	WITHOUT_CLASSIFICATION	8.61174907099291E-6	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999601632730807	WITHOUT_CLASSIFICATION	3.983672691943638E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999601632730807	WITHOUT_CLASSIFICATION	3.983672691943638E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999401161732723	WITHOUT_CLASSIFICATION	5.988382672775625E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999376333986598	WITHOUT_CLASSIFICATION	6.236660134017667E-5	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999643025127974	WITHOUT_CLASSIFICATION	3.569748720259042E-5	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9998513087511824	WITHOUT_CLASSIFICATION	1.4869124881756104E-4	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999434477288767	WITHOUT_CLASSIFICATION	5.655227112330793E-5	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999398850050903	WITHOUT_CLASSIFICATION	6.0114994909685935E-5	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9999374791439578	WITHOUT_CLASSIFICATION	6.252085604220619E-5	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999298340614576	WITHOUT_CLASSIFICATION	7.01659385423297E-5	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9999369293461057	WITHOUT_CLASSIFICATION	6.307065389434143E-5	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.9997776407363961	WITHOUT_CLASSIFICATION	2.223592636039921E-4	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9998370934712921	WITHOUT_CLASSIFICATION	1.6290652870777983E-4	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9998370934712921	WITHOUT_CLASSIFICATION	1.6290652870777983E-4	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999859770376466	WITHOUT_CLASSIFICATION	1.4022962353446233E-5	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999874710061272	WITHOUT_CLASSIFICATION	1.252899387276402E-5	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9998877668670687	WITHOUT_CLASSIFICATION	1.122331329312943E-4	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999077547469309	WITHOUT_CLASSIFICATION	9.224525306916016E-5	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9998694527202004	WITHOUT_CLASSIFICATION	1.305472797996229E-4	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.999980081998507	WITHOUT_CLASSIFICATION	1.991800149310727E-5	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.9999793538975882	WITHOUT_CLASSIFICATION	2.064610241179171E-5	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998686852357619	WITHOUT_CLASSIFICATION	1.3131476423801992E-4	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999774392473344	WITHOUT_CLASSIFICATION	2.2560752665565064E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999774392473344	WITHOUT_CLASSIFICATION	2.2560752665565064E-5	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.9999642089435088	WITHOUT_CLASSIFICATION	3.579105649122045E-5	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999826679540983	WITHOUT_CLASSIFICATION	1.7332045901667347E-5	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.9999642089435088	WITHOUT_CLASSIFICATION	3.579105649122045E-5	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.999949658271292	WITHOUT_CLASSIFICATION	5.0341728707998983E-5	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.9999695754351258	WITHOUT_CLASSIFICATION	3.042456487423263E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999601632730807	WITHOUT_CLASSIFICATION	3.983672691943638E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999401161732723	WITHOUT_CLASSIFICATION	5.988382672775625E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999376333986598	WITHOUT_CLASSIFICATION	6.236660134017667E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999376333986598	WITHOUT_CLASSIFICATION	6.236660134017667E-5	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.9999613828785904	WITHOUT_CLASSIFICATION	3.861712140959595E-5	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.999908859127165	WITHOUT_CLASSIFICATION	9.114087283506975E-5	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.999988505099159	WITHOUT_CLASSIFICATION	1.1494900840985272E-5	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999928286831419	WITHOUT_CLASSIFICATION	7.171316858095579E-6	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999928286831419	WITHOUT_CLASSIFICATION	7.171316858095579E-6	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.997846378933567	WITHOUT_CLASSIFICATION	0.0021536210664330016	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.9999980777938979	WITHOUT_CLASSIFICATION	1.922206102015033E-6	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.9999606160350767	WITHOUT_CLASSIFICATION	3.9383964923350476E-5	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.999938947565789	WITHOUT_CLASSIFICATION	6.105243421089058E-5	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9999766724949806	WITHOUT_CLASSIFICATION	2.332750501949266E-5	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.9999380064650817	WITHOUT_CLASSIFICATION	6.199353491828716E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999969910648216	WITHOUT_CLASSIFICATION	3.0089351783761818E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999374336186857	WITHOUT_CLASSIFICATION	6.256638131430653E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999374336186857	WITHOUT_CLASSIFICATION	6.256638131430653E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999297602356926	WITHOUT_CLASSIFICATION	7.023976430740396E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999297602356926	WITHOUT_CLASSIFICATION	7.023976430740396E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.999974092438468	WITHOUT_CLASSIFICATION	2.5907561531956504E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.999974092438468	WITHOUT_CLASSIFICATION	2.5907561531956504E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998698983600597	WITHOUT_CLASSIFICATION	1.301016399403372E-4	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998698983600597	WITHOUT_CLASSIFICATION	1.301016399403372E-4	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999928286831419	WITHOUT_CLASSIFICATION	7.171316858095579E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999969910648216	WITHOUT_CLASSIFICATION	3.0089351783761818E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999374336186857	WITHOUT_CLASSIFICATION	6.256638131430653E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999374336186857	WITHOUT_CLASSIFICATION	6.256638131430653E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999297602356926	WITHOUT_CLASSIFICATION	7.023976430740396E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.999974092438468	WITHOUT_CLASSIFICATION	2.5907561531956504E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.999974092438468	WITHOUT_CLASSIFICATION	2.5907561531956504E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998698983600597	WITHOUT_CLASSIFICATION	1.301016399403372E-4	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999121108236793	WITHOUT_CLASSIFICATION	8.788917632071066E-5	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999597737633579	WITHOUT_CLASSIFICATION	4.0226236642228576E-5	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.9999558834566343	WITHOUT_CLASSIFICATION	4.411654336559874E-5	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9989871375438268	WITHOUT_CLASSIFICATION	0.0010128624561731058	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.9999366514109231	WITHOUT_CLASSIFICATION	6.334858907685344E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999369140718294	WITHOUT_CLASSIFICATION	6.308592817059932E-5	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999960691082398	WITHOUT_CLASSIFICATION	3.930891760232898E-6	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999991554286585	WITHOUT_CLASSIFICATION	8.445713415816686E-7	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999991587983907	WITHOUT_CLASSIFICATION	8.412016093154733E-7	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9971856927663882	WITHOUT_CLASSIFICATION	0.0028143072336117756	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998918371999795	WITHOUT_CLASSIFICATION	1.081628000205012E-4	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999851384324658	WITHOUT_CLASSIFICATION	1.486156753418605E-5	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999079655094922	WITHOUT_CLASSIFICATION	9.203449050777806E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999369140718294	WITHOUT_CLASSIFICATION	6.308592817059932E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999369140718294	WITHOUT_CLASSIFICATION	6.308592817059932E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999369140718294	WITHOUT_CLASSIFICATION	6.308592817059932E-5	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999927948276363	WITHOUT_CLASSIFICATION	7.205172363703102E-6	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9994838721191208	WITHOUT_CLASSIFICATION	5.161278808791126E-4	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9994838721191208	WITHOUT_CLASSIFICATION	5.161278808791126E-4	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9998188180813139	WITHOUT_CLASSIFICATION	1.811819186860577E-4	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999022181686	WITHOUT_CLASSIFICATION	9.778183144171527E-8	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999877398608832	WITHOUT_CLASSIFICATION	1.2260139116764164E-5	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9996604590045857	WITHOUT_CLASSIFICATION	3.3954099541430225E-4	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9996604590045857	WITHOUT_CLASSIFICATION	3.3954099541430225E-4	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999986862414582	WITHOUT_CLASSIFICATION	1.3137585418779656E-6	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999947613878913	WITHOUT_CLASSIFICATION	5.2386121086665866E-6	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999947613878913	WITHOUT_CLASSIFICATION	5.2386121086665866E-6	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9979414865379288	WITHOUT_CLASSIFICATION	0.0020585134620712225	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999922256221389	WITHOUT_CLASSIFICATION	7.774377861139615E-6	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999962520445814	WITHOUT_CLASSIFICATION	3.747955418538311E-6	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.9999434146432908	WITHOUT_CLASSIFICATION	5.6585356709143615E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999375839268487	WITHOUT_CLASSIFICATION	6.241607315124515E-5	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.5516928285888656	WITHOUT_CLASSIFICATION	0.44830717141113446	IMPLEMENTATION
ID	WITHOUT_CLASSIFICATION	0.9998335621350173	WITHOUT_CLASSIFICATION	1.6643786498259458E-4	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999638676669559	WITHOUT_CLASSIFICATION	3.6132333044131396E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9998999950024116	WITHOUT_CLASSIFICATION	1.0000499758848834E-4	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999559491613855	WITHOUT_CLASSIFICATION	4.405083861440415E-5	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999985589655601	WITHOUT_CLASSIFICATION	1.4410344399611646E-6	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999164107350704	WITHOUT_CLASSIFICATION	8.358926492955331E-5	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9996436907410657	WITHOUT_CLASSIFICATION	3.563092589342305E-4	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999909119527644	WITHOUT_CLASSIFICATION	9.088047235597504E-5	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9999374106384936	WITHOUT_CLASSIFICATION	6.258936150632652E-5	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999369414161479	WITHOUT_CLASSIFICATION	6.305858385221281E-5	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999138506449099	WITHOUT_CLASSIFICATION	8.61493550900573E-5	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999630671593012	WITHOUT_CLASSIFICATION	3.693284069887784E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999962520445814	WITHOUT_CLASSIFICATION	3.747955418538311E-6	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9998440107515403	WITHOUT_CLASSIFICATION	1.5598924845963672E-4	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.9999433322893231	WITHOUT_CLASSIFICATION	5.6667710676900376E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999390031910839	WITHOUT_CLASSIFICATION	6.0996808916244586E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999375839268487	WITHOUT_CLASSIFICATION	6.241607315124515E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999630671593012	WITHOUT_CLASSIFICATION	3.693284069887784E-5	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9998440107515403	WITHOUT_CLASSIFICATION	1.5598924845963672E-4	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999390031910839	WITHOUT_CLASSIFICATION	6.0996808916244586E-5	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998143006961866	WITHOUT_CLASSIFICATION	1.856993038135419E-4	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.9999369274011534	WITHOUT_CLASSIFICATION	6.307259884656355E-5	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998143006961866	WITHOUT_CLASSIFICATION	1.856993038135419E-4	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9998292513023207	WITHOUT_CLASSIFICATION	1.7074869767934298E-4	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.999915099484582	WITHOUT_CLASSIFICATION	8.490051541798243E-5	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999995260899505	WITHOUT_CLASSIFICATION	4.739100495802457E-7	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999964935538599	WITHOUT_CLASSIFICATION	3.5064461400053123E-6	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9945842664174729	WITHOUT_CLASSIFICATION	0.005415733582527097	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999647021048388	WITHOUT_CLASSIFICATION	3.529789516128148E-5	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9957850077015177	WITHOUT_CLASSIFICATION	0.004214992298482342	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9963485889509061	WITHOUT_CLASSIFICATION	0.00365141104909389	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999647021048388	WITHOUT_CLASSIFICATION	3.529789516128148E-5	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999436882646335	WITHOUT_CLASSIFICATION	5.631173536638789E-5	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998299674694108	WITHOUT_CLASSIFICATION	1.700325305891613E-4	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999630671593012	WITHOUT_CLASSIFICATION	3.693284069887784E-5	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999072873560302	WITHOUT_CLASSIFICATION	9.271264396987976E-5	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.9998792631186069	WITHOUT_CLASSIFICATION	1.207368813932127E-4	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9975110191932683	WITHOUT_CLASSIFICATION	0.0024889808067315774	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.9999203900484203	WITHOUT_CLASSIFICATION	7.960995157978027E-5	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999901609130183	WITHOUT_CLASSIFICATION	9.83908698174304E-6	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999989449919345	WITHOUT_CLASSIFICATION	1.0550080654482786E-6	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999888299932934	WITHOUT_CLASSIFICATION	1.117000670658157E-5	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.9998226339490414	WITHOUT_CLASSIFICATION	1.7736605095857656E-4	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.999937886955198	WITHOUT_CLASSIFICATION	6.211304480192091E-5	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9997541327584824	WITHOUT_CLASSIFICATION	2.4586724151760635E-4	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999321778646657	WITHOUT_CLASSIFICATION	6.782213533438099E-5	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9980697882792948	WITHOUT_CLASSIFICATION	0.001930211720705168	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999164107350704	WITHOUT_CLASSIFICATION	8.358926492955331E-5	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.9999068401614462	WITHOUT_CLASSIFICATION	9.315983855378338E-5	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.999846977434781	WITHOUT_CLASSIFICATION	1.530225652189827E-4	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.9997945074285715	WITHOUT_CLASSIFICATION	2.054925714285885E-4	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999435995228518	WITHOUT_CLASSIFICATION	5.6400477148160876E-5	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.9999437645111233	WITHOUT_CLASSIFICATION	5.6235488876579667E-5	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999557725201692	WITHOUT_CLASSIFICATION	4.4227479830750364E-5	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999448614814	WITHOUT_CLASSIFICATION	5.513851862323851E-8	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999927226014914	WITHOUT_CLASSIFICATION	7.277398508472975E-6	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9968945090173436	WITHOUT_CLASSIFICATION	0.003105490982656527	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999298928993308	WITHOUT_CLASSIFICATION	7.010710066926983E-5	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9980550469630438	WITHOUT_CLASSIFICATION	0.0019449530369561902	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9980550469630438	WITHOUT_CLASSIFICATION	0.0019449530369561902	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999633569595866	WITHOUT_CLASSIFICATION	3.664304041347018E-5	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999966683485323	WITHOUT_CLASSIFICATION	3.3316514677069807E-5	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999371718391828	WITHOUT_CLASSIFICATION	6.28281608171869E-5	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999322149226622	WITHOUT_CLASSIFICATION	6.778507733787528E-5	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999604249655251	WITHOUT_CLASSIFICATION	3.9575034474984506E-5	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9998403670049939	WITHOUT_CLASSIFICATION	1.59632995006164E-4	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999758102304023	WITHOUT_CLASSIFICATION	2.4189769597746145E-5	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9287800242815482	WITHOUT_CLASSIFICATION	0.0712199757184518	IMPLEMENTATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999913632171837	WITHOUT_CLASSIFICATION	8.636782816354931E-6	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.99994146555711	WITHOUT_CLASSIFICATION	5.85344428899264E-5	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.9999103353572325	WITHOUT_CLASSIFICATION	8.96646427675451E-5	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9992288994294112	WITHOUT_CLASSIFICATION	7.711005705886889E-4	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999226528795526	WITHOUT_CLASSIFICATION	7.73471204474453E-5	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999664942696007	WITHOUT_CLASSIFICATION	3.3505730399290365E-5	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9986942562849132	WITHOUT_CLASSIFICATION	0.001305743715086888	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9998997279062483	WITHOUT_CLASSIFICATION	1.0027209375176872E-4	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999941179408744	WITHOUT_CLASSIFICATION	5.882059125588551E-5	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999970533196685	WITHOUT_CLASSIFICATION	2.9466803314998802E-5	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997760744076655	WITHOUT_CLASSIFICATION	2.239255923344156E-4	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9997825067210652	WITHOUT_CLASSIFICATION	2.174932789348452E-4	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999631101129622	WITHOUT_CLASSIFICATION	3.688988703780528E-5	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999879363233114	WITHOUT_CLASSIFICATION	1.206367668857266E-5	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9998997279062483	WITHOUT_CLASSIFICATION	1.0027209375176872E-4	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9998819464556061	WITHOUT_CLASSIFICATION	1.1805354439375644E-4	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.999823135393718	WITHOUT_CLASSIFICATION	1.7686460628199094E-4	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9998222166702477	WITHOUT_CLASSIFICATION	1.777833297523386E-4	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999033926719	WITHOUT_CLASSIFICATION	9.660732814117933E-8	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9997143735929123	WITHOUT_CLASSIFICATION	2.856264070877422E-4	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999970533196685	WITHOUT_CLASSIFICATION	2.9466803314998802E-5	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.999859970542949	WITHOUT_CLASSIFICATION	1.4002945705109268E-4	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9996804811623831	WITHOUT_CLASSIFICATION	3.19518837616954E-4	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9997867927582981	WITHOUT_CLASSIFICATION	2.1320724170188898E-4	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999367743163595	WITHOUT_CLASSIFICATION	6.322568364049922E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999367743163595	WITHOUT_CLASSIFICATION	6.322568364049922E-5	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9998652454636999	WITHOUT_CLASSIFICATION	1.3475453629999687E-4	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9998038207614094	WITHOUT_CLASSIFICATION	1.961792385905974E-4	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999068212183022	WITHOUT_CLASSIFICATION	9.31787816978172E-5	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999068212183022	WITHOUT_CLASSIFICATION	9.31787816978172E-5	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9968945090173436	WITHOUT_CLASSIFICATION	0.003105490982656527	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999785553096377	WITHOUT_CLASSIFICATION	2.1444690362310012E-4	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998619496937019	WITHOUT_CLASSIFICATION	1.380503062981267E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999248392670291	WITHOUT_CLASSIFICATION	7.516073297087228E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999791700139081	WITHOUT_CLASSIFICATION	2.0829986091912792E-5	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998619496937019	WITHOUT_CLASSIFICATION	1.380503062981267E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999248392670291	WITHOUT_CLASSIFICATION	7.516073297087228E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.7409413934198631	WITHOUT_CLASSIFICATION	0.2590586065801369	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999989515947624	WITHOUT_CLASSIFICATION	1.048405237642316E-6	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999690615260786	WITHOUT_CLASSIFICATION	3.093847392148277E-5	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.999999421815075	WITHOUT_CLASSIFICATION	5.781849250900728E-7	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9981065386607864	WITHOUT_CLASSIFICATION	0.0018934613392135515	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.5991112256946306	WITHOUT_CLASSIFICATION	0.40088877430536946	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9983030242865525	WITHOUT_CLASSIFICATION	0.0016969757134475683	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9983030242865525	WITHOUT_CLASSIFICATION	0.0016969757134475683	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999836641159003	WITHOUT_CLASSIFICATION	1.633588409959526E-5	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999957925761028	WITHOUT_CLASSIFICATION	4.2074238971340475E-6	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9996168086466376	WITHOUT_CLASSIFICATION	3.8319135336234764E-4	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999865928536457	WITHOUT_CLASSIFICATION	1.3407146354383936E-5	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999972325185447	WITHOUT_CLASSIFICATION	2.767481455384661E-6	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9991809915771712	WITHOUT_CLASSIFICATION	8.190084228286364E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999791700139081	WITHOUT_CLASSIFICATION	2.0829986091912792E-5	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9991809915771712	WITHOUT_CLASSIFICATION	8.190084228286364E-4	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999990697915668	WITHOUT_CLASSIFICATION	9.302084331996774E-6	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999990697915668	WITHOUT_CLASSIFICATION	9.302084331996774E-6	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999988209955899	WITHOUT_CLASSIFICATION	1.1790044101002547E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.7409413934198631	WITHOUT_CLASSIFICATION	0.2590586065801369	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9923463742373202	WITHOUT_CLASSIFICATION	0.007653625762679766	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999743803404217	WITHOUT_CLASSIFICATION	2.561965957824346E-5	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.987766382229072	WITHOUT_CLASSIFICATION	0.012233617770928044	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999869115746041	WITHOUT_CLASSIFICATION	1.3088425396009206E-5	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9993304347118793	WITHOUT_CLASSIFICATION	6.695652881206474E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.7409413934198631	WITHOUT_CLASSIFICATION	0.2590586065801369	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999869115746041	WITHOUT_CLASSIFICATION	1.3088425396009206E-5	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9993304347118793	WITHOUT_CLASSIFICATION	6.695652881206474E-4	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999886481055548	WITHOUT_CLASSIFICATION	1.1351894445186825E-5	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998524058654515	WITHOUT_CLASSIFICATION	1.4759413454848013E-4	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999760290784193	WITHOUT_CLASSIFICATION	2.397092158074866E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.7409413934198631	WITHOUT_CLASSIFICATION	0.2590586065801369	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.7409413934198631	WITHOUT_CLASSIFICATION	0.2590586065801369	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9999885819748187	WITHOUT_CLASSIFICATION	1.1418025181339406E-5	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.9999848855997775	WITHOUT_CLASSIFICATION	1.5114400222607117E-5	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.9999868925374097	WITHOUT_CLASSIFICATION	1.3107462590294161E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999944116916318	WITHOUT_CLASSIFICATION	5.5883083681240406E-6	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.9999826320701254	WITHOUT_CLASSIFICATION	1.736792987458208E-5	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999838521632883	WITHOUT_CLASSIFICATION	1.614783671163666E-5	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9990688961826066	WITHOUT_CLASSIFICATION	9.311038173933383E-4	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999687896061795	WITHOUT_CLASSIFICATION	3.121039382050447E-5	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999780052174911	WITHOUT_CLASSIFICATION	2.1994782508853443E-5	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.9999330316081954	WITHOUT_CLASSIFICATION	6.696839180462581E-5	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9985918585314549	WITHOUT_CLASSIFICATION	0.0014081414685450065	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9896486038363814	WITHOUT_CLASSIFICATION	0.01035139616361853	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999951274455607	WITHOUT_CLASSIFICATION	4.872554439211969E-6	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9994751106181685	WITHOUT_CLASSIFICATION	5.248893818315495E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998594985306359	WITHOUT_CLASSIFICATION	1.4050146936413983E-4	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999998639481505	WITHOUT_CLASSIFICATION	1.3605184939617956E-7	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999944116916318	WITHOUT_CLASSIFICATION	5.5883083681240406E-6	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999288013970133	WITHOUT_CLASSIFICATION	7.119860298656781E-5	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999621992456846	WITHOUT_CLASSIFICATION	3.7800754315432745E-5	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9998086381910116	WITHOUT_CLASSIFICATION	1.9136180898846723E-4	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9997725393261147	WITHOUT_CLASSIFICATION	2.2746067388544462E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999067535859434	WITHOUT_CLASSIFICATION	9.32464140565541E-5	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999067535859434	WITHOUT_CLASSIFICATION	9.32464140565541E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999944116916318	WITHOUT_CLASSIFICATION	5.5883083681240406E-6	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9881942523695889	WITHOUT_CLASSIFICATION	0.011805747630411006	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999147328091975	WITHOUT_CLASSIFICATION	8.526719080245783E-5	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9938562326085025	WITHOUT_CLASSIFICATION	0.006143767391497532	IMPLEMENTATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999800146667872	WITHOUT_CLASSIFICATION	1.9985333212819874E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999784234747224	WITHOUT_CLASSIFICATION	2.1576525277583553E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999141622557411	WITHOUT_CLASSIFICATION	8.583774425889063E-5	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9997469758826224	WITHOUT_CLASSIFICATION	2.530241173776269E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998702385416095	WITHOUT_CLASSIFICATION	1.2976145839049014E-4	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999717921446862	WITHOUT_CLASSIFICATION	2.820785531379481E-5	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999887717338225	WITHOUT_CLASSIFICATION	1.1228266177444325E-5	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999921877505973	WITHOUT_CLASSIFICATION	7.812249402701754E-6	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999324968025265	WITHOUT_CLASSIFICATION	6.750319747343658E-5	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9997438152325789	WITHOUT_CLASSIFICATION	2.5618476742110194E-4	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999803104344951	WITHOUT_CLASSIFICATION	1.9689565504925738E-5	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999122540713588	WITHOUT_CLASSIFICATION	8.77459286412451E-5	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9949867063518721	WITHOUT_CLASSIFICATION	0.005013293648127808	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9991676685218365	WITHOUT_CLASSIFICATION	8.32331478163505E-4	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998457892716598	WITHOUT_CLASSIFICATION	1.5421072834020504E-4	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999875021382209	WITHOUT_CLASSIFICATION	1.2497861779256154E-5	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9987347549471084	WITHOUT_CLASSIFICATION	0.0012652450528915708	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999934609389893	WITHOUT_CLASSIFICATION	6.5390610106047845E-6	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980282538726338	WITHOUT_CLASSIFICATION	0.001971746127366215	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999182142167089	WITHOUT_CLASSIFICATION	8.178578329109773E-4	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978117250472913	WITHOUT_CLASSIFICATION	0.002188274952708718	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999897854431632	WITHOUT_CLASSIFICATION	1.0214556836794738E-4	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972328403905469	WITHOUT_CLASSIFICATION	0.0027671596094530383	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997381310071141	WITHOUT_CLASSIFICATION	0.002618689928858946	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972328403905469	WITHOUT_CLASSIFICATION	0.0027671596094530383	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972328403905469	WITHOUT_CLASSIFICATION	0.0027671596094530383	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.9994388466400562	WITHOUT_CLASSIFICATION	5.611533599437224E-4	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.999781788478709	WITHOUT_CLASSIFICATION	2.1821152129091804E-4	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978335533874203	WITHOUT_CLASSIFICATION	0.002166446612579685	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979602724184304	WITHOUT_CLASSIFICATION	0.0020397275815696777	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9953936546958579	WITHOUT_CLASSIFICATION	0.004606345304142052	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9913285541165539	WITHOUT_CLASSIFICATION	0.008671445883446129	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972634517042223	WITHOUT_CLASSIFICATION	0.0027365482957776746	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972328403905469	WITHOUT_CLASSIFICATION	0.0027671596094530383	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9965960487503311	WITHOUT_CLASSIFICATION	0.0034039512496688647	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972328403905469	WITHOUT_CLASSIFICATION	0.0027671596094530383	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999797178461292	WITHOUT_CLASSIFICATION	2.0282153870860796E-5	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998606768308387	WITHOUT_CLASSIFICATION	1.3932316916127977E-4	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.6279031428221086	IMPLEMENTATION	0.3720968571778913	WITHOUT_CLASSIFICATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999985341063962	WITHOUT_CLASSIFICATION	1.4658936038094564E-5	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999951932877149	WITHOUT_CLASSIFICATION	4.806712285066075E-6	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998995986275319	WITHOUT_CLASSIFICATION	1.0040137246821178E-4	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.9998723386704721	WITHOUT_CLASSIFICATION	1.276613295278708E-4	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999439220982097	WITHOUT_CLASSIFICATION	5.607790179033061E-5	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999587618006196	WITHOUT_CLASSIFICATION	4.123819938044372E-5	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999077924382475	WITHOUT_CLASSIFICATION	9.220756175260444E-5	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999121756666604	WITHOUT_CLASSIFICATION	8.782433333954937E-5	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999372140330216	WITHOUT_CLASSIFICATION	6.278596697847647E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998702385416095	WITHOUT_CLASSIFICATION	1.2976145839049014E-4	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999244842858932	WITHOUT_CLASSIFICATION	7.551571410679912E-5	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.999937011100444	WITHOUT_CLASSIFICATION	6.298889955595845E-5	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999766993522193	WITHOUT_CLASSIFICATION	2.3300647780584904E-5	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9997370228382118	WITHOUT_CLASSIFICATION	2.629771617882165E-4	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999107501186797	WITHOUT_CLASSIFICATION	8.924988132022498E-5	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9994392625597746	WITHOUT_CLASSIFICATION	5.607374402255479E-4	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997803940658544	WITHOUT_CLASSIFICATION	2.196059341456422E-4	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99988234521056	WITHOUT_CLASSIFICATION	1.1765478944004591E-4	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998623973863664	WITHOUT_CLASSIFICATION	1.3760261363367086E-4	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9985707760030949	WITHOUT_CLASSIFICATION	0.0014292239969051536	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9993724524195909	WITHOUT_CLASSIFICATION	6.275475804090225E-4	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999639559896696	WITHOUT_CLASSIFICATION	3.604401033044032E-5	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998217421637644	WITHOUT_CLASSIFICATION	1.7825783623566602E-4	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995982782081207	WITHOUT_CLASSIFICATION	4.017217918792509E-4	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999916122497662	WITHOUT_CLASSIFICATION	8.387750233795232E-5	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999872957882214	WITHOUT_CLASSIFICATION	1.2704211778505215E-5	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999904536481467	WITHOUT_CLASSIFICATION	9.546351853297948E-5	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999817669233506	WITHOUT_CLASSIFICATION	1.8233076649394812E-4	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9994388484822336	WITHOUT_CLASSIFICATION	5.611515177664344E-4	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9991319009184059	WITHOUT_CLASSIFICATION	8.680990815940587E-4	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999963611748687	WITHOUT_CLASSIFICATION	3.638825131372313E-6	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999054074680312	WITHOUT_CLASSIFICATION	9.459253196872678E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998702385416095	WITHOUT_CLASSIFICATION	1.2976145839049014E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998995986275319	WITHOUT_CLASSIFICATION	1.0040137246821178E-4	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9997596705498877	WITHOUT_CLASSIFICATION	2.4032945011233037E-4	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999977073618318	WITHOUT_CLASSIFICATION	2.292638168174962E-6	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9996920877143674	WITHOUT_CLASSIFICATION	3.079122856326825E-4	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999985341063962	WITHOUT_CLASSIFICATION	1.4658936038094564E-5	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998562237298472	WITHOUT_CLASSIFICATION	1.4377627015286836E-4	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.9999449421861084	WITHOUT_CLASSIFICATION	5.5057813891571724E-5	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9985707760030949	WITHOUT_CLASSIFICATION	0.0014292239969051536	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999952742241656	WITHOUT_CLASSIFICATION	4.7257758344908504E-6	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9996745536636559	WITHOUT_CLASSIFICATION	3.2544633634412666E-4	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999268301066584	WITHOUT_CLASSIFICATION	7.316989334151809E-5	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9996834145320806	WITHOUT_CLASSIFICATION	3.165854679192932E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998712084102173	WITHOUT_CLASSIFICATION	1.287915897827151E-4	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.99993457421729	WITHOUT_CLASSIFICATION	6.542578270992925E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998702385416095	WITHOUT_CLASSIFICATION	1.2976145839049014E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998702385416095	WITHOUT_CLASSIFICATION	1.2976145839049014E-4	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9976272881353997	WITHOUT_CLASSIFICATION	0.002372711864600286	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999973766030564	WITHOUT_CLASSIFICATION	2.6233969435199975E-6	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999950811755582	WITHOUT_CLASSIFICATION	4.9188244417139245E-6	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999955890155313	WITHOUT_CLASSIFICATION	4.4109844686637754E-6	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999764432396648	WITHOUT_CLASSIFICATION	2.355676033521087E-5	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999985109865519	WITHOUT_CLASSIFICATION	1.4890134480913106E-5	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999305110126632	WITHOUT_CLASSIFICATION	6.948898733677096E-5	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.9998644178097171	WITHOUT_CLASSIFICATION	1.3558219028277102E-4	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9998655761046601	WITHOUT_CLASSIFICATION	1.344238953398112E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998702385416095	WITHOUT_CLASSIFICATION	1.2976145839049014E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999989131369283	WITHOUT_CLASSIFICATION	1.086863071720011E-6	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999505630719979	WITHOUT_CLASSIFICATION	4.9436928002095394E-5	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999858044757244	WITHOUT_CLASSIFICATION	1.419552427566971E-5	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999666046296302	WITHOUT_CLASSIFICATION	3.3395370369826565E-5	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998060733124161	WITHOUT_CLASSIFICATION	1.9392668758393328E-4	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999476877525824	WITHOUT_CLASSIFICATION	5.2312247417640754E-5	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9998691590705027	WITHOUT_CLASSIFICATION	1.3084092949741872E-4	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.9999910873461304	WITHOUT_CLASSIFICATION	8.912653869719681E-6	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9998542517860561	WITHOUT_CLASSIFICATION	1.4574821394384692E-4	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999332628861811	WITHOUT_CLASSIFICATION	6.673711381897891E-5	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999323146314465	WITHOUT_CLASSIFICATION	6.768536855347658E-5	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999985341063962	WITHOUT_CLASSIFICATION	1.4658936038094564E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998995986275319	WITHOUT_CLASSIFICATION	1.0040137246821178E-4	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9998654198237729	WITHOUT_CLASSIFICATION	1.3458017622714714E-4	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9959747841386783	WITHOUT_CLASSIFICATION	0.004025215861321684	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9907673337957256	WITHOUT_CLASSIFICATION	0.009232666204274381	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9998652454636999	WITHOUT_CLASSIFICATION	1.3475453629999687E-4	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9998656282619051	WITHOUT_CLASSIFICATION	1.343717380949147E-4	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.999865957963737	WITHOUT_CLASSIFICATION	1.340420362630266E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998995986275319	WITHOUT_CLASSIFICATION	1.0040137246821178E-4	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999067898846757	WITHOUT_CLASSIFICATION	9.321011532428469E-5	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999505630719979	WITHOUT_CLASSIFICATION	4.9436928002095394E-5	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9998092321476642	WITHOUT_CLASSIFICATION	1.9076785233579648E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999989131369283	WITHOUT_CLASSIFICATION	1.086863071720011E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998702385416095	WITHOUT_CLASSIFICATION	1.2976145839049014E-4	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999640450670967	WITHOUT_CLASSIFICATION	3.595493290329613E-5	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9982163044581239	WITHOUT_CLASSIFICATION	0.0017836955418760994	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998702385416095	WITHOUT_CLASSIFICATION	1.2976145839049014E-4	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999969516772256	WITHOUT_CLASSIFICATION	3.0483227744323768E-6	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999268301066584	WITHOUT_CLASSIFICATION	7.316989334151809E-5	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9996834145320806	WITHOUT_CLASSIFICATION	3.165854679192932E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998712084102173	WITHOUT_CLASSIFICATION	1.287915897827151E-4	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9998805551955383	WITHOUT_CLASSIFICATION	1.1944480446170853E-4	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9995810467886773	WITHOUT_CLASSIFICATION	4.1895321132258114E-4	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9998786931121935	WITHOUT_CLASSIFICATION	1.2130688780662563E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999989131369283	WITHOUT_CLASSIFICATION	1.086863071720011E-6	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999640450670967	WITHOUT_CLASSIFICATION	3.595493290329613E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998702385416095	WITHOUT_CLASSIFICATION	1.2976145839049014E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998995986275319	WITHOUT_CLASSIFICATION	1.0040137246821178E-4	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.99993457421729	WITHOUT_CLASSIFICATION	6.542578270992925E-5	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9976272881353997	WITHOUT_CLASSIFICATION	0.002372711864600286	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999973766030564	WITHOUT_CLASSIFICATION	2.6233969435199975E-6	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998431302828736	WITHOUT_CLASSIFICATION	1.5686971712647782E-4	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996352505102719	WITHOUT_CLASSIFICATION	3.64749489728119E-4	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999152473100367	WITHOUT_CLASSIFICATION	8.475268996340591E-5	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999853735809751	WITHOUT_CLASSIFICATION	1.4626419024989332E-5	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9979766486018622	WITHOUT_CLASSIFICATION	0.0020233513981378496	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972328403905469	WITHOUT_CLASSIFICATION	0.0027671596094530383	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999972863368318	WITHOUT_CLASSIFICATION	2.7136631682192542E-6	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998146959679929	WITHOUT_CLASSIFICATION	1.853040320071282E-4	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.999958054258434	WITHOUT_CLASSIFICATION	4.194574156601534E-5	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9994489846568843	WITHOUT_CLASSIFICATION	5.510153431157496E-4	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972328403905469	WITHOUT_CLASSIFICATION	0.0027671596094530383	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997381310071141	WITHOUT_CLASSIFICATION	0.002618689928858946	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979602724184304	WITHOUT_CLASSIFICATION	0.0020397275815696777	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9998397162246785	WITHOUT_CLASSIFICATION	1.6028377532145498E-4	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999934605997943	WITHOUT_CLASSIFICATION	6.539400205700289E-5	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997501750396928	WITHOUT_CLASSIFICATION	0.0024982496030719454	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972328403905469	WITHOUT_CLASSIFICATION	0.0027671596094530383	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9953250861230384	WITHOUT_CLASSIFICATION	0.004674913876961603	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998702385416095	WITHOUT_CLASSIFICATION	1.2976145839049014E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998702385416095	WITHOUT_CLASSIFICATION	1.2976145839049014E-4	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9953936546958579	WITHOUT_CLASSIFICATION	0.004606345304142052	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972328403905469	WITHOUT_CLASSIFICATION	0.0027671596094530383	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999817669233506	WITHOUT_CLASSIFICATION	1.8233076649394812E-4	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999965523877818	WITHOUT_CLASSIFICATION	3.447612218111074E-6	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999827768998705	WITHOUT_CLASSIFICATION	1.7223100129535208E-5	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999717651125071	WITHOUT_CLASSIFICATION	2.8234887492878495E-5	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999891801140511	WITHOUT_CLASSIFICATION	1.0819885948950876E-5	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.999997724170231	WITHOUT_CLASSIFICATION	2.2758297689713116E-6	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9998143006961866	WITHOUT_CLASSIFICATION	1.856993038135419E-4	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999852748718197	WITHOUT_CLASSIFICATION	1.4725128180407544E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999086290385267	WITHOUT_CLASSIFICATION	9.137096147324064E-5	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9997469758826224	WITHOUT_CLASSIFICATION	2.530241173776269E-4	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9996205194146849	WITHOUT_CLASSIFICATION	3.794805853150199E-4	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.999959026605448	WITHOUT_CLASSIFICATION	4.097339455197071E-5	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999498825948091	WITHOUT_CLASSIFICATION	5.0117405190918254E-5	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998757713963966	WITHOUT_CLASSIFICATION	1.2422860360345895E-4	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999864869328787	WITHOUT_CLASSIFICATION	1.3513067121291697E-5	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999251772997272	WITHOUT_CLASSIFICATION	7.482270027289616E-5	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998563789121484	WITHOUT_CLASSIFICATION	1.4362108785154776E-4	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997937012518767	WITHOUT_CLASSIFICATION	2.0629874812335861E-4	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999993693080947	WITHOUT_CLASSIFICATION	6.306919052924733E-6	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9998304701469491	WITHOUT_CLASSIFICATION	1.6952985305085583E-4	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9997181988437454	WITHOUT_CLASSIFICATION	2.818011562546243E-4	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999708843876434	WITHOUT_CLASSIFICATION	2.9115612356589042E-5	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999511766798326	WITHOUT_CLASSIFICATION	4.8823320167380174E-5	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999801059697115	WITHOUT_CLASSIFICATION	1.9894030288507153E-4	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999390732598621	WITHOUT_CLASSIFICATION	6.092674013776326E-5	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9995986903211413	WITHOUT_CLASSIFICATION	4.013096788586252E-4	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999079901016881	WITHOUT_CLASSIFICATION	9.200989831191467E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999801059697115	WITHOUT_CLASSIFICATION	1.9894030288507153E-4	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999951264853915	WITHOUT_CLASSIFICATION	4.873514608586231E-6	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999850669799288	WITHOUT_CLASSIFICATION	1.4933020071255815E-5	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998922481375541	WITHOUT_CLASSIFICATION	1.0775186244599459E-4	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999351776702167	WITHOUT_CLASSIFICATION	6.482232978325684E-5	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9998717204601074	WITHOUT_CLASSIFICATION	1.282795398924781E-4	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.999879314147615	WITHOUT_CLASSIFICATION	1.2068585238499306E-4	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.999963861423745	WITHOUT_CLASSIFICATION	3.6138576254842E-5	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999458930924517	WITHOUT_CLASSIFICATION	5.410690754834581E-5	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999458930924517	WITHOUT_CLASSIFICATION	5.410690754834581E-5	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999631201217469	WITHOUT_CLASSIFICATION	3.6879878252957844E-5	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999243783377911	WITHOUT_CLASSIFICATION	7.562166220884374E-5	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998473464663196	WITHOUT_CLASSIFICATION	1.526535336804509E-4	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9998689514698585	WITHOUT_CLASSIFICATION	1.310485301415413E-4	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999239826558	WITHOUT_CLASSIFICATION	7.601734417353347E-8	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9996175191974288	WITHOUT_CLASSIFICATION	3.8248080257121E-4	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999998699584918	WITHOUT_CLASSIFICATION	1.3004150821073373E-7	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999949451160167	WITHOUT_CLASSIFICATION	5.054883983225789E-6	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999408316227372	WITHOUT_CLASSIFICATION	5.916837726291214E-5	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999816901151277	WITHOUT_CLASSIFICATION	1.8309884872312268E-5	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9997524308559105	WITHOUT_CLASSIFICATION	2.4756914408948226E-4	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999782447929358	WITHOUT_CLASSIFICATION	2.1755207064202005E-5	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998968218611817	WITHOUT_CLASSIFICATION	1.0317813881833773E-4	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.908129447220793	WITHOUT_CLASSIFICATION	0.09187055277920692	IMPLEMENTATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9993662386132297	WITHOUT_CLASSIFICATION	6.337613867702001E-4	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.999752844225331	WITHOUT_CLASSIFICATION	2.4715577466914083E-4	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.99988718349225	WITHOUT_CLASSIFICATION	1.1281650774989355E-4	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9982390333170755	WITHOUT_CLASSIFICATION	0.001760966682924491	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9995773163677573	WITHOUT_CLASSIFICATION	4.226836322427118E-4	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999252529479259	WITHOUT_CLASSIFICATION	7.474705207408863E-5	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999914659856253	WITHOUT_CLASSIFICATION	8.534014374753104E-6	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999638907501359	WITHOUT_CLASSIFICATION	3.610924986413434E-5	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9856516136390542	WITHOUT_CLASSIFICATION	0.014348386360945818	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999968234816891	WITHOUT_CLASSIFICATION	3.1765183109877803E-6	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999773546744875	WITHOUT_CLASSIFICATION	2.2645325512589042E-5	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9996361386598592	WITHOUT_CLASSIFICATION	3.6386134014081606E-4	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9919445536904793	WITHOUT_CLASSIFICATION	0.008055446309520709	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9997877095960563	WITHOUT_CLASSIFICATION	2.1229040394363192E-4	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9970291323016269	WITHOUT_CLASSIFICATION	0.0029708676983729756	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9998081505043918	WITHOUT_CLASSIFICATION	1.918494956082558E-4	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999539784875192	WITHOUT_CLASSIFICATION	4.602151248073443E-5	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.9999742349371346	WITHOUT_CLASSIFICATION	2.5765062865377256E-5	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999904037913414	WITHOUT_CLASSIFICATION	9.596208658635411E-6	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.9999879628989198	WITHOUT_CLASSIFICATION	1.2037101080286565E-5	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999847520148747	WITHOUT_CLASSIFICATION	1.5247985125288685E-5	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.9999376302035269	WITHOUT_CLASSIFICATION	6.236979647313994E-5	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999544160265308	WITHOUT_CLASSIFICATION	4.558397346919904E-5	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9922270383528797	WITHOUT_CLASSIFICATION	0.007772961647120223	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9998055529313415	WITHOUT_CLASSIFICATION	1.9444706865846722E-4	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999663624199752	WITHOUT_CLASSIFICATION	3.363758002486873E-5	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998413147535419	WITHOUT_CLASSIFICATION	1.5868524645816073E-4	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999764432396648	WITHOUT_CLASSIFICATION	2.355676033521087E-5	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999764432396648	WITHOUT_CLASSIFICATION	2.355676033521087E-5	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999651835582308	WITHOUT_CLASSIFICATION	3.481644176914893E-5	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999986082663936	WITHOUT_CLASSIFICATION	1.3917336064158488E-6	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999630473577088	WITHOUT_CLASSIFICATION	3.695264229124549E-5	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999992344371601	WITHOUT_CLASSIFICATION	7.655628398467095E-7	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999732272563858	WITHOUT_CLASSIFICATION	2.6772743614133954E-5	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.9999234111838153	WITHOUT_CLASSIFICATION	7.65888161845721E-5	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999113234682668	WITHOUT_CLASSIFICATION	8.867653173323331E-5	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9998722836665421	WITHOUT_CLASSIFICATION	1.277163334578568E-4	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999974282831395	WITHOUT_CLASSIFICATION	2.571716860467332E-6	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.9996881606200224	WITHOUT_CLASSIFICATION	3.1183937997760494E-4	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998849891646389	WITHOUT_CLASSIFICATION	1.1501083536118318E-4	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999596022638865	WITHOUT_CLASSIFICATION	4.0397736113526985E-5	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9997867927582981	WITHOUT_CLASSIFICATION	2.1320724170188898E-4	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998594152159908	WITHOUT_CLASSIFICATION	1.4058478400926695E-4	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999134944575042	WITHOUT_CLASSIFICATION	8.650554249569111E-5	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999221975543436	WITHOUT_CLASSIFICATION	7.780244565635786E-5	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9999405656902546	WITHOUT_CLASSIFICATION	5.943430974533405E-5	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9994580302628624	WITHOUT_CLASSIFICATION	5.419697371376854E-4	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9991954492163552	WITHOUT_CLASSIFICATION	8.045507836448431E-4	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9998947596207484	WITHOUT_CLASSIFICATION	1.0524037925161294E-4	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.9998333603959795	WITHOUT_CLASSIFICATION	1.666396040205813E-4	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999962495198643	WITHOUT_CLASSIFICATION	3.7504801356844754E-6	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9998947596207484	WITHOUT_CLASSIFICATION	1.0524037925161294E-4	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999871036646606	WITHOUT_CLASSIFICATION	1.2896335339309458E-5	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.9999876128063289	WITHOUT_CLASSIFICATION	1.2387193671082876E-5	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9996979827947408	WITHOUT_CLASSIFICATION	3.02017205259224E-4	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998338330428952	WITHOUT_CLASSIFICATION	1.661669571048526E-4	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.9997745234682058	WITHOUT_CLASSIFICATION	2.2547653179422759E-4	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999965109514878	WITHOUT_CLASSIFICATION	3.4890485122942344E-6	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999090690942979	WITHOUT_CLASSIFICATION	9.093090570216761E-5	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998776559919619	WITHOUT_CLASSIFICATION	1.2234400803816072E-4	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999859550323038	WITHOUT_CLASSIFICATION	1.404496769620044E-4	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999976688984646	WITHOUT_CLASSIFICATION	2.331101535361536E-6	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9998732386698881	WITHOUT_CLASSIFICATION	1.267613301119491E-4	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9995767775285038	WITHOUT_CLASSIFICATION	4.2322247149616254E-4	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999560719210544	WITHOUT_CLASSIFICATION	4.392807894561554E-5	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9968191410383176	WITHOUT_CLASSIFICATION	0.0031808589616823444	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9998725047363871	WITHOUT_CLASSIFICATION	1.2749526361280656E-4	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999321778646657	WITHOUT_CLASSIFICATION	6.782213533438099E-5	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999321778646657	WITHOUT_CLASSIFICATION	6.782213533438099E-5	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9950213328657322	WITHOUT_CLASSIFICATION	0.00497866713426782	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9999390316874934	WITHOUT_CLASSIFICATION	6.096831250667429E-5	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.999955710409136	WITHOUT_CLASSIFICATION	4.428959086396725E-5	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999132999510528	WITHOUT_CLASSIFICATION	8.670004894715684E-5	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9973707069074671	WITHOUT_CLASSIFICATION	0.0026292930925329422	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9999029706064193	WITHOUT_CLASSIFICATION	9.7029393580666E-5	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999736508557279	WITHOUT_CLASSIFICATION	2.634914427222992E-5	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.9999681958159827	WITHOUT_CLASSIFICATION	3.180418401728778E-5	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9887930185988227	WITHOUT_CLASSIFICATION	0.01120698140117729	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.7107175156254628	WITHOUT_CLASSIFICATION	0.2892824843745372	IMPLEMENTATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9997827899445804	WITHOUT_CLASSIFICATION	2.1721005541965215E-4	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9957174746950663	WITHOUT_CLASSIFICATION	0.0042825253049337455	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.999755720601979	WITHOUT_CLASSIFICATION	2.442793980209283E-4	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9998861227323937	WITHOUT_CLASSIFICATION	1.138772676061907E-4	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999251772997272	WITHOUT_CLASSIFICATION	7.482270027289616E-5	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9997401260403151	WITHOUT_CLASSIFICATION	2.5987395968490184E-4	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999862986380904	WITHOUT_CLASSIFICATION	1.3701361909627397E-5	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9965068683117444	WITHOUT_CLASSIFICATION	0.003493131688255592	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999857160620256	WITHOUT_CLASSIFICATION	1.4283937974289768E-5	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999940089601075	WITHOUT_CLASSIFICATION	5.991039892508936E-6	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.9999292034434079	WITHOUT_CLASSIFICATION	7.07965565921664E-5	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9881082922504063	WITHOUT_CLASSIFICATION	0.011891707749593586	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999788861322874	WITHOUT_CLASSIFICATION	2.1113867712680238E-5	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999487391047225	WITHOUT_CLASSIFICATION	5.126089527751013E-5	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999119696485024	WITHOUT_CLASSIFICATION	8.80303514975831E-5	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999881229459985	WITHOUT_CLASSIFICATION	1.1877054001458385E-5	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.999927021138219	WITHOUT_CLASSIFICATION	7.297886178105492E-5	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9991038779345225	WITHOUT_CLASSIFICATION	8.961220654775643E-4	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9999434748161192	WITHOUT_CLASSIFICATION	5.652518388077193E-5	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999493712359517	WITHOUT_CLASSIFICATION	5.0628764048267956E-5	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999060771204453	WITHOUT_CLASSIFICATION	9.39228795546314E-5	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999908317938125	WITHOUT_CLASSIFICATION	9.168206187397077E-6	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999676253093703	WITHOUT_CLASSIFICATION	3.237469062965326E-5	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999997686363644	WITHOUT_CLASSIFICATION	2.3136363554562904E-7	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999668040941821	WITHOUT_CLASSIFICATION	3.319590581782148E-5	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999690161960179	WITHOUT_CLASSIFICATION	3.098380398212408E-5	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9998120042741544	WITHOUT_CLASSIFICATION	1.8799572584555184E-4	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999379301720775	WITHOUT_CLASSIFICATION	6.2069827922501E-5	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.9996151759188419	WITHOUT_CLASSIFICATION	3.848240811581189E-4	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.9998576268035465	WITHOUT_CLASSIFICATION	1.4237319645359184E-4	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9994181396995776	WITHOUT_CLASSIFICATION	5.818603004223966E-4	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999922354174433	WITHOUT_CLASSIFICATION	7.764582556747547E-6	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9980937402272004	WITHOUT_CLASSIFICATION	0.0019062597727995182	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9849880395517294	WITHOUT_CLASSIFICATION	0.015011960448270639	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998610754916883	WITHOUT_CLASSIFICATION	1.38924508311628E-4	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999366850982727	WITHOUT_CLASSIFICATION	6.331490172729182E-4	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999437695099669	WITHOUT_CLASSIFICATION	5.623049003304438E-5	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.999978912826899	WITHOUT_CLASSIFICATION	2.1087173101008255E-5	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999431691580504	WITHOUT_CLASSIFICATION	5.683084194965793E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999086290385267	WITHOUT_CLASSIFICATION	9.137096147324064E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999086290385267	WITHOUT_CLASSIFICATION	9.137096147324064E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999874088396732	WITHOUT_CLASSIFICATION	1.2591160326724688E-5	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9939768157993707	WITHOUT_CLASSIFICATION	0.006023184200629276	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9998844813405948	WITHOUT_CLASSIFICATION	1.1551865940515387E-4	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998301906000829	WITHOUT_CLASSIFICATION	1.698093999169942E-4	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9998844813405948	WITHOUT_CLASSIFICATION	1.1551865940515387E-4	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999531660477248	WITHOUT_CLASSIFICATION	4.6833952275215866E-5	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999924696879392	WITHOUT_CLASSIFICATION	7.530312060841461E-6	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999772449694452	WITHOUT_CLASSIFICATION	2.2755030554803582E-5	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999969095380085	WITHOUT_CLASSIFICATION	3.090461991445061E-6	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999506678866057	WITHOUT_CLASSIFICATION	4.933211339418668E-5	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999839274587553	WITHOUT_CLASSIFICATION	1.6072541244768782E-5	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999026977602452	WITHOUT_CLASSIFICATION	9.730223975478942E-5	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.9999343116303866	WITHOUT_CLASSIFICATION	6.5688369613344E-5	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.999796075256393	WITHOUT_CLASSIFICATION	2.0392474360694872E-4	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.955747002769158	WITHOUT_CLASSIFICATION	0.04425299723084203	IMPLEMENTATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.9995828055217282	WITHOUT_CLASSIFICATION	4.171944782718146E-4	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9974032318113722	WITHOUT_CLASSIFICATION	0.0025967681886278674	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999583642081965	WITHOUT_CLASSIFICATION	4.1635791803556814E-5	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.999991139812352	WITHOUT_CLASSIFICATION	8.860187648035714E-6	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.7821207027453076	WITHOUT_CLASSIFICATION	0.21787929725469246	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9986622510844133	WITHOUT_CLASSIFICATION	0.00133774891558672	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999905526498883	WITHOUT_CLASSIFICATION	9.447350111625814E-6	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999905526498883	WITHOUT_CLASSIFICATION	9.447350111625814E-6	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999503720842697	WITHOUT_CLASSIFICATION	4.962791573020542E-5	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9996461309707263	WITHOUT_CLASSIFICATION	3.5386902927364474E-4	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999990719539823	WITHOUT_CLASSIFICATION	9.280460176986191E-7	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999911187328625	WITHOUT_CLASSIFICATION	8.881267137504129E-6	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999843103459335	WITHOUT_CLASSIFICATION	1.5689654066560602E-5	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999976114806833	WITHOUT_CLASSIFICATION	2.3885193167798144E-6	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9996570679058938	WITHOUT_CLASSIFICATION	3.4293209410616465E-4	IMPLEMENTATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999958471745227	WITHOUT_CLASSIFICATION	4.152825477244214E-6	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.999853197536151	WITHOUT_CLASSIFICATION	1.4680246384900176E-4	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999887909967939	WITHOUT_CLASSIFICATION	1.1209003205972841E-5	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999962692336504	WITHOUT_CLASSIFICATION	3.7307663496837057E-6	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999129960684845	WITHOUT_CLASSIFICATION	8.700393151555524E-5	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9998789905507214	WITHOUT_CLASSIFICATION	1.2100944927854248E-4	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999945482195634	WITHOUT_CLASSIFICATION	5.451780436691662E-6	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9986550667967239	WITHOUT_CLASSIFICATION	0.001344933203276057	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9990187800947096	WITHOUT_CLASSIFICATION	9.812199052904212E-4	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999970836760468	WITHOUT_CLASSIFICATION	2.9163239532374842E-6	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9995968147291684	WITHOUT_CLASSIFICATION	4.031852708316068E-4	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.9995965102387472	WITHOUT_CLASSIFICATION	4.034897612529276E-4	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999938175113513	WITHOUT_CLASSIFICATION	6.182488648739476E-6	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999909679247728	WITHOUT_CLASSIFICATION	9.032075227162947E-6	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9988721367476135	WITHOUT_CLASSIFICATION	0.0011278632523864574	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9980650635283249	WITHOUT_CLASSIFICATION	0.0019349364716750243	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9998827168902251	WITHOUT_CLASSIFICATION	1.1728310977484612E-4	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.9999901809724019	WITHOUT_CLASSIFICATION	9.819027598175026E-6	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.9999990656632112	WITHOUT_CLASSIFICATION	9.343367888160277E-7	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999634142301631	WITHOUT_CLASSIFICATION	3.6585769836976105E-5	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9985668200829981	WITHOUT_CLASSIFICATION	0.001433179917001827	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999755429622705	WITHOUT_CLASSIFICATION	2.445703772948005E-5	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999994154761388	WITHOUT_CLASSIFICATION	5.845238610825385E-7	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.999965509618163	WITHOUT_CLASSIFICATION	3.449038183703841E-5	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.999995931039021	WITHOUT_CLASSIFICATION	4.068960979080684E-6	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998702920171126	WITHOUT_CLASSIFICATION	1.2970798288736924E-4	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9890116663791145	WITHOUT_CLASSIFICATION	0.010988333620885526	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999434699312109	WITHOUT_CLASSIFICATION	5.653006878901332E-5	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999916153471994	WITHOUT_CLASSIFICATION	8.384652800689593E-6	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999811143440471	WITHOUT_CLASSIFICATION	1.888565595280699E-5	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999964249324234	WITHOUT_CLASSIFICATION	3.575067576538259E-6	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999986624728484	WITHOUT_CLASSIFICATION	1.3375271516299274E-6	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9991133837856763	WITHOUT_CLASSIFICATION	8.866162143238308E-4	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999593955974079	WITHOUT_CLASSIFICATION	4.0604402592115996E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998624774345238	WITHOUT_CLASSIFICATION	1.3752256547608436E-4	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9996888493165643	WITHOUT_CLASSIFICATION	3.111506834356217E-4	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.8705279945333723	WITHOUT_CLASSIFICATION	0.12947200546662774	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9969923550375107	WITHOUT_CLASSIFICATION	0.0030076449624892	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999187200342633	WITHOUT_CLASSIFICATION	8.127996573669643E-5	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999460123527765	WITHOUT_CLASSIFICATION	5.3987647223531974E-5	IMPLEMENTATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999271987272	WITHOUT_CLASSIFICATION	7.280127284205681E-8	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998517791942725	WITHOUT_CLASSIFICATION	1.4822080572748307E-4	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999786651747987	WITHOUT_CLASSIFICATION	2.1334825201350187E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998624774345238	WITHOUT_CLASSIFICATION	1.3752256547608436E-4	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999881245068049	WITHOUT_CLASSIFICATION	1.1875493195177471E-5	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999826954221835	WITHOUT_CLASSIFICATION	1.730457781655174E-5	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.983671833770309	WITHOUT_CLASSIFICATION	0.016328166229691018	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.9999799997909795	WITHOUT_CLASSIFICATION	2.000020902054852E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999067898846757	WITHOUT_CLASSIFICATION	9.321011532428469E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999067898846757	WITHOUT_CLASSIFICATION	9.321011532428469E-5	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999995786352015	WITHOUT_CLASSIFICATION	4.2136479843919473E-7	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999983683995874	WITHOUT_CLASSIFICATION	1.6316004125054832E-6	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999994922609976	WITHOUT_CLASSIFICATION	5.077390023044012E-7	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9997252021652483	WITHOUT_CLASSIFICATION	2.74797834751692E-4	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9995050855729057	WITHOUT_CLASSIFICATION	4.949144270942994E-4	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9993029917244961	WITHOUT_CLASSIFICATION	6.970082755038443E-4	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999372397241248	WITHOUT_CLASSIFICATION	6.276027587519963E-5	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999639232887523	WITHOUT_CLASSIFICATION	3.6076711247671393E-5	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999909748293414	WITHOUT_CLASSIFICATION	9.025170658534065E-6	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998629297013603	WITHOUT_CLASSIFICATION	1.3707029863967575E-4	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999934754390753	WITHOUT_CLASSIFICATION	6.524560924703499E-5	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999979649506721	WITHOUT_CLASSIFICATION	2.0350493279577765E-6	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999070770359447	WITHOUT_CLASSIFICATION	9.292296405532948E-5	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999391298737818	WITHOUT_CLASSIFICATION	6.08701262181339E-5	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9998683410933519	WITHOUT_CLASSIFICATION	1.3165890664814232E-4	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9995934302830389	WITHOUT_CLASSIFICATION	4.065697169610773E-4	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9805036877553355	WITHOUT_CLASSIFICATION	0.01949631224466454	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999955464778666	WITHOUT_CLASSIFICATION	4.453522133324424E-6	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999499681506085	WITHOUT_CLASSIFICATION	5.003184939147837E-5	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9998940872273423	WITHOUT_CLASSIFICATION	1.0591277265774147E-4	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9998652454636999	WITHOUT_CLASSIFICATION	1.3475453629999687E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9996800391986868	WITHOUT_CLASSIFICATION	3.199608013132631E-4	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999941925882517	WITHOUT_CLASSIFICATION	5.807411748259838E-6	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9937850456122077	WITHOUT_CLASSIFICATION	0.0062149543877922505	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9983532337699118	WITHOUT_CLASSIFICATION	0.001646766230088194	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999438167382254	WITHOUT_CLASSIFICATION	5.618326177464052E-5	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9995281638200944	WITHOUT_CLASSIFICATION	4.7183617990574314E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999188413207701	WITHOUT_CLASSIFICATION	8.115867922986381E-5	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999671358548	WITHOUT_CLASSIFICATION	3.2864145160651404E-8	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999658444029047	WITHOUT_CLASSIFICATION	3.415559709527739E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999971026941317	WITHOUT_CLASSIFICATION	2.897305868292299E-6	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999970054575593	WITHOUT_CLASSIFICATION	2.994542440572676E-6	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9992576830874821	WITHOUT_CLASSIFICATION	7.423169125179669E-4	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999971026941317	WITHOUT_CLASSIFICATION	2.897305868292299E-6	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9947465916557329	WITHOUT_CLASSIFICATION	0.005253408344267117	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999658444029047	WITHOUT_CLASSIFICATION	3.415559709527739E-5	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999940909989584	WITHOUT_CLASSIFICATION	5.909001041634263E-6	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999971026941317	WITHOUT_CLASSIFICATION	2.897305868292299E-6	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999899792134582	WITHOUT_CLASSIFICATION	1.0020786541715363E-5	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9962331787674752	WITHOUT_CLASSIFICATION	0.0037668212325248102	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999962692336504	WITHOUT_CLASSIFICATION	3.7307663496837057E-6	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999487749219235	WITHOUT_CLASSIFICATION	5.12250780766343E-5	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9998143006961866	WITHOUT_CLASSIFICATION	1.856993038135419E-4	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999983993927689	WITHOUT_CLASSIFICATION	1.6006072310518732E-6	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999754885219281	WITHOUT_CLASSIFICATION	2.451147807197951E-5	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999989844722136	WITHOUT_CLASSIFICATION	1.0155277864199973E-6	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.9999943688513994	WITHOUT_CLASSIFICATION	5.631148600637958E-6	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998537626926617	WITHOUT_CLASSIFICATION	1.462373073384277E-4	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999892087459697	WITHOUT_CLASSIFICATION	1.0791254030178463E-5	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999321778646657	WITHOUT_CLASSIFICATION	6.782213533438099E-5	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.999988446831681	WITHOUT_CLASSIFICATION	1.1553168319096851E-5	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999067529348493	WITHOUT_CLASSIFICATION	9.32470651506523E-5	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999800766497288	WITHOUT_CLASSIFICATION	1.9923350271235453E-5	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9994959253048064	WITHOUT_CLASSIFICATION	5.040746951936957E-4	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9998109146464138	WITHOUT_CLASSIFICATION	1.8908535358611492E-4	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9997445242173897	WITHOUT_CLASSIFICATION	2.554757826103446E-4	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999294561729416	WITHOUT_CLASSIFICATION	7.054382705838604E-5	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9998086955208435	WITHOUT_CLASSIFICATION	1.9130447915645038E-4	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999866760761552	WITHOUT_CLASSIFICATION	1.3323923844740799E-5	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999915147625305	WITHOUT_CLASSIFICATION	8.485237469445769E-6	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999321778646657	WITHOUT_CLASSIFICATION	6.782213533438099E-5	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9998658150395645	WITHOUT_CLASSIFICATION	1.3418496043549326E-4	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.999983483648221	WITHOUT_CLASSIFICATION	1.6516351778986074E-5	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999916267770584	WITHOUT_CLASSIFICATION	8.373222941594226E-6	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999196785881908	WITHOUT_CLASSIFICATION	8.032141180921578E-5	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.9998690064003607	WITHOUT_CLASSIFICATION	1.309935996393835E-4	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.9999688177413649	WITHOUT_CLASSIFICATION	3.1182258635070724E-5	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976796442074986	WITHOUT_CLASSIFICATION	0.002320355792501547	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982628590732278	WITHOUT_CLASSIFICATION	0.0017371409267721955	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9995803012074981	WITHOUT_CLASSIFICATION	4.196987925019498E-4	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.999495956593265	WITHOUT_CLASSIFICATION	5.040434067350582E-4	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999535357473588	WITHOUT_CLASSIFICATION	4.646425264110656E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999456266671445	WITHOUT_CLASSIFICATION	5.437333285556666E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999456266671445	WITHOUT_CLASSIFICATION	5.437333285556666E-5	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.99987559016211	WITHOUT_CLASSIFICATION	1.2440983788992066E-4	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.999901953801098	WITHOUT_CLASSIFICATION	9.804619890196603E-5	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999579271421777	WITHOUT_CLASSIFICATION	4.2072857822305823E-5	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999248193268331	WITHOUT_CLASSIFICATION	7.518067316689496E-5	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999240184684046	WITHOUT_CLASSIFICATION	7.598153159540783E-4	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999263011679184	WITHOUT_CLASSIFICATION	7.369883208160254E-5	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.999995829834582	WITHOUT_CLASSIFICATION	4.17016541800458E-6	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999834209328269	WITHOUT_CLASSIFICATION	1.657906717313727E-5	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999184681413867	WITHOUT_CLASSIFICATION	8.153185861325661E-5	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999891899047342	WITHOUT_CLASSIFICATION	1.0810095265925665E-5	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999699350442451	WITHOUT_CLASSIFICATION	3.0064955754825006E-5	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999768163935187	WITHOUT_CLASSIFICATION	2.3183606481402674E-5	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999925881760982	WITHOUT_CLASSIFICATION	7.411823901943738E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999456266671445	WITHOUT_CLASSIFICATION	5.437333285556666E-5	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999091811451452	WITHOUT_CLASSIFICATION	9.081885485490313E-5	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999569108715333	WITHOUT_CLASSIFICATION	4.308912846681538E-5	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999980681648338	WITHOUT_CLASSIFICATION	1.9318351662010865E-5	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998439784884681	WITHOUT_CLASSIFICATION	1.5602151153194948E-4	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999870166975802	WITHOUT_CLASSIFICATION	1.298330241983039E-5	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9997095917073423	WITHOUT_CLASSIFICATION	2.904082926576757E-4	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999889750081872	WITHOUT_CLASSIFICATION	1.1024991812803304E-4	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999531464850575	WITHOUT_CLASSIFICATION	4.6853514942479946E-5	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999800948128903	WITHOUT_CLASSIFICATION	1.9905187109643914E-5	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999347142587764	WITHOUT_CLASSIFICATION	6.528574122358488E-5	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9996054619980079	WITHOUT_CLASSIFICATION	3.9453800199212564E-4	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976796442074986	WITHOUT_CLASSIFICATION	0.002320355792501547	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999456266671445	WITHOUT_CLASSIFICATION	5.437333285556666E-5	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999718742217295	WITHOUT_CLASSIFICATION	2.812577827044438E-5	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9988112553305134	WITHOUT_CLASSIFICATION	0.0011887446694866606	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.9999532074379612	WITHOUT_CLASSIFICATION	4.6792562038800586E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9997669888709891	WITHOUT_CLASSIFICATION	2.3301112901083393E-4	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999867733612701	WITHOUT_CLASSIFICATION	1.3226638729998764E-5	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999141396407156	WITHOUT_CLASSIFICATION	8.58603592843684E-5	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995756922044602	WITHOUT_CLASSIFICATION	4.243077955397807E-4	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999993542794651	WITHOUT_CLASSIFICATION	6.457205349612974E-7	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999934214559091	WITHOUT_CLASSIFICATION	6.578544090960906E-6	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999459848751624	WITHOUT_CLASSIFICATION	5.4015124837666955E-5	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9994843493592358	WITHOUT_CLASSIFICATION	5.15650640764132E-4	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999755429622705	WITHOUT_CLASSIFICATION	2.445703772948005E-5	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999588161802403	WITHOUT_CLASSIFICATION	4.118381975967084E-5	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999258181971045	WITHOUT_CLASSIFICATION	7.418180289552975E-5	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999531660477248	WITHOUT_CLASSIFICATION	4.6833952275215866E-5	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999879210952998	WITHOUT_CLASSIFICATION	1.2078904700146248E-5	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999964378294195	WITHOUT_CLASSIFICATION	3.56217058046415E-6	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999817060487202	WITHOUT_CLASSIFICATION	1.829395127989609E-5	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.99995745794758	WITHOUT_CLASSIFICATION	4.254205241995993E-5	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999395240533389	WITHOUT_CLASSIFICATION	6.0475946661096104E-5	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999244946574977	WITHOUT_CLASSIFICATION	7.550534250228267E-5	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999244946574977	WITHOUT_CLASSIFICATION	7.550534250228267E-5	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.999470263466768	WITHOUT_CLASSIFICATION	5.297365332319522E-4	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999738959407253	WITHOUT_CLASSIFICATION	2.610405927468675E-5	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999443897466527	WITHOUT_CLASSIFICATION	5.561025334736617E-5	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999722876745573	WITHOUT_CLASSIFICATION	2.771232544281537E-5	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999723928998305	WITHOUT_CLASSIFICATION	2.7607100169451247E-5	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999942485273342	WITHOUT_CLASSIFICATION	5.751472665732645E-6	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9996981264916313	WITHOUT_CLASSIFICATION	3.0187350836870377E-4	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9961897736868683	WITHOUT_CLASSIFICATION	0.0038102263131316472	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9961897736868683	WITHOUT_CLASSIFICATION	0.0038102263131316472	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.6241856606588604	WITHOUT_CLASSIFICATION	0.37581433934113956	IMPLEMENTATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999447598572595	WITHOUT_CLASSIFICATION	5.524014274053875E-5	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999954767836664	WITHOUT_CLASSIFICATION	4.523216333628099E-6	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999457717305458	WITHOUT_CLASSIFICATION	5.422826945429142E-5	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999457717305458	WITHOUT_CLASSIFICATION	5.422826945429142E-5	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999457717305458	WITHOUT_CLASSIFICATION	5.422826945429142E-5	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999242106232653	WITHOUT_CLASSIFICATION	7.578937673477813E-5	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999930644700757	WITHOUT_CLASSIFICATION	6.935529924277687E-6	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.749928134764897	WITHOUT_CLASSIFICATION	0.25007186523510305	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999229733015093	WITHOUT_CLASSIFICATION	7.70266984908108E-5	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999933546971914	WITHOUT_CLASSIFICATION	6.6453028086197475E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999456266671445	WITHOUT_CLASSIFICATION	5.437333285556666E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999456266671445	WITHOUT_CLASSIFICATION	5.437333285556666E-5	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9989420291174725	WITHOUT_CLASSIFICATION	0.0010579708825274102	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999741592309804	WITHOUT_CLASSIFICATION	2.58407690195951E-5	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9993690564115643	WITHOUT_CLASSIFICATION	6.309435884357535E-4	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9998296969938743	WITHOUT_CLASSIFICATION	1.703030061257578E-4	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999780217674659	WITHOUT_CLASSIFICATION	2.1978232534054846E-5	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999923210177389	WITHOUT_CLASSIFICATION	7.678982261139654E-6	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999725243409251	WITHOUT_CLASSIFICATION	2.747565907483301E-5	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999932330498678	WITHOUT_CLASSIFICATION	6.766950132162388E-6	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999995925919837	WITHOUT_CLASSIFICATION	4.0740801622399884E-7	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999805883632421	WITHOUT_CLASSIFICATION	1.9411636757879708E-5	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999224801635401	WITHOUT_CLASSIFICATION	7.751983645988833E-5	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999549687064702	WITHOUT_CLASSIFICATION	4.5031293529867875E-5	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999549687064702	WITHOUT_CLASSIFICATION	4.5031293529867875E-5	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999549687064702	WITHOUT_CLASSIFICATION	4.5031293529867875E-5	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999549687064702	WITHOUT_CLASSIFICATION	4.5031293529867875E-5	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999549687064702	WITHOUT_CLASSIFICATION	4.5031293529867875E-5	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999065958032336	WITHOUT_CLASSIFICATION	9.340419676639574E-5	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999065958032336	WITHOUT_CLASSIFICATION	9.340419676639574E-5	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999065958032336	WITHOUT_CLASSIFICATION	9.340419676639574E-5	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999065958032336	WITHOUT_CLASSIFICATION	9.340419676639574E-5	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999582401072091	WITHOUT_CLASSIFICATION	4.175989279089573E-4	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999244946574977	WITHOUT_CLASSIFICATION	7.550534250228267E-5	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9997869901145099	WITHOUT_CLASSIFICATION	2.1300988549016742E-4	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999065958032336	WITHOUT_CLASSIFICATION	9.340419676639574E-5	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9986853402508672	WITHOUT_CLASSIFICATION	0.0013146597491328672	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999240380471938	WITHOUT_CLASSIFICATION	7.596195280626496E-5	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999635280064453	WITHOUT_CLASSIFICATION	3.647199355478933E-5	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999727891682465	WITHOUT_CLASSIFICATION	2.7210831753448717E-5	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999163620833	WITHOUT_CLASSIFICATION	8.363791680666211E-8	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999203693936183	WITHOUT_CLASSIFICATION	7.963060638168734E-5	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9998477568639238	WITHOUT_CLASSIFICATION	1.5224313607608357E-4	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999944801601848	WITHOUT_CLASSIFICATION	5.5198398152264E-6	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.999984018408417	WITHOUT_CLASSIFICATION	1.5981591583071804E-5	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999996091162878	WITHOUT_CLASSIFICATION	3.908837121670628E-7	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999960959914505	WITHOUT_CLASSIFICATION	3.90400854948157E-6	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.9999647749279108	WITHOUT_CLASSIFICATION	3.522507208923407E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999126195766176	WITHOUT_CLASSIFICATION	8.738042338236182E-5	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.9997310848988634	WITHOUT_CLASSIFICATION	2.6891510113660814E-4	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9804315272917201	WITHOUT_CLASSIFICATION	0.019568472708279862	IMPLEMENTATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999886496232707	WITHOUT_CLASSIFICATION	1.1350376729289404E-5	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.999990951770939	WITHOUT_CLASSIFICATION	9.04822906095701E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999855817395364	WITHOUT_CLASSIFICATION	1.4418260463524251E-5	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999855817395364	WITHOUT_CLASSIFICATION	1.4418260463524251E-5	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999691362093812	WITHOUT_CLASSIFICATION	3.086379061888576E-5	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999980755998963	WITHOUT_CLASSIFICATION	1.924400103722887E-6	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999620828450525	WITHOUT_CLASSIFICATION	3.7917154947553374E-5	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999038055024597	WITHOUT_CLASSIFICATION	9.619449754030536E-5	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999955960838924	WITHOUT_CLASSIFICATION	4.403916107590853E-5	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999126795937908	WITHOUT_CLASSIFICATION	8.732040620913904E-5	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999027931957045	WITHOUT_CLASSIFICATION	9.720680429554438E-5	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999617223218614	WITHOUT_CLASSIFICATION	3.8277678138500594E-5	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999551313259147	WITHOUT_CLASSIFICATION	4.486867408532936E-5	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.999996209447568	WITHOUT_CLASSIFICATION	3.7905524321813866E-6	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999033097708998	WITHOUT_CLASSIFICATION	9.669022910015932E-5	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999755429622705	WITHOUT_CLASSIFICATION	2.445703772948005E-5	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999885420140407	WITHOUT_CLASSIFICATION	1.1457985959201084E-5	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999952678042676	WITHOUT_CLASSIFICATION	4.7321957324057825E-6	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999711854800873	WITHOUT_CLASSIFICATION	2.8814519912697078E-5	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999457174156896	WITHOUT_CLASSIFICATION	5.4282584310483936E-5	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995613491773	WITHOUT_CLASSIFICATION	4.386508227089302E-7	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995613491773	WITHOUT_CLASSIFICATION	4.386508227089302E-7	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9996285471725823	WITHOUT_CLASSIFICATION	3.7145282741766057E-4	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999999814001146	WITHOUT_CLASSIFICATION	1.859988541548212E-8	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999774256240477	WITHOUT_CLASSIFICATION	2.2574375952262832E-5	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.9999891170194304	WITHOUT_CLASSIFICATION	1.0882980569614743E-5	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.9999706190467748	WITHOUT_CLASSIFICATION	2.9380953225247084E-5	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999798402435037	WITHOUT_CLASSIFICATION	2.0159756496236965E-5	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999863599660417	WITHOUT_CLASSIFICATION	1.3640033958289656E-4	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999585376934379	WITHOUT_CLASSIFICATION	4.146230656216794E-5	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998441635563461	WITHOUT_CLASSIFICATION	1.5583644365400737E-4	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999998488002324	WITHOUT_CLASSIFICATION	1.5119976764574677E-7	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999773669684986	WITHOUT_CLASSIFICATION	2.263303150141762E-5	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999585376934379	WITHOUT_CLASSIFICATION	4.146230656216794E-5	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999789868412664	WITHOUT_CLASSIFICATION	2.101315873360052E-4	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9989884988400597	WITHOUT_CLASSIFICATION	0.0010115011599403142	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999704750152683	WITHOUT_CLASSIFICATION	2.9524984731756217E-5	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9999266403283709	WITHOUT_CLASSIFICATION	7.335967162914957E-5	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999911151142	WITHOUT_CLASSIFICATION	8.88488585386205E-9	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999694207845524	WITHOUT_CLASSIFICATION	3.057921544757536E-5	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9972186971827536	WITHOUT_CLASSIFICATION	0.0027813028172464574	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999409688610854	WITHOUT_CLASSIFICATION	5.903113891456236E-5	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999775941922522	WITHOUT_CLASSIFICATION	2.2405807747797312E-5	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999628813499186	WITHOUT_CLASSIFICATION	3.711865008141697E-5	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9997391123314607	WITHOUT_CLASSIFICATION	2.6088766853924676E-4	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999720547944182	WITHOUT_CLASSIFICATION	2.794520558179734E-5	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9997641280395062	WITHOUT_CLASSIFICATION	2.358719604937788E-4	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9994804942326444	WITHOUT_CLASSIFICATION	5.195057673555763E-4	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998307155330816	WITHOUT_CLASSIFICATION	1.6928446691841687E-4	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999636133047539	WITHOUT_CLASSIFICATION	3.638669524614294E-5	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999398880000621	WITHOUT_CLASSIFICATION	6.011199993788048E-5	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9962169234804527	WITHOUT_CLASSIFICATION	0.003783076519547398	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9962169234804527	WITHOUT_CLASSIFICATION	0.003783076519547398	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9972186971827536	WITHOUT_CLASSIFICATION	0.0027813028172464574	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9653978239221939	WITHOUT_CLASSIFICATION	0.034602176077806114	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999005771180255	WITHOUT_CLASSIFICATION	9.942288197451516E-5	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9997333802089042	WITHOUT_CLASSIFICATION	2.666197910958136E-4	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.9999487777839987	WITHOUT_CLASSIFICATION	5.122221600134361E-5	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999802795096674	WITHOUT_CLASSIFICATION	1.9720490332630324E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999815347379698	WITHOUT_CLASSIFICATION	1.846526203021279E-5	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999780101745183	WITHOUT_CLASSIFICATION	2.198982548177033E-5	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9994544508800971	WITHOUT_CLASSIFICATION	5.455491199029608E-4	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999096409111675	WITHOUT_CLASSIFICATION	9.035908883248794E-5	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999761960052581	WITHOUT_CLASSIFICATION	2.3803994741855214E-5	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999942182515434	WITHOUT_CLASSIFICATION	5.781748456548017E-6	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999429776880744	WITHOUT_CLASSIFICATION	5.702231192566483E-5	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9996694690563143	WITHOUT_CLASSIFICATION	3.305309436857611E-4	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.999997948859793	WITHOUT_CLASSIFICATION	2.0511402071158046E-6	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998824327234405	WITHOUT_CLASSIFICATION	1.1756727655946358E-4	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999955968216648	WITHOUT_CLASSIFICATION	4.403178335210061E-6	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999269745445	WITHOUT_CLASSIFICATION	7.302545541577239E-8	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999905348264433	WITHOUT_CLASSIFICATION	9.465173556759191E-6	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9998951297655	WITHOUT_CLASSIFICATION	1.0487023449998511E-4	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999254413027376	WITHOUT_CLASSIFICATION	7.45586972624616E-5	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9992253884702833	WITHOUT_CLASSIFICATION	7.746115297166037E-4	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999995536134877	WITHOUT_CLASSIFICATION	4.463865122952178E-6	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.99933666820298	WITHOUT_CLASSIFICATION	6.633317970200694E-4	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999965996369787	WITHOUT_CLASSIFICATION	3.4003630211584893E-6	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999909719669194	WITHOUT_CLASSIFICATION	9.028033080623467E-6	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999498679329313	WITHOUT_CLASSIFICATION	5.0132067068676554E-5	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999926671829522	WITHOUT_CLASSIFICATION	7.332817047864812E-6	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999695956856266	WITHOUT_CLASSIFICATION	3.0404314373341323E-5	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999819728854573	WITHOUT_CLASSIFICATION	1.8027114542686797E-5	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9998516252976047	WITHOUT_CLASSIFICATION	1.4837470239521556E-4	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998605040122691	WITHOUT_CLASSIFICATION	1.3949598773085303E-4	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9998824327234405	WITHOUT_CLASSIFICATION	1.1756727655946358E-4	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999827421047918	WITHOUT_CLASSIFICATION	1.7257895208301837E-5	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999994284715016	WITHOUT_CLASSIFICATION	5.715284983454885E-7	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999842451510955	WITHOUT_CLASSIFICATION	1.5754848904480214E-5	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9998992680982132	WITHOUT_CLASSIFICATION	1.0073190178677193E-4	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9987808514894463	WITHOUT_CLASSIFICATION	0.0012191485105536952	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999792700994963	WITHOUT_CLASSIFICATION	2.0729900503676524E-5	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.9999862624426735	WITHOUT_CLASSIFICATION	1.3737557326364354E-5	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999608188371348	WITHOUT_CLASSIFICATION	3.918116286515326E-5	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9962169927779047	WITHOUT_CLASSIFICATION	0.0037830072220952794	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9983442099192674	WITHOUT_CLASSIFICATION	0.001655790080732655	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.9999537669734319	WITHOUT_CLASSIFICATION	4.6233026568241675E-5	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999996699030932	WITHOUT_CLASSIFICATION	3.3009690682819787E-7	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.998945465117048	WITHOUT_CLASSIFICATION	0.0010545348829519702	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999880733227328	WITHOUT_CLASSIFICATION	1.1926677267187286E-5	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998605040122691	WITHOUT_CLASSIFICATION	1.3949598773085303E-4	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.999751635488791	WITHOUT_CLASSIFICATION	2.483645112090211E-4	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.979745932963717	WITHOUT_CLASSIFICATION	0.02025406703628304	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999996618809925	WITHOUT_CLASSIFICATION	3.3811900755490776E-7	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999963265506969	WITHOUT_CLASSIFICATION	3.6734493030003846E-6	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.997974812766628	WITHOUT_CLASSIFICATION	0.002025187233371947	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.999985020892021	WITHOUT_CLASSIFICATION	1.49791079789639E-5	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998441635563461	WITHOUT_CLASSIFICATION	1.5583644365400737E-4	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999974014429107	WITHOUT_CLASSIFICATION	2.5985570891810394E-6	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998824327234405	WITHOUT_CLASSIFICATION	1.1756727655946358E-4	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999585335298005	WITHOUT_CLASSIFICATION	4.146647019956033E-5	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999835872874103	WITHOUT_CLASSIFICATION	1.6412712589623696E-5	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999910537957327	WITHOUT_CLASSIFICATION	8.94620426720748E-6	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999910354219473	WITHOUT_CLASSIFICATION	8.964578052635532E-6	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999925045492925	WITHOUT_CLASSIFICATION	7.495450707495208E-5	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.999989524856624	WITHOUT_CLASSIFICATION	1.0475143376114296E-5	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9975781098204479	WITHOUT_CLASSIFICATION	0.0024218901795520793	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999742974796303	WITHOUT_CLASSIFICATION	2.5702520369773668E-5	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999468925898619	WITHOUT_CLASSIFICATION	5.310741013822288E-5	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999802967656096	WITHOUT_CLASSIFICATION	1.9703234390479215E-5	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9959233138536752	WITHOUT_CLASSIFICATION	0.00407668614632477	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999354724091353	WITHOUT_CLASSIFICATION	6.452759086464367E-5	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9830190101287216	WITHOUT_CLASSIFICATION	0.01698098987127836	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9830190101287216	WITHOUT_CLASSIFICATION	0.01698098987127836	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999997452214838	WITHOUT_CLASSIFICATION	2.547785162243019E-7	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9873052400050779	WITHOUT_CLASSIFICATION	0.012694759994922063	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9870138418562842	WITHOUT_CLASSIFICATION	0.012986158143715763	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999980552366241	WITHOUT_CLASSIFICATION	1.9447633760177137E-6	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999988186855273	WITHOUT_CLASSIFICATION	1.1813144726735682E-6	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999240124753151	WITHOUT_CLASSIFICATION	7.598752468492256E-5	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999982235261681	WITHOUT_CLASSIFICATION	1.7764738319558594E-6	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999970550369494	WITHOUT_CLASSIFICATION	2.944963050612401E-6	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999817124899845	WITHOUT_CLASSIFICATION	1.8287510015629887E-5	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.9997863625723378	WITHOUT_CLASSIFICATION	2.1363742766213124E-4	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.9997863625723378	WITHOUT_CLASSIFICATION	2.1363742766213124E-4	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9995569521299734	WITHOUT_CLASSIFICATION	4.430478700265659E-4	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999990881021951	WITHOUT_CLASSIFICATION	9.118978048195834E-7	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9997322258142064	WITHOUT_CLASSIFICATION	2.677741857935295E-4	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999992119796889	WITHOUT_CLASSIFICATION	7.880203111569444E-7	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9997297487067616	WITHOUT_CLASSIFICATION	2.702512932383391E-4	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998563144471752	WITHOUT_CLASSIFICATION	1.4368555282487158E-4	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999989409826482	WITHOUT_CLASSIFICATION	1.0590173518415288E-6	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999595976623397	WITHOUT_CLASSIFICATION	4.040233766042189E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998702385416095	WITHOUT_CLASSIFICATION	1.2976145839049014E-4	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999987620702668	WITHOUT_CLASSIFICATION	1.2379297331094644E-6	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999908972306019	WITHOUT_CLASSIFICATION	9.102769398120614E-6	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999944297866722	WITHOUT_CLASSIFICATION	5.57021332783473E-6	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999755785880962	WITHOUT_CLASSIFICATION	2.4421411903838256E-5	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.9999370490406821	WITHOUT_CLASSIFICATION	6.295095931789967E-5	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999724254317907	WITHOUT_CLASSIFICATION	2.7574568209295746E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998702385416095	WITHOUT_CLASSIFICATION	1.2976145839049014E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998702385416095	WITHOUT_CLASSIFICATION	1.2976145839049014E-4	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999887717338225	WITHOUT_CLASSIFICATION	1.1228266177444325E-5	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999487544853725	WITHOUT_CLASSIFICATION	5.1245514627652235E-5	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999543945206786	WITHOUT_CLASSIFICATION	4.5605479321498265E-5	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999985774179283	WITHOUT_CLASSIFICATION	1.422582071691986E-5	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999907443690934	WITHOUT_CLASSIFICATION	9.255630906555012E-6	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999621992456846	WITHOUT_CLASSIFICATION	3.7800754315432745E-5	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999517773888905	WITHOUT_CLASSIFICATION	4.8222611109414036E-5	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999649670713894	WITHOUT_CLASSIFICATION	3.503292861065768E-5	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9998652454636999	WITHOUT_CLASSIFICATION	1.3475453629999687E-4	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999989549166262	WITHOUT_CLASSIFICATION	1.0450833739183253E-6	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999787950533432	WITHOUT_CLASSIFICATION	2.1204946656857808E-5	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9997596965400333	WITHOUT_CLASSIFICATION	2.4030345996664624E-4	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.999922123975602	WITHOUT_CLASSIFICATION	7.787602439795017E-5	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997293917014908	WITHOUT_CLASSIFICATION	2.706082985092117E-4	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978287763868801	WITHOUT_CLASSIFICATION	0.0021712236131198686	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.99999054801637	WITHOUT_CLASSIFICATION	9.451983630021723E-6	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999352495281822	WITHOUT_CLASSIFICATION	6.475047181772385E-5	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998327554887529	WITHOUT_CLASSIFICATION	1.672445112469693E-4	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997501750396928	WITHOUT_CLASSIFICATION	0.0024982496030719454	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.5516928285888656	WITHOUT_CLASSIFICATION	0.44830717141113446	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999875425910181	WITHOUT_CLASSIFICATION	1.245740898188817E-5	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999994057288321	WITHOUT_CLASSIFICATION	5.942711678682223E-7	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999359643302669	WITHOUT_CLASSIFICATION	6.403566973309882E-5	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976804617977761	WITHOUT_CLASSIFICATION	0.0023195382022238443	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999949240670617	WITHOUT_CLASSIFICATION	5.0759329383078904E-5	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999837734679825	WITHOUT_CLASSIFICATION	1.6226532017553222E-5	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999439391385306	WITHOUT_CLASSIFICATION	5.606086146941311E-5	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999541903325733	WITHOUT_CLASSIFICATION	4.5809667426786095E-5	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999861592987247	WITHOUT_CLASSIFICATION	1.3840701275355365E-5	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999168023477052	WITHOUT_CLASSIFICATION	8.319765229483046E-5	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.9994870645578531	WITHOUT_CLASSIFICATION	5.129354421468345E-4	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.999927318578417	WITHOUT_CLASSIFICATION	7.268142158303173E-5	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999660759378188	WITHOUT_CLASSIFICATION	3.392406218113872E-5	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9997080973045247	WITHOUT_CLASSIFICATION	2.919026954752384E-4	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999994952148976	WITHOUT_CLASSIFICATION	5.047851022764674E-7	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999824047794718	WITHOUT_CLASSIFICATION	1.7595220528307492E-5	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9998614376995847	WITHOUT_CLASSIFICATION	1.3856230041538862E-4	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999980262025466	WITHOUT_CLASSIFICATION	1.9737974534833492E-6	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.999988638431101	WITHOUT_CLASSIFICATION	1.136156889909887E-5	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999819150266577	WITHOUT_CLASSIFICATION	1.8084973342329236E-5	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999934568267831	WITHOUT_CLASSIFICATION	6.543173216939446E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9996240001286276	WITHOUT_CLASSIFICATION	3.759998713723426E-4	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9994791629551429	WITHOUT_CLASSIFICATION	5.208370448569584E-4	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9996240001286276	WITHOUT_CLASSIFICATION	3.759998713723426E-4	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999898420053307	WITHOUT_CLASSIFICATION	1.0157994669194894E-5	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9998853057037012	WITHOUT_CLASSIFICATION	1.146942962988286E-4	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9981662299510133	WITHOUT_CLASSIFICATION	0.0018337700489866084	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999925789564021	WITHOUT_CLASSIFICATION	7.421043597899047E-5	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999228205902215	WITHOUT_CLASSIFICATION	7.717940977845242E-5	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9981662299510133	WITHOUT_CLASSIFICATION	0.0018337700489866084	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999875040959059	WITHOUT_CLASSIFICATION	1.2495904094029432E-5	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998278192870003	WITHOUT_CLASSIFICATION	1.721807129997182E-4	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999474829955417	WITHOUT_CLASSIFICATION	5.25170044583415E-5	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999739164157121	WITHOUT_CLASSIFICATION	2.608358428789321E-4	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999536765701736	WITHOUT_CLASSIFICATION	4.632342982635031E-5	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999940226783778	WITHOUT_CLASSIFICATION	5.977321622233969E-6	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999834676561787	WITHOUT_CLASSIFICATION	1.6532343821280125E-5	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.6088025983351595	WITHOUT_CLASSIFICATION	0.3911974016648405	IMPLEMENTATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9996996934133697	WITHOUT_CLASSIFICATION	3.003065866303038E-4	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999749378159601	WITHOUT_CLASSIFICATION	2.5062184039813308E-5	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999671308536151	WITHOUT_CLASSIFICATION	3.286914638490211E-5	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999630200304861	WITHOUT_CLASSIFICATION	3.697996951395171E-5	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999995602047944	WITHOUT_CLASSIFICATION	4.39795205648213E-7	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999497011231202	WITHOUT_CLASSIFICATION	5.02988768799238E-5	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999998274982274	WITHOUT_CLASSIFICATION	1.7250177256160083E-7	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9997719097332719	WITHOUT_CLASSIFICATION	2.2809026672809823E-4	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999717718149721	WITHOUT_CLASSIFICATION	2.8228185027895655E-5	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998988883008307	WITHOUT_CLASSIFICATION	1.0111169916932485E-4	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997626000874305	WITHOUT_CLASSIFICATION	2.3739991256948039E-4	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999998143540418	WITHOUT_CLASSIFICATION	1.8564595808903084E-7	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999847655978389	WITHOUT_CLASSIFICATION	1.5234402161142643E-5	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.9999468310294455	WITHOUT_CLASSIFICATION	5.316897055462119E-5	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998021379135889	WITHOUT_CLASSIFICATION	1.9786208641103518E-4	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9945118902196286	WITHOUT_CLASSIFICATION	0.005488109780371314	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.9999550191719695	WITHOUT_CLASSIFICATION	4.498082803051663E-5	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999180790839326	WITHOUT_CLASSIFICATION	8.192091606748454E-5	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999995395386	WITHOUT_CLASSIFICATION	4.604614830222646E-10	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9996723495141271	WITHOUT_CLASSIFICATION	3.2765048587289115E-4	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.9999722189755774	WITHOUT_CLASSIFICATION	2.7781024422501555E-5	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9999581222016887	WITHOUT_CLASSIFICATION	4.187779831126588E-5	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998021379135889	WITHOUT_CLASSIFICATION	1.9786208641103518E-4	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998002330734531	WITHOUT_CLASSIFICATION	1.9976692654680153E-4	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.999985150439654	WITHOUT_CLASSIFICATION	1.4849560345976697E-5	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.9998348880990846	WITHOUT_CLASSIFICATION	1.6511190091542487E-4	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9907673337957256	WITHOUT_CLASSIFICATION	0.009232666204274381	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999998143540418	WITHOUT_CLASSIFICATION	1.8564595808903084E-7	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999972778240652	WITHOUT_CLASSIFICATION	2.722175934840164E-6	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999830111024817	WITHOUT_CLASSIFICATION	1.698889751833959E-5	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999579843559473	WITHOUT_CLASSIFICATION	4.2015644052732895E-5	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.9999039546666476	WITHOUT_CLASSIFICATION	9.604533335233318E-5	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999976728944692	WITHOUT_CLASSIFICATION	2.327105530854222E-6	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999994874598435	WITHOUT_CLASSIFICATION	5.125401564573416E-7	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.999988117144192	WITHOUT_CLASSIFICATION	1.1882855808018862E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997625674645224	WITHOUT_CLASSIFICATION	2.3743253547766827E-4	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999472786008833	WITHOUT_CLASSIFICATION	5.272139911682576E-5	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.999814835281071	WITHOUT_CLASSIFICATION	1.8516471892911777E-4	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999943258528768	WITHOUT_CLASSIFICATION	5.674147123099347E-6	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999321778646657	WITHOUT_CLASSIFICATION	6.782213533438099E-5	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999321778646657	WITHOUT_CLASSIFICATION	6.782213533438099E-5	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999932116311256	WITHOUT_CLASSIFICATION	6.788368874463268E-6	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999984429563926	WITHOUT_CLASSIFICATION	1.557043607401198E-5	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999211421786098	WITHOUT_CLASSIFICATION	7.885782139024833E-5	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999583511986175	WITHOUT_CLASSIFICATION	4.164880138244252E-5	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.999993429285697	WITHOUT_CLASSIFICATION	6.570714302970857E-6	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.97864192719737	WITHOUT_CLASSIFICATION	0.021358072802630065	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9996461391066714	WITHOUT_CLASSIFICATION	3.538608933285641E-4	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9996065563478534	WITHOUT_CLASSIFICATION	3.934436521465572E-4	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999911298420264	WITHOUT_CLASSIFICATION	8.870157973627206E-6	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9974728531208046	WITHOUT_CLASSIFICATION	0.002527146879195393	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9974728531208046	WITHOUT_CLASSIFICATION	0.002527146879195393	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999784234747224	WITHOUT_CLASSIFICATION	2.1576525277583536E-5	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9974728531208046	WITHOUT_CLASSIFICATION	0.002527146879195393	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9974728531208046	WITHOUT_CLASSIFICATION	0.002527146879195393	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9977338089093731	WITHOUT_CLASSIFICATION	0.002266191090626949	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9997251765261242	WITHOUT_CLASSIFICATION	2.748234738756878E-4	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998600278080219	WITHOUT_CLASSIFICATION	1.399721919782321E-4	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998600278080219	WITHOUT_CLASSIFICATION	1.399721919782321E-4	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999141622557411	WITHOUT_CLASSIFICATION	8.583774425889063E-5	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9997063501062708	WITHOUT_CLASSIFICATION	2.936498937291153E-4	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9998113661196849	WITHOUT_CLASSIFICATION	1.8863388031514818E-4	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999997943912646	WITHOUT_CLASSIFICATION	2.0560873531955492E-7	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999311271390637	WITHOUT_CLASSIFICATION	6.88728609362457E-5	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.9998422959857239	WITHOUT_CLASSIFICATION	1.5770401427614403E-4	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9997927673183227	WITHOUT_CLASSIFICATION	2.072326816773049E-4	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999763416122959	WITHOUT_CLASSIFICATION	2.365838770411127E-5	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.999915485318644	WITHOUT_CLASSIFICATION	8.451468135599066E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999921376790584	WITHOUT_CLASSIFICATION	7.862320941522707E-6	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999066017503395	WITHOUT_CLASSIFICATION	9.33982496605313E-5	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.999944814122818	WITHOUT_CLASSIFICATION	5.518587718205109E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999874088396732	WITHOUT_CLASSIFICATION	1.2591160326724688E-5	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999810533911588	WITHOUT_CLASSIFICATION	1.894660884123019E-5	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999173955814863	WITHOUT_CLASSIFICATION	8.260441851369821E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9998636509802039	WITHOUT_CLASSIFICATION	1.3634901979605525E-4	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9998303328057978	WITHOUT_CLASSIFICATION	1.6966719420224624E-4	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.9999177311699552	WITHOUT_CLASSIFICATION	8.226883004473907E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999874088396732	WITHOUT_CLASSIFICATION	1.2591160326724688E-5	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999847655978389	WITHOUT_CLASSIFICATION	1.5234402161142643E-5	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.9998800309019868	WITHOUT_CLASSIFICATION	1.1996909801311858E-4	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999390732598621	WITHOUT_CLASSIFICATION	6.092674013776326E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999801059697115	WITHOUT_CLASSIFICATION	1.9894030288507153E-4	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.9994484163382742	WITHOUT_CLASSIFICATION	5.51583661725759E-4	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999644375162181	WITHOUT_CLASSIFICATION	3.556248378198367E-5	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.9994811307084368	WITHOUT_CLASSIFICATION	5.188692915632095E-4	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999729505435176	WITHOUT_CLASSIFICATION	2.7049456482340756E-5	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999677178742609	WITHOUT_CLASSIFICATION	3.228212573916305E-5	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999969425169198	WITHOUT_CLASSIFICATION	3.0574830801417374E-6	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999834750610057	WITHOUT_CLASSIFICATION	1.6524938994265216E-5	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999810807414045	WITHOUT_CLASSIFICATION	1.8919258595517954E-5	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999722904086479	WITHOUT_CLASSIFICATION	2.77095913521004E-4	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9997260246510608	WITHOUT_CLASSIFICATION	2.7397534893925995E-4	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9897837494083207	WITHOUT_CLASSIFICATION	0.010216250591679318	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999845174376231	WITHOUT_CLASSIFICATION	1.548256237692197E-5	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.999705964033599	WITHOUT_CLASSIFICATION	2.9403596640100734E-4	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9996214251990487	WITHOUT_CLASSIFICATION	3.785748009512389E-4	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999790328610627	WITHOUT_CLASSIFICATION	2.0967138937277655E-5	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999794156620683	WITHOUT_CLASSIFICATION	2.058433793169636E-4	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999841971739757	WITHOUT_CLASSIFICATION	1.580282602436111E-5	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.9993783981683477	WITHOUT_CLASSIFICATION	6.216018316523149E-4	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999939627413219	WITHOUT_CLASSIFICATION	6.037258678093954E-6	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999677178742609	WITHOUT_CLASSIFICATION	3.228212573916305E-5	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.9998729441651467	WITHOUT_CLASSIFICATION	1.270558348533052E-4	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.9998791231000547	WITHOUT_CLASSIFICATION	1.2087689994536892E-4	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9985153901072511	WITHOUT_CLASSIFICATION	0.0014846098927489995	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999695292523615	WITHOUT_CLASSIFICATION	3.0470747638482148E-5	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998605040122691	WITHOUT_CLASSIFICATION	1.3949598773085303E-4	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.9999098774684929	WITHOUT_CLASSIFICATION	9.012253150709676E-5	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.9998688354254696	WITHOUT_CLASSIFICATION	1.3116457453053E-4	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.9990029606209427	WITHOUT_CLASSIFICATION	9.970393790572662E-4	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.9998685234812061	WITHOUT_CLASSIFICATION	1.3147651879385157E-4	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.9997477341596478	WITHOUT_CLASSIFICATION	2.52265840352144E-4	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999516181001344	WITHOUT_CLASSIFICATION	4.838189986566036E-5	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999284239371458	WITHOUT_CLASSIFICATION	7.157606285417057E-5	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999981617677237	WITHOUT_CLASSIFICATION	1.838232276315399E-6	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.999983628947673	WITHOUT_CLASSIFICATION	1.6371052326992216E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999791700139081	WITHOUT_CLASSIFICATION	2.0829986091912792E-5	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999758654692986	WITHOUT_CLASSIFICATION	2.4134530701380566E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999847072050775	WITHOUT_CLASSIFICATION	1.5292794922567782E-5	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999516181001344	WITHOUT_CLASSIFICATION	4.838189986566036E-5	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999894612808499	WITHOUT_CLASSIFICATION	1.0538719150161852E-5	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999712042272327	WITHOUT_CLASSIFICATION	2.8795772767186543E-5	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999252529479259	WITHOUT_CLASSIFICATION	7.474705207408863E-5	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999976871822451	WITHOUT_CLASSIFICATION	2.3128177549009745E-5	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.9999435754380704	WITHOUT_CLASSIFICATION	5.6424561929514144E-5	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9997316494757814	WITHOUT_CLASSIFICATION	2.6835052421850605E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999791700139081	WITHOUT_CLASSIFICATION	2.0829986091912792E-5	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999370700846761	WITHOUT_CLASSIFICATION	6.292991532382451E-5	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999020353360734	WITHOUT_CLASSIFICATION	9.796466392666192E-5	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998918371999795	WITHOUT_CLASSIFICATION	1.081628000205012E-4	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992131616434861	WITHOUT_CLASSIFICATION	7.868383565140628E-4	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992131616434861	WITHOUT_CLASSIFICATION	7.868383565140628E-4	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992131616434861	WITHOUT_CLASSIFICATION	7.868383565140628E-4	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999862620002836	WITHOUT_CLASSIFICATION	1.3737999716308948E-5	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999862620002836	WITHOUT_CLASSIFICATION	1.3737999716308948E-5	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999980489848984	WITHOUT_CLASSIFICATION	1.9510151017125276E-6	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999949806428227	WITHOUT_CLASSIFICATION	5.0193571773258E-6	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.9999200851656528	WITHOUT_CLASSIFICATION	7.991483434726223E-5	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.9998999402695216	WITHOUT_CLASSIFICATION	1.0005973047846149E-4	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9964965045791727	WITHOUT_CLASSIFICATION	0.0035034954208272326	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998595679149819	WITHOUT_CLASSIFICATION	1.404320850181784E-4	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999115708134985	WITHOUT_CLASSIFICATION	8.842918650148971E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998605040122691	WITHOUT_CLASSIFICATION	1.3949598773085303E-4	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999967117157952	WITHOUT_CLASSIFICATION	3.288284204884778E-6	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999211229381756	WITHOUT_CLASSIFICATION	7.887706182437988E-5	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998595679149819	WITHOUT_CLASSIFICATION	1.404320850181784E-4	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999115708134985	WITHOUT_CLASSIFICATION	8.842918650148971E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998605040122691	WITHOUT_CLASSIFICATION	1.3949598773085303E-4	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999983615162716	WITHOUT_CLASSIFICATION	1.6384837283145873E-6	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999688146363279	WITHOUT_CLASSIFICATION	3.118536367208219E-5	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999957716011806	WITHOUT_CLASSIFICATION	4.228398819368642E-6	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999993564739796	WITHOUT_CLASSIFICATION	6.435260204111572E-7	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999543434556352	WITHOUT_CLASSIFICATION	4.5656544364751895E-5	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.9999854631190952	WITHOUT_CLASSIFICATION	1.4536880904822048E-5	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9999371628644959	WITHOUT_CLASSIFICATION	6.283713550413315E-5	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999321778646657	WITHOUT_CLASSIFICATION	6.782213533438099E-5	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999232480175922	WITHOUT_CLASSIFICATION	7.675198240774497E-5	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999806213632241	WITHOUT_CLASSIFICATION	1.9378636775815006E-5	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9998112818956265	WITHOUT_CLASSIFICATION	1.8871810437343415E-4	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999772253968413	WITHOUT_CLASSIFICATION	2.2774603158653698E-5	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999842659392782	WITHOUT_CLASSIFICATION	1.573406072180555E-5	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999703256402344	WITHOUT_CLASSIFICATION	2.967435976559713E-5	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999968617935335	WITHOUT_CLASSIFICATION	3.1382064663754823E-6	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999067529348493	WITHOUT_CLASSIFICATION	9.32470651506523E-5	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999707783702755	WITHOUT_CLASSIFICATION	2.9221629724604012E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998454795409347	WITHOUT_CLASSIFICATION	1.5452045906532447E-4	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999882105413039	WITHOUT_CLASSIFICATION	1.1789458696032827E-5	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999948876356162	WITHOUT_CLASSIFICATION	5.112364383759744E-6	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9960100954777299	WITHOUT_CLASSIFICATION	0.003989904522270136	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999339494097034	WITHOUT_CLASSIFICATION	6.605059029661875E-5	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999944963848341	WITHOUT_CLASSIFICATION	5.503615165984357E-6	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9937871613650715	WITHOUT_CLASSIFICATION	0.006212838634928518	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999862362440422	WITHOUT_CLASSIFICATION	1.3763755957798797E-4	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999990835226196	WITHOUT_CLASSIFICATION	9.164773804341186E-7	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998879637559497	WITHOUT_CLASSIFICATION	1.1203624405029402E-4	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998242807805069	WITHOUT_CLASSIFICATION	1.757192194930873E-4	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998849891646389	WITHOUT_CLASSIFICATION	1.1501083536118318E-4	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998849891646389	WITHOUT_CLASSIFICATION	1.1501083536118318E-4	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999597242621406	WITHOUT_CLASSIFICATION	4.0275737859412983E-5	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.999901700739682	WITHOUT_CLASSIFICATION	9.829926031812143E-5	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9962117857430371	WITHOUT_CLASSIFICATION	0.0037882142569628137	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999755429622705	WITHOUT_CLASSIFICATION	2.445703772948005E-5	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9988372765702674	WITHOUT_CLASSIFICATION	0.0011627234297325573	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999976872126672	WITHOUT_CLASSIFICATION	2.312787332756463E-6	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.9999727709798376	WITHOUT_CLASSIFICATION	2.7229020162350444E-5	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.9999366316941057	WITHOUT_CLASSIFICATION	6.336830589427627E-5	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9994580302628624	WITHOUT_CLASSIFICATION	5.419697371376854E-4	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999663229083556	WITHOUT_CLASSIFICATION	3.3677091644401536E-4	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999663229083556	WITHOUT_CLASSIFICATION	3.3677091644401536E-4	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999663229083556	WITHOUT_CLASSIFICATION	3.3677091644401536E-4	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999663229083556	WITHOUT_CLASSIFICATION	3.3677091644401536E-4	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999663229083556	WITHOUT_CLASSIFICATION	3.3677091644401536E-4	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999663229083556	WITHOUT_CLASSIFICATION	3.3677091644401536E-4	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999663229083556	WITHOUT_CLASSIFICATION	3.3677091644401536E-4	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999663229083556	WITHOUT_CLASSIFICATION	3.3677091644401536E-4	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999663229083556	WITHOUT_CLASSIFICATION	3.3677091644401536E-4	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999663229083556	WITHOUT_CLASSIFICATION	3.3677091644401536E-4	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999663229083556	WITHOUT_CLASSIFICATION	3.3677091644401536E-4	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9950464624510901	WITHOUT_CLASSIFICATION	0.004953537548909905	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999374179864883	WITHOUT_CLASSIFICATION	6.258201351176533E-5	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999698198551663	WITHOUT_CLASSIFICATION	3.0180144833750586E-5	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999966491737695	WITHOUT_CLASSIFICATION	3.3508262305758022E-6	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999996970031911	WITHOUT_CLASSIFICATION	3.02996808915825E-7	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.9983813647232148	WITHOUT_CLASSIFICATION	0.0016186352767851451	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999586874473677	WITHOUT_CLASSIFICATION	4.1312552632364695E-5	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9997837888551555	WITHOUT_CLASSIFICATION	2.162111448444118E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999698198551663	WITHOUT_CLASSIFICATION	3.0180144833750586E-5	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999698198551663	WITHOUT_CLASSIFICATION	3.0180144833750586E-5	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999994581471668	WITHOUT_CLASSIFICATION	5.418528330959902E-7	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999798486876601	WITHOUT_CLASSIFICATION	2.0151312339913916E-5	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9996246019228228	WITHOUT_CLASSIFICATION	3.7539807717733417E-4	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999910225217316	WITHOUT_CLASSIFICATION	8.977478268477045E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999126195766176	WITHOUT_CLASSIFICATION	8.738042338236182E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998454795409347	WITHOUT_CLASSIFICATION	1.5452045906532447E-4	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9998073377076216	WITHOUT_CLASSIFICATION	1.9266229237835942E-4	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999590112051112	WITHOUT_CLASSIFICATION	4.098879488883626E-5	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999452159223401	WITHOUT_CLASSIFICATION	5.478407765987053E-5	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999419300626168	WITHOUT_CLASSIFICATION	5.806993738319318E-4	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999986650836742	WITHOUT_CLASSIFICATION	1.3349163258213964E-6	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999080636986638	WITHOUT_CLASSIFICATION	9.193630133620728E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999373063163304	WITHOUT_CLASSIFICATION	6.26936836696551E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999373063163304	WITHOUT_CLASSIFICATION	6.26936836696551E-5	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999373063163304	WITHOUT_CLASSIFICATION	6.26936836696551E-5	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999373063163304	WITHOUT_CLASSIFICATION	6.26936836696551E-5	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998605040122691	WITHOUT_CLASSIFICATION	1.3949598773085303E-4	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998850311730879	WITHOUT_CLASSIFICATION	1.1496882691214697E-4	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999730364594516	WITHOUT_CLASSIFICATION	2.6963540548424583E-5	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998605040122691	WITHOUT_CLASSIFICATION	1.3949598773085303E-4	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9977858656837777	WITHOUT_CLASSIFICATION	0.002214134316222277	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999889629236788	WITHOUT_CLASSIFICATION	1.1037076321340096E-5	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998679458969273	WITHOUT_CLASSIFICATION	1.3205410307272803E-4	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998318618432845	WITHOUT_CLASSIFICATION	1.6813815671547463E-4	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999042858959759	WITHOUT_CLASSIFICATION	9.571410402406047E-5	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9999851622255402	WITHOUT_CLASSIFICATION	1.4837774459813861E-5	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999994670610038	WITHOUT_CLASSIFICATION	5.329389962071551E-7	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999086290385267	WITHOUT_CLASSIFICATION	9.137096147324064E-5	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9998927325155862	WITHOUT_CLASSIFICATION	1.0726748441385014E-4	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9997449713132911	WITHOUT_CLASSIFICATION	2.5502868670889957E-4	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9998374797667368	WITHOUT_CLASSIFICATION	1.6252023326314828E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.999561504409926	WITHOUT_CLASSIFICATION	4.384955900740886E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.999561504409926	WITHOUT_CLASSIFICATION	4.384955900740886E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.999561504409926	WITHOUT_CLASSIFICATION	4.384955900740886E-4	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999676025390779	WITHOUT_CLASSIFICATION	3.239746092206578E-5	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.9999921520957062	WITHOUT_CLASSIFICATION	7.8479042936639E-6	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999998795415244	WITHOUT_CLASSIFICATION	1.2045847562594605E-7	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998645490392795	WITHOUT_CLASSIFICATION	1.3545096072055946E-4	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998645490392795	WITHOUT_CLASSIFICATION	1.3545096072055946E-4	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999843200318719	WITHOUT_CLASSIFICATION	1.567996812803546E-5	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992131616434861	WITHOUT_CLASSIFICATION	7.868383565140628E-4	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9985114945994564	WITHOUT_CLASSIFICATION	0.001488505400543627	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999860059486857	WITHOUT_CLASSIFICATION	1.3994051314412775E-5	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999372106379582	WITHOUT_CLASSIFICATION	6.278936204181886E-5	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9997625381999649	WITHOUT_CLASSIFICATION	2.3746180003517622E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998594985306359	WITHOUT_CLASSIFICATION	1.4050146936413983E-4	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999971898631373	WITHOUT_CLASSIFICATION	2.8101368627396513E-6	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998025165809938	WITHOUT_CLASSIFICATION	1.9748341900628386E-4	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.999950738974327	WITHOUT_CLASSIFICATION	4.926102567302126E-5	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999599989502044	WITHOUT_CLASSIFICATION	4.000104979563031E-5	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.999950395607705	WITHOUT_CLASSIFICATION	4.960439229500264E-5	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999712482035819	WITHOUT_CLASSIFICATION	2.8751796418150927E-5	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999678991610951	WITHOUT_CLASSIFICATION	3.21008389048852E-5	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999805986346	WITHOUT_CLASSIFICATION	1.940136542250467E-8	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999999480534942	WITHOUT_CLASSIFICATION	5.194650580349732E-7	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998853932639	WITHOUT_CLASSIFICATION	1.146067360025285E-7	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999990559864904	WITHOUT_CLASSIFICATION	9.440135095017019E-7	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9998460029532964	WITHOUT_CLASSIFICATION	1.5399704670355472E-4	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9998862662036205	WITHOUT_CLASSIFICATION	1.1373379637951641E-4	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999991419337109	WITHOUT_CLASSIFICATION	8.580662890706667E-7	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.9998610968625679	WITHOUT_CLASSIFICATION	1.3890313743211596E-4	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999558194734	WITHOUT_CLASSIFICATION	4.418052660819845E-8	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999908317938125	WITHOUT_CLASSIFICATION	9.168206187397077E-6	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999977943166267	WITHOUT_CLASSIFICATION	2.2056833732519894E-6	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999337896491214	WITHOUT_CLASSIFICATION	6.621035087866643E-5	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999757013872893	WITHOUT_CLASSIFICATION	2.4298612710725032E-5	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9755577110167627	WITHOUT_CLASSIFICATION	0.02444228898323736	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999321778646657	WITHOUT_CLASSIFICATION	6.782213533438099E-5	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9997618169108173	WITHOUT_CLASSIFICATION	2.381830891825905E-4	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9805036877553355	WITHOUT_CLASSIFICATION	0.01949631224466454	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.999658379201517	WITHOUT_CLASSIFICATION	3.41620798483084E-4	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9998101944826192	WITHOUT_CLASSIFICATION	1.8980551738071436E-4	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.9999053133169187	WITHOUT_CLASSIFICATION	9.468668308130221E-5	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999963192538969	WITHOUT_CLASSIFICATION	3.680746103188811E-6	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999271650240925	WITHOUT_CLASSIFICATION	7.283497590747647E-5	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9955855561822616	WITHOUT_CLASSIFICATION	0.0044144438177383455	IMPLEMENTATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999920736931208	WITHOUT_CLASSIFICATION	7.92630687918777E-6	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999998855802394	WITHOUT_CLASSIFICATION	1.1441976057914622E-7	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999393872794916	WITHOUT_CLASSIFICATION	6.06127205085227E-5	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.9999884946087297	WITHOUT_CLASSIFICATION	1.1505391270306991E-5	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999905526498883	WITHOUT_CLASSIFICATION	9.447350111625814E-6	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999391499567244	WITHOUT_CLASSIFICATION	6.085004327556023E-5	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.999997842394951	WITHOUT_CLASSIFICATION	2.1576050490194876E-6	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999941392107664	WITHOUT_CLASSIFICATION	5.860789233549063E-6	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9996307308708017	WITHOUT_CLASSIFICATION	3.692691291982583E-4	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9996550973222506	WITHOUT_CLASSIFICATION	3.4490267774940506E-4	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998315344611518	WITHOUT_CLASSIFICATION	1.6846553884815917E-4	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9984368700912937	WITHOUT_CLASSIFICATION	0.001563129908706316	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.9999374267277175	WITHOUT_CLASSIFICATION	6.257327228251457E-5	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9993941006703992	WITHOUT_CLASSIFICATION	6.058993296007648E-4	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.9999798301026861	WITHOUT_CLASSIFICATION	2.0169897313894757E-5	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999807360036445	WITHOUT_CLASSIFICATION	1.9263996355603476E-5	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9981948310916696	WITHOUT_CLASSIFICATION	0.0018051689083303714	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999869810801941	WITHOUT_CLASSIFICATION	1.3018919805806368E-5	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999976480485196	WITHOUT_CLASSIFICATION	2.3519514803508896E-6	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999193945662	WITHOUT_CLASSIFICATION	8.060543383315256E-8	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999279230240614	WITHOUT_CLASSIFICATION	7.207697593866012E-5	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999766644814901	WITHOUT_CLASSIFICATION	2.3335518509814324E-5	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999989558731571	WITHOUT_CLASSIFICATION	1.044126842840273E-6	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999995987698422	WITHOUT_CLASSIFICATION	4.012301576803861E-7	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9998792442940472	WITHOUT_CLASSIFICATION	1.2075570595285344E-4	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9731637994958008	WITHOUT_CLASSIFICATION	0.026836200504199187	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9997351614534831	WITHOUT_CLASSIFICATION	2.648385465169398E-4	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999952251609016	WITHOUT_CLASSIFICATION	4.774839098401513E-6	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999179241420469	WITHOUT_CLASSIFICATION	8.207585795302879E-5	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999134693122957	WITHOUT_CLASSIFICATION	8.653068770434674E-5	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9998402027327766	WITHOUT_CLASSIFICATION	1.5979726722326618E-4	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999975008548128	WITHOUT_CLASSIFICATION	2.499145187357476E-6	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999552831261794	WITHOUT_CLASSIFICATION	4.471687382060768E-5	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999842803855641	WITHOUT_CLASSIFICATION	1.5719614435907494E-5	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9995438769349485	WITHOUT_CLASSIFICATION	4.5612306505156365E-4	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999627513411052	WITHOUT_CLASSIFICATION	3.72486588946881E-5	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.9998218773568484	WITHOUT_CLASSIFICATION	1.7812264315154863E-4	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999745502680403	WITHOUT_CLASSIFICATION	2.5449731959707733E-4	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9997933929615415	WITHOUT_CLASSIFICATION	2.0660703845849356E-4	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.8543955914044152	IMPLEMENTATION	0.14560440859558477	WITHOUT_CLASSIFICATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9998619836411953	WITHOUT_CLASSIFICATION	1.3801635880464675E-4	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9742603901629343	WITHOUT_CLASSIFICATION	0.02573960983706564	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.6517959506043128	IMPLEMENTATION	0.3482040493956872	WITHOUT_CLASSIFICATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9994761311806353	WITHOUT_CLASSIFICATION	5.238688193648039E-4	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9999063162106455	WITHOUT_CLASSIFICATION	9.368378935446182E-5	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999647903868941	WITHOUT_CLASSIFICATION	3.5209613105918724E-5	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9994560389314233	WITHOUT_CLASSIFICATION	5.439610685767131E-4	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.999717135238441	WITHOUT_CLASSIFICATION	2.828647615590365E-4	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9989790427795141	WITHOUT_CLASSIFICATION	0.0010209572204858395	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.9999688181434327	WITHOUT_CLASSIFICATION	3.118185656731722E-5	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9998779673249154	WITHOUT_CLASSIFICATION	1.220326750846288E-4	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999781120518201	WITHOUT_CLASSIFICATION	2.1887948179907195E-5	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999958201595983	WITHOUT_CLASSIFICATION	4.179840401728068E-6	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.998979696656121	WITHOUT_CLASSIFICATION	0.0010203033438791046	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999878882375919	WITHOUT_CLASSIFICATION	1.2111762408075315E-5	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999096929759823	WITHOUT_CLASSIFICATION	9.030702401765738E-5	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.9999817669957805	WITHOUT_CLASSIFICATION	1.8233004219593604E-5	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.9999276115411047	WITHOUT_CLASSIFICATION	7.238845889542906E-5	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996650237538871	WITHOUT_CLASSIFICATION	3.349762461129078E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996650237538871	WITHOUT_CLASSIFICATION	3.349762461129078E-4	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999912749742426	WITHOUT_CLASSIFICATION	8.725025757381701E-6	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9988900641099784	WITHOUT_CLASSIFICATION	0.0011099358900215936	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999321958174353	WITHOUT_CLASSIFICATION	6.780418256467832E-5	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.999964476861186	WITHOUT_CLASSIFICATION	3.552313881403043E-5	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9998314742892332	WITHOUT_CLASSIFICATION	1.6852571076669834E-4	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999568960304756	WITHOUT_CLASSIFICATION	4.3103969524520275E-5	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999885972023737	WITHOUT_CLASSIFICATION	1.1402797626345578E-5	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9998771215234277	WITHOUT_CLASSIFICATION	1.2287847657224682E-4	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9998837264284243	WITHOUT_CLASSIFICATION	1.1627357157583362E-4	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.8041655423134537	WITHOUT_CLASSIFICATION	0.19583445768654625	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999963784702379	WITHOUT_CLASSIFICATION	3.621529762047253E-6	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999995525446941	WITHOUT_CLASSIFICATION	4.4745530594383455E-7	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9960620128277067	WITHOUT_CLASSIFICATION	0.003937987172293287	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999968465591869	WITHOUT_CLASSIFICATION	3.153440813144933E-6	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998705300824458	WITHOUT_CLASSIFICATION	1.2946991755429643E-4	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.999985814963787	WITHOUT_CLASSIFICATION	1.4185036212997884E-5	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9811226343652991	IMPLEMENTATION	0.01887736563470094	WITHOUT_CLASSIFICATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9811226343652991	IMPLEMENTATION	0.01887736563470094	WITHOUT_CLASSIFICATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999138321994491	WITHOUT_CLASSIFICATION	8.616780055089175E-5	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999927656234304	WITHOUT_CLASSIFICATION	7.2343765695217E-6	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9995965714725259	WITHOUT_CLASSIFICATION	4.034285274740803E-4	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998699802055467	WITHOUT_CLASSIFICATION	1.3001979445329112E-4	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997533534871537	WITHOUT_CLASSIFICATION	2.4664651284637913E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999086290385267	WITHOUT_CLASSIFICATION	9.137096147324064E-5	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999438167382254	WITHOUT_CLASSIFICATION	5.618326177464052E-5	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997533534871537	WITHOUT_CLASSIFICATION	2.4664651284637913E-4	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999885666676246	WITHOUT_CLASSIFICATION	1.1433332375396658E-5	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998119841155796	WITHOUT_CLASSIFICATION	1.8801588442042335E-4	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9998620148377712	WITHOUT_CLASSIFICATION	1.3798516222875793E-4	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9998620148377712	WITHOUT_CLASSIFICATION	1.3798516222875793E-4	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999552164997413	WITHOUT_CLASSIFICATION	4.478350025863385E-5	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9998261539094455	WITHOUT_CLASSIFICATION	1.7384609055444303E-4	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9998652454636999	WITHOUT_CLASSIFICATION	1.3475453629999687E-4	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9996199061551791	WITHOUT_CLASSIFICATION	3.8009384482089886E-4	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9998652454636999	WITHOUT_CLASSIFICATION	1.3475453629999687E-4	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999999849388	WITHOUT_CLASSIFICATION	1.5061194232048026E-11	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.999868019393263	WITHOUT_CLASSIFICATION	1.319806067370075E-4	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999794223110205	WITHOUT_CLASSIFICATION	2.0577688979528072E-5	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999582401072091	WITHOUT_CLASSIFICATION	4.175989279089573E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999456266671445	WITHOUT_CLASSIFICATION	5.437333285556666E-5	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999925881809714	WITHOUT_CLASSIFICATION	7.411819028613224E-6	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999980681648338	WITHOUT_CLASSIFICATION	1.9318351662010865E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9997669888709891	WITHOUT_CLASSIFICATION	2.3301112901083393E-4	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999408110546181	WITHOUT_CLASSIFICATION	5.918894538198692E-5	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999549687064702	WITHOUT_CLASSIFICATION	4.5031293529867875E-5	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999543945206786	WITHOUT_CLASSIFICATION	4.5605479321498265E-5	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9997588779879168	WITHOUT_CLASSIFICATION	2.4112201208314812E-4	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9997867927582981	WITHOUT_CLASSIFICATION	2.1320724170188898E-4	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.9999922440248961	WITHOUT_CLASSIFICATION	7.755975103933804E-6	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999982309038685	WITHOUT_CLASSIFICATION	1.7690961314698741E-6	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9998115007359907	WITHOUT_CLASSIFICATION	1.88499264009451E-4	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999681698771691	WITHOUT_CLASSIFICATION	3.183012283086657E-5	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999065958032336	WITHOUT_CLASSIFICATION	9.340419676639574E-5	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9991176359177786	WITHOUT_CLASSIFICATION	8.823640822214641E-4	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9993211789025772	WITHOUT_CLASSIFICATION	6.788210974226882E-4	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999088423492684	WITHOUT_CLASSIFICATION	9.11576507316519E-5	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999361124363898	WITHOUT_CLASSIFICATION	6.388756361029914E-5	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9263066764129136	WITHOUT_CLASSIFICATION	0.07369332358708629	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999874446412017	WITHOUT_CLASSIFICATION	1.2555358798343774E-5	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9996905230029453	WITHOUT_CLASSIFICATION	3.094769970546873E-4	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995613491773	WITHOUT_CLASSIFICATION	4.386508227089302E-7	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999278304773301	WITHOUT_CLASSIFICATION	7.216952266985826E-5	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9998921505989978	WITHOUT_CLASSIFICATION	1.078494010021192E-4	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999904650892822	WITHOUT_CLASSIFICATION	9.534910717863628E-6	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9473815609941214	WITHOUT_CLASSIFICATION	0.05261843900587853	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999269749553817	WITHOUT_CLASSIFICATION	7.302504461827629E-5	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9998370732142253	WITHOUT_CLASSIFICATION	1.6292678577459402E-4	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9998918682919637	WITHOUT_CLASSIFICATION	1.0813170803631515E-4	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9998918682919637	WITHOUT_CLASSIFICATION	1.0813170803631515E-4	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999631329893294	WITHOUT_CLASSIFICATION	3.686701067052199E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9998999950024116	WITHOUT_CLASSIFICATION	1.0000499758848834E-4	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.99980395400561	WITHOUT_CLASSIFICATION	1.960459943899792E-4	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.9998709140231397	WITHOUT_CLASSIFICATION	1.2908597686037425E-4	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9998624810113645	WITHOUT_CLASSIFICATION	1.3751898863548223E-4	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999989386788103	WITHOUT_CLASSIFICATION	1.0613211896219843E-6	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999995235970771	WITHOUT_CLASSIFICATION	4.764029228918832E-6	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9991906409020826	WITHOUT_CLASSIFICATION	8.093590979174289E-4	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999631329893294	WITHOUT_CLASSIFICATION	3.686701067052199E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9998999950024116	WITHOUT_CLASSIFICATION	1.0000499758848834E-4	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998932464299387	WITHOUT_CLASSIFICATION	1.0675357006127257E-4	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.638639108680422	WITHOUT_CLASSIFICATION	0.361360891319578	IMPLEMENTATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999937715458381	WITHOUT_CLASSIFICATION	6.228454161899363E-6	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999037437365453	WITHOUT_CLASSIFICATION	9.625626345475093E-5	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999996354243239	WITHOUT_CLASSIFICATION	3.645756760525978E-7	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9860311867527478	WITHOUT_CLASSIFICATION	0.01396881324725223	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999073504939788	WITHOUT_CLASSIFICATION	9.264950602116841E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999610000160776	WITHOUT_CLASSIFICATION	3.8999983922371174E-5	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999873240517497	WITHOUT_CLASSIFICATION	1.2675948250290507E-5	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7636438529622147	WITHOUT_CLASSIFICATION	0.23635614703778535	IMPLEMENTATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.999995339480465	WITHOUT_CLASSIFICATION	4.660519534901724E-6	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7636438529622147	WITHOUT_CLASSIFICATION	0.23635614703778535	IMPLEMENTATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999582500637493	WITHOUT_CLASSIFICATION	4.174993625072309E-5	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9998792442940472	WITHOUT_CLASSIFICATION	1.2075570595285344E-4	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999582500637493	WITHOUT_CLASSIFICATION	4.174993625072309E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999239171007671	WITHOUT_CLASSIFICATION	7.608289923287086E-5	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999892590338624	WITHOUT_CLASSIFICATION	1.0740966137631942E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999610000160776	WITHOUT_CLASSIFICATION	3.8999983922371174E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999610000160776	WITHOUT_CLASSIFICATION	3.8999983922371174E-5	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999113234682668	WITHOUT_CLASSIFICATION	8.867653173323331E-5	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999118121248345	WITHOUT_CLASSIFICATION	8.818787516546519E-5	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999113234682668	WITHOUT_CLASSIFICATION	8.867653173323331E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999084016818086	WITHOUT_CLASSIFICATION	9.159831819138365E-5	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999572480756749	WITHOUT_CLASSIFICATION	4.275192432507369E-5	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999331537642633	WITHOUT_CLASSIFICATION	6.684623573670308E-5	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9254728623314423	WITHOUT_CLASSIFICATION	0.07452713766855759	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999124916977	WITHOUT_CLASSIFICATION	8.750830230000782E-5	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.999976419496518	WITHOUT_CLASSIFICATION	2.3580503481931668E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999390031910839	WITHOUT_CLASSIFICATION	6.0996808916244586E-5	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.9999452792352023	WITHOUT_CLASSIFICATION	5.4720764797867605E-5	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.9999476716499914	WITHOUT_CLASSIFICATION	5.232835000860364E-5	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999969671478791	WITHOUT_CLASSIFICATION	3.0328521209221544E-6	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.9998662665512257	WITHOUT_CLASSIFICATION	1.3373344877429735E-4	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9999466804945801	WITHOUT_CLASSIFICATION	5.3319505419970594E-5	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9998062698860258	WITHOUT_CLASSIFICATION	1.9373011397425053E-4	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999339186199192	WITHOUT_CLASSIFICATION	6.608138008087032E-5	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999132388999324	WITHOUT_CLASSIFICATION	8.676110006754764E-5	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998522149383372	WITHOUT_CLASSIFICATION	1.4778506166273825E-4	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9997867927582981	WITHOUT_CLASSIFICATION	2.1320724170188898E-4	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999597280170115	WITHOUT_CLASSIFICATION	4.027198298852596E-5	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999192404176231	WITHOUT_CLASSIFICATION	8.075958237693791E-5	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997799059989376	WITHOUT_CLASSIFICATION	2.2009400106223613E-4	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9997867927582981	WITHOUT_CLASSIFICATION	2.1320724170188898E-4	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9997973346399498	WITHOUT_CLASSIFICATION	2.026653600501866E-4	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999212468678744	WITHOUT_CLASSIFICATION	7.87531321255748E-5	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9990009898004452	WITHOUT_CLASSIFICATION	9.990101995548464E-4	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.6429506178989465	WITHOUT_CLASSIFICATION	0.35704938210105347	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9995720751399136	WITHOUT_CLASSIFICATION	4.2792486008631786E-4	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998155878566851	WITHOUT_CLASSIFICATION	1.844121433148883E-4	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.8616558695972517	WITHOUT_CLASSIFICATION	0.13834413040274826	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9998796930573145	WITHOUT_CLASSIFICATION	1.2030694268548812E-4	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999124916977	WITHOUT_CLASSIFICATION	8.750830230000782E-5	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999515416717051	WITHOUT_CLASSIFICATION	4.845832829497848E-5	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.7021616213775259	WITHOUT_CLASSIFICATION	0.297838378622474	IMPLEMENTATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.7615855233631287	IMPLEMENTATION	0.23841447663687118	WITHOUT_CLASSIFICATION
an assertion	WITHOUT_CLASSIFICATION	0.999979260904688	WITHOUT_CLASSIFICATION	2.0739095311887684E-5	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999780701116971	WITHOUT_CLASSIFICATION	2.1929888302952503E-5	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.9999389986611377	WITHOUT_CLASSIFICATION	6.100133886238139E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999084016818086	WITHOUT_CLASSIFICATION	9.159831819138365E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999084016818086	WITHOUT_CLASSIFICATION	9.159831819138365E-5	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9998923573665163	WITHOUT_CLASSIFICATION	1.0764263348366946E-4	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.999980486130222	WITHOUT_CLASSIFICATION	1.9513869778018805E-5	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.9988291703790132	WITHOUT_CLASSIFICATION	0.0011708296209867867	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999026002055351	WITHOUT_CLASSIFICATION	9.73997944648673E-5	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9996792551820008	WITHOUT_CLASSIFICATION	3.2074481799924655E-4	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9998278030127769	WITHOUT_CLASSIFICATION	1.721969872231578E-4	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9998974125593687	WITHOUT_CLASSIFICATION	1.0258744063126222E-4	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999995787656235	WITHOUT_CLASSIFICATION	4.212343764999962E-7	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9997884475786554	WITHOUT_CLASSIFICATION	2.1155242134460124E-4	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999507035745855	WITHOUT_CLASSIFICATION	4.9296425414404635E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999897228007019	WITHOUT_CLASSIFICATION	1.0277199298144435E-5	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9998062698860258	WITHOUT_CLASSIFICATION	1.9373011397425053E-4	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999631329893294	WITHOUT_CLASSIFICATION	3.686701067052199E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999897228007019	WITHOUT_CLASSIFICATION	1.0277199298144435E-5	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999453662213934	WITHOUT_CLASSIFICATION	5.463377860664151E-5	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999817537725638	WITHOUT_CLASSIFICATION	1.824622743612742E-5	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.999978711759584	WITHOUT_CLASSIFICATION	2.1288240416061042E-5	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.9150518542183891	IMPLEMENTATION	0.08494814578161089	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999632702827931	WITHOUT_CLASSIFICATION	3.672971720689553E-4	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999943501726729	WITHOUT_CLASSIFICATION	5.649827327060576E-6	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999912980836315	WITHOUT_CLASSIFICATION	8.701916368404803E-6	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.999999998086297	WITHOUT_CLASSIFICATION	1.913703047590203E-9	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999414580972926	WITHOUT_CLASSIFICATION	5.85419027073229E-5	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.9998769658084833	WITHOUT_CLASSIFICATION	1.2303419151665288E-4	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999164107350704	WITHOUT_CLASSIFICATION	8.358926492955331E-5	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999164107350704	WITHOUT_CLASSIFICATION	8.358926492955331E-5	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999181778401015	WITHOUT_CLASSIFICATION	8.182215989859524E-5	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9912962752129628	WITHOUT_CLASSIFICATION	0.008703724787037204	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999897228007019	WITHOUT_CLASSIFICATION	1.0277199298144435E-5	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999632702827931	WITHOUT_CLASSIFICATION	3.672971720689553E-4	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999912980836315	WITHOUT_CLASSIFICATION	8.701916368404803E-6	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999732572689333	WITHOUT_CLASSIFICATION	2.6742731066698988E-5	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.999756735138467	WITHOUT_CLASSIFICATION	2.432648615329746E-4	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.9999151219576783	WITHOUT_CLASSIFICATION	8.487804232173307E-5	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9998253641601084	WITHOUT_CLASSIFICATION	1.7463583989161158E-4	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999444244476694	WITHOUT_CLASSIFICATION	5.557555233064252E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999453662213934	WITHOUT_CLASSIFICATION	5.463377860664151E-5	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9998749448521977	WITHOUT_CLASSIFICATION	1.2505514780231976E-4	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999398852014068	WITHOUT_CLASSIFICATION	6.011479859327788E-5	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9988171918076116	WITHOUT_CLASSIFICATION	0.0011828081923883711	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.594578333922285	WITHOUT_CLASSIFICATION	0.40542166607771496	IMPLEMENTATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.5594411171399775	WITHOUT_CLASSIFICATION	0.4405588828600227	IMPLEMENTATION
render the SQL	WITHOUT_CLASSIFICATION	0.9999674446014387	WITHOUT_CLASSIFICATION	3.2555398561335034E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999239171007671	WITHOUT_CLASSIFICATION	7.608289923287086E-5	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999784981388028	WITHOUT_CLASSIFICATION	2.150186119714903E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999977076948308	WITHOUT_CLASSIFICATION	2.2923051692725604E-6	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999721175340817	WITHOUT_CLASSIFICATION	2.7882465918333403E-5	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999997222603407	WITHOUT_CLASSIFICATION	2.777396593109989E-6	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999988748670862	WITHOUT_CLASSIFICATION	1.125132913784874E-6	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999936761669398	WITHOUT_CLASSIFICATION	6.323833060199436E-5	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.9999181970473715	WITHOUT_CLASSIFICATION	8.180295262846384E-5	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999691720304473	WITHOUT_CLASSIFICATION	3.082796955276628E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999164059507223	WITHOUT_CLASSIFICATION	8.359404927765026E-5	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999321778646657	WITHOUT_CLASSIFICATION	6.782213533438099E-5	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.9999302688681907	WITHOUT_CLASSIFICATION	6.973113180932126E-5	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999614536883844	WITHOUT_CLASSIFICATION	3.854631161572227E-5	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999459938459335	WITHOUT_CLASSIFICATION	5.400615406650439E-5	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.9999669476340489	WITHOUT_CLASSIFICATION	3.305236595102069E-5	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998872314358955	WITHOUT_CLASSIFICATION	1.127685641044751E-4	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9900055435274457	WITHOUT_CLASSIFICATION	0.009994456472554354	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.9998813996687889	WITHOUT_CLASSIFICATION	1.1860033121116564E-4	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999975704566255	WITHOUT_CLASSIFICATION	2.4295433744980996E-6	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9950808884522483	WITHOUT_CLASSIFICATION	0.004919111547751643	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.999939432418903	WITHOUT_CLASSIFICATION	6.0567581096989684E-5	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999980391036066	WITHOUT_CLASSIFICATION	1.9608963933138893E-6	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999757656618528	WITHOUT_CLASSIFICATION	2.4234338147195343E-5	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9997265149800814	WITHOUT_CLASSIFICATION	2.734850199186289E-4	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9998806920523442	WITHOUT_CLASSIFICATION	1.1930794765570162E-4	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9987255370474588	WITHOUT_CLASSIFICATION	0.0012744629525411775	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999631466828466	WITHOUT_CLASSIFICATION	3.685331715337475E-5	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999641779259025	WITHOUT_CLASSIFICATION	3.582207409736967E-5	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999729413808139	WITHOUT_CLASSIFICATION	2.705861918600235E-5	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999956294874878	WITHOUT_CLASSIFICATION	4.370512512220301E-6	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9997363055908638	WITHOUT_CLASSIFICATION	2.636944091362852E-4	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7050678151917439	IMPLEMENTATION	0.29493218480825606	WITHOUT_CLASSIFICATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9997091884892029	WITHOUT_CLASSIFICATION	2.908115107971103E-4	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9997549342598944	WITHOUT_CLASSIFICATION	2.450657401056399E-4	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999901719598168	WITHOUT_CLASSIFICATION	9.828040183212E-6	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5341678959760567	WITHOUT_CLASSIFICATION	0.46583210402394315	IMPLEMENTATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999862023517702	WITHOUT_CLASSIFICATION	1.3797648229698992E-5	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999628813499186	WITHOUT_CLASSIFICATION	3.711865008141697E-5	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999858592610444	WITHOUT_CLASSIFICATION	1.4140738955599217E-5	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999974014429107	WITHOUT_CLASSIFICATION	2.5985570891810394E-6	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999653556683405	WITHOUT_CLASSIFICATION	3.4644331659480724E-5	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9995401846027393	WITHOUT_CLASSIFICATION	4.5981539726069393E-4	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999163411445972	WITHOUT_CLASSIFICATION	8.365885540281582E-5	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9997142012633246	WITHOUT_CLASSIFICATION	2.8579873667544203E-4	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9995401846027393	WITHOUT_CLASSIFICATION	4.5981539726069393E-4	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999653556683405	WITHOUT_CLASSIFICATION	3.4644331659480724E-5	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999163411445972	WITHOUT_CLASSIFICATION	8.365885540281582E-5	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.9999251714780335	WITHOUT_CLASSIFICATION	7.482852196649234E-5	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999627735351477	WITHOUT_CLASSIFICATION	3.722646485224424E-5	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.995539264142317	WITHOUT_CLASSIFICATION	0.004460735857683059	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999695722659607	WITHOUT_CLASSIFICATION	3.042773403934373E-5	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999999767360198	WITHOUT_CLASSIFICATION	2.3263980196717273E-7	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7835801734367746	WITHOUT_CLASSIFICATION	0.21641982656322545	IMPLEMENTATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9981786548462296	WITHOUT_CLASSIFICATION	0.0018213451537703363	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999989217183353	WITHOUT_CLASSIFICATION	1.0782816647331925E-6	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999989427952858	WITHOUT_CLASSIFICATION	1.0572047142670207E-6	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9998943246580507	WITHOUT_CLASSIFICATION	1.0567534194928167E-4	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.9997598168208923	WITHOUT_CLASSIFICATION	2.4018317910765326E-4	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999878146546018	WITHOUT_CLASSIFICATION	1.2185345398142226E-5	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9993668472398046	WITHOUT_CLASSIFICATION	6.331527601953132E-4	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999695722659607	WITHOUT_CLASSIFICATION	3.042773403934373E-5	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999892472259101	WITHOUT_CLASSIFICATION	1.0752774089985093E-5	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999862739883615	WITHOUT_CLASSIFICATION	1.3726011638465835E-5	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998388552883993	WITHOUT_CLASSIFICATION	1.6114471160064972E-4	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999964149195546	WITHOUT_CLASSIFICATION	3.585080445462653E-6	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9998226961978458	WITHOUT_CLASSIFICATION	1.773038021542086E-4	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998726410116031	WITHOUT_CLASSIFICATION	1.2735898839687403E-4	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9903639144551326	WITHOUT_CLASSIFICATION	0.009636085544867327	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999500420035982	WITHOUT_CLASSIFICATION	4.9957996401862226E-5	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9992256718820817	WITHOUT_CLASSIFICATION	7.743281179183838E-4	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9990200613130198	WITHOUT_CLASSIFICATION	9.799386869801998E-4	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998722633162535	WITHOUT_CLASSIFICATION	1.2773668374649414E-4	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998722633162535	WITHOUT_CLASSIFICATION	1.2773668374649414E-4	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999211028200301	WITHOUT_CLASSIFICATION	7.889717996991649E-5	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999211028200301	WITHOUT_CLASSIFICATION	7.889717996991649E-5	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.999496692506987	WITHOUT_CLASSIFICATION	5.033074930130325E-4	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998388552883993	WITHOUT_CLASSIFICATION	1.6114471160064972E-4	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9997677470230102	WITHOUT_CLASSIFICATION	2.3225297698992176E-4	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999598517831492	WITHOUT_CLASSIFICATION	4.014821685096165E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999517551345478	WITHOUT_CLASSIFICATION	4.8244865452240784E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999517551345478	WITHOUT_CLASSIFICATION	4.8244865452240784E-5	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.999953011637975	WITHOUT_CLASSIFICATION	4.698836202497057E-5	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9998776023425985	WITHOUT_CLASSIFICATION	1.2239765740162798E-4	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9994957571022082	WITHOUT_CLASSIFICATION	5.042428977919273E-4	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.9999361361929442	WITHOUT_CLASSIFICATION	6.386380705584457E-5	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999897124082316	WITHOUT_CLASSIFICATION	1.028759176845474E-5	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999743842446035	WITHOUT_CLASSIFICATION	2.5615755396581178E-5	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999636940283623	WITHOUT_CLASSIFICATION	3.6305971637762306E-5	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999693788631938	WITHOUT_CLASSIFICATION	3.062113680619818E-5	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.9999371511634674	WITHOUT_CLASSIFICATION	6.284883653264312E-5	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999969532668795	WITHOUT_CLASSIFICATION	3.0467331204361176E-6	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.9999468022276207	WITHOUT_CLASSIFICATION	5.3197772379336025E-5	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.999870267075845	WITHOUT_CLASSIFICATION	1.2973292415493866E-4	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999603156448414	WITHOUT_CLASSIFICATION	3.968435515852987E-5	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9999718215997332	WITHOUT_CLASSIFICATION	2.8178400266780817E-5	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9751761490882034	WITHOUT_CLASSIFICATION	0.024823850911796615	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999632466495918	WITHOUT_CLASSIFICATION	3.675335040820314E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998675702976795	WITHOUT_CLASSIFICATION	1.324297023204495E-4	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9997099236790372	WITHOUT_CLASSIFICATION	2.900763209627569E-4	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9803573926260065	WITHOUT_CLASSIFICATION	0.019642607373993485	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999998328604693	WITHOUT_CLASSIFICATION	1.6713953075628598E-7	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9957730132576739	WITHOUT_CLASSIFICATION	0.004226986742326113	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999915991807675	WITHOUT_CLASSIFICATION	8.40081923254513E-6	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9996744431255534	WITHOUT_CLASSIFICATION	3.255568744466462E-4	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999990709415719	WITHOUT_CLASSIFICATION	9.290584281682409E-7	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999755429622705	WITHOUT_CLASSIFICATION	2.445703772948005E-5	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9997089211520608	WITHOUT_CLASSIFICATION	2.910788479392506E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999975704566255	WITHOUT_CLASSIFICATION	2.4295433744980996E-6	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.999967880014701	WITHOUT_CLASSIFICATION	3.211998529889005E-5	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999982668016132	WITHOUT_CLASSIFICATION	1.733198386760615E-6	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998686798431698	WITHOUT_CLASSIFICATION	1.313201568301573E-4	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998594808200306	WITHOUT_CLASSIFICATION	1.4051917996942202E-4	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999867706091156	WITHOUT_CLASSIFICATION	1.3229390884526126E-5	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999867706091156	WITHOUT_CLASSIFICATION	1.3229390884526126E-5	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999960623140365	WITHOUT_CLASSIFICATION	3.9376859635060974E-5	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9999061860514236	WITHOUT_CLASSIFICATION	9.38139485764155E-5	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9998789838976496	WITHOUT_CLASSIFICATION	1.210161023504753E-4	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9998789838976496	WITHOUT_CLASSIFICATION	1.210161023504753E-4	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9987808514894463	WITHOUT_CLASSIFICATION	0.0012191485105536952	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998179578289171	WITHOUT_CLASSIFICATION	1.8204217108299444E-4	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.985564329031457	WITHOUT_CLASSIFICATION	0.01443567096854314	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999126195766176	WITHOUT_CLASSIFICATION	8.738042338236182E-5	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.99991056577778	WITHOUT_CLASSIFICATION	8.943422221993004E-5	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999989044603075	WITHOUT_CLASSIFICATION	1.0955396925246045E-6	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999121108236793	WITHOUT_CLASSIFICATION	8.788917632071066E-5	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999215230695806	WITHOUT_CLASSIFICATION	7.847693041937231E-5	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999215230695806	WITHOUT_CLASSIFICATION	7.847693041937231E-5	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999080148924647	WITHOUT_CLASSIFICATION	9.198510753524274E-5	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999900364784664	WITHOUT_CLASSIFICATION	9.96352153363274E-6	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999900364784664	WITHOUT_CLASSIFICATION	9.96352153363274E-6	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999260406495308	WITHOUT_CLASSIFICATION	7.395935046911005E-5	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999536811724414	WITHOUT_CLASSIFICATION	4.631882755868654E-5	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.9999864590950496	WITHOUT_CLASSIFICATION	1.354090495050519E-5	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999901635237368	WITHOUT_CLASSIFICATION	9.836476263178936E-6	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9998244678418291	WITHOUT_CLASSIFICATION	1.7553215817094176E-4	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999997793956816	WITHOUT_CLASSIFICATION	2.2060431837738364E-7	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999994664094454	WITHOUT_CLASSIFICATION	5.335905545866673E-6	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999486128892944	WITHOUT_CLASSIFICATION	5.138711070570329E-5	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9988583883509308	WITHOUT_CLASSIFICATION	0.00114161164906927	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9994997517040203	WITHOUT_CLASSIFICATION	5.002482959796268E-4	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9854288367391596	WITHOUT_CLASSIFICATION	0.014571163260840387	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999492355518069	WITHOUT_CLASSIFICATION	5.076444819302246E-5	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9996901475155604	WITHOUT_CLASSIFICATION	3.0985248443965056E-4	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.999978763149503	WITHOUT_CLASSIFICATION	2.123685049715465E-5	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999823117544014	WITHOUT_CLASSIFICATION	1.7688245598599072E-4	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9998637934685002	WITHOUT_CLASSIFICATION	1.3620653149982445E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999086290385267	WITHOUT_CLASSIFICATION	9.137096147324064E-5	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9996104817923499	WITHOUT_CLASSIFICATION	3.8951820765008565E-4	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9998707674322257	WITHOUT_CLASSIFICATION	1.2923256777438682E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999086290385267	WITHOUT_CLASSIFICATION	9.137096147324064E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999086290385267	WITHOUT_CLASSIFICATION	9.137096147324064E-5	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9998054241247837	WITHOUT_CLASSIFICATION	1.945758752164055E-4	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.997161946995924	WITHOUT_CLASSIFICATION	0.0028380530040759398	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.9998582792237461	WITHOUT_CLASSIFICATION	1.4172077625387104E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999424161420237	WITHOUT_CLASSIFICATION	5.758385797624583E-5	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.999999881172223	WITHOUT_CLASSIFICATION	1.1882777694326582E-7	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.859042745213921	IMPLEMENTATION	0.14095725478607912	WITHOUT_CLASSIFICATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.999991380632967	WITHOUT_CLASSIFICATION	8.619367033046144E-6	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999424161420237	WITHOUT_CLASSIFICATION	5.758385797624583E-5	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.971882331177375	WITHOUT_CLASSIFICATION	0.028117668822625015	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998875138943942	WITHOUT_CLASSIFICATION	1.1248610560566502E-4	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999962678995499	WITHOUT_CLASSIFICATION	3.7321004500583275E-6	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999601541461601	WITHOUT_CLASSIFICATION	3.9845853839943914E-5	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999865855771883	WITHOUT_CLASSIFICATION	1.3414422811774477E-5	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9987711681417472	WITHOUT_CLASSIFICATION	0.0012288318582528103	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999829581568328	WITHOUT_CLASSIFICATION	1.704184316725435E-5	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999919503880718	WITHOUT_CLASSIFICATION	8.049611928221647E-6	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999615473196416	WITHOUT_CLASSIFICATION	3.8452680358465784E-5	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999963486520151	WITHOUT_CLASSIFICATION	3.6513479848290387E-6	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999615473196416	WITHOUT_CLASSIFICATION	3.8452680358465784E-5	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999958171277273	WITHOUT_CLASSIFICATION	4.182872272642063E-6	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998435378784832	WITHOUT_CLASSIFICATION	1.5646212151675803E-4	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.5305293301033774	IMPLEMENTATION	0.4694706698966226	WITHOUT_CLASSIFICATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999688560819272	WITHOUT_CLASSIFICATION	3.114391807284446E-5	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999587432286554	WITHOUT_CLASSIFICATION	4.125677134457236E-5	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999948975366537	WITHOUT_CLASSIFICATION	5.102463346337249E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999187891925401	WITHOUT_CLASSIFICATION	8.121080746002311E-5	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999677999320762	WITHOUT_CLASSIFICATION	3.2200067923848115E-5	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999187891925401	WITHOUT_CLASSIFICATION	8.121080746002311E-5	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998975956316832	WITHOUT_CLASSIFICATION	1.0240436831672257E-4	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999337003572831	WITHOUT_CLASSIFICATION	6.629964271684254E-5	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.999875902847414	WITHOUT_CLASSIFICATION	1.240971525859588E-4	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.999967572384707	WITHOUT_CLASSIFICATION	3.242761529296097E-5	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999242497851742	WITHOUT_CLASSIFICATION	7.575021482572933E-5	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9997867927582981	WITHOUT_CLASSIFICATION	2.1320724170188898E-4	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999991697696462	WITHOUT_CLASSIFICATION	8.302303539400543E-7	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999948975366537	WITHOUT_CLASSIFICATION	5.102463346337249E-6	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999677999320762	WITHOUT_CLASSIFICATION	3.2200067923848115E-5	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998975956316832	WITHOUT_CLASSIFICATION	1.0240436831672257E-4	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9996659408673376	WITHOUT_CLASSIFICATION	3.340591326623746E-4	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.9999411483795387	WITHOUT_CLASSIFICATION	5.885162046116907E-5	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.9997935747180058	WITHOUT_CLASSIFICATION	2.0642528199413227E-4	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999997538284315	WITHOUT_CLASSIFICATION	2.461715685157756E-7	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.999561560493656	WITHOUT_CLASSIFICATION	4.384395063439577E-4	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9994259668346361	WITHOUT_CLASSIFICATION	5.74033165363901E-4	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999157765307782	WITHOUT_CLASSIFICATION	8.42234692217423E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998675702976795	WITHOUT_CLASSIFICATION	1.324297023204495E-4	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999337003572831	WITHOUT_CLASSIFICATION	6.629964271684254E-5	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.8331931006259047	WITHOUT_CLASSIFICATION	0.1668068993740952	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999113234682668	WITHOUT_CLASSIFICATION	8.867653173323331E-5	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.99336785638708	WITHOUT_CLASSIFICATION	0.006632143612919979	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.999953804822614	WITHOUT_CLASSIFICATION	4.619517738601269E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998675702976795	WITHOUT_CLASSIFICATION	1.324297023204495E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999646519623264	WITHOUT_CLASSIFICATION	3.534803767356004E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998675702976795	WITHOUT_CLASSIFICATION	1.324297023204495E-4	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999180989276555	WITHOUT_CLASSIFICATION	8.190107234446114E-5	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997293917014908	WITHOUT_CLASSIFICATION	2.706082985092117E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9997947538801503	WITHOUT_CLASSIFICATION	2.0524611984985643E-4	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.999361183186992	WITHOUT_CLASSIFICATION	6.388168130079377E-4	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999875425910181	WITHOUT_CLASSIFICATION	1.245740898188817E-5	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.9999533005191931	WITHOUT_CLASSIFICATION	4.6699480806854815E-5	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998171129269773	WITHOUT_CLASSIFICATION	1.8288707302268443E-4	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999944070806841	WITHOUT_CLASSIFICATION	5.592919315942658E-6	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999305266640113	WITHOUT_CLASSIFICATION	6.947333598872582E-5	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.9999889367825318	WITHOUT_CLASSIFICATION	1.1063217468208049E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999433660641225	WITHOUT_CLASSIFICATION	5.663393587748561E-5	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999863915994996	WITHOUT_CLASSIFICATION	1.3608400500405425E-5	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9994395005692618	WITHOUT_CLASSIFICATION	5.60499430738099E-4	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999278494073496	WITHOUT_CLASSIFICATION	7.215059265042748E-5	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999921462473496	WITHOUT_CLASSIFICATION	7.853752650483425E-6	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999890989570658	WITHOUT_CLASSIFICATION	1.0901042934099143E-5	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999875945270741	WITHOUT_CLASSIFICATION	1.2405472925837052E-5	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999868061906828	WITHOUT_CLASSIFICATION	1.3193809317115576E-5	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999996184708644	WITHOUT_CLASSIFICATION	3.8152913561501113E-7	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.999985892879665	WITHOUT_CLASSIFICATION	1.410712033508178E-5	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998912419053286	WITHOUT_CLASSIFICATION	1.0875809467136836E-4	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998912419053286	WITHOUT_CLASSIFICATION	1.0875809467136836E-4	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999807019988112	WITHOUT_CLASSIFICATION	1.9298001188843546E-5	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999937294085138	WITHOUT_CLASSIFICATION	6.2705914861035315E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999369140718294	WITHOUT_CLASSIFICATION	6.308592817059932E-5	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.999999536598005	WITHOUT_CLASSIFICATION	4.6340199495312463E-7	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9993119393468709	WITHOUT_CLASSIFICATION	6.880606531290493E-4	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9994095807040292	WITHOUT_CLASSIFICATION	5.904192959708599E-4	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999324968025265	WITHOUT_CLASSIFICATION	6.750319747343658E-5	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999971177895506	WITHOUT_CLASSIFICATION	2.8822104495024593E-6	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.8937235528595215	WITHOUT_CLASSIFICATION	0.10627644714047854	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999819150266577	WITHOUT_CLASSIFICATION	1.8084973342329236E-5	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999065938780201	WITHOUT_CLASSIFICATION	9.340612197999644E-5	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.9998247421572223	WITHOUT_CLASSIFICATION	1.7525784277764553E-4	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998002367123793	WITHOUT_CLASSIFICATION	1.997632876206766E-4	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999523561303412	WITHOUT_CLASSIFICATION	4.7643869658786666E-5	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999925789564021	WITHOUT_CLASSIFICATION	7.421043597899047E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999948611236235	WITHOUT_CLASSIFICATION	5.1388763764968815E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999815347379698	WITHOUT_CLASSIFICATION	1.846526203021279E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999815347379698	WITHOUT_CLASSIFICATION	1.846526203021279E-5	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.999954935962171	WITHOUT_CLASSIFICATION	4.506403782888713E-5	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999944070806841	WITHOUT_CLASSIFICATION	5.592919315942658E-6	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9948454639386636	WITHOUT_CLASSIFICATION	0.005154536061336384	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999733880897897	WITHOUT_CLASSIFICATION	2.66119102101822E-5	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9995195833648536	WITHOUT_CLASSIFICATION	4.8041663514634064E-4	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999944132234397	WITHOUT_CLASSIFICATION	5.586776560310332E-6	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.9998590486441156	WITHOUT_CLASSIFICATION	1.4095135588437587E-4	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.9999379859003549	WITHOUT_CLASSIFICATION	6.201409964517746E-5	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9995641493262147	WITHOUT_CLASSIFICATION	4.358506737852686E-4	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997579181922823	WITHOUT_CLASSIFICATION	2.4208180771758441E-4	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.9999609385929914	WITHOUT_CLASSIFICATION	3.906140700862918E-5	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999998525129481	WITHOUT_CLASSIFICATION	1.4748705191696987E-7	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999990433691417	WITHOUT_CLASSIFICATION	9.566308582664999E-7	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999981936705212	WITHOUT_CLASSIFICATION	1.8063294787751044E-6	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9981801673247525	WITHOUT_CLASSIFICATION	0.0018198326752476319	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999913846997134	WITHOUT_CLASSIFICATION	8.615300286591595E-5	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999975752331338	WITHOUT_CLASSIFICATION	2.4247668662123074E-5	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999470979368366	WITHOUT_CLASSIFICATION	5.290206316354071E-5	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9998663927303041	WITHOUT_CLASSIFICATION	1.3360726969596423E-4	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9998157883147846	WITHOUT_CLASSIFICATION	1.8421168521544367E-4	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999131503167561	WITHOUT_CLASSIFICATION	8.684968324393686E-5	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999705379796515	WITHOUT_CLASSIFICATION	2.9462020348467303E-5	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9991682206108833	WITHOUT_CLASSIFICATION	8.317793891167933E-4	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9997314002674852	WITHOUT_CLASSIFICATION	2.685997325148695E-4	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999991584681212	WITHOUT_CLASSIFICATION	8.415318788569487E-7	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999992528634523	WITHOUT_CLASSIFICATION	7.471365477468506E-7	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999583454910181	WITHOUT_CLASSIFICATION	4.165450898177696E-5	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.8676133546024075	WITHOUT_CLASSIFICATION	0.1323866453975925	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9995713920039392	WITHOUT_CLASSIFICATION	4.286079960609089E-4	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.99971223542513	WITHOUT_CLASSIFICATION	2.877645748700163E-4	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998595679149819	WITHOUT_CLASSIFICATION	1.404320850181784E-4	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9998651656087896	WITHOUT_CLASSIFICATION	1.3483439121043676E-4	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999473388748994	WITHOUT_CLASSIFICATION	5.2661125100689285E-5	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999053388709046	WITHOUT_CLASSIFICATION	9.466112909540196E-5	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999540726780556	WITHOUT_CLASSIFICATION	4.592732194453238E-5	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9993085063756859	WITHOUT_CLASSIFICATION	6.91493624314157E-4	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.999946121750172	WITHOUT_CLASSIFICATION	5.3878249828053666E-5	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999259743582294	WITHOUT_CLASSIFICATION	7.402564177063872E-5	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9990674503451451	WITHOUT_CLASSIFICATION	9.325496548548104E-4	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9990674503451451	WITHOUT_CLASSIFICATION	9.325496548548104E-4	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9998477637446507	WITHOUT_CLASSIFICATION	1.5223625534934622E-4	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999649513075195	WITHOUT_CLASSIFICATION	3.5048692480563316E-5	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999945865115111	WITHOUT_CLASSIFICATION	5.413488488990212E-6	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999945865115111	WITHOUT_CLASSIFICATION	5.413488488990212E-6	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.9999650306653945	WITHOUT_CLASSIFICATION	3.49693346054575E-5	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999763416122959	WITHOUT_CLASSIFICATION	2.365838770411127E-5	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9996976201055612	WITHOUT_CLASSIFICATION	3.0237989443880126E-4	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999823861827641	WITHOUT_CLASSIFICATION	1.7613817235883497E-5	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998942379396658	WITHOUT_CLASSIFICATION	1.0576206033422494E-4	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999947922777862	WITHOUT_CLASSIFICATION	5.2077222137881025E-6	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999947922777862	WITHOUT_CLASSIFICATION	5.2077222137881025E-6	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.999778796063313	WITHOUT_CLASSIFICATION	2.212039366870114E-4	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999084016818086	WITHOUT_CLASSIFICATION	9.159831819138365E-5	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999044481476946	WITHOUT_CLASSIFICATION	9.555185230535019E-5	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999044481476946	WITHOUT_CLASSIFICATION	9.555185230535019E-5	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.9999646256825676	WITHOUT_CLASSIFICATION	3.5374317432453163E-5	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999251730173234	WITHOUT_CLASSIFICATION	7.482698267667804E-5	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999897690156451	WITHOUT_CLASSIFICATION	1.0230984354917874E-5	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9999492638393515	WITHOUT_CLASSIFICATION	5.073616064865279E-5	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999982326888793	WITHOUT_CLASSIFICATION	1.7673111206566832E-6	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999124980146825	WITHOUT_CLASSIFICATION	8.750198531746204E-5	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999653267795127	WITHOUT_CLASSIFICATION	3.4673220487269344E-5	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.9997221782525868	WITHOUT_CLASSIFICATION	2.7782174741317707E-4	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.9999680792099893	WITHOUT_CLASSIFICATION	3.1920790010689604E-5	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999957559368047	WITHOUT_CLASSIFICATION	4.244063195332212E-6	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999689703347954	WITHOUT_CLASSIFICATION	3.102966520464237E-5	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9585855346304746	WITHOUT_CLASSIFICATION	0.04141446536952545	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.8541994963265365	WITHOUT_CLASSIFICATION	0.1458005036734635	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999961954407144	WITHOUT_CLASSIFICATION	3.8045592855578817E-6	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.999937173384492	WITHOUT_CLASSIFICATION	6.282661550802757E-5	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999952648833543	WITHOUT_CLASSIFICATION	4.73511664562704E-6	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999679129628619	WITHOUT_CLASSIFICATION	3.208703713803107E-5	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9959363847914815	WITHOUT_CLASSIFICATION	0.004063615208518499	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9944136535898351	WITHOUT_CLASSIFICATION	0.0055863464101648	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9989721181261109	WITHOUT_CLASSIFICATION	0.0010278818738890748	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9977311890671094	WITHOUT_CLASSIFICATION	0.002268810932890579	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9998125838886303	WITHOUT_CLASSIFICATION	1.874161113696454E-4	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9980924602128687	WITHOUT_CLASSIFICATION	0.0019075397871312818	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999755077879177	WITHOUT_CLASSIFICATION	2.4492212082366184E-5	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.9999909583906577	WITHOUT_CLASSIFICATION	9.041609342400947E-6	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999802954269777	WITHOUT_CLASSIFICATION	1.9704573022251034E-5	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998348367435955	WITHOUT_CLASSIFICATION	1.6516325640450499E-4	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999943907674941	WITHOUT_CLASSIFICATION	5.6092325058849555E-6	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999842659392782	WITHOUT_CLASSIFICATION	1.573406072180555E-5	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999948876356162	WITHOUT_CLASSIFICATION	5.112364383759744E-6	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999519010280712	WITHOUT_CLASSIFICATION	4.80989719287869E-5	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9997225813423435	WITHOUT_CLASSIFICATION	2.774186576564531E-4	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9998253616774291	WITHOUT_CLASSIFICATION	1.7463832257086094E-4	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999321778646657	WITHOUT_CLASSIFICATION	6.782213533438099E-5	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999494358294035	WITHOUT_CLASSIFICATION	5.0564170596570025E-5	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999945718998491	WITHOUT_CLASSIFICATION	5.428100150907238E-6	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999674166968683	WITHOUT_CLASSIFICATION	3.2583303131758725E-5	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999423789364754	WITHOUT_CLASSIFICATION	5.762106352456414E-5	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.9999180422518921	WITHOUT_CLASSIFICATION	8.195774810790103E-5	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.9999616710875836	WITHOUT_CLASSIFICATION	3.832891241649451E-5	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9999390678122224	WITHOUT_CLASSIFICATION	6.093218777767385E-5	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999078012000565	WITHOUT_CLASSIFICATION	9.219879994351705E-5	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.999945099549905	WITHOUT_CLASSIFICATION	5.49004500949203E-5	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9998481064191967	WITHOUT_CLASSIFICATION	1.5189358080322326E-4	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9964273724557343	WITHOUT_CLASSIFICATION	0.003572627544265703	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9997687164253191	WITHOUT_CLASSIFICATION	2.312835746809112E-4	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.999937035123776	WITHOUT_CLASSIFICATION	6.29648762240578E-5	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9994426735874037	WITHOUT_CLASSIFICATION	5.573264125962557E-4	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.6606656286688486	IMPLEMENTATION	0.33933437133115146	WITHOUT_CLASSIFICATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9985851760389662	WITHOUT_CLASSIFICATION	0.0014148239610337662	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999688988959025	WITHOUT_CLASSIFICATION	3.110110409754163E-5	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999596561776626	WITHOUT_CLASSIFICATION	4.034382233752712E-5	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999648320574713	WITHOUT_CLASSIFICATION	3.516794252870418E-5	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999706221194701	WITHOUT_CLASSIFICATION	2.9377880529852E-5	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999898901907001	WITHOUT_CLASSIFICATION	1.0109809299889922E-4	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999903587937353	WITHOUT_CLASSIFICATION	9.641206264756265E-6	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9970469001751006	WITHOUT_CLASSIFICATION	0.0029530998248994203	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9970469001751006	WITHOUT_CLASSIFICATION	0.0029530998248994203	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999939712667	WITHOUT_CLASSIFICATION	6.028733241235972E-9	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9998474908502291	WITHOUT_CLASSIFICATION	1.525091497709106E-4	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999988085649076	WITHOUT_CLASSIFICATION	1.1914350923488875E-6	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999897414979366	WITHOUT_CLASSIFICATION	1.025850206330859E-5	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999580427170043	WITHOUT_CLASSIFICATION	4.195728299580689E-5	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999502789887226	WITHOUT_CLASSIFICATION	4.9721011277353685E-5	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999967817431212	WITHOUT_CLASSIFICATION	3.2182568786717795E-6	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999986799708682	WITHOUT_CLASSIFICATION	1.3200291317783432E-6	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.999995023413082	WITHOUT_CLASSIFICATION	4.976586917940941E-6	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999987426684501	WITHOUT_CLASSIFICATION	1.257331549889173E-6	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999961449279212	WITHOUT_CLASSIFICATION	3.855072078761656E-6	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9994675149823419	WITHOUT_CLASSIFICATION	5.324850176581453E-4	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998335252283	WITHOUT_CLASSIFICATION	1.6647477171804468E-7	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999481602978495	WITHOUT_CLASSIFICATION	5.183970215049052E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999847072050775	WITHOUT_CLASSIFICATION	1.5292794922567782E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999847072050775	WITHOUT_CLASSIFICATION	1.5292794922567782E-5	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999922256221389	WITHOUT_CLASSIFICATION	7.774377861139615E-6	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998644118051628	WITHOUT_CLASSIFICATION	1.3558819483708E-4	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999693608990293	WITHOUT_CLASSIFICATION	3.0639100970641695E-5	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999961298712259	WITHOUT_CLASSIFICATION	3.8701287741199085E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999516181001344	WITHOUT_CLASSIFICATION	4.838189986566036E-5	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999087407754502	WITHOUT_CLASSIFICATION	9.12592245497306E-5	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9997824420186721	WITHOUT_CLASSIFICATION	2.175579813279197E-4	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.9999903767259172	WITHOUT_CLASSIFICATION	9.623274082838022E-6	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999706634198932	WITHOUT_CLASSIFICATION	2.9336580106849203E-5	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9994613466122898	WITHOUT_CLASSIFICATION	5.386533877102217E-4	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9996654015138257	WITHOUT_CLASSIFICATION	3.3459848617438956E-4	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9915329536239528	WITHOUT_CLASSIFICATION	0.008467046376047206	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9998411477243128	WITHOUT_CLASSIFICATION	1.588522756872421E-4	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999928769561135	WITHOUT_CLASSIFICATION	7.12304388646844E-6	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9994195255179791	WITHOUT_CLASSIFICATION	5.804744820209291E-4	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9998111119020332	WITHOUT_CLASSIFICATION	1.888880979668356E-4	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9997596705498877	WITHOUT_CLASSIFICATION	2.4032945011233037E-4	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999969516772256	WITHOUT_CLASSIFICATION	3.0483227744323768E-6	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999981983207413	WITHOUT_CLASSIFICATION	1.8016792586304864E-6	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999640450670967	WITHOUT_CLASSIFICATION	3.595493290329613E-5	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999968911542764	WITHOUT_CLASSIFICATION	3.1088457235646255E-6	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999988546319054	WITHOUT_CLASSIFICATION	1.145368094583214E-6	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999998573202734	WITHOUT_CLASSIFICATION	1.426797265894571E-7	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999974801236872	WITHOUT_CLASSIFICATION	2.519876312862314E-6	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.999979082366599	WITHOUT_CLASSIFICATION	2.0917633400984057E-5	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.9999066380064537	WITHOUT_CLASSIFICATION	9.336199354623426E-5	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999806213632241	WITHOUT_CLASSIFICATION	1.9378636775815006E-5	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.993456449952966	WITHOUT_CLASSIFICATION	0.006543550047034011	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9993538309373072	WITHOUT_CLASSIFICATION	6.461690626927575E-4	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9988442295917384	WITHOUT_CLASSIFICATION	0.0011557704082615758	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9997506533085034	WITHOUT_CLASSIFICATION	2.493466914965825E-4	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999937639410214	WITHOUT_CLASSIFICATION	6.2360589786487675E-6	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999904029775974	WITHOUT_CLASSIFICATION	9.597022402562207E-6	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999643692430309	WITHOUT_CLASSIFICATION	3.563075696901734E-5	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999729624690149	WITHOUT_CLASSIFICATION	2.7037530985024103E-5	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9822633616862385	WITHOUT_CLASSIFICATION	0.017736638313761568	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9890794960881607	WITHOUT_CLASSIFICATION	0.01092050391183925	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9987386552855259	WITHOUT_CLASSIFICATION	0.0012613447144740452	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999791695639516	WITHOUT_CLASSIFICATION	2.083043604842907E-5	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999989413391944	WITHOUT_CLASSIFICATION	1.0586608056530365E-6	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9936261741085235	WITHOUT_CLASSIFICATION	0.006373825891476456	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999995614934354	WITHOUT_CLASSIFICATION	4.3850656467987163E-7	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996845388801756	WITHOUT_CLASSIFICATION	3.154611198244875E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996845388801756	WITHOUT_CLASSIFICATION	3.154611198244875E-4	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999937629092612	WITHOUT_CLASSIFICATION	6.2370907386946475E-6	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999996255431581	WITHOUT_CLASSIFICATION	3.744568419348874E-7	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999807787291215	WITHOUT_CLASSIFICATION	1.9221270878460478E-5	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999977933113594	WITHOUT_CLASSIFICATION	2.206688640603922E-5	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9278944047562123	WITHOUT_CLASSIFICATION	0.07210559524378769	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999983629683485	WITHOUT_CLASSIFICATION	1.637031651528484E-6	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999435559145267	WITHOUT_CLASSIFICATION	5.644408547337587E-5	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9994438417117704	WITHOUT_CLASSIFICATION	5.561582882296346E-4	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999904319106118	WITHOUT_CLASSIFICATION	9.568089388196285E-6	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999663229083556	WITHOUT_CLASSIFICATION	3.3677091644401536E-4	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999663229083556	WITHOUT_CLASSIFICATION	3.3677091644401536E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999698198551663	WITHOUT_CLASSIFICATION	3.0180144833750586E-5	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999998972994735	WITHOUT_CLASSIFICATION	1.0270052650620694E-7	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999973129831669	WITHOUT_CLASSIFICATION	2.6870168330903706E-6	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9962992626236884	WITHOUT_CLASSIFICATION	0.0037007373763116285	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999437763205393	WITHOUT_CLASSIFICATION	5.6223679460713916E-5	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999985107845705	WITHOUT_CLASSIFICATION	1.4892154295019702E-6	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.999992342851228	WITHOUT_CLASSIFICATION	7.657148772089438E-6	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9998377231488708	WITHOUT_CLASSIFICATION	1.622768511292357E-4	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999583370879628	WITHOUT_CLASSIFICATION	4.166291203716586E-5	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9997528237259805	WITHOUT_CLASSIFICATION	2.47176274019431E-4	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999937359874327	WITHOUT_CLASSIFICATION	6.264012567269742E-6	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9985096405168323	WITHOUT_CLASSIFICATION	0.0014903594831676933	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9994624715443379	WITHOUT_CLASSIFICATION	5.375284556622362E-4	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9998356022429209	WITHOUT_CLASSIFICATION	1.643977570791975E-4	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999677208925255	WITHOUT_CLASSIFICATION	3.227910747440876E-5	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999758193844293	WITHOUT_CLASSIFICATION	2.4180615570643475E-5	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9994607349348557	WITHOUT_CLASSIFICATION	5.392650651443294E-4	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9996397916294011	WITHOUT_CLASSIFICATION	3.6020837059891575E-4	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9985877215155452	WITHOUT_CLASSIFICATION	0.0014122784844547845	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9998760896051059	WITHOUT_CLASSIFICATION	1.239103948940824E-4	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9984718133102274	WITHOUT_CLASSIFICATION	0.0015281866897727092	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.999998213254795	WITHOUT_CLASSIFICATION	1.786745205009838E-6	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999997640646988	WITHOUT_CLASSIFICATION	2.359353012602915E-7	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999802967656096	WITHOUT_CLASSIFICATION	1.9703234390479215E-5	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999243244869	WITHOUT_CLASSIFICATION	7.567551309039107E-8	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998988883008307	WITHOUT_CLASSIFICATION	1.0111169916932485E-4	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999947151918269	WITHOUT_CLASSIFICATION	5.284808173069755E-6	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9998808675180718	WITHOUT_CLASSIFICATION	1.191324819282515E-4	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999931998622206	WITHOUT_CLASSIFICATION	6.800137779418152E-6	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999732629698942	WITHOUT_CLASSIFICATION	2.6737030105893217E-5	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999937084030734	WITHOUT_CLASSIFICATION	6.291596926493548E-6	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999799789638016	WITHOUT_CLASSIFICATION	2.0021036198452815E-5	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999990603184483	WITHOUT_CLASSIFICATION	9.39681551588053E-7	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999466871058466	WITHOUT_CLASSIFICATION	5.331289415349912E-5	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9996302172318272	WITHOUT_CLASSIFICATION	3.69782768172887E-4	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999386613104676	WITHOUT_CLASSIFICATION	6.133868953244788E-5	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9875213488372022	WITHOUT_CLASSIFICATION	0.012478651162797857	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999998676530831	WITHOUT_CLASSIFICATION	1.3234691689238476E-7	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998335252283	WITHOUT_CLASSIFICATION	1.6647477171804468E-7	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9998633887267393	WITHOUT_CLASSIFICATION	1.3661127326059633E-4	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999995424924313	WITHOUT_CLASSIFICATION	4.5750756871124535E-7	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9984744767239729	WITHOUT_CLASSIFICATION	0.001525523276027103	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999988697157725	WITHOUT_CLASSIFICATION	1.1302842275680532E-6	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999343798873	WITHOUT_CLASSIFICATION	6.562011269093184E-8	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.999603846003259	WITHOUT_CLASSIFICATION	3.9615399674093556E-4	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999048482990154	WITHOUT_CLASSIFICATION	9.515170098466734E-5	IMPLEMENTATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.7754700115693679	IMPLEMENTATION	0.22452998843063207	WITHOUT_CLASSIFICATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999994670610038	WITHOUT_CLASSIFICATION	5.329389962071551E-7	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9969545675323231	WITHOUT_CLASSIFICATION	0.003045432467676848	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999972692645196	WITHOUT_CLASSIFICATION	2.730735480418199E-6	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9998040952001128	WITHOUT_CLASSIFICATION	1.959047998872512E-4	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9996065563478534	WITHOUT_CLASSIFICATION	3.934436521465572E-4	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999888444035	WITHOUT_CLASSIFICATION	1.1155596500062243E-5	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9866111611935435	WITHOUT_CLASSIFICATION	0.013388838806456357	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999251756313702	WITHOUT_CLASSIFICATION	7.482436862980493E-5	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9997867927582981	WITHOUT_CLASSIFICATION	2.1320724170188898E-4	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999727444150368	WITHOUT_CLASSIFICATION	2.7255584963165237E-5	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9952267582665097	WITHOUT_CLASSIFICATION	0.004773241733490181	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999756355020715	WITHOUT_CLASSIFICATION	2.4364497928633346E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999251756313702	WITHOUT_CLASSIFICATION	7.482436862980493E-5	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.914930186090931	WITHOUT_CLASSIFICATION	0.08506981390906904	IMPLEMENTATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9995471168550134	WITHOUT_CLASSIFICATION	4.5288314498662086E-4	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999670069874519	WITHOUT_CLASSIFICATION	3.29930125480569E-5	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9977607850522591	WITHOUT_CLASSIFICATION	0.002239214947740863	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9998826177023882	WITHOUT_CLASSIFICATION	1.1738229761191932E-4	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998084194616959	WITHOUT_CLASSIFICATION	1.915805383042035E-4	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999967864524475	WITHOUT_CLASSIFICATION	3.2135475525368422E-6	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9979823692331845	WITHOUT_CLASSIFICATION	0.002017630766815542	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999965208770097	WITHOUT_CLASSIFICATION	3.479122990292548E-6	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9997681198626025	WITHOUT_CLASSIFICATION	2.3188013739756984E-4	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9997786154182136	WITHOUT_CLASSIFICATION	2.2138458178634887E-4	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9904573245346953	WITHOUT_CLASSIFICATION	0.009542675465304778	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999962958531998	WITHOUT_CLASSIFICATION	3.7041468001999156E-6	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9773986596583703	WITHOUT_CLASSIFICATION	0.022601340341629764	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9996850015965014	WITHOUT_CLASSIFICATION	3.149984034986074E-4	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9997957632564934	WITHOUT_CLASSIFICATION	2.0423674350651845E-4	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9991682206108833	WITHOUT_CLASSIFICATION	8.317793891167933E-4	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999942432770091	WITHOUT_CLASSIFICATION	5.75672299095822E-6	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999937033185815	WITHOUT_CLASSIFICATION	6.296681418406934E-6	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9973910093830027	WITHOUT_CLASSIFICATION	0.0026089906169971945	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9990466690973514	WITHOUT_CLASSIFICATION	9.533309026484638E-4	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9955868907592283	WITHOUT_CLASSIFICATION	0.004413109240771665	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999232881267134	WITHOUT_CLASSIFICATION	7.671187328656195E-5	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9994452815156715	WITHOUT_CLASSIFICATION	5.547184843285991E-4	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999961578973	WITHOUT_CLASSIFICATION	3.8421027698734496E-9	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999870784968297	WITHOUT_CLASSIFICATION	1.2921503170380657E-5	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999841765864312	WITHOUT_CLASSIFICATION	1.58234135687428E-5	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9978473628461995	WITHOUT_CLASSIFICATION	0.0021526371538005853	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999599989502044	WITHOUT_CLASSIFICATION	4.000104979563031E-5	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.8146118458779361	WITHOUT_CLASSIFICATION	0.18538815412206394	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9963246717599572	WITHOUT_CLASSIFICATION	0.003675328240042724	IMPLEMENTATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999601973977388	WITHOUT_CLASSIFICATION	3.980260226115563E-5	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999545733740787	WITHOUT_CLASSIFICATION	4.542662592147036E-5	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999783589714349	WITHOUT_CLASSIFICATION	2.164102856499778E-5	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999932682146314	WITHOUT_CLASSIFICATION	6.73178536862388E-6	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999954697122462	WITHOUT_CLASSIFICATION	4.530287753862941E-6	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999991320965226	WITHOUT_CLASSIFICATION	8.679034775033072E-7	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999997275798873	WITHOUT_CLASSIFICATION	2.7242011267313484E-7	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9994338110688901	WITHOUT_CLASSIFICATION	5.661889311099484E-4	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999124304243091	WITHOUT_CLASSIFICATION	8.756957569095694E-5	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9989790427795141	WITHOUT_CLASSIFICATION	0.0010209572204858395	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999778747161473	WITHOUT_CLASSIFICATION	2.2125283852683294E-5	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999778747161473	WITHOUT_CLASSIFICATION	2.2125283852683294E-5	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999568960304756	WITHOUT_CLASSIFICATION	4.3103969524520275E-5	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999963784702379	WITHOUT_CLASSIFICATION	3.621529762047253E-6	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998699802055467	WITHOUT_CLASSIFICATION	1.3001979445329112E-4	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999986460110959	WITHOUT_CLASSIFICATION	1.3539889040233278E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999126195766176	WITHOUT_CLASSIFICATION	8.738042338236182E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999126195766176	WITHOUT_CLASSIFICATION	8.738042338236182E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999610000160776	WITHOUT_CLASSIFICATION	3.8999983922371174E-5	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999676000225699	WITHOUT_CLASSIFICATION	3.2399977430125626E-5	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9996258615927981	WITHOUT_CLASSIFICATION	3.741384072019729E-4	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9997588779879168	WITHOUT_CLASSIFICATION	2.4112201208314812E-4	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9997867927582981	WITHOUT_CLASSIFICATION	2.1320724170188898E-4	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9991176359177786	WITHOUT_CLASSIFICATION	8.823640822214641E-4	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9171675597608673	WITHOUT_CLASSIFICATION	0.08283244023913268	IMPLEMENTATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999782727964185	WITHOUT_CLASSIFICATION	2.1727203581593068E-5	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999373241831999	WITHOUT_CLASSIFICATION	6.267581680007119E-5	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999385997270362	WITHOUT_CLASSIFICATION	6.14002729637214E-5	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999865700871646	WITHOUT_CLASSIFICATION	1.3429912835469688E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999664850325355	WITHOUT_CLASSIFICATION	3.351496746453018E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999664850325355	WITHOUT_CLASSIFICATION	3.351496746453018E-5	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9997957632564934	WITHOUT_CLASSIFICATION	2.0423674350651845E-4	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999368024586957	WITHOUT_CLASSIFICATION	6.31975413043474E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999414580972926	WITHOUT_CLASSIFICATION	5.85419027073229E-5	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9998210968038423	WITHOUT_CLASSIFICATION	1.7890319615756993E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999319987206587	WITHOUT_CLASSIFICATION	6.80012793412167E-5	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999784981388028	WITHOUT_CLASSIFICATION	2.150186119714903E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999979993339491	WITHOUT_CLASSIFICATION	2.0006660509774024E-6	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999466996231271	WITHOUT_CLASSIFICATION	5.330037687288486E-5	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999490426104578	WITHOUT_CLASSIFICATION	5.0957389542200234E-5	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999857552196891	WITHOUT_CLASSIFICATION	1.4244780310879958E-5	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9997681198626025	WITHOUT_CLASSIFICATION	2.3188013739756984E-4	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999928086693427	WITHOUT_CLASSIFICATION	7.191330657206724E-6	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999042159740724	WITHOUT_CLASSIFICATION	9.57840259275213E-5	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999966440544039	WITHOUT_CLASSIFICATION	3.355945596179863E-6	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.9999692042888277	WITHOUT_CLASSIFICATION	3.079571117228574E-5	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998258991689993	WITHOUT_CLASSIFICATION	1.741008310006348E-4	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9998593263376782	WITHOUT_CLASSIFICATION	1.4067366232179817E-4	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9997190478008504	WITHOUT_CLASSIFICATION	2.8095219914952744E-4	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9994187578497213	WITHOUT_CLASSIFICATION	5.812421502787006E-4	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9997644723322712	WITHOUT_CLASSIFICATION	2.3552766772879128E-4	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9892698732448127	WITHOUT_CLASSIFICATION	0.010730126755187263	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9892698732448127	WITHOUT_CLASSIFICATION	0.010730126755187263	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999424161420237	WITHOUT_CLASSIFICATION	5.758385797624583E-5	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999888731844038	WITHOUT_CLASSIFICATION	1.11268155961792E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999086290385267	WITHOUT_CLASSIFICATION	9.137096147324064E-5	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9998311747145607	WITHOUT_CLASSIFICATION	1.6882528543932368E-4	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.999900127679445	WITHOUT_CLASSIFICATION	9.987232055491126E-5	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9997546102510286	WITHOUT_CLASSIFICATION	2.4538974897131465E-4	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999688560819272	WITHOUT_CLASSIFICATION	3.114391807284446E-5	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999968290154	WITHOUT_CLASSIFICATION	3.170984671365572E-9	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9996659408673376	WITHOUT_CLASSIFICATION	3.340591326623746E-4	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997377295329444	WITHOUT_CLASSIFICATION	2.6227046705556826E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998675702976795	WITHOUT_CLASSIFICATION	1.324297023204495E-4	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9993584718398715	WITHOUT_CLASSIFICATION	6.41528160128447E-4	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9998380296481715	WITHOUT_CLASSIFICATION	1.619703518285769E-4	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999538087502966	WITHOUT_CLASSIFICATION	4.61912497035094E-5	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999961571481438	WITHOUT_CLASSIFICATION	3.842851856115896E-6	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998299866938781	WITHOUT_CLASSIFICATION	1.7001330612192945E-4	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999837848152413	WITHOUT_CLASSIFICATION	1.6215184758657995E-5	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9996189918037569	WITHOUT_CLASSIFICATION	3.810081962431366E-4	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9980071375508394	WITHOUT_CLASSIFICATION	0.0019928624491606737	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999986284214463	WITHOUT_CLASSIFICATION	1.371578553801043E-6	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999920393534915	WITHOUT_CLASSIFICATION	7.960646508540349E-6	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999617887892	WITHOUT_CLASSIFICATION	3.821121076667271E-8	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999897690156451	WITHOUT_CLASSIFICATION	1.0230984354917874E-5	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999717755594	WITHOUT_CLASSIFICATION	2.8224440531530155E-8	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999957401296218	WITHOUT_CLASSIFICATION	4.259870378200409E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999957401296218	WITHOUT_CLASSIFICATION	4.259870378200409E-5	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.997958094240213	WITHOUT_CLASSIFICATION	0.002041905759786998	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9929201887982616	WITHOUT_CLASSIFICATION	0.007079811201738451	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999973565719267	WITHOUT_CLASSIFICATION	2.6434280732755306E-6	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9998252020511068	WITHOUT_CLASSIFICATION	1.7479794889312488E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999791700139081	WITHOUT_CLASSIFICATION	2.0829986091912792E-5	IMPLEMENTATION
