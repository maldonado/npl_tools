todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9983936796947631	WITHOUT_CLASSIFICATION	0.0016063203052369681	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9983936796947631	WITHOUT_CLASSIFICATION	0.0016063203052369681	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.8009590569590473	WITHOUT_CLASSIFICATION	0.1990409430409526	IMPLEMENTATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.8641344298341367	WITHOUT_CLASSIFICATION	0.1358655701658633	IMPLEMENTATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.8201700084541337	WITHOUT_CLASSIFICATION	0.17982999154586632	IMPLEMENTATION
TODO: handle TypeDefs	IMPLEMENTATION	0.6500029821226916	IMPLEMENTATION	0.34999701787730836	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.929159478008316	WITHOUT_CLASSIFICATION	0.07084052199168399	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.5307208712499187	IMPLEMENTATION	0.4692791287500813	WITHOUT_CLASSIFICATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.8551525170860026	WITHOUT_CLASSIFICATION	0.1448474829139975	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.5417350522357933	IMPLEMENTATION	0.45826494776420673	WITHOUT_CLASSIFICATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9907021558030376	WITHOUT_CLASSIFICATION	0.009297844196962498	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.6500029821226916	IMPLEMENTATION	0.34999701787730836	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9230037033782386	IMPLEMENTATION	0.07699629662176145	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9230037033782386	IMPLEMENTATION	0.07699629662176145	WITHOUT_CLASSIFICATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.9744335121680486	WITHOUT_CLASSIFICATION	0.02556648783195138	IMPLEMENTATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.6552324704603747	WITHOUT_CLASSIFICATION	0.3447675295396253	IMPLEMENTATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.99999745700247	IMPLEMENTATION	2.5429975299343907E-6	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.8072167647687641	WITHOUT_CLASSIFICATION	0.1927832352312359	IMPLEMENTATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.9999728447232796	WITHOUT_CLASSIFICATION	2.7155276720332487E-5	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.8361574460509141	IMPLEMENTATION	0.1638425539490858	WITHOUT_CLASSIFICATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.6079312099357465	WITHOUT_CLASSIFICATION	0.39206879006425355	IMPLEMENTATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9999136821276392	WITHOUT_CLASSIFICATION	8.631787236081472E-5	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.7533049831401106	WITHOUT_CLASSIFICATION	0.24669501685988923	IMPLEMENTATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9327414022264934	IMPLEMENTATION	0.0672585977735066	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9327414022264934	IMPLEMENTATION	0.0672585977735066	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.5489060691524166	IMPLEMENTATION	0.4510939308475834	WITHOUT_CLASSIFICATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.5865627397367379	WITHOUT_CLASSIFICATION	0.41343726026326205	IMPLEMENTATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.5593199642781096	WITHOUT_CLASSIFICATION	0.4406800357218904	IMPLEMENTATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.5891473731148122	WITHOUT_CLASSIFICATION	0.41085262688518775	IMPLEMENTATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9842810272422116	IMPLEMENTATION	0.015718972757788344	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.8774148096786839	WITHOUT_CLASSIFICATION	0.122585190321316	IMPLEMENTATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.5307208712499187	IMPLEMENTATION	0.4692791287500813	WITHOUT_CLASSIFICATION
todo : look at optimizing these...	IMPLEMENTATION	0.9997746411423329	WITHOUT_CLASSIFICATION	2.2535885766703328E-4	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.8590004722690373	IMPLEMENTATION	0.14099952773096275	WITHOUT_CLASSIFICATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9813800643922038	IMPLEMENTATION	0.018619935607796154	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.8290141958229047	IMPLEMENTATION	0.17098580417709527	WITHOUT_CLASSIFICATION
TODO: not visible to the user!	IMPLEMENTATION	0.9035709116787545	IMPLEMENTATION	0.09642908832124557	WITHOUT_CLASSIFICATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.7550628773979143	WITHOUT_CLASSIFICATION	0.2449371226020857	IMPLEMENTATION
TODO: use these in methods above	IMPLEMENTATION	0.8513536704605421	WITHOUT_CLASSIFICATION	0.14864632953945792	IMPLEMENTATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9288727966693828	IMPLEMENTATION	0.07112720333061719	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9288727966693828	IMPLEMENTATION	0.07112720333061719	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9048396389713611	WITHOUT_CLASSIFICATION	0.09516036102863883	IMPLEMENTATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999542467373883	WITHOUT_CLASSIFICATION	4.5753262611712115E-5	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9963219866497033	WITHOUT_CLASSIFICATION	0.003678013350296729	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9787567486534622	IMPLEMENTATION	0.021243251346537824	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.5723201574231044	WITHOUT_CLASSIFICATION	0.4276798425768956	IMPLEMENTATION
TODO: formulas ?	IMPLEMENTATION	0.5261572742722854	IMPLEMENTATION	0.47384272572771463	WITHOUT_CLASSIFICATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.6699124366202972	WITHOUT_CLASSIFICATION	0.3300875633797028	IMPLEMENTATION
todo : cache this sql...	IMPLEMENTATION	0.999731380224626	WITHOUT_CLASSIFICATION	2.6861977537388456E-4	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.7387905614576081	WITHOUT_CLASSIFICATION	0.26120943854239176	IMPLEMENTATION
TODO: cache this in an instvar	IMPLEMENTATION	0.9755326938236869	WITHOUT_CLASSIFICATION	0.024467306176313083	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.8721327083632443	WITHOUT_CLASSIFICATION	0.12786729163675575	IMPLEMENTATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.88449712422856	IMPLEMENTATION	0.11550287577144014	WITHOUT_CLASSIFICATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.8655257054837707	IMPLEMENTATION	0.13447429451622933	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.5470108319674072	IMPLEMENTATION	0.452989168032593	WITHOUT_CLASSIFICATION
TODO: terrible implementation!	IMPLEMENTATION	0.6534666737305826	WITHOUT_CLASSIFICATION	0.3465333262694173	IMPLEMENTATION
TODO: proxies!	IMPLEMENTATION	0.5470108319674072	IMPLEMENTATION	0.452989168032593	WITHOUT_CLASSIFICATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.5608509716932116	IMPLEMENTATION	0.43914902830678837	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.6388884946745401	IMPLEMENTATION	0.3611115053254599	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.5470108319674072	IMPLEMENTATION	0.452989168032593	WITHOUT_CLASSIFICATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.999887723297482	WITHOUT_CLASSIFICATION	1.1227670251805876E-4	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.999887723297482	WITHOUT_CLASSIFICATION	1.1227670251805876E-4	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9983673675953371	IMPLEMENTATION	0.0016326324046629763	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.7302253371113272	WITHOUT_CLASSIFICATION	0.2697746628886727	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999916781435391	WITHOUT_CLASSIFICATION	8.321856460980599E-6	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999573962023817	WITHOUT_CLASSIFICATION	4.260379761829022E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999573962023817	WITHOUT_CLASSIFICATION	4.260379761829022E-5	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9998464128718215	WITHOUT_CLASSIFICATION	1.535871281784547E-4	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999593819370138	WITHOUT_CLASSIFICATION	4.061806298617558E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9997952433091252	WITHOUT_CLASSIFICATION	2.0475669087480775E-4	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9997952433091252	WITHOUT_CLASSIFICATION	2.0475669087480775E-4	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999288816238967	WITHOUT_CLASSIFICATION	7.111837610319541E-5	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999864671739951	WITHOUT_CLASSIFICATION	1.3532826004909463E-4	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999924458348235	WITHOUT_CLASSIFICATION	7.554165176537656E-6	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999767892756272	WITHOUT_CLASSIFICATION	2.32107243728166E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999950690449587	WITHOUT_CLASSIFICATION	4.930955041219028E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999950690449587	WITHOUT_CLASSIFICATION	4.930955041219028E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999463968607034	WITHOUT_CLASSIFICATION	5.3603139296586576E-5	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9990899012232327	WITHOUT_CLASSIFICATION	9.100987767671727E-4	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.9999552165757393	WITHOUT_CLASSIFICATION	4.4783424260721994E-5	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999978189705888	WITHOUT_CLASSIFICATION	2.181029411145958E-6	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999860626231688	WITHOUT_CLASSIFICATION	1.3937376831164765E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999314949391103	WITHOUT_CLASSIFICATION	6.85050608896499E-5	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.9998169595826233	WITHOUT_CLASSIFICATION	1.8304041737678681E-4	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9998315208232325	WITHOUT_CLASSIFICATION	1.6847917676747438E-4	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9998543445233772	WITHOUT_CLASSIFICATION	1.456554766229046E-4	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999937367214891	WITHOUT_CLASSIFICATION	6.263278510947386E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9923474117260194	WITHOUT_CLASSIFICATION	0.007652588273980594	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999391266971073	WITHOUT_CLASSIFICATION	6.087330289277266E-5	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999714448369803	WITHOUT_CLASSIFICATION	2.8555163019701217E-5	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999172793288079	WITHOUT_CLASSIFICATION	8.272067119209226E-5	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.5942745913202848	WITHOUT_CLASSIFICATION	0.4057254086797153	IMPLEMENTATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999905215810997	WITHOUT_CLASSIFICATION	9.478418900216113E-6	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999360047557347	WITHOUT_CLASSIFICATION	6.399524426523467E-5	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999788271294394	WITHOUT_CLASSIFICATION	2.1172870560609823E-5	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999858371690418	WITHOUT_CLASSIFICATION	1.4162830958191606E-5	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9997675980484291	WITHOUT_CLASSIFICATION	2.324019515709976E-4	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999491754001635	WITHOUT_CLASSIFICATION	5.0824599836605665E-5	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9997732457403709	WITHOUT_CLASSIFICATION	2.2675425962919663E-4	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999748094687565	WITHOUT_CLASSIFICATION	2.5190531243513838E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999914423621953	WITHOUT_CLASSIFICATION	8.557637804792157E-6	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999545146009332	WITHOUT_CLASSIFICATION	4.548539906671739E-5	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998618357232177	WITHOUT_CLASSIFICATION	1.3816427678231498E-4	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998621180407048	WITHOUT_CLASSIFICATION	1.37881959295112E-4	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9998662712319242	WITHOUT_CLASSIFICATION	1.33728768075747E-4	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9997714922054696	WITHOUT_CLASSIFICATION	2.2850779453049207E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999715843330335	WITHOUT_CLASSIFICATION	2.8415666966503038E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999320926770875	WITHOUT_CLASSIFICATION	6.790732291255146E-5	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999320926770875	WITHOUT_CLASSIFICATION	6.790732291255146E-5	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9997714922054696	WITHOUT_CLASSIFICATION	2.2850779453049207E-4	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.8974614956808413	IMPLEMENTATION	0.1025385043191587	WITHOUT_CLASSIFICATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9998677303261573	WITHOUT_CLASSIFICATION	1.322696738427136E-4	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997195280520134	WITHOUT_CLASSIFICATION	2.804719479867226E-4	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999620584368603	WITHOUT_CLASSIFICATION	3.794156313978432E-5	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999637847907457	WITHOUT_CLASSIFICATION	3.621520925428839E-5	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9893037604210141	WITHOUT_CLASSIFICATION	0.010696239578985894	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.999711742551882	WITHOUT_CLASSIFICATION	2.8825744811803204E-4	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9969443906841555	WITHOUT_CLASSIFICATION	0.003055609315844497	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9997748227523857	WITHOUT_CLASSIFICATION	2.2517724761413565E-4	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999447377612104	WITHOUT_CLASSIFICATION	5.526223878950378E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999320926770875	WITHOUT_CLASSIFICATION	6.790732291255146E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999518045949954	WITHOUT_CLASSIFICATION	4.819540500456778E-5	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9992537085580245	WITHOUT_CLASSIFICATION	7.462914419754706E-4	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999887583205234	WITHOUT_CLASSIFICATION	1.1241679476529925E-5	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999963807009984	WITHOUT_CLASSIFICATION	3.619299001585989E-6	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999775059723807	WITHOUT_CLASSIFICATION	2.249402761933993E-5	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999908881513352	WITHOUT_CLASSIFICATION	9.111848664797269E-6	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999884046197008	WITHOUT_CLASSIFICATION	1.1595380299277755E-5	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999898849760763	WITHOUT_CLASSIFICATION	1.0115023923717822E-5	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999511985785681	WITHOUT_CLASSIFICATION	4.8801421432041787E-5	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999749971053474	WITHOUT_CLASSIFICATION	2.5002894652653127E-5	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998397789388846	WITHOUT_CLASSIFICATION	1.6022106111536263E-4	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998393766616874	WITHOUT_CLASSIFICATION	1.6062333831249822E-4	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.7283642171420106	WITHOUT_CLASSIFICATION	0.27163578285798945	IMPLEMENTATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9997731014804361	WITHOUT_CLASSIFICATION	2.268985195639048E-4	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999745471041908	WITHOUT_CLASSIFICATION	2.5452895809188472E-5	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9976647808306793	WITHOUT_CLASSIFICATION	0.0023352191693206065	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.999924755672271	WITHOUT_CLASSIFICATION	7.524432772904788E-5	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999997636546252	WITHOUT_CLASSIFICATION	2.3634537477748828E-7	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999770882754237	WITHOUT_CLASSIFICATION	2.291172457629951E-4	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9998969949051368	WITHOUT_CLASSIFICATION	1.0300509486308704E-4	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999981259787406	WITHOUT_CLASSIFICATION	1.8740212594097921E-6	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9998871032882238	WITHOUT_CLASSIFICATION	1.1289671177618191E-4	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.999983450752469	WITHOUT_CLASSIFICATION	1.6549247531000038E-5	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999496639964	WITHOUT_CLASSIFICATION	5.0336003544168415E-8	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9998871032882238	WITHOUT_CLASSIFICATION	1.1289671177618191E-4	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9951923693831163	WITHOUT_CLASSIFICATION	0.004807630616883736	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9996718635010531	WITHOUT_CLASSIFICATION	3.2813649894691165E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9997904328299594	WITHOUT_CLASSIFICATION	2.0956717004063532E-4	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.9998279000583563	WITHOUT_CLASSIFICATION	1.7209994164365267E-4	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998763474659715	WITHOUT_CLASSIFICATION	1.2365253402844066E-4	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998763474659715	WITHOUT_CLASSIFICATION	1.2365253402844066E-4	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998556462687652	WITHOUT_CLASSIFICATION	1.44353731234817E-4	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999998600114761	WITHOUT_CLASSIFICATION	1.3998852386409207E-7	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9997741388564867	WITHOUT_CLASSIFICATION	2.258611435132327E-4	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999914771627154	WITHOUT_CLASSIFICATION	8.522837284607787E-6	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9993331713624127	WITHOUT_CLASSIFICATION	6.668286375873447E-4	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999991108818023	WITHOUT_CLASSIFICATION	8.891181977013484E-6	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999836747897405	WITHOUT_CLASSIFICATION	1.632521025949809E-5	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.9977048461426906	WITHOUT_CLASSIFICATION	0.002295153857309459	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9998670517419048	WITHOUT_CLASSIFICATION	1.3294825809525199E-4	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999834854004076	WITHOUT_CLASSIFICATION	1.6514599592453377E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999724854333031	WITHOUT_CLASSIFICATION	2.7514566696868083E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999724854333031	WITHOUT_CLASSIFICATION	2.7514566696868083E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999253513733665	WITHOUT_CLASSIFICATION	7.46486266335138E-5	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998463801838384	WITHOUT_CLASSIFICATION	1.5361981616148572E-4	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999934788384192	WITHOUT_CLASSIFICATION	6.521161580794725E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999724854333031	WITHOUT_CLASSIFICATION	2.7514566696868083E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999253513733665	WITHOUT_CLASSIFICATION	7.46486266335138E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999253513733665	WITHOUT_CLASSIFICATION	7.46486266335138E-5	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999781354918674	WITHOUT_CLASSIFICATION	2.1864508132522014E-5	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998045787082218	WITHOUT_CLASSIFICATION	1.9542129177815715E-4	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999996637064487	WITHOUT_CLASSIFICATION	3.362935513124728E-7	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999896164060738	WITHOUT_CLASSIFICATION	1.03835939263455E-5	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9979127352046417	WITHOUT_CLASSIFICATION	0.002087264795358196	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9979127352046417	WITHOUT_CLASSIFICATION	0.002087264795358196	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999643939258034	WITHOUT_CLASSIFICATION	3.560607419653105E-5	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999850833637561	WITHOUT_CLASSIFICATION	1.4916636243886055E-4	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.9999876426445256	WITHOUT_CLASSIFICATION	1.2357355474581371E-5	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999911285267803	WITHOUT_CLASSIFICATION	8.871473219670242E-6	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999911285267803	WITHOUT_CLASSIFICATION	8.871473219670242E-6	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999582585983735	WITHOUT_CLASSIFICATION	4.174140162662655E-5	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999529752351154	WITHOUT_CLASSIFICATION	4.7024764884600484E-4	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999676667384788	WITHOUT_CLASSIFICATION	3.233326152117884E-5	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999997948665663	WITHOUT_CLASSIFICATION	2.0513343356015948E-7	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999588151130204	WITHOUT_CLASSIFICATION	4.118488697954629E-5	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999416235658631	WITHOUT_CLASSIFICATION	5.837643413690415E-4	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9994660775581573	WITHOUT_CLASSIFICATION	5.339224418427531E-4	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.9998961226486426	WITHOUT_CLASSIFICATION	1.0387735135741007E-4	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999676667384788	WITHOUT_CLASSIFICATION	3.233326152117884E-5	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.9999814830225624	WITHOUT_CLASSIFICATION	1.8516977437521807E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999785050239044	WITHOUT_CLASSIFICATION	2.1494976095671705E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999785050239044	WITHOUT_CLASSIFICATION	2.1494976095671705E-5	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.999999346406871	WITHOUT_CLASSIFICATION	6.535931289021246E-7	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999770637257493	WITHOUT_CLASSIFICATION	2.2936274250617284E-5	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.999559119916081	WITHOUT_CLASSIFICATION	4.408800839189248E-4	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9993070030665203	WITHOUT_CLASSIFICATION	6.929969334797621E-4	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998529045750675	WITHOUT_CLASSIFICATION	1.4709542493252333E-4	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.9998953856050046	WITHOUT_CLASSIFICATION	1.046143949953691E-4	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9999838739497182	WITHOUT_CLASSIFICATION	1.6126050281813433E-5	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.9999018473048401	WITHOUT_CLASSIFICATION	9.815269515999755E-5	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9967556434681891	WITHOUT_CLASSIFICATION	0.003244356531810783	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999969903683981	WITHOUT_CLASSIFICATION	3.0096316020726102E-6	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999969903683981	WITHOUT_CLASSIFICATION	3.0096316020726102E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999313274274658	WITHOUT_CLASSIFICATION	6.867257253416746E-5	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999916781435391	WITHOUT_CLASSIFICATION	8.321856460980599E-6	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999394939782017	WITHOUT_CLASSIFICATION	6.0506021798290915E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999573962023817	WITHOUT_CLASSIFICATION	4.260379761829022E-5	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9998327334229974	WITHOUT_CLASSIFICATION	1.6726657700250215E-4	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9998571190069194	WITHOUT_CLASSIFICATION	1.4288099308062111E-4	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9998670757865489	WITHOUT_CLASSIFICATION	1.3292421345118745E-4	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.9998571134386313	WITHOUT_CLASSIFICATION	1.4288656136867464E-4	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.999905966376274	WITHOUT_CLASSIFICATION	9.403362372591952E-5	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.999946992151747	WITHOUT_CLASSIFICATION	5.300784825287423E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.999936564438741	WITHOUT_CLASSIFICATION	6.34355612589845E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.9998571134386313	WITHOUT_CLASSIFICATION	1.4288656136867464E-4	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9996818968460116	WITHOUT_CLASSIFICATION	3.1810315398838907E-4	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9996621701649091	WITHOUT_CLASSIFICATION	3.378298350908287E-4	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.9998675326470261	WITHOUT_CLASSIFICATION	1.3246735297392078E-4	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.999936111824755	WITHOUT_CLASSIFICATION	6.388817524508226E-5	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999558745397727	WITHOUT_CLASSIFICATION	4.4125460227247935E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9997952433091252	WITHOUT_CLASSIFICATION	2.0475669087480775E-4	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9983848984012625	WITHOUT_CLASSIFICATION	0.0016151015987374495	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999009406042456	WITHOUT_CLASSIFICATION	9.905939575436773E-5	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999488866156488	WITHOUT_CLASSIFICATION	5.111338435126491E-5	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999378240431663	WITHOUT_CLASSIFICATION	6.217595683372019E-5	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999401320381464	WITHOUT_CLASSIFICATION	5.986796185368922E-5	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999763837191986	WITHOUT_CLASSIFICATION	2.3616280801406543E-5	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999012620576868	WITHOUT_CLASSIFICATION	9.87379423131556E-5	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.996408887500679	WITHOUT_CLASSIFICATION	0.0035911124993210654	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.9999933085380344	WITHOUT_CLASSIFICATION	6.691461965653387E-6	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999573962023817	WITHOUT_CLASSIFICATION	4.260379761829022E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999573962023817	WITHOUT_CLASSIFICATION	4.260379761829022E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999288816238967	WITHOUT_CLASSIFICATION	7.111837610319541E-5	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999310693583336	WITHOUT_CLASSIFICATION	6.893064166639232E-5	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999505120155442	WITHOUT_CLASSIFICATION	4.948798445573268E-5	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999132589703709	WITHOUT_CLASSIFICATION	8.674102962917024E-5	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9999311692893901	WITHOUT_CLASSIFICATION	6.883071060994285E-5	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999283733436608	WITHOUT_CLASSIFICATION	7.16266563391776E-5	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.9999494044900943	WITHOUT_CLASSIFICATION	5.059550990582466E-5	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9996895959756261	WITHOUT_CLASSIFICATION	3.104040243739912E-4	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9996895959756261	WITHOUT_CLASSIFICATION	3.104040243739912E-4	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999779403141199	WITHOUT_CLASSIFICATION	2.20596858800533E-5	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999939285735299	WITHOUT_CLASSIFICATION	6.071426470219334E-6	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9998977204238961	WITHOUT_CLASSIFICATION	1.022795761039212E-4	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999263781539632	WITHOUT_CLASSIFICATION	7.362184603671492E-5	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9998608392236453	WITHOUT_CLASSIFICATION	1.3916077635466436E-4	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.9999733523464408	WITHOUT_CLASSIFICATION	2.6647653559114496E-5	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.9999795866011626	WITHOUT_CLASSIFICATION	2.0413398837416953E-5	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999864671739951	WITHOUT_CLASSIFICATION	1.3532826004909463E-4	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.999956066386079	WITHOUT_CLASSIFICATION	4.393361392094694E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.999956066386079	WITHOUT_CLASSIFICATION	4.393361392094694E-5	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.9999284140423079	WITHOUT_CLASSIFICATION	7.158595769213478E-5	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999682584903437	WITHOUT_CLASSIFICATION	3.174150965636364E-5	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.9999284140423079	WITHOUT_CLASSIFICATION	7.158595769213478E-5	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999343517205188	WITHOUT_CLASSIFICATION	6.56482794811667E-5	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.9999567961415923	WITHOUT_CLASSIFICATION	4.320385840765797E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999573962023817	WITHOUT_CLASSIFICATION	4.260379761829022E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.9999580808002875	WITHOUT_CLASSIFICATION	4.1919199712578204E-5	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.9998381623912298	WITHOUT_CLASSIFICATION	1.6183760877011037E-4	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999942361786555	WITHOUT_CLASSIFICATION	5.7638213445493925E-6	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999767892756272	WITHOUT_CLASSIFICATION	2.32107243728166E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999767892756272	WITHOUT_CLASSIFICATION	2.32107243728166E-5	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.9970906763746918	WITHOUT_CLASSIFICATION	0.002909323625308178	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.999994311857705	WITHOUT_CLASSIFICATION	5.688142295063477E-6	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.9999500925896906	WITHOUT_CLASSIFICATION	4.990741030953752E-5	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.9999308795885938	WITHOUT_CLASSIFICATION	6.912041140609938E-5	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9999710319838395	WITHOUT_CLASSIFICATION	2.8968016160455526E-5	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.9999322302066678	WITHOUT_CLASSIFICATION	6.77697933321854E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999950690449587	WITHOUT_CLASSIFICATION	4.930955041219028E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999306110523779	WITHOUT_CLASSIFICATION	6.938894762198877E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999306110523779	WITHOUT_CLASSIFICATION	6.938894762198877E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999463968607034	WITHOUT_CLASSIFICATION	5.3603139296586576E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999463968607034	WITHOUT_CLASSIFICATION	5.3603139296586576E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999508248173309	WITHOUT_CLASSIFICATION	4.917518266924869E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999508248173309	WITHOUT_CLASSIFICATION	4.917518266924869E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998745715917985	WITHOUT_CLASSIFICATION	1.2542840820150736E-4	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998745715917985	WITHOUT_CLASSIFICATION	1.2542840820150736E-4	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999767892756272	WITHOUT_CLASSIFICATION	2.32107243728166E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999950690449587	WITHOUT_CLASSIFICATION	4.930955041219028E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999306110523779	WITHOUT_CLASSIFICATION	6.938894762198877E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999306110523779	WITHOUT_CLASSIFICATION	6.938894762198877E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999463968607034	WITHOUT_CLASSIFICATION	5.3603139296586576E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999508248173309	WITHOUT_CLASSIFICATION	4.917518266924869E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999508248173309	WITHOUT_CLASSIFICATION	4.917518266924869E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998745715917985	WITHOUT_CLASSIFICATION	1.2542840820150736E-4	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999271415740364	WITHOUT_CLASSIFICATION	7.285842596364527E-5	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999522584861453	WITHOUT_CLASSIFICATION	4.7741513854641837E-5	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.9998826904374889	WITHOUT_CLASSIFICATION	1.1730956251113692E-4	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998050661682936	WITHOUT_CLASSIFICATION	1.9493383170634165E-4	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.9999118567839258	WITHOUT_CLASSIFICATION	8.814321607428054E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999306923469373	WITHOUT_CLASSIFICATION	6.930765306264645E-5	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999962235619182	WITHOUT_CLASSIFICATION	3.7764380817466675E-6	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.999996497081659	WITHOUT_CLASSIFICATION	3.5029183409958973E-6	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999987161703244	WITHOUT_CLASSIFICATION	1.2838296756103165E-6	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9969039362166469	WITHOUT_CLASSIFICATION	0.003096063783353053	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998838369880383	WITHOUT_CLASSIFICATION	1.1616301196167325E-4	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999831848332993	WITHOUT_CLASSIFICATION	1.6815166700693984E-5	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998556462687652	WITHOUT_CLASSIFICATION	1.44353731234817E-4	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999306923469373	WITHOUT_CLASSIFICATION	6.930765306264645E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999306923469373	WITHOUT_CLASSIFICATION	6.930765306264645E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999306923469373	WITHOUT_CLASSIFICATION	6.930765306264645E-5	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999877262891491	WITHOUT_CLASSIFICATION	1.2273710850915253E-5	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999669186022551	WITHOUT_CLASSIFICATION	3.308139774490351E-4	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999669186022551	WITHOUT_CLASSIFICATION	3.308139774490351E-4	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999331145432261	WITHOUT_CLASSIFICATION	6.688545677383473E-5	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999999819978146	WITHOUT_CLASSIFICATION	1.8002185394387988E-7	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999870807323284	WITHOUT_CLASSIFICATION	1.2919267671467266E-5	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9974061323775539	WITHOUT_CLASSIFICATION	0.0025938676224460714	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9974061323775539	WITHOUT_CLASSIFICATION	0.0025938676224460714	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999860626231688	WITHOUT_CLASSIFICATION	1.3937376831164765E-5	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9996862681312361	WITHOUT_CLASSIFICATION	3.137318687639906E-4	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9996862681312361	WITHOUT_CLASSIFICATION	3.137318687639906E-4	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9976870168701127	WITHOUT_CLASSIFICATION	0.0023129831298872626	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999866429052243	WITHOUT_CLASSIFICATION	1.3357094775820305E-5	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999937367214891	WITHOUT_CLASSIFICATION	6.263278510947386E-6	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.9999383991662534	WITHOUT_CLASSIFICATION	6.160083374666071E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999314949391103	WITHOUT_CLASSIFICATION	6.85050608896499E-5	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.6377470346986255	WITHOUT_CLASSIFICATION	0.3622529653013744	IMPLEMENTATION
ID	WITHOUT_CLASSIFICATION	0.9998155156412095	WITHOUT_CLASSIFICATION	1.844843587905324E-4	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999447247377163	WITHOUT_CLASSIFICATION	5.5275262283606904E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999914378247635	WITHOUT_CLASSIFICATION	8.562175236505742E-5	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.999903370448297	WITHOUT_CLASSIFICATION	9.662955170291789E-5	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999987750483853	WITHOUT_CLASSIFICATION	1.2249516146886555E-6	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999172793288079	WITHOUT_CLASSIFICATION	8.272067119209226E-5	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9998925799758758	WITHOUT_CLASSIFICATION	1.0742002412421745E-4	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9998579501860217	WITHOUT_CLASSIFICATION	1.420498139782574E-4	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9999312775864869	WITHOUT_CLASSIFICATION	6.87224135130244E-5	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999307267826127	WITHOUT_CLASSIFICATION	6.927321738729058E-5	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.99986331192961	WITHOUT_CLASSIFICATION	1.366880703900632E-4	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999704408019758	WITHOUT_CLASSIFICATION	2.9559198024191225E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999937367214891	WITHOUT_CLASSIFICATION	6.263278510947386E-6	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9998571069234308	WITHOUT_CLASSIFICATION	1.428930765691941E-4	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.9999131707113166	WITHOUT_CLASSIFICATION	8.68292886833899E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999339390576005	WITHOUT_CLASSIFICATION	6.606094239950228E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999314949391103	WITHOUT_CLASSIFICATION	6.85050608896499E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999704408019758	WITHOUT_CLASSIFICATION	2.9559198024191225E-5	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9998571069234308	WITHOUT_CLASSIFICATION	1.428930765691941E-4	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999339390576005	WITHOUT_CLASSIFICATION	6.606094239950228E-5	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998214092669605	WITHOUT_CLASSIFICATION	1.785907330395055E-4	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.9999307226600458	WITHOUT_CLASSIFICATION	6.927733995422588E-5	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998214092669605	WITHOUT_CLASSIFICATION	1.785907330395055E-4	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9996560157326682	WITHOUT_CLASSIFICATION	3.4398426733183606E-4	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.9998942391752543	WITHOUT_CLASSIFICATION	1.0576082474570381E-4	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999998225590891	WITHOUT_CLASSIFICATION	1.774409108538791E-7	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999970822986284	WITHOUT_CLASSIFICATION	2.9177013716105003E-6	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9937040857310206	WITHOUT_CLASSIFICATION	0.00629591426897944	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999457501683228	WITHOUT_CLASSIFICATION	5.424983167723676E-5	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9957051341687111	WITHOUT_CLASSIFICATION	0.00429486583128899	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9948426629345783	WITHOUT_CLASSIFICATION	0.005157337065421598	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999457501683228	WITHOUT_CLASSIFICATION	5.424983167723676E-5	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999391266971073	WITHOUT_CLASSIFICATION	6.087330289277266E-5	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998864263688331	WITHOUT_CLASSIFICATION	1.1357363116695619E-4	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999704408019758	WITHOUT_CLASSIFICATION	2.9559198024191225E-5	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9998851319770883	WITHOUT_CLASSIFICATION	1.1486802291177756E-4	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.999918368635781	WITHOUT_CLASSIFICATION	8.163136421898083E-5	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9982612522403062	WITHOUT_CLASSIFICATION	0.0017387477596938258	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.999888195170493	WITHOUT_CLASSIFICATION	1.1180482950708836E-4	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999703057368009	WITHOUT_CLASSIFICATION	2.9694263199018814E-5	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999984428457948	WITHOUT_CLASSIFICATION	1.557154205228016E-6	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.99999074956235	WITHOUT_CLASSIFICATION	9.250437649923764E-6	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.999715513195644	WITHOUT_CLASSIFICATION	2.844868043559819E-4	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.9999308748046877	WITHOUT_CLASSIFICATION	6.91251953122875E-5	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999607884545076	WITHOUT_CLASSIFICATION	3.9211545492401795E-4	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999351903537474	WITHOUT_CLASSIFICATION	6.480964625256414E-5	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9972528573772945	WITHOUT_CLASSIFICATION	0.002747142622705443	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999172793288079	WITHOUT_CLASSIFICATION	8.272067119209226E-5	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.9998490224377811	WITHOUT_CLASSIFICATION	1.5097756221897946E-4	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.999948631918835	WITHOUT_CLASSIFICATION	5.136808116498013E-5	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.9996610491708814	WITHOUT_CLASSIFICATION	3.3895082911863836E-4	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.9998716630945631	WITHOUT_CLASSIFICATION	1.2833690543697531E-4	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.9998721075100149	WITHOUT_CLASSIFICATION	1.2789248998507492E-4	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999522189768866	WITHOUT_CLASSIFICATION	4.778102311331701E-5	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999036684162	WITHOUT_CLASSIFICATION	9.633158372572936E-8	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999699518525648	WITHOUT_CLASSIFICATION	3.0048147435256716E-5	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9953943957298919	WITHOUT_CLASSIFICATION	0.0046056042701080714	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.999853886372504	WITHOUT_CLASSIFICATION	1.461136274960302E-4	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.99811067950433	WITHOUT_CLASSIFICATION	0.001889320495670045	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.99811067950433	WITHOUT_CLASSIFICATION	0.001889320495670045	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.999968700553112	WITHOUT_CLASSIFICATION	3.1299446888005875E-5	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999714264658435	WITHOUT_CLASSIFICATION	2.8573534156499508E-5	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.999944967436442	WITHOUT_CLASSIFICATION	5.5032563557953136E-5	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999352458069383	WITHOUT_CLASSIFICATION	6.475419306169434E-5	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999724526880707	WITHOUT_CLASSIFICATION	2.754731192934477E-5	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999447704594618	WITHOUT_CLASSIFICATION	5.522954053825294E-5	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999781184163768	WITHOUT_CLASSIFICATION	2.188158362316766E-5	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9173777031123532	WITHOUT_CLASSIFICATION	0.08262229688764686	IMPLEMENTATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999932483695225	WITHOUT_CLASSIFICATION	6.7516304775544654E-6	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999416061208454	WITHOUT_CLASSIFICATION	5.839387915457697E-5	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.9998578802966941	WITHOUT_CLASSIFICATION	1.4211970330580556E-4	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9989341686947274	WITHOUT_CLASSIFICATION	0.0010658313052726368	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9998922688247877	WITHOUT_CLASSIFICATION	1.0773117521246985E-4	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999277103598562	WITHOUT_CLASSIFICATION	7.228964014383544E-5	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9990958631812105	WITHOUT_CLASSIFICATION	9.041368187896432E-4	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9998811997752636	WITHOUT_CLASSIFICATION	1.188002247364906E-4	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999515322545863	WITHOUT_CLASSIFICATION	4.8467745413749127E-5	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999705490591559	WITHOUT_CLASSIFICATION	2.945094084413496E-5	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999824209601929	WITHOUT_CLASSIFICATION	1.7579039807096575E-4	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9997303110240235	WITHOUT_CLASSIFICATION	2.6968897597638036E-4	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999585699122958	WITHOUT_CLASSIFICATION	4.1430087704175636E-5	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9997234522832265	WITHOUT_CLASSIFICATION	2.765477167734814E-4	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9998811997752636	WITHOUT_CLASSIFICATION	1.188002247364906E-4	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9998804619016289	WITHOUT_CLASSIFICATION	1.1953809837098011E-4	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998285061846113	WITHOUT_CLASSIFICATION	1.7149381538874686E-4	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9998275281687109	WITHOUT_CLASSIFICATION	1.724718312889873E-4	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999282385759	WITHOUT_CLASSIFICATION	7.176142412652124E-8	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9998787439746063	WITHOUT_CLASSIFICATION	1.2125602539371443E-4	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999705490591559	WITHOUT_CLASSIFICATION	2.945094084413496E-5	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9997475382087819	WITHOUT_CLASSIFICATION	2.524617912180765E-4	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9996331803534313	WITHOUT_CLASSIFICATION	3.668196465686158E-4	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9997741388564867	WITHOUT_CLASSIFICATION	2.258611435132327E-4	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999154403200927	WITHOUT_CLASSIFICATION	8.455967990725299E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999154403200927	WITHOUT_CLASSIFICATION	8.455967990725299E-5	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9998662712319242	WITHOUT_CLASSIFICATION	1.33728768075747E-4	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9996808221121514	WITHOUT_CLASSIFICATION	3.1917788784861E-4	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9998527138445057	WITHOUT_CLASSIFICATION	1.4728615549430268E-4	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9998527138445057	WITHOUT_CLASSIFICATION	1.4728615549430268E-4	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9953943957298919	WITHOUT_CLASSIFICATION	0.0046056042701080714	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999922352104511	WITHOUT_CLASSIFICATION	7.764789548898971E-5	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999896187454543	WITHOUT_CLASSIFICATION	1.038125454569187E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999905660233722	WITHOUT_CLASSIFICATION	9.433976627804342E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999313274274658	WITHOUT_CLASSIFICATION	6.867257253416746E-5	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999896187454543	WITHOUT_CLASSIFICATION	1.038125454569187E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999905660233722	WITHOUT_CLASSIFICATION	9.433976627804342E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.8789047727098289	WITHOUT_CLASSIFICATION	0.12109522729017108	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999994813454456	WITHOUT_CLASSIFICATION	5.186545544490182E-7	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999311091346648	WITHOUT_CLASSIFICATION	6.889086533523363E-5	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.9999988738719588	WITHOUT_CLASSIFICATION	1.1261280410835396E-6	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9982320219416223	WITHOUT_CLASSIFICATION	0.0017679780583776277	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.6314696124277159	IMPLEMENTATION	0.36853038757228396	WITHOUT_CLASSIFICATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9997205852828813	WITHOUT_CLASSIFICATION	2.794147171185767E-4	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9997205852828813	WITHOUT_CLASSIFICATION	2.794147171185767E-4	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999642886086901	WITHOUT_CLASSIFICATION	3.5711391309880905E-5	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999851788771014	WITHOUT_CLASSIFICATION	1.48211228986113E-5	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9996148110442651	WITHOUT_CLASSIFICATION	3.8518895573493245E-4	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999908244057748	WITHOUT_CLASSIFICATION	9.175594225211996E-6	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999925256623717	WITHOUT_CLASSIFICATION	7.474337628273932E-6	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.999655399884139	WITHOUT_CLASSIFICATION	3.446001158610082E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999313274274658	WITHOUT_CLASSIFICATION	6.867257253416746E-5	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.999655399884139	WITHOUT_CLASSIFICATION	3.446001158610082E-4	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999708997788183	WITHOUT_CLASSIFICATION	2.910022118170743E-5	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999708997788183	WITHOUT_CLASSIFICATION	2.910022118170743E-5	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999316223145605	WITHOUT_CLASSIFICATION	6.837768543953034E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.8789047727098289	WITHOUT_CLASSIFICATION	0.12109522729017108	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9898938851016708	WITHOUT_CLASSIFICATION	0.010106114898329337	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999847712593509	WITHOUT_CLASSIFICATION	1.5228740649089369E-5	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9883334933824367	WITHOUT_CLASSIFICATION	0.011666506617563303	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999869696188018	WITHOUT_CLASSIFICATION	1.3030381198065273E-5	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9994371754295307	WITHOUT_CLASSIFICATION	5.628245704692841E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.8789047727098289	WITHOUT_CLASSIFICATION	0.12109522729017108	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999869696188018	WITHOUT_CLASSIFICATION	1.3030381198065273E-5	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9994371754295307	WITHOUT_CLASSIFICATION	5.628245704692841E-4	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999845232627987	WITHOUT_CLASSIFICATION	1.5476737201232973E-5	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9997156293829093	WITHOUT_CLASSIFICATION	2.843706170907975E-4	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999767448906886	WITHOUT_CLASSIFICATION	2.3255109311522734E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.8789047727098289	WITHOUT_CLASSIFICATION	0.12109522729017108	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.8789047727098289	WITHOUT_CLASSIFICATION	0.12109522729017108	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9999831124660707	WITHOUT_CLASSIFICATION	1.6887533929358862E-5	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.9999668678527336	WITHOUT_CLASSIFICATION	3.3132147266320626E-5	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.9999643563080337	WITHOUT_CLASSIFICATION	3.5643691966349445E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999914423621953	WITHOUT_CLASSIFICATION	8.557637804792157E-6	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.9999844570773382	WITHOUT_CLASSIFICATION	1.5542922661824267E-5	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999488075132562	WITHOUT_CLASSIFICATION	5.1192486743779506E-5	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9989862932827769	WITHOUT_CLASSIFICATION	0.001013706717223127	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9998190966929716	WITHOUT_CLASSIFICATION	1.8090330702831708E-4	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999813968822227	WITHOUT_CLASSIFICATION	1.8603117777292596E-5	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.9997840951218269	WITHOUT_CLASSIFICATION	2.159048781730857E-4	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9981266248726417	WITHOUT_CLASSIFICATION	0.0018733751273582806	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9637856137102394	WITHOUT_CLASSIFICATION	0.03621438628976068	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999934888380316	WITHOUT_CLASSIFICATION	6.5111619683026674E-6	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999675498907024	WITHOUT_CLASSIFICATION	3.2450109297597836E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999861838969908	WITHOUT_CLASSIFICATION	1.38161030092055E-4	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999978479315246	WITHOUT_CLASSIFICATION	2.152068475405283E-6	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999914423621953	WITHOUT_CLASSIFICATION	8.557637804792157E-6	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999616192870002	WITHOUT_CLASSIFICATION	3.838071299980183E-5	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999654365973483	WITHOUT_CLASSIFICATION	3.456340265167053E-5	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9997960628738298	WITHOUT_CLASSIFICATION	2.0393712617020694E-4	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9997764030167453	WITHOUT_CLASSIFICATION	2.2359698325462353E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999914423621953	WITHOUT_CLASSIFICATION	8.557637804792157E-6	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9779320765947332	WITHOUT_CLASSIFICATION	0.02206792340526675	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.999992952243103	WITHOUT_CLASSIFICATION	7.047756896930863E-6	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9962650876937865	WITHOUT_CLASSIFICATION	0.003734912306213564	IMPLEMENTATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999667213242854	WITHOUT_CLASSIFICATION	3.327867571455711E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999045396272843	WITHOUT_CLASSIFICATION	9.546037271560554E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.999649597580398	WITHOUT_CLASSIFICATION	3.504024196019959E-4	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9995893893517196	WITHOUT_CLASSIFICATION	4.1061064828039427E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716074628936	WITHOUT_CLASSIFICATION	1.2839253710630882E-4	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999762446816362	WITHOUT_CLASSIFICATION	2.375531836387764E-5	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999798318443677	WITHOUT_CLASSIFICATION	2.0168155632360844E-5	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999805524584952	WITHOUT_CLASSIFICATION	1.9447541504851686E-5	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999426055949322	WITHOUT_CLASSIFICATION	5.739440506778414E-5	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9998518811804404	WITHOUT_CLASSIFICATION	1.4811881955962604E-4	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881003161366	WITHOUT_CLASSIFICATION	1.189968386339496E-5	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9998618556359704	WITHOUT_CLASSIFICATION	1.381443640295638E-4	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9977344205381944	WITHOUT_CLASSIFICATION	0.0022655794618055333	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.999301250286729	WITHOUT_CLASSIFICATION	6.98749713271116E-4	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998433261044393	WITHOUT_CLASSIFICATION	1.5667389556087247E-4	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999823822974456	WITHOUT_CLASSIFICATION	1.7617702554403712E-5	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.99980225562346	WITHOUT_CLASSIFICATION	1.9774437653989266E-4	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999855179802918	WITHOUT_CLASSIFICATION	1.4482019708326078E-5	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977338727420729	WITHOUT_CLASSIFICATION	0.0022661272579271637	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998807229236589	WITHOUT_CLASSIFICATION	0.0011927707634109776	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977446923237611	WITHOUT_CLASSIFICATION	0.0022553076762389357	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998654771434318	WITHOUT_CLASSIFICATION	1.3452285656820342E-4	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970849821475617	WITHOUT_CLASSIFICATION	0.002915017852438452	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972589248121219	WITHOUT_CLASSIFICATION	0.002741075187878085	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970849821475617	WITHOUT_CLASSIFICATION	0.002915017852438452	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970849821475617	WITHOUT_CLASSIFICATION	0.002915017852438452	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.9989410734716896	WITHOUT_CLASSIFICATION	0.0010589265283103633	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9996859448763447	WITHOUT_CLASSIFICATION	3.1405512365530484E-4	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975995496397174	WITHOUT_CLASSIFICATION	0.00240045036028258	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976780983898258	WITHOUT_CLASSIFICATION	0.002321901610174234	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976260188712974	WITHOUT_CLASSIFICATION	0.0023739811287026105	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9926279491924468	WITHOUT_CLASSIFICATION	0.0073720508075531535	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971053466904598	WITHOUT_CLASSIFICATION	0.0028946533095402004	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970849821475617	WITHOUT_CLASSIFICATION	0.002915017852438452	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962931620316595	WITHOUT_CLASSIFICATION	0.003706837968340492	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970849821475617	WITHOUT_CLASSIFICATION	0.002915017852438452	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999792451239029	WITHOUT_CLASSIFICATION	2.0754876097107677E-5	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998631861514718	WITHOUT_CLASSIFICATION	1.3681384852814158E-4	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.8773130365550189	WITHOUT_CLASSIFICATION	0.12268696344498108	IMPLEMENTATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999986602780027	WITHOUT_CLASSIFICATION	1.3397219972903066E-5	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999749597962985	WITHOUT_CLASSIFICATION	2.50402037015094E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999454267308966	WITHOUT_CLASSIFICATION	5.4573269103473406E-5	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.999773330268364	WITHOUT_CLASSIFICATION	2.266697316360009E-4	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999428290943012	WITHOUT_CLASSIFICATION	5.717090569876636E-5	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999433929735814	WITHOUT_CLASSIFICATION	5.6607026418493175E-5	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9998543757275503	WITHOUT_CLASSIFICATION	1.456242724497082E-4	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9998598146274272	WITHOUT_CLASSIFICATION	1.401853725727087E-4	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999941395516656	WITHOUT_CLASSIFICATION	5.8604483343946644E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716074628936	WITHOUT_CLASSIFICATION	1.2839253710630882E-4	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998771017255029	WITHOUT_CLASSIFICATION	1.228982744969783E-4	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999308919171122	WITHOUT_CLASSIFICATION	6.910808288784095E-5	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999477784643286	WITHOUT_CLASSIFICATION	5.222153567139545E-5	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9998007307555556	WITHOUT_CLASSIFICATION	1.9926924444427268E-4	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999253795443224	WITHOUT_CLASSIFICATION	7.462045567765368E-5	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9995294461854726	WITHOUT_CLASSIFICATION	4.705538145273437E-4	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998729219562538	WITHOUT_CLASSIFICATION	1.2707804374610202E-4	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998789043002142	WITHOUT_CLASSIFICATION	1.2109569978580063E-4	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998660931692251	WITHOUT_CLASSIFICATION	1.3390683077489773E-4	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9975653019184009	WITHOUT_CLASSIFICATION	0.002434698081599178	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9995939546682125	WITHOUT_CLASSIFICATION	4.0604533178753186E-4	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.999948319389562	WITHOUT_CLASSIFICATION	5.168061043801209E-5	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998626839573495	WITHOUT_CLASSIFICATION	1.373160426505691E-4	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995184842431408	WITHOUT_CLASSIFICATION	4.815157568591905E-4	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999230930633404	WITHOUT_CLASSIFICATION	7.690693665969462E-5	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999868802540155	WITHOUT_CLASSIFICATION	1.3119745984585212E-5	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9998941770504313	WITHOUT_CLASSIFICATION	1.058229495686741E-4	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9997600332430029	WITHOUT_CLASSIFICATION	2.399667569970754E-4	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9995670510627274	WITHOUT_CLASSIFICATION	4.3294893727262236E-4	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9989657722202806	WITHOUT_CLASSIFICATION	0.001034227779719377	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999972741444342	WITHOUT_CLASSIFICATION	2.725855565793995E-6	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999378008046325	WITHOUT_CLASSIFICATION	6.21991953675053E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716074628936	WITHOUT_CLASSIFICATION	1.2839253710630882E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999454267308966	WITHOUT_CLASSIFICATION	5.4573269103473406E-5	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999266701902266	WITHOUT_CLASSIFICATION	7.332980977337207E-5	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999989576656663	WITHOUT_CLASSIFICATION	1.0423343336843817E-6	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999556046328566	WITHOUT_CLASSIFICATION	4.4395367143393435E-4	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999986602780027	WITHOUT_CLASSIFICATION	1.3397219972903066E-5	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999859375978769	WITHOUT_CLASSIFICATION	1.4062402123096317E-4	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.9998907416953007	WITHOUT_CLASSIFICATION	1.0925830469943694E-4	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9975653019184009	WITHOUT_CLASSIFICATION	0.002434698081599178	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999931027434578	WITHOUT_CLASSIFICATION	6.897256542145813E-6	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9996782255932711	WITHOUT_CLASSIFICATION	3.217744067288668E-4	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999928895233061	WITHOUT_CLASSIFICATION	7.110476693949139E-6	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998687780593642	WITHOUT_CLASSIFICATION	1.3122194063567208E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998803723349304	WITHOUT_CLASSIFICATION	1.1962766506945067E-4	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999372113109535	WITHOUT_CLASSIFICATION	6.27886890465294E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716074628936	WITHOUT_CLASSIFICATION	1.2839253710630882E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716074628936	WITHOUT_CLASSIFICATION	1.2839253710630882E-4	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9985309306201579	WITHOUT_CLASSIFICATION	0.001469069379842194	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999926054820917	WITHOUT_CLASSIFICATION	7.394517908328752E-6	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999929751264057	WITHOUT_CLASSIFICATION	7.024873594322484E-6	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999983706068363	WITHOUT_CLASSIFICATION	1.6293931636877961E-6	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.999975151642659	WITHOUT_CLASSIFICATION	2.4848357341018676E-5	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999986415886813	WITHOUT_CLASSIFICATION	1.3584113187038104E-5	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999366580291218	WITHOUT_CLASSIFICATION	6.334197087822432E-5	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.9998765637385445	WITHOUT_CLASSIFICATION	1.23436261455476E-4	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9998665885634909	WITHOUT_CLASSIFICATION	1.3341143650910433E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716074628936	WITHOUT_CLASSIFICATION	1.2839253710630882E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999997332563459	WITHOUT_CLASSIFICATION	2.6674365410051436E-6	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999491465243102	WITHOUT_CLASSIFICATION	5.085347568990221E-5	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999811343137124	WITHOUT_CLASSIFICATION	1.886568628758937E-5	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999559903909914	WITHOUT_CLASSIFICATION	4.4009609008557646E-5	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998945949881226	WITHOUT_CLASSIFICATION	1.0540501187734695E-4	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999597142797904	WITHOUT_CLASSIFICATION	4.0285720209682174E-5	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9998233960169832	WITHOUT_CLASSIFICATION	1.7660398301677427E-4	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.9999483837740036	WITHOUT_CLASSIFICATION	5.1616225996410234E-5	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9990428163263531	WITHOUT_CLASSIFICATION	9.571836736468117E-4	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9998332941255672	WITHOUT_CLASSIFICATION	1.6670587443274037E-4	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998324800479943	WITHOUT_CLASSIFICATION	1.6751995200568135E-4	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999986602780027	WITHOUT_CLASSIFICATION	1.3397219972903066E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999454267308966	WITHOUT_CLASSIFICATION	5.4573269103473406E-5	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9997283894982738	WITHOUT_CLASSIFICATION	2.7161050172621064E-4	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9946364253388099	WITHOUT_CLASSIFICATION	0.005363574661190077	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9905273575245667	WITHOUT_CLASSIFICATION	0.009472642475433305	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9998662712319242	WITHOUT_CLASSIFICATION	1.33728768075747E-4	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9998667308858475	WITHOUT_CLASSIFICATION	1.3326911415244137E-4	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9998670471268237	WITHOUT_CLASSIFICATION	1.3295287317614986E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999454267308966	WITHOUT_CLASSIFICATION	5.4573269103473406E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999491465243102	WITHOUT_CLASSIFICATION	5.085347568990221E-5	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9991511479314165	WITHOUT_CLASSIFICATION	8.48852068583592E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999997332563459	WITHOUT_CLASSIFICATION	2.6674365410051436E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716074628936	WITHOUT_CLASSIFICATION	1.2839253710630882E-4	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999697324971525	WITHOUT_CLASSIFICATION	3.0267502847490694E-5	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9990546920928113	WITHOUT_CLASSIFICATION	9.453079071887347E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716074628936	WITHOUT_CLASSIFICATION	1.2839253710630882E-4	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999937100850511	WITHOUT_CLASSIFICATION	6.289914948906877E-6	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999928895233061	WITHOUT_CLASSIFICATION	7.110476693949139E-6	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998687780593642	WITHOUT_CLASSIFICATION	1.3122194063567208E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998803723349304	WITHOUT_CLASSIFICATION	1.1962766506945067E-4	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9997371311416166	WITHOUT_CLASSIFICATION	2.6286885838345544E-4	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9994427462921944	WITHOUT_CLASSIFICATION	5.572537078055043E-4	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9998964040639221	WITHOUT_CLASSIFICATION	1.0359593607799248E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999997332563459	WITHOUT_CLASSIFICATION	2.6674365410051436E-6	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999697324971525	WITHOUT_CLASSIFICATION	3.0267502847490694E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716074628936	WITHOUT_CLASSIFICATION	1.2839253710630882E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999454267308966	WITHOUT_CLASSIFICATION	5.4573269103473406E-5	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999372113109535	WITHOUT_CLASSIFICATION	6.27886890465294E-5	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9985309306201579	WITHOUT_CLASSIFICATION	0.001469069379842194	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999926054820917	WITHOUT_CLASSIFICATION	7.394517908328752E-6	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998653355644739	WITHOUT_CLASSIFICATION	1.3466443552613246E-4	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997014761711073	WITHOUT_CLASSIFICATION	2.9852382889276793E-4	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999210334974846	WITHOUT_CLASSIFICATION	7.896650251536428E-5	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999911904900937	WITHOUT_CLASSIFICATION	8.809509906385104E-6	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9996861408709383	WITHOUT_CLASSIFICATION	3.138591290616563E-4	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970849821475617	WITHOUT_CLASSIFICATION	0.002915017852438452	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999992537778011	WITHOUT_CLASSIFICATION	7.462221989660937E-7	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998212852965969	WITHOUT_CLASSIFICATION	1.7871470340317927E-4	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999079880577981	WITHOUT_CLASSIFICATION	9.201194220195664E-5	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9996612477884821	WITHOUT_CLASSIFICATION	3.3875221151791543E-4	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970849821475617	WITHOUT_CLASSIFICATION	0.002915017852438452	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972589248121219	WITHOUT_CLASSIFICATION	0.002741075187878085	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976780983898258	WITHOUT_CLASSIFICATION	0.002321901610174234	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9998952252624684	WITHOUT_CLASSIFICATION	1.0477473753156431E-4	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999343492257093	WITHOUT_CLASSIFICATION	6.565077429068792E-5	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997328832139291	WITHOUT_CLASSIFICATION	0.002671167860709076	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970849821475617	WITHOUT_CLASSIFICATION	0.002915017852438452	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9988656332670203	WITHOUT_CLASSIFICATION	0.0011343667329797194	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716074628936	WITHOUT_CLASSIFICATION	1.2839253710630882E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716074628936	WITHOUT_CLASSIFICATION	1.2839253710630882E-4	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976260188712974	WITHOUT_CLASSIFICATION	0.0023739811287026105	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970849821475617	WITHOUT_CLASSIFICATION	0.002915017852438452	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9997600332430029	WITHOUT_CLASSIFICATION	2.399667569970754E-4	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999953186577217	WITHOUT_CLASSIFICATION	4.681342278290805E-6	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999701576121444	WITHOUT_CLASSIFICATION	2.9842387855699726E-5	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999969242989922	WITHOUT_CLASSIFICATION	3.0757010077851335E-6	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999915874152111	WITHOUT_CLASSIFICATION	8.41258478894838E-6	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999980076612126	WITHOUT_CLASSIFICATION	1.992338787276841E-6	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9998214092669605	WITHOUT_CLASSIFICATION	1.785907330395055E-4	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999831011781857	WITHOUT_CLASSIFICATION	1.6898821814331383E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999077378786421	WITHOUT_CLASSIFICATION	9.22621213579088E-5	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9995893893517196	WITHOUT_CLASSIFICATION	4.1061064828039427E-4	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9996092753380231	WITHOUT_CLASSIFICATION	3.907246619769207E-4	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.999982024401771	WITHOUT_CLASSIFICATION	1.797559822904112E-5	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999327259319594	WITHOUT_CLASSIFICATION	6.727406804058775E-5	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998510802432822	WITHOUT_CLASSIFICATION	1.4891975671791607E-4	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999860963916569	WITHOUT_CLASSIFICATION	1.3903608343156193E-5	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9998058725121575	WITHOUT_CLASSIFICATION	1.9412748784244054E-4	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997777936102406	WITHOUT_CLASSIFICATION	2.22206389759337E-4	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997002968296067	WITHOUT_CLASSIFICATION	2.997031703933802E-4	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999905155011218	WITHOUT_CLASSIFICATION	9.484498878079205E-6	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9998407555175932	WITHOUT_CLASSIFICATION	1.5924448240684657E-4	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9993078389800101	WITHOUT_CLASSIFICATION	6.921610199899925E-4	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999654541866002	WITHOUT_CLASSIFICATION	3.4545813399731944E-5	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999465290764632	WITHOUT_CLASSIFICATION	5.34709235369074E-5	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999080907925151	WITHOUT_CLASSIFICATION	9.190920748488823E-5	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999707603706639	WITHOUT_CLASSIFICATION	2.9239629336062548E-5	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9995673579969823	WITHOUT_CLASSIFICATION	4.3264200301770675E-4	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999323816162851	WITHOUT_CLASSIFICATION	6.761838371495093E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999080907925151	WITHOUT_CLASSIFICATION	9.190920748488823E-5	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999840345700552	WITHOUT_CLASSIFICATION	1.596542994464791E-5	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999742254927146	WITHOUT_CLASSIFICATION	2.5774507285355443E-5	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999490845848332	WITHOUT_CLASSIFICATION	5.0915415166823225E-5	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999254851581845	WITHOUT_CLASSIFICATION	7.451484181556139E-5	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9998401806549545	WITHOUT_CLASSIFICATION	1.598193450455083E-4	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9997870814909419	WITHOUT_CLASSIFICATION	2.1291850905801087E-4	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.9999395422048959	WITHOUT_CLASSIFICATION	6.045779510402223E-5	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999441629156494	WITHOUT_CLASSIFICATION	5.583708435071833E-5	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999441629156494	WITHOUT_CLASSIFICATION	5.583708435071833E-5	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999958005062438	WITHOUT_CLASSIFICATION	4.199493756197106E-5	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9998851911790274	WITHOUT_CLASSIFICATION	1.1480882097261571E-4	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999144259944123	WITHOUT_CLASSIFICATION	8.557400558781063E-5	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9998627959533609	WITHOUT_CLASSIFICATION	1.372040466390244E-4	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999992299274127	WITHOUT_CLASSIFICATION	7.700725871989391E-7	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9997658327912944	WITHOUT_CLASSIFICATION	2.341672087056331E-4	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999998178982706	WITHOUT_CLASSIFICATION	1.821017294101831E-7	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999960057980255	WITHOUT_CLASSIFICATION	3.994201974540173E-6	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999526622081123	WITHOUT_CLASSIFICATION	4.733779188774491E-5	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999716354873873	WITHOUT_CLASSIFICATION	2.8364512612683825E-5	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999942351537841	WITHOUT_CLASSIFICATION	5.7648462159128134E-5	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999985718973907	WITHOUT_CLASSIFICATION	1.4281026092997023E-5	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999898631100511	WITHOUT_CLASSIFICATION	1.0136889948908747E-4	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.8263703913309705	WITHOUT_CLASSIFICATION	0.17362960866902954	IMPLEMENTATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9994975445768097	WITHOUT_CLASSIFICATION	5.024554231902851E-4	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9998494324531673	WITHOUT_CLASSIFICATION	1.5056754683273556E-4	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9998574871105714	WITHOUT_CLASSIFICATION	1.4251288942855895E-4	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9979705199118433	WITHOUT_CLASSIFICATION	0.00202948008815674	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9997730664678283	WITHOUT_CLASSIFICATION	2.2693353217189148E-4	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999471977192258	WITHOUT_CLASSIFICATION	5.2802280774144684E-5	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999897128641155	WITHOUT_CLASSIFICATION	1.0287135884384621E-5	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999752075418993	WITHOUT_CLASSIFICATION	2.479245810069813E-5	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.993740518749792	WITHOUT_CLASSIFICATION	0.0062594812502080694	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.99999491892709	WITHOUT_CLASSIFICATION	5.081072909957357E-6	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999809294194306	WITHOUT_CLASSIFICATION	1.9070580569341746E-5	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9995452585594649	WITHOUT_CLASSIFICATION	4.547414405352698E-4	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9928691738672139	WITHOUT_CLASSIFICATION	0.007130826132786077	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9981143321404394	WITHOUT_CLASSIFICATION	0.001885667859560602	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9988282096251481	WITHOUT_CLASSIFICATION	0.0011717903748519236	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9998528038818714	WITHOUT_CLASSIFICATION	1.4719611812851095E-4	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999583719016875	WITHOUT_CLASSIFICATION	4.162809831255424E-5	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.9999325377666548	WITHOUT_CLASSIFICATION	6.746223334516425E-5	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999782624981163	WITHOUT_CLASSIFICATION	2.1737501883780136E-5	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.9999818175395558	WITHOUT_CLASSIFICATION	1.8182460444189764E-5	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999737006587499	WITHOUT_CLASSIFICATION	2.629934125012253E-5	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.9999092731319795	WITHOUT_CLASSIFICATION	9.07268680204507E-5	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999098596558369	WITHOUT_CLASSIFICATION	9.014034416315348E-5	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9847448265890243	WITHOUT_CLASSIFICATION	0.015255173410975738	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9996201027004438	WITHOUT_CLASSIFICATION	3.798972995562494E-4	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999782930538118	WITHOUT_CLASSIFICATION	2.170694618823072E-5	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999609454611261	WITHOUT_CLASSIFICATION	3.905453887390022E-4	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.999975151642659	WITHOUT_CLASSIFICATION	2.4848357341018676E-5	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.999975151642659	WITHOUT_CLASSIFICATION	2.4848357341018676E-5	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999955929863733	WITHOUT_CLASSIFICATION	4.4070136266953725E-5	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999937276387749	WITHOUT_CLASSIFICATION	6.272361225055232E-6	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999975606271792	WITHOUT_CLASSIFICATION	2.4393728207976465E-5	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999967112181204	WITHOUT_CLASSIFICATION	3.2887818795479865E-6	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999845294800672	WITHOUT_CLASSIFICATION	1.547051993271538E-5	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.9998985892795903	WITHOUT_CLASSIFICATION	1.0141072040975416E-4	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.99991517938757	WITHOUT_CLASSIFICATION	8.482061242992838E-5	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9996071401983335	WITHOUT_CLASSIFICATION	3.928598016664857E-4	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999971416293315	WITHOUT_CLASSIFICATION	2.8583706684575214E-6	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.9998039741320676	WITHOUT_CLASSIFICATION	1.9602586793244218E-4	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998151170526284	WITHOUT_CLASSIFICATION	1.8488294737154242E-4	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999112938301009	WITHOUT_CLASSIFICATION	8.870616989903003E-5	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9997741388564867	WITHOUT_CLASSIFICATION	2.258611435132327E-4	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998619046123587	WITHOUT_CLASSIFICATION	1.3809538764126614E-4	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999168352409173	WITHOUT_CLASSIFICATION	8.316475908259487E-5	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999062292005509	WITHOUT_CLASSIFICATION	9.377079944905855E-5	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9998984254617225	WITHOUT_CLASSIFICATION	1.0157453827753993E-4	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9996654792709037	WITHOUT_CLASSIFICATION	3.3452072909642905E-4	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9995546014129816	WITHOUT_CLASSIFICATION	4.4539858701834025E-4	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9997933382226499	WITHOUT_CLASSIFICATION	2.066617773500821E-4	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.9999367196151595	WITHOUT_CLASSIFICATION	6.328038484044506E-5	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999884745789565	WITHOUT_CLASSIFICATION	1.1525421043505198E-5	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9997933382226499	WITHOUT_CLASSIFICATION	2.066617773500821E-4	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.999991794216866	WITHOUT_CLASSIFICATION	8.205783133887136E-6	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.9999807970802631	WITHOUT_CLASSIFICATION	1.9202919736868853E-5	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.999550913117137	WITHOUT_CLASSIFICATION	4.490868828630052E-4	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9996171626662181	WITHOUT_CLASSIFICATION	3.828373337817704E-4	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.9995158627497819	WITHOUT_CLASSIFICATION	4.841372502181725E-4	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.999998796304401	WITHOUT_CLASSIFICATION	1.2036955988956208E-6	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999166315614428	WITHOUT_CLASSIFICATION	8.33684385571863E-5	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998052543172324	WITHOUT_CLASSIFICATION	1.9474568276746422E-4	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998621399897368	WITHOUT_CLASSIFICATION	1.3786001026322534E-4	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999953124737974	WITHOUT_CLASSIFICATION	4.687526202614223E-6	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999228347323154	WITHOUT_CLASSIFICATION	7.716526768456231E-5	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9993232206144717	WITHOUT_CLASSIFICATION	6.767793855283334E-4	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999093128321199	WITHOUT_CLASSIFICATION	9.068716788016541E-5	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9984663857112956	WITHOUT_CLASSIFICATION	0.0015336142887043087	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9994543267600563	WITHOUT_CLASSIFICATION	5.456732399436899E-4	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999351903537474	WITHOUT_CLASSIFICATION	6.480964625256414E-5	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999351903537474	WITHOUT_CLASSIFICATION	6.480964625256414E-5	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9979700107396158	WITHOUT_CLASSIFICATION	0.002029989260384101	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9998524726263971	WITHOUT_CLASSIFICATION	1.475273736028888E-4	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.9999352079083316	WITHOUT_CLASSIFICATION	6.479209166844749E-5	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999325220074164	WITHOUT_CLASSIFICATION	6.747799258359108E-5	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9955177148346194	WITHOUT_CLASSIFICATION	0.004482285165380681	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9997519045144265	WITHOUT_CLASSIFICATION	2.4809548557347443E-4	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999828223231559	WITHOUT_CLASSIFICATION	1.7177676844075644E-5	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.9999354493141063	WITHOUT_CLASSIFICATION	6.455068589372407E-5	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9786629565353646	WITHOUT_CLASSIFICATION	0.021337043464635306	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.6035129539071117	WITHOUT_CLASSIFICATION	0.39648704609288843	IMPLEMENTATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9995683338610262	WITHOUT_CLASSIFICATION	4.316661389737427E-4	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9970569251203005	WITHOUT_CLASSIFICATION	0.0029430748796995293	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9993842714976218	WITHOUT_CLASSIFICATION	6.157285023782749E-4	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9998986650076416	WITHOUT_CLASSIFICATION	1.0133499235840354E-4	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9998058725121575	WITHOUT_CLASSIFICATION	1.9412748784244054E-4	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9997563948204418	WITHOUT_CLASSIFICATION	2.4360517955825524E-4	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999928208474538	WITHOUT_CLASSIFICATION	7.179152546135827E-6	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9956046502168991	WITHOUT_CLASSIFICATION	0.004395349783100909	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999810678791305	WITHOUT_CLASSIFICATION	1.893212086945457E-5	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999936836295582	WITHOUT_CLASSIFICATION	6.3163704417853385E-6	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.9998435292700305	WITHOUT_CLASSIFICATION	1.5647072996944844E-4	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9897156478681196	WITHOUT_CLASSIFICATION	0.010284352131880496	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999819865094912	WITHOUT_CLASSIFICATION	1.8013490508759334E-5	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999327397164133	WITHOUT_CLASSIFICATION	6.72602835867569E-5	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9998969870549136	WITHOUT_CLASSIFICATION	1.0301294508638744E-4	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999772659632801	WITHOUT_CLASSIFICATION	2.273403671986495E-5	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.999903956916176	WITHOUT_CLASSIFICATION	9.604308382406649E-5	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9992923521994673	WITHOUT_CLASSIFICATION	7.076478005326967E-4	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9998708847143388	WITHOUT_CLASSIFICATION	1.29115285661117E-4	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9998308953380886	WITHOUT_CLASSIFICATION	1.691046619113782E-4	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9998196226567031	WITHOUT_CLASSIFICATION	1.8037734329690144E-4	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999868345431819	WITHOUT_CLASSIFICATION	1.3165456818086686E-5	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999358215385142	WITHOUT_CLASSIFICATION	6.417846148573412E-5	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999989907351339	WITHOUT_CLASSIFICATION	1.0092648662097152E-6	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9998800606030522	WITHOUT_CLASSIFICATION	1.1993939694779598E-4	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999386940433937	WITHOUT_CLASSIFICATION	6.130595660623015E-5	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9998123266984338	WITHOUT_CLASSIFICATION	1.8767330156611221E-4	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999263540923956	WITHOUT_CLASSIFICATION	7.364590760437767E-5	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.9996431702834226	WITHOUT_CLASSIFICATION	3.5682971657743825E-4	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.9998978380514765	WITHOUT_CLASSIFICATION	1.0216194852350713E-4	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9993106701994448	WITHOUT_CLASSIFICATION	6.893298005552998E-4	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999706611249741	WITHOUT_CLASSIFICATION	2.9338875025804553E-5	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.996600536344058	WITHOUT_CLASSIFICATION	0.003399463655942025	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9765128751706335	WITHOUT_CLASSIFICATION	0.023487124829366518	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993961452082587	WITHOUT_CLASSIFICATION	6.038547917412807E-4	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992448880094931	WITHOUT_CLASSIFICATION	7.551119905069937E-4	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999939637652637	WITHOUT_CLASSIFICATION	6.036234736289493E-5	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999827998795835	WITHOUT_CLASSIFICATION	1.72001204165102E-5	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999170615626372	WITHOUT_CLASSIFICATION	8.293843736283472E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999077378786421	WITHOUT_CLASSIFICATION	9.22621213579088E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999077378786421	WITHOUT_CLASSIFICATION	9.22621213579088E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999692894374155	WITHOUT_CLASSIFICATION	3.071056258444066E-5	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9870109395897316	WITHOUT_CLASSIFICATION	0.012989060410268448	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999149039517137	WITHOUT_CLASSIFICATION	8.509604828631237E-5	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998515546404457	WITHOUT_CLASSIFICATION	1.484453595543996E-4	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999149039517137	WITHOUT_CLASSIFICATION	8.509604828631237E-5	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999276351554793	WITHOUT_CLASSIFICATION	7.236484452059537E-5	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999989337023419	WITHOUT_CLASSIFICATION	1.0662976581165611E-5	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999590707686032	WITHOUT_CLASSIFICATION	4.0929231396710645E-5	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999960441723844	WITHOUT_CLASSIFICATION	3.955827615581109E-6	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999589555920302	WITHOUT_CLASSIFICATION	4.1044407969858805E-5	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.999946049652138	WITHOUT_CLASSIFICATION	5.395034786211737E-5	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9998361856625784	WITHOUT_CLASSIFICATION	1.6381433742158224E-4	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.9999166601869385	WITHOUT_CLASSIFICATION	8.33398130615342E-5	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9996561299829906	WITHOUT_CLASSIFICATION	3.438700170094177E-4	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.5592068709204662	IMPLEMENTATION	0.4407931290795338	WITHOUT_CLASSIFICATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.9995921659287698	WITHOUT_CLASSIFICATION	4.078340712303107E-4	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9983148368811235	WITHOUT_CLASSIFICATION	0.001685163118876336	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999430182454903	WITHOUT_CLASSIFICATION	5.6981754509791195E-5	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.999981263711639	WITHOUT_CLASSIFICATION	1.8736288361059113E-5	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.654501250483229	WITHOUT_CLASSIFICATION	0.34549874951677084	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9996403483162465	WITHOUT_CLASSIFICATION	3.596516837534792E-4	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999913873918078	WITHOUT_CLASSIFICATION	8.612608192278102E-6	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999913873918078	WITHOUT_CLASSIFICATION	8.612608192278102E-6	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999445424815743	WITHOUT_CLASSIFICATION	5.545751842572366E-5	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9995704522781954	WITHOUT_CLASSIFICATION	4.2954772180457917E-4	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999981616461192	WITHOUT_CLASSIFICATION	1.838353880839484E-6	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999932790071631	WITHOUT_CLASSIFICATION	6.72099283698696E-6	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999911534929997	WITHOUT_CLASSIFICATION	8.846507000266319E-6	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999905950786824	WITHOUT_CLASSIFICATION	9.404921317686937E-6	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999214982009461	WITHOUT_CLASSIFICATION	7.850179905383941E-5	IMPLEMENTATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999943502822611	WITHOUT_CLASSIFICATION	5.649717738825644E-6	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.9998670606147538	WITHOUT_CLASSIFICATION	1.3293938524605703E-4	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999911284817719	WITHOUT_CLASSIFICATION	8.871518228073937E-6	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999997758329956	WITHOUT_CLASSIFICATION	2.2416700439750987E-6	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9997913181626985	WITHOUT_CLASSIFICATION	2.0868183730154543E-4	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9998782826217119	WITHOUT_CLASSIFICATION	1.2171737828807087E-4	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999944223737836	WITHOUT_CLASSIFICATION	5.577626216538063E-6	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9988512961801875	WITHOUT_CLASSIFICATION	0.0011487038198125421	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9995238251564947	WITHOUT_CLASSIFICATION	4.761748435053179E-4	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999953227283783	WITHOUT_CLASSIFICATION	4.6772716216666255E-6	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9992514348169805	WITHOUT_CLASSIFICATION	7.485651830194923E-4	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.9994095823944209	WITHOUT_CLASSIFICATION	5.904176055789984E-4	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999978873822978	WITHOUT_CLASSIFICATION	2.1126177022398894E-6	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999934378255221	WITHOUT_CLASSIFICATION	6.56217447800182E-6	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.999018899396328	WITHOUT_CLASSIFICATION	9.811006036719399E-4	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999514623843309	WITHOUT_CLASSIFICATION	4.8537615669096005E-4	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9998688868688147	WITHOUT_CLASSIFICATION	1.3111313118537675E-4	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.9999596373926337	WITHOUT_CLASSIFICATION	4.036260736626317E-5	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.9999975065773229	WITHOUT_CLASSIFICATION	2.493422676981385E-6	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999571788753705	WITHOUT_CLASSIFICATION	4.282112462945911E-5	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.996806195755916	WITHOUT_CLASSIFICATION	0.0031938042440839824	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999739970943334	WITHOUT_CLASSIFICATION	2.600290566649435E-5	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999993640498701	WITHOUT_CLASSIFICATION	6.359501298411277E-7	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999780649769227	WITHOUT_CLASSIFICATION	2.1935023077388297E-5	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999956064604357	WITHOUT_CLASSIFICATION	4.3935395643241065E-6	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997720726787924	WITHOUT_CLASSIFICATION	2.2792732120751122E-4	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9960274091800286	WITHOUT_CLASSIFICATION	0.00397259081997136	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999970703965417	WITHOUT_CLASSIFICATION	2.9296034583131133E-6	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999905808467779	WITHOUT_CLASSIFICATION	9.419153222036542E-6	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999832935140851	WITHOUT_CLASSIFICATION	1.6706485914880096E-5	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999957139369187	WITHOUT_CLASSIFICATION	4.28606308127831E-6	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999987025247069	WITHOUT_CLASSIFICATION	1.2974752930329768E-6	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9989388564395162	WITHOUT_CLASSIFICATION	0.0010611435604837701	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999617291746977	WITHOUT_CLASSIFICATION	3.8270825302193445E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998638274991309	WITHOUT_CLASSIFICATION	1.361725008690407E-4	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9995444240309791	WITHOUT_CLASSIFICATION	4.5557596902090573E-4	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.6663754807432646	WITHOUT_CLASSIFICATION	0.33362451925673536	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9995038390621632	WITHOUT_CLASSIFICATION	4.961609378366774E-4	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9996564688821707	WITHOUT_CLASSIFICATION	3.435311178292622E-4	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9996968272039729	WITHOUT_CLASSIFICATION	3.031727960270586E-4	IMPLEMENTATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999271365186	WITHOUT_CLASSIFICATION	7.286348138208921E-8	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998600748775069	WITHOUT_CLASSIFICATION	1.39925122493078E-4	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999786217741049	WITHOUT_CLASSIFICATION	2.137822589510477E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998638274991309	WITHOUT_CLASSIFICATION	1.361725008690407E-4	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999797774242568	WITHOUT_CLASSIFICATION	2.0222575743107975E-5	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999667446018361	WITHOUT_CLASSIFICATION	3.325539816389681E-5	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.98938368948417	WITHOUT_CLASSIFICATION	0.01061631051582987	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.9999503972390983	WITHOUT_CLASSIFICATION	4.960276090170292E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999999908610917	WITHOUT_CLASSIFICATION	9.138908296374634E-8	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999979638910924	WITHOUT_CLASSIFICATION	2.0361089074895356E-6	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999984874171804	WITHOUT_CLASSIFICATION	1.512582819548568E-6	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9998451608570195	WITHOUT_CLASSIFICATION	1.5483914298041948E-4	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9994965842144361	WITHOUT_CLASSIFICATION	5.034157855638854E-4	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999069583292942	WITHOUT_CLASSIFICATION	9.304167070578476E-4	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999237152319411	WITHOUT_CLASSIFICATION	7.62847680588201E-5	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999735033168616	WITHOUT_CLASSIFICATION	2.6496683138400762E-5	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999894082267088	WITHOUT_CLASSIFICATION	1.059177329113755E-5	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9997592481711017	WITHOUT_CLASSIFICATION	2.4075182889836177E-4	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.99989662897538	WITHOUT_CLASSIFICATION	1.0337102461999431E-4	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999978902953931	WITHOUT_CLASSIFICATION	2.1097046068989746E-6	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999869315442491	WITHOUT_CLASSIFICATION	1.3068455750903262E-4	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9998778638180753	WITHOUT_CLASSIFICATION	1.221361819246533E-4	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999815774879182	WITHOUT_CLASSIFICATION	1.8422512081802173E-4	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9995951541781154	WITHOUT_CLASSIFICATION	4.0484582188450493E-4	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9725352566026824	WITHOUT_CLASSIFICATION	0.02746474339731761	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999861840813424	WITHOUT_CLASSIFICATION	1.3815918657569797E-5	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999440184689518	WITHOUT_CLASSIFICATION	5.5981531048253736E-5	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999464774389232	WITHOUT_CLASSIFICATION	5.352256107683406E-5	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9998662712319242	WITHOUT_CLASSIFICATION	1.33728768075747E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.999660871799184	WITHOUT_CLASSIFICATION	3.391282008161163E-4	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999952872508507	WITHOUT_CLASSIFICATION	4.712749149298592E-6	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9954051007664803	WITHOUT_CLASSIFICATION	0.004594899233519704	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9978668146996857	WITHOUT_CLASSIFICATION	0.002133185300314259	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998938318330356	WITHOUT_CLASSIFICATION	1.0616816696436135E-4	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9992722310122687	WITHOUT_CLASSIFICATION	7.277689877312874E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999493519676598	WITHOUT_CLASSIFICATION	5.064803234021552E-5	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.999999898931753	WITHOUT_CLASSIFICATION	1.0106824695106555E-7	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999516972337035	WITHOUT_CLASSIFICATION	4.830276629654745E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999943962995959	WITHOUT_CLASSIFICATION	5.603700404075748E-6	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999957753941433	WITHOUT_CLASSIFICATION	4.224605856643693E-6	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9994924895173655	WITHOUT_CLASSIFICATION	5.07510482634494E-4	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999943962995959	WITHOUT_CLASSIFICATION	5.603700404075748E-6	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9975982124334909	WITHOUT_CLASSIFICATION	0.002401787566509108	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999516972337035	WITHOUT_CLASSIFICATION	4.830276629654745E-5	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999958684457564	WITHOUT_CLASSIFICATION	4.131554243678037E-6	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999943962995959	WITHOUT_CLASSIFICATION	5.603700404075748E-6	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999873360214205	WITHOUT_CLASSIFICATION	1.2663978579367101E-5	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9865898789330405	WITHOUT_CLASSIFICATION	0.013410121066959548	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999997758329956	WITHOUT_CLASSIFICATION	2.2416700439750987E-6	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999917670433304	WITHOUT_CLASSIFICATION	8.232956669547175E-6	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9998214092669605	WITHOUT_CLASSIFICATION	1.785907330395055E-4	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999952731125044	WITHOUT_CLASSIFICATION	4.726887495621347E-6	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999550041719247	WITHOUT_CLASSIFICATION	4.499582807531201E-5	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999997559016557	WITHOUT_CLASSIFICATION	2.4409834430470596E-6	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.9999883047134456	WITHOUT_CLASSIFICATION	1.1695286554478904E-5	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998809818050118	WITHOUT_CLASSIFICATION	1.1901819498821265E-4	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.999987985289804	WITHOUT_CLASSIFICATION	1.2014710195922725E-5	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999351903537474	WITHOUT_CLASSIFICATION	6.480964625256414E-5	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999778355045437	WITHOUT_CLASSIFICATION	2.216449545630151E-5	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998526359619923	WITHOUT_CLASSIFICATION	1.4736403800766498E-4	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999739113067354	WITHOUT_CLASSIFICATION	2.608869326463682E-5	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9994726422580228	WITHOUT_CLASSIFICATION	5.273577419771668E-4	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9994465657395409	WITHOUT_CLASSIFICATION	5.534342604591284E-4	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9996792016878977	WITHOUT_CLASSIFICATION	3.207983121022945E-4	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999952908601996	WITHOUT_CLASSIFICATION	4.70913980039571E-5	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9997743037138143	WITHOUT_CLASSIFICATION	2.256962861857083E-4	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999561726918633	WITHOUT_CLASSIFICATION	4.38273081365426E-5	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999822354419825	WITHOUT_CLASSIFICATION	1.7764558017588725E-5	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999351903537474	WITHOUT_CLASSIFICATION	6.480964625256414E-5	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9998305909255816	WITHOUT_CLASSIFICATION	1.694090744183758E-4	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999917244820946	WITHOUT_CLASSIFICATION	8.275517905474398E-6	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999991075063831	WITHOUT_CLASSIFICATION	8.924936169039443E-6	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999394817470688	WITHOUT_CLASSIFICATION	6.0518252931153654E-5	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.9997742643168193	WITHOUT_CLASSIFICATION	2.257356831806105E-4	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.9999685011407509	WITHOUT_CLASSIFICATION	3.1498859249187226E-5	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995228147254899	WITHOUT_CLASSIFICATION	4.771852745101164E-4	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988614303447437	WITHOUT_CLASSIFICATION	0.0011385696552562673	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9988568138976576	WITHOUT_CLASSIFICATION	0.001143186102342394	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9995003233532547	WITHOUT_CLASSIFICATION	4.996766467453477E-4	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.999932921926463	WITHOUT_CLASSIFICATION	6.707807353694495E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998736401049126	WITHOUT_CLASSIFICATION	1.263598950874542E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998736401049126	WITHOUT_CLASSIFICATION	1.263598950874542E-4	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999102779184273	WITHOUT_CLASSIFICATION	8.972208157275591E-5	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9997843940494867	WITHOUT_CLASSIFICATION	2.1560595051327243E-4	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999619554778705	WITHOUT_CLASSIFICATION	3.804452212955486E-5	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999095471341292	WITHOUT_CLASSIFICATION	9.045286587083344E-5	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9978144677383037	WITHOUT_CLASSIFICATION	0.002185532261696337	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999837294388652	WITHOUT_CLASSIFICATION	1.6270561134946707E-5	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.999985911024547	WITHOUT_CLASSIFICATION	1.4088975452963159E-5	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999829417008662	WITHOUT_CLASSIFICATION	1.7058299133844656E-5	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999196781840326	WITHOUT_CLASSIFICATION	8.032181596735939E-5	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999796123483576	WITHOUT_CLASSIFICATION	2.038765164238738E-5	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999154208268435	WITHOUT_CLASSIFICATION	8.457917315650223E-5	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999444219991592	WITHOUT_CLASSIFICATION	5.557800084080629E-5	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999928036708621	WITHOUT_CLASSIFICATION	7.196329137814328E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998736401049126	WITHOUT_CLASSIFICATION	1.263598950874542E-4	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999724741714638	WITHOUT_CLASSIFICATION	2.7525828536165313E-5	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999359538957798	WITHOUT_CLASSIFICATION	6.404610422014983E-5	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999875852405906	WITHOUT_CLASSIFICATION	1.241475940937194E-5	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999535549014186	WITHOUT_CLASSIFICATION	4.644509858153753E-5	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999746529577704	WITHOUT_CLASSIFICATION	2.534704222954669E-5	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9997972833255572	WITHOUT_CLASSIFICATION	2.027166744428782E-4	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999518917865248	WITHOUT_CLASSIFICATION	4.810821347530809E-5	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999941628432388	WITHOUT_CLASSIFICATION	5.8371567612104516E-5	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999848495517688	WITHOUT_CLASSIFICATION	1.515044823128075E-5	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999720250816099	WITHOUT_CLASSIFICATION	2.7974918390119165E-5	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9996095197078854	WITHOUT_CLASSIFICATION	3.904802921147293E-4	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995228147254899	WITHOUT_CLASSIFICATION	4.771852745101164E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998736401049126	WITHOUT_CLASSIFICATION	1.263598950874542E-4	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999688244137245	WITHOUT_CLASSIFICATION	3.117558627548455E-5	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9994815105821812	WITHOUT_CLASSIFICATION	5.184894178187888E-4	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.9999345086919944	WITHOUT_CLASSIFICATION	6.549130800563735E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9996683854386399	WITHOUT_CLASSIFICATION	3.31614561359998E-4	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999832015966326	WITHOUT_CLASSIFICATION	1.679840336751051E-5	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.999952587766907	WITHOUT_CLASSIFICATION	4.741223309300271E-5	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995579211690157	WITHOUT_CLASSIFICATION	4.4207883098438747E-4	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999995898487165	WITHOUT_CLASSIFICATION	4.1015128354056076E-7	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999814471604616	WITHOUT_CLASSIFICATION	1.8552839538462564E-5	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999733808264769	WITHOUT_CLASSIFICATION	2.6619173523105986E-5	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9987315048095606	WITHOUT_CLASSIFICATION	0.0012684951904394668	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999739970943334	WITHOUT_CLASSIFICATION	2.600290566649435E-5	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9998044797860177	WITHOUT_CLASSIFICATION	1.9552021398239972E-4	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999013693555576	WITHOUT_CLASSIFICATION	9.863064444234802E-5	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999276351554793	WITHOUT_CLASSIFICATION	7.236484452059537E-5	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999890921641316	WITHOUT_CLASSIFICATION	1.0907835868451519E-5	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999998942059637	WITHOUT_CLASSIFICATION	1.0579403630260918E-6	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999680937643108	WITHOUT_CLASSIFICATION	3.190623568926157E-5	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.9999105653098181	WITHOUT_CLASSIFICATION	8.943469018180007E-5	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.999573933680146	WITHOUT_CLASSIFICATION	4.26066319854085E-4	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999038198834571	WITHOUT_CLASSIFICATION	9.61801165429077E-5	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999038198834571	WITHOUT_CLASSIFICATION	9.61801165429077E-5	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9993931152735417	WITHOUT_CLASSIFICATION	6.068847264583646E-4	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.99998747812285	WITHOUT_CLASSIFICATION	1.2521877149889678E-5	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9998595670037805	WITHOUT_CLASSIFICATION	1.4043299621940437E-4	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999679157761657	WITHOUT_CLASSIFICATION	3.208422383420332E-5	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999608621421376	WITHOUT_CLASSIFICATION	3.913785786240949E-5	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999932987549085	WITHOUT_CLASSIFICATION	6.7012450915644396E-6	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999282046478745	WITHOUT_CLASSIFICATION	7.179535212550349E-5	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9973195492820285	WITHOUT_CLASSIFICATION	0.002680450717971598	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9973195492820285	WITHOUT_CLASSIFICATION	0.002680450717971598	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.5622603429039862	WITHOUT_CLASSIFICATION	0.43773965709601376	IMPLEMENTATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.9998750151108172	WITHOUT_CLASSIFICATION	1.2498488918271847E-4	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999994690858792	WITHOUT_CLASSIFICATION	5.3091412077606E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999338308917441	WITHOUT_CLASSIFICATION	6.616910825581319E-5	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999338308917441	WITHOUT_CLASSIFICATION	6.616910825581319E-5	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999338308917441	WITHOUT_CLASSIFICATION	6.616910825581319E-5	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999130619648339	WITHOUT_CLASSIFICATION	8.693803516614583E-5	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999897494259148	WITHOUT_CLASSIFICATION	1.0250574085177488E-5	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.6328499587844547	WITHOUT_CLASSIFICATION	0.36715004121554534	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9996524887255435	WITHOUT_CLASSIFICATION	3.4751127445657384E-4	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999907244908648	WITHOUT_CLASSIFICATION	9.275509135152327E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998736401049126	WITHOUT_CLASSIFICATION	1.263598950874542E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998736401049126	WITHOUT_CLASSIFICATION	1.263598950874542E-4	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9990387237780085	WITHOUT_CLASSIFICATION	9.612762219916332E-4	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999664808632797	WITHOUT_CLASSIFICATION	3.351913672037902E-5	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9988869475427896	WITHOUT_CLASSIFICATION	0.0011130524572103451	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9998331130555139	WITHOUT_CLASSIFICATION	1.6688694448602695E-4	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999093099049557	WITHOUT_CLASSIFICATION	9.069009504415832E-5	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999820327251393	WITHOUT_CLASSIFICATION	1.796727486069704E-5	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999780393029903	WITHOUT_CLASSIFICATION	2.1960697009641505E-5	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999878423365891	WITHOUT_CLASSIFICATION	1.2157663411044689E-5	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999995638018406	WITHOUT_CLASSIFICATION	4.3619815933306076E-7	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999761039450473	WITHOUT_CLASSIFICATION	2.389605495260221E-5	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999033262246113	WITHOUT_CLASSIFICATION	9.667377538865834E-5	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999480924462707	WITHOUT_CLASSIFICATION	5.190755372924428E-5	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999480924462707	WITHOUT_CLASSIFICATION	5.190755372924428E-5	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999480924462707	WITHOUT_CLASSIFICATION	5.190755372924428E-5	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999480924462707	WITHOUT_CLASSIFICATION	5.190755372924428E-5	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999480924462707	WITHOUT_CLASSIFICATION	5.190755372924428E-5	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.999889307449456	WITHOUT_CLASSIFICATION	1.1069255054403387E-4	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.999889307449456	WITHOUT_CLASSIFICATION	1.1069255054403387E-4	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.999889307449456	WITHOUT_CLASSIFICATION	1.1069255054403387E-4	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999889307449456	WITHOUT_CLASSIFICATION	1.1069255054403387E-4	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9994087046736513	WITHOUT_CLASSIFICATION	5.912953263487374E-4	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999038198834571	WITHOUT_CLASSIFICATION	9.61801165429077E-5	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999875577685515	WITHOUT_CLASSIFICATION	1.24422314484981E-4	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999889307449456	WITHOUT_CLASSIFICATION	1.1069255054403387E-4	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9979080272987714	WITHOUT_CLASSIFICATION	0.002091972701228521	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999433567482428	WITHOUT_CLASSIFICATION	5.664325175732189E-5	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999659951974225	WITHOUT_CLASSIFICATION	3.400480257754116E-5	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999703655994298	WITHOUT_CLASSIFICATION	2.9634400570215227E-5	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999995710747747	WITHOUT_CLASSIFICATION	4.2892522539925994E-7	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999680361512304	WITHOUT_CLASSIFICATION	3.1963848769545145E-5	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9998223739652177	WITHOUT_CLASSIFICATION	1.7762603478234555E-4	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999912824555389	WITHOUT_CLASSIFICATION	8.717544460967955E-6	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.999978296054603	WITHOUT_CLASSIFICATION	2.1703945397048616E-5	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999998719160041	WITHOUT_CLASSIFICATION	1.2808399584031778E-7	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999960920854781	WITHOUT_CLASSIFICATION	3.90791452190446E-6	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.9999655938234284	WITHOUT_CLASSIFICATION	3.440617657158394E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999070214951801	WITHOUT_CLASSIFICATION	9.297850481994846E-5	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.9994834496340179	WITHOUT_CLASSIFICATION	5.165503659822132E-4	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9599357088870861	WITHOUT_CLASSIFICATION	0.04006429111291387	IMPLEMENTATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999082334150717	WITHOUT_CLASSIFICATION	9.176658492820704E-5	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999976194665912	WITHOUT_CLASSIFICATION	2.3805334087312854E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999726199620131	WITHOUT_CLASSIFICATION	2.7380037986904677E-5	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999726199620131	WITHOUT_CLASSIFICATION	2.7380037986904677E-5	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999536182812321	WITHOUT_CLASSIFICATION	4.638171876793605E-5	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999986249446557	WITHOUT_CLASSIFICATION	1.3750553441986978E-6	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999489178614239	WITHOUT_CLASSIFICATION	5.108213857612859E-5	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998867586532129	WITHOUT_CLASSIFICATION	1.1324134678707686E-4	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999549880504073	WITHOUT_CLASSIFICATION	4.501194959268328E-5	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999273352657901	WITHOUT_CLASSIFICATION	7.266473420995571E-5	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9998833276163075	WITHOUT_CLASSIFICATION	1.166723836925322E-4	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999295823513655	WITHOUT_CLASSIFICATION	7.04176486345516E-5	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999247543623727	WITHOUT_CLASSIFICATION	7.524563762723229E-5	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999945712557861	WITHOUT_CLASSIFICATION	5.42874421402487E-6	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999420196757772	WITHOUT_CLASSIFICATION	5.798032422280131E-5	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999739970943334	WITHOUT_CLASSIFICATION	2.600290566649435E-5	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999722938269063	WITHOUT_CLASSIFICATION	2.770617309356437E-5	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.99998891124623	WITHOUT_CLASSIFICATION	1.1088753770066676E-5	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999811628815094	WITHOUT_CLASSIFICATION	1.883711849066522E-5	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999326579563594	WITHOUT_CLASSIFICATION	6.734204364063056E-5	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999986397358217	WITHOUT_CLASSIFICATION	1.360264178266975E-6	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999986397358217	WITHOUT_CLASSIFICATION	1.360264178266975E-6	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9995884886613385	WITHOUT_CLASSIFICATION	4.1151133866147396E-4	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.999999919494175	WITHOUT_CLASSIFICATION	8.05058249979119E-8	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999649853787511	WITHOUT_CLASSIFICATION	3.501462124882367E-5	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.9999835810967084	WITHOUT_CLASSIFICATION	1.6418903291577836E-5	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.9999324261878996	WITHOUT_CLASSIFICATION	6.757381210047683E-5	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999559209475541	WITHOUT_CLASSIFICATION	4.4079052445926694E-5	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9997101376740386	WITHOUT_CLASSIFICATION	2.8986232596143796E-4	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999128274074277	WITHOUT_CLASSIFICATION	8.71725925723061E-5	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998528834221019	WITHOUT_CLASSIFICATION	1.471165778980815E-4	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999995028015569	WITHOUT_CLASSIFICATION	4.971984430788935E-7	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999590285215073	WITHOUT_CLASSIFICATION	4.0971478492805875E-5	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999128274074277	WITHOUT_CLASSIFICATION	8.71725925723061E-5	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9996187713560406	WITHOUT_CLASSIFICATION	3.81228643959361E-4	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9990646808484609	WITHOUT_CLASSIFICATION	9.353191515391168E-4	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9998224861240557	WITHOUT_CLASSIFICATION	1.7751387594424785E-4	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9999485807974806	WITHOUT_CLASSIFICATION	5.141920251931279E-5	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.999999979949713	WITHOUT_CLASSIFICATION	2.0050287005124308E-8	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999346625905656	WITHOUT_CLASSIFICATION	6.533740943436957E-5	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9942319536411215	WITHOUT_CLASSIFICATION	0.005768046358878506	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999089831518473	WITHOUT_CLASSIFICATION	9.101684815269388E-5	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999930513388767	WITHOUT_CLASSIFICATION	6.948661123298586E-5	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999421586558238	WITHOUT_CLASSIFICATION	5.784134417615634E-5	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9996746604815294	WITHOUT_CLASSIFICATION	3.253395184706021E-4	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999216726753037	WITHOUT_CLASSIFICATION	7.83273246963056E-5	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9996994465197502	WITHOUT_CLASSIFICATION	3.005534802498425E-4	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9995888854706735	WITHOUT_CLASSIFICATION	4.111145293264436E-4	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9995864670473824	WITHOUT_CLASSIFICATION	4.1353295261762534E-4	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999123079862899	WITHOUT_CLASSIFICATION	8.769201370997935E-5	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999058118052763	WITHOUT_CLASSIFICATION	9.418819472372545E-5	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.995022006535328	WITHOUT_CLASSIFICATION	0.004977993464672001	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.995022006535328	WITHOUT_CLASSIFICATION	0.004977993464672001	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9942319536411215	WITHOUT_CLASSIFICATION	0.005768046358878506	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9913753105306106	WITHOUT_CLASSIFICATION	0.008624689469389397	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999033232926846	WITHOUT_CLASSIFICATION	9.667670731540276E-5	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9996760228737075	WITHOUT_CLASSIFICATION	3.239771262924366E-4	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.9999480091284688	WITHOUT_CLASSIFICATION	5.199087153127431E-5	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999170025858946	WITHOUT_CLASSIFICATION	8.299741410552729E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999785050239044	WITHOUT_CLASSIFICATION	2.1494976095671705E-5	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999971943018499	WITHOUT_CLASSIFICATION	2.8056981501068815E-5	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9994449341668293	WITHOUT_CLASSIFICATION	5.550658331706717E-4	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9998233805348716	WITHOUT_CLASSIFICATION	1.7661946512836975E-4	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999841720796111	WITHOUT_CLASSIFICATION	1.5827920388932738E-5	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999965256429991	WITHOUT_CLASSIFICATION	3.4743570009061055E-6	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999034300773371	WITHOUT_CLASSIFICATION	9.656992266291858E-5	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999376057556347	WITHOUT_CLASSIFICATION	6.239424436530456E-4	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999929973311925	WITHOUT_CLASSIFICATION	7.002668807584974E-6	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999279837185348	WITHOUT_CLASSIFICATION	7.201628146522437E-5	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999900604904752	WITHOUT_CLASSIFICATION	9.939509524794827E-6	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999367191017	WITHOUT_CLASSIFICATION	6.328089823863001E-8	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999853096145718	WITHOUT_CLASSIFICATION	1.4690385428231926E-5	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999221562785178	WITHOUT_CLASSIFICATION	7.78437214822399E-5	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999139948495073	WITHOUT_CLASSIFICATION	8.60051504927942E-5	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9995089035610876	WITHOUT_CLASSIFICATION	4.910964389124143E-4	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999953632116473	WITHOUT_CLASSIFICATION	4.636788352696081E-6	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9995363342436585	WITHOUT_CLASSIFICATION	4.6366575634146845E-4	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999696100270912	WITHOUT_CLASSIFICATION	3.0389972908851437E-5	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999797883965447	WITHOUT_CLASSIFICATION	2.021160345534407E-5	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999024670171222	WITHOUT_CLASSIFICATION	9.753298287781963E-5	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999987262715573	WITHOUT_CLASSIFICATION	1.2737284427083792E-6	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999975287586238	WITHOUT_CLASSIFICATION	2.4712413762119324E-5	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999760917862134	WITHOUT_CLASSIFICATION	2.3908213786547447E-5	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9998080789526403	WITHOUT_CLASSIFICATION	1.9192104735966795E-4	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998618357232177	WITHOUT_CLASSIFICATION	1.3816427678231498E-4	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999279837185348	WITHOUT_CLASSIFICATION	7.201628146522437E-5	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.999956441424806	WITHOUT_CLASSIFICATION	4.355857519406575E-5	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999989844391404	WITHOUT_CLASSIFICATION	1.015560859598803E-6	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999746489179702	WITHOUT_CLASSIFICATION	2.535108202985543E-5	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9998276886247933	WITHOUT_CLASSIFICATION	1.7231137520666882E-4	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9984816420475219	WITHOUT_CLASSIFICATION	0.0015183579524780694	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999453843145614	WITHOUT_CLASSIFICATION	5.4615685438598334E-5	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.9999870590582145	WITHOUT_CLASSIFICATION	1.2940941785554385E-5	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9998863378308891	WITHOUT_CLASSIFICATION	1.1366216911087778E-4	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9976907732463868	WITHOUT_CLASSIFICATION	0.0023092267536132657	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9989385057287697	WITHOUT_CLASSIFICATION	0.0010614942712302061	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.9999064968506339	WITHOUT_CLASSIFICATION	9.35031493660712E-5	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999984830215304	WITHOUT_CLASSIFICATION	1.516978469649443E-6	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.999896430527008	WITHOUT_CLASSIFICATION	1.035694729919495E-4	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999818143112441	WITHOUT_CLASSIFICATION	1.8185688755902405E-5	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998618357232177	WITHOUT_CLASSIFICATION	1.3816427678231498E-4	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998473975032327	WITHOUT_CLASSIFICATION	1.52602496767221E-4	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9310508370181851	WITHOUT_CLASSIFICATION	0.06894916298181485	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999994518761901	WITHOUT_CLASSIFICATION	5.481238099751151E-7	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999917860845666	WITHOUT_CLASSIFICATION	8.213915433329976E-6	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9990433961763922	WITHOUT_CLASSIFICATION	9.566038236077912E-4	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999652525280017	WITHOUT_CLASSIFICATION	3.474747199824069E-5	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998528834221019	WITHOUT_CLASSIFICATION	1.471165778980815E-4	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999997089630174	WITHOUT_CLASSIFICATION	2.910369826648583E-7	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999279837185348	WITHOUT_CLASSIFICATION	7.201628146522437E-5	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999496406062437	WITHOUT_CLASSIFICATION	5.035939375630278E-5	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999780241446751	WITHOUT_CLASSIFICATION	2.1975855324953824E-5	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999486670606842	WITHOUT_CLASSIFICATION	5.133293931580618E-5	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999486670606842	WITHOUT_CLASSIFICATION	5.133293931580618E-5	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999857101179678	WITHOUT_CLASSIFICATION	1.428988203220927E-4	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.999972296467357	WITHOUT_CLASSIFICATION	2.770353264299907E-5	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9966822117408857	WITHOUT_CLASSIFICATION	0.0033177882591143666	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999568978798044	WITHOUT_CLASSIFICATION	4.310212019568855E-5	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999067524077561	WITHOUT_CLASSIFICATION	9.32475922439609E-5	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999822165282569	WITHOUT_CLASSIFICATION	1.7783471743105173E-5	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9945221766241895	WITHOUT_CLASSIFICATION	0.0054778233758105465	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9998793514485991	WITHOUT_CLASSIFICATION	1.2064855140093991E-4	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9747468010979423	WITHOUT_CLASSIFICATION	0.025253198902057617	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9747468010979423	WITHOUT_CLASSIFICATION	0.025253198902057617	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999995240966498	WITHOUT_CLASSIFICATION	4.7590335017350527E-7	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9914163514348848	WITHOUT_CLASSIFICATION	0.008583648565115095	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9933158790168987	WITHOUT_CLASSIFICATION	0.006684120983101316	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999994172654237	WITHOUT_CLASSIFICATION	5.827345763412489E-7	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999984937972802	WITHOUT_CLASSIFICATION	1.5062027197686876E-6	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999112907901531	WITHOUT_CLASSIFICATION	8.870920984698695E-5	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999995754604923	WITHOUT_CLASSIFICATION	4.2453950769326605E-7	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999992357876357	WITHOUT_CLASSIFICATION	7.642123642990448E-6	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999801519675502	WITHOUT_CLASSIFICATION	1.9848032449772375E-5	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.9996775690746514	WITHOUT_CLASSIFICATION	3.224309253485387E-4	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.9996775690746514	WITHOUT_CLASSIFICATION	3.224309253485387E-4	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9993126285617826	WITHOUT_CLASSIFICATION	6.873714382173774E-4	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998025193725	WITHOUT_CLASSIFICATION	1.974806274384246E-7	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9993440778432628	WITHOUT_CLASSIFICATION	6.559221567371774E-4	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999992334286041	WITHOUT_CLASSIFICATION	7.665713959546126E-7	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9996957216806417	WITHOUT_CLASSIFICATION	3.042783193582328E-4	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999217638795947	WITHOUT_CLASSIFICATION	7.823612040528432E-5	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999970357797806	WITHOUT_CLASSIFICATION	2.9642202192871625E-6	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999430582114065	WITHOUT_CLASSIFICATION	5.694178859342106E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716074628936	WITHOUT_CLASSIFICATION	1.2839253710630882E-4	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999998338163059	WITHOUT_CLASSIFICATION	1.661836941013962E-6	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999714882068436	WITHOUT_CLASSIFICATION	2.8511793156553625E-5	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999792381894721	WITHOUT_CLASSIFICATION	2.0761810527871572E-5	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999649221293048	WITHOUT_CLASSIFICATION	3.507787069517126E-5	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.9999312698299003	WITHOUT_CLASSIFICATION	6.873017009969392E-5	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9997158611069651	WITHOUT_CLASSIFICATION	2.8413889303492023E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716074628936	WITHOUT_CLASSIFICATION	1.2839253710630882E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998716074628936	WITHOUT_CLASSIFICATION	1.2839253710630882E-4	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999798318443677	WITHOUT_CLASSIFICATION	2.0168155632360844E-5	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.99985731758242	WITHOUT_CLASSIFICATION	1.4268241758000135E-4	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999582585983735	WITHOUT_CLASSIFICATION	4.174140162662655E-5	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999986977509948	WITHOUT_CLASSIFICATION	1.302249005202167E-5	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999900412768467	WITHOUT_CLASSIFICATION	9.958723153322636E-6	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999654365973483	WITHOUT_CLASSIFICATION	3.456340265167053E-5	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999585697939591	WITHOUT_CLASSIFICATION	4.143020604095635E-5	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999413714780472	WITHOUT_CLASSIFICATION	5.862852195292203E-5	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9998662712319242	WITHOUT_CLASSIFICATION	1.33728768075747E-4	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.999993678676987	WITHOUT_CLASSIFICATION	6.321323013055746E-6	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999704075816427	WITHOUT_CLASSIFICATION	2.9592418357310163E-5	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9997543492203502	WITHOUT_CLASSIFICATION	2.4565077964985583E-4	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999257042922891	WITHOUT_CLASSIFICATION	7.429570771084336E-5	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997295209054696	WITHOUT_CLASSIFICATION	2.7047909453041335E-4	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973914650099402	WITHOUT_CLASSIFICATION	0.0026085349900598262	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999819428280519	WITHOUT_CLASSIFICATION	1.8057171948173856E-5	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999353205435031	WITHOUT_CLASSIFICATION	6.467945649696692E-5	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998253020191258	WITHOUT_CLASSIFICATION	1.7469798087421299E-4	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997328832139291	WITHOUT_CLASSIFICATION	0.002671167860709076	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.6377470346986255	WITHOUT_CLASSIFICATION	0.3622529653013744	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.99995678731533	WITHOUT_CLASSIFICATION	4.321268466996617E-5	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999994161742259	WITHOUT_CLASSIFICATION	5.838257739936152E-7	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998985256877504	WITHOUT_CLASSIFICATION	1.0147431224960628E-4	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975666917552504	WITHOUT_CLASSIFICATION	0.002433308244749674	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9998416225098421	WITHOUT_CLASSIFICATION	1.583774901578683E-4	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999751127135916	WITHOUT_CLASSIFICATION	2.4887286408435584E-5	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999094895633257	WITHOUT_CLASSIFICATION	9.051043667429773E-5	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.999937718372482	WITHOUT_CLASSIFICATION	6.228162751804098E-5	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999865683696105	WITHOUT_CLASSIFICATION	1.3431630389474473E-5	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999263128809378	WITHOUT_CLASSIFICATION	7.368711906215068E-5	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.9993794573114397	WITHOUT_CLASSIFICATION	6.205426885601721E-4	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.9998692901573644	WITHOUT_CLASSIFICATION	1.3070984263568382E-4	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999731401445413	WITHOUT_CLASSIFICATION	2.6859855458656852E-5	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.998706045872568	WITHOUT_CLASSIFICATION	0.0012939541274320618	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999988178386532	WITHOUT_CLASSIFICATION	1.1821613467641928E-6	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999852153980114	WITHOUT_CLASSIFICATION	1.4784601988588184E-5	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9998723551018496	WITHOUT_CLASSIFICATION	1.276448981504615E-4	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999931391620985	WITHOUT_CLASSIFICATION	6.860837901408381E-6	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999912479010425	WITHOUT_CLASSIFICATION	8.752098957423067E-6	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999741190368135	WITHOUT_CLASSIFICATION	2.5880963186437173E-5	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999871747987202	WITHOUT_CLASSIFICATION	1.2825201279799185E-5	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999678460291873	WITHOUT_CLASSIFICATION	3.215397081269304E-4	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999265175933658	WITHOUT_CLASSIFICATION	7.34824066341829E-5	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999678460291873	WITHOUT_CLASSIFICATION	3.215397081269304E-4	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9998350059355796	WITHOUT_CLASSIFICATION	1.6499406442043482E-4	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9998639705839254	WITHOUT_CLASSIFICATION	1.3602941607460798E-4	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9990115350666806	WITHOUT_CLASSIFICATION	9.884649333194197E-4	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999931210022044	WITHOUT_CLASSIFICATION	6.878997795610325E-5	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9998986010680736	WITHOUT_CLASSIFICATION	1.0139893192642109E-4	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9990115350666806	WITHOUT_CLASSIFICATION	9.884649333194197E-4	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999599545185024	WITHOUT_CLASSIFICATION	4.004548149758212E-5	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9995301332330289	WITHOUT_CLASSIFICATION	4.6986676697110744E-4	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999452599776603	WITHOUT_CLASSIFICATION	5.474002233980998E-5	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9996527108136035	WITHOUT_CLASSIFICATION	3.472891863964155E-4	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999915048561428	WITHOUT_CLASSIFICATION	8.495143857197963E-5	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999832413258054	WITHOUT_CLASSIFICATION	1.6758674194539102E-5	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.99999074204144	WITHOUT_CLASSIFICATION	9.25795855997284E-6	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.5791910283877431	WITHOUT_CLASSIFICATION	0.420808971612257	IMPLEMENTATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9998071658041301	WITHOUT_CLASSIFICATION	1.9283419587005297E-4	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999670430121212	WITHOUT_CLASSIFICATION	3.2956987878815664E-5	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999770030895205	WITHOUT_CLASSIFICATION	2.2996910479449712E-5	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999561144231603	WITHOUT_CLASSIFICATION	4.388557683972482E-5	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999961775668663	WITHOUT_CLASSIFICATION	3.8224331336932675E-6	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999155339525212	WITHOUT_CLASSIFICATION	8.446604747884791E-5	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999995856055106	WITHOUT_CLASSIFICATION	4.143944893427426E-7	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.999761916656521	WITHOUT_CLASSIFICATION	2.3808334347884112E-4	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999860404756291	WITHOUT_CLASSIFICATION	1.3959524370848959E-5	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997150536716336	WITHOUT_CLASSIFICATION	2.849463283664005E-4	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997708968528174	WITHOUT_CLASSIFICATION	2.2910314718255174E-4	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999996658729331	WITHOUT_CLASSIFICATION	3.341270668263436E-7	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999837985158586	WITHOUT_CLASSIFICATION	1.6201484141376616E-5	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.999970731969487	WITHOUT_CLASSIFICATION	2.9268030512905528E-5	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997845514875667	WITHOUT_CLASSIFICATION	2.1544851243337064E-4	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9906265898900175	WITHOUT_CLASSIFICATION	0.009373410109982567	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.9999087404208525	WITHOUT_CLASSIFICATION	9.12595791474708E-5	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.999945475673052	WITHOUT_CLASSIFICATION	5.4524326947935795E-5	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999998391573	WITHOUT_CLASSIFICATION	1.6084269531209175E-10	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9996177735456677	WITHOUT_CLASSIFICATION	3.8222645433219057E-4	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.999975625657109	WITHOUT_CLASSIFICATION	2.4374342891054635E-5	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9999290061531471	WITHOUT_CLASSIFICATION	7.099384685289199E-5	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997845514875667	WITHOUT_CLASSIFICATION	2.1544851243337064E-4	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9997892383606853	WITHOUT_CLASSIFICATION	2.107616393146345E-4	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.9999703313004343	WITHOUT_CLASSIFICATION	2.9668699565593738E-5	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.9998422192338196	WITHOUT_CLASSIFICATION	1.5778076618050112E-4	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9905273575245667	WITHOUT_CLASSIFICATION	0.009472642475433305	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999996658729331	WITHOUT_CLASSIFICATION	3.341270668263436E-7	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999968203044052	WITHOUT_CLASSIFICATION	3.1796955947481674E-6	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999961992657562	WITHOUT_CLASSIFICATION	3.8007342436882453E-6	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999439704478562	WITHOUT_CLASSIFICATION	5.602955214379011E-5	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.9997145744548446	WITHOUT_CLASSIFICATION	2.8542554515535793E-4	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999961987909944	WITHOUT_CLASSIFICATION	3.8012090056405116E-6	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999988193478746	WITHOUT_CLASSIFICATION	1.180652125446492E-6	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999897225885541	WITHOUT_CLASSIFICATION	1.0277411445933483E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997708711151978	WITHOUT_CLASSIFICATION	2.2912888480219944E-4	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999601820349534	WITHOUT_CLASSIFICATION	3.9817965046681715E-5	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.9998237407564495	WITHOUT_CLASSIFICATION	1.7625924355037408E-4	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999969796247581	WITHOUT_CLASSIFICATION	3.020375242004775E-6	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999351903537474	WITHOUT_CLASSIFICATION	6.480964625256414E-5	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999351903537474	WITHOUT_CLASSIFICATION	6.480964625256414E-5	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999922022884681	WITHOUT_CLASSIFICATION	7.797711531880234E-6	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999665771732531	WITHOUT_CLASSIFICATION	3.342282674695548E-5	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.9997642714513308	WITHOUT_CLASSIFICATION	2.3572854866924065E-4	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999948794099034	WITHOUT_CLASSIFICATION	5.120590096588533E-5	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999925206040042	WITHOUT_CLASSIFICATION	7.479395995783926E-6	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9874238092249834	WITHOUT_CLASSIFICATION	0.012576190775016526	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9991574613436941	WITHOUT_CLASSIFICATION	8.425386563059709E-4	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9982133474791605	WITHOUT_CLASSIFICATION	0.0017866525208395751	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999851229668888	WITHOUT_CLASSIFICATION	1.487703311122185E-5	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9973223276498209	WITHOUT_CLASSIFICATION	0.0026776723501792297	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9973223276498209	WITHOUT_CLASSIFICATION	0.0026776723501792297	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999045396272843	WITHOUT_CLASSIFICATION	9.546037271560554E-5	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9973223276498209	WITHOUT_CLASSIFICATION	0.0026776723501792297	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9973223276498209	WITHOUT_CLASSIFICATION	0.0026776723501792297	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9970699472821706	WITHOUT_CLASSIFICATION	0.0029300527178293123	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9997562762908723	WITHOUT_CLASSIFICATION	2.4372370912771228E-4	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998619591725615	WITHOUT_CLASSIFICATION	1.380408274386096E-4	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998619591725615	WITHOUT_CLASSIFICATION	1.380408274386096E-4	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999649597580398	WITHOUT_CLASSIFICATION	3.504024196019959E-4	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9843271939297153	WITHOUT_CLASSIFICATION	0.015672806070284675	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9998732177078435	WITHOUT_CLASSIFICATION	1.2678229215646117E-4	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999576464801	WITHOUT_CLASSIFICATION	4.235351978664001E-8	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998725322650337	WITHOUT_CLASSIFICATION	1.2746773496630736E-4	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.9998586287921529	WITHOUT_CLASSIFICATION	1.413712078471576E-4	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998614668716267	WITHOUT_CLASSIFICATION	1.385331283732944E-4	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999599409089645	WITHOUT_CLASSIFICATION	4.0059091035500777E-5	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999463692564202	WITHOUT_CLASSIFICATION	5.3630743579681E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999937077761859	WITHOUT_CLASSIFICATION	6.292223814095496E-6	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999109279535063	WITHOUT_CLASSIFICATION	8.907204649370547E-5	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999053484862336	WITHOUT_CLASSIFICATION	9.465151376643114E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999692894374155	WITHOUT_CLASSIFICATION	3.071056258444066E-5	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999785669029103	WITHOUT_CLASSIFICATION	2.143309708964883E-5	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999177977083931	WITHOUT_CLASSIFICATION	8.220229160688047E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999146644236668	WITHOUT_CLASSIFICATION	8.533557633314237E-5	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9998968480238659	WITHOUT_CLASSIFICATION	1.0315197613409626E-4	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.9998724406244035	WITHOUT_CLASSIFICATION	1.2755937559644518E-4	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999692894374155	WITHOUT_CLASSIFICATION	3.071056258444066E-5	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999837985158586	WITHOUT_CLASSIFICATION	1.6201484141376616E-5	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.9998145671208856	WITHOUT_CLASSIFICATION	1.8543287911432102E-4	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999707603706639	WITHOUT_CLASSIFICATION	2.9239629336062548E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999080907925151	WITHOUT_CLASSIFICATION	9.190920748488823E-5	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.9990091977322845	WITHOUT_CLASSIFICATION	9.908022677155275E-4	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999252710746934	WITHOUT_CLASSIFICATION	7.47289253065372E-5	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.9995277789057999	WITHOUT_CLASSIFICATION	4.7222109420019646E-4	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999667381179187	WITHOUT_CLASSIFICATION	3.32618820812189E-5	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999549947304723	WITHOUT_CLASSIFICATION	4.5005269527670256E-5	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999915066881303	WITHOUT_CLASSIFICATION	8.4933118696473E-6	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.999966199586967	WITHOUT_CLASSIFICATION	3.3800413032993226E-5	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999887404581274	WITHOUT_CLASSIFICATION	1.1259541872687742E-5	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9996702975804427	WITHOUT_CLASSIFICATION	3.2970241955734874E-4	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9995533833876674	WITHOUT_CLASSIFICATION	4.466166123326597E-4	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9888316661092834	WITHOUT_CLASSIFICATION	0.011168333890716605	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999417569503286	WITHOUT_CLASSIFICATION	5.824304967138666E-5	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.9995233005093489	WITHOUT_CLASSIFICATION	4.7669949065109974E-4	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9994002614114216	WITHOUT_CLASSIFICATION	5.997385885784422E-4	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999507361584546	WITHOUT_CLASSIFICATION	4.926384154536515E-5	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998691326963602	WITHOUT_CLASSIFICATION	1.308673036396995E-4	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999689064164087	WITHOUT_CLASSIFICATION	3.109358359123962E-5	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.9996921369900438	WITHOUT_CLASSIFICATION	3.078630099562078E-4	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999946357534071	WITHOUT_CLASSIFICATION	5.364246592920696E-6	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999549947304723	WITHOUT_CLASSIFICATION	4.5005269527670256E-5	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.9998048929257178	WITHOUT_CLASSIFICATION	1.9510707428207908E-4	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.9998604511020712	WITHOUT_CLASSIFICATION	1.395488979287722E-4	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999288484821365	WITHOUT_CLASSIFICATION	7.115151786349547E-4	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999595908175007	WITHOUT_CLASSIFICATION	4.0409182499227494E-5	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998618357232177	WITHOUT_CLASSIFICATION	1.3816427678231498E-4	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.9998569911277633	WITHOUT_CLASSIFICATION	1.4300887223675553E-4	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.9997735279365987	WITHOUT_CLASSIFICATION	2.2647206340129945E-4	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.9997048022099572	WITHOUT_CLASSIFICATION	2.951977900428921E-4	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.999773003166651	WITHOUT_CLASSIFICATION	2.2699683334913027E-4	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.9997513473101348	WITHOUT_CLASSIFICATION	2.486526898652169E-4	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998656567542987	WITHOUT_CLASSIFICATION	1.3434324570127604E-4	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999550384363332	WITHOUT_CLASSIFICATION	4.496156366689539E-5	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999954233239888	WITHOUT_CLASSIFICATION	4.576676011183766E-6	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999887254628156	WITHOUT_CLASSIFICATION	1.1274537184461841E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999313274274658	WITHOUT_CLASSIFICATION	6.867257253416746E-5	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999654867089247	WITHOUT_CLASSIFICATION	3.4513291075275156E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999714518406103	WITHOUT_CLASSIFICATION	2.8548159389701224E-5	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998656567542987	WITHOUT_CLASSIFICATION	1.3434324570127604E-4	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999983021879708	WITHOUT_CLASSIFICATION	1.6978120292107945E-5	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999422350514636	WITHOUT_CLASSIFICATION	5.776494853644892E-5	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999471977192258	WITHOUT_CLASSIFICATION	5.2802280774144684E-5	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999115980037492	WITHOUT_CLASSIFICATION	8.840199625079224E-5	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.9998716630945631	WITHOUT_CLASSIFICATION	1.2833690543697531E-4	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9998111766070046	WITHOUT_CLASSIFICATION	1.8882339299548809E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999313274274658	WITHOUT_CLASSIFICATION	6.867257253416746E-5	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999298146268468	WITHOUT_CLASSIFICATION	7.018537315317145E-5	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998950206201036	WITHOUT_CLASSIFICATION	1.0497937989636038E-4	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998838369880383	WITHOUT_CLASSIFICATION	1.1616301196167325E-4	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991671015818002	WITHOUT_CLASSIFICATION	8.328984181997483E-4	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991671015818002	WITHOUT_CLASSIFICATION	8.328984181997483E-4	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991671015818002	WITHOUT_CLASSIFICATION	8.328984181997483E-4	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999808477926253	WITHOUT_CLASSIFICATION	1.9152207374646883E-5	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999808477926253	WITHOUT_CLASSIFICATION	1.9152207374646883E-5	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.999998121716537	WITHOUT_CLASSIFICATION	1.8782834630286472E-6	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999835184153755	WITHOUT_CLASSIFICATION	1.64815846245247E-5	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.9998665654370106	WITHOUT_CLASSIFICATION	1.33434562989401E-4	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.9998353066881005	WITHOUT_CLASSIFICATION	1.6469331189947314E-4	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.987083316523971	WITHOUT_CLASSIFICATION	0.01291668347602899	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998622365500099	WITHOUT_CLASSIFICATION	1.3776344999004252E-4	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999910133955893	WITHOUT_CLASSIFICATION	8.986604410696837E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998618357232177	WITHOUT_CLASSIFICATION	1.3816427678231498E-4	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999959040064579	WITHOUT_CLASSIFICATION	4.095993542112116E-6	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999936297721377	WITHOUT_CLASSIFICATION	6.370227862296569E-5	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998622365500099	WITHOUT_CLASSIFICATION	1.3776344999004252E-4	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999910133955893	WITHOUT_CLASSIFICATION	8.986604410696837E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998618357232177	WITHOUT_CLASSIFICATION	1.3816427678231498E-4	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999976730783472	WITHOUT_CLASSIFICATION	2.326921652864415E-6	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999981489664202	WITHOUT_CLASSIFICATION	1.8510335797941537E-5	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999867691424962	WITHOUT_CLASSIFICATION	1.3230857503858373E-5	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999995578166183	WITHOUT_CLASSIFICATION	4.4218338169472286E-7	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999448907047852	WITHOUT_CLASSIFICATION	5.510929521467832E-5	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.9999916792879716	WITHOUT_CLASSIFICATION	8.320712028467306E-6	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9999308385869337	WITHOUT_CLASSIFICATION	6.916141306639024E-5	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999351903537474	WITHOUT_CLASSIFICATION	6.480964625256414E-5	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999650132930179	WITHOUT_CLASSIFICATION	3.498670698198062E-5	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999886265324891	WITHOUT_CLASSIFICATION	1.1373467510865315E-5	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9997504683424142	WITHOUT_CLASSIFICATION	2.4953165758572187E-4	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999689703187182	WITHOUT_CLASSIFICATION	3.102968128177736E-5	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999884005831454	WITHOUT_CLASSIFICATION	1.1599416854610185E-5	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999587617433435	WITHOUT_CLASSIFICATION	4.12382566565607E-5	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999914378261845	WITHOUT_CLASSIFICATION	8.562173815502178E-6	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998526359619923	WITHOUT_CLASSIFICATION	1.4736403800766498E-4	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999790337254207	WITHOUT_CLASSIFICATION	2.0966274579260305E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998918701817073	WITHOUT_CLASSIFICATION	1.0812981829259336E-4	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999646359584982	WITHOUT_CLASSIFICATION	3.5364041501945566E-5	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999991346999406	WITHOUT_CLASSIFICATION	8.65300059309843E-7	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9984397814915533	WITHOUT_CLASSIFICATION	0.0015602185084466701	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999645252657171	WITHOUT_CLASSIFICATION	3.547473428300746E-5	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999953921524242	WITHOUT_CLASSIFICATION	4.607847575746684E-6	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9955007265623996	WITHOUT_CLASSIFICATION	0.0044992734376003785	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999868731516756	WITHOUT_CLASSIFICATION	1.31268483243901E-4	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999910410671567	WITHOUT_CLASSIFICATION	8.958932843129612E-6	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998808095555721	WITHOUT_CLASSIFICATION	1.1919044442789022E-4	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997814206678343	WITHOUT_CLASSIFICATION	2.1857933216567205E-4	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998151170526284	WITHOUT_CLASSIFICATION	1.8488294737154242E-4	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998151170526284	WITHOUT_CLASSIFICATION	1.8488294737154242E-4	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9997945692828037	WITHOUT_CLASSIFICATION	2.0543071719626078E-4	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9998542691912167	WITHOUT_CLASSIFICATION	1.457308087832977E-4	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.994535575126017	WITHOUT_CLASSIFICATION	0.005464424873982978	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999739970943334	WITHOUT_CLASSIFICATION	2.600290566649435E-5	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9988918653064047	WITHOUT_CLASSIFICATION	0.0011081346935952693	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999974788839504	WITHOUT_CLASSIFICATION	2.5211160496983706E-6	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.9999775424404886	WITHOUT_CLASSIFICATION	2.2457559511289993E-5	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.999907034253394	WITHOUT_CLASSIFICATION	9.296574660592588E-5	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9996654792709037	WITHOUT_CLASSIFICATION	3.3452072909642905E-4	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996126169962373	WITHOUT_CLASSIFICATION	3.8738300376278814E-4	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996126169962373	WITHOUT_CLASSIFICATION	3.8738300376278814E-4	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996126169962373	WITHOUT_CLASSIFICATION	3.8738300376278814E-4	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996126169962373	WITHOUT_CLASSIFICATION	3.8738300376278814E-4	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996126169962373	WITHOUT_CLASSIFICATION	3.8738300376278814E-4	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996126169962373	WITHOUT_CLASSIFICATION	3.8738300376278814E-4	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996126169962373	WITHOUT_CLASSIFICATION	3.8738300376278814E-4	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996126169962373	WITHOUT_CLASSIFICATION	3.8738300376278814E-4	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996126169962373	WITHOUT_CLASSIFICATION	3.8738300376278814E-4	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996126169962373	WITHOUT_CLASSIFICATION	3.8738300376278814E-4	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996126169962373	WITHOUT_CLASSIFICATION	3.8738300376278814E-4	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9972995256285505	WITHOUT_CLASSIFICATION	0.002700474371449467	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9998980397142612	WITHOUT_CLASSIFICATION	1.0196028573876912E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999908426034498	WITHOUT_CLASSIFICATION	9.157396550123729E-6	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999917317565192	WITHOUT_CLASSIFICATION	8.26824348083427E-6	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999995867902787	WITHOUT_CLASSIFICATION	4.1320972136020497E-7	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.9991614344436316	WITHOUT_CLASSIFICATION	8.385655563685102E-4	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999256206457349	WITHOUT_CLASSIFICATION	7.43793542651682E-5	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9994663584475233	WITHOUT_CLASSIFICATION	5.336415524767908E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999908426034498	WITHOUT_CLASSIFICATION	9.157396550123729E-6	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999908426034498	WITHOUT_CLASSIFICATION	9.157396550123729E-6	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999956681923811	WITHOUT_CLASSIFICATION	4.331807618913044E-6	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999820785381749	WITHOUT_CLASSIFICATION	1.7921461825059054E-5	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9992477672940311	WITHOUT_CLASSIFICATION	7.522327059689611E-4	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999950490439502	WITHOUT_CLASSIFICATION	4.950956049709179E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999070214951801	WITHOUT_CLASSIFICATION	9.297850481994846E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998918701817073	WITHOUT_CLASSIFICATION	1.0812981829259336E-4	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9996274496233613	WITHOUT_CLASSIFICATION	3.725503766386852E-4	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999943636717474	WITHOUT_CLASSIFICATION	5.6363282526056304E-5	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999457536626031	WITHOUT_CLASSIFICATION	5.424633739693096E-5	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996735495510266	WITHOUT_CLASSIFICATION	3.264504489733407E-4	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999993515468355	WITHOUT_CLASSIFICATION	6.484531645143672E-7	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999399581396874	WITHOUT_CLASSIFICATION	6.004186031265144E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998481541980148	WITHOUT_CLASSIFICATION	1.51845801985323E-4	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998481541980148	WITHOUT_CLASSIFICATION	1.51845801985323E-4	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998481541980148	WITHOUT_CLASSIFICATION	1.51845801985323E-4	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998481541980148	WITHOUT_CLASSIFICATION	1.51845801985323E-4	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998618357232177	WITHOUT_CLASSIFICATION	1.3816427678231498E-4	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998858075558107	WITHOUT_CLASSIFICATION	1.1419244418925442E-4	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999988943728601	WITHOUT_CLASSIFICATION	1.105627139903211E-5	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998618357232177	WITHOUT_CLASSIFICATION	1.3816427678231498E-4	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9986529464177738	WITHOUT_CLASSIFICATION	0.0013470535822262197	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.999997129042914	WITHOUT_CLASSIFICATION	2.870957085884165E-6	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998625436635981	WITHOUT_CLASSIFICATION	1.3745633640198658E-4	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996874220070636	WITHOUT_CLASSIFICATION	3.1257799293637925E-4	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9998486621841766	WITHOUT_CLASSIFICATION	1.513378158233265E-4	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9999584112290258	WITHOUT_CLASSIFICATION	4.158877097417852E-5	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999991675542617	WITHOUT_CLASSIFICATION	8.32445738344386E-7	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999077378786421	WITHOUT_CLASSIFICATION	9.22621213579088E-5	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9998902446395703	WITHOUT_CLASSIFICATION	1.0975536042965367E-4	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9996261749870033	WITHOUT_CLASSIFICATION	3.738250129966846E-4	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9997022922960538	WITHOUT_CLASSIFICATION	2.9770770394618463E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9997395872383235	WITHOUT_CLASSIFICATION	2.6041276167656076E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9997395872383235	WITHOUT_CLASSIFICATION	2.6041276167656076E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9997395872383235	WITHOUT_CLASSIFICATION	2.6041276167656076E-4	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.999995729109468	WITHOUT_CLASSIFICATION	4.270890532075659E-6	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.9999725047554887	WITHOUT_CLASSIFICATION	2.749524451127288E-5	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999991187250238	WITHOUT_CLASSIFICATION	8.812749761576132E-7	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999864751709449	WITHOUT_CLASSIFICATION	1.3524829055105615E-4	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999864751709449	WITHOUT_CLASSIFICATION	1.3524829055105615E-4	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999884361306342	WITHOUT_CLASSIFICATION	1.1563869365869047E-5	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991671015818002	WITHOUT_CLASSIFICATION	8.328984181997483E-4	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9978246295220334	WITHOUT_CLASSIFICATION	0.002175370477966542	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999698677825243	WITHOUT_CLASSIFICATION	3.013221747572055E-5	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9997582952106173	WITHOUT_CLASSIFICATION	2.4170478938273718E-4	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9998576557056884	WITHOUT_CLASSIFICATION	1.423442943115432E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999861838969908	WITHOUT_CLASSIFICATION	1.38161030092055E-4	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999900789729963	WITHOUT_CLASSIFICATION	9.921027003640603E-6	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.99988489983716	WITHOUT_CLASSIFICATION	1.1510016284001002E-4	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999276022399166	WITHOUT_CLASSIFICATION	7.239776008332956E-5	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999230311324937	WITHOUT_CLASSIFICATION	7.696886750629838E-5	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999576707012793	WITHOUT_CLASSIFICATION	4.2329298720822174E-5	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999753968091337	WITHOUT_CLASSIFICATION	2.460319086622668E-5	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.999942863864866	WITHOUT_CLASSIFICATION	5.7136135134024355E-5	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999051029135	WITHOUT_CLASSIFICATION	9.48970864467208E-8	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999988806670863	WITHOUT_CLASSIFICATION	1.11933291363059E-6	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999992610217048	WITHOUT_CLASSIFICATION	7.389782951157449E-7	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999993443959972	WITHOUT_CLASSIFICATION	6.556040027377073E-7	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9997631477493277	WITHOUT_CLASSIFICATION	2.3685225067223345E-4	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9998256982454636	WITHOUT_CLASSIFICATION	1.743017545363222E-4	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999989232018612	WITHOUT_CLASSIFICATION	1.0767981387943007E-6	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.999889112342539	WITHOUT_CLASSIFICATION	1.1088765746103114E-4	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999997464890839	WITHOUT_CLASSIFICATION	2.5351091618816894E-7	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999868345431819	WITHOUT_CLASSIFICATION	1.3165456818086686E-5	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999968496139282	WITHOUT_CLASSIFICATION	3.1503860717440366E-6	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.99986008572492	WITHOUT_CLASSIFICATION	1.3991427507993346E-4	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999858050343726	WITHOUT_CLASSIFICATION	1.419496562727157E-5	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9683475486894423	WITHOUT_CLASSIFICATION	0.03165245131055774	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999351903537474	WITHOUT_CLASSIFICATION	6.480964625256414E-5	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9997394488358473	WITHOUT_CLASSIFICATION	2.605511641527159E-4	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9725352566026824	WITHOUT_CLASSIFICATION	0.02746474339731761	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.9996350503833228	WITHOUT_CLASSIFICATION	3.6494961667721303E-4	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999826006867201	WITHOUT_CLASSIFICATION	1.7399313279905973E-4	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.9998947112442926	WITHOUT_CLASSIFICATION	1.0528875570733236E-4	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999908740327458	WITHOUT_CLASSIFICATION	9.125967254144128E-6	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9998394724210824	WITHOUT_CLASSIFICATION	1.605275789175811E-4	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9920738288688117	WITHOUT_CLASSIFICATION	0.007926171131188217	IMPLEMENTATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999849474920343	WITHOUT_CLASSIFICATION	1.5052507965813165E-5	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999995487346531	WITHOUT_CLASSIFICATION	4.5126534679085544E-7	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999552879769513	WITHOUT_CLASSIFICATION	4.471202304872623E-5	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.999969637350791	WITHOUT_CLASSIFICATION	3.0362649208956523E-5	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999913873918078	WITHOUT_CLASSIFICATION	8.612608192278102E-6	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999291368723714	WITHOUT_CLASSIFICATION	7.086312762861658E-5	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999985440905015	WITHOUT_CLASSIFICATION	1.4559094985469722E-6	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999892225292661	WITHOUT_CLASSIFICATION	1.0777470733952137E-5	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9996530408656991	WITHOUT_CLASSIFICATION	3.4695913430097923E-4	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9996390166496607	WITHOUT_CLASSIFICATION	3.6098335033929186E-4	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9995480370822943	WITHOUT_CLASSIFICATION	4.5196291770568557E-4	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9986094608422402	WITHOUT_CLASSIFICATION	0.0013905391577597678	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.9999243921733969	WITHOUT_CLASSIFICATION	7.560782660305461E-5	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9995468064908585	WITHOUT_CLASSIFICATION	4.531935091415271E-4	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.9999424026269322	WITHOUT_CLASSIFICATION	5.759737306768169E-5	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999790167661531	WITHOUT_CLASSIFICATION	2.098323384700674E-5	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9979767020730351	WITHOUT_CLASSIFICATION	0.0020232979269648585	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999838835809048	WITHOUT_CLASSIFICATION	1.6116419095217663E-5	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999860985728508	WITHOUT_CLASSIFICATION	1.3901427149248368E-5	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999497661566	WITHOUT_CLASSIFICATION	5.023384350813392E-8	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9998885955793227	WITHOUT_CLASSIFICATION	1.1140442067721669E-4	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999742719049727	WITHOUT_CLASSIFICATION	2.5728095027381084E-5	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999993534110887	WITHOUT_CLASSIFICATION	6.465889113459765E-7	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999996557801444	WITHOUT_CLASSIFICATION	3.442198556763266E-7	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9998687732830115	WITHOUT_CLASSIFICATION	1.312267169884979E-4	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9884458137617833	WITHOUT_CLASSIFICATION	0.01155418623821656	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998352657814924	WITHOUT_CLASSIFICATION	1.6473421850764493E-4	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999908900074519	WITHOUT_CLASSIFICATION	9.10999254803313E-6	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9998051437281844	WITHOUT_CLASSIFICATION	1.948562718155585E-4	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9998825796620241	WITHOUT_CLASSIFICATION	1.1742033797580327E-4	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9997319519213447	WITHOUT_CLASSIFICATION	2.680480786552951E-4	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999875678158121	WITHOUT_CLASSIFICATION	1.2432184187959844E-5	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999715774824807	WITHOUT_CLASSIFICATION	2.842251751926199E-5	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999703305618178	WITHOUT_CLASSIFICATION	2.966943818227036E-5	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9992192213532991	WITHOUT_CLASSIFICATION	7.80778646700871E-4	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999632111290987	WITHOUT_CLASSIFICATION	3.6788870901249365E-5	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.9996758903965598	WITHOUT_CLASSIFICATION	3.241096034401988E-4	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999899100398532	WITHOUT_CLASSIFICATION	1.0089960146804929E-4	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9996075010845819	WITHOUT_CLASSIFICATION	3.924989154182154E-4	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.8084616391147791	IMPLEMENTATION	0.1915383608852208	WITHOUT_CLASSIFICATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9998638639345362	WITHOUT_CLASSIFICATION	1.3613606546384176E-4	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9708455288423894	WITHOUT_CLASSIFICATION	0.029154471157610513	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.8492573852475221	WITHOUT_CLASSIFICATION	0.15074261475247783	IMPLEMENTATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9996091218677937	WITHOUT_CLASSIFICATION	3.908781322063371E-4	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9993973463761939	WITHOUT_CLASSIFICATION	6.02653623806072E-4	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999116885144953	WITHOUT_CLASSIFICATION	8.831148550465074E-5	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9996772309839246	WITHOUT_CLASSIFICATION	3.2276901607543876E-4	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9995765528925383	WITHOUT_CLASSIFICATION	4.234471074617189E-4	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.998018762760552	WITHOUT_CLASSIFICATION	0.0019812372394479604	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.9999443564459817	WITHOUT_CLASSIFICATION	5.564355401830289E-5	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9998871471154315	WITHOUT_CLASSIFICATION	1.1285288456844747E-4	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999690294141096	WITHOUT_CLASSIFICATION	3.097058589049241E-5	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.999996172564447	WITHOUT_CLASSIFICATION	3.827435553102795E-6	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9993786168417176	WITHOUT_CLASSIFICATION	6.213831582824102E-4	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999861565020016	WITHOUT_CLASSIFICATION	1.3843497998265205E-5	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9998527522522789	WITHOUT_CLASSIFICATION	1.4724774772120888E-4	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.999973883209638	WITHOUT_CLASSIFICATION	2.6116790361985164E-5	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.9998026794219579	WITHOUT_CLASSIFICATION	1.9732057804203686E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997169780751799	WITHOUT_CLASSIFICATION	2.830219248201372E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997169780751799	WITHOUT_CLASSIFICATION	2.830219248201372E-4	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999808265892612	WITHOUT_CLASSIFICATION	1.917341073880728E-5	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9986795349243521	WITHOUT_CLASSIFICATION	0.0013204650756478364	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999352036977742	WITHOUT_CLASSIFICATION	6.47963022257698E-5	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999983282873268	WITHOUT_CLASSIFICATION	1.6717126732721662E-6	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9997559059808119	WITHOUT_CLASSIFICATION	2.440940191881013E-4	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9998847348160735	WITHOUT_CLASSIFICATION	1.1526518392654007E-4	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999842532334708	WITHOUT_CLASSIFICATION	1.5746766529154693E-5	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999438315962792	WITHOUT_CLASSIFICATION	5.616840372074759E-5	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9998454411426816	WITHOUT_CLASSIFICATION	1.5455885731843763E-4	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.7909968108139563	WITHOUT_CLASSIFICATION	0.20900318918604355	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999948174751326	WITHOUT_CLASSIFICATION	5.18252486738415E-6	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999997805824388	WITHOUT_CLASSIFICATION	2.1941756112917166E-7	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9993274924445881	WITHOUT_CLASSIFICATION	6.725075554118273E-4	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.99999937367129	WITHOUT_CLASSIFICATION	6.263287099992425E-7	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999706619838059	WITHOUT_CLASSIFICATION	2.933801619404579E-5	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.999956433487774	WITHOUT_CLASSIFICATION	4.356651222608692E-5	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.986699900005856	IMPLEMENTATION	0.013300099994144087	WITHOUT_CLASSIFICATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.986699900005856	IMPLEMENTATION	0.013300099994144087	WITHOUT_CLASSIFICATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9998677149521928	WITHOUT_CLASSIFICATION	1.322850478072013E-4	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999670038009353	WITHOUT_CLASSIFICATION	3.299619906469582E-5	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999905137981413	WITHOUT_CLASSIFICATION	9.486201858706632E-5	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999674218919432	WITHOUT_CLASSIFICATION	3.257810805684454E-5	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996039580519828	WITHOUT_CLASSIFICATION	3.9604194801714696E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999077378786421	WITHOUT_CLASSIFICATION	9.22621213579088E-5	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998938318330356	WITHOUT_CLASSIFICATION	1.0616816696436135E-4	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996039580519828	WITHOUT_CLASSIFICATION	3.9604194801714696E-4	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999579625385133	WITHOUT_CLASSIFICATION	4.2037461486676494E-5	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997871362322248	WITHOUT_CLASSIFICATION	2.1286376777519554E-4	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9998606423497763	WITHOUT_CLASSIFICATION	1.3935765022363866E-4	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9998606423497763	WITHOUT_CLASSIFICATION	1.3935765022363866E-4	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999343801484164	WITHOUT_CLASSIFICATION	6.56198515836242E-5	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999792634776792	WITHOUT_CLASSIFICATION	2.0736522320796407E-4	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9998662712319242	WITHOUT_CLASSIFICATION	1.33728768075747E-4	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9997055889915165	WITHOUT_CLASSIFICATION	2.9441100848352206E-4	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9998662712319242	WITHOUT_CLASSIFICATION	1.33728768075747E-4	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999992021312	WITHOUT_CLASSIFICATION	7.978687592263369E-10	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9997995928738866	WITHOUT_CLASSIFICATION	2.004071261132314E-4	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999658769665394	WITHOUT_CLASSIFICATION	3.412303346054637E-5	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9994087046736513	WITHOUT_CLASSIFICATION	5.912953263487374E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998736401049126	WITHOUT_CLASSIFICATION	1.263598950874542E-4	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999893901396256	WITHOUT_CLASSIFICATION	1.060986037434665E-5	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999875852405906	WITHOUT_CLASSIFICATION	1.241475940937194E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9996683854386399	WITHOUT_CLASSIFICATION	3.31614561359998E-4	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999539457966343	WITHOUT_CLASSIFICATION	4.6054203365670505E-5	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999480924462707	WITHOUT_CLASSIFICATION	5.190755372924428E-5	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999582585983735	WITHOUT_CLASSIFICATION	4.174140162662655E-5	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9995329460644412	WITHOUT_CLASSIFICATION	4.670539355587764E-4	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9997741388564867	WITHOUT_CLASSIFICATION	2.258611435132327E-4	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.9999946024696897	WITHOUT_CLASSIFICATION	5.397530310298545E-6	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999987893448691	WITHOUT_CLASSIFICATION	1.210655130959627E-6	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.999674310369895	WITHOUT_CLASSIFICATION	3.256896301050576E-4	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999499775920662	WITHOUT_CLASSIFICATION	5.0022407933900326E-5	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.999889307449456	WITHOUT_CLASSIFICATION	1.1069255054403387E-4	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9986938666173638	WITHOUT_CLASSIFICATION	0.0013061333826361583	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9994990021516656	WITHOUT_CLASSIFICATION	5.009978483343755E-4	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999404319217381	WITHOUT_CLASSIFICATION	5.956807826189628E-5	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999254143026026	WITHOUT_CLASSIFICATION	7.458569739732316E-5	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9555706402816591	WITHOUT_CLASSIFICATION	0.04442935971834084	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999975278131955	WITHOUT_CLASSIFICATION	2.472186804504467E-5	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9993646477153424	WITHOUT_CLASSIFICATION	6.353522846577208E-4	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999986397358217	WITHOUT_CLASSIFICATION	1.360264178266975E-6	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9998960140536999	WITHOUT_CLASSIFICATION	1.0398594630020835E-4	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9998222032329229	WITHOUT_CLASSIFICATION	1.7779676707697359E-4	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999905954713223	WITHOUT_CLASSIFICATION	9.404528677591104E-6	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9806403555463239	WITHOUT_CLASSIFICATION	0.01935964445367606	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9997718225823817	WITHOUT_CLASSIFICATION	2.2817741761826908E-4	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9997762885348972	WITHOUT_CLASSIFICATION	2.2371146510289104E-4	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9997611337232158	WITHOUT_CLASSIFICATION	2.388662767840725E-4	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9997611337232158	WITHOUT_CLASSIFICATION	2.388662767840725E-4	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999704980850296	WITHOUT_CLASSIFICATION	2.9501914970500672E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999914378247635	WITHOUT_CLASSIFICATION	8.562175236505742E-5	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999845788664595	WITHOUT_CLASSIFICATION	1.5421133540513522E-4	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.9998023568785978	WITHOUT_CLASSIFICATION	1.9764312140221264E-4	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9998615337963773	WITHOUT_CLASSIFICATION	1.3846620362277488E-4	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999952588011971	WITHOUT_CLASSIFICATION	4.741198802827417E-6	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999993952382743	WITHOUT_CLASSIFICATION	6.047617255977598E-7	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9993416830348741	WITHOUT_CLASSIFICATION	6.583169651258469E-4	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999704980850296	WITHOUT_CLASSIFICATION	2.9501914970500672E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999914378247635	WITHOUT_CLASSIFICATION	8.562175236505742E-5	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998184685849518	WITHOUT_CLASSIFICATION	1.8153141504822967E-4	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.6526349272091193	WITHOUT_CLASSIFICATION	0.34736507279088075	IMPLEMENTATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999782177920686	WITHOUT_CLASSIFICATION	2.1782207931432793E-5	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9997582918840556	WITHOUT_CLASSIFICATION	2.417081159443774E-4	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999992910636231	WITHOUT_CLASSIFICATION	7.089363770244241E-7	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.995805305360197	WITHOUT_CLASSIFICATION	0.004194694639802953	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.999839463039474	WITHOUT_CLASSIFICATION	1.6053696052600755E-4	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999553487904261	WITHOUT_CLASSIFICATION	4.465120957384896E-5	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999811141650973	WITHOUT_CLASSIFICATION	1.8885834902640607E-5	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7478038645566174	WITHOUT_CLASSIFICATION	0.2521961354433827	IMPLEMENTATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.999996964571033	WITHOUT_CLASSIFICATION	3.0354289669931152E-6	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7478038645566174	WITHOUT_CLASSIFICATION	0.2521961354433827	IMPLEMENTATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999298333376142	WITHOUT_CLASSIFICATION	7.016666238587626E-5	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9998687732830115	WITHOUT_CLASSIFICATION	1.312267169884979E-4	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999298333376142	WITHOUT_CLASSIFICATION	7.016666238587626E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998188641448551	WITHOUT_CLASSIFICATION	1.811358551448566E-4	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999776818285747	WITHOUT_CLASSIFICATION	2.2318171425214985E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999553487904261	WITHOUT_CLASSIFICATION	4.465120957384896E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999553487904261	WITHOUT_CLASSIFICATION	4.465120957384896E-5	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.99991517938757	WITHOUT_CLASSIFICATION	8.482061242992838E-5	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999156414048621	WITHOUT_CLASSIFICATION	8.435859513782416E-5	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.99991517938757	WITHOUT_CLASSIFICATION	8.482061242992838E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999854640851596	WITHOUT_CLASSIFICATION	1.4535914840399446E-4	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999602252366939	WITHOUT_CLASSIFICATION	3.977476330615441E-5	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999362583739989	WITHOUT_CLASSIFICATION	6.374162600117884E-5	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.7949875263469725	WITHOUT_CLASSIFICATION	0.20501247365302755	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9998563328655228	WITHOUT_CLASSIFICATION	1.4366713447711983E-4	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999751318334151	WITHOUT_CLASSIFICATION	2.4868166584910464E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999339390576005	WITHOUT_CLASSIFICATION	6.606094239950228E-5	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.9999429417833001	WITHOUT_CLASSIFICATION	5.7058216699840867E-5	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.9999402538354839	WITHOUT_CLASSIFICATION	5.9746164516009824E-5	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999985335912968	WITHOUT_CLASSIFICATION	1.4664087032087989E-6	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.9998307005876863	WITHOUT_CLASSIFICATION	1.6929941231363823E-4	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9999394372542308	WITHOUT_CLASSIFICATION	6.0562745769061896E-5	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9998477013882794	WITHOUT_CLASSIFICATION	1.522986117206926E-4	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999903686937556	WITHOUT_CLASSIFICATION	9.63130624440072E-5	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9998661642155499	WITHOUT_CLASSIFICATION	1.3383578445006313E-4	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998911859811372	WITHOUT_CLASSIFICATION	1.0881401886276152E-4	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9997741388564867	WITHOUT_CLASSIFICATION	2.258611435132327E-4	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999961749428185	WITHOUT_CLASSIFICATION	3.8250571815022444E-5	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.999871694585855	WITHOUT_CLASSIFICATION	1.2830541414499035E-4	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999711761362238	WITHOUT_CLASSIFICATION	2.8823863776198294E-4	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9997741388564867	WITHOUT_CLASSIFICATION	2.258611435132327E-4	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9997834873044521	WITHOUT_CLASSIFICATION	2.1651269554780783E-4	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998722156112446	WITHOUT_CLASSIFICATION	1.2778438875538732E-4	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9987376766192216	WITHOUT_CLASSIFICATION	0.0012623233807783501	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.5199011323039778	WITHOUT_CLASSIFICATION	0.48009886769602217	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9997125933956076	WITHOUT_CLASSIFICATION	2.874066043924495E-4	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999070083894401	WITHOUT_CLASSIFICATION	9.299161055983413E-5	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9556390462300272	WITHOUT_CLASSIFICATION	0.04436095376997276	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9998722914048286	WITHOUT_CLASSIFICATION	1.2770859517138104E-4	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9998563328655228	WITHOUT_CLASSIFICATION	1.4366713447711983E-4	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999444617056621	WITHOUT_CLASSIFICATION	5.553829433794667E-5	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.6467344030847778	WITHOUT_CLASSIFICATION	0.3532655969152221	IMPLEMENTATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.6401095370773472	WITHOUT_CLASSIFICATION	0.3598904629226528	IMPLEMENTATION
an assertion	WITHOUT_CLASSIFICATION	0.9999670230397277	WITHOUT_CLASSIFICATION	3.2976960272223274E-5	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.999964019240709	WITHOUT_CLASSIFICATION	3.5980759290933124E-5	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.9999318473021841	WITHOUT_CLASSIFICATION	6.815269781600633E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999854640851596	WITHOUT_CLASSIFICATION	1.4535914840399446E-4	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999854640851596	WITHOUT_CLASSIFICATION	1.4535914840399446E-4	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9998631197164728	WITHOUT_CLASSIFICATION	1.368802835272883E-4	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999698062489445	WITHOUT_CLASSIFICATION	3.0193751055419988E-5	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.9985142391456686	WITHOUT_CLASSIFICATION	0.0014857608543313537	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.9998773245419978	WITHOUT_CLASSIFICATION	1.22675458002055E-4	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9997203985758454	WITHOUT_CLASSIFICATION	2.796014241546783E-4	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9998046968126917	WITHOUT_CLASSIFICATION	1.9530318730833437E-4	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9995283011425051	WITHOUT_CLASSIFICATION	4.7169885749484693E-4	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999995671774718	WITHOUT_CLASSIFICATION	4.3282252815706034E-7	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.999844244766456	WITHOUT_CLASSIFICATION	1.5575523354412188E-4	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999373924353144	WITHOUT_CLASSIFICATION	6.260756468561354E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999809046261754	WITHOUT_CLASSIFICATION	1.9095373824534214E-5	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9998477013882794	WITHOUT_CLASSIFICATION	1.522986117206926E-4	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999704980850296	WITHOUT_CLASSIFICATION	2.9501914970500672E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999809046261754	WITHOUT_CLASSIFICATION	1.9095373824534214E-5	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.999874936915517	WITHOUT_CLASSIFICATION	1.2506308448311066E-4	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999521186982331	WITHOUT_CLASSIFICATION	4.7881301766825244E-5	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999540550631094	WITHOUT_CLASSIFICATION	4.594493689057717E-5	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.8769127730321843	IMPLEMENTATION	0.12308722696781572	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999641797534603	WITHOUT_CLASSIFICATION	3.582024653970132E-4	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999900702593679	WITHOUT_CLASSIFICATION	9.92974063212798E-6	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999748019177755	WITHOUT_CLASSIFICATION	2.5198082224426495E-5	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999981085329	WITHOUT_CLASSIFICATION	1.891467086431095E-9	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999348583354913	WITHOUT_CLASSIFICATION	6.514166450859727E-5	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.9998886912996671	WITHOUT_CLASSIFICATION	1.1130870033283403E-4	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999172793288079	WITHOUT_CLASSIFICATION	8.272067119209226E-5	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999172793288079	WITHOUT_CLASSIFICATION	8.272067119209226E-5	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999857769117431	WITHOUT_CLASSIFICATION	1.422308825690735E-5	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9741937148765598	WITHOUT_CLASSIFICATION	0.025806285123440183	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999809046261754	WITHOUT_CLASSIFICATION	1.9095373824534214E-5	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999641797534603	WITHOUT_CLASSIFICATION	3.582024653970132E-4	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999748019177755	WITHOUT_CLASSIFICATION	2.5198082224426495E-5	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999633152411533	WITHOUT_CLASSIFICATION	3.668475884662079E-5	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9994693306811554	WITHOUT_CLASSIFICATION	5.306693188444822E-4	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.9998942609500606	WITHOUT_CLASSIFICATION	1.0573904993939692E-4	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9997765123811465	WITHOUT_CLASSIFICATION	2.234876188533918E-4	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.999889964932323	WITHOUT_CLASSIFICATION	1.1003506767699037E-4	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.999874936915517	WITHOUT_CLASSIFICATION	1.2506308448311066E-4	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9998724369260721	WITHOUT_CLASSIFICATION	1.275630739278429E-4	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999397577310236	WITHOUT_CLASSIFICATION	6.024226897629949E-5	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9988016123854992	WITHOUT_CLASSIFICATION	0.0011983876145007493	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.6142756034622393	IMPLEMENTATION	0.38572439653776064	WITHOUT_CLASSIFICATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.6595802632986786	IMPLEMENTATION	0.3404197367013213	WITHOUT_CLASSIFICATION
render the SQL	WITHOUT_CLASSIFICATION	0.999945676878646	WITHOUT_CLASSIFICATION	5.432312135404314E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998188641448551	WITHOUT_CLASSIFICATION	1.811358551448566E-4	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999863349757296	WITHOUT_CLASSIFICATION	1.366502427034571E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998499103906	WITHOUT_CLASSIFICATION	1.5008960937603122E-7	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999861315822324	WITHOUT_CLASSIFICATION	1.3868417767643587E-5	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999991472508717	WITHOUT_CLASSIFICATION	8.52749128248491E-7	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999995857543452	WITHOUT_CLASSIFICATION	4.142456548005608E-7	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9998801238132903	WITHOUT_CLASSIFICATION	1.1987618670972207E-4	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.9999135845282345	WITHOUT_CLASSIFICATION	8.641547176546794E-5	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999840729180196	WITHOUT_CLASSIFICATION	1.592708198042645E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9998690513341881	WITHOUT_CLASSIFICATION	1.309486658118229E-4	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999351903537474	WITHOUT_CLASSIFICATION	6.480964625256414E-5	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.9999325957951046	WITHOUT_CLASSIFICATION	6.740420489539447E-5	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999170152099773	WITHOUT_CLASSIFICATION	8.298479002261446E-5	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999265815997294	WITHOUT_CLASSIFICATION	7.341840027064365E-5	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.9999712493890379	WITHOUT_CLASSIFICATION	2.8750610962075674E-5	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999139841073553	WITHOUT_CLASSIFICATION	8.601589264458676E-5	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9814923915327468	WITHOUT_CLASSIFICATION	0.018507608467253103	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.9997832540565665	WITHOUT_CLASSIFICATION	2.1674594343333312E-4	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999963331373497	WITHOUT_CLASSIFICATION	3.6668626502451824E-6	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9914023562948733	WITHOUT_CLASSIFICATION	0.008597643705126798	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.9998454460935572	WITHOUT_CLASSIFICATION	1.5455390644280814E-4	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.999995032149511	WITHOUT_CLASSIFICATION	4.9678504890299636E-6	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999695716010997	WITHOUT_CLASSIFICATION	3.0428398900229675E-5	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9996048388162325	WITHOUT_CLASSIFICATION	3.9516118376750414E-4	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999685914808403	WITHOUT_CLASSIFICATION	3.14085191597139E-4	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9995440042712064	WITHOUT_CLASSIFICATION	4.559957287935894E-4	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.999962352288003	WITHOUT_CLASSIFICATION	3.7647711996965564E-5	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999563066415067	WITHOUT_CLASSIFICATION	4.369335849319016E-5	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999793703881387	WITHOUT_CLASSIFICATION	2.0629611861422363E-5	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999887536175343	WITHOUT_CLASSIFICATION	1.1246382465792522E-5	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9997005985001779	WITHOUT_CLASSIFICATION	2.994014998220776E-4	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.757131711637656	IMPLEMENTATION	0.2428682883623439	WITHOUT_CLASSIFICATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999055550356631	WITHOUT_CLASSIFICATION	9.44449643367506E-5	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9995859103563918	WITHOUT_CLASSIFICATION	4.1408964360823715E-4	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999841629738245	WITHOUT_CLASSIFICATION	1.583702617554011E-5	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.6534666737305826	WITHOUT_CLASSIFICATION	0.3465333262694173	IMPLEMENTATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998863246226597	WITHOUT_CLASSIFICATION	1.1367537734023829E-4	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999421586558238	WITHOUT_CLASSIFICATION	5.784134417615634E-5	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999571083616307	WITHOUT_CLASSIFICATION	4.289163836937317E-5	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999997089630174	WITHOUT_CLASSIFICATION	2.910369826648583E-7	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999276597953609	WITHOUT_CLASSIFICATION	7.234020463913455E-5	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9996622832685147	WITHOUT_CLASSIFICATION	3.377167314853093E-4	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999213641740384	WITHOUT_CLASSIFICATION	7.863582596147678E-5	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9993202484225263	WITHOUT_CLASSIFICATION	6.797515774736222E-4	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9996622832685147	WITHOUT_CLASSIFICATION	3.377167314853093E-4	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999276597953609	WITHOUT_CLASSIFICATION	7.234020463913455E-5	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999213641740384	WITHOUT_CLASSIFICATION	7.863582596147678E-5	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.9998841232704209	WITHOUT_CLASSIFICATION	1.158767295792045E-4	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999630198388387	WITHOUT_CLASSIFICATION	3.6980161161314865E-5	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.995505445810754	WITHOUT_CLASSIFICATION	0.004494554189246041	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999506866657881	WITHOUT_CLASSIFICATION	4.931333421180692E-5	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999998304864314	WITHOUT_CLASSIFICATION	1.6951356860656257E-6	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7479212606261346	WITHOUT_CLASSIFICATION	0.25207873937386527	IMPLEMENTATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9976973367858982	WITHOUT_CLASSIFICATION	0.0023026632141017757	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999960660870774	WITHOUT_CLASSIFICATION	3.933912922711241E-6	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999984098656639	WITHOUT_CLASSIFICATION	1.5901343361453545E-6	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999157885384196	WITHOUT_CLASSIFICATION	8.421146158033722E-5	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.9994106973643336	WITHOUT_CLASSIFICATION	5.893026356665022E-4	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999892666698581	WITHOUT_CLASSIFICATION	1.0733330141831003E-5	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999254783170888	WITHOUT_CLASSIFICATION	7.452168291115582E-5	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999506866657881	WITHOUT_CLASSIFICATION	4.931333421180692E-5	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999241100023616	WITHOUT_CLASSIFICATION	7.58899976383772E-5	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999651185990422	WITHOUT_CLASSIFICATION	3.488140095784905E-5	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9995878612614176	WITHOUT_CLASSIFICATION	4.1213873858229877E-4	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999781130954359	WITHOUT_CLASSIFICATION	2.1886904564033337E-5	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9998020527705358	WITHOUT_CLASSIFICATION	1.979472294642286E-4	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9996133729565505	WITHOUT_CLASSIFICATION	3.8662704344947087E-4	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9981219058230939	WITHOUT_CLASSIFICATION	0.00187809417690612	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9998306789562877	WITHOUT_CLASSIFICATION	1.6932104371215523E-4	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9996761453480613	WITHOUT_CLASSIFICATION	3.238546519388357E-4	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9994650940217489	WITHOUT_CLASSIFICATION	5.349059782511183E-4	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9996035616305448	WITHOUT_CLASSIFICATION	3.964383694551447E-4	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9996035616305448	WITHOUT_CLASSIFICATION	3.964383694551447E-4	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9998868042584694	WITHOUT_CLASSIFICATION	1.1319574153059075E-4	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9998868042584694	WITHOUT_CLASSIFICATION	1.1319574153059075E-4	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.9990695686815061	WITHOUT_CLASSIFICATION	9.304313184938444E-4	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9995878612614176	WITHOUT_CLASSIFICATION	4.1213873858229877E-4	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9995805630159934	WITHOUT_CLASSIFICATION	4.194369840065632E-4	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999643923697767	WITHOUT_CLASSIFICATION	3.560763022320643E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999473220366154	WITHOUT_CLASSIFICATION	5.2677963384566726E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999473220366154	WITHOUT_CLASSIFICATION	5.2677963384566726E-5	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999103702454357	WITHOUT_CLASSIFICATION	8.962975456423876E-5	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9991857006198557	WITHOUT_CLASSIFICATION	8.142993801443658E-4	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9976240342746064	WITHOUT_CLASSIFICATION	0.0023759657253935463	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.9998802463657961	WITHOUT_CLASSIFICATION	1.1975363420393755E-4	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999834881981902	WITHOUT_CLASSIFICATION	1.651180180982792E-5	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999954264601276	WITHOUT_CLASSIFICATION	4.57353987236973E-6	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999460303719314	WITHOUT_CLASSIFICATION	5.396962806844225E-5	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999592364745237	WITHOUT_CLASSIFICATION	4.0763525476342516E-5	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.9998994047780158	WITHOUT_CLASSIFICATION	1.0059522198424443E-4	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.999993196436461	WITHOUT_CLASSIFICATION	6.80356353901265E-6	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.9999378217940175	WITHOUT_CLASSIFICATION	6.217820598253188E-5	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.9997985727940585	WITHOUT_CLASSIFICATION	2.0142720594145313E-4	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999723727750098	WITHOUT_CLASSIFICATION	2.7627224990107967E-5	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9999747685611444	WITHOUT_CLASSIFICATION	2.5231438855554608E-5	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9905764255632751	WITHOUT_CLASSIFICATION	0.009423574436724945	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998382391937507	WITHOUT_CLASSIFICATION	1.6176080624924472E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998663281387954	WITHOUT_CLASSIFICATION	1.3367186120471887E-4	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9995408904255664	WITHOUT_CLASSIFICATION	4.5910957443358677E-4	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9309881263907643	WITHOUT_CLASSIFICATION	0.0690118736092357	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999956608132881	WITHOUT_CLASSIFICATION	4.339186711906288E-6	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9997926523784691	WITHOUT_CLASSIFICATION	2.0734762153085286E-4	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999939460942879	WITHOUT_CLASSIFICATION	6.053905712073172E-6	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9997104742652893	WITHOUT_CLASSIFICATION	2.8952573471072764E-4	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999970843035941	WITHOUT_CLASSIFICATION	2.915696405766452E-6	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999739970943334	WITHOUT_CLASSIFICATION	2.600290566649435E-5	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9997289267104925	WITHOUT_CLASSIFICATION	2.7107328950754E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999963331373497	WITHOUT_CLASSIFICATION	3.6668626502451824E-6	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999024323091084	WITHOUT_CLASSIFICATION	9.75676908915858E-5	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999949834495737	WITHOUT_CLASSIFICATION	5.016550426340357E-6	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998678834075676	WITHOUT_CLASSIFICATION	1.3211659243232053E-4	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998622178349833	WITHOUT_CLASSIFICATION	1.377821650166654E-4	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999760872895186	WITHOUT_CLASSIFICATION	2.3912710481393875E-5	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999760872895186	WITHOUT_CLASSIFICATION	2.3912710481393875E-5	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999939232104818	WITHOUT_CLASSIFICATION	6.0767895181946144E-5	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9999073790307249	WITHOUT_CLASSIFICATION	9.262096927508904E-5	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9998604223958233	WITHOUT_CLASSIFICATION	1.3957760417671907E-4	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9998604223958233	WITHOUT_CLASSIFICATION	1.3957760417671907E-4	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9984816420475219	WITHOUT_CLASSIFICATION	0.0015183579524780694	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998121996758287	WITHOUT_CLASSIFICATION	1.8780032417134372E-4	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.9752898311519796	WITHOUT_CLASSIFICATION	0.02471016884802041	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999070214951801	WITHOUT_CLASSIFICATION	9.297850481994846E-5	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.9998550972257452	WITHOUT_CLASSIFICATION	1.4490277425494545E-4	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999973466201187	WITHOUT_CLASSIFICATION	2.6533798812445605E-6	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999271415740364	WITHOUT_CLASSIFICATION	7.285842596364527E-5	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998189217316563	WITHOUT_CLASSIFICATION	1.8107826834370808E-4	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998189217316563	WITHOUT_CLASSIFICATION	1.8107826834370808E-4	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999172053053823	WITHOUT_CLASSIFICATION	8.279469461770097E-5	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999808778359094	WITHOUT_CLASSIFICATION	1.9122164090594934E-5	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999808778359094	WITHOUT_CLASSIFICATION	1.9122164090594934E-5	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998923984081481	WITHOUT_CLASSIFICATION	1.076015918518782E-4	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.9998739389742474	WITHOUT_CLASSIFICATION	1.26061025752692E-4	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.9999645492842979	WITHOUT_CLASSIFICATION	3.5450715702071766E-5	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999844314883262	WITHOUT_CLASSIFICATION	1.5568511673769605E-5	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9998361156192009	WITHOUT_CLASSIFICATION	1.6388438079912584E-4	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999997611729345	WITHOUT_CLASSIFICATION	2.3882706543329856E-7	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999950630499281	WITHOUT_CLASSIFICATION	4.936950071936206E-6	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999361452613245	WITHOUT_CLASSIFICATION	6.385473867549699E-5	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9977797120549716	WITHOUT_CLASSIFICATION	0.00222028794502833	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9994890159597423	WITHOUT_CLASSIFICATION	5.109840402577335E-4	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9934118407064202	WITHOUT_CLASSIFICATION	0.0065881592935798095	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999631860324196	WITHOUT_CLASSIFICATION	3.6813967580326274E-5	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9996726283676146	WITHOUT_CLASSIFICATION	3.2737163238534463E-4	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.9999834620879462	WITHOUT_CLASSIFICATION	1.6537912053765273E-5	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998290005705265	WITHOUT_CLASSIFICATION	1.7099942947357622E-4	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9997945556556355	WITHOUT_CLASSIFICATION	2.0544434436451587E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999077378786421	WITHOUT_CLASSIFICATION	9.22621213579088E-5	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9992239474659241	WITHOUT_CLASSIFICATION	7.760525340758392E-4	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9998857306136438	WITHOUT_CLASSIFICATION	1.1426938635610547E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999077378786421	WITHOUT_CLASSIFICATION	9.22621213579088E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999077378786421	WITHOUT_CLASSIFICATION	9.22621213579088E-5	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9997809059747894	WITHOUT_CLASSIFICATION	2.1909402521050038E-4	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.9945625770933537	WITHOUT_CLASSIFICATION	0.005437422906646286	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.9997768443784063	WITHOUT_CLASSIFICATION	2.2315562159373097E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999797574039837	WITHOUT_CLASSIFICATION	2.0242596016241007E-5	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999997886020581	WITHOUT_CLASSIFICATION	2.1139794200878887E-7	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.955565264790822	IMPLEMENTATION	0.044434735209177824	WITHOUT_CLASSIFICATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999941149975619	WITHOUT_CLASSIFICATION	5.885002438145983E-6	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999797574039837	WITHOUT_CLASSIFICATION	2.0242596016241007E-5	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.7435171116846273	WITHOUT_CLASSIFICATION	0.25648288831537275	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998439458210736	WITHOUT_CLASSIFICATION	1.5605417892631377E-4	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999936135830063	WITHOUT_CLASSIFICATION	6.386416993680175E-6	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999688286760966	WITHOUT_CLASSIFICATION	3.117132390347373E-5	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999454809652136	WITHOUT_CLASSIFICATION	5.451903478644657E-5	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9981008459174481	WITHOUT_CLASSIFICATION	0.0018991540825519899	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999851062458407	WITHOUT_CLASSIFICATION	1.4893754159312105E-5	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999932772703469	WITHOUT_CLASSIFICATION	6.722729653118379E-6	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999115228758707	WITHOUT_CLASSIFICATION	8.847712412923769E-5	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999893836613691	WITHOUT_CLASSIFICATION	1.0616338630859086E-5	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999115228758707	WITHOUT_CLASSIFICATION	8.847712412923769E-5	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999949953634683	WITHOUT_CLASSIFICATION	5.004636531777889E-6	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9997537176672767	WITHOUT_CLASSIFICATION	2.462823327233468E-4	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.5417177507056189	WITHOUT_CLASSIFICATION	0.45828224929438116	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999983943671741	WITHOUT_CLASSIFICATION	1.605632825891524E-5	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998488011212285	WITHOUT_CLASSIFICATION	1.5119887877155488E-4	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999989272571179	WITHOUT_CLASSIFICATION	1.072742882102014E-5	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999884723817508	WITHOUT_CLASSIFICATION	1.152761824920161E-4	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999799721409204	WITHOUT_CLASSIFICATION	2.002785907961405E-5	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999884723817508	WITHOUT_CLASSIFICATION	1.152761824920161E-4	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998848909434797	WITHOUT_CLASSIFICATION	1.1510905652035687E-4	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998521379104058	WITHOUT_CLASSIFICATION	1.478620895940916E-4	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9998343674828181	WITHOUT_CLASSIFICATION	1.6563251718196967E-4	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.999979837503668	WITHOUT_CLASSIFICATION	2.0162496331992945E-5	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999253988417227	WITHOUT_CLASSIFICATION	7.460115827728218E-5	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9997741388564867	WITHOUT_CLASSIFICATION	2.258611435132327E-4	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999934472612628	WITHOUT_CLASSIFICATION	6.552738737233538E-6	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999989272571179	WITHOUT_CLASSIFICATION	1.072742882102014E-5	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999799721409204	WITHOUT_CLASSIFICATION	2.002785907961405E-5	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998848909434797	WITHOUT_CLASSIFICATION	1.1510905652035687E-4	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9998055889302109	WITHOUT_CLASSIFICATION	1.9441106978921953E-4	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.9999094325605922	WITHOUT_CLASSIFICATION	9.056743940784196E-5	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.9996246185009994	WITHOUT_CLASSIFICATION	3.7538149900061745E-4	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999965240016437	WITHOUT_CLASSIFICATION	3.4759983563346685E-6	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.9991872149801366	WITHOUT_CLASSIFICATION	8.127850198633019E-4	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9995152450244112	WITHOUT_CLASSIFICATION	4.8475497558866525E-4	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999602057444077	WITHOUT_CLASSIFICATION	3.9794255592276455E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998663281387954	WITHOUT_CLASSIFICATION	1.3367186120471887E-4	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998521379104058	WITHOUT_CLASSIFICATION	1.478620895940916E-4	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.820740474700756	WITHOUT_CLASSIFICATION	0.179259525299244	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.99991517938757	WITHOUT_CLASSIFICATION	8.482061242992838E-5	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.990722710133271	WITHOUT_CLASSIFICATION	0.009277289866728971	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999522599236026	WITHOUT_CLASSIFICATION	4.7740076397304966E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998663281387954	WITHOUT_CLASSIFICATION	1.3367186120471887E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999357740232039	WITHOUT_CLASSIFICATION	6.422597679609891E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998663281387954	WITHOUT_CLASSIFICATION	1.3367186120471887E-4	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9998992967549576	WITHOUT_CLASSIFICATION	1.0070324504234518E-4	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997295209054696	WITHOUT_CLASSIFICATION	2.7047909453041335E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9997726112899353	WITHOUT_CLASSIFICATION	2.2738871006461344E-4	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9995246971120694	WITHOUT_CLASSIFICATION	4.7530288793071483E-4	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.99995678731533	WITHOUT_CLASSIFICATION	4.321268466996617E-5	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.9999388388955265	WITHOUT_CLASSIFICATION	6.1161104473577E-5	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998338398744667	WITHOUT_CLASSIFICATION	1.6616012553335096E-4	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999914353448375	WITHOUT_CLASSIFICATION	8.564655162503018E-6	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.999904249234205	WITHOUT_CLASSIFICATION	9.575076579508123E-5	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.9999919540768644	WITHOUT_CLASSIFICATION	8.045923135588174E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999321380985965	WITHOUT_CLASSIFICATION	6.786190140352361E-5	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999659002654429	WITHOUT_CLASSIFICATION	3.409973455712129E-5	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9992573741485492	WITHOUT_CLASSIFICATION	7.426258514507247E-4	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.999898054804452	WITHOUT_CLASSIFICATION	1.0194519554787943E-4	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999826896045069	WITHOUT_CLASSIFICATION	1.7310395493158146E-5	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999594188440256	WITHOUT_CLASSIFICATION	4.0581155974471975E-5	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999835078012228	WITHOUT_CLASSIFICATION	1.6492198777215558E-5	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999851889983123	WITHOUT_CLASSIFICATION	1.4811001687710463E-5	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999997067457418	WITHOUT_CLASSIFICATION	2.932542581534717E-7	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999444780019077	WITHOUT_CLASSIFICATION	5.552199809232829E-5	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998883260656747	WITHOUT_CLASSIFICATION	1.1167393432528236E-4	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998883260656747	WITHOUT_CLASSIFICATION	1.1167393432528236E-4	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999330135281458	WITHOUT_CLASSIFICATION	6.698647185424132E-5	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999906359057539	WITHOUT_CLASSIFICATION	9.364094246057002E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999306923469373	WITHOUT_CLASSIFICATION	6.930765306264645E-5	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999997431377992	WITHOUT_CLASSIFICATION	2.568622008881384E-7	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9997206426149252	WITHOUT_CLASSIFICATION	2.7935738507474817E-4	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9996172714106146	WITHOUT_CLASSIFICATION	3.827285893854218E-4	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999426055949322	WITHOUT_CLASSIFICATION	5.739440506778414E-5	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999986597564334	WITHOUT_CLASSIFICATION	1.3402435666604985E-6	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.900799276052263	WITHOUT_CLASSIFICATION	0.09920072394773705	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999741190368135	WITHOUT_CLASSIFICATION	2.5880963186437173E-5	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999313214029625	WITHOUT_CLASSIFICATION	6.867859703748868E-5	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.9998057474293853	WITHOUT_CLASSIFICATION	1.9425257061464523E-4	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9997308724283053	WITHOUT_CLASSIFICATION	2.691275716947148E-4	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.999946174212689	WITHOUT_CLASSIFICATION	5.382578731099822E-5	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999931210022044	WITHOUT_CLASSIFICATION	6.878997795610325E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999205291238353	WITHOUT_CLASSIFICATION	7.947087616465904E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999785050239044	WITHOUT_CLASSIFICATION	2.1494976095671705E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999785050239044	WITHOUT_CLASSIFICATION	2.1494976095671705E-5	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9998221836981701	WITHOUT_CLASSIFICATION	1.7781630182981252E-4	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999914353448375	WITHOUT_CLASSIFICATION	8.564655162503018E-6	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9948103886373388	WITHOUT_CLASSIFICATION	0.005189611362661162	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999614395883896	WITHOUT_CLASSIFICATION	3.8560411610382995E-5	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9994219760776456	WITHOUT_CLASSIFICATION	5.780239223543117E-4	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999914615001091	WITHOUT_CLASSIFICATION	8.538499890960964E-6	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.9999506433391958	WITHOUT_CLASSIFICATION	4.935666080416452E-5	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.9999311096616386	WITHOUT_CLASSIFICATION	6.889033836145062E-5	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9948837121169173	WITHOUT_CLASSIFICATION	0.005116287883082659	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999088817403177	WITHOUT_CLASSIFICATION	9.111825968237612E-5	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.9999322624429756	WITHOUT_CLASSIFICATION	6.773755702434298E-5	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999991823714895	WITHOUT_CLASSIFICATION	8.17628510369178E-7	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999992921056285	WITHOUT_CLASSIFICATION	7.078943713909533E-7	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999936023087072	WITHOUT_CLASSIFICATION	6.397691292900109E-6	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9983288724073328	WITHOUT_CLASSIFICATION	0.001671127592667257	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999926343166333	WITHOUT_CLASSIFICATION	7.365683366707468E-5	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999569328408681	WITHOUT_CLASSIFICATION	4.3067159131938014E-5	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999671732356862	WITHOUT_CLASSIFICATION	3.2826764313861706E-5	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9996326135909782	WITHOUT_CLASSIFICATION	3.67386409021699E-4	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9994626310206753	WITHOUT_CLASSIFICATION	5.373689793247928E-4	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999609711319117	WITHOUT_CLASSIFICATION	3.902886808830353E-5	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999808099966238	WITHOUT_CLASSIFICATION	1.9190003376291902E-5	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9994762199291712	WITHOUT_CLASSIFICATION	5.237800708288289E-4	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9997616952395011	WITHOUT_CLASSIFICATION	2.3830476049891322E-4	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.999999631885001	WITHOUT_CLASSIFICATION	3.6811499906298146E-7	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999996768415358	WITHOUT_CLASSIFICATION	3.231584642636455E-7	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999679487490133	WITHOUT_CLASSIFICATION	3.2051250986740745E-5	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.7910577084503047	WITHOUT_CLASSIFICATION	0.20894229154969535	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9992309089071347	WITHOUT_CLASSIFICATION	7.690910928653241E-4	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9992222595712704	WITHOUT_CLASSIFICATION	7.777404287296968E-4	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998622365500099	WITHOUT_CLASSIFICATION	1.3776344999004252E-4	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9998654985288002	WITHOUT_CLASSIFICATION	1.345014711996555E-4	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.999998327463378	WITHOUT_CLASSIFICATION	1.6725366219143416E-6	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999095425795668	WITHOUT_CLASSIFICATION	9.045742043328299E-5	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9998949154158855	WITHOUT_CLASSIFICATION	1.0508458411445064E-4	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9991916992101035	WITHOUT_CLASSIFICATION	8.083007898964009E-4	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999842384213208	WITHOUT_CLASSIFICATION	1.576157867920015E-5	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9996609765038112	WITHOUT_CLASSIFICATION	3.3902349618871374E-4	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9995671767020423	WITHOUT_CLASSIFICATION	4.328232979576568E-4	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9995671767020423	WITHOUT_CLASSIFICATION	4.328232979576568E-4	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999771196414472	WITHOUT_CLASSIFICATION	2.2880358552789955E-4	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999314799622968	WITHOUT_CLASSIFICATION	6.852003770319824E-5	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999880262403651	WITHOUT_CLASSIFICATION	1.197375963493198E-5	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999880262403651	WITHOUT_CLASSIFICATION	1.197375963493198E-5	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.999954565507429	WITHOUT_CLASSIFICATION	4.5434492570984196E-5	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999599409089645	WITHOUT_CLASSIFICATION	4.0059091035500777E-5	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9981315826765997	WITHOUT_CLASSIFICATION	0.001868417323400213	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999656415404404	WITHOUT_CLASSIFICATION	3.435845955964514E-5	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998973484121382	WITHOUT_CLASSIFICATION	1.0265158786183212E-4	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999972188045106	WITHOUT_CLASSIFICATION	2.7811954892949612E-6	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999972188045106	WITHOUT_CLASSIFICATION	2.7811954892949612E-6	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999133461286128	WITHOUT_CLASSIFICATION	8.665387138723511E-5	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.999854640851596	WITHOUT_CLASSIFICATION	1.4535914840399446E-4	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.9998909041418302	WITHOUT_CLASSIFICATION	1.0909585816979429E-4	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998170621901572	WITHOUT_CLASSIFICATION	1.829378098427262E-4	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999757509774272	WITHOUT_CLASSIFICATION	2.4249022572821634E-5	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9998979742917691	WITHOUT_CLASSIFICATION	1.0202570823086885E-4	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999958857513612	WITHOUT_CLASSIFICATION	4.114248638812168E-6	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.9998000273867285	WITHOUT_CLASSIFICATION	1.9997261327143928E-4	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998989195381457	WITHOUT_CLASSIFICATION	1.0108046185434131E-4	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.9994200411646647	WITHOUT_CLASSIFICATION	5.799588353353006E-4	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.9999049835603653	WITHOUT_CLASSIFICATION	9.501643963469466E-5	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.999978195910458	WITHOUT_CLASSIFICATION	2.1804089541945066E-5	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999706433179962	WITHOUT_CLASSIFICATION	2.9356682003804734E-5	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9436980401655211	WITHOUT_CLASSIFICATION	0.05630195983447905	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.8740557069967675	WITHOUT_CLASSIFICATION	0.12594429300323257	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999870379256605	WITHOUT_CLASSIFICATION	1.2962074339516113E-5	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.9999307639718057	WITHOUT_CLASSIFICATION	6.923602819432997E-5	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999999251116845	WITHOUT_CLASSIFICATION	7.488831550402787E-7	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9997282114773308	WITHOUT_CLASSIFICATION	2.7178852266914925E-4	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9792228153823023	WITHOUT_CLASSIFICATION	0.02077718461769772	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9947098694151337	WITHOUT_CLASSIFICATION	0.005290130584866203	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999258622570013	WITHOUT_CLASSIFICATION	7.413774299870143E-4	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9976020405022807	WITHOUT_CLASSIFICATION	0.0023979594977193383	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9997738015772787	WITHOUT_CLASSIFICATION	2.2619842272141372E-4	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9989638305480892	WITHOUT_CLASSIFICATION	0.0010361694519107525	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999640254536382	WITHOUT_CLASSIFICATION	3.597454636191557E-5	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.9999395062297023	WITHOUT_CLASSIFICATION	6.0493770297803704E-5	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999451893724987	WITHOUT_CLASSIFICATION	5.4810627501248213E-5	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.999842186960703	WITHOUT_CLASSIFICATION	1.5781303929708458E-4	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999963787785352	WITHOUT_CLASSIFICATION	3.6212214648830374E-6	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999884005831454	WITHOUT_CLASSIFICATION	1.1599416854610185E-5	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999991346999406	WITHOUT_CLASSIFICATION	8.65300059309843E-7	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999758100112968	WITHOUT_CLASSIFICATION	2.418998870318616E-5	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999515598739014	WITHOUT_CLASSIFICATION	4.844012609858689E-5	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9997906474126232	WITHOUT_CLASSIFICATION	2.0935258737676376E-4	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999351903537474	WITHOUT_CLASSIFICATION	6.480964625256414E-5	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999637074994043	WITHOUT_CLASSIFICATION	3.6292500595755804E-5	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999874009186633	WITHOUT_CLASSIFICATION	1.2599081336796923E-5	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999351667346942	WITHOUT_CLASSIFICATION	6.483326530576257E-5	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.9998712721047459	WITHOUT_CLASSIFICATION	1.2872789525404424E-4	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.9998843892515684	WITHOUT_CLASSIFICATION	1.1561074843157622E-4	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.9999319431810655	WITHOUT_CLASSIFICATION	6.805681893453184E-5	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9999329857018219	WITHOUT_CLASSIFICATION	6.701429817805945E-5	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.9998546200551643	WITHOUT_CLASSIFICATION	1.453799448356611E-4	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.9998793258299005	WITHOUT_CLASSIFICATION	1.2067417009955412E-4	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9997866662186158	WITHOUT_CLASSIFICATION	2.1333378138418813E-4	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9948997026021149	WITHOUT_CLASSIFICATION	0.00510029739788513	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9995737136573141	WITHOUT_CLASSIFICATION	4.2628634268600685E-4	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999152015814958	WITHOUT_CLASSIFICATION	8.479841850426966E-5	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9961987663123805	WITHOUT_CLASSIFICATION	0.0038012336876195956	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.6205096638148198	IMPLEMENTATION	0.37949033618518013	WITHOUT_CLASSIFICATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9883390861574652	WITHOUT_CLASSIFICATION	0.011660913842534645	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999515645573772	WITHOUT_CLASSIFICATION	4.843544262287483E-5	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999722139974009	WITHOUT_CLASSIFICATION	2.7786002599129108E-5	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.99995668947729	WITHOUT_CLASSIFICATION	4.331052270995017E-5	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999667203651776	WITHOUT_CLASSIFICATION	3.327963482233179E-5	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9997859665813785	WITHOUT_CLASSIFICATION	2.140334186215961E-4	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999883806286712	WITHOUT_CLASSIFICATION	1.1619371328740048E-5	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9952016161267493	WITHOUT_CLASSIFICATION	0.004798383873250803	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9952016161267493	WITHOUT_CLASSIFICATION	0.004798383873250803	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999999997637778	WITHOUT_CLASSIFICATION	2.3622220247624366E-9	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999904651978405	WITHOUT_CLASSIFICATION	9.534802159488407E-6	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999973764098596	WITHOUT_CLASSIFICATION	2.623590140278865E-6	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999797466128002	WITHOUT_CLASSIFICATION	2.025338719980617E-5	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9998885440426546	WITHOUT_CLASSIFICATION	1.114559573453421E-4	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.999970731812554	WITHOUT_CLASSIFICATION	2.9268187445917066E-5	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999160467996129	WITHOUT_CLASSIFICATION	8.395320038712089E-5	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999923148394326	WITHOUT_CLASSIFICATION	7.685160567321768E-6	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999803755961212	WITHOUT_CLASSIFICATION	1.9624403878902257E-5	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999961848463019	WITHOUT_CLASSIFICATION	3.815153697989368E-6	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999972583381419	WITHOUT_CLASSIFICATION	2.741661858090405E-6	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9996966940971076	WITHOUT_CLASSIFICATION	3.0330590289239645E-4	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999992944307149	WITHOUT_CLASSIFICATION	7.055692850567112E-7	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999384119975514	WITHOUT_CLASSIFICATION	6.15880024486086E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999714518406103	WITHOUT_CLASSIFICATION	2.8548159389701224E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999714518406103	WITHOUT_CLASSIFICATION	2.8548159389701224E-5	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999866429052243	WITHOUT_CLASSIFICATION	1.3357094775820305E-5	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999735155673478	WITHOUT_CLASSIFICATION	2.6484432652226714E-5	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999740055458914	WITHOUT_CLASSIFICATION	2.5994454108529082E-5	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999959139462983	WITHOUT_CLASSIFICATION	4.086053701702343E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998656567542987	WITHOUT_CLASSIFICATION	1.3434324570127604E-4	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999129303128744	WITHOUT_CLASSIFICATION	8.706968712555328E-5	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9997303110240235	WITHOUT_CLASSIFICATION	2.6968897597638036E-4	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.9999689083394503	WITHOUT_CLASSIFICATION	3.1091660549608146E-5	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999587841701614	WITHOUT_CLASSIFICATION	4.121582983864141E-5	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.999660146005488	WITHOUT_CLASSIFICATION	3.39853994512025E-4	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999902914101936	WITHOUT_CLASSIFICATION	9.70858980641683E-6	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999546857385564	WITHOUT_CLASSIFICATION	4.531426144373688E-5	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999100955766946	WITHOUT_CLASSIFICATION	8.990442330540594E-5	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.99997104128259	WITHOUT_CLASSIFICATION	2.895871741000726E-5	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9993408672110315	WITHOUT_CLASSIFICATION	6.591327889684997E-4	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9992915799075044	WITHOUT_CLASSIFICATION	7.084200924956496E-4	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999266701902266	WITHOUT_CLASSIFICATION	7.332980977337207E-5	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999937100850511	WITHOUT_CLASSIFICATION	6.289914948906877E-6	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999982165363032	WITHOUT_CLASSIFICATION	1.7834636967628777E-6	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999697324971525	WITHOUT_CLASSIFICATION	3.0267502847490694E-5	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.999996213251898	WITHOUT_CLASSIFICATION	3.7867481018983034E-6	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999972539322303	WITHOUT_CLASSIFICATION	2.7460677696882297E-6	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999994335701018	WITHOUT_CLASSIFICATION	5.664298981451476E-7	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999290459352	WITHOUT_CLASSIFICATION	7.095406479743712E-7	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999928484742873	WITHOUT_CLASSIFICATION	7.151525712821184E-6	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.9998524326590603	WITHOUT_CLASSIFICATION	1.4756734093971147E-4	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999886265324891	WITHOUT_CLASSIFICATION	1.1373467510865315E-5	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9900353181234478	WITHOUT_CLASSIFICATION	0.009964681876552148	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9975309458692845	WITHOUT_CLASSIFICATION	0.0024690541307154667	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9968609455124733	WITHOUT_CLASSIFICATION	0.003139054487526676	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999448017577147	WITHOUT_CLASSIFICATION	5.519824228529487E-4	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999933943340392	WITHOUT_CLASSIFICATION	6.605665960746402E-6	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.999988794226709	WITHOUT_CLASSIFICATION	1.1205773291044117E-5	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999367634184666	WITHOUT_CLASSIFICATION	6.323658153343843E-5	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999981781868701	WITHOUT_CLASSIFICATION	1.8218131298933732E-5	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9929969395715385	WITHOUT_CLASSIFICATION	0.007003060428461525	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9984838800793472	WITHOUT_CLASSIFICATION	0.0015161199206527838	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.99963879454008	WITHOUT_CLASSIFICATION	3.612054599200392E-4	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998554893244099	WITHOUT_CLASSIFICATION	1.4451067558998409E-4	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999972597715369	WITHOUT_CLASSIFICATION	2.7402284632479143E-6	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9931429889848614	WITHOUT_CLASSIFICATION	0.006857011015138607	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999872374943987	WITHOUT_CLASSIFICATION	1.2762505601224901E-5	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998637222811207	WITHOUT_CLASSIFICATION	1.3627771887924015E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998637222811207	WITHOUT_CLASSIFICATION	1.3627771887924015E-4	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999963231475828	WITHOUT_CLASSIFICATION	3.6768524172080986E-6	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999993392734026	WITHOUT_CLASSIFICATION	6.607265974961727E-7	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999901653033728	WITHOUT_CLASSIFICATION	9.834696627278067E-6	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999848772717741	WITHOUT_CLASSIFICATION	1.5122728225938615E-5	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9445126010987477	WITHOUT_CLASSIFICATION	0.055487398901252365	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999990251349649	WITHOUT_CLASSIFICATION	9.74865035152883E-7	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999738813210962	WITHOUT_CLASSIFICATION	2.6118678903886244E-5	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9994626751935296	WITHOUT_CLASSIFICATION	5.373248064704358E-4	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999575675593	WITHOUT_CLASSIFICATION	4.2432440722491086E-8	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996126169962373	WITHOUT_CLASSIFICATION	3.8738300376278814E-4	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996126169962373	WITHOUT_CLASSIFICATION	3.8738300376278814E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999908426034498	WITHOUT_CLASSIFICATION	9.157396550123729E-6	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999999854517405	WITHOUT_CLASSIFICATION	1.4548259486343486E-7	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999975133385071	WITHOUT_CLASSIFICATION	2.486661492860833E-6	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9967732433757808	WITHOUT_CLASSIFICATION	0.003226756624219239	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9998842778217802	WITHOUT_CLASSIFICATION	1.157221782196734E-4	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999974332438294	WITHOUT_CLASSIFICATION	2.5667561705571823E-6	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.999983824562663	WITHOUT_CLASSIFICATION	1.6175437336958233E-5	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9997291009923648	WITHOUT_CLASSIFICATION	2.7089900763523615E-4	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999199340264384	WITHOUT_CLASSIFICATION	8.006597356157004E-5	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999649467104323	WITHOUT_CLASSIFICATION	3.505328956766646E-5	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999820669422994	WITHOUT_CLASSIFICATION	1.7933057700581664E-5	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9992631088115091	WITHOUT_CLASSIFICATION	7.368911884908666E-4	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9972570452446268	WITHOUT_CLASSIFICATION	0.002742954755373215	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9997226755522436	WITHOUT_CLASSIFICATION	2.7732444775644825E-4	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9997998287083668	WITHOUT_CLASSIFICATION	2.0017129163316246E-4	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999940311501725	WITHOUT_CLASSIFICATION	5.968849827494155E-6	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9991733258649921	WITHOUT_CLASSIFICATION	8.266741350078414E-4	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9989263703931341	WITHOUT_CLASSIFICATION	0.0010736296068658998	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9973123109756975	WITHOUT_CLASSIFICATION	0.00268768902430256	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9998288593259878	WITHOUT_CLASSIFICATION	1.7114067401231327E-4	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9981647600797077	WITHOUT_CLASSIFICATION	0.0018352399202923593	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999969674815459	WITHOUT_CLASSIFICATION	3.0325184541461094E-6	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999993878914034	WITHOUT_CLASSIFICATION	6.121085966177735E-7	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999822165282569	WITHOUT_CLASSIFICATION	1.7783471743105173E-5	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999997164249997	WITHOUT_CLASSIFICATION	2.835750001668282E-7	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997150536716336	WITHOUT_CLASSIFICATION	2.849463283664005E-4	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999858230006384	WITHOUT_CLASSIFICATION	1.4176999361526082E-5	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9998388659381583	WITHOUT_CLASSIFICATION	1.611340618417273E-4	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999824544000725	WITHOUT_CLASSIFICATION	1.7545599927418543E-5	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.999963860064752	WITHOUT_CLASSIFICATION	3.613993524800379E-5	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999896695780157	WITHOUT_CLASSIFICATION	1.0330421984254024E-5	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999536653830614	WITHOUT_CLASSIFICATION	4.6334616938595385E-5	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.999976525076102	WITHOUT_CLASSIFICATION	2.3474923897925777E-5	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999658254861367	WITHOUT_CLASSIFICATION	3.417451386346893E-5	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9992819415651495	WITHOUT_CLASSIFICATION	7.180584348505733E-4	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999919174101033	WITHOUT_CLASSIFICATION	8.082589896696952E-6	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9756198097261507	WITHOUT_CLASSIFICATION	0.024380190273849335	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999995682987811	WITHOUT_CLASSIFICATION	4.3170121881969555E-7	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999992944307149	WITHOUT_CLASSIFICATION	7.055692850567112E-7	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9990776941351346	WITHOUT_CLASSIFICATION	9.223058648655077E-4	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999926472888464	WITHOUT_CLASSIFICATION	7.352711153635607E-6	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9974666168372255	WITHOUT_CLASSIFICATION	0.002533383162774604	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999966303887348	WITHOUT_CLASSIFICATION	3.3696112651698136E-6	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999082244564	WITHOUT_CLASSIFICATION	9.177554364720869E-8	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9996839483303039	WITHOUT_CLASSIFICATION	3.1605166969606333E-4	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999649235821226	WITHOUT_CLASSIFICATION	3.50764178773876E-5	IMPLEMENTATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.704594167833003	IMPLEMENTATION	0.2954058321669972	WITHOUT_CLASSIFICATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999991675542617	WITHOUT_CLASSIFICATION	8.32445738344386E-7	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9970534224078805	WITHOUT_CLASSIFICATION	0.002946577592119439	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999903933705808	WITHOUT_CLASSIFICATION	9.606629419251881E-6	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9998611649406892	WITHOUT_CLASSIFICATION	1.3883505931081296E-4	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9982133474791605	WITHOUT_CLASSIFICATION	0.0017866525208395751	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999537435325212	WITHOUT_CLASSIFICATION	4.625646747886095E-5	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9959406068178736	WITHOUT_CLASSIFICATION	0.004059393182126391	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998199207031271	WITHOUT_CLASSIFICATION	1.8007929687296697E-4	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9997741388564867	WITHOUT_CLASSIFICATION	2.258611435132327E-4	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999767088157279	WITHOUT_CLASSIFICATION	2.3291184272125344E-5	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9924426509542025	WITHOUT_CLASSIFICATION	0.0075573490457975364	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9998641756720053	WITHOUT_CLASSIFICATION	1.3582432799477513E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998199207031271	WITHOUT_CLASSIFICATION	1.8007929687296697E-4	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9715452833373309	WITHOUT_CLASSIFICATION	0.028454716662669043	IMPLEMENTATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9966341552223988	WITHOUT_CLASSIFICATION	0.003365844777601197	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999969465644357	WITHOUT_CLASSIFICATION	3.053435564307436E-5	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9914082777510038	WITHOUT_CLASSIFICATION	0.008591722248996153	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9994390391177858	WITHOUT_CLASSIFICATION	5.609608822141495E-4	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9995292782973522	WITHOUT_CLASSIFICATION	4.70721702647921E-4	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999949272065821	WITHOUT_CLASSIFICATION	5.072793417913133E-6	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9951245153479318	WITHOUT_CLASSIFICATION	0.0048754846520682096	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999902620599869	WITHOUT_CLASSIFICATION	9.737940013046188E-6	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998578022768667	WITHOUT_CLASSIFICATION	1.421977231333062E-4	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998358039655386	WITHOUT_CLASSIFICATION	1.6419603446145197E-4	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9966433293647609	WITHOUT_CLASSIFICATION	0.0033566706352392475	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999907734290368	WITHOUT_CLASSIFICATION	9.226570963301267E-6	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9872690014388106	WITHOUT_CLASSIFICATION	0.012730998561189338	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9985139379132113	WITHOUT_CLASSIFICATION	0.0014860620867885965	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9997814521883737	WITHOUT_CLASSIFICATION	2.1854781162636088E-4	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9994762199291712	WITHOUT_CLASSIFICATION	5.237800708288289E-4	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999942305711904	WITHOUT_CLASSIFICATION	5.769428809487639E-6	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999988714355408	WITHOUT_CLASSIFICATION	1.1285644591963901E-6	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9986139268340036	WITHOUT_CLASSIFICATION	0.0013860731659963172	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9949675500711768	WITHOUT_CLASSIFICATION	0.005032449928823231	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.988113283099581	WITHOUT_CLASSIFICATION	0.01188671690041891	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999643980240779	WITHOUT_CLASSIFICATION	3.560197592205317E-5	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9992172665822133	WITHOUT_CLASSIFICATION	7.827334177866106E-4	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999894877147	WITHOUT_CLASSIFICATION	1.0512285133456342E-8	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999912767738665	WITHOUT_CLASSIFICATION	8.723226133499351E-6	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999829274328039	WITHOUT_CLASSIFICATION	1.7072567196006913E-5	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998177398809761	WITHOUT_CLASSIFICATION	1.8226011902386678E-4	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999230311324937	WITHOUT_CLASSIFICATION	7.696886750629838E-5	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.6826756459700696	WITHOUT_CLASSIFICATION	0.3173243540299304	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.8142979183323024	WITHOUT_CLASSIFICATION	0.18570208166769772	IMPLEMENTATION
and perform the load	WITHOUT_CLASSIFICATION	0.9998709720489971	WITHOUT_CLASSIFICATION	1.2902795100289092E-4	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999694964114524	WITHOUT_CLASSIFICATION	3.0503588547672033E-5	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9998758955556613	WITHOUT_CLASSIFICATION	1.2410444433877033E-4	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.999979167611485	WITHOUT_CLASSIFICATION	2.0832388515062488E-5	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9998928476814567	WITHOUT_CLASSIFICATION	1.0715231854330699E-4	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999980948615281	WITHOUT_CLASSIFICATION	1.9051384718282162E-6	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999992189819438	WITHOUT_CLASSIFICATION	7.810180561939737E-7	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9994769384547397	WITHOUT_CLASSIFICATION	5.230615452603413E-4	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999417288728026	WITHOUT_CLASSIFICATION	5.8271127197386004E-5	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.998018762760552	WITHOUT_CLASSIFICATION	0.0019812372394479604	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999756195434846	WITHOUT_CLASSIFICATION	2.438045651538331E-5	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999756195434846	WITHOUT_CLASSIFICATION	2.438045651538331E-5	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9998847348160735	WITHOUT_CLASSIFICATION	1.1526518392654007E-4	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999948174751326	WITHOUT_CLASSIFICATION	5.18252486738415E-6	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999674218919432	WITHOUT_CLASSIFICATION	3.257810805684454E-5	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999974361939505	WITHOUT_CLASSIFICATION	2.563806049558206E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999070214951801	WITHOUT_CLASSIFICATION	9.297850481994846E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999070214951801	WITHOUT_CLASSIFICATION	9.297850481994846E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999553487904261	WITHOUT_CLASSIFICATION	4.465120957384896E-5	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999557841647279	WITHOUT_CLASSIFICATION	4.421583527200153E-5	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9998655171428953	WITHOUT_CLASSIFICATION	1.344828571047582E-4	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9995329460644412	WITHOUT_CLASSIFICATION	4.670539355587764E-4	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9997741388564867	WITHOUT_CLASSIFICATION	2.258611435132327E-4	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9986938666173638	WITHOUT_CLASSIFICATION	0.0013061333826361583	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.5413339440589917	WITHOUT_CLASSIFICATION	0.4586660559410082	IMPLEMENTATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999746902617898	WITHOUT_CLASSIFICATION	2.5309738210231436E-5	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999001755809644	WITHOUT_CLASSIFICATION	9.982441903552377E-5	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9998564563950559	WITHOUT_CLASSIFICATION	1.435436049439644E-4	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999103378875221	WITHOUT_CLASSIFICATION	8.966211247787034E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998888484033701	WITHOUT_CLASSIFICATION	1.1115159662986805E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998888484033701	WITHOUT_CLASSIFICATION	1.1115159662986805E-4	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9997814521883737	WITHOUT_CLASSIFICATION	2.1854781162636088E-4	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999305808028416	WITHOUT_CLASSIFICATION	6.941919715840324E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999348583354913	WITHOUT_CLASSIFICATION	6.514166450859727E-5	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9998781411024585	WITHOUT_CLASSIFICATION	1.2185889754153235E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999648281864909	WITHOUT_CLASSIFICATION	3.5171813509032625E-5	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999863349757296	WITHOUT_CLASSIFICATION	1.366502427034571E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999981236500817	WITHOUT_CLASSIFICATION	1.8763499182956005E-6	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999714337597098	WITHOUT_CLASSIFICATION	2.856624029022089E-5	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999515796903016	WITHOUT_CLASSIFICATION	4.842030969840443E-5	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999685875168836	WITHOUT_CLASSIFICATION	3.141248311649026E-5	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998578022768667	WITHOUT_CLASSIFICATION	1.421977231333062E-4	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999801446977362	WITHOUT_CLASSIFICATION	1.9855302263805936E-5	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999218768670984	WITHOUT_CLASSIFICATION	7.812313290150408E-5	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999976919704284	WITHOUT_CLASSIFICATION	2.30802957156141E-6	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.9999628117608141	WITHOUT_CLASSIFICATION	3.7188239185786415E-5	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997905536139254	WITHOUT_CLASSIFICATION	2.0944638607458415E-4	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9998617958331334	WITHOUT_CLASSIFICATION	1.382041668666258E-4	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9998284863602901	WITHOUT_CLASSIFICATION	1.7151363970988045E-4	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9997513893959731	WITHOUT_CLASSIFICATION	2.486106040269362E-4	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9997891241921877	WITHOUT_CLASSIFICATION	2.1087580781233256E-4	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9937153596005585	WITHOUT_CLASSIFICATION	0.006284640399441647	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9937153596005585	WITHOUT_CLASSIFICATION	0.006284640399441647	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999797574039837	WITHOUT_CLASSIFICATION	2.0242596016241007E-5	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9998401719957111	WITHOUT_CLASSIFICATION	1.5982800428900778E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999077378786421	WITHOUT_CLASSIFICATION	9.22621213579088E-5	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9997271649229227	WITHOUT_CLASSIFICATION	2.7283507707733277E-4	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9997904328299594	WITHOUT_CLASSIFICATION	2.0956717004063532E-4	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9998387720410384	WITHOUT_CLASSIFICATION	1.612279589614811E-4	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999983943671741	WITHOUT_CLASSIFICATION	1.605632825891524E-5	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999652948569	WITHOUT_CLASSIFICATION	3.470514307459826E-8	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9998055889302109	WITHOUT_CLASSIFICATION	1.9441106978921953E-4	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997195280520134	WITHOUT_CLASSIFICATION	2.804719479867226E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998663281387954	WITHOUT_CLASSIFICATION	1.3367186120471887E-4	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9942819487514317	WITHOUT_CLASSIFICATION	0.00571805124856833	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9998856316472257	WITHOUT_CLASSIFICATION	1.1436835277445868E-4	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999518045949954	WITHOUT_CLASSIFICATION	4.819540500456778E-5	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999850423557033	WITHOUT_CLASSIFICATION	1.4957644296768055E-5	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998397789388846	WITHOUT_CLASSIFICATION	1.6022106111536263E-4	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999984250192888	WITHOUT_CLASSIFICATION	1.5749807111990919E-6	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998393766616874	WITHOUT_CLASSIFICATION	1.6062333831249822E-4	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9966461583037556	WITHOUT_CLASSIFICATION	0.0033538416962444087	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999721001841704	WITHOUT_CLASSIFICATION	2.7899815829513512E-5	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999883286941152	WITHOUT_CLASSIFICATION	1.167130588478506E-5	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999650868516	WITHOUT_CLASSIFICATION	3.4913148345512724E-8	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999757509774272	WITHOUT_CLASSIFICATION	2.4249022572821634E-5	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999981415739096	WITHOUT_CLASSIFICATION	1.8584260904152057E-6	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998763474659715	WITHOUT_CLASSIFICATION	1.2365253402844066E-4	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998763474659715	WITHOUT_CLASSIFICATION	1.2365253402844066E-4	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999529752351154	WITHOUT_CLASSIFICATION	4.7024764884600484E-4	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9993070030665203	WITHOUT_CLASSIFICATION	6.929969334797621E-4	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999320606751287	WITHOUT_CLASSIFICATION	6.793932487134857E-5	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9997550035677341	WITHOUT_CLASSIFICATION	2.449964322659458E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999313274274658	WITHOUT_CLASSIFICATION	6.867257253416746E-5	IMPLEMENTATION
