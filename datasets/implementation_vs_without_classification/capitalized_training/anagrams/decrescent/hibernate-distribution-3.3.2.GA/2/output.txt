todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9754993880638334	WITHOUT_CLASSIFICATION	0.024500611936166518	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9754993880638334	WITHOUT_CLASSIFICATION	0.024500611936166518	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.9784882885087707	WITHOUT_CLASSIFICATION	0.02151171149122931	IMPLEMENTATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9093404213467133	WITHOUT_CLASSIFICATION	0.09065957865328671	IMPLEMENTATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9914280811653993	WITHOUT_CLASSIFICATION	0.008571918834600711	IMPLEMENTATION
TODO: handle TypeDefs	IMPLEMENTATION	0.8650047632505795	IMPLEMENTATION	0.13499523674942054	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9423256954664955	WITHOUT_CLASSIFICATION	0.05767430453350449	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9950632785499203	WITHOUT_CLASSIFICATION	0.004936721450079749	IMPLEMENTATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9997927712812661	WITHOUT_CLASSIFICATION	2.0722871873387616E-4	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.6836069332862035	IMPLEMENTATION	0.31639306671379647	WITHOUT_CLASSIFICATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.952516762461296	WITHOUT_CLASSIFICATION	0.04748323753870397	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.7276439950713095	IMPLEMENTATION	0.27235600492869055	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.934424234721975	WITHOUT_CLASSIFICATION	0.06557576527802508	IMPLEMENTATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.934424234721975	WITHOUT_CLASSIFICATION	0.06557576527802508	IMPLEMENTATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.9169700984888322	IMPLEMENTATION	0.0830299015111678	WITHOUT_CLASSIFICATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.9814769031758395	IMPLEMENTATION	0.018523096824160493	WITHOUT_CLASSIFICATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9993779007078841	IMPLEMENTATION	6.220992921158634E-4	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9993201550407912	WITHOUT_CLASSIFICATION	6.798449592088523E-4	IMPLEMENTATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.9999988897881059	WITHOUT_CLASSIFICATION	1.1102118941327395E-6	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9966308103062533	WITHOUT_CLASSIFICATION	0.003369189693746666	IMPLEMENTATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.5887835127029852	WITHOUT_CLASSIFICATION	0.4112164872970147	IMPLEMENTATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9999621096726385	WITHOUT_CLASSIFICATION	3.7890327361581675E-5	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.92751296201911	WITHOUT_CLASSIFICATION	0.07248703798088994	IMPLEMENTATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9990980699406339	IMPLEMENTATION	9.019300593660806E-4	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9990980699406339	IMPLEMENTATION	9.019300593660806E-4	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.9989321049799387	IMPLEMENTATION	0.0010678950200612464	WITHOUT_CLASSIFICATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9228715161096589	WITHOUT_CLASSIFICATION	0.0771284838903411	IMPLEMENTATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9472302129968101	IMPLEMENTATION	0.052769787003189815	WITHOUT_CLASSIFICATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.8960417134511394	WITHOUT_CLASSIFICATION	0.10395828654886059	IMPLEMENTATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.8884785951041707	IMPLEMENTATION	0.11152140489582923	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.969046244854494	WITHOUT_CLASSIFICATION	0.030953755145506082	IMPLEMENTATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.5809490971499295	IMPLEMENTATION	0.41905090285007046	WITHOUT_CLASSIFICATION
todo : look at optimizing these...	IMPLEMENTATION	0.9996387721602764	WITHOUT_CLASSIFICATION	3.6122783972366163E-4	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.7794898986192011	IMPLEMENTATION	0.22051010138079882	WITHOUT_CLASSIFICATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.8543419520122255	IMPLEMENTATION	0.14565804798777457	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.754881264778284	WITHOUT_CLASSIFICATION	0.24511873522171596	IMPLEMENTATION
TODO: not visible to the user!	IMPLEMENTATION	0.589645670037115	WITHOUT_CLASSIFICATION	0.410354329962885	IMPLEMENTATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.858815862930174	WITHOUT_CLASSIFICATION	0.14118413706982602	IMPLEMENTATION
TODO: use these in methods above	IMPLEMENTATION	0.9177629367355045	WITHOUT_CLASSIFICATION	0.08223706326449547	IMPLEMENTATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.96973968128003	IMPLEMENTATION	0.030260318719970012	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.96973968128003	IMPLEMENTATION	0.030260318719970012	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.6837518477222204	WITHOUT_CLASSIFICATION	0.3162481522777797	IMPLEMENTATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9995602433869826	WITHOUT_CLASSIFICATION	4.397566130173302E-4	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9931361198070234	WITHOUT_CLASSIFICATION	0.006863880192976558	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.8130587257043718	IMPLEMENTATION	0.18694127429562818	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.7019125519523022	WITHOUT_CLASSIFICATION	0.29808744804769777	IMPLEMENTATION
TODO: formulas ?	IMPLEMENTATION	0.9611393082465159	WITHOUT_CLASSIFICATION	0.0388606917534841	IMPLEMENTATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.6488318418411589	WITHOUT_CLASSIFICATION	0.3511681581588409	IMPLEMENTATION
todo : cache this sql...	IMPLEMENTATION	0.9998746622629594	WITHOUT_CLASSIFICATION	1.25337737040645E-4	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.7699912583462142	IMPLEMENTATION	0.23000874165378582	WITHOUT_CLASSIFICATION
TODO: cache this in an instvar	IMPLEMENTATION	0.9882508660422255	WITHOUT_CLASSIFICATION	0.011749133957774466	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.8996300582891054	IMPLEMENTATION	0.10036994171089458	WITHOUT_CLASSIFICATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9890261788138077	IMPLEMENTATION	0.010973821186192376	WITHOUT_CLASSIFICATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.8781372836876464	IMPLEMENTATION	0.12186271631235361	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.95645638291448	IMPLEMENTATION	0.04354361708552001	WITHOUT_CLASSIFICATION
TODO: terrible implementation!	IMPLEMENTATION	0.998607646022732	IMPLEMENTATION	0.001392353977268011	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.95645638291448	IMPLEMENTATION	0.04354361708552001	WITHOUT_CLASSIFICATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9999590561208227	IMPLEMENTATION	4.094387917726698E-5	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.5377426457715548	IMPLEMENTATION	0.46225735422844516	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.95645638291448	IMPLEMENTATION	0.04354361708552001	WITHOUT_CLASSIFICATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999991882740558	WITHOUT_CLASSIFICATION	8.117259441348911E-7	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999991882740558	WITHOUT_CLASSIFICATION	8.117259441348911E-7	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9624932767814677	IMPLEMENTATION	0.0375067232185324	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.9998216624045837	WITHOUT_CLASSIFICATION	1.7833759541636935E-4	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999195903366488	WITHOUT_CLASSIFICATION	8.040966335125641E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999717963955431	WITHOUT_CLASSIFICATION	2.8203604456883358E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999717963955431	WITHOUT_CLASSIFICATION	2.8203604456883358E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999717963955431	WITHOUT_CLASSIFICATION	2.8203604456883358E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999717963955431	WITHOUT_CLASSIFICATION	2.8203604456883358E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999717963955431	WITHOUT_CLASSIFICATION	2.8203604456883358E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999717963955431	WITHOUT_CLASSIFICATION	2.8203604456883358E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999717963955431	WITHOUT_CLASSIFICATION	2.8203604456883358E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999708362936881	WITHOUT_CLASSIFICATION	2.9163706311837073E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999708362936881	WITHOUT_CLASSIFICATION	2.9163706311837073E-5	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999895876375928	WITHOUT_CLASSIFICATION	1.0412362407181292E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999191064617	WITHOUT_CLASSIFICATION	8.089353827969106E-8	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999966520805643	WITHOUT_CLASSIFICATION	3.347919435717917E-6	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999928803168576	WITHOUT_CLASSIFICATION	7.1196831424005795E-6	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999928803168576	WITHOUT_CLASSIFICATION	7.1196831424005795E-6	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999894742346	WITHOUT_CLASSIFICATION	1.0525765330414805E-8	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999431651188	WITHOUT_CLASSIFICATION	5.6834881160566E-8	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999998828823157	WITHOUT_CLASSIFICATION	1.1711768429310192E-7	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999854262645406	WITHOUT_CLASSIFICATION	1.4573735459570548E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999982216296954	WITHOUT_CLASSIFICATION	1.7783703045141577E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999982216296954	WITHOUT_CLASSIFICATION	1.7783703045141577E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999803364276197	WITHOUT_CLASSIFICATION	1.966357238029399E-5	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9992822690642496	WITHOUT_CLASSIFICATION	7.17730935750417E-4	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.9999824719909395	WITHOUT_CLASSIFICATION	1.752800906046635E-5	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.999999999621602	WITHOUT_CLASSIFICATION	3.7839797521558693E-10	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999729047412	WITHOUT_CLASSIFICATION	2.7095258809576656E-8	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.999929296800089	WITHOUT_CLASSIFICATION	7.070319991092224E-5	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.9996951730719248	WITHOUT_CLASSIFICATION	3.048269280752387E-4	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999256427066071	WITHOUT_CLASSIFICATION	7.435729339290759E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998658150031663	WITHOUT_CLASSIFICATION	1.3418499683360386E-4	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9998781859589735	WITHOUT_CLASSIFICATION	1.2181404102659451E-4	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999255862210179	WITHOUT_CLASSIFICATION	7.441377898207357E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9998669652942447	WITHOUT_CLASSIFICATION	1.3303470575532888E-4	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999998857153	WITHOUT_CLASSIFICATION	1.1428470447940122E-9	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.99992213083606	WITHOUT_CLASSIFICATION	7.786916394005185E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.99992213083606	WITHOUT_CLASSIFICATION	7.786916394005185E-5	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999827945626287	WITHOUT_CLASSIFICATION	1.7205437371193823E-5	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999318747957922	WITHOUT_CLASSIFICATION	6.812520420785206E-5	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999306477813	WITHOUT_CLASSIFICATION	6.935221873704394E-8	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9997270701300653	WITHOUT_CLASSIFICATION	2.7292986993463804E-4	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9911671327764908	WITHOUT_CLASSIFICATION	0.008832867223509101	IMPLEMENTATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999998348250398	WITHOUT_CLASSIFICATION	1.6517496010021467E-7	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999893149290099	WITHOUT_CLASSIFICATION	1.0685070990101118E-5	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999933111919816	WITHOUT_CLASSIFICATION	6.688808018233614E-6	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999999898259018	WITHOUT_CLASSIFICATION	1.0174098273729621E-8	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999785385526753	WITHOUT_CLASSIFICATION	2.146144732463193E-5	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999983062598076	WITHOUT_CLASSIFICATION	1.6937401924098901E-6	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999998419799847	WITHOUT_CLASSIFICATION	1.580200153404842E-7	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999547727267	WITHOUT_CLASSIFICATION	4.522727330275062E-8	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997664932963535	WITHOUT_CLASSIFICATION	2.335067036464923E-4	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999877940280286	WITHOUT_CLASSIFICATION	1.2205971971455039E-5	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998147494064478	WITHOUT_CLASSIFICATION	1.8525059355222436E-4	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994099796478133	WITHOUT_CLASSIFICATION	5.900203521866015E-4	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999993629370412	WITHOUT_CLASSIFICATION	6.370629587786476E-7	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999993255940741	WITHOUT_CLASSIFICATION	6.744059258787754E-7	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999549060363846	WITHOUT_CLASSIFICATION	4.5093963615334977E-5	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999997993827194	WITHOUT_CLASSIFICATION	2.0061728053212355E-7	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999800035956188	WITHOUT_CLASSIFICATION	1.9996404381255545E-5	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999549060363846	WITHOUT_CLASSIFICATION	4.5093963615334977E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999800035956188	WITHOUT_CLASSIFICATION	1.9996404381255545E-5	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999721365551	WITHOUT_CLASSIFICATION	2.786344483193492E-8	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9995992719579443	WITHOUT_CLASSIFICATION	4.007280420557346E-4	IMPLEMENTATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.999938905967766	WITHOUT_CLASSIFICATION	6.109403223396723E-5	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999976222290965	WITHOUT_CLASSIFICATION	2.377770903512253E-5	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.99999998801657	WITHOUT_CLASSIFICATION	1.1983430052719897E-8	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.999999995629775	WITHOUT_CLASSIFICATION	4.370225004379051E-9	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.999812417180539	WITHOUT_CLASSIFICATION	1.8758281946085385E-4	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9992049202835591	WITHOUT_CLASSIFICATION	7.950797164409435E-4	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9968446576867221	WITHOUT_CLASSIFICATION	0.0031553423132778405	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9997746916960362	WITHOUT_CLASSIFICATION	2.253083039638188E-4	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999872999690431	WITHOUT_CLASSIFICATION	1.270003095693246E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999800035956188	WITHOUT_CLASSIFICATION	1.9996404381255545E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999793938715	WITHOUT_CLASSIFICATION	2.060612856331438E-8	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9945435011481526	WITHOUT_CLASSIFICATION	0.005456498851847372	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999803467052732	WITHOUT_CLASSIFICATION	1.9653294726775577E-5	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999999028388	WITHOUT_CLASSIFICATION	9.716118444890605E-11	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.999999435304123	WITHOUT_CLASSIFICATION	5.64695877016269E-7	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999872975286656	WITHOUT_CLASSIFICATION	1.2702471334398556E-5	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999201329011262	WITHOUT_CLASSIFICATION	7.986709887376626E-5	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999984220954095	WITHOUT_CLASSIFICATION	1.577904590504001E-6	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.99999891901587	WITHOUT_CLASSIFICATION	1.0809841300289951E-6	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999652487738	WITHOUT_CLASSIFICATION	3.475122628043547E-8	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999964828414714	WITHOUT_CLASSIFICATION	3.517158528758949E-6	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999969905913012	WITHOUT_CLASSIFICATION	3.009408698816255E-6	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9110938099076467	WITHOUT_CLASSIFICATION	0.08890619009235334	IMPLEMENTATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999954393099029	WITHOUT_CLASSIFICATION	4.5606900971504875E-6	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999999987863206	WITHOUT_CLASSIFICATION	1.2136793996084794E-8	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9901202848864821	WITHOUT_CLASSIFICATION	0.009879715113517947	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999361938833	WITHOUT_CLASSIFICATION	6.380611672382844E-8	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999995279619687	WITHOUT_CLASSIFICATION	4.720380312300451E-7	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999998842881433	WITHOUT_CLASSIFICATION	1.1571185672210021E-7	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999819230799242	WITHOUT_CLASSIFICATION	1.8076920075844287E-5	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999999958341411	WITHOUT_CLASSIFICATION	4.165858872148157E-9	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999878512626956	WITHOUT_CLASSIFICATION	1.2148737304413992E-5	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999996515521965	WITHOUT_CLASSIFICATION	3.484478035002138E-7	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999986089724	WITHOUT_CLASSIFICATION	1.3910276809612007E-9	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999878512626956	WITHOUT_CLASSIFICATION	1.2148737304413992E-5	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999488763293	WITHOUT_CLASSIFICATION	5.1123670716983025E-8	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999997775997861	WITHOUT_CLASSIFICATION	2.2240021387584415E-7	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999549060363846	WITHOUT_CLASSIFICATION	4.5093963615334977E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999784338408829	WITHOUT_CLASSIFICATION	2.1566159117141555E-5	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.9999860464720937	WITHOUT_CLASSIFICATION	1.3953527906420614E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999926001084887	WITHOUT_CLASSIFICATION	7.399891511338195E-6	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999926001084887	WITHOUT_CLASSIFICATION	7.399891511338195E-6	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999814197362838	WITHOUT_CLASSIFICATION	1.8580263716109664E-5	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999282398634	WITHOUT_CLASSIFICATION	7.176013655814355E-8	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999999114650652	WITHOUT_CLASSIFICATION	8.853493479635027E-8	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999971631105	WITHOUT_CLASSIFICATION	2.836889493613435E-9	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999977788729101	WITHOUT_CLASSIFICATION	2.2211270898374264E-6	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998713194474235	WITHOUT_CLASSIFICATION	1.2868055257658843E-4	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999732473253403	WITHOUT_CLASSIFICATION	2.675267465972403E-5	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.998182343409006	WITHOUT_CLASSIFICATION	0.0018176565909940477	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999997665212056	WITHOUT_CLASSIFICATION	2.3347879435959952E-7	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999997927746305	WITHOUT_CLASSIFICATION	2.0722536957569687E-7	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999978222424426	WITHOUT_CLASSIFICATION	2.1777575574394735E-6	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999978222424426	WITHOUT_CLASSIFICATION	2.1777575574394735E-6	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999254971829187	WITHOUT_CLASSIFICATION	7.450281708126684E-5	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999966936984375	WITHOUT_CLASSIFICATION	3.3063015626068707E-6	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999989507285801	WITHOUT_CLASSIFICATION	1.0492714197674934E-6	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999978222424426	WITHOUT_CLASSIFICATION	2.1777575574394735E-6	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999254971829187	WITHOUT_CLASSIFICATION	7.450281708126684E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999254971829187	WITHOUT_CLASSIFICATION	7.450281708126684E-5	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999564159898	WITHOUT_CLASSIFICATION	4.358401006002256E-8	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9994920181511233	WITHOUT_CLASSIFICATION	5.07981848876769E-4	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998073363178	WITHOUT_CLASSIFICATION	1.9266368217957487E-7	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9998830340821445	WITHOUT_CLASSIFICATION	1.1696591785547315E-4	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9996578389253578	WITHOUT_CLASSIFICATION	3.4216107464221017E-4	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9996578389253578	WITHOUT_CLASSIFICATION	3.4216107464221017E-4	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999994040798964	WITHOUT_CLASSIFICATION	5.959201036628726E-7	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999988295843754	WITHOUT_CLASSIFICATION	1.1704156246638214E-6	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.9999932377662817	WITHOUT_CLASSIFICATION	6.762233718235323E-6	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999998944517402	WITHOUT_CLASSIFICATION	1.0554825978128339E-7	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999998944517402	WITHOUT_CLASSIFICATION	1.0554825978128339E-7	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999965580244067	WITHOUT_CLASSIFICATION	3.4419755933810493E-6	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999156602582555	WITHOUT_CLASSIFICATION	8.433974174444128E-5	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999820669901326	WITHOUT_CLASSIFICATION	1.793300986743807E-5	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999978605509	WITHOUT_CLASSIFICATION	2.1394490911997034E-9	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999999609362115	WITHOUT_CLASSIFICATION	3.9063788668242474E-8	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999927146083705	WITHOUT_CLASSIFICATION	7.285391629464957E-6	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999996705980959	WITHOUT_CLASSIFICATION	3.2940190403499384E-7	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998841346355456	WITHOUT_CLASSIFICATION	1.1586536445438017E-4	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.9999942717853161	WITHOUT_CLASSIFICATION	5.728214683986213E-6	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999820669901326	WITHOUT_CLASSIFICATION	1.793300986743807E-5	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.999975985156191	WITHOUT_CLASSIFICATION	2.401484380889522E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9998185208660842	WITHOUT_CLASSIFICATION	1.814791339156781E-4	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9998185208660842	WITHOUT_CLASSIFICATION	1.814791339156781E-4	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.999998208117353	WITHOUT_CLASSIFICATION	1.7918826470536657E-6	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998929230695556	WITHOUT_CLASSIFICATION	1.0707693044447978E-4	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999998729293901	WITHOUT_CLASSIFICATION	1.2707061002251292E-7	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999719292678518	WITHOUT_CLASSIFICATION	2.807073214820039E-4	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999985895423449	WITHOUT_CLASSIFICATION	1.4104576550196286E-6	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.9998613733294546	WITHOUT_CLASSIFICATION	1.3862667054543115E-4	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9998349986220102	WITHOUT_CLASSIFICATION	1.650013779897066E-4	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.9999988800143778	WITHOUT_CLASSIFICATION	1.119985622265362E-6	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999669585500555	WITHOUT_CLASSIFICATION	3.3041449944435806E-5	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999038794861	WITHOUT_CLASSIFICATION	9.612051390905886E-8	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999038794861	WITHOUT_CLASSIFICATION	9.612051390905886E-8	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999980327305457	WITHOUT_CLASSIFICATION	1.967269454351591E-6	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999195903366488	WITHOUT_CLASSIFICATION	8.040966335125641E-5	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999995382368465	WITHOUT_CLASSIFICATION	4.617631535153406E-7	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999717963955431	WITHOUT_CLASSIFICATION	2.8203604456883358E-5	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.9999989189882214	WITHOUT_CLASSIFICATION	1.0810117787010738E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999708362936881	WITHOUT_CLASSIFICATION	2.9163706311837073E-5	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999764445727526	WITHOUT_CLASSIFICATION	2.3555427247436473E-5	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999986947850776	WITHOUT_CLASSIFICATION	1.3052149223151504E-6	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999992751058325	WITHOUT_CLASSIFICATION	7.248941674184823E-7	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.9999945418136128	WITHOUT_CLASSIFICATION	5.458186387162249E-6	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999708494834542	WITHOUT_CLASSIFICATION	2.915051654593418E-5	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.9999016651404962	WITHOUT_CLASSIFICATION	9.833485950380458E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9998846569502796	WITHOUT_CLASSIFICATION	1.1534304972037209E-4	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999969294464397	WITHOUT_CLASSIFICATION	3.0705535602982835E-6	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999191064617	WITHOUT_CLASSIFICATION	8.089353827969106E-8	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999979470418725	WITHOUT_CLASSIFICATION	2.052958127399368E-6	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999979470418725	WITHOUT_CLASSIFICATION	2.052958127399368E-6	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.9999996037739506	WITHOUT_CLASSIFICATION	3.962260493582554E-7	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999957754286641	WITHOUT_CLASSIFICATION	4.224571335973689E-6	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999974198191908	WITHOUT_CLASSIFICATION	2.5801808092445728E-6	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999909732197572	WITHOUT_CLASSIFICATION	9.026780242809424E-6	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999789577869915	WITHOUT_CLASSIFICATION	2.1042213008538806E-5	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999896582457474	WITHOUT_CLASSIFICATION	1.0341754252713204E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999928803168576	WITHOUT_CLASSIFICATION	7.1196831424005795E-6	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999835002083807	WITHOUT_CLASSIFICATION	1.649979161933684E-5	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999967683125284	WITHOUT_CLASSIFICATION	3.2316874715839325E-6	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999944451847432	WITHOUT_CLASSIFICATION	5.554815256766605E-6	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999973208856584	WITHOUT_CLASSIFICATION	2.679114341554359E-6	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.9999826904535367	WITHOUT_CLASSIFICATION	1.7309546463300263E-5	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.9999482114471995	WITHOUT_CLASSIFICATION	5.178855280059439E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999990966321856	WITHOUT_CLASSIFICATION	9.033678144551346E-7	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998903000646	WITHOUT_CLASSIFICATION	1.0969993527032646E-7	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999993748824048	WITHOUT_CLASSIFICATION	6.251175952084694E-7	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999953539371715	WITHOUT_CLASSIFICATION	4.646062828423355E-6	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999668889185194	WITHOUT_CLASSIFICATION	3.311108148065319E-5	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.9999999347957067	WITHOUT_CLASSIFICATION	6.52042932908619E-8	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999717963955431	WITHOUT_CLASSIFICATION	2.8203604456883358E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999717963955431	WITHOUT_CLASSIFICATION	2.8203604456883358E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999708362936881	WITHOUT_CLASSIFICATION	2.9163706311837073E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999708362936881	WITHOUT_CLASSIFICATION	2.9163706311837073E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9998846569502796	WITHOUT_CLASSIFICATION	1.1534304972037209E-4	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999979470418725	WITHOUT_CLASSIFICATION	2.052958127399368E-6	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999990966321856	WITHOUT_CLASSIFICATION	9.033678144551346E-7	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999894742346	WITHOUT_CLASSIFICATION	1.0525765330414805E-8	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999998119766801	WITHOUT_CLASSIFICATION	1.8802331992045854E-7	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999975424750472	WITHOUT_CLASSIFICATION	2.4575249528377487E-6	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999970912483379	WITHOUT_CLASSIFICATION	2.9087516620517823E-6	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9999813712643527	WITHOUT_CLASSIFICATION	1.862873564730218E-5	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999998390593716	WITHOUT_CLASSIFICATION	1.6094062839298338E-6	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.9999432524924026	WITHOUT_CLASSIFICATION	5.67475075973969E-5	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999988891471071	WITHOUT_CLASSIFICATION	1.110852892916764E-6	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9999396705882172	WITHOUT_CLASSIFICATION	6.03294117827493E-5	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.9999998480539773	WITHOUT_CLASSIFICATION	1.519460226774958E-7	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999816386889767	WITHOUT_CLASSIFICATION	1.836131102331334E-5	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999816386889767	WITHOUT_CLASSIFICATION	1.836131102331334E-5	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999999480100011	WITHOUT_CLASSIFICATION	5.198999889923246E-7	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999998674114327	WITHOUT_CLASSIFICATION	1.3258856738295939E-7	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999929190317113	WITHOUT_CLASSIFICATION	7.08096828882798E-6	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9997964836915074	WITHOUT_CLASSIFICATION	2.0351630849249419E-4	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999964013689322	WITHOUT_CLASSIFICATION	3.5986310678688935E-6	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.9999999827692474	WITHOUT_CLASSIFICATION	1.723075255291848E-8	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.9999983043527564	WITHOUT_CLASSIFICATION	1.6956472436731513E-6	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999431651188	WITHOUT_CLASSIFICATION	5.6834881160566E-8	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.999966663722119	WITHOUT_CLASSIFICATION	3.3336277881088454E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.999991606360617	WITHOUT_CLASSIFICATION	8.393639382967967E-6	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.999991606360617	WITHOUT_CLASSIFICATION	8.393639382967967E-6	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.9999920554053852	WITHOUT_CLASSIFICATION	7.944594614789681E-6	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999998109943922	WITHOUT_CLASSIFICATION	1.8900560780416077E-7	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.9999757996022903	WITHOUT_CLASSIFICATION	2.4200397709656636E-5	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999990581247542	WITHOUT_CLASSIFICATION	9.418752457847229E-7	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.9999788568750612	WITHOUT_CLASSIFICATION	2.114312493883304E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999708362936881	WITHOUT_CLASSIFICATION	2.9163706311837073E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9998846569502796	WITHOUT_CLASSIFICATION	1.1534304972037209E-4	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999191064617	WITHOUT_CLASSIFICATION	8.089353827969106E-8	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999990966321856	WITHOUT_CLASSIFICATION	9.033678144551346E-7	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999990966321856	WITHOUT_CLASSIFICATION	9.033678144551346E-7	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999244187454	WITHOUT_CLASSIFICATION	7.558125452376852E-8	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999244187454	WITHOUT_CLASSIFICATION	7.558125452376852E-8	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999947345969445	WITHOUT_CLASSIFICATION	5.265403055545299E-6	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999643000864887	WITHOUT_CLASSIFICATION	3.5699913511352885E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999643000864887	WITHOUT_CLASSIFICATION	3.5699913511352885E-5	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9999804918469015	WITHOUT_CLASSIFICATION	1.9508153098465106E-5	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.9999866196405982	WITHOUT_CLASSIFICATION	1.3380359401878259E-5	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.9999991163579469	WITHOUT_CLASSIFICATION	8.83642052955285E-7	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999999318920783	WITHOUT_CLASSIFICATION	6.810792170958329E-8	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999999646922827	WITHOUT_CLASSIFICATION	3.530771726181416E-8	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999854262645406	WITHOUT_CLASSIFICATION	1.4573735459570548E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999854262645406	WITHOUT_CLASSIFICATION	1.4573735459570548E-5	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.9976874190674442	WITHOUT_CLASSIFICATION	0.00231258093255581	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.999998681662349	WITHOUT_CLASSIFICATION	1.318337651023063E-6	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.9999857243813798	WITHOUT_CLASSIFICATION	1.4275618620249984E-5	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.9999152323407423	WITHOUT_CLASSIFICATION	8.476765925770973E-5	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9999967731733461	WITHOUT_CLASSIFICATION	3.226826653870473E-6	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.9999190624124693	WITHOUT_CLASSIFICATION	8.093758753064892E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999982216296954	WITHOUT_CLASSIFICATION	1.7783703045141577E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999963287678637	WITHOUT_CLASSIFICATION	3.6712321361977307E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999963287678637	WITHOUT_CLASSIFICATION	3.6712321361977307E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999803364276197	WITHOUT_CLASSIFICATION	1.966357238029399E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999803364276197	WITHOUT_CLASSIFICATION	1.966357238029399E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.999959043254788	WITHOUT_CLASSIFICATION	4.095674521202975E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.999959043254788	WITHOUT_CLASSIFICATION	4.095674521202975E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999993622543717	WITHOUT_CLASSIFICATION	6.377456282289928E-7	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999993622543717	WITHOUT_CLASSIFICATION	6.377456282289928E-7	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999854262645406	WITHOUT_CLASSIFICATION	1.4573735459570548E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999982216296954	WITHOUT_CLASSIFICATION	1.7783703045141577E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999963287678637	WITHOUT_CLASSIFICATION	3.6712321361977307E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999963287678637	WITHOUT_CLASSIFICATION	3.6712321361977307E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999803364276197	WITHOUT_CLASSIFICATION	1.966357238029399E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.999959043254788	WITHOUT_CLASSIFICATION	4.095674521202975E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.999959043254788	WITHOUT_CLASSIFICATION	4.095674521202975E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999993622543717	WITHOUT_CLASSIFICATION	6.377456282289928E-7	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999941259272832	WITHOUT_CLASSIFICATION	5.874072716869094E-6	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999995021833932	WITHOUT_CLASSIFICATION	4.978166067716575E-7	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.9999780800591036	WITHOUT_CLASSIFICATION	2.191994089646779E-5	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999493989839658	WITHOUT_CLASSIFICATION	5.0601016034079716E-5	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.9999762802579045	WITHOUT_CLASSIFICATION	2.3719742095367905E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9998895307800711	WITHOUT_CLASSIFICATION	1.104692199288926E-4	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999981003634499	WITHOUT_CLASSIFICATION	1.8996365499910359E-6	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999998028295146	WITHOUT_CLASSIFICATION	1.9717048544069104E-7	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999998919347491	WITHOUT_CLASSIFICATION	1.080652508874746E-7	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999040567873	WITHOUT_CLASSIFICATION	9.5943212622259E-8	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999946541389962	WITHOUT_CLASSIFICATION	5.345861003703783E-6	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999998428727827	WITHOUT_CLASSIFICATION	1.5712721735392244E-7	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999814197362838	WITHOUT_CLASSIFICATION	1.8580263716109664E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9998895307800711	WITHOUT_CLASSIFICATION	1.104692199288926E-4	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9998895307800711	WITHOUT_CLASSIFICATION	1.104692199288926E-4	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9998895307800711	WITHOUT_CLASSIFICATION	1.104692199288926E-4	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999996855738453	WITHOUT_CLASSIFICATION	3.144261546423291E-7	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999982648022	WITHOUT_CLASSIFICATION	1.7351977730510197E-9	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999982648022	WITHOUT_CLASSIFICATION	1.7351977730510197E-9	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999992698243525	WITHOUT_CLASSIFICATION	7.301756474491697E-7	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999999510384	WITHOUT_CLASSIFICATION	4.89616433413432E-11	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999996941190492	WITHOUT_CLASSIFICATION	3.058809507658354E-7	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999939327787274	WITHOUT_CLASSIFICATION	6.067221272674863E-6	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999939327787274	WITHOUT_CLASSIFICATION	6.067221272674863E-6	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999729047412	WITHOUT_CLASSIFICATION	2.7095258809576656E-8	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997985371203499	WITHOUT_CLASSIFICATION	2.0146287965002924E-4	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997985371203499	WITHOUT_CLASSIFICATION	2.0146287965002924E-4	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999997737766713	WITHOUT_CLASSIFICATION	2.2622332886203557E-7	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999995440613612	WITHOUT_CLASSIFICATION	4.5593863886782033E-7	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999963758326	WITHOUT_CLASSIFICATION	3.624167467726136E-9	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999693157672802	WITHOUT_CLASSIFICATION	3.0684232719819604E-5	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.9999371590514663	WITHOUT_CLASSIFICATION	6.284094853379086E-5	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.9998957624109395	WITHOUT_CLASSIFICATION	1.0423758906054538E-4	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.999929296800089	WITHOUT_CLASSIFICATION	7.070319991092224E-5	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998871818700514	WITHOUT_CLASSIFICATION	1.1281812994848177E-4	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.9784925121270039	WITHOUT_CLASSIFICATION	0.02150748787299612	IMPLEMENTATION
ID	WITHOUT_CLASSIFICATION	0.9996143218892861	WITHOUT_CLASSIFICATION	3.856781107138296E-4	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999191926093011	WITHOUT_CLASSIFICATION	8.080739069892603E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998658150031663	WITHOUT_CLASSIFICATION	1.3418499683360386E-4	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998252841408	WITHOUT_CLASSIFICATION	1.747158591075946E-7	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999792794946971	WITHOUT_CLASSIFICATION	2.0720505302783365E-5	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.999999861259267	WITHOUT_CLASSIFICATION	1.3874073310677938E-7	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998658150031663	WITHOUT_CLASSIFICATION	1.3418499683360386E-4	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999981158417702	WITHOUT_CLASSIFICATION	1.8841582298070751E-6	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999304938177533	WITHOUT_CLASSIFICATION	6.950618224661817E-5	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999418369254262	WITHOUT_CLASSIFICATION	5.816307457381398E-5	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9999346264297252	WITHOUT_CLASSIFICATION	6.537357027478655E-5	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999584337317292	WITHOUT_CLASSIFICATION	4.156626827070495E-5	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999772564878624	WITHOUT_CLASSIFICATION	2.2743512137560044E-5	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999182879743514	WITHOUT_CLASSIFICATION	8.171202564851928E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9998669652942447	WITHOUT_CLASSIFICATION	1.3303470575532888E-4	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999883767315408	WITHOUT_CLASSIFICATION	1.1623268459156944E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999998857153	WITHOUT_CLASSIFICATION	1.1428470447940122E-9	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999873113210654	WITHOUT_CLASSIFICATION	1.2688678934636162E-5	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.9999999656521109	WITHOUT_CLASSIFICATION	3.434788914916148E-8	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9997328177203558	WITHOUT_CLASSIFICATION	2.6718227964421146E-4	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.999929296800089	WITHOUT_CLASSIFICATION	7.070319991092224E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999883767315408	WITHOUT_CLASSIFICATION	1.1623268459156944E-5	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999873113210654	WITHOUT_CLASSIFICATION	1.2688678934636162E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9997328177203558	WITHOUT_CLASSIFICATION	2.6718227964421146E-4	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999923782850418	WITHOUT_CLASSIFICATION	7.621714958198014E-5	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.9999684105833382	WITHOUT_CLASSIFICATION	3.158941666178737E-5	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999667511713642	WITHOUT_CLASSIFICATION	3.324882863568997E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.99992213083606	WITHOUT_CLASSIFICATION	7.786916394005185E-5	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999774489976967	WITHOUT_CLASSIFICATION	2.2551002303218625E-5	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9999218075817539	WITHOUT_CLASSIFICATION	7.819241824620121E-5	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.9999977463821451	WITHOUT_CLASSIFICATION	2.2536178548601248E-6	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999805550508789	WITHOUT_CLASSIFICATION	1.9444949121129802E-5	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999977264256273	WITHOUT_CLASSIFICATION	2.2735743726895788E-6	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999969721299959	WITHOUT_CLASSIFICATION	3.027870004122642E-6	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999998511563309	WITHOUT_CLASSIFICATION	1.4884366910220013E-6	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999897076831141	WITHOUT_CLASSIFICATION	1.0292316885852969E-5	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999981517996062	WITHOUT_CLASSIFICATION	1.8482003937937448E-6	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999834180833115	WITHOUT_CLASSIFICATION	1.6581916688472976E-5	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.9999493686543688	WITHOUT_CLASSIFICATION	5.063134563109324E-5	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999480675017642	WITHOUT_CLASSIFICATION	5.1932498235683454E-5	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999318747957922	WITHOUT_CLASSIFICATION	6.812520420785206E-5	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999987956354	WITHOUT_CLASSIFICATION	1.20436465135637E-9	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.9999528279100778	WITHOUT_CLASSIFICATION	4.717208992226291E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999883767315408	WITHOUT_CLASSIFICATION	1.1623268459156944E-5	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999978167449187	WITHOUT_CLASSIFICATION	2.1832550813107687E-6	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999991834197537	WITHOUT_CLASSIFICATION	8.165802464579392E-7	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.9999981907290945	WITHOUT_CLASSIFICATION	1.8092709055417743E-6	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.999842271319883	WITHOUT_CLASSIFICATION	1.5772868011695653E-4	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.999979227626609	WITHOUT_CLASSIFICATION	2.0772373390997412E-5	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999713510633461	WITHOUT_CLASSIFICATION	2.8648936653809988E-5	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.99999781669689	WITHOUT_CLASSIFICATION	2.1833031099719983E-6	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999982405705067	WITHOUT_CLASSIFICATION	1.7594294933257447E-6	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999942730533223	WITHOUT_CLASSIFICATION	5.726946677582125E-6	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.9998936169608585	WITHOUT_CLASSIFICATION	1.0638303914146999E-4	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998236373453816	WITHOUT_CLASSIFICATION	1.7636265461839216E-4	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998579352675547	WITHOUT_CLASSIFICATION	1.4206473244522485E-4	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.989402850484542	WITHOUT_CLASSIFICATION	0.010597149515457923	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9997270701300653	WITHOUT_CLASSIFICATION	2.7292986993463804E-4	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.9999994070858844	WITHOUT_CLASSIFICATION	5.929141155639702E-7	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999995859247225	WITHOUT_CLASSIFICATION	4.1407527746941055E-7	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.9999432341419142	WITHOUT_CLASSIFICATION	5.676585808571561E-5	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.999970563790761	WITHOUT_CLASSIFICATION	2.9436209238953543E-5	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.999997717837097	WITHOUT_CLASSIFICATION	2.282162902948088E-6	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999771043313112	WITHOUT_CLASSIFICATION	2.2895668688905744E-5	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9998061551515973	WITHOUT_CLASSIFICATION	1.9384484840270544E-4	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9994360094227366	WITHOUT_CLASSIFICATION	5.639905772633988E-4	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999831476118977	WITHOUT_CLASSIFICATION	1.6852388102339495E-5	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999998163874391	WITHOUT_CLASSIFICATION	1.8361256102677404E-7	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999534019506366	WITHOUT_CLASSIFICATION	4.6598049363440104E-5	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999534019506366	WITHOUT_CLASSIFICATION	4.6598049363440104E-5	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999947178111906	WITHOUT_CLASSIFICATION	5.282188809323125E-6	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9996542754765011	WITHOUT_CLASSIFICATION	3.457245234988638E-4	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999963319708094	WITHOUT_CLASSIFICATION	3.668029190582418E-6	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999983279355709	WITHOUT_CLASSIFICATION	1.6720644292258925E-6	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999989465671902	WITHOUT_CLASSIFICATION	1.0534328097454414E-6	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999993403688979	WITHOUT_CLASSIFICATION	6.596311020367692E-7	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999863680085207	WITHOUT_CLASSIFICATION	1.3631991479338926E-5	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9939640942287586	WITHOUT_CLASSIFICATION	0.006035905771241376	IMPLEMENTATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.999999541951176	WITHOUT_CLASSIFICATION	4.580488239884363E-7	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999992958022096	WITHOUT_CLASSIFICATION	7.041977904457641E-7	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999918968540278	WITHOUT_CLASSIFICATION	8.103145972261976E-6	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999992835709232	WITHOUT_CLASSIFICATION	7.16429076845014E-7	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.9999909411710556	WITHOUT_CLASSIFICATION	9.058828944373395E-6	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999997600457299	WITHOUT_CLASSIFICATION	2.3995427010271736E-7	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999967460875125	WITHOUT_CLASSIFICATION	3.2539124875299737E-6	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9998784232473292	WITHOUT_CLASSIFICATION	1.2157675267069025E-4	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9996701154995369	WITHOUT_CLASSIFICATION	3.298845004630672E-4	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999963577527847	WITHOUT_CLASSIFICATION	3.6422472153307425E-6	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930302366181	WITHOUT_CLASSIFICATION	6.9697633818289045E-6	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999992394852594	WITHOUT_CLASSIFICATION	7.605147405166365E-7	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996702050037313	WITHOUT_CLASSIFICATION	3.297949962686533E-4	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999982870546212	WITHOUT_CLASSIFICATION	1.7129453788293401E-6	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999977716291597	WITHOUT_CLASSIFICATION	2.2283708403652468E-6	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999941581773547	WITHOUT_CLASSIFICATION	5.841822645317103E-6	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999965362737143	WITHOUT_CLASSIFICATION	3.4637262856448414E-6	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9998957215488399	WITHOUT_CLASSIFICATION	1.0427845116003731E-4	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998921748128713	WITHOUT_CLASSIFICATION	1.0782518712865185E-4	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999974912935534	WITHOUT_CLASSIFICATION	2.5087064466670623E-6	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999994178130526	WITHOUT_CLASSIFICATION	5.821869474385746E-7	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999536293003174	WITHOUT_CLASSIFICATION	4.637069968247606E-5	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999992394852594	WITHOUT_CLASSIFICATION	7.605147405166365E-7	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999802798731865	WITHOUT_CLASSIFICATION	1.9720126813564736E-5	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9998239066848914	WITHOUT_CLASSIFICATION	1.760933151086499E-4	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9998737079206064	WITHOUT_CLASSIFICATION	1.2629207939373382E-4	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999815246657859	WITHOUT_CLASSIFICATION	1.8475334214016673E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999815246657859	WITHOUT_CLASSIFICATION	1.8475334214016673E-5	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999989348777937	WITHOUT_CLASSIFICATION	1.065122206334497E-6	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999946760534225	WITHOUT_CLASSIFICATION	5.323946577514522E-6	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999938872667444	WITHOUT_CLASSIFICATION	6.112733255511638E-6	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999938872667444	WITHOUT_CLASSIFICATION	6.112733255511638E-6	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999831476118977	WITHOUT_CLASSIFICATION	1.6852388102339495E-5	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999996657257284	WITHOUT_CLASSIFICATION	3.3427427162734407E-7	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999989992830266	WITHOUT_CLASSIFICATION	1.0007169733911357E-5	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999999489286417	WITHOUT_CLASSIFICATION	5.107135829529133E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999980327305457	WITHOUT_CLASSIFICATION	1.967269454351591E-6	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999989992830266	WITHOUT_CLASSIFICATION	1.0007169733911357E-5	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999999489286417	WITHOUT_CLASSIFICATION	5.107135829529133E-7	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999711793844912	WITHOUT_CLASSIFICATION	2.8820615508836016E-5	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999998793525021	WITHOUT_CLASSIFICATION	1.2064749785691505E-7	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999997204325245	WITHOUT_CLASSIFICATION	2.795674754757327E-7	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.9999988542698265	WITHOUT_CLASSIFICATION	1.1457301734458821E-6	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9993538225808744	WITHOUT_CLASSIFICATION	6.46177419125654E-4	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9950064325521664	WITHOUT_CLASSIFICATION	0.00499356744783365	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999271043373	WITHOUT_CLASSIFICATION	7.289566273873462E-8	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999271043373	WITHOUT_CLASSIFICATION	7.289566273873462E-8	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999999523322819	WITHOUT_CLASSIFICATION	4.766771809624281E-8	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999996598640768	WITHOUT_CLASSIFICATION	3.401359231329521E-7	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999754134453445	WITHOUT_CLASSIFICATION	2.4586554655485113E-5	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999764321281	WITHOUT_CLASSIFICATION	2.3567871925734866E-8	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999972551123516	WITHOUT_CLASSIFICATION	2.744887648350146E-6	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999942896676443	WITHOUT_CLASSIFICATION	5.7103323557108495E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999980327305457	WITHOUT_CLASSIFICATION	1.967269454351591E-6	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999968701415749	WITHOUT_CLASSIFICATION	3.12985842507055E-6	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999563515345	WITHOUT_CLASSIFICATION	4.36484654412568E-8	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999563515345	WITHOUT_CLASSIFICATION	4.36484654412568E-8	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999682718582219	WITHOUT_CLASSIFICATION	3.1728141778032306E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999711793844912	WITHOUT_CLASSIFICATION	2.8820615508836016E-5	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999118150592757	WITHOUT_CLASSIFICATION	8.818494072432009E-5	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999504426219018	WITHOUT_CLASSIFICATION	4.955737809826765E-5	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9885571784712948	WITHOUT_CLASSIFICATION	0.011442821528705217	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999997037072742	WITHOUT_CLASSIFICATION	2.962927257639594E-7	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999581092874257	WITHOUT_CLASSIFICATION	4.1890712574324715E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999711793844912	WITHOUT_CLASSIFICATION	2.8820615508836016E-5	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999997037072742	WITHOUT_CLASSIFICATION	2.962927257639594E-7	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999581092874257	WITHOUT_CLASSIFICATION	4.1890712574324715E-5	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999909496352332	WITHOUT_CLASSIFICATION	9.050364766802758E-6	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999658458608519	WITHOUT_CLASSIFICATION	3.4154139148090896E-5	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999993642537552	WITHOUT_CLASSIFICATION	6.357462447676501E-7	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999711793844912	WITHOUT_CLASSIFICATION	2.8820615508836016E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999711793844912	WITHOUT_CLASSIFICATION	2.8820615508836016E-5	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9999910613482976	WITHOUT_CLASSIFICATION	8.938651702404103E-6	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.9999913375203856	WITHOUT_CLASSIFICATION	8.662479614481225E-6	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.9999889886553273	WITHOUT_CLASSIFICATION	1.1011344672790038E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997664932963535	WITHOUT_CLASSIFICATION	2.335067036464923E-4	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.9999910701003188	WITHOUT_CLASSIFICATION	8.929899681185012E-6	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999841861932	WITHOUT_CLASSIFICATION	1.581380687167346E-8	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999447393542552	WITHOUT_CLASSIFICATION	5.5260645744847876E-5	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999978657120505	WITHOUT_CLASSIFICATION	2.1342879496098153E-6	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999818589338262	WITHOUT_CLASSIFICATION	1.8141066173828415E-5	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.9999335877046056	WITHOUT_CLASSIFICATION	6.641229539432501E-5	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9998437100191085	WITHOUT_CLASSIFICATION	1.5628998089137192E-4	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9994843547941752	WITHOUT_CLASSIFICATION	5.156452058248101E-4	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999811958851	WITHOUT_CLASSIFICATION	1.8804114919622934E-8	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999441527964309	WITHOUT_CLASSIFICATION	5.58472035690537E-5	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929932329487	WITHOUT_CLASSIFICATION	7.006767051306302E-6	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999986954931223	WITHOUT_CLASSIFICATION	1.3045068777524848E-6	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997664932963535	WITHOUT_CLASSIFICATION	2.335067036464923E-4	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999995648224762	WITHOUT_CLASSIFICATION	4.3517752376569616E-7	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999909179141618	WITHOUT_CLASSIFICATION	9.082085838169333E-6	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999997614418593	WITHOUT_CLASSIFICATION	2.3855814067437837E-7	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999435423940229	WITHOUT_CLASSIFICATION	5.64576059770206E-5	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9993479796794785	WITHOUT_CLASSIFICATION	6.520203205215597E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9993479796794785	WITHOUT_CLASSIFICATION	6.520203205215597E-4	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997664932963535	WITHOUT_CLASSIFICATION	2.335067036464923E-4	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9989829675208194	WITHOUT_CLASSIFICATION	0.0010170324791806563	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999999824615728	WITHOUT_CLASSIFICATION	1.753842718230114E-8	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.6625573830381628	IMPLEMENTATION	0.33744261696183714	WITHOUT_CLASSIFICATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999996027765734	WITHOUT_CLASSIFICATION	3.972234265808606E-7	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999914752047566	WITHOUT_CLASSIFICATION	8.524795243462253E-6	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999686564956591	WITHOUT_CLASSIFICATION	3.1343504340861074E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9998036938499731	WITHOUT_CLASSIFICATION	1.9630615002692273E-4	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999967869643	WITHOUT_CLASSIFICATION	3.2130356999862864E-6	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999976259794875	WITHOUT_CLASSIFICATION	2.374020512625556E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443627920696	WITHOUT_CLASSIFICATION	5.5637207930395215E-5	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999997170496692	WITHOUT_CLASSIFICATION	2.8295033077214894E-7	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999985299069356	WITHOUT_CLASSIFICATION	1.4700930643697343E-6	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.99999930295835	WITHOUT_CLASSIFICATION	6.970416499012591E-7	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.99848922782439	WITHOUT_CLASSIFICATION	0.0015107721756100465	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999996246718095	WITHOUT_CLASSIFICATION	3.7532819059290714E-7	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993836425642	WITHOUT_CLASSIFICATION	6.163574357571232E-7	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999999430764668	WITHOUT_CLASSIFICATION	5.6923533244869986E-8	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999973485128081	WITHOUT_CLASSIFICATION	2.651487191951129E-6	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999890494456777	WITHOUT_CLASSIFICATION	1.0950554322203385E-5	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998109315916	WITHOUT_CLASSIFICATION	1.8906840845702412E-7	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999998250787929	WITHOUT_CLASSIFICATION	1.7492120712111816E-7	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999885108219473	WITHOUT_CLASSIFICATION	1.1489178052821113E-5	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999965088459858	WITHOUT_CLASSIFICATION	3.4911540142446582E-6	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988784521598516	WITHOUT_CLASSIFICATION	0.0011215478401483334	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990722810415307	WITHOUT_CLASSIFICATION	9.277189584693836E-4	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9958744794037258	WITHOUT_CLASSIFICATION	0.004125520596274323	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997284985333885	WITHOUT_CLASSIFICATION	2.715014666115028E-4	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9891185394729767	WITHOUT_CLASSIFICATION	0.010881460527023233	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9969524069056592	WITHOUT_CLASSIFICATION	0.0030475930943406615	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9634772957145104	WITHOUT_CLASSIFICATION	0.03652270428548963	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988237725923252	WITHOUT_CLASSIFICATION	0.001176227407674757	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.9998760453532072	WITHOUT_CLASSIFICATION	1.239546467928254E-4	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999935543261848	WITHOUT_CLASSIFICATION	6.44567381517923E-6	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998007762053964	WITHOUT_CLASSIFICATION	1.9922379460351732E-4	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998798269222339	WITHOUT_CLASSIFICATION	1.2017307776615524E-4	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998847501784673	WITHOUT_CLASSIFICATION	1.1524982153268013E-4	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978021600289176	WITHOUT_CLASSIFICATION	0.0021978399710824693	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998445602471063	WITHOUT_CLASSIFICATION	1.5543975289373076E-4	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99995976931155	WITHOUT_CLASSIFICATION	4.0230688450126706E-5	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.993492970979927	WITHOUT_CLASSIFICATION	0.006507029020073052	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9906030325591769	WITHOUT_CLASSIFICATION	0.009396967440823049	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999981755203411	WITHOUT_CLASSIFICATION	1.8244796589333492E-6	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998671362181915	WITHOUT_CLASSIFICATION	1.328637818085916E-4	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9956856359650854	WITHOUT_CLASSIFICATION	0.004314364034914621	IMPLEMENTATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999600111302	WITHOUT_CLASSIFICATION	3.99888697181733E-8	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999987985840584	WITHOUT_CLASSIFICATION	1.2014159416319128E-6	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999871982749907	WITHOUT_CLASSIFICATION	1.280172500914948E-5	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.9999821665281033	WITHOUT_CLASSIFICATION	1.783347189668748E-5	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999988684484962	WITHOUT_CLASSIFICATION	1.1315515038658513E-6	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999748645889	WITHOUT_CLASSIFICATION	2.5135411053455923E-8	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.99997619068887	WITHOUT_CLASSIFICATION	2.3809311129947545E-5	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999569590760619	WITHOUT_CLASSIFICATION	4.304092393813039E-5	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9998506993313466	WITHOUT_CLASSIFICATION	1.4930066865340993E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443627920696	WITHOUT_CLASSIFICATION	5.5637207930395215E-5	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998991860090403	WITHOUT_CLASSIFICATION	1.0081399095984105E-4	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999748076966385	WITHOUT_CLASSIFICATION	2.5192303361466327E-5	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999821275922	WITHOUT_CLASSIFICATION	1.7872407796240448E-8	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999807229084418	WITHOUT_CLASSIFICATION	1.927709155819696E-5	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9995482760493533	WITHOUT_CLASSIFICATION	4.517239506467774E-4	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9999634050552529	WITHOUT_CLASSIFICATION	3.6594944747055905E-5	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999950424205747	WITHOUT_CLASSIFICATION	4.957579425211854E-6	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999216917496019	WITHOUT_CLASSIFICATION	7.830825039817237E-5	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999622989634259	WITHOUT_CLASSIFICATION	3.7701036574037354E-5	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937222352703	WITHOUT_CLASSIFICATION	6.277764729789156E-6	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998881927249623	WITHOUT_CLASSIFICATION	1.1180727503762398E-4	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9658378069885765	WITHOUT_CLASSIFICATION	0.034162193011423474	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999970808209891	WITHOUT_CLASSIFICATION	2.919179010900244E-5	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.999361191392514	WITHOUT_CLASSIFICATION	6.388086074860149E-4	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999861033858648	WITHOUT_CLASSIFICATION	1.3896614135236228E-5	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999825765953441	WITHOUT_CLASSIFICATION	1.7423404655934384E-5	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999996392969034	WITHOUT_CLASSIFICATION	3.6070309670124534E-7	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999999941488895	WITHOUT_CLASSIFICATION	5.851110558242083E-9	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999989112417902	WITHOUT_CLASSIFICATION	1.0887582098345873E-6	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999607628876	WITHOUT_CLASSIFICATION	3.9237112495844166E-8	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999842285729835	WITHOUT_CLASSIFICATION	1.5771427016486616E-4	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9954176072325829	WITHOUT_CLASSIFICATION	0.004582392767417225	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999932323	WITHOUT_CLASSIFICATION	6.767700006198778E-9	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999952501342525	WITHOUT_CLASSIFICATION	4.74986574744596E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443627920696	WITHOUT_CLASSIFICATION	5.5637207930395215E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999871982749907	WITHOUT_CLASSIFICATION	1.280172500914948E-5	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999999065506463	WITHOUT_CLASSIFICATION	9.3449353621473E-8	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999556620558	WITHOUT_CLASSIFICATION	4.4337944200215744E-8	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999518813019926	WITHOUT_CLASSIFICATION	4.8118698007289645E-5	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999997865219515	WITHOUT_CLASSIFICATION	2.1347804845511037E-7	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999996551437108	WITHOUT_CLASSIFICATION	3.44856289117633E-7	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.9999989105106944	WITHOUT_CLASSIFICATION	1.0894893055363715E-6	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9658378069885765	WITHOUT_CLASSIFICATION	0.034162193011423474	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999959034021204	WITHOUT_CLASSIFICATION	4.096597879568457E-6	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999679947486156	WITHOUT_CLASSIFICATION	3.2005251384443666E-5	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999667184387	WITHOUT_CLASSIFICATION	3.328156127694001E-8	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999999303317286	WITHOUT_CLASSIFICATION	6.96682714105369E-7	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999349346201	WITHOUT_CLASSIFICATION	6.506537981349202E-8	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999991488575075	WITHOUT_CLASSIFICATION	8.511424925969456E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443627920696	WITHOUT_CLASSIFICATION	5.5637207930395215E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443627920696	WITHOUT_CLASSIFICATION	5.5637207930395215E-5	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999879731788419	WITHOUT_CLASSIFICATION	1.2026821158026684E-5	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999996174127078	WITHOUT_CLASSIFICATION	3.825872921632682E-7	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999992638561945	WITHOUT_CLASSIFICATION	7.361438053605963E-7	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999999723914783	WITHOUT_CLASSIFICATION	2.7608521782299072E-8	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999953013019681	WITHOUT_CLASSIFICATION	4.69869803186658E-6	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999996534323647	WITHOUT_CLASSIFICATION	3.4656763526121883E-7	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999568268648883	WITHOUT_CLASSIFICATION	4.317313511164587E-5	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.9999657093940825	WITHOUT_CLASSIFICATION	3.42906059176197E-5	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999962733003995	WITHOUT_CLASSIFICATION	3.7266996003820246E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443627920696	WITHOUT_CLASSIFICATION	5.5637207930395215E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999773798045	WITHOUT_CLASSIFICATION	2.2620195495858308E-8	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999170945743935	WITHOUT_CLASSIFICATION	8.290542560652785E-5	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999998040897667	WITHOUT_CLASSIFICATION	1.9591023328268222E-7	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999983932908602	WITHOUT_CLASSIFICATION	1.6067091397841137E-6	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999924011877496	WITHOUT_CLASSIFICATION	7.598812250439678E-6	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999582970718947	WITHOUT_CLASSIFICATION	4.170292810535625E-5	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999996508085734	WITHOUT_CLASSIFICATION	3.491914264797121E-7	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.9999993513632274	WITHOUT_CLASSIFICATION	6.486367727204716E-7	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9989574227102046	WITHOUT_CLASSIFICATION	0.001042577289795313	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999988048137317	WITHOUT_CLASSIFICATION	1.1951862682879598E-6	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999999080168029	WITHOUT_CLASSIFICATION	9.198319709308973E-7	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999983143861	WITHOUT_CLASSIFICATION	1.6856139025468987E-8	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999871982749907	WITHOUT_CLASSIFICATION	1.280172500914948E-5	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999824275246816	WITHOUT_CLASSIFICATION	1.7572475318407874E-5	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999995463761332	WITHOUT_CLASSIFICATION	4.5362386675385885E-7	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999998295794372	WITHOUT_CLASSIFICATION	1.704205627967795E-7	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999993085047912	WITHOUT_CLASSIFICATION	6.914952087317916E-7	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999973962965284	WITHOUT_CLASSIFICATION	2.603703471622177E-6	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999950237880589	WITHOUT_CLASSIFICATION	4.976211941133391E-6	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999871982749907	WITHOUT_CLASSIFICATION	1.280172500914948E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999987226251613	WITHOUT_CLASSIFICATION	1.2773748387403532E-6	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999170945743935	WITHOUT_CLASSIFICATION	8.290542560652785E-5	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999487318042812	WITHOUT_CLASSIFICATION	5.126819571889289E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999773798045	WITHOUT_CLASSIFICATION	2.2620195495858308E-8	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443627920696	WITHOUT_CLASSIFICATION	5.5637207930395215E-5	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999401076187	WITHOUT_CLASSIFICATION	5.989238127240489E-8	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9853032499346998	WITHOUT_CLASSIFICATION	0.014696750065300372	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443627920696	WITHOUT_CLASSIFICATION	5.5637207930395215E-5	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999945285217563	WITHOUT_CLASSIFICATION	5.471478243665495E-6	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999667184387	WITHOUT_CLASSIFICATION	3.328156127694001E-8	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999999303317286	WITHOUT_CLASSIFICATION	6.96682714105369E-7	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999349346201	WITHOUT_CLASSIFICATION	6.506537981349202E-8	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.999997225484255	WITHOUT_CLASSIFICATION	2.774515745057895E-6	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9999990083812289	WITHOUT_CLASSIFICATION	9.916187710982153E-7	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999997799389397	WITHOUT_CLASSIFICATION	2.2006106023517706E-7	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999773798045	WITHOUT_CLASSIFICATION	2.2620195495858308E-8	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999401076187	WITHOUT_CLASSIFICATION	5.989238127240489E-8	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443627920696	WITHOUT_CLASSIFICATION	5.5637207930395215E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999871982749907	WITHOUT_CLASSIFICATION	1.280172500914948E-5	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999991488575075	WITHOUT_CLASSIFICATION	8.511424925969456E-7	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999879731788419	WITHOUT_CLASSIFICATION	1.2026821158026684E-5	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999996174127078	WITHOUT_CLASSIFICATION	3.825872921632682E-7	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995981200105	WITHOUT_CLASSIFICATION	4.018799895762955E-7	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995564932114	WITHOUT_CLASSIFICATION	4.435067885281259E-7	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999995277424183	WITHOUT_CLASSIFICATION	4.7225758171634517E-7	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999866551887	WITHOUT_CLASSIFICATION	1.3344811338291062E-8	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999999481170164	WITHOUT_CLASSIFICATION	5.188298352275922E-8	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999997707021621	WITHOUT_CLASSIFICATION	2.292978379611032E-7	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9906030325591769	WITHOUT_CLASSIFICATION	0.009396967440823049	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999999908601802	WITHOUT_CLASSIFICATION	9.139819692874221E-9	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.99904349190846	WITHOUT_CLASSIFICATION	9.56508091539994E-4	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999913853070697	WITHOUT_CLASSIFICATION	8.614692930312428E-6	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999446083815	WITHOUT_CLASSIFICATION	5.539161854220651E-8	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999987480296256	WITHOUT_CLASSIFICATION	1.2519703743324142E-6	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9891185394729767	WITHOUT_CLASSIFICATION	0.010881460527023233	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9969524069056592	WITHOUT_CLASSIFICATION	0.0030475930943406615	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998798269222339	WITHOUT_CLASSIFICATION	1.2017307776615524E-4	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999987480296256	WITHOUT_CLASSIFICATION	1.2519703743324142E-6	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999993510191011	WITHOUT_CLASSIFICATION	6.489808987928253E-7	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999994072995735	WITHOUT_CLASSIFICATION	5.927004265340685E-7	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991127146429326	WITHOUT_CLASSIFICATION	8.872853570674747E-4	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9958524015305735	WITHOUT_CLASSIFICATION	0.004147598469426566	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999957197468404	WITHOUT_CLASSIFICATION	4.280253159566163E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443627920696	WITHOUT_CLASSIFICATION	5.5637207930395215E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443627920696	WITHOUT_CLASSIFICATION	5.5637207930395215E-5	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.9999781252461968	WITHOUT_CLASSIFICATION	2.1874753803238848E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998847501784673	WITHOUT_CLASSIFICATION	1.1524982153268013E-4	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99995976931155	WITHOUT_CLASSIFICATION	4.0230688450126706E-5	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999607628876	WITHOUT_CLASSIFICATION	3.9237112495844166E-8	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999999983455962	WITHOUT_CLASSIFICATION	1.6544038961064393E-9	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999993804668047	WITHOUT_CLASSIFICATION	6.195331953087995E-7	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999989748081	WITHOUT_CLASSIFICATION	1.025191995508494E-9	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999995934001066	WITHOUT_CLASSIFICATION	4.0659989351123715E-7	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999997774701701	WITHOUT_CLASSIFICATION	2.2252982988445887E-7	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999998555348503	WITHOUT_CLASSIFICATION	1.4446514978108093E-7	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999988052159362	WITHOUT_CLASSIFICATION	1.1947840638182689E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999889977794181	WITHOUT_CLASSIFICATION	1.1002220581782389E-5	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999976259794875	WITHOUT_CLASSIFICATION	2.374020512625556E-6	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9990872293609642	WITHOUT_CLASSIFICATION	9.127706390357268E-4	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999994441985715	WITHOUT_CLASSIFICATION	5.558014285934966E-7	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9997818546664042	WITHOUT_CLASSIFICATION	2.1814533359570541E-4	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999657455890242	WITHOUT_CLASSIFICATION	3.425441097585939E-5	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.999999637428971	WITHOUT_CLASSIFICATION	3.625710289785144E-7	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999916752702934	WITHOUT_CLASSIFICATION	8.324729706593153E-6	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999366948505927	WITHOUT_CLASSIFICATION	6.330514940736268E-5	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9841333531071901	WITHOUT_CLASSIFICATION	0.015866646892809894	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995516190898	WITHOUT_CLASSIFICATION	4.483809102305823E-7	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999942459719882	WITHOUT_CLASSIFICATION	5.754028011860317E-6	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999991268345947	WITHOUT_CLASSIFICATION	8.731654052397612E-7	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999971248623502	WITHOUT_CLASSIFICATION	2.875137649904771E-6	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999961506878732	WITHOUT_CLASSIFICATION	3.849312126790033E-6	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999874027473679	WITHOUT_CLASSIFICATION	1.2597252632117657E-5	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999949000310844	WITHOUT_CLASSIFICATION	5.099968915659046E-6	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999997675482673	WITHOUT_CLASSIFICATION	2.3245173268930386E-6	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999977484971911	WITHOUT_CLASSIFICATION	2.2515028089341405E-6	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999975122484935	WITHOUT_CLASSIFICATION	2.4877515064404827E-6	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998089300770234	WITHOUT_CLASSIFICATION	1.9106992297657674E-4	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999958096330641	WITHOUT_CLASSIFICATION	4.190366935830463E-6	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995483146731	WITHOUT_CLASSIFICATION	4.516853269065976E-7	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999740260660492	WITHOUT_CLASSIFICATION	2.5973933950686252E-5	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999128596464	WITHOUT_CLASSIFICATION	8.71403535794168E-8	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999723886386576	WITHOUT_CLASSIFICATION	2.7611361342376736E-5	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.9999984460220698	WITHOUT_CLASSIFICATION	1.5539779302484617E-6	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998729516927173	WITHOUT_CLASSIFICATION	1.2704830728268478E-4	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9996251223309296	WITHOUT_CLASSIFICATION	3.748776690703277E-4	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999992405310406	WITHOUT_CLASSIFICATION	7.594689594263232E-7	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999957768147512	WITHOUT_CLASSIFICATION	4.223185248910667E-6	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999953987116893	WITHOUT_CLASSIFICATION	4.601288310655625E-6	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999496912476857	WITHOUT_CLASSIFICATION	5.030875231425196E-5	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999966383745822	WITHOUT_CLASSIFICATION	3.361625417830744E-6	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.999732468837759	WITHOUT_CLASSIFICATION	2.6753116224100746E-4	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999438411923	WITHOUT_CLASSIFICATION	5.6158807789912554E-8	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999927188014461	WITHOUT_CLASSIFICATION	7.281198553808946E-6	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999709413736555	WITHOUT_CLASSIFICATION	2.905862634453859E-5	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9998459491711086	WITHOUT_CLASSIFICATION	1.540508288913504E-4	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999992111693699	WITHOUT_CLASSIFICATION	7.888306301114481E-7	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999987447246772	WITHOUT_CLASSIFICATION	1.2552753228224384E-6	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.998201591691087	WITHOUT_CLASSIFICATION	0.0017984083089130011	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.8336594921380709	WITHOUT_CLASSIFICATION	0.16634050786192903	IMPLEMENTATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999027643542223	WITHOUT_CLASSIFICATION	9.723564577764937E-5	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9996968963037962	WITHOUT_CLASSIFICATION	3.031036962036869E-4	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999996279285921	WITHOUT_CLASSIFICATION	3.7207140794370407E-7	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9998005230187386	WITHOUT_CLASSIFICATION	1.9947698126141118E-4	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999277257427507	WITHOUT_CLASSIFICATION	7.227425724937193E-5	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999930857013027	WITHOUT_CLASSIFICATION	6.914298697251709E-6	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999935129424878	WITHOUT_CLASSIFICATION	6.487057512143609E-6	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999795049692567	WITHOUT_CLASSIFICATION	2.049503074321405E-5	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999592123012492	WITHOUT_CLASSIFICATION	4.0787698750822775E-5	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999937190192087	WITHOUT_CLASSIFICATION	6.2809807912055495E-6	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999566976715	WITHOUT_CLASSIFICATION	4.330232858914789E-8	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999990126177667	WITHOUT_CLASSIFICATION	9.873822333864574E-7	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999524843544	WITHOUT_CLASSIFICATION	4.751564566463653E-8	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9998586242271786	WITHOUT_CLASSIFICATION	1.4137577282129368E-4	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9983506839375756	WITHOUT_CLASSIFICATION	0.0016493160624243726	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999986890740447	WITHOUT_CLASSIFICATION	1.3109259553218236E-6	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998306297980436	WITHOUT_CLASSIFICATION	1.6937020195651752E-4	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.9999994239382575	WITHOUT_CLASSIFICATION	5.760617424947755E-7	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999998146762259	WITHOUT_CLASSIFICATION	1.85323774230141E-7	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.999882759077244	WITHOUT_CLASSIFICATION	1.1724092275599502E-4	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999964734008658	WITHOUT_CLASSIFICATION	3.5265991342254614E-6	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.9999864783265108	WITHOUT_CLASSIFICATION	1.3521673489104155E-5	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9713741492137592	WITHOUT_CLASSIFICATION	0.02862585078624082	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9988907497874914	WITHOUT_CLASSIFICATION	0.0011092502125085704	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.999981515360842	WITHOUT_CLASSIFICATION	1.8484639158089053E-5	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999880194767893	WITHOUT_CLASSIFICATION	1.198052321072441E-5	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999602041646697	WITHOUT_CLASSIFICATION	3.979583533036029E-5	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.999999829958675	WITHOUT_CLASSIFICATION	1.7004132501810382E-7	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999995128403358	WITHOUT_CLASSIFICATION	4.871596642550538E-7	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999647445860195	WITHOUT_CLASSIFICATION	3.52554139805381E-5	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999994689881337	WITHOUT_CLASSIFICATION	5.310118661997275E-7	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999753937963105	WITHOUT_CLASSIFICATION	2.460620368950654E-5	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999997884017068	WITHOUT_CLASSIFICATION	2.1159829330582235E-7	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999920986369533	WITHOUT_CLASSIFICATION	7.901363046689409E-6	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.999989073491684	WITHOUT_CLASSIFICATION	1.0926508316137043E-5	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999999983235195	WITHOUT_CLASSIFICATION	1.676480511661843E-9	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999994179612189	WITHOUT_CLASSIFICATION	5.82038781083579E-7	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999999444	WITHOUT_CLASSIFICATION	5.562502696079972E-14	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999967823517877	WITHOUT_CLASSIFICATION	3.2176482123734114E-6	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999969873051816	WITHOUT_CLASSIFICATION	3.0126948183050653E-6	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999633559431534	WITHOUT_CLASSIFICATION	3.6644056846499686E-5	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.999890743333707	WITHOUT_CLASSIFICATION	1.0925666629306285E-4	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999280486123687	WITHOUT_CLASSIFICATION	7.195138763133898E-5	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998418958920835	WITHOUT_CLASSIFICATION	1.581041079164054E-4	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999995863168291	WITHOUT_CLASSIFICATION	4.136831710140046E-7	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999722308865772	WITHOUT_CLASSIFICATION	2.7769113422815307E-5	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9999834548541906	WITHOUT_CLASSIFICATION	1.6545145809334663E-5	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999942058117792	WITHOUT_CLASSIFICATION	5.794188220825803E-6	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999535738836	WITHOUT_CLASSIFICATION	4.6426116501998734E-8	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9995048367140351	WITHOUT_CLASSIFICATION	4.951632859648487E-4	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.9998371212098095	WITHOUT_CLASSIFICATION	1.6287879019043244E-4	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999875701538459	WITHOUT_CLASSIFICATION	1.2429846154033204E-5	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9995048367140351	WITHOUT_CLASSIFICATION	4.951632859648487E-4	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999993001697726	WITHOUT_CLASSIFICATION	6.998302273032082E-7	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.99999940513657	WITHOUT_CLASSIFICATION	5.948634299348119E-7	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9992272582195584	WITHOUT_CLASSIFICATION	7.72741780441651E-4	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9223952553116073	WITHOUT_CLASSIFICATION	0.07760474468839268	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.9999998250560755	WITHOUT_CLASSIFICATION	1.7494392447522614E-7	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999968992487244	WITHOUT_CLASSIFICATION	3.1007512756835344E-6	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9995586606604252	WITHOUT_CLASSIFICATION	4.413393395748583E-4	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999959341969128	WITHOUT_CLASSIFICATION	4.065803087210339E-6	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9988574614823693	WITHOUT_CLASSIFICATION	0.0011425385176306263	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998343851197126	WITHOUT_CLASSIFICATION	1.6561488028750144E-4	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999999550535384	WITHOUT_CLASSIFICATION	4.4946461682954005E-8	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999683506464799	WITHOUT_CLASSIFICATION	3.164935352015914E-5	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999850143931528	WITHOUT_CLASSIFICATION	1.4985606847216498E-5	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999998506164318	WITHOUT_CLASSIFICATION	1.4938356829891383E-7	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999974696214466	WITHOUT_CLASSIFICATION	2.5303785533441647E-6	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999456845812641	WITHOUT_CLASSIFICATION	5.431541873588002E-5	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998753886148671	WITHOUT_CLASSIFICATION	1.2461138513292856E-4	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998753886148671	WITHOUT_CLASSIFICATION	1.2461138513292856E-4	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999575219413064	WITHOUT_CLASSIFICATION	4.247805869353011E-5	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9999930418377169	WITHOUT_CLASSIFICATION	6.958162283062271E-6	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.9999851777658922	WITHOUT_CLASSIFICATION	1.4822234107738757E-5	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.9999884594300206	WITHOUT_CLASSIFICATION	1.154056997945621E-5	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999975013006862	WITHOUT_CLASSIFICATION	2.4986993137624277E-6	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999909000841326	WITHOUT_CLASSIFICATION	9.099915867368645E-6	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9999941872997676	WITHOUT_CLASSIFICATION	5.81270023237111E-6	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999961579897	WITHOUT_CLASSIFICATION	3.84201024562122E-9	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.9999999042151679	WITHOUT_CLASSIFICATION	9.578483207093137E-8	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9997359916315156	WITHOUT_CLASSIFICATION	2.640083684844517E-4	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999996022893534	WITHOUT_CLASSIFICATION	3.977106466597074E-7	IMPLEMENTATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999995072849608	WITHOUT_CLASSIFICATION	4.92715039319854E-7	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999980854309477	WITHOUT_CLASSIFICATION	1.9145690523814344E-6	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999989333933493	WITHOUT_CLASSIFICATION	1.0666066507006511E-6	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999892987441	WITHOUT_CLASSIFICATION	1.070125585195355E-8	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999916752702934	WITHOUT_CLASSIFICATION	8.324729706593153E-6	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999581459656878	WITHOUT_CLASSIFICATION	4.185403431222366E-5	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999998500583241	WITHOUT_CLASSIFICATION	1.4994167583233176E-7	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999087496130097	WITHOUT_CLASSIFICATION	9.125038699021187E-5	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999545527100367	WITHOUT_CLASSIFICATION	4.54472899633212E-5	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999995433697376	WITHOUT_CLASSIFICATION	4.566302623704247E-7	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.999992480551733	WITHOUT_CLASSIFICATION	7.5194482670971295E-6	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999999015213805	WITHOUT_CLASSIFICATION	9.847861945975101E-8	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999997892606247	WITHOUT_CLASSIFICATION	2.1073937519869845E-7	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999601131503206	WITHOUT_CLASSIFICATION	3.98868496794359E-5	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999665722585341	WITHOUT_CLASSIFICATION	3.34277414658962E-5	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999993032338	WITHOUT_CLASSIFICATION	6.967662249273284E-10	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999975274100522	WITHOUT_CLASSIFICATION	2.472589947886784E-6	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999179807753679	WITHOUT_CLASSIFICATION	8.20192246322333E-5	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9999979267905751	WITHOUT_CLASSIFICATION	2.0732094249802896E-6	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999874656299989	WITHOUT_CLASSIFICATION	1.2534370001263473E-5	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999997705026202	WITHOUT_CLASSIFICATION	2.2949737982905502E-7	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.9999948672187438	WITHOUT_CLASSIFICATION	5.132781256269527E-6	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999998867114812	WITHOUT_CLASSIFICATION	1.1328851882481932E-7	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999995987804358	WITHOUT_CLASSIFICATION	4.012195642991901E-7	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999971870274611	WITHOUT_CLASSIFICATION	2.812972538908921E-6	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999562528209645	WITHOUT_CLASSIFICATION	4.3747179035599707E-5	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999975924761437	WITHOUT_CLASSIFICATION	2.4075238562528698E-6	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999990726069896	WITHOUT_CLASSIFICATION	9.273930102865639E-7	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999994468532659	WITHOUT_CLASSIFICATION	5.531467340203208E-7	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.999992824482522	WITHOUT_CLASSIFICATION	7.175517478063344E-6	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.9999990536034047	WITHOUT_CLASSIFICATION	9.463965952379705E-7	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999782571652994	WITHOUT_CLASSIFICATION	2.1742834700568304E-5	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999981803231307	WITHOUT_CLASSIFICATION	1.8196768693047501E-6	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999996129213361	WITHOUT_CLASSIFICATION	3.8707866385331684E-7	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999982652854337	WITHOUT_CLASSIFICATION	1.7347145662600239E-6	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998399705681178	WITHOUT_CLASSIFICATION	1.6002943188224436E-4	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958415211934	WITHOUT_CLASSIFICATION	4.158478806571418E-6	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998750804249984	WITHOUT_CLASSIFICATION	1.249195750014935E-4	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9998843101199267	WITHOUT_CLASSIFICATION	1.1568988007326148E-4	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999944983672867	WITHOUT_CLASSIFICATION	5.5016327132299385E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999889977794181	WITHOUT_CLASSIFICATION	1.1002220581782389E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999889977794181	WITHOUT_CLASSIFICATION	1.1002220581782389E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999985234055775	WITHOUT_CLASSIFICATION	1.4765944224708407E-6	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999949127221902	WITHOUT_CLASSIFICATION	5.0872778098550965E-6	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999978781970824	WITHOUT_CLASSIFICATION	2.1218029176044127E-6	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999335171281074	WITHOUT_CLASSIFICATION	6.648287189255901E-5	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999978781970824	WITHOUT_CLASSIFICATION	2.1218029176044127E-6	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999922472411987	WITHOUT_CLASSIFICATION	7.752758801176608E-6	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999914957763506	WITHOUT_CLASSIFICATION	8.5042236494502E-6	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999960875468323	WITHOUT_CLASSIFICATION	3.9124531676598356E-6	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.99999609630275	WITHOUT_CLASSIFICATION	3.90369725008127E-6	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.99999352549581	WITHOUT_CLASSIFICATION	6.4745041899995195E-6	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999904882879427	WITHOUT_CLASSIFICATION	9.511712057322447E-6	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999932991198557	WITHOUT_CLASSIFICATION	6.7008801442667625E-6	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.9999985908336257	WITHOUT_CLASSIFICATION	1.4091663743295026E-6	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999978542318608	WITHOUT_CLASSIFICATION	2.1457681392284033E-6	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9366978582800011	WITHOUT_CLASSIFICATION	0.06330214171999902	IMPLEMENTATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.999994441996618	WITHOUT_CLASSIFICATION	5.55800338194319E-6	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999815613610985	WITHOUT_CLASSIFICATION	1.8438638901513162E-5	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999970517200746	WITHOUT_CLASSIFICATION	2.9482799254274507E-6	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999647318176597	WITHOUT_CLASSIFICATION	3.5268182340363405E-5	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9965575662075369	WITHOUT_CLASSIFICATION	0.003442433792463191	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999981581224324	WITHOUT_CLASSIFICATION	1.841877567544174E-6	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999997783928453	WITHOUT_CLASSIFICATION	2.216071548722595E-7	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999997783928453	WITHOUT_CLASSIFICATION	2.216071548722595E-7	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999962680795573	WITHOUT_CLASSIFICATION	3.7319204427000973E-6	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999998792005966	WITHOUT_CLASSIFICATION	1.2079940339722245E-7	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999726992637	WITHOUT_CLASSIFICATION	2.7300736356408613E-8	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.999999680422104	WITHOUT_CLASSIFICATION	3.1957789598017996E-7	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999909017363	WITHOUT_CLASSIFICATION	9.09826364624817E-9	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999993266283563	WITHOUT_CLASSIFICATION	6.733716437269287E-7	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.7915736534427981	WITHOUT_CLASSIFICATION	0.20842634655720194	IMPLEMENTATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999970456608238	WITHOUT_CLASSIFICATION	2.95433917626795E-6	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.9999957244879744	WITHOUT_CLASSIFICATION	4.275512025643344E-6	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999989532359582	WITHOUT_CLASSIFICATION	1.0467640417313441E-6	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999005003323	WITHOUT_CLASSIFICATION	9.949966773578602E-8	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999983414813244	WITHOUT_CLASSIFICATION	1.6585186754969769E-6	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999711453158677	WITHOUT_CLASSIFICATION	2.885468413228285E-5	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999731301666659	WITHOUT_CLASSIFICATION	2.6869833334101784E-5	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9997375615093613	WITHOUT_CLASSIFICATION	2.624384906387449E-4	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999749571914	WITHOUT_CLASSIFICATION	2.5042808535563957E-8	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.999998913244481	WITHOUT_CLASSIFICATION	1.0867555190208146E-6	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9998999984468497	WITHOUT_CLASSIFICATION	1.0000155315031163E-4	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.999113987908311	WITHOUT_CLASSIFICATION	8.860120916890961E-4	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999976769484697	WITHOUT_CLASSIFICATION	2.323051530209646E-6	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999968167378382	WITHOUT_CLASSIFICATION	3.1832621617815204E-6	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9986606598929864	WITHOUT_CLASSIFICATION	0.0013393401070136417	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9993155778085511	WITHOUT_CLASSIFICATION	6.844221914489893E-4	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999852475408464	WITHOUT_CLASSIFICATION	1.4752459153704197E-5	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.9995451614098083	WITHOUT_CLASSIFICATION	4.548385901916589E-4	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.9999994311355864	WITHOUT_CLASSIFICATION	5.688644136109267E-7	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.999999867532025	WITHOUT_CLASSIFICATION	1.3246797504018727E-7	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9969728835375807	WITHOUT_CLASSIFICATION	0.003027116462419266	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999724518152258	WITHOUT_CLASSIFICATION	2.754818477425495E-5	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999752185906	WITHOUT_CLASSIFICATION	2.4781409315389055E-8	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999999987330608	WITHOUT_CLASSIFICATION	1.266939210895363E-9	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999933434849734	WITHOUT_CLASSIFICATION	6.656515026669932E-6	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998973034228831	WITHOUT_CLASSIFICATION	1.0269657711684759E-4	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999200215264329	WITHOUT_CLASSIFICATION	7.997847356713584E-5	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999706401912398	WITHOUT_CLASSIFICATION	2.9359808760223564E-5	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999972199250554	WITHOUT_CLASSIFICATION	2.7800749444873785E-6	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999961643195802	WITHOUT_CLASSIFICATION	3.835680419886054E-6	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999977211633583	WITHOUT_CLASSIFICATION	2.2788366416847765E-6	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.999999965619397	WITHOUT_CLASSIFICATION	3.438060300169114E-8	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.99998863537618	WITHOUT_CLASSIFICATION	1.1364623819975695E-5	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999998909113725	WITHOUT_CLASSIFICATION	1.0908862747466459E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983553468196	WITHOUT_CLASSIFICATION	1.6446531803230189E-6	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9999977617125455	WITHOUT_CLASSIFICATION	2.238287454406681E-6	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.8272961474289934	WITHOUT_CLASSIFICATION	0.17270385257100654	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999319206747674	WITHOUT_CLASSIFICATION	6.807932523256829E-5	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9996985354639013	WITHOUT_CLASSIFICATION	3.0146453609872535E-4	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.909577915315471	IMPLEMENTATION	0.09042208468452895	WITHOUT_CLASSIFICATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999886340898	WITHOUT_CLASSIFICATION	1.1365910193131087E-8	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.999970626628512	WITHOUT_CLASSIFICATION	2.937337148808137E-5	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999651915574738	WITHOUT_CLASSIFICATION	3.480844252631922E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975019083699	WITHOUT_CLASSIFICATION	2.4980916300672516E-6	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999997393699123	WITHOUT_CLASSIFICATION	2.606300877587026E-7	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999998803990575	WITHOUT_CLASSIFICATION	1.1960094251657663E-6	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998798786149374	WITHOUT_CLASSIFICATION	1.2012138506259388E-4	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.999992813323836	WITHOUT_CLASSIFICATION	7.186676163876422E-6	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999987226251613	WITHOUT_CLASSIFICATION	1.2773748387403532E-6	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999987226251613	WITHOUT_CLASSIFICATION	1.2773748387403532E-6	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999983257442927	WITHOUT_CLASSIFICATION	1.6742557074038583E-6	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.999848920583677	WITHOUT_CLASSIFICATION	1.510794163228682E-4	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999998896827447	WITHOUT_CLASSIFICATION	1.1031725522424461E-7	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999977084289491	WITHOUT_CLASSIFICATION	2.291571050973871E-6	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999990903221425	WITHOUT_CLASSIFICATION	9.096778574204761E-7	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999600848619	WITHOUT_CLASSIFICATION	3.991513816615053E-8	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9997697113418448	WITHOUT_CLASSIFICATION	2.3028865815508245E-4	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999619007721737	WITHOUT_CLASSIFICATION	3.8099227826397154E-5	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999961590555665	WITHOUT_CLASSIFICATION	3.840944433504938E-6	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999917486334	WITHOUT_CLASSIFICATION	8.251366667024822E-9	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999980399205067	WITHOUT_CLASSIFICATION	1.9600794933050264E-6	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999998063989411	WITHOUT_CLASSIFICATION	1.936010588916688E-6	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999866162174759	WITHOUT_CLASSIFICATION	1.338378252408864E-5	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999797080063694	WITHOUT_CLASSIFICATION	2.0291993630672363E-5	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999999753879233	WITHOUT_CLASSIFICATION	2.461207669711192E-7	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999981822639938	WITHOUT_CLASSIFICATION	1.817736006224407E-6	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999898490648741	WITHOUT_CLASSIFICATION	1.0150935125943086E-5	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999961697910227	WITHOUT_CLASSIFICATION	3.830208977359483E-6	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9999865468285425	WITHOUT_CLASSIFICATION	1.3453171457488811E-5	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999008728233	WITHOUT_CLASSIFICATION	9.912717661198766E-8	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998419144117128	WITHOUT_CLASSIFICATION	1.5808558828723298E-4	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999805645212	WITHOUT_CLASSIFICATION	1.9435478845731006E-8	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999954434797816	WITHOUT_CLASSIFICATION	4.556520218376939E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999847875702469	WITHOUT_CLASSIFICATION	1.5212429753087592E-4	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9968672513388334	WITHOUT_CLASSIFICATION	0.003132748661166782	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9992349623897945	WITHOUT_CLASSIFICATION	7.650376102055599E-4	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9776042662709764	WITHOUT_CLASSIFICATION	0.022395733729023596	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9992690484119334	WITHOUT_CLASSIFICATION	7.309515880666092E-4	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999769462124068	WITHOUT_CLASSIFICATION	2.305378759318905E-4	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999652220903564	WITHOUT_CLASSIFICATION	3.477790964354752E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999847875702469	WITHOUT_CLASSIFICATION	1.5212429753087592E-4	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.999992297132023	WITHOUT_CLASSIFICATION	7.702867977051185E-6	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999261337699	WITHOUT_CLASSIFICATION	7.386623011755172E-8	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.9999487176290294	WITHOUT_CLASSIFICATION	5.1282370970543565E-5	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999981277271204	WITHOUT_CLASSIFICATION	1.87227287952425E-6	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999385200407	WITHOUT_CLASSIFICATION	6.147995930862343E-8	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9996943648046102	WITHOUT_CLASSIFICATION	3.0563519538975614E-4	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9998362438923986	WITHOUT_CLASSIFICATION	1.6375610760135478E-4	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998411802753	WITHOUT_CLASSIFICATION	1.58819724702137E-7	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9378676060946802	WITHOUT_CLASSIFICATION	0.062132393905319716	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999981277271204	WITHOUT_CLASSIFICATION	1.87227287952425E-6	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999999876028615	WITHOUT_CLASSIFICATION	1.239713845541273E-8	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998411802753	WITHOUT_CLASSIFICATION	1.58819724702137E-7	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999723107892031	WITHOUT_CLASSIFICATION	2.768921079695485E-5	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998851042611759	WITHOUT_CLASSIFICATION	1.1489573882413961E-4	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9996075423618179	WITHOUT_CLASSIFICATION	3.924576381821225E-4	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999005003323	WITHOUT_CLASSIFICATION	9.949966773578602E-8	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999996988727798	WITHOUT_CLASSIFICATION	3.0112722009119143E-7	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999996689242603	WITHOUT_CLASSIFICATION	3.3107573980224277E-7	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999174788983	WITHOUT_CLASSIFICATION	8.252110173891058E-8	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9987558877267048	WITHOUT_CLASSIFICATION	0.001244112273295218	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999992763062	WITHOUT_CLASSIFICATION	7.236937412921451E-10	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.9999617284337293	WITHOUT_CLASSIFICATION	3.8271566270612744E-5	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999967574866893	WITHOUT_CLASSIFICATION	3.2425133107434295E-6	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999999428961418	WITHOUT_CLASSIFICATION	5.710385809542115E-8	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999976946213387	WITHOUT_CLASSIFICATION	2.305378661386613E-6	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.999946190250801	WITHOUT_CLASSIFICATION	5.380974919894956E-5	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999550222135172	WITHOUT_CLASSIFICATION	4.4977786482970336E-5	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999970127993	WITHOUT_CLASSIFICATION	2.9872006559267826E-9	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999993878689973	WITHOUT_CLASSIFICATION	6.121310026066165E-7	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9979919030754573	WITHOUT_CLASSIFICATION	0.002008096924542723	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999740043532643	WITHOUT_CLASSIFICATION	2.599564673563317E-5	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999995267482141	WITHOUT_CLASSIFICATION	4.732517859144323E-7	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9997691292505502	WITHOUT_CLASSIFICATION	2.308707494498097E-4	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999979387847626	WITHOUT_CLASSIFICATION	2.0612152374924776E-6	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999590052517328	WITHOUT_CLASSIFICATION	4.099474826729535E-5	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999989045186282	WITHOUT_CLASSIFICATION	1.0954813718901685E-6	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999995520241458	WITHOUT_CLASSIFICATION	4.479758541948558E-6	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999733856202062	WITHOUT_CLASSIFICATION	2.6614379793836578E-5	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999999745084298	WITHOUT_CLASSIFICATION	2.5491570099437548E-8	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999852530131	WITHOUT_CLASSIFICATION	1.4746986842705001E-8	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999887336627044	WITHOUT_CLASSIFICATION	1.1266337295642058E-5	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.9999511803287322	WITHOUT_CLASSIFICATION	4.8819671267804046E-5	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.9999941167911213	WITHOUT_CLASSIFICATION	5.883208878730266E-6	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979442103808	WITHOUT_CLASSIFICATION	2.0557896191366874E-6	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999765381845627	WITHOUT_CLASSIFICATION	2.3461815437423847E-5	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999548601723369	WITHOUT_CLASSIFICATION	4.513982766316078E-5	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9983735598560259	WITHOUT_CLASSIFICATION	0.0016264401439740935	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999899455142135	WITHOUT_CLASSIFICATION	1.0054485786535371E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999959734219372	WITHOUT_CLASSIFICATION	4.026578062709842E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999959734219372	WITHOUT_CLASSIFICATION	4.026578062709842E-6	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999997345746501	WITHOUT_CLASSIFICATION	2.6542534992067E-7	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9997342911196423	WITHOUT_CLASSIFICATION	2.6570888035774864E-4	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999965292600895	WITHOUT_CLASSIFICATION	3.470739910482536E-6	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999955177333486	WITHOUT_CLASSIFICATION	4.482266651409902E-6	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999658002253035	WITHOUT_CLASSIFICATION	3.419977469644665E-5	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999561330327887	WITHOUT_CLASSIFICATION	4.386696721129415E-5	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999944984634649	WITHOUT_CLASSIFICATION	5.50153653520216E-6	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999954525751802	WITHOUT_CLASSIFICATION	4.547424819860064E-6	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999958714686211	WITHOUT_CLASSIFICATION	4.128531378904483E-6	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999744099137671	WITHOUT_CLASSIFICATION	2.55900862329596E-5	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999997465736744	WITHOUT_CLASSIFICATION	2.5342632565435526E-7	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999993729498617	WITHOUT_CLASSIFICATION	6.270501382166807E-7	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999267265341218	WITHOUT_CLASSIFICATION	7.327346587814304E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999959734219372	WITHOUT_CLASSIFICATION	4.026578062709842E-6	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999995336456607	WITHOUT_CLASSIFICATION	4.6635433925628534E-7	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999892305448983	WITHOUT_CLASSIFICATION	1.0769455101702598E-5	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999835816754695	WITHOUT_CLASSIFICATION	1.6418324530502964E-4	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999659615565452	WITHOUT_CLASSIFICATION	3.403844345479807E-5	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999958200697535	WITHOUT_CLASSIFICATION	4.179930246524279E-6	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999997645096522	WITHOUT_CLASSIFICATION	2.3549034772008033E-7	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999482725262733	WITHOUT_CLASSIFICATION	5.172747372671422E-4	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999393934917683	WITHOUT_CLASSIFICATION	6.060650823180617E-5	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999888977021971	WITHOUT_CLASSIFICATION	1.1102297802859228E-5	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999859306636972	WITHOUT_CLASSIFICATION	1.4069336302877755E-5	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9997599998213048	WITHOUT_CLASSIFICATION	2.40000178695288E-4	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979442103808	WITHOUT_CLASSIFICATION	2.0557896191366874E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999959734219372	WITHOUT_CLASSIFICATION	4.026578062709842E-6	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9997802669467262	WITHOUT_CLASSIFICATION	2.1973305327381782E-4	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999971311209677	WITHOUT_CLASSIFICATION	2.8688790323059694E-6	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.9999894920077635	WITHOUT_CLASSIFICATION	1.0507992236485353E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999950032499532	WITHOUT_CLASSIFICATION	4.996750046732807E-6	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999847214811451	WITHOUT_CLASSIFICATION	1.527851885488776E-5	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999998515872426	WITHOUT_CLASSIFICATION	1.4841275738255688E-7	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822677088551	WITHOUT_CLASSIFICATION	1.7732291144890595E-5	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999929731185	WITHOUT_CLASSIFICATION	7.026881594558012E-9	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999602747043	WITHOUT_CLASSIFICATION	3.972529579827687E-8	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999996741129639	WITHOUT_CLASSIFICATION	3.258870362405572E-7	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999779727496503	WITHOUT_CLASSIFICATION	2.2027250349660383E-5	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9998253123393838	WITHOUT_CLASSIFICATION	1.7468766061625666E-4	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999883937837035	WITHOUT_CLASSIFICATION	1.1606216296442771E-5	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999908855467214	WITHOUT_CLASSIFICATION	9.114453278496722E-6	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999922472411987	WITHOUT_CLASSIFICATION	7.752758801176608E-6	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999947447893028	WITHOUT_CLASSIFICATION	5.255210697168864E-6	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999998228177277	WITHOUT_CLASSIFICATION	1.7718227219493808E-7	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.999998468754605	WITHOUT_CLASSIFICATION	1.5312453949927234E-6	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.9999840814181749	WITHOUT_CLASSIFICATION	1.591858182512169E-5	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999207948661	WITHOUT_CLASSIFICATION	7.920513381370583E-8	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999926044082846	WITHOUT_CLASSIFICATION	7.395591715489389E-6	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999926044082846	WITHOUT_CLASSIFICATION	7.395591715489389E-6	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999349946682042	WITHOUT_CLASSIFICATION	6.500533179581751E-5	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999982393166	WITHOUT_CLASSIFICATION	1.7606834070046651E-9	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999513873363574	WITHOUT_CLASSIFICATION	4.8612663642664085E-5	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999857979907117	WITHOUT_CLASSIFICATION	1.4202009288320756E-5	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999116848035472	WITHOUT_CLASSIFICATION	8.831519645283705E-5	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999952525434983	WITHOUT_CLASSIFICATION	4.747456501752961E-6	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999209137958971	WITHOUT_CLASSIFICATION	7.908620410284741E-5	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998811944055	WITHOUT_CLASSIFICATION	1.1880559456756869E-7	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998811944055	WITHOUT_CLASSIFICATION	1.1880559456756869E-7	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999845453887967	WITHOUT_CLASSIFICATION	1.5454611203271203E-5	IMPLEMENTATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999995904697101	WITHOUT_CLASSIFICATION	4.095302898381404E-7	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999976730834	WITHOUT_CLASSIFICATION	2.3269165999229524E-6	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999996451016743	WITHOUT_CLASSIFICATION	3.548983258076239E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999996451016743	WITHOUT_CLASSIFICATION	3.548983258076239E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999996451016743	WITHOUT_CLASSIFICATION	3.548983258076239E-7	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999996483406467	WITHOUT_CLASSIFICATION	3.516593532653323E-7	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999935960756	WITHOUT_CLASSIFICATION	6.403924380831097E-9	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9991293065015406	WITHOUT_CLASSIFICATION	8.706934984593518E-4	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999876715643446	WITHOUT_CLASSIFICATION	1.2328435655292955E-5	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999987513729324	WITHOUT_CLASSIFICATION	1.248627067542959E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999959734219372	WITHOUT_CLASSIFICATION	4.026578062709842E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999959734219372	WITHOUT_CLASSIFICATION	4.026578062709842E-6	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9997075112285392	WITHOUT_CLASSIFICATION	2.924887714608168E-4	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9996975229785762	WITHOUT_CLASSIFICATION	3.0247702142383693E-4	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9994987147226108	WITHOUT_CLASSIFICATION	5.012852773892119E-4	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9997881979189948	WITHOUT_CLASSIFICATION	2.1180208100521854E-4	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999977499381523	WITHOUT_CLASSIFICATION	2.2500618477252894E-6	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.9999693905715741	WITHOUT_CLASSIFICATION	3.060942842595185E-5	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999950625918594	WITHOUT_CLASSIFICATION	4.9374081405773044E-6	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999941387354042	WITHOUT_CLASSIFICATION	5.861264595781975E-6	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999988860780373	WITHOUT_CLASSIFICATION	1.113921962715494E-6	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999267091936	WITHOUT_CLASSIFICATION	7.32908064740426E-8	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999997526642122	WITHOUT_CLASSIFICATION	2.4733578780119264E-6	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999857498345944	WITHOUT_CLASSIFICATION	1.4250165405446243E-5	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999960368205204	WITHOUT_CLASSIFICATION	3.9631794794932444E-6	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999960368205204	WITHOUT_CLASSIFICATION	3.9631794794932444E-6	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999961856826027	WITHOUT_CLASSIFICATION	3.8143173972302845E-6	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999961856826027	WITHOUT_CLASSIFICATION	3.8143173972302845E-6	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999964077715752	WITHOUT_CLASSIFICATION	3.5922284247950466E-6	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999848773286788	WITHOUT_CLASSIFICATION	1.5122671321089166E-5	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999848773286788	WITHOUT_CLASSIFICATION	1.5122671321089166E-5	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999897328443144	WITHOUT_CLASSIFICATION	1.0267155685603493E-5	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999894837357508	WITHOUT_CLASSIFICATION	1.0516264249278645E-5	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999768407282886	WITHOUT_CLASSIFICATION	2.3159271711378514E-5	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999926044082846	WITHOUT_CLASSIFICATION	7.395591715489389E-6	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9996208084408502	WITHOUT_CLASSIFICATION	3.79191559149735E-4	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999894837357508	WITHOUT_CLASSIFICATION	1.0516264249278645E-5	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999995551415203	WITHOUT_CLASSIFICATION	4.4485847977385196E-7	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.998411397491011	WITHOUT_CLASSIFICATION	0.0015886025089889878	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999625203133744	WITHOUT_CLASSIFICATION	3.7479686625591086E-5	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999777852413171	WITHOUT_CLASSIFICATION	2.2214758682936405E-5	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999996750932976	WITHOUT_CLASSIFICATION	3.249067023974976E-7	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999844501750255	WITHOUT_CLASSIFICATION	1.5549824974496538E-4	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999997553288845	WITHOUT_CLASSIFICATION	2.4467111550250977E-6	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.999815868317474	WITHOUT_CLASSIFICATION	1.8413168252600355E-4	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999954884757228	WITHOUT_CLASSIFICATION	4.511524277208678E-6	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999999425563	WITHOUT_CLASSIFICATION	5.7443791984326435E-11	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999138143036	WITHOUT_CLASSIFICATION	8.618569629340999E-8	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.9999219590743632	WITHOUT_CLASSIFICATION	7.804092563686221E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999425027222143	WITHOUT_CLASSIFICATION	5.749727778577183E-5	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.9999611225334535	WITHOUT_CLASSIFICATION	3.887746654649017E-5	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.99407132904088	WITHOUT_CLASSIFICATION	0.00592867095912006	IMPLEMENTATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9996159663085147	WITHOUT_CLASSIFICATION	3.8403369148533496E-4	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999883232854	WITHOUT_CLASSIFICATION	1.1676714621770508E-8	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999973347837497	WITHOUT_CLASSIFICATION	2.6652162502944403E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999973347837497	WITHOUT_CLASSIFICATION	2.6652162502944403E-6	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999989175178147	WITHOUT_CLASSIFICATION	1.082482185413968E-6	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999999137217573	WITHOUT_CLASSIFICATION	8.627824270370206E-8	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999995666966259	WITHOUT_CLASSIFICATION	4.333033740650599E-7	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9993196215678516	WITHOUT_CLASSIFICATION	6.80378432148309E-4	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999987552811409	WITHOUT_CLASSIFICATION	1.2447188590829544E-5	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999728488027121	WITHOUT_CLASSIFICATION	2.7151197287884574E-5	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999614614688587	WITHOUT_CLASSIFICATION	3.853853114134907E-5	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999993153941754	WITHOUT_CLASSIFICATION	6.846058247045842E-7	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999186149570805	WITHOUT_CLASSIFICATION	8.138504291956762E-5	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.999999904559438	WITHOUT_CLASSIFICATION	9.544056202709461E-8	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999999577920312	WITHOUT_CLASSIFICATION	4.220796880776991E-8	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9998253123393838	WITHOUT_CLASSIFICATION	1.7468766061625666E-4	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999996358951901	WITHOUT_CLASSIFICATION	3.641048098233452E-7	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999896633242624	WITHOUT_CLASSIFICATION	1.0336675737540951E-5	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999849025158061	WITHOUT_CLASSIFICATION	1.509748419393706E-5	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999936659442249	WITHOUT_CLASSIFICATION	6.334055775113603E-6	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999982761420604	WITHOUT_CLASSIFICATION	1.723857939725486E-6	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999982761420604	WITHOUT_CLASSIFICATION	1.723857939725486E-6	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999705332216664	WITHOUT_CLASSIFICATION	2.9466778333616144E-5	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999895276696851	WITHOUT_CLASSIFICATION	1.0472330314868774E-5	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999663291089536	WITHOUT_CLASSIFICATION	3.36708910464436E-5	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.9999974776125957	WITHOUT_CLASSIFICATION	2.5223874042561985E-6	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.9999976724164942	WITHOUT_CLASSIFICATION	2.3275835058951988E-6	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9997695126746182	WITHOUT_CLASSIFICATION	2.304873253816743E-4	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9996493721008575	WITHOUT_CLASSIFICATION	3.5062789914247744E-4	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999030709222	WITHOUT_CLASSIFICATION	9.692907783071184E-8	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997848895949719	WITHOUT_CLASSIFICATION	2.1511040502817337E-4	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.999999994812389	WITHOUT_CLASSIFICATION	5.187611010021827E-9	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999786795984	WITHOUT_CLASSIFICATION	2.1320401496096702E-8	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999030709222	WITHOUT_CLASSIFICATION	9.692907783071184E-8	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999923177319763	WITHOUT_CLASSIFICATION	7.682268023741566E-6	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999909172710564	WITHOUT_CLASSIFICATION	9.082728943531017E-6	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999995942851501	WITHOUT_CLASSIFICATION	4.0571485002567385E-7	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9999995844640795	WITHOUT_CLASSIFICATION	4.1553592053340105E-7	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999596360666	WITHOUT_CLASSIFICATION	4.036393342001959E-8	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999970970467624	WITHOUT_CLASSIFICATION	2.9029532375416425E-6	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9984563563713517	WITHOUT_CLASSIFICATION	0.0015436436286483122	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.999994108096143	WITHOUT_CLASSIFICATION	5.891903857108322E-6	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999992551469112	WITHOUT_CLASSIFICATION	7.448530886979356E-7	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999523412184715	WITHOUT_CLASSIFICATION	4.765878152849933E-5	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9993037201146918	WITHOUT_CLASSIFICATION	6.962798853082633E-4	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999998628249362	WITHOUT_CLASSIFICATION	1.3717506378444682E-7	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999997234521507	WITHOUT_CLASSIFICATION	2.7654784936470576E-7	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999995288215235	WITHOUT_CLASSIFICATION	4.711784764209358E-7	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999873424486911	WITHOUT_CLASSIFICATION	1.2657551308896324E-4	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999735582016384	WITHOUT_CLASSIFICATION	2.6441798361590982E-5	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999908763450268	WITHOUT_CLASSIFICATION	9.123654973100814E-6	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9982491559083722	WITHOUT_CLASSIFICATION	0.0017508440916278374	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9992834290635871	WITHOUT_CLASSIFICATION	7.165709364127784E-4	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999099606310884	WITHOUT_CLASSIFICATION	9.00393689116058E-4	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999985944410935	WITHOUT_CLASSIFICATION	1.4055589065249963E-6	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999979118695393	WITHOUT_CLASSIFICATION	2.0881304606821477E-6	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999988218376125	WITHOUT_CLASSIFICATION	1.1781623875694317E-6	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.9998787820215133	WITHOUT_CLASSIFICATION	1.2121797848672817E-4	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999999019565601	WITHOUT_CLASSIFICATION	9.804343991006823E-7	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9998185208660842	WITHOUT_CLASSIFICATION	1.814791339156781E-4	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999992524598481	WITHOUT_CLASSIFICATION	7.475401519753503E-7	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9997138905562222	WITHOUT_CLASSIFICATION	2.861094437778258E-4	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999987266850726	WITHOUT_CLASSIFICATION	1.2733149274112012E-6	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.999950802608972	WITHOUT_CLASSIFICATION	4.919739102803845E-5	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999756256446	WITHOUT_CLASSIFICATION	2.4374355467010915E-8	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999996232874381	WITHOUT_CLASSIFICATION	3.7671256192372925E-7	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999860170772146	WITHOUT_CLASSIFICATION	1.3982922785409792E-5	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999948082898	WITHOUT_CLASSIFICATION	5.191710169992474E-9	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999930349303024	WITHOUT_CLASSIFICATION	6.965069697602481E-6	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999910116024014	WITHOUT_CLASSIFICATION	8.988397598532576E-6	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999986319061	WITHOUT_CLASSIFICATION	1.3680938092309507E-9	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999969005741	WITHOUT_CLASSIFICATION	3.0994259210186733E-9	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999997690064949	WITHOUT_CLASSIFICATION	2.3099350497278365E-7	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999618943423245	WITHOUT_CLASSIFICATION	3.810565767544129E-5	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999993643685925	WITHOUT_CLASSIFICATION	6.356314074998828E-6	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999310573802	WITHOUT_CLASSIFICATION	6.894261984632089E-8	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999928306542235	WITHOUT_CLASSIFICATION	7.169345776494359E-5	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999997574140438	WITHOUT_CLASSIFICATION	2.4258595620700066E-7	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.999999264741654	WITHOUT_CLASSIFICATION	7.352583459376739E-7	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999982466546308	WITHOUT_CLASSIFICATION	1.7533453692671563E-6	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999962862876832	WITHOUT_CLASSIFICATION	3.7137123166645866E-6	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999975564836825	WITHOUT_CLASSIFICATION	2.4435163174199113E-6	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999997487504063	WITHOUT_CLASSIFICATION	2.512495937538534E-7	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999991837184095	WITHOUT_CLASSIFICATION	8.162815904506105E-7	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999907281911925	WITHOUT_CLASSIFICATION	9.271808807501221E-5	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999929885779284	WITHOUT_CLASSIFICATION	7.011422071675889E-6	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999582451147	WITHOUT_CLASSIFICATION	4.175488531927166E-8	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999987197555	WITHOUT_CLASSIFICATION	1.2802445064690445E-9	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999998911581834	WITHOUT_CLASSIFICATION	1.0884181643843161E-7	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999678491654733	WITHOUT_CLASSIFICATION	3.2150834526674594E-5	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998749078499347	WITHOUT_CLASSIFICATION	1.2509215006533374E-4	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999643931728653	WITHOUT_CLASSIFICATION	3.560682713473015E-5	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.9999934342945508	WITHOUT_CLASSIFICATION	6.565705449191327E-6	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.999999670227143	WITHOUT_CLASSIFICATION	3.297728570518168E-7	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999841371300711	WITHOUT_CLASSIFICATION	1.5862869928980863E-5	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999906497128509	WITHOUT_CLASSIFICATION	9.3502871490126E-6	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.9999696697804338	WITHOUT_CLASSIFICATION	3.0330219566269008E-5	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999405067946	WITHOUT_CLASSIFICATION	5.949320532533944E-8	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999997648778522	WITHOUT_CLASSIFICATION	2.3512214775595577E-7	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999912662623494	WITHOUT_CLASSIFICATION	8.733737650585231E-6	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999907281911925	WITHOUT_CLASSIFICATION	9.271808807501221E-5	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.999991926544814	WITHOUT_CLASSIFICATION	8.07345518600903E-6	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9998976412536624	WITHOUT_CLASSIFICATION	1.0235874633764242E-4	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999366701996	WITHOUT_CLASSIFICATION	6.332980042854277E-8	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999996265607236	WITHOUT_CLASSIFICATION	3.734392764143878E-7	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999832831107722	WITHOUT_CLASSIFICATION	1.6716889227730092E-5	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999995465742261	WITHOUT_CLASSIFICATION	4.5342577398996475E-7	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997848895949719	WITHOUT_CLASSIFICATION	2.1511040502817337E-4	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999998818821371	WITHOUT_CLASSIFICATION	1.1811786292919798E-7	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999930349303024	WITHOUT_CLASSIFICATION	6.965069697602481E-6	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999913864981995	WITHOUT_CLASSIFICATION	8.613501800469775E-6	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999971813589866	WITHOUT_CLASSIFICATION	2.818641013432119E-6	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999728858907	WITHOUT_CLASSIFICATION	2.711410929108022E-8	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999125734147	WITHOUT_CLASSIFICATION	8.74265852495719E-8	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9998541787731445	WITHOUT_CLASSIFICATION	1.458212268555926E-4	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999989497262847	WITHOUT_CLASSIFICATION	1.0502737152839462E-6	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999816657227509	WITHOUT_CLASSIFICATION	1.8334277249136966E-5	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999985833722024	WITHOUT_CLASSIFICATION	1.4166277975154277E-6	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999994330913167	WITHOUT_CLASSIFICATION	5.669086832204295E-7	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999994931151047	WITHOUT_CLASSIFICATION	5.068848953451969E-7	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999112104231948	WITHOUT_CLASSIFICATION	8.878957680524873E-5	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.999972615815844	WITHOUT_CLASSIFICATION	2.738418415602413E-5	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999818528018677	WITHOUT_CLASSIFICATION	1.8147198132292688E-5	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999818528018677	WITHOUT_CLASSIFICATION	1.8147198132292688E-5	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999995732522731	WITHOUT_CLASSIFICATION	4.2674772691643193E-7	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999574730429746	WITHOUT_CLASSIFICATION	4.252695702540371E-5	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999999964192683	WITHOUT_CLASSIFICATION	3.5807316996115834E-8	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.999999957431696	WITHOUT_CLASSIFICATION	4.2568303946477085E-8	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999175645733	WITHOUT_CLASSIFICATION	8.243542672549155E-8	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999924829074481	WITHOUT_CLASSIFICATION	7.517092551819341E-6	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999983865124	WITHOUT_CLASSIFICATION	1.6134876083716754E-9	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999986574589544	WITHOUT_CLASSIFICATION	1.3425410456000133E-6	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999977449486634	WITHOUT_CLASSIFICATION	2.2550513365139795E-6	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999995306086292	WITHOUT_CLASSIFICATION	4.693913708593282E-7	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999093644486262	WITHOUT_CLASSIFICATION	9.063555137379452E-5	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.9999802463180688	WITHOUT_CLASSIFICATION	1.9753681931256315E-5	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999949181853713	WITHOUT_CLASSIFICATION	5.081814628718756E-6	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999779415507	WITHOUT_CLASSIFICATION	2.2058449306634856E-8	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999554583594333	WITHOUT_CLASSIFICATION	4.45416405665684E-5	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999876814177	WITHOUT_CLASSIFICATION	1.2318582300490505E-8	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999972002294618	WITHOUT_CLASSIFICATION	2.799770538149791E-6	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999953520356499	WITHOUT_CLASSIFICATION	4.6479643501752925E-6	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999712342416	WITHOUT_CLASSIFICATION	2.8765758382875065E-8	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999995915718851	WITHOUT_CLASSIFICATION	4.084281148163304E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443627920696	WITHOUT_CLASSIFICATION	5.5637207930395215E-5	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999100334157	WITHOUT_CLASSIFICATION	8.996658426318178E-8	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999999900279621	WITHOUT_CLASSIFICATION	9.972037881502731E-9	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999999913600415	WITHOUT_CLASSIFICATION	8.639958504071758E-8	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999958750401688	WITHOUT_CLASSIFICATION	4.124959831115174E-6	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.9995965107045841	WITHOUT_CLASSIFICATION	4.034892954157898E-4	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9990389530480165	WITHOUT_CLASSIFICATION	9.610469519834542E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443627920696	WITHOUT_CLASSIFICATION	5.5637207930395215E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443627920696	WITHOUT_CLASSIFICATION	5.5637207930395215E-5	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999985299069356	WITHOUT_CLASSIFICATION	1.4700930643697343E-6	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999977599315	WITHOUT_CLASSIFICATION	2.2400683650583863E-9	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999999375954048	WITHOUT_CLASSIFICATION	6.240459520443553E-7	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998833371357	WITHOUT_CLASSIFICATION	1.1666286429670094E-7	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999578519650439	WITHOUT_CLASSIFICATION	4.214803495602059E-5	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999993248731329	WITHOUT_CLASSIFICATION	6.75126867110325E-7	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999988456768657	WITHOUT_CLASSIFICATION	1.1543231344055604E-6	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999289785348928	WITHOUT_CLASSIFICATION	7.102146510707882E-5	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.999963961051973	WITHOUT_CLASSIFICATION	3.603894802690189E-5	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999277566929	WITHOUT_CLASSIFICATION	7.224330709845748E-8	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999872477907552	WITHOUT_CLASSIFICATION	1.2752209244788675E-5	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999617403319636	WITHOUT_CLASSIFICATION	3.8259668036399325E-5	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.999992858349856	WITHOUT_CLASSIFICATION	7.141650144031846E-6	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999955189717084	WITHOUT_CLASSIFICATION	4.4810282916977106E-6	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9960680987289013	WITHOUT_CLASSIFICATION	0.003931901271098693	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999976520255277	WITHOUT_CLASSIFICATION	2.347974472310028E-6	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999986029727259	WITHOUT_CLASSIFICATION	1.397027274133553E-6	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999968786787262	WITHOUT_CLASSIFICATION	3.121321273731555E-6	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.999998378373644	WITHOUT_CLASSIFICATION	1.6216263560451945E-6	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991127146429326	WITHOUT_CLASSIFICATION	8.872853570674747E-4	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.9784925121270039	WITHOUT_CLASSIFICATION	0.02150748787299612	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999999192207432	WITHOUT_CLASSIFICATION	8.077925679512201E-7	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999973090024321	WITHOUT_CLASSIFICATION	2.6909975678878764E-6	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998825872656381	WITHOUT_CLASSIFICATION	1.1741273436189923E-4	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999675351814289	WITHOUT_CLASSIFICATION	3.246481857119047E-5	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999525394691038	WITHOUT_CLASSIFICATION	4.746053089627297E-5	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999136715788	WITHOUT_CLASSIFICATION	8.63284212584143E-8	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999734906015492	WITHOUT_CLASSIFICATION	2.650939845084103E-5	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999928005001907	WITHOUT_CLASSIFICATION	7.199499809377377E-6	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.999994141570525	WITHOUT_CLASSIFICATION	5.858429474937877E-6	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999992971036049	WITHOUT_CLASSIFICATION	7.028963950858975E-7	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999958496321557	WITHOUT_CLASSIFICATION	4.1503678443121E-6	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.999998816832112	WITHOUT_CLASSIFICATION	1.1831678879579454E-6	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999982401075375	WITHOUT_CLASSIFICATION	1.7598924625580815E-6	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999976621149519	WITHOUT_CLASSIFICATION	2.3378850482043404E-6	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999861883311	WITHOUT_CLASSIFICATION	1.3811668976537302E-8	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9998781224722167	WITHOUT_CLASSIFICATION	1.2187752778329972E-4	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9995461000935356	WITHOUT_CLASSIFICATION	4.538999064643878E-4	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999998355482747	WITHOUT_CLASSIFICATION	1.6445172534832298E-7	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999995458732	WITHOUT_CLASSIFICATION	4.5412680824682793E-10	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999963578874832	WITHOUT_CLASSIFICATION	3.6421125167112425E-6	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999774860347272	WITHOUT_CLASSIFICATION	2.2513965272799967E-5	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999788707730108	WITHOUT_CLASSIFICATION	2.1129226989158346E-5	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999940068375238	WITHOUT_CLASSIFICATION	5.993162476184432E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999788707730108	WITHOUT_CLASSIFICATION	2.1129226989158346E-5	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.999999848049046	WITHOUT_CLASSIFICATION	1.519509539599236E-7	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999992819083493	WITHOUT_CLASSIFICATION	7.180916506539217E-7	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999963650759176	WITHOUT_CLASSIFICATION	3.6349240825145027E-6	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999996201269253	WITHOUT_CLASSIFICATION	3.7987307457502426E-7	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999697203715	WITHOUT_CLASSIFICATION	3.027962842013032E-8	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999976374343439	WITHOUT_CLASSIFICATION	2.362565656103905E-6	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999999858986929	WITHOUT_CLASSIFICATION	1.410130712210175E-8	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999831523997	WITHOUT_CLASSIFICATION	1.684760041673014E-8	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999999853264689	WITHOUT_CLASSIFICATION	1.4673531105020111E-7	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999977443840801	WITHOUT_CLASSIFICATION	2.25561592001335E-6	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.99999944717625	WITHOUT_CLASSIFICATION	5.528237499838747E-7	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999016188245	WITHOUT_CLASSIFICATION	9.838117549461206E-8	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999231367837	WITHOUT_CLASSIFICATION	7.686321630568345E-8	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9157369576598485	WITHOUT_CLASSIFICATION	0.08426304234015146	IMPLEMENTATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999885673893563	WITHOUT_CLASSIFICATION	1.1432610643669034E-5	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999998932616644	WITHOUT_CLASSIFICATION	1.0673833552618433E-7	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.99999939939619	WITHOUT_CLASSIFICATION	6.006038100102549E-7	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999744353831	WITHOUT_CLASSIFICATION	2.556461690300196E-8	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999469338349	WITHOUT_CLASSIFICATION	5.3066165167661036E-8	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999962064613341	WITHOUT_CLASSIFICATION	3.7935386657975808E-6	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999842987072	WITHOUT_CLASSIFICATION	1.5701292832557776E-8	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999979748381781	WITHOUT_CLASSIFICATION	2.0251618218992644E-6	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.999883588499996	WITHOUT_CLASSIFICATION	1.1641150000392206E-4	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999963890924245	WITHOUT_CLASSIFICATION	3.6109075754070003E-6	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999851255696468	WITHOUT_CLASSIFICATION	1.4874430353309778E-5	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999960992526	WITHOUT_CLASSIFICATION	3.9007473902333885E-9	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999805811175456	WITHOUT_CLASSIFICATION	1.9418882454382383E-5	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.9999950089965474	WITHOUT_CLASSIFICATION	4.99100345264155E-6	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999994328006052	WITHOUT_CLASSIFICATION	5.671993948346494E-7	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999882231040321	WITHOUT_CLASSIFICATION	1.1776895967808614E-5	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.9999936677945583	WITHOUT_CLASSIFICATION	6.332205441649864E-6	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999033249519199	WITHOUT_CLASSIFICATION	9.667504808008368E-5	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999991790667	WITHOUT_CLASSIFICATION	8.209332602812523E-10	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999933375256387	WITHOUT_CLASSIFICATION	6.66247436134872E-6	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9996337134674596	WITHOUT_CLASSIFICATION	3.662865325405245E-4	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.9999782284020965	WITHOUT_CLASSIFICATION	2.177159790354988E-5	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9999948427851484	WITHOUT_CLASSIFICATION	5.157214851683058E-6	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999995553557295	WITHOUT_CLASSIFICATION	4.4464427047944227E-7	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9999713420414483	WITHOUT_CLASSIFICATION	2.8657958551652563E-5	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999354290632	WITHOUT_CLASSIFICATION	6.457093674805996E-8	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.999999892324436	WITHOUT_CLASSIFICATION	1.0767556400739765E-7	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.9999921865474658	WITHOUT_CLASSIFICATION	7.8134525341422E-6	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999998295794372	WITHOUT_CLASSIFICATION	1.704205627967795E-7	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999960992526	WITHOUT_CLASSIFICATION	3.9007473902333885E-9	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.999950132533643	WITHOUT_CLASSIFICATION	4.986746635711724E-5	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999998047648767	WITHOUT_CLASSIFICATION	1.952351232813323E-7	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999940706549327	WITHOUT_CLASSIFICATION	5.929345067275923E-6	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999986764789581	WITHOUT_CLASSIFICATION	1.323521041923571E-6	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.9999860528669379	WITHOUT_CLASSIFICATION	1.394713306215868E-5	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999782990834	WITHOUT_CLASSIFICATION	2.1700916601554686E-8	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999385943241	WITHOUT_CLASSIFICATION	6.140567586849208E-8	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999977983370969	WITHOUT_CLASSIFICATION	2.2016629029912428E-6	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999884459458305	WITHOUT_CLASSIFICATION	1.1554054169510325E-5	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999991350749357	WITHOUT_CLASSIFICATION	8.649250643757449E-7	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.9998559967254735	WITHOUT_CLASSIFICATION	1.4400327452641202E-4	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999992409977991	WITHOUT_CLASSIFICATION	7.590022009493842E-7	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999929153032827	WITHOUT_CLASSIFICATION	7.084696717347343E-6	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999935511258778	WITHOUT_CLASSIFICATION	6.448874122199636E-6	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999805278228	WITHOUT_CLASSIFICATION	1.9472177189898597E-8	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999999967399816	WITHOUT_CLASSIFICATION	3.26001839943996E-8	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999998145091377	WITHOUT_CLASSIFICATION	1.8549086223439716E-7	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999995375380963	WITHOUT_CLASSIFICATION	4.6246190366233545E-7	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999466578341067	WITHOUT_CLASSIFICATION	5.3342165893328404E-5	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.999950132533643	WITHOUT_CLASSIFICATION	4.986746635711724E-5	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999988207776428	WITHOUT_CLASSIFICATION	1.179222357169139E-6	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.99999680264205	WITHOUT_CLASSIFICATION	3.1973579499900103E-6	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999967147026064	WITHOUT_CLASSIFICATION	3.285297393661627E-6	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999991790988239	WITHOUT_CLASSIFICATION	8.209011760195389E-7	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999970201372	WITHOUT_CLASSIFICATION	2.9798628929282156E-9	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.6498983727992785	WITHOUT_CLASSIFICATION	0.3501016272007215	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.6498983727992785	WITHOUT_CLASSIFICATION	0.3501016272007215	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999863311475565	WITHOUT_CLASSIFICATION	1.3668852443452335E-5	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.6498983727992785	WITHOUT_CLASSIFICATION	0.3501016272007215	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.6498983727992785	WITHOUT_CLASSIFICATION	0.3501016272007215	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999361918447652	WITHOUT_CLASSIFICATION	6.380815523477429E-5	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999805070089841	WITHOUT_CLASSIFICATION	1.949299101589698E-5	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999977962939491	WITHOUT_CLASSIFICATION	2.2037060508487426E-6	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999907524978688	WITHOUT_CLASSIFICATION	9.247502131093183E-6	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998008986140882	WITHOUT_CLASSIFICATION	1.9910138591194073E-4	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9968339289400131	WITHOUT_CLASSIFICATION	0.003166071059986935	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9998972683070568	WITHOUT_CLASSIFICATION	1.0273169294313969E-4	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999881364765614	WITHOUT_CLASSIFICATION	1.1863523438627655E-5	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999928889377736	WITHOUT_CLASSIFICATION	7.111062226402844E-6	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999952014086455	WITHOUT_CLASSIFICATION	4.798591354514775E-6	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999980632852841	WITHOUT_CLASSIFICATION	1.93671471603126E-6	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999959823533408	WITHOUT_CLASSIFICATION	4.01764665922116E-6	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999998122781976	WITHOUT_CLASSIFICATION	1.8772180234675185E-7	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999999791324255	WITHOUT_CLASSIFICATION	2.086757449875704E-7	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999999457993344	WITHOUT_CLASSIFICATION	5.420066555787722E-8	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999477018929284	WITHOUT_CLASSIFICATION	5.2298107071494486E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999985234055775	WITHOUT_CLASSIFICATION	1.4765944224708407E-6	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999899199997029	WITHOUT_CLASSIFICATION	1.0080000297195154E-5	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.999927983085843	WITHOUT_CLASSIFICATION	7.201691415695273E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999996021683754	WITHOUT_CLASSIFICATION	3.9783162458143854E-7	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999313733453079	WITHOUT_CLASSIFICATION	6.862665469210286E-5	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.9999715107232995	WITHOUT_CLASSIFICATION	2.8489276700626914E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999985234055775	WITHOUT_CLASSIFICATION	1.4765944224708407E-6	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999805811175456	WITHOUT_CLASSIFICATION	1.9418882454382383E-5	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.9999835993511913	WITHOUT_CLASSIFICATION	1.640064880867157E-5	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999949000310844	WITHOUT_CLASSIFICATION	5.099968915659046E-6	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999975122484935	WITHOUT_CLASSIFICATION	2.4877515064404827E-6	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.9999798936502898	WITHOUT_CLASSIFICATION	2.0106349710233055E-5	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999973293622008	WITHOUT_CLASSIFICATION	2.670637799175476E-6	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.999997828270026	WITHOUT_CLASSIFICATION	2.1717299739359867E-6	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9875015979245053	WITHOUT_CLASSIFICATION	0.012498402075494616	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9998448978116181	WITHOUT_CLASSIFICATION	1.5510218838180672E-4	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999991679356828	WITHOUT_CLASSIFICATION	8.320643171931699E-7	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.9995384575788636	WITHOUT_CLASSIFICATION	4.6154242113634477E-4	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999881823735	WITHOUT_CLASSIFICATION	1.1817626658920865E-8	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999965920032767	WITHOUT_CLASSIFICATION	3.4079967231860117E-6	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999930672260544	WITHOUT_CLASSIFICATION	6.932773945572873E-6	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998768972512254	WITHOUT_CLASSIFICATION	1.2310274877456212E-4	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999098566963	WITHOUT_CLASSIFICATION	9.01433036917185E-8	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999984510532556	WITHOUT_CLASSIFICATION	1.5489467444421964E-6	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9996929278691901	WITHOUT_CLASSIFICATION	3.0707213080998267E-4	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999999996624274	WITHOUT_CLASSIFICATION	3.37572590269186E-9	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999955886088774	WITHOUT_CLASSIFICATION	4.411391122615478E-6	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999979674069358	WITHOUT_CLASSIFICATION	2.032593064226296E-6	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999914186104039	WITHOUT_CLASSIFICATION	8.581389596210322E-6	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999373718018	WITHOUT_CLASSIFICATION	6.262819819925611E-8	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9998448978116181	WITHOUT_CLASSIFICATION	1.5510218838180672E-4	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999988521057493	WITHOUT_CLASSIFICATION	1.1478942506034114E-6	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.9999897823854099	WITHOUT_CLASSIFICATION	1.021761459016656E-5	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999051781215299	WITHOUT_CLASSIFICATION	9.482187847010968E-5	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999715977123111	WITHOUT_CLASSIFICATION	2.8402287688767574E-5	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999901481910675	WITHOUT_CLASSIFICATION	9.851808932538312E-6	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.9999959558416355	WITHOUT_CLASSIFICATION	4.0441583645322885E-6	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.9999860539767242	WITHOUT_CLASSIFICATION	1.3946023275611314E-5	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.9999997953475208	WITHOUT_CLASSIFICATION	2.0465247922665984E-7	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.9999981702961072	WITHOUT_CLASSIFICATION	1.8297038928562071E-6	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.9999906245963902	WITHOUT_CLASSIFICATION	9.375403609753767E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999839003634283	WITHOUT_CLASSIFICATION	1.6099636571778714E-5	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.999991160014947	WITHOUT_CLASSIFICATION	8.839985052958593E-6	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9997681722933751	WITHOUT_CLASSIFICATION	2.3182770662485673E-4	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.999999758983152	WITHOUT_CLASSIFICATION	2.41016848012627E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999980327305457	WITHOUT_CLASSIFICATION	1.967269454351591E-6	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999999515750675	WITHOUT_CLASSIFICATION	4.8424932488822274E-8	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999962131535329	WITHOUT_CLASSIFICATION	3.7868464670173362E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999839003634283	WITHOUT_CLASSIFICATION	1.6099636571778714E-5	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999697965447	WITHOUT_CLASSIFICATION	3.020345523778708E-8	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9996534945825409	WITHOUT_CLASSIFICATION	3.465054174591418E-4	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999927296170829	WITHOUT_CLASSIFICATION	7.270382917190424E-6	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.961418544060141	WITHOUT_CLASSIFICATION	0.03858145593985897	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.9999979223865186	WITHOUT_CLASSIFICATION	2.077613481384231E-6	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999995584715096	WITHOUT_CLASSIFICATION	4.4152849035929056E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999980327305457	WITHOUT_CLASSIFICATION	1.967269454351591E-6	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999959960980852	WITHOUT_CLASSIFICATION	4.003901914760855E-6	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999664133733702	WITHOUT_CLASSIFICATION	3.358662662977682E-5	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984798105632	WITHOUT_CLASSIFICATION	1.520189436750183E-6	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994575289173724	WITHOUT_CLASSIFICATION	5.424710826276531E-4	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.7713827709427705	WITHOUT_CLASSIFICATION	0.22861722905722956	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9298157148898762	WITHOUT_CLASSIFICATION	0.07018428511012373	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999942053114911	WITHOUT_CLASSIFICATION	5.7946885089578105E-6	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999942053114911	WITHOUT_CLASSIFICATION	5.7946885089578105E-6	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999998856862581	WITHOUT_CLASSIFICATION	1.1431374180161238E-7	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999783104715884	WITHOUT_CLASSIFICATION	2.1689528411664717E-5	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.99999802440971	WITHOUT_CLASSIFICATION	1.9755902900271973E-6	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.9999961291738007	WITHOUT_CLASSIFICATION	3.870826199372433E-6	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999386679899361	WITHOUT_CLASSIFICATION	6.133201006381929E-5	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999750903731623	WITHOUT_CLASSIFICATION	2.4909626837759418E-5	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999603386181475	WITHOUT_CLASSIFICATION	3.966138185248677E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994559586372134	WITHOUT_CLASSIFICATION	5.440413627866158E-4	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999994303205547	WITHOUT_CLASSIFICATION	5.696794451758657E-7	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973672433257	WITHOUT_CLASSIFICATION	2.632756674470267E-6	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999750903731623	WITHOUT_CLASSIFICATION	2.4909626837759418E-5	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999603386181475	WITHOUT_CLASSIFICATION	3.966138185248677E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994559586372134	WITHOUT_CLASSIFICATION	5.440413627866158E-4	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.9999946527837467	WITHOUT_CLASSIFICATION	5.347216253391779E-6	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.9999570760803272	WITHOUT_CLASSIFICATION	4.2923919672857606E-5	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999936730025	WITHOUT_CLASSIFICATION	6.32699756373053E-9	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999991980053603	WITHOUT_CLASSIFICATION	8.019946397001832E-7	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999996625134783	WITHOUT_CLASSIFICATION	3.3748652179972136E-7	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999998487756822	WITHOUT_CLASSIFICATION	1.5122431789904518E-7	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999991584555963	WITHOUT_CLASSIFICATION	8.415444036816552E-7	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.9999996647376211	WITHOUT_CLASSIFICATION	3.3526237877571213E-7	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9999896125286805	WITHOUT_CLASSIFICATION	1.0387471319642662E-5	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999999457248953	WITHOUT_CLASSIFICATION	5.427510469797767E-7	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999993702847625	WITHOUT_CLASSIFICATION	6.297152374466309E-7	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999853857524826	WITHOUT_CLASSIFICATION	1.4614247517419588E-5	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999982014957965	WITHOUT_CLASSIFICATION	1.7985042033435309E-6	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999997208382048	WITHOUT_CLASSIFICATION	2.7916179528400683E-7	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999991043481298	WITHOUT_CLASSIFICATION	8.956518700750665E-7	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999999668382208	WITHOUT_CLASSIFICATION	3.316177931353455E-8	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9998560666281258	WITHOUT_CLASSIFICATION	1.439333718742573E-4	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999440128788176	WITHOUT_CLASSIFICATION	5.598712118250048E-5	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999947454050682	WITHOUT_CLASSIFICATION	5.254594931809152E-6	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999835678481792	WITHOUT_CLASSIFICATION	1.6432151820740314E-5	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999970461733	WITHOUT_CLASSIFICATION	2.953826699491331E-9	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999964960482003	WITHOUT_CLASSIFICATION	3.50395179983231E-6	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999869202661	WITHOUT_CLASSIFICATION	1.3079733755530434E-8	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999157128372	WITHOUT_CLASSIFICATION	8.428716286423027E-8	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999999996121094	WITHOUT_CLASSIFICATION	3.87890580466637E-10	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999005479173503	WITHOUT_CLASSIFICATION	9.945208264974585E-5	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999711481552989	WITHOUT_CLASSIFICATION	2.885184470118718E-5	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998680053477983	WITHOUT_CLASSIFICATION	1.3199465220162612E-4	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999430274762	WITHOUT_CLASSIFICATION	5.697252374170402E-8	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999743254637797	WITHOUT_CLASSIFICATION	2.567453622025629E-5	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999972728850836	WITHOUT_CLASSIFICATION	2.7271149163901056E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999633559431534	WITHOUT_CLASSIFICATION	3.6644056846499686E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999633559431534	WITHOUT_CLASSIFICATION	3.6644056846499686E-5	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999996840955	WITHOUT_CLASSIFICATION	3.159045338042324E-10	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999315243631173	WITHOUT_CLASSIFICATION	6.847563688269469E-5	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9994935211281278	WITHOUT_CLASSIFICATION	5.064788718721639E-4	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9998253123393838	WITHOUT_CLASSIFICATION	1.7468766061625666E-4	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9998849859390742	WITHOUT_CLASSIFICATION	1.1501406092579035E-4	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999980733889	WITHOUT_CLASSIFICATION	1.9266111263173833E-9	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.9999714687590766	WITHOUT_CLASSIFICATION	2.853124092333277E-5	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.9999537592345789	WITHOUT_CLASSIFICATION	4.624076542108008E-5	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999942058117792	WITHOUT_CLASSIFICATION	5.794188220825803E-6	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992432769589	WITHOUT_CLASSIFICATION	7.567230411986208E-7	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999068851775	WITHOUT_CLASSIFICATION	9.311482248781503E-7	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997501321586	WITHOUT_CLASSIFICATION	2.4986784146439323E-7	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999913280001037	WITHOUT_CLASSIFICATION	8.671999896267328E-6	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999572418662	WITHOUT_CLASSIFICATION	4.27581337952522E-7	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991131222977	WITHOUT_CLASSIFICATION	8.868777022802007E-7	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993738921269	WITHOUT_CLASSIFICATION	6.26107873079161E-7	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989667137402	WITHOUT_CLASSIFICATION	1.0332862597002647E-6	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995895884321	WITHOUT_CLASSIFICATION	4.104115679052931E-6	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909594761724	WITHOUT_CLASSIFICATION	9.04052382749421E-6	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975848361545	WITHOUT_CLASSIFICATION	2.4151638453536462E-6	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999881398761769	WITHOUT_CLASSIFICATION	1.1860123823149269E-5	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999880123972029	WITHOUT_CLASSIFICATION	1.1987602797103468E-5	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999995287135215	WITHOUT_CLASSIFICATION	4.7128647850574835E-7	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999993606418394	WITHOUT_CLASSIFICATION	6.393581606992644E-7	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999959937195311	WITHOUT_CLASSIFICATION	4.006280468944349E-6	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.9983903160650078	WITHOUT_CLASSIFICATION	0.0016096839349921705	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999981461983238	WITHOUT_CLASSIFICATION	1.8538016761067243E-6	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9997131588352273	WITHOUT_CLASSIFICATION	2.868411647727418E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999995287135215	WITHOUT_CLASSIFICATION	4.7128647850574835E-7	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999995287135215	WITHOUT_CLASSIFICATION	4.7128647850574835E-7	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999597735492611	WITHOUT_CLASSIFICATION	4.022645073897372E-5	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999949387357931	WITHOUT_CLASSIFICATION	5.061264206882491E-6	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999939962398504	WITHOUT_CLASSIFICATION	6.0037601495703075E-6	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999946155815143	WITHOUT_CLASSIFICATION	5.384418485702156E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999425027222143	WITHOUT_CLASSIFICATION	5.749727778577183E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999835678481792	WITHOUT_CLASSIFICATION	1.6432151820740314E-5	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999972968711818	WITHOUT_CLASSIFICATION	2.7031288182882616E-6	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999964753068125	WITHOUT_CLASSIFICATION	3.524693187467762E-6	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999999438564565	WITHOUT_CLASSIFICATION	5.6143543490414004E-8	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983138960223	WITHOUT_CLASSIFICATION	1.6861039777500038E-6	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9993743181282334	WITHOUT_CLASSIFICATION	6.256818717666331E-4	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925809645591	WITHOUT_CLASSIFICATION	7.4190354408462285E-6	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998680097657294	WITHOUT_CLASSIFICATION	1.319902342705924E-4	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998680097657294	WITHOUT_CLASSIFICATION	1.319902342705924E-4	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999985234399078	WITHOUT_CLASSIFICATION	1.4765600922062134E-5	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999985234399078	WITHOUT_CLASSIFICATION	1.4765600922062134E-5	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9967648540182323	WITHOUT_CLASSIFICATION	0.0032351459817676225	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973486757254	WITHOUT_CLASSIFICATION	2.651324274482925E-6	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999294012716	WITHOUT_CLASSIFICATION	7.059872841636269E-8	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99833379516054	WITHOUT_CLASSIFICATION	0.0016662048394600316	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9980783638236271	WITHOUT_CLASSIFICATION	0.0019216361763727922	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999957439315237	WITHOUT_CLASSIFICATION	4.256068476321855E-6	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999242098463094	WITHOUT_CLASSIFICATION	7.579015369066523E-5	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994850927603	WITHOUT_CLASSIFICATION	5.14907239750076E-7	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999996905205227	WITHOUT_CLASSIFICATION	3.094794772549452E-7	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.999999533777278	WITHOUT_CLASSIFICATION	4.662227219939907E-7	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999894657876	WITHOUT_CLASSIFICATION	1.0534212353857698E-8	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999889977794181	WITHOUT_CLASSIFICATION	1.1002220581782389E-5	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999626754994468	WITHOUT_CLASSIFICATION	3.732450055314335E-5	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9997649284241631	WITHOUT_CLASSIFICATION	2.3507157583684324E-4	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999973637694182	WITHOUT_CLASSIFICATION	2.6362305818490274E-6	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999894339783082	WITHOUT_CLASSIFICATION	1.0566021691795753E-5	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999894339783082	WITHOUT_CLASSIFICATION	1.0566021691795753E-5	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999894339783082	WITHOUT_CLASSIFICATION	1.0566021691795753E-5	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999578296314837	WITHOUT_CLASSIFICATION	4.21703685163616E-5	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.9999967694346449	WITHOUT_CLASSIFICATION	3.2305653552173917E-6	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999999995902982	WITHOUT_CLASSIFICATION	4.097017990720484E-9	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999848920583677	WITHOUT_CLASSIFICATION	1.510794163228682E-4	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981498309675287	WITHOUT_CLASSIFICATION	0.0018501690324713676	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964440501944587	WITHOUT_CLASSIFICATION	0.0035559498055413494	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999969240987803	WITHOUT_CLASSIFICATION	3.0759012196638463E-6	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.5588541810174218	WITHOUT_CLASSIFICATION	0.4411458189825782	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999861412681721	WITHOUT_CLASSIFICATION	1.385873182790919E-5	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999957692623514	WITHOUT_CLASSIFICATION	4.230737648599122E-5	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999998671232609	WITHOUT_CLASSIFICATION	1.3287673907035407E-7	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9990072582822302	WITHOUT_CLASSIFICATION	9.927417177698142E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929932329487	WITHOUT_CLASSIFICATION	7.006767051306302E-6	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999997281943986	WITHOUT_CLASSIFICATION	2.71805601357324E-7	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9997771829775987	WITHOUT_CLASSIFICATION	2.22817022401361E-4	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999999116948972	WITHOUT_CLASSIFICATION	8.830510278212205E-8	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999986449285795	WITHOUT_CLASSIFICATION	1.355071420590875E-6	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999686238328004	WITHOUT_CLASSIFICATION	3.1376167199674135E-5	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999343170523122	WITHOUT_CLASSIFICATION	6.568294768792297E-5	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999716718284143	WITHOUT_CLASSIFICATION	2.832817158562975E-5	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999832900365	WITHOUT_CLASSIFICATION	1.6709963621314287E-8	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999990700944423	WITHOUT_CLASSIFICATION	9.299055577105262E-7	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999748807800443	WITHOUT_CLASSIFICATION	2.5119219955660112E-5	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999987906623153	WITHOUT_CLASSIFICATION	1.2093376846714963E-6	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9992307524517431	WITHOUT_CLASSIFICATION	7.692475482569515E-4	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9998709959277451	WITHOUT_CLASSIFICATION	1.290040722548209E-4	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999996580614708	WITHOUT_CLASSIFICATION	3.4193852910529563E-7	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.9999945297411346	WITHOUT_CLASSIFICATION	5.4702588653538295E-6	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999986057396	WITHOUT_CLASSIFICATION	1.394260387550224E-9	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999998867114812	WITHOUT_CLASSIFICATION	1.1328851882481932E-7	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9996050877209439	WITHOUT_CLASSIFICATION	3.949122790560666E-4	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999825285571112	WITHOUT_CLASSIFICATION	1.7471442888738862E-5	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999984030957347	WITHOUT_CLASSIFICATION	1.5969042653197933E-6	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9921579341819278	WITHOUT_CLASSIFICATION	0.00784206581807227	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999979638848451	WITHOUT_CLASSIFICATION	2.0361151549279297E-6	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999655133661419	WITHOUT_CLASSIFICATION	3.448663385804784E-5	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999961697910227	WITHOUT_CLASSIFICATION	3.830208977359483E-6	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.9999759414445591	WITHOUT_CLASSIFICATION	2.4058555440852474E-5	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999932298130251	WITHOUT_CLASSIFICATION	6.770186974956494E-6	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.9999667238165487	WITHOUT_CLASSIFICATION	3.3276183451183726E-5	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999960426792608	WITHOUT_CLASSIFICATION	3.957320739153202E-6	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999999803912386	WITHOUT_CLASSIFICATION	1.9608761321531616E-8	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.6026243093226613	IMPLEMENTATION	0.39737569067733863	WITHOUT_CLASSIFICATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9989806550470668	WITHOUT_CLASSIFICATION	0.0010193449529333097	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999968786045852	WITHOUT_CLASSIFICATION	3.1213954146711275E-6	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999952870309552	WITHOUT_CLASSIFICATION	4.7129690448267E-6	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.9999996378688811	WITHOUT_CLASSIFICATION	3.621311188272572E-7	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999997783928453	WITHOUT_CLASSIFICATION	2.216071548722595E-7	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999310455787066	WITHOUT_CLASSIFICATION	6.895442129333688E-5	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999981601787757	WITHOUT_CLASSIFICATION	1.8398212242714614E-6	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999833651958756	WITHOUT_CLASSIFICATION	1.6634804124498935E-5	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9997331027993696	WITHOUT_CLASSIFICATION	2.6689720063042947E-4	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.99992528384068	WITHOUT_CLASSIFICATION	7.471615931997766E-5	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998384074158259	WITHOUT_CLASSIFICATION	1.6159258417411198E-4	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998488381284846	WITHOUT_CLASSIFICATION	1.5116187151545737E-4	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.9999737661495921	WITHOUT_CLASSIFICATION	2.6233850407912903E-5	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9996178023321399	WITHOUT_CLASSIFICATION	3.821976678600693E-4	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.9999975820682009	WITHOUT_CLASSIFICATION	2.4179317992301003E-6	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999998678772002	WITHOUT_CLASSIFICATION	1.3212279976539523E-7	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999080272554077	WITHOUT_CLASSIFICATION	9.19727445923273E-5	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999993500618589	WITHOUT_CLASSIFICATION	6.499381411587786E-7	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999999034183025	WITHOUT_CLASSIFICATION	9.658169748649903E-7	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.999999997650778	WITHOUT_CLASSIFICATION	2.3492220123686246E-9	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999998679120471	WITHOUT_CLASSIFICATION	1.320879528511611E-7	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999342792628	WITHOUT_CLASSIFICATION	6.572073717688811E-8	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999949373218113	WITHOUT_CLASSIFICATION	5.062678188643942E-6	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999999965146904	WITHOUT_CLASSIFICATION	3.4853095966658175E-8	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999993494186047	WITHOUT_CLASSIFICATION	6.505813953904064E-7	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999847875702469	WITHOUT_CLASSIFICATION	1.5212429753087592E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999847875702469	WITHOUT_CLASSIFICATION	1.5212429753087592E-4	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999998625360769	WITHOUT_CLASSIFICATION	1.3746392324108157E-7	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999982371681566	WITHOUT_CLASSIFICATION	1.7628318433965462E-6	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999760955267	WITHOUT_CLASSIFICATION	2.3904473333005473E-8	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999998998598009	WITHOUT_CLASSIFICATION	1.0014019913814681E-7	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999788876215004	WITHOUT_CLASSIFICATION	2.1112378499464132E-5	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999090245410487	WITHOUT_CLASSIFICATION	9.097545895132927E-5	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999182364988	WITHOUT_CLASSIFICATION	8.176350116060526E-8	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999994873252613	WITHOUT_CLASSIFICATION	5.126747386886125E-7	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999922582203167	WITHOUT_CLASSIFICATION	7.741779683253576E-6	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.999999579961487	WITHOUT_CLASSIFICATION	4.2003851304351383E-7	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999914489934938	WITHOUT_CLASSIFICATION	8.55100650619492E-6	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999947234776934	WITHOUT_CLASSIFICATION	5.2765223066273325E-6	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.9999995653744596	WITHOUT_CLASSIFICATION	4.346255404051041E-7	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999997739495777	WITHOUT_CLASSIFICATION	2.2605042231398398E-7	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999994551578115	WITHOUT_CLASSIFICATION	5.448421884505506E-7	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9920214871768	WITHOUT_CLASSIFICATION	0.007978512823199916	IMPLEMENTATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999981540614548	WITHOUT_CLASSIFICATION	1.8459385452181783E-6	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9962134950677421	WITHOUT_CLASSIFICATION	0.003786504932257794	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.6095333073828295	WITHOUT_CLASSIFICATION	0.39046669261717043	IMPLEMENTATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999850280756512	WITHOUT_CLASSIFICATION	1.4971924348819493E-5	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9999969012477905	WITHOUT_CLASSIFICATION	3.0987522095666897E-6	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999858186991802	WITHOUT_CLASSIFICATION	1.4181300819696969E-5	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999988824469461	WITHOUT_CLASSIFICATION	1.1175530538847246E-6	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9989148033580648	WITHOUT_CLASSIFICATION	0.0010851966419352314	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999998747697693	WITHOUT_CLASSIFICATION	1.2523023069638E-6	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.9999910924437059	WITHOUT_CLASSIFICATION	8.907556294150687E-6	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.99999802861059	WITHOUT_CLASSIFICATION	1.9713894099702783E-6	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999998751179525	WITHOUT_CLASSIFICATION	1.2488204738233763E-7	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999904006991066	WITHOUT_CLASSIFICATION	9.599300893337089E-6	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9998751767343018	WITHOUT_CLASSIFICATION	1.248232656982731E-4	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999986849862375	WITHOUT_CLASSIFICATION	1.3150137626096452E-6	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999582412967757	WITHOUT_CLASSIFICATION	4.1758703224348554E-5	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.9999991724298559	WITHOUT_CLASSIFICATION	8.275701440955408E-7	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.9999346825686695	WITHOUT_CLASSIFICATION	6.531743133046323E-5	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9993683419075677	WITHOUT_CLASSIFICATION	6.316580924322375E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9993683419075677	WITHOUT_CLASSIFICATION	6.316580924322375E-4	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999460212603615	WITHOUT_CLASSIFICATION	5.397873963849005E-5	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9998610345431046	WITHOUT_CLASSIFICATION	1.3896545689538194E-4	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999999858230803	WITHOUT_CLASSIFICATION	1.4176919642536095E-8	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999984132598929	WITHOUT_CLASSIFICATION	1.5867401070883007E-6	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.999998857974354	WITHOUT_CLASSIFICATION	1.1420256460297665E-6	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999989239357201	WITHOUT_CLASSIFICATION	1.076064279977152E-6	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999974972217998	WITHOUT_CLASSIFICATION	2.50277820020559E-6	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999991933388376	WITHOUT_CLASSIFICATION	8.06661162388733E-7	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999977584751042	WITHOUT_CLASSIFICATION	2.2415248958052364E-6	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998009031014473	WITHOUT_CLASSIFICATION	1.990968985526358E-4	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999991247954422	WITHOUT_CLASSIFICATION	8.752045578433569E-7	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999903871316543	WITHOUT_CLASSIFICATION	9.612868345692164E-6	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999571473442013	WITHOUT_CLASSIFICATION	4.28526557987107E-5	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999937523286	WITHOUT_CLASSIFICATION	6.247671485433611E-9	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999900656141474	WITHOUT_CLASSIFICATION	9.934385852493814E-6	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999456850767908	WITHOUT_CLASSIFICATION	5.431492320916494E-5	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.7410846577669865	WITHOUT_CLASSIFICATION	0.2589153422330136	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.7410846577669865	WITHOUT_CLASSIFICATION	0.2589153422330136	IMPLEMENTATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999941049292301	WITHOUT_CLASSIFICATION	5.895070769858277E-6	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999958556414408	WITHOUT_CLASSIFICATION	4.1443585592178075E-6	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.99999326934099	WITHOUT_CLASSIFICATION	6.730659010094331E-6	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999293625504	WITHOUT_CLASSIFICATION	7.063744955645676E-8	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999830629544157	WITHOUT_CLASSIFICATION	1.6937045584268393E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999889977794181	WITHOUT_CLASSIFICATION	1.1002220581782389E-5	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999769462124068	WITHOUT_CLASSIFICATION	2.305378759318905E-4	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999997852162851	WITHOUT_CLASSIFICATION	2.147837148126085E-7	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999957186592826	WITHOUT_CLASSIFICATION	4.2813407174115845E-6	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999992009000314	WITHOUT_CLASSIFICATION	7.990999687892944E-7	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9999860336985155	WITHOUT_CLASSIFICATION	1.3966301484456108E-5	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9999860336985155	WITHOUT_CLASSIFICATION	1.3966301484456108E-5	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9998764877230507	WITHOUT_CLASSIFICATION	1.235122769491886E-4	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999908637219335	WITHOUT_CLASSIFICATION	9.136278066608126E-6	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999963776890185	WITHOUT_CLASSIFICATION	3.6223109815576996E-6	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999990744420676	WITHOUT_CLASSIFICATION	9.255579323933392E-7	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999787449830652	WITHOUT_CLASSIFICATION	2.125501693482938E-5	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999851349775	WITHOUT_CLASSIFICATION	1.4865022604361758E-8	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999998118966201	WITHOUT_CLASSIFICATION	1.8810337976783542E-7	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998851042611759	WITHOUT_CLASSIFICATION	1.1489573882413961E-4	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9995969559119622	WITHOUT_CLASSIFICATION	4.030440880378432E-4	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999768407282886	WITHOUT_CLASSIFICATION	2.3159271711378514E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999959734219372	WITHOUT_CLASSIFICATION	4.026578062709842E-6	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9995894878672945	WITHOUT_CLASSIFICATION	4.1051213270546573E-4	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999835816754695	WITHOUT_CLASSIFICATION	1.6418324530502964E-4	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999950032499532	WITHOUT_CLASSIFICATION	4.996750046732807E-6	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999210473136916	WITHOUT_CLASSIFICATION	7.895268630842941E-5	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999964077715752	WITHOUT_CLASSIFICATION	3.5922284247950466E-6	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999999375954048	WITHOUT_CLASSIFICATION	6.240459520443553E-7	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999980327394	WITHOUT_CLASSIFICATION	1.967260600448067E-9	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999999964182456	WITHOUT_CLASSIFICATION	3.581754402221496E-8	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.9999975003182707	WITHOUT_CLASSIFICATION	2.4996817293158756E-6	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999997911819568	WITHOUT_CLASSIFICATION	2.088180433296971E-7	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9987688203870253	WITHOUT_CLASSIFICATION	0.0012311796129746342	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999995155522575	WITHOUT_CLASSIFICATION	4.844477423861672E-7	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999897328443144	WITHOUT_CLASSIFICATION	1.0267155685603493E-5	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999981733710798	WITHOUT_CLASSIFICATION	1.8266289203547176E-6	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999778588773359	WITHOUT_CLASSIFICATION	2.2141122664086008E-5	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999991968048483	WITHOUT_CLASSIFICATION	8.03195151732538E-7	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9998169274014068	WITHOUT_CLASSIFICATION	1.830725985931312E-4	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.6213556467556969	WITHOUT_CLASSIFICATION	0.3786443532443031	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999922377377749	WITHOUT_CLASSIFICATION	7.762262225143007E-6	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9951261010409774	WITHOUT_CLASSIFICATION	0.004873898959022589	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999982761420604	WITHOUT_CLASSIFICATION	1.723857939725486E-6	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9997745164169024	WITHOUT_CLASSIFICATION	2.254835830975311E-4	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9999987506043398	WITHOUT_CLASSIFICATION	1.249395660140561E-6	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999998430890777	WITHOUT_CLASSIFICATION	1.5691092232233262E-7	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999982112493312	WITHOUT_CLASSIFICATION	1.7887506687546313E-6	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999890334013954	WITHOUT_CLASSIFICATION	1.0966598604681822E-5	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999915885478151	WITHOUT_CLASSIFICATION	8.411452184910519E-6	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999992641376668	WITHOUT_CLASSIFICATION	7.358623331005125E-7	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999992641376668	WITHOUT_CLASSIFICATION	7.358623331005125E-7	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.999999701171555	WITHOUT_CLASSIFICATION	2.988284449558308E-7	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998252841408	WITHOUT_CLASSIFICATION	1.747158591075946E-7	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999992407274935	WITHOUT_CLASSIFICATION	7.592725064648214E-7	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.9999690882151282	WITHOUT_CLASSIFICATION	3.09117848717646E-5	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999706500902014	WITHOUT_CLASSIFICATION	2.9349909798672736E-5	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999757052407	WITHOUT_CLASSIFICATION	2.42947592737415E-8	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999472301	WITHOUT_CLASSIFICATION	5.277003851801474E-11	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999792183167827	WITHOUT_CLASSIFICATION	2.0781683217262404E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.999999701171555	WITHOUT_CLASSIFICATION	2.988284449558308E-7	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998252841408	WITHOUT_CLASSIFICATION	1.747158591075946E-7	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.999972335628646	WITHOUT_CLASSIFICATION	2.7664371354071986E-5	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.998461818257634	WITHOUT_CLASSIFICATION	0.0015381817423659387	IMPLEMENTATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999336988498	WITHOUT_CLASSIFICATION	6.630115025767603E-8	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9991308070890761	WITHOUT_CLASSIFICATION	8.691929109238689E-4	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999591459259392	WITHOUT_CLASSIFICATION	4.085407406086174E-5	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999966226226221	WITHOUT_CLASSIFICATION	3.3773773779106837E-6	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999790532345004	WITHOUT_CLASSIFICATION	2.094676549963336E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9998271121013276	WITHOUT_CLASSIFICATION	1.7288789867247965E-4	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999789311023052	WITHOUT_CLASSIFICATION	2.106889769477959E-5	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7584845369579163	WITHOUT_CLASSIFICATION	0.24151546304208366	IMPLEMENTATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999998926238	WITHOUT_CLASSIFICATION	1.0737622300389971E-10	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7584845369579163	WITHOUT_CLASSIFICATION	0.24151546304208366	IMPLEMENTATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999191786008	WITHOUT_CLASSIFICATION	8.082139918874864E-8	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999989412599022	WITHOUT_CLASSIFICATION	1.0587400978377855E-6	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999997525482922	WITHOUT_CLASSIFICATION	2.474517077682524E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998785025760505	WITHOUT_CLASSIFICATION	1.2149742394943978E-4	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999766917945982	WITHOUT_CLASSIFICATION	2.3308205401806825E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9998271121013276	WITHOUT_CLASSIFICATION	1.7288789867247965E-4	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9998271121013276	WITHOUT_CLASSIFICATION	1.7288789867247965E-4	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999998660831958	WITHOUT_CLASSIFICATION	1.3391680423292424E-7	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999997757016955	WITHOUT_CLASSIFICATION	2.2429830451223355E-7	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999936767220957	WITHOUT_CLASSIFICATION	6.323277904297009E-6	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999891000587358	WITHOUT_CLASSIFICATION	1.0899941264362353E-5	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999856676865945	WITHOUT_CLASSIFICATION	1.4332313405587961E-5	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999999841533614	WITHOUT_CLASSIFICATION	1.584663859922172E-7	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9328878344528941	WITHOUT_CLASSIFICATION	0.06711216554710588	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.999998780098128	WITHOUT_CLASSIFICATION	1.2199018719058275E-6	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999992056664164	WITHOUT_CLASSIFICATION	7.943335836254309E-7	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9997328177203558	WITHOUT_CLASSIFICATION	2.6718227964421146E-4	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.9999913201243062	WITHOUT_CLASSIFICATION	8.679875693705186E-6	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.9999989898156041	WITHOUT_CLASSIFICATION	1.010184395943169E-6	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999954915976437	WITHOUT_CLASSIFICATION	4.508402356236335E-6	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.9999128480928605	WITHOUT_CLASSIFICATION	8.715190713941197E-5	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9999995766392459	WITHOUT_CLASSIFICATION	4.233607541021945E-7	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999299679459036	WITHOUT_CLASSIFICATION	7.003205409635128E-5	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999077446209578	WITHOUT_CLASSIFICATION	9.225537904222274E-5	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999864624707471	WITHOUT_CLASSIFICATION	1.3537529252875682E-5	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998634205626129	WITHOUT_CLASSIFICATION	1.3657943738699816E-4	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999151006205	WITHOUT_CLASSIFICATION	8.489937952316771E-8	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9999709799611426	WITHOUT_CLASSIFICATION	2.9020038857389755E-5	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999624599181889	WITHOUT_CLASSIFICATION	3.7540081811093524E-4	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999476028192807	WITHOUT_CLASSIFICATION	5.239718071930677E-5	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9936710328811998	WITHOUT_CLASSIFICATION	0.006328967118800166	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999257373897833	WITHOUT_CLASSIFICATION	7.426261021675633E-5	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998972792979294	WITHOUT_CLASSIFICATION	1.0272070207060907E-4	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.999987499219946	WITHOUT_CLASSIFICATION	1.2500780053998687E-5	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999981157408476	WITHOUT_CLASSIFICATION	1.8842591523863791E-6	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.8858757045808708	WITHOUT_CLASSIFICATION	0.1141242954191292	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999804522071631	WITHOUT_CLASSIFICATION	1.954779283692205E-5	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999699921426949	WITHOUT_CLASSIFICATION	3.000785730507202E-5	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9847672092433609	WITHOUT_CLASSIFICATION	0.015232790756638985	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999705765431188	WITHOUT_CLASSIFICATION	2.9423456881198313E-5	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.999998780098128	WITHOUT_CLASSIFICATION	1.2199018719058275E-6	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999798285042726	WITHOUT_CLASSIFICATION	2.017149572733383E-5	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.9987443294681855	WITHOUT_CLASSIFICATION	0.0012556705318145305	IMPLEMENTATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9958778260067401	WITHOUT_CLASSIFICATION	0.004122173993259883	IMPLEMENTATION
an assertion	WITHOUT_CLASSIFICATION	0.9999997431974988	WITHOUT_CLASSIFICATION	2.5680250118421684E-7	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9989199226669677	WITHOUT_CLASSIFICATION	0.0010800773330322765	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.9999648206324864	WITHOUT_CLASSIFICATION	3.517936751370934E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999891000587358	WITHOUT_CLASSIFICATION	1.0899941264362353E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999891000587358	WITHOUT_CLASSIFICATION	1.0899941264362353E-5	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9997508537455021	WITHOUT_CLASSIFICATION	2.491462544978449E-4	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999173020523835	WITHOUT_CLASSIFICATION	8.269794761649573E-5	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.9999824333006806	WITHOUT_CLASSIFICATION	1.756669931936037E-5	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999020829457403	WITHOUT_CLASSIFICATION	9.791705425960498E-5	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9369019738550076	WITHOUT_CLASSIFICATION	0.06309802614499245	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999996120053302	WITHOUT_CLASSIFICATION	3.879946697730624E-7	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.999949997676022	WITHOUT_CLASSIFICATION	5.000232397793473E-5	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999997703635963	WITHOUT_CLASSIFICATION	2.2963640363457311E-7	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999995870169492	WITHOUT_CLASSIFICATION	4.129830506570762E-7	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9997951114886616	WITHOUT_CLASSIFICATION	2.0488851133837477E-4	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998750932152	WITHOUT_CLASSIFICATION	1.2490678476724255E-7	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999999163232598	WITHOUT_CLASSIFICATION	8.36767402018257E-7	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999273421715152	WITHOUT_CLASSIFICATION	7.265782848471279E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.999999701171555	WITHOUT_CLASSIFICATION	2.988284449558308E-7	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998750932152	WITHOUT_CLASSIFICATION	1.2490678476724255E-7	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.99999785655611	WITHOUT_CLASSIFICATION	2.143443890071589E-6	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999937713610304	WITHOUT_CLASSIFICATION	6.228638969583716E-6	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999979887106547	WITHOUT_CLASSIFICATION	2.0112893452149104E-6	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.8994186792031519	IMPLEMENTATION	0.10058132079684817	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999273421715152	WITHOUT_CLASSIFICATION	7.265782848471279E-5	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999881833139	WITHOUT_CLASSIFICATION	1.181668607019202E-8	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999850285549	WITHOUT_CLASSIFICATION	1.49714449979069E-8	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996682701434	WITHOUT_CLASSIFICATION	3.3172985661406837E-7	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999999996698	WITHOUT_CLASSIFICATION	3.3018148776545496E-13	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9998802156186161	WITHOUT_CLASSIFICATION	1.1978438138396441E-4	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999991207994248	WITHOUT_CLASSIFICATION	8.792005753034577E-7	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.999999978502454	WITHOUT_CLASSIFICATION	2.149754594121808E-8	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999316680101887	WITHOUT_CLASSIFICATION	6.833198981123668E-5	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999812370371558	WITHOUT_CLASSIFICATION	1.8762962844207312E-5	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999969195533559	WITHOUT_CLASSIFICATION	3.0804466441882365E-6	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999998709974071	WITHOUT_CLASSIFICATION	1.2900259296248003E-7	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999553710251579	WITHOUT_CLASSIFICATION	4.462897484202049E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998750932152	WITHOUT_CLASSIFICATION	1.2490678476724255E-7	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999881833139	WITHOUT_CLASSIFICATION	1.181668607019202E-8	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996682701434	WITHOUT_CLASSIFICATION	3.3172985661406837E-7	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999956378612181	WITHOUT_CLASSIFICATION	4.3621387818008935E-6	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999862693417353	WITHOUT_CLASSIFICATION	1.3730658264669045E-5	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.9999997306511259	WITHOUT_CLASSIFICATION	2.6934887407337937E-7	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999273421715152	WITHOUT_CLASSIFICATION	7.265782848471279E-5	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999983203859047	WITHOUT_CLASSIFICATION	1.6796140952675372E-6	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999527684599759	WITHOUT_CLASSIFICATION	4.723154002401707E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998658150031663	WITHOUT_CLASSIFICATION	1.3418499683360386E-4	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.99992213083606	WITHOUT_CLASSIFICATION	7.786916394005185E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999316680101887	WITHOUT_CLASSIFICATION	6.833198981123668E-5	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.99999785655611	WITHOUT_CLASSIFICATION	2.143443890071589E-6	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.9999068393304293	WITHOUT_CLASSIFICATION	9.3160669570643E-5	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999998344060742	WITHOUT_CLASSIFICATION	1.6559392578903587E-7	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999928511488071	WITHOUT_CLASSIFICATION	7.148851192935799E-6	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.999986613554077	WITHOUT_CLASSIFICATION	1.3386445922963641E-5	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9942793924461129	WITHOUT_CLASSIFICATION	0.005720607553887201	IMPLEMENTATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9998011958227713	WITHOUT_CLASSIFICATION	1.9880417722870894E-4	IMPLEMENTATION
render the SQL	WITHOUT_CLASSIFICATION	0.9998966989326395	WITHOUT_CLASSIFICATION	1.0330106736037285E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998785025760505	WITHOUT_CLASSIFICATION	1.2149742394943978E-4	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996271435038	WITHOUT_CLASSIFICATION	3.7285649627422407E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980997015547584	WITHOUT_CLASSIFICATION	0.001900298445241617	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999966523899	WITHOUT_CLASSIFICATION	3.3476101873272947E-9	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999999867964295	WITHOUT_CLASSIFICATION	1.3203570512790658E-8	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999999998423977	WITHOUT_CLASSIFICATION	1.576022914815378E-9	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999953844767	WITHOUT_CLASSIFICATION	4.615523232990675E-9	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999614820603	WITHOUT_CLASSIFICATION	3.8517939723748246E-8	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.9999987869928683	WITHOUT_CLASSIFICATION	1.2130071317046696E-6	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999655708299	WITHOUT_CLASSIFICATION	3.442917006273439E-8	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.99992213083606	WITHOUT_CLASSIFICATION	7.786916394005185E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980997015547584	WITHOUT_CLASSIFICATION	0.001900298445241617	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9998979183162703	WITHOUT_CLASSIFICATION	1.020816837297505E-4	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.999917328161261	WITHOUT_CLASSIFICATION	8.26718387390215E-5	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999285862758633	WITHOUT_CLASSIFICATION	7.141372413662264E-5	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9998356472467685	WITHOUT_CLASSIFICATION	1.643527532315213E-4	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.9999969192321002	WITHOUT_CLASSIFICATION	3.0807678998913556E-6	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999997746904099	WITHOUT_CLASSIFICATION	2.2530959014484678E-7	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999914565416125	WITHOUT_CLASSIFICATION	8.543458387529058E-6	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.999495333268633	WITHOUT_CLASSIFICATION	5.046667313670181E-4	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999929743772062	WITHOUT_CLASSIFICATION	7.0256227938071005E-6	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998563563112366	WITHOUT_CLASSIFICATION	1.4364368876342582E-4	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999992028973118	WITHOUT_CLASSIFICATION	7.9710268808528E-7	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999998504168172	WITHOUT_CLASSIFICATION	1.4958318289326953E-7	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9982369321269453	WITHOUT_CLASSIFICATION	0.0017630678730546916	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.9999916603254007	WITHOUT_CLASSIFICATION	8.339674599318878E-6	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999998642711642	WITHOUT_CLASSIFICATION	1.3572883593587336E-7	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999309657064	WITHOUT_CLASSIFICATION	6.903429366320967E-8	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999420071229174	WITHOUT_CLASSIFICATION	5.7992877082596163E-5	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999990868850911	WITHOUT_CLASSIFICATION	9.131149088770577E-7	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999979948851873	WITHOUT_CLASSIFICATION	2.0051148126506137E-6	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999997122910358	WITHOUT_CLASSIFICATION	2.8770896430772413E-7	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.9998247792979604	WITHOUT_CLASSIFICATION	1.752207020395154E-4	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999916204122772	WITHOUT_CLASSIFICATION	8.37958772288137E-6	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999995369268244	WITHOUT_CLASSIFICATION	4.6307317561687573E-7	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999993867103547	WITHOUT_CLASSIFICATION	6.132896452779018E-7	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999991529041719	WITHOUT_CLASSIFICATION	8.470958282011894E-7	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7426128814383472	WITHOUT_CLASSIFICATION	0.2573871185616527	IMPLEMENTATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999247393494772	WITHOUT_CLASSIFICATION	7.526065052269173E-5	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999872356259344	WITHOUT_CLASSIFICATION	1.2764374065592552E-5	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999441221175852	WITHOUT_CLASSIFICATION	5.587788241480816E-4	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9646323452503055	IMPLEMENTATION	0.03536765474969448	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999999975159441	WITHOUT_CLASSIFICATION	2.484055905737938E-8	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999523412184715	WITHOUT_CLASSIFICATION	4.765878152849933E-5	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999997575590787	WITHOUT_CLASSIFICATION	2.424409213729712E-7	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999998818821371	WITHOUT_CLASSIFICATION	1.1811786292919798E-7	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999998465752982	WITHOUT_CLASSIFICATION	1.5342470186550654E-7	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9999901513166908	WITHOUT_CLASSIFICATION	9.848683309297473E-6	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999998929072842	WITHOUT_CLASSIFICATION	1.0709271577640413E-7	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999374352823871	WITHOUT_CLASSIFICATION	6.256471761285521E-5	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9999901513166908	WITHOUT_CLASSIFICATION	9.848683309297473E-6	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999998465752982	WITHOUT_CLASSIFICATION	1.5342470186550654E-7	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999998929072842	WITHOUT_CLASSIFICATION	1.0709271577640413E-7	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.9999932352566188	WITHOUT_CLASSIFICATION	6.764743381235482E-6	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.999999444032802	WITHOUT_CLASSIFICATION	5.559671980231163E-7	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999555301434824	WITHOUT_CLASSIFICATION	4.4469856517649805E-5	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999621022552199	WITHOUT_CLASSIFICATION	3.789774478016159E-5	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999986739498	WITHOUT_CLASSIFICATION	1.3260501266455762E-9	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7955595896519821	WITHOUT_CLASSIFICATION	0.20444041034801774	IMPLEMENTATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999932125732971	WITHOUT_CLASSIFICATION	6.7874267029108544E-6	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999653985970722	WITHOUT_CLASSIFICATION	3.4601402927789335E-5	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999892365950507	WITHOUT_CLASSIFICATION	1.076340494941429E-5	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999956286370275	WITHOUT_CLASSIFICATION	4.371362972386836E-6	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.9999875076654869	WITHOUT_CLASSIFICATION	1.2492334513093839E-5	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999999195572287	WITHOUT_CLASSIFICATION	8.044277132852422E-8	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999830617176213	WITHOUT_CLASSIFICATION	1.6938282378698637E-5	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999621022552199	WITHOUT_CLASSIFICATION	3.789774478016159E-5	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9997638485278088	WITHOUT_CLASSIFICATION	2.3615147219118455E-4	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999307940156	WITHOUT_CLASSIFICATION	6.920598436040701E-8	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999928504135	WITHOUT_CLASSIFICATION	7.149586531587811E-9	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999999668930837	WITHOUT_CLASSIFICATION	3.310691638465314E-8	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999973527355214	WITHOUT_CLASSIFICATION	2.647264478705556E-6	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999998774120068	WITHOUT_CLASSIFICATION	1.225879932486761E-7	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9978581422979985	WITHOUT_CLASSIFICATION	0.002141857702001452	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999610515709	WITHOUT_CLASSIFICATION	3.894842922377023E-8	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998934704171025	WITHOUT_CLASSIFICATION	1.065295828974907E-4	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999951846240073	WITHOUT_CLASSIFICATION	4.815375992782346E-6	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999613127043	WITHOUT_CLASSIFICATION	3.868729565298484E-8	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999613127043	WITHOUT_CLASSIFICATION	3.868729565298484E-8	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999964108184	WITHOUT_CLASSIFICATION	3.58918155291263E-9	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999964108184	WITHOUT_CLASSIFICATION	3.58918155291263E-9	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.8353068179682872	WITHOUT_CLASSIFICATION	0.16469318203171288	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999928504135	WITHOUT_CLASSIFICATION	7.149586531587811E-9	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999654474145361	WITHOUT_CLASSIFICATION	3.455258546393609E-5	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999887964895445	WITHOUT_CLASSIFICATION	1.1203510455370512E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999098871516	WITHOUT_CLASSIFICATION	9.011284840085564E-8	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999098871516	WITHOUT_CLASSIFICATION	9.011284840085564E-8	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999998207656513	WITHOUT_CLASSIFICATION	1.792343488234519E-7	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999993011508832	WITHOUT_CLASSIFICATION	6.988491167877225E-6	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999972647137993	WITHOUT_CLASSIFICATION	2.7352862006473917E-6	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.9999970014271531	WITHOUT_CLASSIFICATION	2.9985728468652183E-6	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9981911027105371	WITHOUT_CLASSIFICATION	0.001808897289462853	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999998151855499	WITHOUT_CLASSIFICATION	1.848144500450707E-7	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999962468757241	WITHOUT_CLASSIFICATION	3.75312427585943E-6	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999821650434815	WITHOUT_CLASSIFICATION	1.7834956518544864E-5	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.9993064999768233	WITHOUT_CLASSIFICATION	6.935000231767614E-4	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999999703878797	WITHOUT_CLASSIFICATION	2.9612120277562555E-8	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.9999662668922726	WITHOUT_CLASSIFICATION	3.37331077273525E-5	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.9989780945134289	WITHOUT_CLASSIFICATION	0.0010219054865710404	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999999179098062	WITHOUT_CLASSIFICATION	8.20901938173802E-8	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9999974277424218	WITHOUT_CLASSIFICATION	2.5722575782358982E-6	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999889670480436	WITHOUT_CLASSIFICATION	1.1032951956387649E-5	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9988729667017251	WITHOUT_CLASSIFICATION	0.0011270332982748579	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999484702787863	WITHOUT_CLASSIFICATION	5.152972121355189E-5	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9998289905789903	WITHOUT_CLASSIFICATION	1.7100942100963727E-4	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9995484788457913	WITHOUT_CLASSIFICATION	4.5152115420875577E-4	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999998492625198	WITHOUT_CLASSIFICATION	1.507374801849752E-7	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999968751554171	WITHOUT_CLASSIFICATION	3.12484458289602E-5	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999995362256028	WITHOUT_CLASSIFICATION	4.6377439722207445E-7	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999760543920595	WITHOUT_CLASSIFICATION	2.394560794056456E-5	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999975388125547	WITHOUT_CLASSIFICATION	2.4611874453070788E-5	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9998253123393838	WITHOUT_CLASSIFICATION	1.7468766061625666E-4	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999996156333085	WITHOUT_CLASSIFICATION	3.8436669150610267E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980997015547584	WITHOUT_CLASSIFICATION	0.001900298445241617	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999998504168172	WITHOUT_CLASSIFICATION	1.4958318289326953E-7	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999987830869259	WITHOUT_CLASSIFICATION	1.2169130741421848E-6	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999976315658641	WITHOUT_CLASSIFICATION	2.368434136020047E-6	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999586833114332	WITHOUT_CLASSIFICATION	4.131668856679643E-4	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995691859771558	WITHOUT_CLASSIFICATION	4.3081402284419134E-4	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999449587027712	WITHOUT_CLASSIFICATION	5.504129722875494E-5	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999449587027712	WITHOUT_CLASSIFICATION	5.504129722875494E-5	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999996574030088	WITHOUT_CLASSIFICATION	3.425969911586158E-7	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9999809720571035	WITHOUT_CLASSIFICATION	1.9027942896506223E-5	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999997411956612	WITHOUT_CLASSIFICATION	2.588043388743361E-7	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999997411956612	WITHOUT_CLASSIFICATION	2.588043388743361E-7	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998749078499347	WITHOUT_CLASSIFICATION	1.2509215006533374E-4	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999452492313047	WITHOUT_CLASSIFICATION	5.475076869541826E-5	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.9998779062405619	WITHOUT_CLASSIFICATION	1.2209375943808155E-4	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999425027222143	WITHOUT_CLASSIFICATION	5.749727778577183E-5	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.9999904085161033	WITHOUT_CLASSIFICATION	9.59148389667672E-6	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999973815626202	WITHOUT_CLASSIFICATION	2.6184373798177014E-6	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.9991819459787943	WITHOUT_CLASSIFICATION	8.18054021205746E-4	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999941259272832	WITHOUT_CLASSIFICATION	5.874072716869094E-6	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999997905403615	WITHOUT_CLASSIFICATION	2.0945963859050508E-7	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999997905403615	WITHOUT_CLASSIFICATION	2.0945963859050508E-7	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.99998506825324	WITHOUT_CLASSIFICATION	1.49317467600244E-5	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999968350463926	WITHOUT_CLASSIFICATION	3.164953607493499E-6	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999968350463926	WITHOUT_CLASSIFICATION	3.164953607493499E-6	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999398307369	WITHOUT_CLASSIFICATION	6.016926317271435E-8	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999999915188249	WITHOUT_CLASSIFICATION	8.48117506999214E-9	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9963022554400371	WITHOUT_CLASSIFICATION	0.0036977445599627873	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.9999390979718011	WITHOUT_CLASSIFICATION	6.090202819893822E-5	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999576545810492	WITHOUT_CLASSIFICATION	4.23454189507483E-5	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999906879473	WITHOUT_CLASSIFICATION	9.312052750402497E-9	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999890097023159	WITHOUT_CLASSIFICATION	1.0990297684235304E-5	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9984305174195429	WITHOUT_CLASSIFICATION	0.0015694825804571308	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999125821578	WITHOUT_CLASSIFICATION	8.741784224867325E-8	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9998605787109908	WITHOUT_CLASSIFICATION	1.394212890092853E-4	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999972269057305	WITHOUT_CLASSIFICATION	2.773094269565489E-6	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999841519958839	WITHOUT_CLASSIFICATION	1.5848004116102256E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999914752047566	WITHOUT_CLASSIFICATION	8.524795243462253E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999914752047566	WITHOUT_CLASSIFICATION	8.524795243462253E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999914752047566	WITHOUT_CLASSIFICATION	8.524795243462253E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999914752047566	WITHOUT_CLASSIFICATION	8.524795243462253E-6	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.99998832700638	WITHOUT_CLASSIFICATION	1.1672993619959658E-5	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998828397503216	WITHOUT_CLASSIFICATION	1.171602496783946E-4	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999905121289094	WITHOUT_CLASSIFICATION	9.487871090504908E-6	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.9999860190717058	WITHOUT_CLASSIFICATION	1.3980928294189528E-5	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.99997441605662	WITHOUT_CLASSIFICATION	2.558394338008181E-5	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9998887171928235	WITHOUT_CLASSIFICATION	1.1128280717660568E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999889977794181	WITHOUT_CLASSIFICATION	1.1002220581782389E-5	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9782340735364881	WITHOUT_CLASSIFICATION	0.021765926463511998	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997509747655411	WITHOUT_CLASSIFICATION	2.4902523445893084E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999889977794181	WITHOUT_CLASSIFICATION	1.1002220581782389E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999889977794181	WITHOUT_CLASSIFICATION	1.1002220581782389E-5	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999575930080755	WITHOUT_CLASSIFICATION	4.24069919244529E-5	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.9999820085849858	WITHOUT_CLASSIFICATION	1.7991415014274314E-5	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.9999899485442487	WITHOUT_CLASSIFICATION	1.0051455751328921E-5	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999999908790165	WITHOUT_CLASSIFICATION	9.120983494599029E-8	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999999241229192	WITHOUT_CLASSIFICATION	7.587708085899625E-8	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999265255267225	WITHOUT_CLASSIFICATION	7.347447327753597E-5	IMPLEMENTATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9998692797846123	WITHOUT_CLASSIFICATION	1.3072021538776762E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999999908790165	WITHOUT_CLASSIFICATION	9.120983494599029E-8	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9977639028407101	WITHOUT_CLASSIFICATION	0.0022360971592898147	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999814397867421	WITHOUT_CLASSIFICATION	1.8560213257860442E-5	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999961323321426	WITHOUT_CLASSIFICATION	3.867667857418364E-6	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.999999846404047	WITHOUT_CLASSIFICATION	1.5359595305230188E-7	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999983430053763	WITHOUT_CLASSIFICATION	1.656994623654787E-6	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999844653475876	WITHOUT_CLASSIFICATION	1.553465241245873E-5	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999995221875789	WITHOUT_CLASSIFICATION	4.778124211107214E-7	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999932956024449	WITHOUT_CLASSIFICATION	6.704397555180418E-6	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999825747911998	WITHOUT_CLASSIFICATION	1.7425208800297517E-5	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999993782850686	WITHOUT_CLASSIFICATION	6.217149315161753E-7	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999873727667	WITHOUT_CLASSIFICATION	1.2627233303344626E-7	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998551502443	WITHOUT_CLASSIFICATION	1.4484975577970665E-7	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999953687051693	WITHOUT_CLASSIFICATION	4.631294830714977E-6	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998047893871196	WITHOUT_CLASSIFICATION	1.9521061288033735E-4	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999976841046758	WITHOUT_CLASSIFICATION	2.3158953242045933E-6	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999855024265226	WITHOUT_CLASSIFICATION	1.4497573477384633E-5	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999968890568	WITHOUT_CLASSIFICATION	3.1109432238161302E-9	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999936826905003	WITHOUT_CLASSIFICATION	6.317309499729127E-6	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999985246439621	WITHOUT_CLASSIFICATION	1.4753560379402605E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999936826905003	WITHOUT_CLASSIFICATION	6.317309499729127E-6	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999881301734104	WITHOUT_CLASSIFICATION	1.1869826589619039E-5	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.99999929150411	WITHOUT_CLASSIFICATION	7.084958900494914E-7	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999451896512672	WITHOUT_CLASSIFICATION	5.481034873269353E-5	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999778871704125	WITHOUT_CLASSIFICATION	2.2112829587543054E-5	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.999993338250174	WITHOUT_CLASSIFICATION	6.661749826002179E-6	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.999992877412153	WITHOUT_CLASSIFICATION	7.122587846941155E-6	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999960611386498	WITHOUT_CLASSIFICATION	3.938861350141696E-6	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999968890568	WITHOUT_CLASSIFICATION	3.1109432238161302E-9	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999985246439621	WITHOUT_CLASSIFICATION	1.4753560379402605E-6	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999881301734104	WITHOUT_CLASSIFICATION	1.1869826589619039E-5	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999965029798311	WITHOUT_CLASSIFICATION	3.497020168816337E-6	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.9999347102163404	WITHOUT_CLASSIFICATION	6.528978365967238E-5	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.9985458729780036	WITHOUT_CLASSIFICATION	0.0014541270219964014	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999991903789828	WITHOUT_CLASSIFICATION	8.096210171369335E-7	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.9985166751798793	WITHOUT_CLASSIFICATION	0.0014833248201206078	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9991526300043077	WITHOUT_CLASSIFICATION	8.473699956923778E-4	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999987416596047	WITHOUT_CLASSIFICATION	1.2583403953620932E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999484702787863	WITHOUT_CLASSIFICATION	5.152972121355189E-5	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.99999929150411	WITHOUT_CLASSIFICATION	7.084958900494914E-7	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999991628974966	WITHOUT_CLASSIFICATION	8.371025033619917E-7	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999998094863666	WITHOUT_CLASSIFICATION	1.905136333935048E-7	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9959383959261291	WITHOUT_CLASSIFICATION	0.004061604073870897	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999997780331623	WITHOUT_CLASSIFICATION	2.2196683765802666E-7	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999484702787863	WITHOUT_CLASSIFICATION	5.152972121355189E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980997015547584	WITHOUT_CLASSIFICATION	0.001900298445241617	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999980016064488	WITHOUT_CLASSIFICATION	1.998393551232307E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999484702787863	WITHOUT_CLASSIFICATION	5.152972121355189E-5	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999989100727358	WITHOUT_CLASSIFICATION	1.0899272642668121E-6	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999955189717084	WITHOUT_CLASSIFICATION	4.4810282916977106E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980997015547584	WITHOUT_CLASSIFICATION	0.001900298445241617	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999916373354023	WITHOUT_CLASSIFICATION	8.362664597791338E-6	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999932542483595	WITHOUT_CLASSIFICATION	6.745751640461341E-6	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999999192207432	WITHOUT_CLASSIFICATION	8.077925679512201E-7	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.9999837104448304	WITHOUT_CLASSIFICATION	1.6289555169596827E-5	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999999836748737	WITHOUT_CLASSIFICATION	1.63251261897586E-8	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999818598548217	WITHOUT_CLASSIFICATION	1.8140145178316003E-5	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999996309722277	WITHOUT_CLASSIFICATION	3.690277723275246E-7	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.9999918168678175	WITHOUT_CLASSIFICATION	8.183132182571457E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999847875702469	WITHOUT_CLASSIFICATION	1.5212429753087592E-4	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999999879273958	WITHOUT_CLASSIFICATION	1.2072604208813466E-7	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9963022554400371	WITHOUT_CLASSIFICATION	0.0036977445599627873	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999801906510691	WITHOUT_CLASSIFICATION	1.980934893090988E-5	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999647739781863	WITHOUT_CLASSIFICATION	3.52260218137596E-5	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999987700599798	WITHOUT_CLASSIFICATION	1.2299400201589188E-6	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999986029727259	WITHOUT_CLASSIFICATION	1.397027274133553E-6	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999934938746	WITHOUT_CLASSIFICATION	6.50612538529066E-9	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9991567383089818	WITHOUT_CLASSIFICATION	8.432616910181445E-4	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9976751973639182	WITHOUT_CLASSIFICATION	0.0023248026360817874	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999639996326029	WITHOUT_CLASSIFICATION	3.600036739701211E-5	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999760061533	WITHOUT_CLASSIFICATION	2.3993846665970553E-8	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999886368386	WITHOUT_CLASSIFICATION	1.1363161489782623E-8	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.9963275643244943	WITHOUT_CLASSIFICATION	0.003672435675505663	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999754446429625	WITHOUT_CLASSIFICATION	2.4555357037549117E-5	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999894310891858	WITHOUT_CLASSIFICATION	1.0568910814081052E-5	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999994404094144	WITHOUT_CLASSIFICATION	5.59590585650438E-7	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999435548754345	WITHOUT_CLASSIFICATION	5.644512456561124E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9998895307800711	WITHOUT_CLASSIFICATION	1.104692199288926E-4	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999990166460666	WITHOUT_CLASSIFICATION	9.83353933383353E-7	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9989325962495819	WITHOUT_CLASSIFICATION	0.0010674037504181534	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999907441309298	WITHOUT_CLASSIFICATION	9.255869070194927E-6	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999652774031921	WITHOUT_CLASSIFICATION	3.472259680797373E-5	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999998542222402	WITHOUT_CLASSIFICATION	1.4577775968448142E-7	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.9942214005959225	WITHOUT_CLASSIFICATION	0.005778599404077584	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999963578874832	WITHOUT_CLASSIFICATION	3.6421125167112425E-6	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999993863924275	WITHOUT_CLASSIFICATION	6.136075726088162E-7	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.9999849325065702	WITHOUT_CLASSIFICATION	1.5067493429842756E-5	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9997587898786892	WITHOUT_CLASSIFICATION	2.4121012131089344E-4	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999998487064056	WITHOUT_CLASSIFICATION	1.5129359447153524E-7	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9939615246253098	WITHOUT_CLASSIFICATION	0.0060384753746901155	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999995194455332	WITHOUT_CLASSIFICATION	4.80554466825513E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980997015547584	WITHOUT_CLASSIFICATION	0.001900298445241617	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9996926912337669	WITHOUT_CLASSIFICATION	3.073087662330592E-4	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9998185208660842	WITHOUT_CLASSIFICATION	1.814791339156781E-4	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9998185208660842	WITHOUT_CLASSIFICATION	1.814791339156781E-4	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.7993874425320541	WITHOUT_CLASSIFICATION	0.2006125574679459	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999818598548217	WITHOUT_CLASSIFICATION	1.8140145178316003E-5	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9950974826586567	WITHOUT_CLASSIFICATION	0.004902517341343305	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999894297703	WITHOUT_CLASSIFICATION	1.0570229746990819E-8	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9998735291685972	WITHOUT_CLASSIFICATION	1.2647083140283807E-4	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9996104331706526	WITHOUT_CLASSIFICATION	3.8956682934747485E-4	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.9999856088913172	WITHOUT_CLASSIFICATION	1.439110868297291E-5	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.9999331480050337	WITHOUT_CLASSIFICATION	6.685199496626372E-5	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999986502356	WITHOUT_CLASSIFICATION	1.3497644798838957E-9	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999985935168	WITHOUT_CLASSIFICATION	1.4064830550082242E-9	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999411483410165	WITHOUT_CLASSIFICATION	5.885165898350298E-4	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.9999990668137045	WITHOUT_CLASSIFICATION	9.331862954550991E-7	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999994106508749	WITHOUT_CLASSIFICATION	5.893491250543574E-7	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999977448332	WITHOUT_CLASSIFICATION	2.2551668391833756E-9	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999996772299439	WITHOUT_CLASSIFICATION	3.2277005610173174E-7	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9952498707850292	WITHOUT_CLASSIFICATION	0.004750129214970741	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999999283246172	WITHOUT_CLASSIFICATION	7.167538279721878E-7	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999999934326227	WITHOUT_CLASSIFICATION	6.567377298804823E-8	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999886332213	WITHOUT_CLASSIFICATION	1.136677875531344E-8	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9968270261918751	WITHOUT_CLASSIFICATION	0.0031729738081249666	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999940017322244	WITHOUT_CLASSIFICATION	5.998267775642385E-6	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999524125830621	WITHOUT_CLASSIFICATION	4.75874169378361E-5	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999985425015468	WITHOUT_CLASSIFICATION	1.4574984532038496E-5	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999879344726	WITHOUT_CLASSIFICATION	1.2065527301611533E-8	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9939615246253098	WITHOUT_CLASSIFICATION	0.0060384753746901155	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999978182326441	WITHOUT_CLASSIFICATION	2.1817673558034458E-6	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999987643325	WITHOUT_CLASSIFICATION	1.2356675268783195E-9	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999645794655	WITHOUT_CLASSIFICATION	3.542053443685119E-8	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999993923573852	WITHOUT_CLASSIFICATION	6.076426147488545E-7	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9688216966374489	WITHOUT_CLASSIFICATION	0.03117830336255109	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999261044618885	WITHOUT_CLASSIFICATION	7.389553811160083E-5	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999993991442645	WITHOUT_CLASSIFICATION	6.008557355810093E-7	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999891051215687	WITHOUT_CLASSIFICATION	1.0894878431200534E-5	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999994306284653	WITHOUT_CLASSIFICATION	5.693715347929967E-7	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999991531116	WITHOUT_CLASSIFICATION	8.468884642196691E-10	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999956820859804	WITHOUT_CLASSIFICATION	4.317914019473629E-6	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999607379513207	WITHOUT_CLASSIFICATION	3.926204867930334E-5	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999981468820878	WITHOUT_CLASSIFICATION	1.8531179121930304E-5	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999998002604443	WITHOUT_CLASSIFICATION	1.9973955562747352E-7	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999997238044759	WITHOUT_CLASSIFICATION	2.761955240941202E-7	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9984665005258367	WITHOUT_CLASSIFICATION	0.0015334994741632198	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9984665005258367	WITHOUT_CLASSIFICATION	0.0015334994741632198	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9995642182741961	WITHOUT_CLASSIFICATION	4.3578172580398776E-4	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9992681840463576	WITHOUT_CLASSIFICATION	7.318159536424456E-4	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999994781262164	WITHOUT_CLASSIFICATION	5.218737835160928E-7	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999994781262164	WITHOUT_CLASSIFICATION	5.218737835160928E-7	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.9999996105735203	WITHOUT_CLASSIFICATION	3.8942647977197175E-7	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999959823533408	WITHOUT_CLASSIFICATION	4.01764665922116E-6	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9973235729757932	WITHOUT_CLASSIFICATION	0.0026764270242068543	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999998823065128	WITHOUT_CLASSIFICATION	1.1769348710732646E-7	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999941037120729	WITHOUT_CLASSIFICATION	5.8962879271094304E-6	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999926624484904	WITHOUT_CLASSIFICATION	7.337551509567592E-6	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999908747305	WITHOUT_CLASSIFICATION	9.12526952945082E-9	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999908747305	WITHOUT_CLASSIFICATION	9.12526952945082E-9	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999906929248898	WITHOUT_CLASSIFICATION	9.307075110186907E-6	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999979246369719	WITHOUT_CLASSIFICATION	2.0753630281721893E-6	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999995669031952	WITHOUT_CLASSIFICATION	4.3309680473253096E-7	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999963066353584	WITHOUT_CLASSIFICATION	3.693364641517006E-6	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999963066353584	WITHOUT_CLASSIFICATION	3.693364641517006E-6	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.9999998260686859	WITHOUT_CLASSIFICATION	1.7393131418906238E-7	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999878142191483	WITHOUT_CLASSIFICATION	1.218578085164101E-5	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999009303617	WITHOUT_CLASSIFICATION	9.906963835121372E-8	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9999980133676378	WITHOUT_CLASSIFICATION	1.9866323621474333E-6	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999995429625637	WITHOUT_CLASSIFICATION	4.5703743636943346E-7	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999979100056882	WITHOUT_CLASSIFICATION	2.089994311900505E-6	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999929746686288	WITHOUT_CLASSIFICATION	7.025331371138599E-6	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.9999751931067963	WITHOUT_CLASSIFICATION	2.4806893203778274E-5	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.9999992783886218	WITHOUT_CLASSIFICATION	7.216113782461824E-7	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999968116913712	WITHOUT_CLASSIFICATION	3.1883086288259016E-6	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999996040605	WITHOUT_CLASSIFICATION	3.9593951081119345E-10	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9861253641758113	WITHOUT_CLASSIFICATION	0.013874635824188606	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.9992012526921528	WITHOUT_CLASSIFICATION	7.987473078471864E-4	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9998967950080321	WITHOUT_CLASSIFICATION	1.0320499196789526E-4	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.9999601656827068	WITHOUT_CLASSIFICATION	3.983431729313802E-5	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999995535064902	WITHOUT_CLASSIFICATION	4.4649350975332865E-7	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9996413459670085	WITHOUT_CLASSIFICATION	3.58654032991557E-4	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999976877978143	WITHOUT_CLASSIFICATION	2.3122021856925497E-6	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999747827419657	WITHOUT_CLASSIFICATION	2.5217258034275153E-5	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999967294026155	WITHOUT_CLASSIFICATION	3.270597384342404E-6	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999947311755336	WITHOUT_CLASSIFICATION	5.26882446635898E-6	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9998115078732571	WITHOUT_CLASSIFICATION	1.8849212674283095E-4	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9870050541019924	WITHOUT_CLASSIFICATION	0.012994945898007744	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999989981055697	WITHOUT_CLASSIFICATION	1.0018944302794535E-6	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.999998098847846	WITHOUT_CLASSIFICATION	1.9011521541498246E-6	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.9999999925931675	WITHOUT_CLASSIFICATION	7.406832403435293E-9	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999996633400808	WITHOUT_CLASSIFICATION	3.366599191756049E-7	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.999885873469062	WITHOUT_CLASSIFICATION	1.1412653093795931E-4	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999972293477074	WITHOUT_CLASSIFICATION	2.770652292576945E-6	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999991043481298	WITHOUT_CLASSIFICATION	8.956518700750665E-7	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999964960482003	WITHOUT_CLASSIFICATION	3.50395179983231E-6	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999996875053523	WITHOUT_CLASSIFICATION	3.124946477592689E-7	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999997313518845	WITHOUT_CLASSIFICATION	2.6864811550745316E-7	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.999995943417399	WITHOUT_CLASSIFICATION	4.0565826010408364E-6	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999940519554431	WITHOUT_CLASSIFICATION	5.948044556833385E-6	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999922551437571	WITHOUT_CLASSIFICATION	7.744856242995605E-6	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.9999888330392485	WITHOUT_CLASSIFICATION	1.116696075156214E-5	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999742295302	WITHOUT_CLASSIFICATION	2.577046973010542E-8	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999976648354167	WITHOUT_CLASSIFICATION	2.335164583265874E-6	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999799458856	WITHOUT_CLASSIFICATION	2.0054114395157862E-8	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999999596959005	WITHOUT_CLASSIFICATION	4.03040995734678E-8	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999986459003691	WITHOUT_CLASSIFICATION	1.3540996308528123E-6	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.9999990042314482	WITHOUT_CLASSIFICATION	9.957685519223736E-7	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.9999896635792163	WITHOUT_CLASSIFICATION	1.0336420783683071E-5	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9999931356516188	WITHOUT_CLASSIFICATION	6.864348381192787E-6	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999996024154292	WITHOUT_CLASSIFICATION	3.9758457078932036E-7	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.9999938517071157	WITHOUT_CLASSIFICATION	6.148292884243698E-6	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999776793883641	WITHOUT_CLASSIFICATION	2.232061163583689E-5	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999981218488276	WITHOUT_CLASSIFICATION	1.8781511723802562E-6	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999993931491958	WITHOUT_CLASSIFICATION	6.068508041550383E-7	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998099930532401	WITHOUT_CLASSIFICATION	1.9000694675979515E-4	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9881754733823115	WITHOUT_CLASSIFICATION	0.011824526617688388	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9996690668537456	WITHOUT_CLASSIFICATION	3.3093314625445185E-4	IMPLEMENTATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999042917761511	WITHOUT_CLASSIFICATION	9.570822384881078E-5	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999965055424925	WITHOUT_CLASSIFICATION	3.4944575075053914E-6	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9996546409047008	WITHOUT_CLASSIFICATION	3.453590952992002E-4	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999977800480017	WITHOUT_CLASSIFICATION	2.219951998367149E-6	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999934403357515	WITHOUT_CLASSIFICATION	6.559664248483546E-6	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999916627752207	WITHOUT_CLASSIFICATION	8.337224779335243E-6	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999797795233432	WITHOUT_CLASSIFICATION	2.0220476656778463E-5	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999909239094574	WITHOUT_CLASSIFICATION	9.0760905425274E-6	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999909239094574	WITHOUT_CLASSIFICATION	9.0760905425274E-6	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999993137784	WITHOUT_CLASSIFICATION	6.862215370812703E-10	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999959073397205	WITHOUT_CLASSIFICATION	4.092660279396527E-6	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999999998621566	WITHOUT_CLASSIFICATION	1.3784339761633474E-9	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999871262182	WITHOUT_CLASSIFICATION	1.2873781852403278E-8	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999986066515262	WITHOUT_CLASSIFICATION	1.3933484738311456E-6	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999943958606323	WITHOUT_CLASSIFICATION	5.604139367778518E-6	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999999411725322	WITHOUT_CLASSIFICATION	5.882746780908309E-8	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999744601034166	WITHOUT_CLASSIFICATION	2.55398965833283E-5	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999976558189209	WITHOUT_CLASSIFICATION	2.3441810792247712E-6	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999999632450639	WITHOUT_CLASSIFICATION	3.675493606580901E-8	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999998652452403	WITHOUT_CLASSIFICATION	1.3475475968852774E-7	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999918612987991	WITHOUT_CLASSIFICATION	8.138701200993962E-6	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999997521797981	WITHOUT_CLASSIFICATION	2.4782020189821688E-6	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999146681794343	WITHOUT_CLASSIFICATION	8.533182056560449E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999962131535329	WITHOUT_CLASSIFICATION	3.7868464670173362E-6	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999962131535329	WITHOUT_CLASSIFICATION	3.7868464670173362E-6	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999991367593	WITHOUT_CLASSIFICATION	8.632408553218523E-10	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999917332892635	WITHOUT_CLASSIFICATION	8.26671073647033E-6	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999998979059157	WITHOUT_CLASSIFICATION	1.0209408423300836E-7	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999695050048	WITHOUT_CLASSIFICATION	3.049499515221753E-8	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999839003634283	WITHOUT_CLASSIFICATION	1.6099636571778714E-5	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999746831932214	WITHOUT_CLASSIFICATION	2.5316806778698728E-5	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999925787445171	WITHOUT_CLASSIFICATION	7.421255482974933E-6	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.9998148968647732	WITHOUT_CLASSIFICATION	1.8510313522678557E-4	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9952475764561447	WITHOUT_CLASSIFICATION	0.004752423543855338	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999983242733493	WITHOUT_CLASSIFICATION	1.675726650636577E-6	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999968323817342	WITHOUT_CLASSIFICATION	3.1676182658877376E-6	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999932178134	WITHOUT_CLASSIFICATION	6.782186575269387E-9	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999974440681753	WITHOUT_CLASSIFICATION	2.5559318246950767E-6	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999702120502	WITHOUT_CLASSIFICATION	2.978794981563564E-8	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999950577735914	WITHOUT_CLASSIFICATION	4.9422264085485216E-6	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.999999984971152	WITHOUT_CLASSIFICATION	1.5028848079968916E-8	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999999065506463	WITHOUT_CLASSIFICATION	9.3449353621473E-8	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999945285217563	WITHOUT_CLASSIFICATION	5.471478243665495E-6	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.999999640870065	WITHOUT_CLASSIFICATION	3.591299350607511E-7	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999401076187	WITHOUT_CLASSIFICATION	5.989238127240489E-8	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999999953312437	WITHOUT_CLASSIFICATION	4.668756343341271E-9	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999993641683	WITHOUT_CLASSIFICATION	6.358317499766345E-10	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999996945170738	WITHOUT_CLASSIFICATION	3.0548292613517527E-7	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999429327113	WITHOUT_CLASSIFICATION	5.70672887140672E-8	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999984783366225	WITHOUT_CLASSIFICATION	1.521663377459131E-6	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.9999974805209426	WITHOUT_CLASSIFICATION	2.5194790573488932E-6	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999853857524826	WITHOUT_CLASSIFICATION	1.4614247517419588E-5	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9996107256548369	WITHOUT_CLASSIFICATION	3.892743451631213E-4	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.999994806388306	WITHOUT_CLASSIFICATION	5.193611694024959E-6	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9948102521668937	WITHOUT_CLASSIFICATION	0.005189747833106259	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999932883012994	WITHOUT_CLASSIFICATION	6.7116987006853805E-6	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999993764664991	WITHOUT_CLASSIFICATION	6.235335009701039E-7	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999937331839133	WITHOUT_CLASSIFICATION	6.266816086742486E-6	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999973457891244	WITHOUT_CLASSIFICATION	2.654210875684623E-6	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999808735443417	WITHOUT_CLASSIFICATION	1.9126455658263572E-5	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999701202944906	WITHOUT_CLASSIFICATION	2.9879705509360984E-5	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999345422243511	WITHOUT_CLASSIFICATION	6.545777564889923E-5	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999986492984823	WITHOUT_CLASSIFICATION	1.3507015176741884E-6	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999967230820184	WITHOUT_CLASSIFICATION	3.276917981623414E-6	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999997269059255	WITHOUT_CLASSIFICATION	2.730940744283624E-7	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9996738231296277	WITHOUT_CLASSIFICATION	3.2617687037224006E-4	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999997715515722	WITHOUT_CLASSIFICATION	2.2844842788395469E-7	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998231317933892	WITHOUT_CLASSIFICATION	1.7686820661077924E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998231317933892	WITHOUT_CLASSIFICATION	1.7686820661077924E-4	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999868894946211	WITHOUT_CLASSIFICATION	1.3110505378829293E-5	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999993262823679	WITHOUT_CLASSIFICATION	6.73717632020732E-7	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9998105384441942	WITHOUT_CLASSIFICATION	1.894615558058601E-4	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999938973007002	WITHOUT_CLASSIFICATION	6.1026992998792966E-6	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.999999822528886	WITHOUT_CLASSIFICATION	1.7747111412033136E-7	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999997368626854	WITHOUT_CLASSIFICATION	2.6313731465408563E-7	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9995585818776985	WITHOUT_CLASSIFICATION	4.4141812230140463E-4	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999991931624419	WITHOUT_CLASSIFICATION	8.068375581268787E-7	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999998361919399	WITHOUT_CLASSIFICATION	1.6380806013515526E-7	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977216331694	WITHOUT_CLASSIFICATION	2.278366830527864E-6	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933429016524	WITHOUT_CLASSIFICATION	6.657098347549203E-6	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999995287135215	WITHOUT_CLASSIFICATION	4.7128647850574835E-7	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999932746282191	WITHOUT_CLASSIFICATION	6.725371780962344E-6	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999790733085419	WITHOUT_CLASSIFICATION	2.0926691458045063E-5	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999900752290982	WITHOUT_CLASSIFICATION	9.924770901755714E-6	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9884869471423318	WITHOUT_CLASSIFICATION	0.011513052857668233	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999996601626698	WITHOUT_CLASSIFICATION	3.398373301738673E-7	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999825046563	WITHOUT_CLASSIFICATION	1.749534371650827E-8	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999719857517	WITHOUT_CLASSIFICATION	2.8014248287857965E-8	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9994504086759537	WITHOUT_CLASSIFICATION	5.495913240463181E-4	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999981883464084	WITHOUT_CLASSIFICATION	1.811653591502487E-6	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.999999975407406	WITHOUT_CLASSIFICATION	2.4592594006668873E-8	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999678832857491	WITHOUT_CLASSIFICATION	3.21167142508724E-5	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999417822714532	WITHOUT_CLASSIFICATION	5.821772854671256E-5	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999956495353706	WITHOUT_CLASSIFICATION	4.350464629397429E-6	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9939830324591672	WITHOUT_CLASSIFICATION	0.006016967540832828	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999439361542967	WITHOUT_CLASSIFICATION	5.606384570329154E-5	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999550080713	WITHOUT_CLASSIFICATION	4.499192863576269E-8	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999993294083207	WITHOUT_CLASSIFICATION	6.705916792418787E-7	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9998573885620865	WITHOUT_CLASSIFICATION	1.4261143791356702E-4	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9994970764050608	WITHOUT_CLASSIFICATION	5.029235949391249E-4	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999908284645294	WITHOUT_CLASSIFICATION	9.171535470603812E-6	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9996551425100728	WITHOUT_CLASSIFICATION	3.4485748992725237E-4	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999998016527046	WITHOUT_CLASSIFICATION	1.983472953214721E-7	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999994931151047	WITHOUT_CLASSIFICATION	5.068848953451969E-7	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999985636429	WITHOUT_CLASSIFICATION	1.4363570995825123E-9	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999963890924245	WITHOUT_CLASSIFICATION	3.6109075754070003E-6	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999995152069032	WITHOUT_CLASSIFICATION	4.847930967446887E-7	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999180966999808	WITHOUT_CLASSIFICATION	8.190330001921271E-5	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999217850439	WITHOUT_CLASSIFICATION	7.821495607623907E-8	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999839268833333	WITHOUT_CLASSIFICATION	1.6073116666741362E-5	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999982054308605	WITHOUT_CLASSIFICATION	1.7945691396025802E-6	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.999930672683351	WITHOUT_CLASSIFICATION	6.932731664902411E-5	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999994329928055	WITHOUT_CLASSIFICATION	5.670071945712888E-7	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999926660468	WITHOUT_CLASSIFICATION	7.333953237084956E-9	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999997279116931	WITHOUT_CLASSIFICATION	2.720883068764923E-7	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999998939027998	WITHOUT_CLASSIFICATION	1.0609720021889602E-7	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999873768301294	WITHOUT_CLASSIFICATION	1.262316987068741E-5	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999996647329454	WITHOUT_CLASSIFICATION	3.352670546114187E-7	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999997521797981	WITHOUT_CLASSIFICATION	2.4782020189821688E-6	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999999965451385	WITHOUT_CLASSIFICATION	3.4548615456755732E-9	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.999999623993718	WITHOUT_CLASSIFICATION	3.760062818876402E-7	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999854914865369	WITHOUT_CLASSIFICATION	1.4508513463088232E-5	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999908938483338	WITHOUT_CLASSIFICATION	9.106151666129133E-6	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999997541864994	WITHOUT_CLASSIFICATION	2.458135005271448E-7	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9998678166598203	WITHOUT_CLASSIFICATION	1.321833401796862E-4	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9921079948160475	WITHOUT_CLASSIFICATION	0.007892005183952404	IMPLEMENTATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999702183813134	WITHOUT_CLASSIFICATION	2.978161868649199E-5	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999894657876	WITHOUT_CLASSIFICATION	1.0534212353857698E-8	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9985440087576769	WITHOUT_CLASSIFICATION	0.0014559912423230588	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999889108395164	WITHOUT_CLASSIFICATION	1.1089160483540453E-5	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9994097890796649	WITHOUT_CLASSIFICATION	5.902109203351442E-4	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999991790988239	WITHOUT_CLASSIFICATION	8.209011760195389E-7	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999636278424	WITHOUT_CLASSIFICATION	3.63721575557416E-8	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999996655759036	WITHOUT_CLASSIFICATION	3.344240965175349E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998115681698774	WITHOUT_CLASSIFICATION	1.8843183012260485E-4	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9957927714437249	WITHOUT_CLASSIFICATION	0.004207228556275167	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.999999788147687	WITHOUT_CLASSIFICATION	2.1185231307212192E-7	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9997964770767367	WITHOUT_CLASSIFICATION	2.035229232633353E-4	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.999969167542116	WITHOUT_CLASSIFICATION	3.0832457884044766E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998115681698774	WITHOUT_CLASSIFICATION	1.8843183012260485E-4	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999992460170515	WITHOUT_CLASSIFICATION	7.539829485787859E-7	IMPLEMENTATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999998416939289	WITHOUT_CLASSIFICATION	1.5830607112140582E-7	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999975052133961	WITHOUT_CLASSIFICATION	2.494786603775155E-6	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999995740824148	WITHOUT_CLASSIFICATION	4.259175852032497E-7	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999999982877675	WITHOUT_CLASSIFICATION	1.7122325044317403E-8	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999980914511	WITHOUT_CLASSIFICATION	1.9085488218239578E-9	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.999999971452262	WITHOUT_CLASSIFICATION	2.854773800553434E-8	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999958480783805	WITHOUT_CLASSIFICATION	4.1519216195002764E-5	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999413814146	WITHOUT_CLASSIFICATION	5.861858546472831E-8	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999991553221526	WITHOUT_CLASSIFICATION	8.446778475063598E-7	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9994477014812159	WITHOUT_CLASSIFICATION	5.52298518784162E-4	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999947092404415	WITHOUT_CLASSIFICATION	5.290759558539566E-6	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999691537975888	WITHOUT_CLASSIFICATION	3.084620241125028E-5	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9489429999846205	WITHOUT_CLASSIFICATION	0.0510570000153795	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.994742663389231	WITHOUT_CLASSIFICATION	0.005257336610768904	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999999961337481	WITHOUT_CLASSIFICATION	3.8662518335346545E-9	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999879344726	WITHOUT_CLASSIFICATION	1.2065527301611533E-8	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999982960397109	WITHOUT_CLASSIFICATION	1.7039602891105911E-6	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999746704151	WITHOUT_CLASSIFICATION	2.5329584869206955E-8	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9094321810846115	WITHOUT_CLASSIFICATION	0.09056781891538845	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9996877484149629	WITHOUT_CLASSIFICATION	3.1225158503714583E-4	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.992998636843354	WITHOUT_CLASSIFICATION	0.007001363156646063	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999659828027861	WITHOUT_CLASSIFICATION	3.401719721387832E-5	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999986171945913	WITHOUT_CLASSIFICATION	1.3828054086985776E-6	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999967704368	WITHOUT_CLASSIFICATION	3.2295633087599324E-9	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999946696098	WITHOUT_CLASSIFICATION	5.3303901803117696E-9	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999636162745	WITHOUT_CLASSIFICATION	3.6383725451927724E-8	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999989402246292	WITHOUT_CLASSIFICATION	1.0597753707748406E-6	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999986449285795	WITHOUT_CLASSIFICATION	1.355071420590875E-6	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9937223043242287	WITHOUT_CLASSIFICATION	0.006277695675771205	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9952808159152702	IMPLEMENTATION	0.004719184084729764	WITHOUT_CLASSIFICATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999987699812107	WITHOUT_CLASSIFICATION	1.2300187892801722E-6	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9993182239101971	WITHOUT_CLASSIFICATION	6.817760898028088E-4	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999889456983202	WITHOUT_CLASSIFICATION	1.1054301679827679E-5	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999963363919925	WITHOUT_CLASSIFICATION	3.6636080074881975E-6	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999550430847544	WITHOUT_CLASSIFICATION	4.4956915245634985E-5	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999988026076	WITHOUT_CLASSIFICATION	1.197392385064713E-9	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999994096682	WITHOUT_CLASSIFICATION	5.903317410533865E-10	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999993986697913	WITHOUT_CLASSIFICATION	6.013302088057415E-7	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999688020389	WITHOUT_CLASSIFICATION	3.119796111373598E-8	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999998747697693	WITHOUT_CLASSIFICATION	1.2523023069638E-6	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9985399902661191	WITHOUT_CLASSIFICATION	0.0014600097338810106	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9985399902661191	WITHOUT_CLASSIFICATION	0.0014600097338810106	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999989239357201	WITHOUT_CLASSIFICATION	1.076064279977152E-6	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999991247954422	WITHOUT_CLASSIFICATION	8.752045578433569E-7	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999293625504	WITHOUT_CLASSIFICATION	7.063744955645676E-8	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999999144845831	WITHOUT_CLASSIFICATION	8.551541686577153E-8	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999425027222143	WITHOUT_CLASSIFICATION	5.749727778577183E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999425027222143	WITHOUT_CLASSIFICATION	5.749727778577183E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9998271121013276	WITHOUT_CLASSIFICATION	1.7288789867247965E-4	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999997654913658	WITHOUT_CLASSIFICATION	2.3450863414729376E-7	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999999993413962	WITHOUT_CLASSIFICATION	6.58603793844946E-10	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999980327394	WITHOUT_CLASSIFICATION	1.967260600448067E-9	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999989340060295	WITHOUT_CLASSIFICATION	1.0659939705372327E-6	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999981733710798	WITHOUT_CLASSIFICATION	1.8266289203547176E-6	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999992795306005	WITHOUT_CLASSIFICATION	7.204693993881295E-7	IMPLEMENTATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999955839250484	WITHOUT_CLASSIFICATION	4.416074951581712E-6	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999984980078329	WITHOUT_CLASSIFICATION	1.5019921670572158E-6	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999726629499763	WITHOUT_CLASSIFICATION	2.7337050023696735E-5	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999332783881	WITHOUT_CLASSIFICATION	6.672161181227228E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938653708559	WITHOUT_CLASSIFICATION	6.134629144119191E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938653708559	WITHOUT_CLASSIFICATION	6.134629144119191E-6	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999999715892	WITHOUT_CLASSIFICATION	2.8410802061177292E-11	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999316680101887	WITHOUT_CLASSIFICATION	6.833198981123668E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999991207994248	WITHOUT_CLASSIFICATION	8.792005753034577E-7	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999998575942205	WITHOUT_CLASSIFICATION	1.4240577949911083E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980997015547584	WITHOUT_CLASSIFICATION	0.001900298445241617	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999973412924165	WITHOUT_CLASSIFICATION	2.658707583507977E-6	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996271435038	WITHOUT_CLASSIFICATION	3.7285649627422407E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980997015547584	WITHOUT_CLASSIFICATION	0.001900298445241617	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999916753776297	WITHOUT_CLASSIFICATION	8.324622370273297E-6	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999998532367239	WITHOUT_CLASSIFICATION	1.467632760963701E-7	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999998995870291	WITHOUT_CLASSIFICATION	1.0041297092444102E-7	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999949483794839	WITHOUT_CLASSIFICATION	5.051620516079888E-6	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999991553221526	WITHOUT_CLASSIFICATION	8.446778475063598E-7	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.999999333617834	WITHOUT_CLASSIFICATION	6.663821659941475E-7	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999624796668617	WITHOUT_CLASSIFICATION	3.752033313821358E-5	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999592006847583	WITHOUT_CLASSIFICATION	4.07993152417453E-5	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.999987314112612	WITHOUT_CLASSIFICATION	1.2685887387941702E-5	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999960995076064	WITHOUT_CLASSIFICATION	3.900492393704885E-6	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999953357532657	WITHOUT_CLASSIFICATION	4.664246734271081E-6	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999999234281931	WITHOUT_CLASSIFICATION	7.657180687021959E-8	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999942533001328	WITHOUT_CLASSIFICATION	5.74669986727926E-6	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999989793142454	WITHOUT_CLASSIFICATION	1.0206857546321911E-6	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9993715620224572	WITHOUT_CLASSIFICATION	6.28437977542737E-4	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9993715620224572	WITHOUT_CLASSIFICATION	6.28437977542737E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999999908790165	WITHOUT_CLASSIFICATION	9.120983494599029E-8	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999665811141076	WITHOUT_CLASSIFICATION	3.341888589236279E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999889977794181	WITHOUT_CLASSIFICATION	1.1002220581782389E-5	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9998893032374999	WITHOUT_CLASSIFICATION	1.106967625000621E-4	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999784338408829	WITHOUT_CLASSIFICATION	2.1566159117141555E-5	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999823462947158	WITHOUT_CLASSIFICATION	1.7653705284177298E-5	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999976841046758	WITHOUT_CLASSIFICATION	2.3158953242045933E-6	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999242847245	WITHOUT_CLASSIFICATION	7.571527541714626E-8	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999965029798311	WITHOUT_CLASSIFICATION	3.497020168816337E-6	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999976222290965	WITHOUT_CLASSIFICATION	2.377770903512253E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999484702787863	WITHOUT_CLASSIFICATION	5.152972121355189E-5	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.99552999350097	WITHOUT_CLASSIFICATION	0.0044700064990299505	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999443591013044	WITHOUT_CLASSIFICATION	5.5640898695623476E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999793938715	WITHOUT_CLASSIFICATION	2.060612856331438E-8	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999995443386419	WITHOUT_CLASSIFICATION	4.5566135807215826E-7	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999964828414714	WITHOUT_CLASSIFICATION	3.517158528758949E-6	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999781840448	WITHOUT_CLASSIFICATION	2.1815955135759073E-8	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999969905913012	WITHOUT_CLASSIFICATION	3.009408698816255E-6	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9996222120771454	WITHOUT_CLASSIFICATION	3.777879228546699E-4	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999996194792	WITHOUT_CLASSIFICATION	3.8052085259401545E-10	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999981035232	WITHOUT_CLASSIFICATION	1.89647685657261E-9	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999998719519	WITHOUT_CLASSIFICATION	1.2804819463501807E-10	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999009303617	WITHOUT_CLASSIFICATION	9.906963835121372E-8	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999994831	WITHOUT_CLASSIFICATION	5.168519322138983E-13	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999926001084887	WITHOUT_CLASSIFICATION	7.399891511338195E-6	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999926001084887	WITHOUT_CLASSIFICATION	7.399891511338195E-6	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999156602582555	WITHOUT_CLASSIFICATION	8.433974174444128E-5	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999719292678518	WITHOUT_CLASSIFICATION	2.807073214820039E-4	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999523069174402	WITHOUT_CLASSIFICATION	4.7693082559735936E-5	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999984535038093	WITHOUT_CLASSIFICATION	1.5464961907425574E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999980327305457	WITHOUT_CLASSIFICATION	1.967269454351591E-6	IMPLEMENTATION
