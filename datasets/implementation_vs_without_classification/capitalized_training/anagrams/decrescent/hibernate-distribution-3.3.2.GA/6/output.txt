todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.996309817573326	WITHOUT_CLASSIFICATION	0.0036901824266739316	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.996309817573326	WITHOUT_CLASSIFICATION	0.0036901824266739316	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.9703065624918407	WITHOUT_CLASSIFICATION	0.029693437508159424	IMPLEMENTATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.538342950762451	IMPLEMENTATION	0.46165704923754913	WITHOUT_CLASSIFICATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.8290857842614202	WITHOUT_CLASSIFICATION	0.17091421573857976	IMPLEMENTATION
TODO: handle TypeDefs	IMPLEMENTATION	0.9934262352168048	IMPLEMENTATION	0.006573764783195237	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9931098386388804	WITHOUT_CLASSIFICATION	0.00689016136111966	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9919282231875132	WITHOUT_CLASSIFICATION	0.00807177681248689	IMPLEMENTATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.5424424739854236	WITHOUT_CLASSIFICATION	0.45755752601457644	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.6270767889760356	IMPLEMENTATION	0.3729232110239644	WITHOUT_CLASSIFICATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.8160041683346648	WITHOUT_CLASSIFICATION	0.1839958316653352	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.9937748498304383	IMPLEMENTATION	0.00622515016956172	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.660196524799873	WITHOUT_CLASSIFICATION	0.339803475200127	IMPLEMENTATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.660196524799873	WITHOUT_CLASSIFICATION	0.339803475200127	IMPLEMENTATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.9937506309150393	IMPLEMENTATION	0.006249369084960589	WITHOUT_CLASSIFICATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.9286571414220804	IMPLEMENTATION	0.07134285857791957	WITHOUT_CLASSIFICATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9992306703671703	IMPLEMENTATION	7.693296328298137E-4	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9998709074821811	WITHOUT_CLASSIFICATION	1.2909251781890137E-4	IMPLEMENTATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.999999999427065	WITHOUT_CLASSIFICATION	5.729350834026837E-10	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.7467565317038004	WITHOUT_CLASSIFICATION	0.2532434682961996	IMPLEMENTATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.896263163602879	IMPLEMENTATION	0.10373683639712088	WITHOUT_CLASSIFICATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9990097610218636	WITHOUT_CLASSIFICATION	9.902389781363612E-4	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9724383123779228	IMPLEMENTATION	0.027561687622077228	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9987238747470232	IMPLEMENTATION	0.0012761252529767963	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9987238747470232	IMPLEMENTATION	0.0012761252529767963	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.9964861942664764	IMPLEMENTATION	0.0035138057335235033	WITHOUT_CLASSIFICATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.8987831392055665	WITHOUT_CLASSIFICATION	0.10121686079443355	IMPLEMENTATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9913868817838637	IMPLEMENTATION	0.008613118216136266	WITHOUT_CLASSIFICATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9082225233735814	IMPLEMENTATION	0.0917774766264185	WITHOUT_CLASSIFICATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9879264158612385	IMPLEMENTATION	0.0120735841387615	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.5317646511407604	IMPLEMENTATION	0.4682353488592397	WITHOUT_CLASSIFICATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9166481278737656	IMPLEMENTATION	0.08335187212623443	WITHOUT_CLASSIFICATION
todo : look at optimizing these...	IMPLEMENTATION	0.9965962239180461	WITHOUT_CLASSIFICATION	0.003403776081953877	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.7640297564017726	IMPLEMENTATION	0.23597024359822727	WITHOUT_CLASSIFICATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9981160237025539	IMPLEMENTATION	0.0018839762974461644	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9917031256510696	WITHOUT_CLASSIFICATION	0.00829687434893047	IMPLEMENTATION
TODO: not visible to the user!	IMPLEMENTATION	0.7070646617881147	IMPLEMENTATION	0.29293533821188544	WITHOUT_CLASSIFICATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.5677495737063194	WITHOUT_CLASSIFICATION	0.43225042629368066	IMPLEMENTATION
TODO: use these in methods above	IMPLEMENTATION	0.8880779917165755	IMPLEMENTATION	0.11192200828342454	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.996043529395646	IMPLEMENTATION	0.0039564706043539654	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.996043529395646	IMPLEMENTATION	0.0039564706043539654	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9372533052573085	WITHOUT_CLASSIFICATION	0.06274669474269143	IMPLEMENTATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9984867590555543	WITHOUT_CLASSIFICATION	0.001513240944445737	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9846194542918159	WITHOUT_CLASSIFICATION	0.015380545708184059	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.977799375820217	IMPLEMENTATION	0.022200624179783003	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.7572443911443913	IMPLEMENTATION	0.24275560885560862	WITHOUT_CLASSIFICATION
TODO: formulas ?	IMPLEMENTATION	0.9802525840568903	WITHOUT_CLASSIFICATION	0.019747415943109713	IMPLEMENTATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.5179105403448171	WITHOUT_CLASSIFICATION	0.48208945965518285	IMPLEMENTATION
todo : cache this sql...	IMPLEMENTATION	0.9997830036176406	WITHOUT_CLASSIFICATION	2.1699638235939266E-4	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.9753113169993446	IMPLEMENTATION	0.02468868300065533	WITHOUT_CLASSIFICATION
TODO: cache this in an instvar	IMPLEMENTATION	0.8775533858069475	WITHOUT_CLASSIFICATION	0.1224466141930524	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.9919572726347209	IMPLEMENTATION	0.008042727365279114	WITHOUT_CLASSIFICATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.5561790986867364	IMPLEMENTATION	0.4438209013132635	WITHOUT_CLASSIFICATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.989436768183703	IMPLEMENTATION	0.010563231816297062	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.923997220966882	IMPLEMENTATION	0.07600277903311806	WITHOUT_CLASSIFICATION
TODO: terrible implementation!	IMPLEMENTATION	0.9987563246321168	IMPLEMENTATION	0.0012436753678831986	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.923997220966882	IMPLEMENTATION	0.07600277903311806	WITHOUT_CLASSIFICATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9999525977316713	IMPLEMENTATION	4.740226832862652E-5	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.9604072221225133	IMPLEMENTATION	0.039592777877486794	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.923997220966882	IMPLEMENTATION	0.07600277903311806	WITHOUT_CLASSIFICATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999976466485428	WITHOUT_CLASSIFICATION	2.353351457174681E-6	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999976466485428	WITHOUT_CLASSIFICATION	2.353351457174681E-6	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.996108917343829	IMPLEMENTATION	0.003891082656171015	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.9995289034942166	WITHOUT_CLASSIFICATION	4.7109650578340523E-4	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998910021308053	WITHOUT_CLASSIFICATION	1.0899786919473534E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999829351549554	WITHOUT_CLASSIFICATION	1.7064845044550436E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999829351549554	WITHOUT_CLASSIFICATION	1.7064845044550436E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999829351549554	WITHOUT_CLASSIFICATION	1.7064845044550436E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999829351549554	WITHOUT_CLASSIFICATION	1.7064845044550436E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999829351549554	WITHOUT_CLASSIFICATION	1.7064845044550436E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999829351549554	WITHOUT_CLASSIFICATION	1.7064845044550436E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999829351549554	WITHOUT_CLASSIFICATION	1.7064845044550436E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999943096181236	WITHOUT_CLASSIFICATION	5.690381876372965E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999943096181236	WITHOUT_CLASSIFICATION	5.690381876372965E-6	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999899296765796	WITHOUT_CLASSIFICATION	1.0070323420346108E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999362095869	WITHOUT_CLASSIFICATION	6.379041305591914E-8	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999989986263275	WITHOUT_CLASSIFICATION	1.0013736725447746E-6	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997113107587	WITHOUT_CLASSIFICATION	2.886892412655673E-7	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997113107587	WITHOUT_CLASSIFICATION	2.886892412655673E-7	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999998965124738	WITHOUT_CLASSIFICATION	1.0348752619716122E-7	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999988831245502	WITHOUT_CLASSIFICATION	1.1168754498467702E-6	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999990673209838	WITHOUT_CLASSIFICATION	9.326790162463468E-7	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999948340615966	WITHOUT_CLASSIFICATION	5.165938403436768E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999983315485512	WITHOUT_CLASSIFICATION	1.668451448834106E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999983315485512	WITHOUT_CLASSIFICATION	1.668451448834106E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999765941027776	WITHOUT_CLASSIFICATION	2.3405897222366858E-5	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9994593191046596	WITHOUT_CLASSIFICATION	5.406808953404042E-4	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.9999771568792443	WITHOUT_CLASSIFICATION	2.2843120755626027E-5	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999999986487417	WITHOUT_CLASSIFICATION	1.3512582325652014E-9	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999986540256	WITHOUT_CLASSIFICATION	1.3459744904393655E-9	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999972183385066	WITHOUT_CLASSIFICATION	2.781661493326859E-6	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.9999140083288344	WITHOUT_CLASSIFICATION	8.599167116558124E-5	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999889863904902	WITHOUT_CLASSIFICATION	1.1013609509789707E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999757740508167	WITHOUT_CLASSIFICATION	2.422594918330956E-5	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999983702375812	WITHOUT_CLASSIFICATION	1.629762418779101E-6	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999926389937526	WITHOUT_CLASSIFICATION	7.361006247474416E-6	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.999975199113247	WITHOUT_CLASSIFICATION	2.4800886753032212E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999999839345	WITHOUT_CLASSIFICATION	1.6065502181709884E-10	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999844040949727	WITHOUT_CLASSIFICATION	1.559590502724013E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999844040949727	WITHOUT_CLASSIFICATION	1.559590502724013E-5	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999953363201558	WITHOUT_CLASSIFICATION	4.663679844211116E-6	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999869790069967	WITHOUT_CLASSIFICATION	1.3020993003271318E-5	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999587116388	WITHOUT_CLASSIFICATION	4.128836117264204E-8	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999892724465262	WITHOUT_CLASSIFICATION	1.0727553473718875E-5	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9725855209029407	WITHOUT_CLASSIFICATION	0.02741447909705928	IMPLEMENTATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999999814117628	WITHOUT_CLASSIFICATION	1.8588237138271826E-8	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999996046681414	WITHOUT_CLASSIFICATION	3.953318585877008E-7	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999999582054941	WITHOUT_CLASSIFICATION	4.179450585314809E-8	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999999988923819	WITHOUT_CLASSIFICATION	1.1076181332864236E-9	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999992024753918	WITHOUT_CLASSIFICATION	7.975246082211584E-7	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999990000762137	WITHOUT_CLASSIFICATION	9.99923786420947E-7	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999950331105	WITHOUT_CLASSIFICATION	4.966889442339356E-9	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999997214742	WITHOUT_CLASSIFICATION	2.7852574519689927E-10	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999902772845722	WITHOUT_CLASSIFICATION	9.72271542771894E-6	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999838280902799	WITHOUT_CLASSIFICATION	1.6171909720209975E-5	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856290379898	WITHOUT_CLASSIFICATION	1.4370962010226797E-5	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999710831585115	WITHOUT_CLASSIFICATION	2.891684148856214E-5	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999998919267002	WITHOUT_CLASSIFICATION	1.0807329974873241E-7	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999985567357182	WITHOUT_CLASSIFICATION	1.4432642818507378E-6	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.999989366519445	WITHOUT_CLASSIFICATION	1.063348055506054E-5	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.999992992471584	WITHOUT_CLASSIFICATION	7.0075284160352E-6	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999972566234655	WITHOUT_CLASSIFICATION	2.7433765345635315E-6	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.999989366519445	WITHOUT_CLASSIFICATION	1.063348055506054E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999972566234655	WITHOUT_CLASSIFICATION	2.7433765345635315E-6	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999138488225	WITHOUT_CLASSIFICATION	8.615117744546681E-8	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999989120213075	WITHOUT_CLASSIFICATION	1.0879786924314718E-6	IMPLEMENTATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999898722292022	WITHOUT_CLASSIFICATION	1.0127770797757012E-5	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999646951813632	WITHOUT_CLASSIFICATION	3.530481863679653E-4	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999918227633	WITHOUT_CLASSIFICATION	8.177236586990666E-9	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999999985313613	WITHOUT_CLASSIFICATION	1.4686386840315798E-9	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9993621860150634	WITHOUT_CLASSIFICATION	6.378139849366179E-4	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9803242364258478	WITHOUT_CLASSIFICATION	0.019675763574152225	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9996550774983719	WITHOUT_CLASSIFICATION	3.449225016281014E-4	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9999409267279754	WITHOUT_CLASSIFICATION	5.9073272024573184E-5	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999856685884524	WITHOUT_CLASSIFICATION	1.4331411547727609E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999972566234655	WITHOUT_CLASSIFICATION	2.7433765345635315E-6	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999988867536	WITHOUT_CLASSIFICATION	1.1132463643919024E-9	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9998158072657073	WITHOUT_CLASSIFICATION	1.8419273429277495E-4	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999966088843074	WITHOUT_CLASSIFICATION	3.3911156924670393E-6	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999979067584	WITHOUT_CLASSIFICATION	2.093241595606385E-9	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999998682845821	WITHOUT_CLASSIFICATION	1.317154179127585E-7	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9998995343822432	WITHOUT_CLASSIFICATION	1.004656177566672E-4	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999998067905542	WITHOUT_CLASSIFICATION	1.932094457984902E-6	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999412566887	WITHOUT_CLASSIFICATION	5.874331145285197E-8	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999996976292548	WITHOUT_CLASSIFICATION	3.023707452106537E-7	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999999979257089	WITHOUT_CLASSIFICATION	2.0742911089614525E-8	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999862848349822	WITHOUT_CLASSIFICATION	1.3715165017865808E-5	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999995779082241	WITHOUT_CLASSIFICATION	4.220917758355048E-7	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.8665586741213804	WITHOUT_CLASSIFICATION	0.13344132587861962	IMPLEMENTATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999989007064839	WITHOUT_CLASSIFICATION	1.0992935161105117E-6	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999944025163	WITHOUT_CLASSIFICATION	5.597483744344283E-9	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9983171575814979	WITHOUT_CLASSIFICATION	0.0016828424185020945	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999905237248	WITHOUT_CLASSIFICATION	9.476275181917003E-9	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999983306764086	WITHOUT_CLASSIFICATION	1.6693235913933193E-6	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999964868244299	WITHOUT_CLASSIFICATION	3.5131755701709382E-6	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999986609857496	WITHOUT_CLASSIFICATION	1.3390142504404694E-6	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999999961555222	WITHOUT_CLASSIFICATION	3.844477783053703E-9	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999708240571	WITHOUT_CLASSIFICATION	2.9175942855428864E-8	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999683544333	WITHOUT_CLASSIFICATION	3.164556667205104E-8	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999999999879985	WITHOUT_CLASSIFICATION	1.200150123515956E-10	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999708240571	WITHOUT_CLASSIFICATION	2.9175942855428864E-8	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.99999986116958	WITHOUT_CLASSIFICATION	1.388304200455946E-7	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999998164153537	WITHOUT_CLASSIFICATION	1.8358464615864683E-7	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.999989366519445	WITHOUT_CLASSIFICATION	1.063348055506054E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999941799631868	WITHOUT_CLASSIFICATION	5.820036813150857E-6	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.999999556415608	WITHOUT_CLASSIFICATION	4.435843919747828E-7	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998142993887	WITHOUT_CLASSIFICATION	1.857006114088607E-7	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998142993887	WITHOUT_CLASSIFICATION	1.857006114088607E-7	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999973065626944	WITHOUT_CLASSIFICATION	2.6934373055692146E-6	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999998122575089	WITHOUT_CLASSIFICATION	1.8774249110992452E-7	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.999999979535359	WITHOUT_CLASSIFICATION	2.0464640981267532E-8	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999999778307	WITHOUT_CLASSIFICATION	2.2169315823298904E-11	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999998159402053	WITHOUT_CLASSIFICATION	1.8405979477036507E-7	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999714271260065	WITHOUT_CLASSIFICATION	2.8572873993544173E-5	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999957672219895	WITHOUT_CLASSIFICATION	4.232778010555022E-6	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.9999674530632798	WITHOUT_CLASSIFICATION	3.254693672023697E-5	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999941894487971	WITHOUT_CLASSIFICATION	5.810551202953069E-6	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.99999998405912	WITHOUT_CLASSIFICATION	1.594087995926574E-8	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995671893213	WITHOUT_CLASSIFICATION	4.328106786637464E-7	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995671893213	WITHOUT_CLASSIFICATION	4.328106786637464E-7	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999884811194725	WITHOUT_CLASSIFICATION	1.1518880527482498E-5	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999998647591967	WITHOUT_CLASSIFICATION	1.3524080326043842E-7	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999974344252076	WITHOUT_CLASSIFICATION	2.5655747923456425E-6	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995671893213	WITHOUT_CLASSIFICATION	4.328106786637464E-7	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999884811194725	WITHOUT_CLASSIFICATION	1.1518880527482498E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999884811194725	WITHOUT_CLASSIFICATION	1.1518880527482498E-5	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999996657557695	WITHOUT_CLASSIFICATION	3.3424423051396196E-7	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998882168721042	WITHOUT_CLASSIFICATION	1.1178312789584293E-4	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999776024192	WITHOUT_CLASSIFICATION	2.2397580786586196E-8	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999998425961911	WITHOUT_CLASSIFICATION	1.5740380889136461E-6	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9997845647655731	WITHOUT_CLASSIFICATION	2.1543523442703628E-4	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9997845647655731	WITHOUT_CLASSIFICATION	2.1543523442703628E-4	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999991471414037	WITHOUT_CLASSIFICATION	8.52858596401511E-7	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999999994391536	WITHOUT_CLASSIFICATION	5.608464453847318E-10	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.9999997960861062	WITHOUT_CLASSIFICATION	2.0391389381097948E-7	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999998874995448	WITHOUT_CLASSIFICATION	1.1250045524256492E-7	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999998874995448	WITHOUT_CLASSIFICATION	1.1250045524256492E-7	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999997429403935	WITHOUT_CLASSIFICATION	2.570596065480455E-7	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9997908680252497	WITHOUT_CLASSIFICATION	2.0913197475021198E-4	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999998364721117	WITHOUT_CLASSIFICATION	1.635278883140007E-7	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999877540813	WITHOUT_CLASSIFICATION	1.2245918697108835E-8	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999999999701834	WITHOUT_CLASSIFICATION	2.98166453657556E-11	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999999962294038	WITHOUT_CLASSIFICATION	3.7705962132574045E-8	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999983465734064	WITHOUT_CLASSIFICATION	1.65342659359245E-6	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999970055044837	WITHOUT_CLASSIFICATION	2.9944955162943813E-6	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.9999965965698936	WITHOUT_CLASSIFICATION	3.4034301065583963E-6	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999998364721117	WITHOUT_CLASSIFICATION	1.635278883140007E-7	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.9999931547721012	WITHOUT_CLASSIFICATION	6.845227898751254E-6	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999342327723805	WITHOUT_CLASSIFICATION	6.576722761951115E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999342327723805	WITHOUT_CLASSIFICATION	6.576722761951115E-5	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999602259617	WITHOUT_CLASSIFICATION	3.977403820595277E-8	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9982738971041037	WITHOUT_CLASSIFICATION	0.0017261028958963159	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.99999999912785	WITHOUT_CLASSIFICATION	8.721499924356845E-10	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9968332797162065	WITHOUT_CLASSIFICATION	0.0031667202837935607	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999999078529743	WITHOUT_CLASSIFICATION	9.214702568983734E-8	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999650419065081	WITHOUT_CLASSIFICATION	3.495809349177285E-5	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9999711262044663	WITHOUT_CLASSIFICATION	2.8873795533757775E-5	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.9999994350991501	WITHOUT_CLASSIFICATION	5.649008498622268E-7	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999961030758749	WITHOUT_CLASSIFICATION	3.896924125003644E-6	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999978072824	WITHOUT_CLASSIFICATION	2.192717528330364E-9	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999978072824	WITHOUT_CLASSIFICATION	2.192717528330364E-9	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999999145622156	WITHOUT_CLASSIFICATION	8.543778447030962E-8	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998910021308053	WITHOUT_CLASSIFICATION	1.0899786919473534E-4	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999999260303377	WITHOUT_CLASSIFICATION	7.396966236653372E-8	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999829351549554	WITHOUT_CLASSIFICATION	1.7064845044550436E-5	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.9999997113437916	WITHOUT_CLASSIFICATION	2.88656208390486E-7	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999943096181236	WITHOUT_CLASSIFICATION	5.690381876372965E-6	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999983566890659	WITHOUT_CLASSIFICATION	1.6433109341494038E-6	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999997372552354	WITHOUT_CLASSIFICATION	2.627447645858551E-7	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999998315419155	WITHOUT_CLASSIFICATION	1.684580844695915E-7	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.9999972498086113	WITHOUT_CLASSIFICATION	2.7501913888306044E-6	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.999997472019319	WITHOUT_CLASSIFICATION	2.5279806810228215E-6	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.9999818515990139	WITHOUT_CLASSIFICATION	1.8148400986116835E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.999963970652881	WITHOUT_CLASSIFICATION	3.6029347119055474E-5	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999976091985987	WITHOUT_CLASSIFICATION	2.390801401300733E-6	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999362095869	WITHOUT_CLASSIFICATION	6.379041305591914E-8	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999993493408647	WITHOUT_CLASSIFICATION	6.506591353324876E-7	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999993493408647	WITHOUT_CLASSIFICATION	6.506591353324876E-7	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.9999998542554771	WITHOUT_CLASSIFICATION	1.4574452293458346E-7	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999912131589546	WITHOUT_CLASSIFICATION	8.786841045420388E-6	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999998417047415	WITHOUT_CLASSIFICATION	1.5829525850597485E-7	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999987210133593	WITHOUT_CLASSIFICATION	1.2789866407837731E-6	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999928939471967	WITHOUT_CLASSIFICATION	7.106052803308463E-6	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999971926012268	WITHOUT_CLASSIFICATION	2.8073987733313505E-6	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997113107587	WITHOUT_CLASSIFICATION	2.886892412655673E-7	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999991194771425	WITHOUT_CLASSIFICATION	8.805228574936432E-7	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999987823156666	WITHOUT_CLASSIFICATION	1.2176843333624437E-6	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999969426191165	WITHOUT_CLASSIFICATION	3.0573808833332104E-6	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999989325048234	WITHOUT_CLASSIFICATION	1.0674951765320352E-6	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.9999840984034598	WITHOUT_CLASSIFICATION	1.5901596540174062E-5	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.9999430038272328	WITHOUT_CLASSIFICATION	5.6996172767111355E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999984542954954	WITHOUT_CLASSIFICATION	1.5457045046732306E-6	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999450603356	WITHOUT_CLASSIFICATION	5.4939664275766266E-8	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999983047020944	WITHOUT_CLASSIFICATION	1.695297905583344E-6	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999996882291371	WITHOUT_CLASSIFICATION	3.117708628852806E-7	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999995041466638	WITHOUT_CLASSIFICATION	4.958533362100539E-6	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.9999998887884591	WITHOUT_CLASSIFICATION	1.1121154092623797E-7	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999829351549554	WITHOUT_CLASSIFICATION	1.7064845044550436E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999829351549554	WITHOUT_CLASSIFICATION	1.7064845044550436E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999943096181236	WITHOUT_CLASSIFICATION	5.690381876372965E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999943096181236	WITHOUT_CLASSIFICATION	5.690381876372965E-6	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.999963970652881	WITHOUT_CLASSIFICATION	3.6029347119055474E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999993493408647	WITHOUT_CLASSIFICATION	6.506591353324876E-7	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999984542954954	WITHOUT_CLASSIFICATION	1.5457045046732306E-6	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999998965124738	WITHOUT_CLASSIFICATION	1.0348752619716122E-7	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999999592174874	WITHOUT_CLASSIFICATION	4.078251259375186E-8	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999998280183745	WITHOUT_CLASSIFICATION	1.719816255230384E-7	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999988463084996	WITHOUT_CLASSIFICATION	1.153691500436135E-6	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9999847066697473	WITHOUT_CLASSIFICATION	1.529333025277574E-5	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999503759216	WITHOUT_CLASSIFICATION	4.962407853922987E-8	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.9999921148608785	WITHOUT_CLASSIFICATION	7.885139121587248E-6	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999969632206356	WITHOUT_CLASSIFICATION	3.0367793644580665E-6	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9999672449361519	WITHOUT_CLASSIFICATION	3.275506384801236E-5	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.999997743769605	WITHOUT_CLASSIFICATION	2.2562303949296284E-6	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999958286773565	WITHOUT_CLASSIFICATION	4.171322643570619E-6	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999958286773565	WITHOUT_CLASSIFICATION	4.171322643570619E-6	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999965755549	WITHOUT_CLASSIFICATION	3.424445101407959E-9	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999994446170568	WITHOUT_CLASSIFICATION	5.553829431275263E-7	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9998845644516938	WITHOUT_CLASSIFICATION	1.1543554830614788E-4	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9998461618947813	WITHOUT_CLASSIFICATION	1.5383810521874233E-4	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999827955196	WITHOUT_CLASSIFICATION	1.7204480400216722E-8	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.9999994435661986	WITHOUT_CLASSIFICATION	5.564338013858257E-7	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.9999995260908706	WITHOUT_CLASSIFICATION	4.739091293664784E-7	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999988831245502	WITHOUT_CLASSIFICATION	1.1168754498467702E-6	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.9999749826165567	WITHOUT_CLASSIFICATION	2.501738344335067E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.999999448356603	WITHOUT_CLASSIFICATION	5.516433970251629E-7	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.999999448356603	WITHOUT_CLASSIFICATION	5.516433970251629E-7	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.999999470173855	WITHOUT_CLASSIFICATION	5.298261448984633E-7	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999993736331917	WITHOUT_CLASSIFICATION	6.263668082175235E-7	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.999992155489776	WITHOUT_CLASSIFICATION	7.844510224061778E-6	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.999999141617018	WITHOUT_CLASSIFICATION	8.583829821290751E-7	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.9999927558014667	WITHOUT_CLASSIFICATION	7.244198533330349E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999943096181236	WITHOUT_CLASSIFICATION	5.690381876372965E-6	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.999963970652881	WITHOUT_CLASSIFICATION	3.6029347119055474E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999362095869	WITHOUT_CLASSIFICATION	6.379041305591914E-8	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999984542954954	WITHOUT_CLASSIFICATION	1.5457045046732306E-6	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999984542954954	WITHOUT_CLASSIFICATION	1.5457045046732306E-6	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999991163254949	WITHOUT_CLASSIFICATION	8.836745051648267E-7	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999991163254949	WITHOUT_CLASSIFICATION	8.836745051648267E-7	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999998593884492	WITHOUT_CLASSIFICATION	1.4061155080375387E-6	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999696078134447	WITHOUT_CLASSIFICATION	3.039218655527088E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999696078134447	WITHOUT_CLASSIFICATION	3.039218655527088E-5	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9999794975186387	WITHOUT_CLASSIFICATION	2.0502481361362396E-5	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.9999988734636751	WITHOUT_CLASSIFICATION	1.1265363249379458E-6	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.9999997484939362	WITHOUT_CLASSIFICATION	2.515060637211397E-7	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999992334968512	WITHOUT_CLASSIFICATION	7.665031487728891E-7	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999997680138358	WITHOUT_CLASSIFICATION	2.3198616414198748E-7	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999948340615966	WITHOUT_CLASSIFICATION	5.165938403436768E-6	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999948340615966	WITHOUT_CLASSIFICATION	5.165938403436768E-6	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.9980738750734989	WITHOUT_CLASSIFICATION	0.0019261249265011644	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.9999963980265324	WITHOUT_CLASSIFICATION	3.6019734674765217E-6	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.9999982867275476	WITHOUT_CLASSIFICATION	1.713272452412092E-6	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.9999458638454518	WITHOUT_CLASSIFICATION	5.4136154548192174E-5	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9999992912982082	WITHOUT_CLASSIFICATION	7.087017917312941E-7	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.9999655035348748	WITHOUT_CLASSIFICATION	3.449646512524918E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999983315485512	WITHOUT_CLASSIFICATION	1.668451448834106E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999947702961927	WITHOUT_CLASSIFICATION	5.229703807319977E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999947702961927	WITHOUT_CLASSIFICATION	5.229703807319977E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999765941027776	WITHOUT_CLASSIFICATION	2.3405897222366858E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999765941027776	WITHOUT_CLASSIFICATION	2.3405897222366858E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999777029806094	WITHOUT_CLASSIFICATION	2.229701939059587E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999777029806094	WITHOUT_CLASSIFICATION	2.229701939059587E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999944738409	WITHOUT_CLASSIFICATION	5.526159062037295E-9	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999944738409	WITHOUT_CLASSIFICATION	5.526159062037295E-9	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999948340615966	WITHOUT_CLASSIFICATION	5.165938403436768E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999983315485512	WITHOUT_CLASSIFICATION	1.668451448834106E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999947702961927	WITHOUT_CLASSIFICATION	5.229703807319977E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999947702961927	WITHOUT_CLASSIFICATION	5.229703807319977E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999765941027776	WITHOUT_CLASSIFICATION	2.3405897222366858E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999777029806094	WITHOUT_CLASSIFICATION	2.229701939059587E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999777029806094	WITHOUT_CLASSIFICATION	2.229701939059587E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999944738409	WITHOUT_CLASSIFICATION	5.526159062037295E-9	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999903774896173	WITHOUT_CLASSIFICATION	9.622510382743737E-6	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999999774397048	WITHOUT_CLASSIFICATION	2.2560295183839905E-8	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.9999954480455308	WITHOUT_CLASSIFICATION	4.551954469215228E-6	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9994553041102423	WITHOUT_CLASSIFICATION	5.446958897576827E-4	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.9999977679217809	WITHOUT_CLASSIFICATION	2.2320782191932794E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999485066927292	WITHOUT_CLASSIFICATION	5.149330727080955E-5	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999050962168	WITHOUT_CLASSIFICATION	9.490378325054136E-8	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999999093717795	WITHOUT_CLASSIFICATION	9.062822056824594E-8	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999986966116376	WITHOUT_CLASSIFICATION	1.303388362346837E-6	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999808281149	WITHOUT_CLASSIFICATION	1.9171885126423996E-8	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999947077252865	WITHOUT_CLASSIFICATION	5.292274713448102E-6	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999998790536296	WITHOUT_CLASSIFICATION	1.209463702994231E-7	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999973065626944	WITHOUT_CLASSIFICATION	2.6934373055692146E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999485066927292	WITHOUT_CLASSIFICATION	5.149330727080955E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999485066927292	WITHOUT_CLASSIFICATION	5.149330727080955E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999485066927292	WITHOUT_CLASSIFICATION	5.149330727080955E-5	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999999845997533	WITHOUT_CLASSIFICATION	1.540024676893284E-8	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999935602474	WITHOUT_CLASSIFICATION	6.439752559093E-9	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999935602474	WITHOUT_CLASSIFICATION	6.439752559093E-9	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999943079523	WITHOUT_CLASSIFICATION	5.692047659137166E-9	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999999634009	WITHOUT_CLASSIFICATION	3.65990174657993E-11	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999857324222	WITHOUT_CLASSIFICATION	1.4267577658854174E-8	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999939786691995	WITHOUT_CLASSIFICATION	6.021330800503181E-6	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999939786691995	WITHOUT_CLASSIFICATION	6.021330800503181E-6	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999986540256	WITHOUT_CLASSIFICATION	1.3459744904393655E-9	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999935101861448	WITHOUT_CLASSIFICATION	6.489813855264774E-6	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999935101861448	WITHOUT_CLASSIFICATION	6.489813855264774E-6	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999999970735756	WITHOUT_CLASSIFICATION	2.926424406835249E-8	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999284692205	WITHOUT_CLASSIFICATION	7.153077954357836E-8	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999994694784	WITHOUT_CLASSIFICATION	5.305215872200565E-10	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999954173590393	WITHOUT_CLASSIFICATION	4.58264096073079E-6	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.9999904133109825	WITHOUT_CLASSIFICATION	9.586689017490072E-6	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.9999818892880195	WITHOUT_CLASSIFICATION	1.8110711980489276E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999972183385066	WITHOUT_CLASSIFICATION	2.781661493326859E-6	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999915339934783	WITHOUT_CLASSIFICATION	8.466006521791896E-6	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.9771962526912772	WITHOUT_CLASSIFICATION	0.02280374730872276	IMPLEMENTATION
ID	WITHOUT_CLASSIFICATION	0.9998337890088584	WITHOUT_CLASSIFICATION	1.6621099114164545E-4	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.999998703381544	WITHOUT_CLASSIFICATION	1.29661845605744E-6	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999757740508167	WITHOUT_CLASSIFICATION	2.422594918330956E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998127020542	WITHOUT_CLASSIFICATION	1.872979457445118E-7	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999804986723733	WITHOUT_CLASSIFICATION	1.9501327626688313E-5	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999822176305	WITHOUT_CLASSIFICATION	1.778236939351367E-8	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999757740508167	WITHOUT_CLASSIFICATION	2.422594918330956E-5	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999226633106	WITHOUT_CLASSIFICATION	7.733668939718059E-8	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999899154765983	WITHOUT_CLASSIFICATION	1.0084523401730106E-5	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999907786953857	WITHOUT_CLASSIFICATION	9.221304614339146E-6	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9999808812610119	WITHOUT_CLASSIFICATION	1.9118738988096738E-5	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.999997607317446	WITHOUT_CLASSIFICATION	2.3926825539914246E-6	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999986385293246	WITHOUT_CLASSIFICATION	1.3614706754772027E-6	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999983726807158	WITHOUT_CLASSIFICATION	1.6273192842510842E-6	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.999975199113247	WITHOUT_CLASSIFICATION	2.4800886753032212E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999985847726159	WITHOUT_CLASSIFICATION	1.4152273840418653E-6	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999999839345	WITHOUT_CLASSIFICATION	1.6065502181709884E-10	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999747328699506	WITHOUT_CLASSIFICATION	2.5267130049310148E-5	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.9999999983053922	WITHOUT_CLASSIFICATION	1.6946077482587562E-9	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999629621724304	WITHOUT_CLASSIFICATION	3.703782756962123E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999972183385066	WITHOUT_CLASSIFICATION	2.781661493326859E-6	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999985847726159	WITHOUT_CLASSIFICATION	1.4152273840418653E-6	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999747328699506	WITHOUT_CLASSIFICATION	2.5267130049310148E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999629621724304	WITHOUT_CLASSIFICATION	3.703782756962123E-5	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999932708076706	WITHOUT_CLASSIFICATION	6.7291923293737155E-6	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.9999924693943363	WITHOUT_CLASSIFICATION	7.530605663701191E-6	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999983625607483	WITHOUT_CLASSIFICATION	1.6374392516414212E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999844040949727	WITHOUT_CLASSIFICATION	1.559590502724013E-5	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999946341975129	WITHOUT_CLASSIFICATION	5.365802487002916E-6	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9999874247730061	WITHOUT_CLASSIFICATION	1.2575226993953164E-5	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.9999990767356937	WITHOUT_CLASSIFICATION	9.232643062872605E-7	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999911818059997	WITHOUT_CLASSIFICATION	8.818194000338505E-6	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999992938949692	WITHOUT_CLASSIFICATION	7.061050307117341E-7	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999995929796639	WITHOUT_CLASSIFICATION	4.070203360660196E-7	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999994955063851	WITHOUT_CLASSIFICATION	5.044936148962472E-7	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999848866461477	WITHOUT_CLASSIFICATION	1.5113353852325438E-5	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999981152709596	WITHOUT_CLASSIFICATION	1.8847290404167426E-6	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.99999521782411	WITHOUT_CLASSIFICATION	4.782175889995206E-6	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.9999897022295067	WITHOUT_CLASSIFICATION	1.0297770493230785E-5	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999980402087925	WITHOUT_CLASSIFICATION	1.9597912075193462E-6	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999869790069967	WITHOUT_CLASSIFICATION	1.3020993003271318E-5	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999636774926	WITHOUT_CLASSIFICATION	3.632250754754408E-8	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.9999860022169811	WITHOUT_CLASSIFICATION	1.3997783019003245E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999985847726159	WITHOUT_CLASSIFICATION	1.4152273840418653E-6	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999997990287017	WITHOUT_CLASSIFICATION	2.0097129824525064E-7	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.999999637818664	WITHOUT_CLASSIFICATION	3.6218133605635893E-7	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.9999992099665876	WITHOUT_CLASSIFICATION	7.900334124404005E-7	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999813552339134	WITHOUT_CLASSIFICATION	1.8644766086546952E-5	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.9999975772706592	WITHOUT_CLASSIFICATION	2.422729340777227E-6	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999965781364726	WITHOUT_CLASSIFICATION	3.4218635274352366E-6	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999998165441663	WITHOUT_CLASSIFICATION	1.8345583373178652E-7	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999996888277879	WITHOUT_CLASSIFICATION	3.1117221215306974E-7	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999993823244346	WITHOUT_CLASSIFICATION	6.176755653324174E-7	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.9999811223028343	WITHOUT_CLASSIFICATION	1.8877697165725248E-5	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999814456258431	WITHOUT_CLASSIFICATION	1.8554374156940533E-5	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999834807943824	WITHOUT_CLASSIFICATION	1.6519205617636215E-5	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9316730047051663	WITHOUT_CLASSIFICATION	0.06832699529483366	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999892724465262	WITHOUT_CLASSIFICATION	1.0727553473718875E-5	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.9999998936648736	WITHOUT_CLASSIFICATION	1.0633512644442535E-7	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999985174693024	WITHOUT_CLASSIFICATION	1.4825306976313318E-6	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.9999932413067872	WITHOUT_CLASSIFICATION	6.758693212779463E-6	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999950199694525	WITHOUT_CLASSIFICATION	4.980030547545543E-6	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.9999971427656673	WITHOUT_CLASSIFICATION	2.857234332767192E-6	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999468725496754	WITHOUT_CLASSIFICATION	5.312745032457888E-5	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999978357299701	WITHOUT_CLASSIFICATION	2.1642700299136514E-6	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999736695867654	WITHOUT_CLASSIFICATION	2.633041323463788E-5	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999996771228378	WITHOUT_CLASSIFICATION	3.2287716224438406E-7	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999998919542542	WITHOUT_CLASSIFICATION	1.0804574570689671E-7	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999892806942579	WITHOUT_CLASSIFICATION	1.0719305742115014E-5	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999892806942579	WITHOUT_CLASSIFICATION	1.0719305742115014E-5	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999826897285411	WITHOUT_CLASSIFICATION	1.7310271458902122E-5	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999589519446347	WITHOUT_CLASSIFICATION	4.1048055365193045E-5	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999892511407471	WITHOUT_CLASSIFICATION	1.0748859252990568E-5	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999993324402808	WITHOUT_CLASSIFICATION	6.675597191326544E-7	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999998825600173	WITHOUT_CLASSIFICATION	1.1743998278919452E-7	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999999530151839	WITHOUT_CLASSIFICATION	4.6984816288327886E-8	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999952228769551	WITHOUT_CLASSIFICATION	4.777123045001598E-6	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999767041435091	WITHOUT_CLASSIFICATION	2.3295856490894642E-5	IMPLEMENTATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.999998903929463	WITHOUT_CLASSIFICATION	1.0960705370385185E-6	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.999999535062422	WITHOUT_CLASSIFICATION	4.649375780095917E-7	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999938036577354	WITHOUT_CLASSIFICATION	6.196342264640298E-6	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.999999462907451	WITHOUT_CLASSIFICATION	5.370925489061329E-7	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.9999990111421385	WITHOUT_CLASSIFICATION	9.888578614266514E-7	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.999999523502501	WITHOUT_CLASSIFICATION	4.7649749895674726E-7	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999907822089107	WITHOUT_CLASSIFICATION	9.217791089288739E-6	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999994199027739	WITHOUT_CLASSIFICATION	5.800972262435273E-7	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999784868642786	WITHOUT_CLASSIFICATION	2.151313572147061E-5	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999998366280809	WITHOUT_CLASSIFICATION	1.6337191908029154E-7	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997902875872	WITHOUT_CLASSIFICATION	2.0971241262885293E-7	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999818009172	WITHOUT_CLASSIFICATION	1.8199082799592398E-8	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999897625785588	WITHOUT_CLASSIFICATION	1.023742144128282E-5	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999642408499	WITHOUT_CLASSIFICATION	3.5759150047193993E-8	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999999677553885	WITHOUT_CLASSIFICATION	3.224461153990578E-8	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999930138367483	WITHOUT_CLASSIFICATION	6.986163251682785E-6	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999998450464314	WITHOUT_CLASSIFICATION	1.5495356860668737E-7	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999976609986327	WITHOUT_CLASSIFICATION	2.339001367198908E-6	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.999985702493981	WITHOUT_CLASSIFICATION	1.4297506019027368E-5	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999996113256127	WITHOUT_CLASSIFICATION	3.8867438735742385E-7	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999999998699766	WITHOUT_CLASSIFICATION	1.3002339170955816E-9	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999974707667929	WITHOUT_CLASSIFICATION	2.5292332070574917E-6	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999818009172	WITHOUT_CLASSIFICATION	1.8199082799592398E-8	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9998334112407823	WITHOUT_CLASSIFICATION	1.665887592178001E-4	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999930651258897	WITHOUT_CLASSIFICATION	6.934874110301534E-6	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999993621773918	WITHOUT_CLASSIFICATION	6.378226081942335E-6	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.999973039172947	WITHOUT_CLASSIFICATION	2.6960827053033944E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.999973039172947	WITHOUT_CLASSIFICATION	2.6960827053033944E-5	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999999795188331	WITHOUT_CLASSIFICATION	2.0481166792655328E-8	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.99999982849165	WITHOUT_CLASSIFICATION	1.715083500120682E-7	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999986572605867	WITHOUT_CLASSIFICATION	1.3427394133191783E-6	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999986572605867	WITHOUT_CLASSIFICATION	1.3427394133191783E-6	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999996771228378	WITHOUT_CLASSIFICATION	3.2287716224438406E-7	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999995862041421	WITHOUT_CLASSIFICATION	4.137958578678662E-7	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999860326301196	WITHOUT_CLASSIFICATION	1.3967369880258058E-5	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999999598387318	WITHOUT_CLASSIFICATION	4.0161268198553765E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999999145622156	WITHOUT_CLASSIFICATION	8.543778447030962E-8	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999860326301196	WITHOUT_CLASSIFICATION	1.3967369880258058E-5	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999999598387318	WITHOUT_CLASSIFICATION	4.0161268198553765E-7	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999819375676375	WITHOUT_CLASSIFICATION	1.806243236246382E-5	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999962623203	WITHOUT_CLASSIFICATION	3.73767977440494E-9	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999998937155514	WITHOUT_CLASSIFICATION	1.0628444851215806E-7	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.9999987164017546	WITHOUT_CLASSIFICATION	1.2835982452874717E-6	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9998335142494277	WITHOUT_CLASSIFICATION	1.664857505723476E-4	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9997320031075935	WITHOUT_CLASSIFICATION	2.679968924065058E-4	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.999999695140626	WITHOUT_CLASSIFICATION	3.048593739829374E-7	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.999999695140626	WITHOUT_CLASSIFICATION	3.048593739829374E-7	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999999896247118	WITHOUT_CLASSIFICATION	1.0375288222645948E-8	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999988650105	WITHOUT_CLASSIFICATION	1.1349895631295044E-9	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999793931221158	WITHOUT_CLASSIFICATION	2.060687788421825E-5	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999985661076	WITHOUT_CLASSIFICATION	1.4338925269832582E-9	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999969710259995	WITHOUT_CLASSIFICATION	3.028974000391222E-6	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999990440319102	WITHOUT_CLASSIFICATION	9.559680897996654E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999999145622156	WITHOUT_CLASSIFICATION	8.543778447030962E-8	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999997237712241	WITHOUT_CLASSIFICATION	2.76228775877802E-7	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999896955678	WITHOUT_CLASSIFICATION	1.0304432280620481E-8	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999896955678	WITHOUT_CLASSIFICATION	1.0304432280620481E-8	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999940334705425	WITHOUT_CLASSIFICATION	5.966529457623655E-6	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999819375676375	WITHOUT_CLASSIFICATION	1.806243236246382E-5	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.999953900229434	WITHOUT_CLASSIFICATION	4.609977056610081E-5	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999526204621384	WITHOUT_CLASSIFICATION	4.737953786148478E-5	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9986641812236152	WITHOUT_CLASSIFICATION	0.001335818776384896	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999999359104094	WITHOUT_CLASSIFICATION	6.408959070686576E-8	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997324386785624	WITHOUT_CLASSIFICATION	2.6756132143758546E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999819375676375	WITHOUT_CLASSIFICATION	1.806243236246382E-5	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999999359104094	WITHOUT_CLASSIFICATION	6.408959070686576E-8	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997324386785624	WITHOUT_CLASSIFICATION	2.6756132143758546E-4	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.999999747865188	WITHOUT_CLASSIFICATION	2.5213481199089303E-7	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999979414059659	WITHOUT_CLASSIFICATION	2.0585940340422583E-6	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999998793978156	WITHOUT_CLASSIFICATION	1.206021844340396E-7	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999819375676375	WITHOUT_CLASSIFICATION	1.806243236246382E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999819375676375	WITHOUT_CLASSIFICATION	1.806243236246382E-5	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9999994101458821	WITHOUT_CLASSIFICATION	5.898541179322204E-7	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.999998744729988	WITHOUT_CLASSIFICATION	1.2552700121535223E-6	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.9999994835581478	WITHOUT_CLASSIFICATION	5.164418520985283E-7	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999902772845722	WITHOUT_CLASSIFICATION	9.72271542771894E-6	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.9999996750794676	WITHOUT_CLASSIFICATION	3.249205323393595E-7	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999956608014	WITHOUT_CLASSIFICATION	4.339198556825099E-9	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999683073727814	WITHOUT_CLASSIFICATION	3.169262721861278E-5	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999996979517051	WITHOUT_CLASSIFICATION	3.020482949707552E-7	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999945881941545	WITHOUT_CLASSIFICATION	5.411805845393223E-6	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.9999981035671716	WITHOUT_CLASSIFICATION	1.896432828451627E-6	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999978843128159	WITHOUT_CLASSIFICATION	2.115687184097459E-5	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9998047934111638	WITHOUT_CLASSIFICATION	1.9520658883611785E-4	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999890876421	WITHOUT_CLASSIFICATION	1.0912357812717684E-8	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999958989905538	WITHOUT_CLASSIFICATION	4.101009446204973E-5	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984958370615	WITHOUT_CLASSIFICATION	1.5041629385192172E-6	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999707502787	WITHOUT_CLASSIFICATION	2.924972130723298E-8	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999902772845722	WITHOUT_CLASSIFICATION	9.72271542771894E-6	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999971778772876	WITHOUT_CLASSIFICATION	2.82212271233381E-6	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999983842006106	WITHOUT_CLASSIFICATION	1.615799389389516E-6	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999687999459	WITHOUT_CLASSIFICATION	3.1200054122401514E-8	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999810938858428	WITHOUT_CLASSIFICATION	1.8906114157294062E-5	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9998431826403106	WITHOUT_CLASSIFICATION	1.568173596894475E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9998431826403106	WITHOUT_CLASSIFICATION	1.568173596894475E-4	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999902772845722	WITHOUT_CLASSIFICATION	9.72271542771894E-6	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999976829066534	WITHOUT_CLASSIFICATION	2.317093346561694E-6	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999999641006306	WITHOUT_CLASSIFICATION	3.589936937397527E-8	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9971294015839186	WITHOUT_CLASSIFICATION	0.0028705984160814217	IMPLEMENTATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999999591311545	WITHOUT_CLASSIFICATION	4.086884551042591E-8	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999997565667219	WITHOUT_CLASSIFICATION	2.434332780949304E-6	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999834271602049	WITHOUT_CLASSIFICATION	1.6572839795079685E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.999999060073247	WITHOUT_CLASSIFICATION	9.399267529820599E-7	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999994856345772	WITHOUT_CLASSIFICATION	5.143654227742913E-7	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999905606935723	WITHOUT_CLASSIFICATION	9.439306427831137E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401235880008	WITHOUT_CLASSIFICATION	5.987641199921833E-5	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999998241690793	WITHOUT_CLASSIFICATION	1.7583092063371205E-7	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999992498211587	WITHOUT_CLASSIFICATION	7.5017884117618E-7	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999990812997952	WITHOUT_CLASSIFICATION	9.18700204913187E-7	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9997239840022486	WITHOUT_CLASSIFICATION	2.7601599775140966E-4	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999971560355064	WITHOUT_CLASSIFICATION	2.8439644935287434E-6	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999382647428	WITHOUT_CLASSIFICATION	6.173525726285636E-8	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999999964335553	WITHOUT_CLASSIFICATION	3.5664448362656575E-9	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999994092195679	WITHOUT_CLASSIFICATION	5.907804321522148E-7	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.999991723623174	WITHOUT_CLASSIFICATION	8.276376825912086E-6	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999898729096	WITHOUT_CLASSIFICATION	1.0127090402060158E-7	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999859857586	WITHOUT_CLASSIFICATION	1.4014241477437757E-8	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999816865396546	WITHOUT_CLASSIFICATION	1.8313460345470252E-5	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999492646494852	WITHOUT_CLASSIFICATION	5.0735350514742246E-5	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974361045422012	WITHOUT_CLASSIFICATION	0.0025638954577987313	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.994886885608057	WITHOUT_CLASSIFICATION	0.005113114391942923	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998092186145948	WITHOUT_CLASSIFICATION	1.9078138540525052E-4	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999743589193071	WITHOUT_CLASSIFICATION	2.5641080692942844E-5	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998354816750828	WITHOUT_CLASSIFICATION	0.0016451832491719564	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996059045942048	WITHOUT_CLASSIFICATION	3.9409540579510863E-4	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9914542724010967	WITHOUT_CLASSIFICATION	0.0085457275989033	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999618985133355	WITHOUT_CLASSIFICATION	3.810148666455604E-5	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.9999625106937486	WITHOUT_CLASSIFICATION	3.748930625142545E-5	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999942118366612	WITHOUT_CLASSIFICATION	5.788163338868468E-6	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999346978912848	WITHOUT_CLASSIFICATION	6.530210871523743E-5	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785443600732	WITHOUT_CLASSIFICATION	2.145563992692464E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999201708794535	WITHOUT_CLASSIFICATION	7.982912054642115E-5	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994926803571795	WITHOUT_CLASSIFICATION	5.073196428204937E-4	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999585085000045	WITHOUT_CLASSIFICATION	4.1491499995534355E-5	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999869742884876	WITHOUT_CLASSIFICATION	1.3025711512316384E-5	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986266406099857	WITHOUT_CLASSIFICATION	0.0013733593900143474	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998647956213019	WITHOUT_CLASSIFICATION	0.001352043786980957	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999996416378447	WITHOUT_CLASSIFICATION	3.583621552491623E-7	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999535575082558	WITHOUT_CLASSIFICATION	4.644249174421253E-5	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9561673359918202	WITHOUT_CLASSIFICATION	0.04383266400817975	IMPLEMENTATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999995145233571	WITHOUT_CLASSIFICATION	4.854766429251636E-7	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999998597870664	WITHOUT_CLASSIFICATION	1.4021293352992103E-7	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999995052887231	WITHOUT_CLASSIFICATION	4.947112769946575E-7	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.999997629436133	WITHOUT_CLASSIFICATION	2.3705638670363E-6	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999994799047258	WITHOUT_CLASSIFICATION	5.200952741605294E-7	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999996396224	WITHOUT_CLASSIFICATION	3.603776782220718E-10	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999999208702963	WITHOUT_CLASSIFICATION	7.912970370522713E-8	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999973089121486	WITHOUT_CLASSIFICATION	2.691087851407955E-6	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999893120460542	WITHOUT_CLASSIFICATION	1.0687953945733866E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401235880008	WITHOUT_CLASSIFICATION	5.987641199921833E-5	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999958407007665	WITHOUT_CLASSIFICATION	4.15929923346765E-6	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999990281491369	WITHOUT_CLASSIFICATION	9.71850863138093E-7	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999843813969	WITHOUT_CLASSIFICATION	1.5618603011898535E-8	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.99999999745552	WITHOUT_CLASSIFICATION	2.5444798766468887E-9	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999621148713862	WITHOUT_CLASSIFICATION	3.7885128613830964E-5	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9999964489075872	WITHOUT_CLASSIFICATION	3.551092412798905E-6	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999997492901849	WITHOUT_CLASSIFICATION	2.507098151004666E-7	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525956132497	WITHOUT_CLASSIFICATION	4.740438675034021E-5	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999815095747452	WITHOUT_CLASSIFICATION	1.849042525483041E-5	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977608366625	WITHOUT_CLASSIFICATION	2.239163337478699E-6	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999917439447444	WITHOUT_CLASSIFICATION	8.25605525550325E-6	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9987909858286232	WITHOUT_CLASSIFICATION	0.0012090141713767507	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999963086246146	WITHOUT_CLASSIFICATION	3.69137538534742E-6	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9995869051346943	WITHOUT_CLASSIFICATION	4.1309486530574614E-4	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999324096974891	WITHOUT_CLASSIFICATION	6.75903025108923E-5	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998933220565934	WITHOUT_CLASSIFICATION	1.0667794340664466E-4	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999801455154	WITHOUT_CLASSIFICATION	1.985448457425442E-8	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999999761316574	WITHOUT_CLASSIFICATION	2.38683425611708E-8	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999999865723944	WITHOUT_CLASSIFICATION	1.3427605604694793E-7	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999986125601	WITHOUT_CLASSIFICATION	1.3874398481017374E-9	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9998131654818827	WITHOUT_CLASSIFICATION	1.8683451811735258E-4	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999496605671758	WITHOUT_CLASSIFICATION	5.033943282418744E-5	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999999493794	WITHOUT_CLASSIFICATION	5.062063656585905E-11	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999956132573108	WITHOUT_CLASSIFICATION	4.386742689272316E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401235880008	WITHOUT_CLASSIFICATION	5.987641199921833E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999995052887231	WITHOUT_CLASSIFICATION	4.947112769946575E-7	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999999859656029	WITHOUT_CLASSIFICATION	1.403439710128131E-7	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999997989861711	WITHOUT_CLASSIFICATION	2.0101382890699236E-7	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999903650249312	WITHOUT_CLASSIFICATION	9.634975068698956E-6	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999984842153289	WITHOUT_CLASSIFICATION	1.5157846711400742E-6	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999998660272809	WITHOUT_CLASSIFICATION	1.3397271909775021E-7	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.9999998152420103	WITHOUT_CLASSIFICATION	1.847579897392131E-7	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9987909858286232	WITHOUT_CLASSIFICATION	0.0012090141713767507	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999998210248527	WITHOUT_CLASSIFICATION	1.7897514718553807E-7	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999983135854477	WITHOUT_CLASSIFICATION	1.6864145523322852E-6	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998664351123	WITHOUT_CLASSIFICATION	1.335648878320876E-7	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999979623317268	WITHOUT_CLASSIFICATION	2.037668273250515E-6	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999431713533	WITHOUT_CLASSIFICATION	5.682864656358674E-8	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998074977272	WITHOUT_CLASSIFICATION	1.925022729164708E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401235880008	WITHOUT_CLASSIFICATION	5.987641199921833E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401235880008	WITHOUT_CLASSIFICATION	5.987641199921833E-5	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999981897671386	WITHOUT_CLASSIFICATION	1.8102328614441323E-6	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999998729422643	WITHOUT_CLASSIFICATION	1.2705773567073597E-7	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999999263547777	WITHOUT_CLASSIFICATION	7.364522227385611E-8	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999995372930924	WITHOUT_CLASSIFICATION	4.6270690751963284E-7	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999999676916772	WITHOUT_CLASSIFICATION	3.2308322904002455E-8	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999967846159795	WITHOUT_CLASSIFICATION	3.215384020377011E-6	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.999998967527051	WITHOUT_CLASSIFICATION	1.032472949032206E-6	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.9999879095316309	WITHOUT_CLASSIFICATION	1.2090468369165645E-5	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999999526295719	WITHOUT_CLASSIFICATION	4.737042817200373E-8	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401235880008	WITHOUT_CLASSIFICATION	5.987641199921833E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999876601479	WITHOUT_CLASSIFICATION	1.2339852241667856E-8	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999838920114135	WITHOUT_CLASSIFICATION	1.6107988586515624E-5	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999999990823841	WITHOUT_CLASSIFICATION	9.176158124010701E-10	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999997161102008	WITHOUT_CLASSIFICATION	2.83889799252486E-7	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999974832401187	WITHOUT_CLASSIFICATION	2.5167598813189704E-6	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999431564423996	WITHOUT_CLASSIFICATION	5.6843557600377286E-5	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999999850312087	WITHOUT_CLASSIFICATION	1.4968791293540573E-7	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.9999999420701443	WITHOUT_CLASSIFICATION	5.792985559285522E-8	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9997859513577876	WITHOUT_CLASSIFICATION	2.1404864221242248E-4	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999996245598586	WITHOUT_CLASSIFICATION	3.7544014136035165E-7	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999996844405682	WITHOUT_CLASSIFICATION	3.1555943173722376E-7	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998660718886	WITHOUT_CLASSIFICATION	1.3392811132183876E-7	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999995052887231	WITHOUT_CLASSIFICATION	4.947112769946575E-7	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999990560574209	WITHOUT_CLASSIFICATION	9.439425792141724E-7	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999999266463252	WITHOUT_CLASSIFICATION	7.335367475083972E-8	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999998448973554	WITHOUT_CLASSIFICATION	1.551026446511214E-7	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999999753259399	WITHOUT_CLASSIFICATION	2.4674060080696087E-8	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.999999941432524	WITHOUT_CLASSIFICATION	5.856747583398612E-8	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999999266159949	WITHOUT_CLASSIFICATION	7.33840051291215E-8	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999995052887231	WITHOUT_CLASSIFICATION	4.947112769946575E-7	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999997024031919	WITHOUT_CLASSIFICATION	2.9759680809078984E-7	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999838920114135	WITHOUT_CLASSIFICATION	1.6107988586515624E-5	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.999993464652741	WITHOUT_CLASSIFICATION	6.5353472590612375E-6	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999876601479	WITHOUT_CLASSIFICATION	1.2339852241667856E-8	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401235880008	WITHOUT_CLASSIFICATION	5.987641199921833E-5	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999995683645	WITHOUT_CLASSIFICATION	4.3163547997531305E-10	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9988337157162687	WITHOUT_CLASSIFICATION	0.0011662842837313323	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401235880008	WITHOUT_CLASSIFICATION	5.987641199921833E-5	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999671687537	WITHOUT_CLASSIFICATION	3.283124631057852E-8	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998664351123	WITHOUT_CLASSIFICATION	1.335648878320876E-7	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999979623317268	WITHOUT_CLASSIFICATION	2.037668273250515E-6	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999431713533	WITHOUT_CLASSIFICATION	5.682864656358674E-8	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999062184763	WITHOUT_CLASSIFICATION	9.378152354702676E-8	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9999997465554435	WITHOUT_CLASSIFICATION	2.534445564883557E-7	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999992464759042	WITHOUT_CLASSIFICATION	7.535240957841786E-7	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999876601479	WITHOUT_CLASSIFICATION	1.2339852241667856E-8	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999995683645	WITHOUT_CLASSIFICATION	4.3163547997531305E-10	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401235880008	WITHOUT_CLASSIFICATION	5.987641199921833E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999995052887231	WITHOUT_CLASSIFICATION	4.947112769946575E-7	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998074977272	WITHOUT_CLASSIFICATION	1.925022729164708E-7	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999981897671386	WITHOUT_CLASSIFICATION	1.8102328614441323E-6	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999998729422643	WITHOUT_CLASSIFICATION	1.2705773567073597E-7	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999223771543	WITHOUT_CLASSIFICATION	7.762284572044837E-8	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999926255635	WITHOUT_CLASSIFICATION	7.374436491486705E-8	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999999308670524	WITHOUT_CLASSIFICATION	6.9132947586103E-8	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999992949895	WITHOUT_CLASSIFICATION	7.050104850204566E-10	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999999482744308	WITHOUT_CLASSIFICATION	5.172556922196328E-8	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999999652369154	WITHOUT_CLASSIFICATION	3.476308463772401E-8	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998647956213019	WITHOUT_CLASSIFICATION	0.001352043786980957	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999999874586118	WITHOUT_CLASSIFICATION	1.2541388141989381E-8	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9990999530824939	WITHOUT_CLASSIFICATION	9.000469175061509E-4	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999997680187391	WITHOUT_CLASSIFICATION	2.3198126094944006E-7	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999690649992	WITHOUT_CLASSIFICATION	3.09350008306474E-8	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999982765796646	WITHOUT_CLASSIFICATION	1.7234203355456149E-6	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998354816750828	WITHOUT_CLASSIFICATION	0.0016451832491719564	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996059045942048	WITHOUT_CLASSIFICATION	3.9409540579510863E-4	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785443600732	WITHOUT_CLASSIFICATION	2.145563992692464E-5	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999982765796646	WITHOUT_CLASSIFICATION	1.7234203355456149E-6	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999990493763574	WITHOUT_CLASSIFICATION	9.506236426983101E-7	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999990330712359	WITHOUT_CLASSIFICATION	9.669287640574538E-7	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972665983905313	WITHOUT_CLASSIFICATION	0.0027334016094686282	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999758366003599	WITHOUT_CLASSIFICATION	2.4163399640096537E-4	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999954469773543	WITHOUT_CLASSIFICATION	4.553022645628805E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401235880008	WITHOUT_CLASSIFICATION	5.987641199921833E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401235880008	WITHOUT_CLASSIFICATION	5.987641199921833E-5	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.9999811430990425	WITHOUT_CLASSIFICATION	1.8856900957560825E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999201708794535	WITHOUT_CLASSIFICATION	7.982912054642115E-5	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999869742884876	WITHOUT_CLASSIFICATION	1.3025711512316384E-5	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999986125601	WITHOUT_CLASSIFICATION	1.3874398481017374E-9	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999999998182133	WITHOUT_CLASSIFICATION	1.817866629938516E-10	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999999994272292	WITHOUT_CLASSIFICATION	5.7277079976637405E-9	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999989820445	WITHOUT_CLASSIFICATION	1.0179555193890932E-9	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999984379583655	WITHOUT_CLASSIFICATION	1.5620416344863287E-6	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.999998809225872	WITHOUT_CLASSIFICATION	1.1907741279293882E-6	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999752169116	WITHOUT_CLASSIFICATION	2.478308839932744E-8	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999995849283068	WITHOUT_CLASSIFICATION	4.150716932624443E-7	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999961997619861	WITHOUT_CLASSIFICATION	3.800238013951357E-6	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999905606935723	WITHOUT_CLASSIFICATION	9.439306427831137E-6	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9996000206045575	WITHOUT_CLASSIFICATION	3.999793954424473E-4	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999997389546265	WITHOUT_CLASSIFICATION	2.6104537351647635E-7	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999350697713417	WITHOUT_CLASSIFICATION	6.493022865826259E-5	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999986793259923	WITHOUT_CLASSIFICATION	1.3206740078056926E-6	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999997908568294	WITHOUT_CLASSIFICATION	2.0914317066958287E-7	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999924966091861	WITHOUT_CLASSIFICATION	7.503390813830005E-6	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999016394137741	WITHOUT_CLASSIFICATION	9.836058622596122E-5	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974858593878124	WITHOUT_CLASSIFICATION	0.0025141406121875886	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997323214406	WITHOUT_CLASSIFICATION	2.6767855944172126E-7	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999947647769819	WITHOUT_CLASSIFICATION	5.235223018096088E-6	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999995796373039	WITHOUT_CLASSIFICATION	4.2036269612109355E-7	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999966776626451	WITHOUT_CLASSIFICATION	3.32233735488618E-6	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999986114734072	WITHOUT_CLASSIFICATION	1.3885265928863264E-6	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999980842101815	WITHOUT_CLASSIFICATION	1.915789818405793E-6	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993248657719	WITHOUT_CLASSIFICATION	6.751342281022491E-7	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999985959360942	WITHOUT_CLASSIFICATION	1.4040639058774413E-6	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999996499626868	WITHOUT_CLASSIFICATION	3.5003731317083455E-7	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996408993167	WITHOUT_CLASSIFICATION	3.591006833591143E-7	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999974449832887	WITHOUT_CLASSIFICATION	2.555016711276064E-6	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996699160537	WITHOUT_CLASSIFICATION	3.300839463781333E-7	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995023546839	WITHOUT_CLASSIFICATION	4.976453161184759E-7	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999992571479902	WITHOUT_CLASSIFICATION	7.428520097463452E-7	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999979876808	WITHOUT_CLASSIFICATION	2.012319226181477E-9	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.999998981109939	WITHOUT_CLASSIFICATION	1.0188900609159959E-6	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.9999996749817891	WITHOUT_CLASSIFICATION	3.25018210917321E-7	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999682921130761	WITHOUT_CLASSIFICATION	3.170788692394045E-5	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999447551708568	WITHOUT_CLASSIFICATION	5.524482914314566E-5	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999985546961216	WITHOUT_CLASSIFICATION	1.445303878322824E-6	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999992936709192	WITHOUT_CLASSIFICATION	7.063290807010479E-7	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999986975388184	WITHOUT_CLASSIFICATION	1.3024611815175858E-6	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9998658490711484	WITHOUT_CLASSIFICATION	1.3415092885167982E-4	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999944611748	WITHOUT_CLASSIFICATION	5.538825157351526E-9	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9998520769418582	WITHOUT_CLASSIFICATION	1.4792305814190484E-4	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999866312718	WITHOUT_CLASSIFICATION	1.3368728289774929E-8	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.999999968308841	WITHOUT_CLASSIFICATION	3.169115910370879E-8	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.999996867619597	WITHOUT_CLASSIFICATION	3.132380402892147E-6	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.999999942293787	WITHOUT_CLASSIFICATION	5.770621301172936E-8	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999996403717767	WITHOUT_CLASSIFICATION	3.5962822330236796E-7	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999996210156117	WITHOUT_CLASSIFICATION	3.7898438830946106E-7	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.99999706594809	WITHOUT_CLASSIFICATION	2.9340519100706076E-6	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999604143233203	WITHOUT_CLASSIFICATION	3.958567667970465E-5	IMPLEMENTATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998834516590606	WITHOUT_CLASSIFICATION	1.1654834093938347E-4	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999820275703787	WITHOUT_CLASSIFICATION	1.7972429621331376E-5	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999998847280396	WITHOUT_CLASSIFICATION	1.1527196038784241E-7	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999885489103422	WITHOUT_CLASSIFICATION	1.1451089657874359E-5	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999749488660773	WITHOUT_CLASSIFICATION	2.5051133922722075E-5	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999995866577442	WITHOUT_CLASSIFICATION	4.133422557390219E-7	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999982873602336	WITHOUT_CLASSIFICATION	1.7126397664115148E-6	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999985871550927	WITHOUT_CLASSIFICATION	1.412844907259146E-6	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999039936896909	WITHOUT_CLASSIFICATION	9.600631030918575E-5	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999944311418175	WITHOUT_CLASSIFICATION	5.568858182521097E-6	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999911573604	WITHOUT_CLASSIFICATION	8.842639674019894E-9	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999995217741421	WITHOUT_CLASSIFICATION	4.782258579892059E-7	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999027032338	WITHOUT_CLASSIFICATION	9.729676627301762E-8	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999923341353945	WITHOUT_CLASSIFICATION	7.665864605467406E-6	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9996832693610187	WITHOUT_CLASSIFICATION	3.1673063898137507E-4	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999934540360809	WITHOUT_CLASSIFICATION	6.545963919126841E-6	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999716182277855	WITHOUT_CLASSIFICATION	2.8381772214493645E-5	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.9999998840475576	WITHOUT_CLASSIFICATION	1.1595244232865133E-7	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999325047613	WITHOUT_CLASSIFICATION	6.749523871488722E-8	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.9999935529834124	WITHOUT_CLASSIFICATION	6.447016587625549E-6	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999981254143682	WITHOUT_CLASSIFICATION	1.8745856319424951E-6	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.9999973539662632	WITHOUT_CLASSIFICATION	2.646033736826076E-6	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9996324457907767	WITHOUT_CLASSIFICATION	3.675542092233308E-4	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9996066571671902	WITHOUT_CLASSIFICATION	3.93342832809764E-4	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999998124840663	WITHOUT_CLASSIFICATION	1.875159336707209E-7	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999932253058103	WITHOUT_CLASSIFICATION	6.774694189741234E-6	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999989324630518	WITHOUT_CLASSIFICATION	1.067536948140365E-6	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999998192763	WITHOUT_CLASSIFICATION	1.8072356092405236E-10	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.999999999527737	WITHOUT_CLASSIFICATION	4.722629680628834E-10	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999750582640917	WITHOUT_CLASSIFICATION	2.4941735908306224E-5	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999925828356	WITHOUT_CLASSIFICATION	7.41716442259812E-9	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.99999368305092	WITHOUT_CLASSIFICATION	6.316949080107429E-6	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999980733008	WITHOUT_CLASSIFICATION	1.926699202440952E-9	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999340335199924	WITHOUT_CLASSIFICATION	6.596648000756305E-5	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.9999939410569971	WITHOUT_CLASSIFICATION	6.058943002904984E-6	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999999992275854	WITHOUT_CLASSIFICATION	7.724146778167926E-10	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.999999984163281	WITHOUT_CLASSIFICATION	1.583671899750689E-8	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999998967	WITHOUT_CLASSIFICATION	1.0326418927358945E-13	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999902346184402	WITHOUT_CLASSIFICATION	9.765381559860424E-6	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999998380632928	WITHOUT_CLASSIFICATION	1.619367071437511E-7	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998758237134	WITHOUT_CLASSIFICATION	1.241762865583721E-7	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999993144742207	WITHOUT_CLASSIFICATION	6.855257792224119E-7	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999805228442059	WITHOUT_CLASSIFICATION	1.9477155794064583E-5	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999980941323382	WITHOUT_CLASSIFICATION	1.905867661844544E-6	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999999952211781	WITHOUT_CLASSIFICATION	4.778821903446045E-9	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999884836844017	WITHOUT_CLASSIFICATION	1.1516315598236698E-5	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9999965575832211	WITHOUT_CLASSIFICATION	3.4424167787367437E-6	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999956698478707	WITHOUT_CLASSIFICATION	4.3301521291922764E-6	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999756754614	WITHOUT_CLASSIFICATION	2.4324538522640143E-8	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999834114105578	WITHOUT_CLASSIFICATION	1.658858944215502E-5	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.9999159974176878	WITHOUT_CLASSIFICATION	8.400258231232594E-5	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999998232824686	WITHOUT_CLASSIFICATION	1.7671753141902733E-7	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999834114105578	WITHOUT_CLASSIFICATION	1.658858944215502E-5	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.99999996830291	WITHOUT_CLASSIFICATION	3.169708995494757E-8	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.9999999704532361	WITHOUT_CLASSIFICATION	2.9546763991007714E-8	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998432886532888	WITHOUT_CLASSIFICATION	1.567113467112731E-4	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9956757687418023	WITHOUT_CLASSIFICATION	0.004324231258197604	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.9999999563275804	WITHOUT_CLASSIFICATION	4.367241953633982E-8	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999991811364569	WITHOUT_CLASSIFICATION	8.188635430203131E-7	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999868305279512	WITHOUT_CLASSIFICATION	1.316947204877933E-5	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999979757299887	WITHOUT_CLASSIFICATION	2.0242700113108628E-6	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999740807303001	WITHOUT_CLASSIFICATION	2.5919269699868497E-5	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999927193047249	WITHOUT_CLASSIFICATION	7.280695275112837E-6	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999999964106221	WITHOUT_CLASSIFICATION	3.5893779964837736E-9	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999876189183341	WITHOUT_CLASSIFICATION	1.2381081665884821E-5	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999958749978196	WITHOUT_CLASSIFICATION	4.125002180357396E-6	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999890846343	WITHOUT_CLASSIFICATION	1.0915365659516478E-8	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999983590135393	WITHOUT_CLASSIFICATION	1.6409864606467368E-6	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999984530376947	WITHOUT_CLASSIFICATION	1.5469623052142777E-6	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999798825796644	WITHOUT_CLASSIFICATION	2.0117420335590152E-4	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999798825796644	WITHOUT_CLASSIFICATION	2.0117420335590152E-4	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999989721806851	WITHOUT_CLASSIFICATION	1.0278193148964983E-5	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9999963450355521	WITHOUT_CLASSIFICATION	3.6549644479397577E-6	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.9999787853043223	WITHOUT_CLASSIFICATION	2.1214695677695684E-5	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.999997261074944	WITHOUT_CLASSIFICATION	2.738925055966458E-6	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999979320920372	WITHOUT_CLASSIFICATION	2.067907962765492E-6	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999752706073874	WITHOUT_CLASSIFICATION	2.4729392612566606E-5	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9999989353883935	WITHOUT_CLASSIFICATION	1.064611606574443E-6	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999832510553	WITHOUT_CLASSIFICATION	1.6748944626892213E-8	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.9999999642637125	WITHOUT_CLASSIFICATION	3.5736287484085006E-8	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999763870528251	WITHOUT_CLASSIFICATION	2.361294717491126E-5	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999999639396362	WITHOUT_CLASSIFICATION	3.6060363802633386E-8	IMPLEMENTATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999680208531	WITHOUT_CLASSIFICATION	3.197914681955759E-8	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.999998021209197	WITHOUT_CLASSIFICATION	1.978790802962062E-6	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.999999521712305	WITHOUT_CLASSIFICATION	4.782876949620274E-7	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999791549918	WITHOUT_CLASSIFICATION	2.0845008173140458E-8	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999924966091861	WITHOUT_CLASSIFICATION	7.503390813830005E-6	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999987824495901	WITHOUT_CLASSIFICATION	1.2175504098921751E-6	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999759634494	WITHOUT_CLASSIFICATION	2.403655059863814E-8	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999817278823163	WITHOUT_CLASSIFICATION	1.8272117683721316E-5	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999837310870816	WITHOUT_CLASSIFICATION	1.6268912918362234E-5	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999918577157	WITHOUT_CLASSIFICATION	8.142284355558017E-9	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.9999985541591039	WITHOUT_CLASSIFICATION	1.4458408961147983E-6	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.999999996112441	WITHOUT_CLASSIFICATION	3.88755906922924E-9	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999812503813	WITHOUT_CLASSIFICATION	1.874961876267996E-8	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999938298600681	WITHOUT_CLASSIFICATION	6.170139931835106E-6	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999829308862221	WITHOUT_CLASSIFICATION	1.706911377782196E-5	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999996991685	WITHOUT_CLASSIFICATION	3.008315450906222E-10	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999946467148441	WITHOUT_CLASSIFICATION	5.353285155965164E-6	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999823703664453	WITHOUT_CLASSIFICATION	1.7629633554771678E-5	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9999995972495159	WITHOUT_CLASSIFICATION	4.0275048402950103E-7	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999981799659728	WITHOUT_CLASSIFICATION	1.8200340272186438E-6	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999999495680642	WITHOUT_CLASSIFICATION	5.043193575236115E-8	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.9999874288501673	WITHOUT_CLASSIFICATION	1.2571149832703621E-5	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999985901758575	WITHOUT_CLASSIFICATION	1.4098241425421245E-6	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999999437731478	WITHOUT_CLASSIFICATION	5.622685219142235E-7	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999976805884114	WITHOUT_CLASSIFICATION	2.3194115885890634E-6	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999911192388561	WITHOUT_CLASSIFICATION	8.880761143827782E-6	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999995891541954	WITHOUT_CLASSIFICATION	4.108458045950311E-6	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999991291974897	WITHOUT_CLASSIFICATION	8.708025103060997E-7	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999996635950562	WITHOUT_CLASSIFICATION	3.364049437879842E-7	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.9999738814471337	WITHOUT_CLASSIFICATION	2.611855286632431E-5	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.9999986057388174	WITHOUT_CLASSIFICATION	1.3942611825438548E-6	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999994852300819	WITHOUT_CLASSIFICATION	5.147699181370853E-7	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998821383348	WITHOUT_CLASSIFICATION	1.1786166524088949E-7	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999999551059081	WITHOUT_CLASSIFICATION	4.489409181206061E-8	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999982800776437	WITHOUT_CLASSIFICATION	1.7199223563837938E-6	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999201046802172	WITHOUT_CLASSIFICATION	7.989531978285873E-5	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929667941562	WITHOUT_CLASSIFICATION	7.033205843890729E-6	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977475988278	WITHOUT_CLASSIFICATION	2.2524011722022485E-5	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999998877312608	WITHOUT_CLASSIFICATION	1.122687392100165E-7	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999998647083624	WITHOUT_CLASSIFICATION	1.3529163759979192E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999961997619861	WITHOUT_CLASSIFICATION	3.800238013951357E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999961997619861	WITHOUT_CLASSIFICATION	3.800238013951357E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999990445331692	WITHOUT_CLASSIFICATION	9.554668308658163E-7	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999931250846	WITHOUT_CLASSIFICATION	6.874915326276027E-9	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999981260060749	WITHOUT_CLASSIFICATION	1.8739939251356573E-6	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994514539858211	WITHOUT_CLASSIFICATION	5.485460141787803E-4	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999981260060749	WITHOUT_CLASSIFICATION	1.8739939251356573E-6	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999813342234087	WITHOUT_CLASSIFICATION	1.866577659120923E-5	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999984146406765	WITHOUT_CLASSIFICATION	1.5853593235230804E-6	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999983260844216	WITHOUT_CLASSIFICATION	1.673915578465059E-6	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999937021508406	WITHOUT_CLASSIFICATION	6.297849159302734E-6	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999995093776298	WITHOUT_CLASSIFICATION	4.906223701204368E-7	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999997680896276	WITHOUT_CLASSIFICATION	2.3191037232120928E-7	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999991423038924	WITHOUT_CLASSIFICATION	8.576961076696067E-7	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.9999998784974714	WITHOUT_CLASSIFICATION	1.2150252860341093E-7	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.999997952880881	WITHOUT_CLASSIFICATION	2.0471191189387217E-6	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9978911341687897	WITHOUT_CLASSIFICATION	0.0021088658312102618	IMPLEMENTATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999943410813497	WITHOUT_CLASSIFICATION	5.658918650308855E-6	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999997122295887	WITHOUT_CLASSIFICATION	2.8777041123371894E-7	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999998352082071	WITHOUT_CLASSIFICATION	1.6479179283511186E-7	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999999346168635	WITHOUT_CLASSIFICATION	6.538313640903657E-8	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999994664774688	WITHOUT_CLASSIFICATION	5.335225311852884E-7	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999874694993	WITHOUT_CLASSIFICATION	1.2530500757380655E-8	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999998282956422	WITHOUT_CLASSIFICATION	1.7170435772662895E-7	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999998282956422	WITHOUT_CLASSIFICATION	1.7170435772662895E-7	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999995715456415	WITHOUT_CLASSIFICATION	4.284543584765377E-7	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999838179603	WITHOUT_CLASSIFICATION	1.6182039721019305E-8	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999993305811	WITHOUT_CLASSIFICATION	6.694189188047358E-10	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999605848558444	WITHOUT_CLASSIFICATION	3.941514415565525E-5	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999998134823	WITHOUT_CLASSIFICATION	1.8651773912382282E-10	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999999962515468	WITHOUT_CLASSIFICATION	3.748453191649227E-9	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9985704181229658	WITHOUT_CLASSIFICATION	0.0014295818770341966	IMPLEMENTATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.999989048058234	WITHOUT_CLASSIFICATION	1.0951941766147065E-5	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.9999994056256215	WITHOUT_CLASSIFICATION	5.943743785294343E-7	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999989698868764	WITHOUT_CLASSIFICATION	1.030113123612038E-6	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999620264858	WITHOUT_CLASSIFICATION	3.7973514208180724E-8	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999282526478	WITHOUT_CLASSIFICATION	7.174735213638442E-8	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999964797147765	WITHOUT_CLASSIFICATION	3.5202852236591753E-6	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999981248373336	WITHOUT_CLASSIFICATION	1.8751626663399801E-6	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999884970648237	WITHOUT_CLASSIFICATION	1.15029351761623E-5	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999999989575103	WITHOUT_CLASSIFICATION	1.0424896863004406E-8	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999995309688136	WITHOUT_CLASSIFICATION	4.690311864139228E-7	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9997777198398257	WITHOUT_CLASSIFICATION	2.2228016017431348E-4	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.9999404459405064	WITHOUT_CLASSIFICATION	5.955405949359643E-5	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999998724244652	WITHOUT_CLASSIFICATION	1.275755348954973E-7	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999994533108528	WITHOUT_CLASSIFICATION	5.466891472289817E-7	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9998208417908089	WITHOUT_CLASSIFICATION	1.7915820919116936E-4	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9996312669430785	WITHOUT_CLASSIFICATION	3.687330569215268E-4	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9986547944288654	WITHOUT_CLASSIFICATION	0.0013452055711346497	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.9999985152214045	WITHOUT_CLASSIFICATION	1.4847785955774939E-6	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.999999962358736	WITHOUT_CLASSIFICATION	3.764126396866119E-8	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999990761064	WITHOUT_CLASSIFICATION	9.238935775596479E-10	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999163282998581	WITHOUT_CLASSIFICATION	8.367170014190977E-5	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999987618781759	WITHOUT_CLASSIFICATION	1.2381218240355851E-6	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999971398921	WITHOUT_CLASSIFICATION	2.860107940124889E-9	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999999990014946	WITHOUT_CLASSIFICATION	9.985053712822461E-10	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.999999293364076	WITHOUT_CLASSIFICATION	7.06635924064322E-7	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999603759674375	WITHOUT_CLASSIFICATION	3.96240325624658E-5	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999989134331346	WITHOUT_CLASSIFICATION	1.08656686543321E-6	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999574282865904	WITHOUT_CLASSIFICATION	4.2571713409565014E-5	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999997314287635	WITHOUT_CLASSIFICATION	2.6857123648299106E-7	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999775570403	WITHOUT_CLASSIFICATION	2.2442959699463285E-7	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999977053162576	WITHOUT_CLASSIFICATION	2.2946837423204905E-6	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999865186889	WITHOUT_CLASSIFICATION	1.3481311074522063E-8	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999930556325215	WITHOUT_CLASSIFICATION	6.944367478604313E-6	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999987901427	WITHOUT_CLASSIFICATION	1.2098573851989818E-9	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982068724527	WITHOUT_CLASSIFICATION	1.7931275473320106E-6	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9999990866866971	WITHOUT_CLASSIFICATION	9.133133028602534E-7	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9251413396792636	WITHOUT_CLASSIFICATION	0.07485866032073644	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999973305970988	WITHOUT_CLASSIFICATION	2.6694029011752224E-6	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.999997328224402	WITHOUT_CLASSIFICATION	2.6717755979011396E-6	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.6333599893363188	IMPLEMENTATION	0.3666400106636813	WITHOUT_CLASSIFICATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999999993291634	WITHOUT_CLASSIFICATION	6.708365940572148E-9	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999907718508027	WITHOUT_CLASSIFICATION	9.22814919740283E-6	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999941925866471	WITHOUT_CLASSIFICATION	5.807413352869337E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962821351942	WITHOUT_CLASSIFICATION	3.717864805725437E-6	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999610688328	WITHOUT_CLASSIFICATION	3.8931167240956445E-8	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999999999882467	WITHOUT_CLASSIFICATION	1.175330033259092E-10	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999962657120722	WITHOUT_CLASSIFICATION	3.734287927735929E-6	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.999999312122756	WITHOUT_CLASSIFICATION	6.878772439236978E-7	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999997024031919	WITHOUT_CLASSIFICATION	2.9759680809078984E-7	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999997024031919	WITHOUT_CLASSIFICATION	2.9759680809078984E-7	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999998908942822	WITHOUT_CLASSIFICATION	1.0910571784748629E-7	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999878339712683	WITHOUT_CLASSIFICATION	1.2166028731737237E-5	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999999089599021	WITHOUT_CLASSIFICATION	9.104009783820104E-8	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999999140244799	WITHOUT_CLASSIFICATION	8.597552012261242E-8	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999998593585373	WITHOUT_CLASSIFICATION	1.4064146269113034E-7	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999998990650696	WITHOUT_CLASSIFICATION	1.0093493032938773E-7	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9995435123571279	WITHOUT_CLASSIFICATION	4.5648764287219796E-4	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999451091966086	WITHOUT_CLASSIFICATION	5.4890803391385954E-5	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999961323429671	WITHOUT_CLASSIFICATION	3.867657032760652E-6	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999997766599	WITHOUT_CLASSIFICATION	2.2334006371981972E-10	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999855009128	WITHOUT_CLASSIFICATION	1.449908713726233E-8	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999998481697198	WITHOUT_CLASSIFICATION	1.5183028014065793E-7	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999998428238405	WITHOUT_CLASSIFICATION	1.571761595420265E-7	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999994912354756	WITHOUT_CLASSIFICATION	5.087645242995651E-7	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999997455568063	WITHOUT_CLASSIFICATION	2.5444319365522894E-7	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999999901153951	WITHOUT_CLASSIFICATION	9.884604906763511E-8	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999965559543773	WITHOUT_CLASSIFICATION	3.444045622680722E-6	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999997580215321	WITHOUT_CLASSIFICATION	2.419784678834106E-7	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9999935096102756	WITHOUT_CLASSIFICATION	6.490389724446871E-6	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999974451709	WITHOUT_CLASSIFICATION	2.5548292191759083E-9	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999805834974977	WITHOUT_CLASSIFICATION	1.9416502502293585E-5	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999999993155784	WITHOUT_CLASSIFICATION	6.844216005569385E-9	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999960831914965	WITHOUT_CLASSIFICATION	3.916808503524717E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999862272094531	WITHOUT_CLASSIFICATION	1.377279054692399E-5	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9990396917177107	WITHOUT_CLASSIFICATION	9.603082822894521E-4	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.999639262249705	WITHOUT_CLASSIFICATION	3.6073775029503555E-4	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.958432350112293	WITHOUT_CLASSIFICATION	0.04156764988770702	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9998664227274737	WITHOUT_CLASSIFICATION	1.3357727252622127E-4	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998460229962405	WITHOUT_CLASSIFICATION	1.5397700375949683E-4	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999977445598827	WITHOUT_CLASSIFICATION	2.2554401173632698E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999862272094531	WITHOUT_CLASSIFICATION	1.377279054692399E-5	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999989165865167	WITHOUT_CLASSIFICATION	1.0834134833251704E-6	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999991326851	WITHOUT_CLASSIFICATION	8.673150254783851E-10	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.9999847206728965	WITHOUT_CLASSIFICATION	1.527932710356252E-5	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999993150552565	WITHOUT_CLASSIFICATION	6.849447435610711E-7	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999998286629	WITHOUT_CLASSIFICATION	1.7133703211899874E-10	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999933821267738	WITHOUT_CLASSIFICATION	6.617873226269395E-6	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.999985630761512	WITHOUT_CLASSIFICATION	1.4369238488040213E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999952802153	WITHOUT_CLASSIFICATION	4.7197846894700275E-9	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9987908721062416	WITHOUT_CLASSIFICATION	0.0012091278937583806	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999993150552565	WITHOUT_CLASSIFICATION	6.849447435610711E-7	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999999968947026	WITHOUT_CLASSIFICATION	3.105297460957766E-9	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999952802153	WITHOUT_CLASSIFICATION	4.7197846894700275E-9	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999996468520896	WITHOUT_CLASSIFICATION	3.531479103322703E-7	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999704014848714	WITHOUT_CLASSIFICATION	2.959851512860003E-5	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999202735737	WITHOUT_CLASSIFICATION	7.972642639819107E-8	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999620264858	WITHOUT_CLASSIFICATION	3.7973514208180724E-8	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999639910211	WITHOUT_CLASSIFICATION	3.6008978912522254E-8	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999999689090053	WITHOUT_CLASSIFICATION	3.1090994596331505E-8	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999732146104	WITHOUT_CLASSIFICATION	2.6785389633914623E-8	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9994059203869317	WITHOUT_CLASSIFICATION	5.940796130682987E-4	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999998927179	WITHOUT_CLASSIFICATION	1.0728204305919042E-10	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.9999971094594682	WITHOUT_CLASSIFICATION	2.890540531826185E-6	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999998995782123	WITHOUT_CLASSIFICATION	1.0042178769792867E-7	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999999419083929	WITHOUT_CLASSIFICATION	5.8091607113566325E-8	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999986742212249	WITHOUT_CLASSIFICATION	1.3257787750831986E-6	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999921490639996	WITHOUT_CLASSIFICATION	7.850936000442854E-6	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999956078180243	WITHOUT_CLASSIFICATION	4.3921819756714206E-6	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999943534167	WITHOUT_CLASSIFICATION	5.646583347413434E-9	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999996628802252	WITHOUT_CLASSIFICATION	3.3711977480492705E-6	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9999181355709901	WITHOUT_CLASSIFICATION	8.186442900998056E-5	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999787849175288	WITHOUT_CLASSIFICATION	2.1215082471161986E-5	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999738977203055	WITHOUT_CLASSIFICATION	2.6102279694407376E-5	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999971148102934	WITHOUT_CLASSIFICATION	2.885189706496454E-6	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999998538548422	WITHOUT_CLASSIFICATION	1.4614515773526645E-7	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999977572485333	WITHOUT_CLASSIFICATION	2.2427514665371064E-6	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999999931865371	WITHOUT_CLASSIFICATION	6.813462813543751E-9	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999993960282498	WITHOUT_CLASSIFICATION	6.039717502782466E-7	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9997410615737006	WITHOUT_CLASSIFICATION	2.5893842629937813E-4	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.99999996928384	WITHOUT_CLASSIFICATION	3.071615991532733E-8	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999999579392	WITHOUT_CLASSIFICATION	4.206076925530394E-11	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999946621115918	WITHOUT_CLASSIFICATION	5.337888408155954E-6	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.9999619353176298	WITHOUT_CLASSIFICATION	3.806468237016012E-5	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.9999996626976859	WITHOUT_CLASSIFICATION	3.373023140576724E-7	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997270886507085	WITHOUT_CLASSIFICATION	2.7291134929144725E-4	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998686944087721	WITHOUT_CLASSIFICATION	1.3130559122786188E-4	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999944295862433	WITHOUT_CLASSIFICATION	5.570413756673055E-6	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9988835793106369	WITHOUT_CLASSIFICATION	0.0011164206893631884	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.99993686002279	WITHOUT_CLASSIFICATION	6.313997720988164E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996147691439	WITHOUT_CLASSIFICATION	3.8523085611638635E-7	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996147691439	WITHOUT_CLASSIFICATION	3.8523085611638635E-7	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999669641321	WITHOUT_CLASSIFICATION	3.303586784253864E-8	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999928518159624	WITHOUT_CLASSIFICATION	7.14818403756918E-6	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999964837163882	WITHOUT_CLASSIFICATION	3.5162836118378207E-6	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999997377112929	WITHOUT_CLASSIFICATION	2.622887071024311E-6	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999988771912673	WITHOUT_CLASSIFICATION	1.1228087327002834E-6	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999915192070471	WITHOUT_CLASSIFICATION	8.480792952987284E-6	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999994570636124	WITHOUT_CLASSIFICATION	5.429363876703891E-7	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999980983561078	WITHOUT_CLASSIFICATION	1.9016438922784548E-6	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999285344715	WITHOUT_CLASSIFICATION	7.146552855679264E-8	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999907064923	WITHOUT_CLASSIFICATION	9.293507704887753E-9	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999916002871	WITHOUT_CLASSIFICATION	8.399712950219616E-9	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999989756329759	WITHOUT_CLASSIFICATION	1.0243670241529656E-6	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999899125113643	WITHOUT_CLASSIFICATION	1.0087488635780969E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996147691439	WITHOUT_CLASSIFICATION	3.8523085611638635E-7	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999971646435295	WITHOUT_CLASSIFICATION	2.8353564706020247E-6	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999976032558703	WITHOUT_CLASSIFICATION	2.3967441297278594E-6	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9988823799248177	WITHOUT_CLASSIFICATION	0.001117620075182378	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999977067250638	WITHOUT_CLASSIFICATION	2.293274936159954E-6	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999999698473274	WITHOUT_CLASSIFICATION	3.015267257033838E-8	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999999962572953	WITHOUT_CLASSIFICATION	3.7427046986118354E-8	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9996654174653742	WITHOUT_CLASSIFICATION	3.345825346258801E-4	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999693218896584	WITHOUT_CLASSIFICATION	3.0678110341604614E-5	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999985106176562	WITHOUT_CLASSIFICATION	1.4893823437800795E-6	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999901144646886	WITHOUT_CLASSIFICATION	9.885535311413504E-6	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999742051880428	WITHOUT_CLASSIFICATION	2.5794811957090695E-5	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997270886507085	WITHOUT_CLASSIFICATION	2.7291134929144725E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996147691439	WITHOUT_CLASSIFICATION	3.8523085611638635E-7	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999929341572229	WITHOUT_CLASSIFICATION	7.065842777072263E-6	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999997140411401	WITHOUT_CLASSIFICATION	2.8595885998731086E-7	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.9999965398914368	WITHOUT_CLASSIFICATION	3.4601085633025203E-6	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999965943962925	WITHOUT_CLASSIFICATION	3.4056037075987274E-6	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999513477949727	WITHOUT_CLASSIFICATION	4.8652205027312735E-5	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999988501626157	WITHOUT_CLASSIFICATION	1.1498373842691314E-6	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962955618914	WITHOUT_CLASSIFICATION	3.7044381085432054E-6	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999785152774	WITHOUT_CLASSIFICATION	2.1484722612715306E-8	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999898276346	WITHOUT_CLASSIFICATION	1.0172365324010705E-8	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999999613243449	WITHOUT_CLASSIFICATION	3.8675655132240465E-8	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999999737174335	WITHOUT_CLASSIFICATION	2.628256650336839E-7	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999590922580854	WITHOUT_CLASSIFICATION	4.0907741914510045E-5	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999996289886938	WITHOUT_CLASSIFICATION	3.71011306193377E-7	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999987313056174	WITHOUT_CLASSIFICATION	1.268694382524056E-6	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999813342234087	WITHOUT_CLASSIFICATION	1.866577659120923E-5	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999753121211	WITHOUT_CLASSIFICATION	2.4687878824824283E-8	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999985592625	WITHOUT_CLASSIFICATION	1.4407376262946179E-9	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999931648349	WITHOUT_CLASSIFICATION	6.835165066462709E-9	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.9999972516517162	WITHOUT_CLASSIFICATION	2.7483482839002422E-6	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999934464134	WITHOUT_CLASSIFICATION	6.5535865999696334E-9	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999972559534327	WITHOUT_CLASSIFICATION	2.744046567244253E-6	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999972559534327	WITHOUT_CLASSIFICATION	2.744046567244253E-6	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9998784761726488	WITHOUT_CLASSIFICATION	1.2152382735118688E-4	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999857581474	WITHOUT_CLASSIFICATION	1.4241852701172782E-8	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999945647134243	WITHOUT_CLASSIFICATION	5.435286575656859E-6	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.999979809648326	WITHOUT_CLASSIFICATION	2.019035167409328E-5	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999966301604931	WITHOUT_CLASSIFICATION	3.369839506949207E-6	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999997875950861	WITHOUT_CLASSIFICATION	2.1240491395624776E-7	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999001768100089	WITHOUT_CLASSIFICATION	9.982318999112888E-5	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999970438413	WITHOUT_CLASSIFICATION	2.956158545526076E-9	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999970438413	WITHOUT_CLASSIFICATION	2.956158545526076E-9	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999998305254994	WITHOUT_CLASSIFICATION	1.6947450060603783E-6	IMPLEMENTATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999998488107774	WITHOUT_CLASSIFICATION	1.5118922253543827E-7	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999998980797546	WITHOUT_CLASSIFICATION	1.0192024542525288E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999998576000364	WITHOUT_CLASSIFICATION	1.4239996363219038E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999998576000364	WITHOUT_CLASSIFICATION	1.4239996363219038E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999998576000364	WITHOUT_CLASSIFICATION	1.4239996363219038E-7	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999969442468527	WITHOUT_CLASSIFICATION	3.0557531472221124E-6	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999792341616	WITHOUT_CLASSIFICATION	2.0765838347436716E-8	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9874498455789221	WITHOUT_CLASSIFICATION	0.012550154421077913	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999820574489894	WITHOUT_CLASSIFICATION	1.794255101056297E-5	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999996765984671	WITHOUT_CLASSIFICATION	3.234015328779767E-7	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996147691439	WITHOUT_CLASSIFICATION	3.8523085611638635E-7	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996147691439	WITHOUT_CLASSIFICATION	3.8523085611638635E-7	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999916985794449	WITHOUT_CLASSIFICATION	8.301420555191873E-6	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999798541721387	WITHOUT_CLASSIFICATION	2.01458278611988E-5	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9991622912312912	WITHOUT_CLASSIFICATION	8.377087687088618E-4	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9998949738947253	WITHOUT_CLASSIFICATION	1.0502610527473989E-4	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999998574066673	WITHOUT_CLASSIFICATION	1.4259333276049334E-7	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.9999945196701888	WITHOUT_CLASSIFICATION	5.480329811167846E-6	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999995478721533	WITHOUT_CLASSIFICATION	4.5212784666044756E-7	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999943472930721	WITHOUT_CLASSIFICATION	5.652706927856733E-6	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999996938097963	WITHOUT_CLASSIFICATION	3.061902037334506E-7	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999752197142	WITHOUT_CLASSIFICATION	2.4780285814137916E-8	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999997817228781	WITHOUT_CLASSIFICATION	2.1827712190584007E-7	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999973692716314	WITHOUT_CLASSIFICATION	2.6307283686681947E-6	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999994477423794	WITHOUT_CLASSIFICATION	5.522576205257774E-7	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999994477423794	WITHOUT_CLASSIFICATION	5.522576205257774E-7	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999995125971896	WITHOUT_CLASSIFICATION	4.87402810370526E-7	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999995125971896	WITHOUT_CLASSIFICATION	4.87402810370526E-7	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999995478461347	WITHOUT_CLASSIFICATION	4.52153865306919E-7	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999989033915748	WITHOUT_CLASSIFICATION	1.0966084252024764E-6	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999989033915748	WITHOUT_CLASSIFICATION	1.0966084252024764E-6	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999988269099412	WITHOUT_CLASSIFICATION	1.1730900587758938E-6	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999990075044761	WITHOUT_CLASSIFICATION	9.924955238688114E-7	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999663086447793	WITHOUT_CLASSIFICATION	3.369135522066841E-5	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999972559534327	WITHOUT_CLASSIFICATION	2.744046567244253E-6	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999396800984183	WITHOUT_CLASSIFICATION	6.031990158167992E-5	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999990075044761	WITHOUT_CLASSIFICATION	9.924955238688114E-7	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999999926738775	WITHOUT_CLASSIFICATION	7.3261225085732E-9	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9992585354027163	WITHOUT_CLASSIFICATION	7.414645972837043E-4	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999968224164065	WITHOUT_CLASSIFICATION	3.1775835935914416E-6	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999973679172643	WITHOUT_CLASSIFICATION	2.6320827357667346E-6	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999987312498817	WITHOUT_CLASSIFICATION	1.268750118314956E-6	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999774842667871	WITHOUT_CLASSIFICATION	2.2515733212868208E-5	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999856137420577	WITHOUT_CLASSIFICATION	1.4386257942215046E-5	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999970816654944	WITHOUT_CLASSIFICATION	2.918334505590393E-6	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999998546053884	WITHOUT_CLASSIFICATION	1.4539461159879377E-7	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999999862275	WITHOUT_CLASSIFICATION	1.3772581210409109E-11	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.999999996857242	WITHOUT_CLASSIFICATION	3.1427581428828737E-9	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.9999897441799148	WITHOUT_CLASSIFICATION	1.0255820085158284E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999854292860478	WITHOUT_CLASSIFICATION	1.4570713952052036E-5	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.9999989373183857	WITHOUT_CLASSIFICATION	1.0626816143503682E-6	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9998456394928877	WITHOUT_CLASSIFICATION	1.5436050711228598E-4	IMPLEMENTATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999952916225312	WITHOUT_CLASSIFICATION	4.708377468785757E-6	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999629582746	WITHOUT_CLASSIFICATION	3.704172530981749E-8	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999956974740382	WITHOUT_CLASSIFICATION	4.3025259618721385E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999956974740382	WITHOUT_CLASSIFICATION	4.3025259618721385E-6	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999996822169483	WITHOUT_CLASSIFICATION	3.1778305164115553E-7	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999999840793883	WITHOUT_CLASSIFICATION	1.59206116978026E-8	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999995205829986	WITHOUT_CLASSIFICATION	4.794170014208332E-7	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9997583448219907	WITHOUT_CLASSIFICATION	2.4165517800945756E-4	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999991439932081	WITHOUT_CLASSIFICATION	8.560067919866564E-7	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999774143017508	WITHOUT_CLASSIFICATION	2.2585698249279283E-5	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999988935200228	WITHOUT_CLASSIFICATION	1.1064799771803683E-6	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999989812624654	WITHOUT_CLASSIFICATION	1.0187375345834192E-6	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999920169355206	WITHOUT_CLASSIFICATION	7.983064479373216E-6	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999968726535	WITHOUT_CLASSIFICATION	3.1273465156337956E-9	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999999480460691	WITHOUT_CLASSIFICATION	5.195393099193925E-8	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999590922580854	WITHOUT_CLASSIFICATION	4.0907741914510045E-5	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999413590028	WITHOUT_CLASSIFICATION	5.864099719424908E-8	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999975684431504	WITHOUT_CLASSIFICATION	2.431556849768521E-6	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9997582312278133	WITHOUT_CLASSIFICATION	2.417687721867967E-4	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999993857153745	WITHOUT_CLASSIFICATION	6.142846256143313E-7	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999617350228	WITHOUT_CLASSIFICATION	3.826497725524793E-8	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999617350228	WITHOUT_CLASSIFICATION	3.826497725524793E-8	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999756356124505	WITHOUT_CLASSIFICATION	2.4364387549492073E-5	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999988670715559	WITHOUT_CLASSIFICATION	1.1329284440129954E-6	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999914395944588	WITHOUT_CLASSIFICATION	8.560405541189315E-6	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.9999995586723688	WITHOUT_CLASSIFICATION	4.4132763117896803E-7	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.9999998647249929	WITHOUT_CLASSIFICATION	1.352750070999855E-7	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999804402856626	WITHOUT_CLASSIFICATION	1.9559714337486363E-5	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999983328708789	WITHOUT_CLASSIFICATION	1.6671291211014535E-5	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999756031914	WITHOUT_CLASSIFICATION	2.4396808478711084E-8	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999825815753894	WITHOUT_CLASSIFICATION	1.7418424610543762E-5	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999990607537	WITHOUT_CLASSIFICATION	9.39246304433732E-10	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999974059038	WITHOUT_CLASSIFICATION	2.594096046295151E-9	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999756031914	WITHOUT_CLASSIFICATION	2.4396808478711084E-8	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999997838267083	WITHOUT_CLASSIFICATION	2.161732917137768E-7	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999852761675191	WITHOUT_CLASSIFICATION	1.4723832480894117E-5	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999908953929	WITHOUT_CLASSIFICATION	9.104607117768308E-9	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9999999381084613	WITHOUT_CLASSIFICATION	6.189153865365869E-8	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999983221243	WITHOUT_CLASSIFICATION	1.6778757689048368E-9	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999039705576	WITHOUT_CLASSIFICATION	9.60294423737016E-8	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9997736755836105	WITHOUT_CLASSIFICATION	2.2632441638942657E-4	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999996248374793	WITHOUT_CLASSIFICATION	3.7516252070384395E-7	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999959962965	WITHOUT_CLASSIFICATION	4.003703536302156E-9	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997285714441556	WITHOUT_CLASSIFICATION	2.714285558444535E-4	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9995292996737488	WITHOUT_CLASSIFICATION	4.707003262512467E-4	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999999989768737	WITHOUT_CLASSIFICATION	1.0231262981104876E-8	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999915343228	WITHOUT_CLASSIFICATION	8.46567716246689E-9	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999948640867418	WITHOUT_CLASSIFICATION	5.135913258196023E-6	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998677141454493	WITHOUT_CLASSIFICATION	1.3228585455068358E-4	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999997964787263	WITHOUT_CLASSIFICATION	2.0352127365090165E-7	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999558055287	WITHOUT_CLASSIFICATION	4.419447135507191E-8	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9976979541333425	WITHOUT_CLASSIFICATION	0.0023020458666575708	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9994806331095062	WITHOUT_CLASSIFICATION	5.193668904937437E-4	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998409181738205	WITHOUT_CLASSIFICATION	1.590818261795063E-4	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999939277776554	WITHOUT_CLASSIFICATION	6.0722223446332704E-6	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999998720664727	WITHOUT_CLASSIFICATION	1.2793352741106609E-7	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999936531656272	WITHOUT_CLASSIFICATION	6.346834372854945E-6	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.9999739301472003	WITHOUT_CLASSIFICATION	2.6069852799707903E-5	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999120764176	WITHOUT_CLASSIFICATION	8.79235823943074E-8	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999342327723805	WITHOUT_CLASSIFICATION	6.576722761951115E-5	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999736037429	WITHOUT_CLASSIFICATION	2.639625711233109E-8	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999980953152063	WITHOUT_CLASSIFICATION	1.904684793691982E-5	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999995420214803	WITHOUT_CLASSIFICATION	4.5797851961604606E-7	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.999996230360226	WITHOUT_CLASSIFICATION	3.769639774010833E-6	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.99999957696747	WITHOUT_CLASSIFICATION	4.2303252992214297E-7	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999996946145194	WITHOUT_CLASSIFICATION	3.05385480631025E-7	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998774660770023	WITHOUT_CLASSIFICATION	1.2253392299759472E-4	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999915464216	WITHOUT_CLASSIFICATION	8.453578360278587E-9	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999990054163181	WITHOUT_CLASSIFICATION	9.945836818472578E-7	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999990921303031	WITHOUT_CLASSIFICATION	9.078696968143616E-7	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999997357589	WITHOUT_CLASSIFICATION	2.642410912792266E-10	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999982217946	WITHOUT_CLASSIFICATION	1.7782052802236668E-9	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999997726890334	WITHOUT_CLASSIFICATION	2.2731096652827322E-7	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999981385695302	WITHOUT_CLASSIFICATION	1.8614304696952099E-6	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999977646916156	WITHOUT_CLASSIFICATION	2.235308384462162E-6	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999966843958	WITHOUT_CLASSIFICATION	3.3156041651467222E-9	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999623399815678	WITHOUT_CLASSIFICATION	3.7660018432130254E-5	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999919873992	WITHOUT_CLASSIFICATION	8.012600759230738E-9	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999999623705599	WITHOUT_CLASSIFICATION	3.762944013568683E-8	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999999643164613	WITHOUT_CLASSIFICATION	3.5683538703155765E-7	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999999596348094	WITHOUT_CLASSIFICATION	4.036519073872908E-8	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999974265158952	WITHOUT_CLASSIFICATION	2.5734841048748605E-6	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999999799307752	WITHOUT_CLASSIFICATION	2.0069224913223048E-8	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999998280589886	WITHOUT_CLASSIFICATION	1.719410114692221E-7	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999570954041161	WITHOUT_CLASSIFICATION	4.2904595883765794E-5	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999985517864528	WITHOUT_CLASSIFICATION	1.4482135471963076E-6	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999849768412	WITHOUT_CLASSIFICATION	1.5023158748768465E-8	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999999104947	WITHOUT_CLASSIFICATION	8.950532524693256E-11	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999894782324	WITHOUT_CLASSIFICATION	1.052176763643749E-8	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999877785317954	WITHOUT_CLASSIFICATION	1.2221468204473181E-5	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999880350142417	WITHOUT_CLASSIFICATION	1.1964985758218872E-5	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999957288014072	WITHOUT_CLASSIFICATION	4.271198592741836E-6	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.9999984718269774	WITHOUT_CLASSIFICATION	1.5281730225474861E-6	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999999682709819	WITHOUT_CLASSIFICATION	3.172901816448764E-8	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999923477125106	WITHOUT_CLASSIFICATION	7.6522874893917E-6	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999930630275128	WITHOUT_CLASSIFICATION	6.936972487215892E-6	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.9999818705938369	WITHOUT_CLASSIFICATION	1.812940616302516E-5	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999999832158	WITHOUT_CLASSIFICATION	1.678424788896702E-11	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.999999937565006	WITHOUT_CLASSIFICATION	6.243499389510844E-8	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999978985750664	WITHOUT_CLASSIFICATION	2.1014249336257537E-6	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999570954041161	WITHOUT_CLASSIFICATION	4.2904595883765794E-5	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999978380244456	WITHOUT_CLASSIFICATION	2.1619755544751417E-6	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999613084105697	WITHOUT_CLASSIFICATION	3.869158943025479E-5	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.999999997640718	WITHOUT_CLASSIFICATION	2.3592819639740596E-9	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999999824571256	WITHOUT_CLASSIFICATION	1.7542874403493657E-8	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999779308823429	WITHOUT_CLASSIFICATION	2.2069117657152767E-5	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999995568582559	WITHOUT_CLASSIFICATION	4.431417440358726E-7	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999825815753894	WITHOUT_CLASSIFICATION	1.7418424610543762E-5	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999252325717566	WITHOUT_CLASSIFICATION	7.47674282433801E-5	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999990054163181	WITHOUT_CLASSIFICATION	9.945836818472578E-7	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999791229257422	WITHOUT_CLASSIFICATION	2.08770742578391E-5	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999999563718811	WITHOUT_CLASSIFICATION	4.362811890409188E-7	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999985271002	WITHOUT_CLASSIFICATION	1.472899703068611E-9	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999947528323	WITHOUT_CLASSIFICATION	5.247167622317762E-9	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999938357722811	WITHOUT_CLASSIFICATION	6.164227718949992E-6	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999998060778872	WITHOUT_CLASSIFICATION	1.9392211283728383E-7	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997908991483	WITHOUT_CLASSIFICATION	2.0910085177217525E-7	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999999642292504	WITHOUT_CLASSIFICATION	3.577074962673074E-8	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999084857949	WITHOUT_CLASSIFICATION	9.151420519594787E-8	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999959340662	WITHOUT_CLASSIFICATION	4.0659337988966885E-9	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999783396360409	WITHOUT_CLASSIFICATION	2.1660363959112868E-5	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999671237490505	WITHOUT_CLASSIFICATION	3.287625094948531E-5	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998989267188	WITHOUT_CLASSIFICATION	1.0107328111735434E-7	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998989267188	WITHOUT_CLASSIFICATION	1.0107328111735434E-7	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999684364819	WITHOUT_CLASSIFICATION	3.1563518123387755E-8	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999951336568526	WITHOUT_CLASSIFICATION	4.866343147433506E-6	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999999932857978	WITHOUT_CLASSIFICATION	6.71420220211407E-8	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999966914469	WITHOUT_CLASSIFICATION	3.3085530183795804E-9	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999998877594176	WITHOUT_CLASSIFICATION	1.122405824346695E-7	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999994283829823	WITHOUT_CLASSIFICATION	5.7161701777854E-7	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999998586226	WITHOUT_CLASSIFICATION	1.413773693541712E-10	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999997593368296	WITHOUT_CLASSIFICATION	2.406631703847385E-7	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999998715233591	WITHOUT_CLASSIFICATION	1.2847664096147603E-7	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999997003516377	WITHOUT_CLASSIFICATION	2.996483623873243E-7	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999468695735731	WITHOUT_CLASSIFICATION	5.3130426426771885E-5	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.9999943957012756	WITHOUT_CLASSIFICATION	5.6042987244801515E-6	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999942541544394	WITHOUT_CLASSIFICATION	5.7458455605463974E-6	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999898484642	WITHOUT_CLASSIFICATION	1.0151535922574007E-8	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999855109157433	WITHOUT_CLASSIFICATION	1.4489084256655616E-5	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.999999996536296	WITHOUT_CLASSIFICATION	3.463703917082624E-9	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999991831058395	WITHOUT_CLASSIFICATION	8.168941605806605E-7	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999999253176808	WITHOUT_CLASSIFICATION	7.46823192239743E-8	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999867073873	WITHOUT_CLASSIFICATION	1.3292612547297174E-8	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999600532862	WITHOUT_CLASSIFICATION	3.994671391491668E-8	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401235880008	WITHOUT_CLASSIFICATION	5.987641199921833E-5	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999981865307	WITHOUT_CLASSIFICATION	1.8134691957566233E-9	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999999895736991	WITHOUT_CLASSIFICATION	1.0426300899022544E-8	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999934077124	WITHOUT_CLASSIFICATION	6.592287597250527E-9	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.999999344241777	WITHOUT_CLASSIFICATION	6.557582229182171E-7	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.9997360904314222	WITHOUT_CLASSIFICATION	2.6390956857785586E-4	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9995338970500584	WITHOUT_CLASSIFICATION	4.661029499416914E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401235880008	WITHOUT_CLASSIFICATION	5.987641199921833E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401235880008	WITHOUT_CLASSIFICATION	5.987641199921833E-5	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999992498211587	WITHOUT_CLASSIFICATION	7.5017884117618E-7	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999990890287	WITHOUT_CLASSIFICATION	9.109712989887982E-10	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999998985562392	WITHOUT_CLASSIFICATION	1.0144376081144915E-7	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999992495311368	WITHOUT_CLASSIFICATION	7.504688630741918E-7	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999979463256758	WITHOUT_CLASSIFICATION	2.053674324192366E-6	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999999948170755	WITHOUT_CLASSIFICATION	5.182924556853223E-9	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999982324927897	WITHOUT_CLASSIFICATION	1.7675072101616026E-6	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9897901472573619	WITHOUT_CLASSIFICATION	0.01020985274263809	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999986850852526	WITHOUT_CLASSIFICATION	1.3149147474067267E-6	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999519838052	WITHOUT_CLASSIFICATION	4.801619478055979E-8	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999976360236562	WITHOUT_CLASSIFICATION	2.363976343717759E-6	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.999971271673054	WITHOUT_CLASSIFICATION	2.8728326946019042E-5	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999985255000857	WITHOUT_CLASSIFICATION	1.4744999142729593E-6	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999998490995775	WITHOUT_CLASSIFICATION	1.5090042250231628E-6	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985546797172369	WITHOUT_CLASSIFICATION	0.0014453202827631533	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999995345861921	WITHOUT_CLASSIFICATION	4.654138080181728E-7	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999999901644387	WITHOUT_CLASSIFICATION	9.835561299637685E-8	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999998730785415	WITHOUT_CLASSIFICATION	1.2692145847819687E-7	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999997573764561	WITHOUT_CLASSIFICATION	2.426235439226517E-7	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972665983905313	WITHOUT_CLASSIFICATION	0.0027334016094686282	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.9771962526912772	WITHOUT_CLASSIFICATION	0.02280374730872276	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997041541354	WITHOUT_CLASSIFICATION	2.9584586457288853E-7	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999882048113667	WITHOUT_CLASSIFICATION	1.1795188633262035E-5	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999364580282118	WITHOUT_CLASSIFICATION	6.354197178822444E-5	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999586166667616	WITHOUT_CLASSIFICATION	4.138333323843368E-5	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999968041278364	WITHOUT_CLASSIFICATION	3.1958721636252743E-6	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999768546611	WITHOUT_CLASSIFICATION	2.314533889544209E-8	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999973107410518	WITHOUT_CLASSIFICATION	2.6892589482627754E-6	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999918435729317	WITHOUT_CLASSIFICATION	8.156427068209758E-6	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999997075559622	WITHOUT_CLASSIFICATION	2.924440377445796E-7	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999998850946596	WITHOUT_CLASSIFICATION	1.1490534040668448E-7	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999990379574071	WITHOUT_CLASSIFICATION	9.620425929428798E-7	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.9999995171887912	WITHOUT_CLASSIFICATION	4.828112087121945E-7	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999990108841016	WITHOUT_CLASSIFICATION	9.891158983784031E-7	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999997559711594	WITHOUT_CLASSIFICATION	2.4402884055017683E-7	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999992777484	WITHOUT_CLASSIFICATION	7.222515226155109E-10	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999790810564871	WITHOUT_CLASSIFICATION	2.0918943512902293E-5	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999379762817269	WITHOUT_CLASSIFICATION	6.202371827314777E-5	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999997529903158	WITHOUT_CLASSIFICATION	2.47009684138323E-7	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999998582968	WITHOUT_CLASSIFICATION	1.4170314589485297E-10	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999983755935864	WITHOUT_CLASSIFICATION	1.6244064135512325E-6	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999964159083408	WITHOUT_CLASSIFICATION	3.584091659156077E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999932826460524	WITHOUT_CLASSIFICATION	6.7173539476757825E-6	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999928490744877	WITHOUT_CLASSIFICATION	7.1509255123449396E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999932826460524	WITHOUT_CLASSIFICATION	6.7173539476757825E-6	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999999408705	WITHOUT_CLASSIFICATION	5.912951205682733E-11	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999423033638	WITHOUT_CLASSIFICATION	5.769663637751334E-8	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999932840218256	WITHOUT_CLASSIFICATION	6.715978174255456E-6	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999860467154784	WITHOUT_CLASSIFICATION	1.3953284521622285E-5	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999630879448	WITHOUT_CLASSIFICATION	3.691205522469179E-8	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999988294111559	WITHOUT_CLASSIFICATION	1.1705888440884296E-6	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.999999994475395	WITHOUT_CLASSIFICATION	5.52460492325512E-9	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999999892533228	WITHOUT_CLASSIFICATION	1.0746677202203324E-7	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999998501506118	WITHOUT_CLASSIFICATION	1.4984938823243612E-7	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999998076312263	WITHOUT_CLASSIFICATION	1.923687736846418E-7	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999998140966984	WITHOUT_CLASSIFICATION	1.859033015914493E-7	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999998801337499	WITHOUT_CLASSIFICATION	1.1986625019633946E-7	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999678809746	WITHOUT_CLASSIFICATION	3.211902546303215E-8	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9995177775910201	WITHOUT_CLASSIFICATION	4.822224089798656E-4	IMPLEMENTATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999820088808955	WITHOUT_CLASSIFICATION	1.7991119104501243E-5	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999998239626086	WITHOUT_CLASSIFICATION	1.7603739137564542E-7	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999471384209	WITHOUT_CLASSIFICATION	5.286157917572601E-8	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999952204434	WITHOUT_CLASSIFICATION	4.77955659559809E-9	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999994347657	WITHOUT_CLASSIFICATION	5.652342984348628E-10	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999997998445739	WITHOUT_CLASSIFICATION	2.001554261847179E-7	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999946358418	WITHOUT_CLASSIFICATION	5.3641582320960306E-9	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999955201692549	WITHOUT_CLASSIFICATION	4.479830745082631E-6	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9998918504210486	WITHOUT_CLASSIFICATION	1.0814957895144254E-4	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999869866156936	WITHOUT_CLASSIFICATION	1.3013384306308772E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999963623546585	WITHOUT_CLASSIFICATION	3.6376453413570203E-6	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999966668033	WITHOUT_CLASSIFICATION	3.3331967337223836E-9	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999941252660861	WITHOUT_CLASSIFICATION	5.874733913852658E-6	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.9999978167335404	WITHOUT_CLASSIFICATION	2.1832664595917655E-6	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998086747051	WITHOUT_CLASSIFICATION	1.913252949809636E-7	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999935971240048	WITHOUT_CLASSIFICATION	6.4028759951588276E-6	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.9999995388050159	WITHOUT_CLASSIFICATION	4.6119498399195556E-7	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999701645376938	WITHOUT_CLASSIFICATION	2.983546230610089E-5	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999994413526	WITHOUT_CLASSIFICATION	5.58647255559948E-10	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999926067128883	WITHOUT_CLASSIFICATION	7.393287111848199E-6	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999234101040249	WITHOUT_CLASSIFICATION	7.658989597512356E-5	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.9999989836768057	WITHOUT_CLASSIFICATION	1.0163231942164703E-6	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9999993120791688	WITHOUT_CLASSIFICATION	6.879208311988009E-7	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998715535605	WITHOUT_CLASSIFICATION	1.2844643957301886E-7	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9999966275092148	WITHOUT_CLASSIFICATION	3.37249078512811E-6	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.99999987419805	WITHOUT_CLASSIFICATION	1.2580195004105448E-7	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.9999999751556029	WITHOUT_CLASSIFICATION	2.4844397134266496E-8	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.999995839805181	WITHOUT_CLASSIFICATION	4.160194818943889E-6	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999998448973554	WITHOUT_CLASSIFICATION	1.551026446511214E-7	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999966668033	WITHOUT_CLASSIFICATION	3.3331967337223836E-9	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999852519188887	WITHOUT_CLASSIFICATION	1.4748081111358588E-5	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999997330156075	WITHOUT_CLASSIFICATION	2.6698439243636117E-7	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.999960295584385	WITHOUT_CLASSIFICATION	3.970441561505277E-5	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999999965440133	WITHOUT_CLASSIFICATION	3.4559866656258938E-9	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.9999987461100568	WITHOUT_CLASSIFICATION	1.2538899432190845E-6	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999682412422	WITHOUT_CLASSIFICATION	3.1758757866441204E-8	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999990386397702	WITHOUT_CLASSIFICATION	9.613602298170792E-7	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999840911209087	WITHOUT_CLASSIFICATION	1.590887909129256E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999958510237286	WITHOUT_CLASSIFICATION	4.1489762714420085E-6	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.999999997779548	WITHOUT_CLASSIFICATION	2.2204520431609033E-9	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.9999152950349129	WITHOUT_CLASSIFICATION	8.470496508704552E-5	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999938812061	WITHOUT_CLASSIFICATION	6.118793954106104E-9	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999966136242874	WITHOUT_CLASSIFICATION	3.3863757126025376E-6	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999997999973168	WITHOUT_CLASSIFICATION	2.0000268321023417E-6	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999887180525	WITHOUT_CLASSIFICATION	1.1281947410584417E-8	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999932231054	WITHOUT_CLASSIFICATION	6.776894626892299E-9	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999490502631	WITHOUT_CLASSIFICATION	5.0949736800900765E-8	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999441347089	WITHOUT_CLASSIFICATION	5.586529102810744E-8	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999780352081373	WITHOUT_CLASSIFICATION	2.1964791862737276E-5	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999852519188887	WITHOUT_CLASSIFICATION	1.4748081111358588E-5	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999989386049618	WITHOUT_CLASSIFICATION	1.061395038118844E-6	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.999999856379938	WITHOUT_CLASSIFICATION	1.436200620199058E-7	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999998101995949	WITHOUT_CLASSIFICATION	1.8980040497714287E-7	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999854912447	WITHOUT_CLASSIFICATION	1.4508755319185004E-8	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.999999999713878	WITHOUT_CLASSIFICATION	2.8612200978006534E-10	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9054637081106711	WITHOUT_CLASSIFICATION	0.09453629188932887	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9054637081106711	WITHOUT_CLASSIFICATION	0.09453629188932887	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999930903268255	WITHOUT_CLASSIFICATION	6.909673174543386E-6	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9054637081106711	WITHOUT_CLASSIFICATION	0.09453629188932887	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9054637081106711	WITHOUT_CLASSIFICATION	0.09453629188932887	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999906514691139	WITHOUT_CLASSIFICATION	9.348530885989428E-6	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999991933781405	WITHOUT_CLASSIFICATION	8.066218595250013E-7	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999999934126088	WITHOUT_CLASSIFICATION	6.587391193335355E-8	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999973326332785	WITHOUT_CLASSIFICATION	2.667366721512058E-6	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999992144598848	WITHOUT_CLASSIFICATION	7.855401150781485E-7	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999526704935586	WITHOUT_CLASSIFICATION	4.732950644145558E-5	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999108875664173	WITHOUT_CLASSIFICATION	8.911243358264854E-5	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999998452402816	WITHOUT_CLASSIFICATION	1.5475971835933978E-7	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999916597797653	WITHOUT_CLASSIFICATION	8.340220234659978E-6	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999914399030255	WITHOUT_CLASSIFICATION	8.560096974521894E-6	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999872222299018	WITHOUT_CLASSIFICATION	1.2777770098129944E-5	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999984413057442	WITHOUT_CLASSIFICATION	1.5586942557433227E-6	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999994771509921	WITHOUT_CLASSIFICATION	5.228490077837246E-7	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999991651737183	WITHOUT_CLASSIFICATION	8.348262815325408E-7	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999999841445001	WITHOUT_CLASSIFICATION	1.5855499834129382E-8	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999967858929685	WITHOUT_CLASSIFICATION	3.214107031523804E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999990445331692	WITHOUT_CLASSIFICATION	9.554668308658163E-7	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999975365544357	WITHOUT_CLASSIFICATION	2.4634455642832843E-6	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999967885308915	WITHOUT_CLASSIFICATION	3.211469108487972E-6	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999982060693599	WITHOUT_CLASSIFICATION	1.7939306400667723E-6	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999469085563361	WITHOUT_CLASSIFICATION	5.3091443663912165E-5	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.9999992572449304	WITHOUT_CLASSIFICATION	7.427550695551468E-7	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999990445331692	WITHOUT_CLASSIFICATION	9.554668308658163E-7	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999941252660861	WITHOUT_CLASSIFICATION	5.874733913852658E-6	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.9999738453369642	WITHOUT_CLASSIFICATION	2.6154663035767516E-5	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993248657719	WITHOUT_CLASSIFICATION	6.751342281022491E-7	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996408993167	WITHOUT_CLASSIFICATION	3.591006833591143E-7	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.9999957653906675	WITHOUT_CLASSIFICATION	4.234609332516615E-6	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999774119231332	WITHOUT_CLASSIFICATION	2.2588076866884414E-5	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.9999986428810638	WITHOUT_CLASSIFICATION	1.357118936188495E-6	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.8897363807170439	WITHOUT_CLASSIFICATION	0.11026361928295604	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999270353195434	WITHOUT_CLASSIFICATION	7.296468045652475E-5	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999989421453594	WITHOUT_CLASSIFICATION	1.057854640517727E-6	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999829978268291	WITHOUT_CLASSIFICATION	1.700217317093886E-5	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999994887094	WITHOUT_CLASSIFICATION	5.112906283863076E-10	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999999620711945	WITHOUT_CLASSIFICATION	3.7928805497448937E-7	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999992101466567	WITHOUT_CLASSIFICATION	7.89853343227545E-7	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999983921890658	WITHOUT_CLASSIFICATION	1.607810934206543E-6	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999934461571	WITHOUT_CLASSIFICATION	6.553842907757001E-9	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999994103989105	WITHOUT_CLASSIFICATION	5.896010894966753E-7	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9978057797659886	WITHOUT_CLASSIFICATION	0.002194220234011386	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999898510412	WITHOUT_CLASSIFICATION	1.0148958831519552E-8	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999868840934133	WITHOUT_CLASSIFICATION	1.3115906586844779E-5	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999825322806307	WITHOUT_CLASSIFICATION	1.7467719369311658E-5	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999765636112474	WITHOUT_CLASSIFICATION	2.343638875250331E-5	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.999999984927402	WITHOUT_CLASSIFICATION	1.5072597975716895E-8	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999270353195434	WITHOUT_CLASSIFICATION	7.296468045652475E-5	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999998977293542	WITHOUT_CLASSIFICATION	1.0227064581577231E-7	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.9999979044438323	WITHOUT_CLASSIFICATION	2.095556167773905E-6	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.99977725694899	WITHOUT_CLASSIFICATION	2.2274305101000998E-4	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999983489267742	WITHOUT_CLASSIFICATION	1.6510732257802397E-6	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980774350796	WITHOUT_CLASSIFICATION	1.9225649203752426E-6	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.9999975919308872	WITHOUT_CLASSIFICATION	2.4080691128486576E-6	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.9999994616966601	WITHOUT_CLASSIFICATION	5.383033398867012E-7	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.9999992538455349	WITHOUT_CLASSIFICATION	7.461544650139641E-7	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.9999996491752958	WITHOUT_CLASSIFICATION	3.5082470416645106E-7	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.9999313097167668	WITHOUT_CLASSIFICATION	6.869028323327643E-5	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999972053254075	WITHOUT_CLASSIFICATION	2.7946745925783836E-6	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999997930074276	WITHOUT_CLASSIFICATION	2.0699257236046966E-7	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999713532036117	WITHOUT_CLASSIFICATION	2.8646796388216932E-5	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999972119014	WITHOUT_CLASSIFICATION	2.7880986263427407E-9	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999999145622156	WITHOUT_CLASSIFICATION	8.543778447030962E-8	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999999989118047	WITHOUT_CLASSIFICATION	1.0881953410256518E-9	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999995569959981	WITHOUT_CLASSIFICATION	4.430040019150282E-7	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999972053254075	WITHOUT_CLASSIFICATION	2.7946745925783836E-6	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999993132269	WITHOUT_CLASSIFICATION	6.86773146396022E-10	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999996302576358	WITHOUT_CLASSIFICATION	3.69742364250028E-7	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999995534273766	WITHOUT_CLASSIFICATION	4.465726234495159E-7	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9994994200650151	WITHOUT_CLASSIFICATION	5.005799349848061E-4	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.9999991409991579	WITHOUT_CLASSIFICATION	8.590008421528106E-7	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999880702619106	WITHOUT_CLASSIFICATION	1.192973808944099E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999999145622156	WITHOUT_CLASSIFICATION	8.543778447030962E-8	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999963920954792	WITHOUT_CLASSIFICATION	3.6079045208675787E-6	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954117266026	WITHOUT_CLASSIFICATION	4.588273397439076E-6	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961210366579	WITHOUT_CLASSIFICATION	3.878963342100717E-6	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9798602434573046	WITHOUT_CLASSIFICATION	0.02013975654269529	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9259250213321232	WITHOUT_CLASSIFICATION	0.07407497866787682	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9806463932378584	WITHOUT_CLASSIFICATION	0.01935360676214167	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999463355697	WITHOUT_CLASSIFICATION	5.366443029578972E-7	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999463355697	WITHOUT_CLASSIFICATION	5.366443029578972E-7	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999999878790256	WITHOUT_CLASSIFICATION	1.2120974510404585E-8	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999982650853965	WITHOUT_CLASSIFICATION	1.7349146035431762E-6	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.9999995263462955	WITHOUT_CLASSIFICATION	4.7365370443383535E-7	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.9999994322989038	WITHOUT_CLASSIFICATION	5.677010961831458E-7	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.999894712914459	WITHOUT_CLASSIFICATION	1.0528708554095916E-4	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968059938313	WITHOUT_CLASSIFICATION	3.194006168589859E-6	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999814135998626	WITHOUT_CLASSIFICATION	1.8586400137447625E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999349437692382	WITHOUT_CLASSIFICATION	6.505623076187105E-5	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999993988494561	WITHOUT_CLASSIFICATION	6.011505438828355E-7	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998807555375	WITHOUT_CLASSIFICATION	1.19244462600569E-7	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968059938313	WITHOUT_CLASSIFICATION	3.194006168589859E-6	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999814135998626	WITHOUT_CLASSIFICATION	1.8586400137447625E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999349437692382	WITHOUT_CLASSIFICATION	6.505623076187105E-5	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.9999989073989111	WITHOUT_CLASSIFICATION	1.09260108898455E-6	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.999994620402114	WITHOUT_CLASSIFICATION	5.379597886044777E-6	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999986783369	WITHOUT_CLASSIFICATION	1.3216631065366222E-9	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999996277276079	WITHOUT_CLASSIFICATION	3.722723921000506E-7	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999997636409078	WITHOUT_CLASSIFICATION	2.3635909216737307E-7	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999984444078298	WITHOUT_CLASSIFICATION	1.5555921701282424E-6	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999995486472897	WITHOUT_CLASSIFICATION	4.5135271037567104E-7	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.9999993877315642	WITHOUT_CLASSIFICATION	6.122684358104625E-7	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9999950245372169	WITHOUT_CLASSIFICATION	4.975462783153341E-6	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999992734401929	WITHOUT_CLASSIFICATION	7.265598071114338E-7	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999317980581	WITHOUT_CLASSIFICATION	6.820194181018335E-8	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999974136598898	WITHOUT_CLASSIFICATION	2.5863401101216023E-6	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999994852959847	WITHOUT_CLASSIFICATION	5.147040153033172E-7	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999018580739	WITHOUT_CLASSIFICATION	9.814192618530367E-8	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999989401475283	WITHOUT_CLASSIFICATION	1.059852471654847E-6	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999999853379345	WITHOUT_CLASSIFICATION	1.4662065388701591E-8	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999994299765449	WITHOUT_CLASSIFICATION	5.7002345521866E-7	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999929586401609	WITHOUT_CLASSIFICATION	7.041359839150877E-6	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999968510220135	WITHOUT_CLASSIFICATION	3.1489779863450844E-6	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999986755034378	WITHOUT_CLASSIFICATION	1.324496562216643E-6	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999988279106	WITHOUT_CLASSIFICATION	1.1720894533831276E-9	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999938445660872	WITHOUT_CLASSIFICATION	6.155433912806752E-5	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999996255013954	WITHOUT_CLASSIFICATION	3.7449860460596964E-7	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999561106604609	WITHOUT_CLASSIFICATION	4.3889339539204654E-5	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999999939199833	WITHOUT_CLASSIFICATION	6.080016680212948E-9	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.999585253011941	WITHOUT_CLASSIFICATION	4.1474698805887334E-4	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987425780685	WITHOUT_CLASSIFICATION	1.257421931480187E-6	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272547138726	WITHOUT_CLASSIFICATION	7.274528612743743E-5	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999984886578	WITHOUT_CLASSIFICATION	1.5113421950604427E-9	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949231238839	WITHOUT_CLASSIFICATION	5.076876116011876E-6	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999749588186487	WITHOUT_CLASSIFICATION	2.5041181351259093E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998758237134	WITHOUT_CLASSIFICATION	1.241762865583721E-7	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998758237134	WITHOUT_CLASSIFICATION	1.241762865583721E-7	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999999104119	WITHOUT_CLASSIFICATION	8.958806492556472E-11	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999999714175881	WITHOUT_CLASSIFICATION	2.8582411819762066E-8	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9996919750289706	WITHOUT_CLASSIFICATION	3.0802497102949493E-4	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999590922580854	WITHOUT_CLASSIFICATION	4.0907741914510045E-5	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9998081338358733	WITHOUT_CLASSIFICATION	1.9186616412668084E-4	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.999999998002249	WITHOUT_CLASSIFICATION	1.997750915038531E-9	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.99999133310822	WITHOUT_CLASSIFICATION	8.66689177996067E-6	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.9999960012220004	WITHOUT_CLASSIFICATION	3.998777999605741E-6	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999956698478707	WITHOUT_CLASSIFICATION	4.3301521291922764E-6	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999580601978	WITHOUT_CLASSIFICATION	4.1939802192707415E-7	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994431475171	WITHOUT_CLASSIFICATION	5.568524828730414E-7	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996042219296	WITHOUT_CLASSIFICATION	3.957780704729614E-7	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985979099304	WITHOUT_CLASSIFICATION	1.402090069534254E-6	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998896903786	WITHOUT_CLASSIFICATION	1.1030962141701347E-7	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994764362188	WITHOUT_CLASSIFICATION	5.235637812492705E-7	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998099535153	WITHOUT_CLASSIFICATION	1.9004648457799936E-7	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983391272219	WITHOUT_CLASSIFICATION	1.6608727780061266E-6	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993493280034	WITHOUT_CLASSIFICATION	6.506719965856919E-7	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963957675447	WITHOUT_CLASSIFICATION	3.6042324552130168E-6	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994368480498	WITHOUT_CLASSIFICATION	5.631519502096731E-7	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999884176707404	WITHOUT_CLASSIFICATION	1.1582329259550714E-5	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999934201627851	WITHOUT_CLASSIFICATION	6.57983721488516E-6	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999997444957224	WITHOUT_CLASSIFICATION	2.5550427755717566E-7	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999068862342	WITHOUT_CLASSIFICATION	9.311376584703668E-8	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999998685360103	WITHOUT_CLASSIFICATION	1.3146398968751338E-7	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.9994532827409759	WITHOUT_CLASSIFICATION	5.467172590241269E-4	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999996036360264	WITHOUT_CLASSIFICATION	3.9636397368478643E-7	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.999902927719969	WITHOUT_CLASSIFICATION	9.707228003089618E-5	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999997444957224	WITHOUT_CLASSIFICATION	2.5550427755717566E-7	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999997444957224	WITHOUT_CLASSIFICATION	2.5550427755717566E-7	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999229346894548	WITHOUT_CLASSIFICATION	7.706531054514022E-5	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999936504730432	WITHOUT_CLASSIFICATION	6.34952695680389E-6	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999421008527	WITHOUT_CLASSIFICATION	5.78991472311549E-8	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999934721146223	WITHOUT_CLASSIFICATION	6.527885377698234E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999854292860478	WITHOUT_CLASSIFICATION	1.4570713952052036E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999986755034378	WITHOUT_CLASSIFICATION	1.324496562216643E-6	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999994332390462	WITHOUT_CLASSIFICATION	5.667609538978195E-7	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999913759851572	WITHOUT_CLASSIFICATION	8.624014842852046E-6	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999999735041334	WITHOUT_CLASSIFICATION	2.6495866613172423E-8	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999009498129812	WITHOUT_CLASSIFICATION	9.90501870188495E-5	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9992384715932122	WITHOUT_CLASSIFICATION	7.615284067877812E-4	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851987050831	WITHOUT_CLASSIFICATION	1.4801294916986432E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999966813230554	WITHOUT_CLASSIFICATION	3.3186769445974567E-6	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999966813230554	WITHOUT_CLASSIFICATION	3.3186769445974567E-6	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999992367962021	WITHOUT_CLASSIFICATION	7.632037979280583E-7	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999992367962021	WITHOUT_CLASSIFICATION	7.632037979280583E-7	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991467789916647	WITHOUT_CLASSIFICATION	8.53221008335324E-4	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997874427504	WITHOUT_CLASSIFICATION	2.1255724953624686E-7	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999958125356	WITHOUT_CLASSIFICATION	4.187464320962464E-9	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999595994476538	WITHOUT_CLASSIFICATION	4.040055234619851E-4	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.999792485039877	WITHOUT_CLASSIFICATION	2.0751496012286303E-4	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999882477642263	WITHOUT_CLASSIFICATION	1.1752235773661667E-5	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999833682872342	WITHOUT_CLASSIFICATION	1.6631712765757085E-5	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987678904819	WITHOUT_CLASSIFICATION	1.2321095180645132E-6	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999999166011939	WITHOUT_CLASSIFICATION	8.339880603601121E-8	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9999999866970916	WITHOUT_CLASSIFICATION	1.3302908457420152E-8	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999982526193	WITHOUT_CLASSIFICATION	1.7473807321107426E-9	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999961997619861	WITHOUT_CLASSIFICATION	3.800238013951357E-6	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999939674489234	WITHOUT_CLASSIFICATION	6.032551076562388E-6	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999610888398197	WITHOUT_CLASSIFICATION	3.891116018033267E-5	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.999999817025847	WITHOUT_CLASSIFICATION	1.8297415299776196E-7	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.999991518253252	WITHOUT_CLASSIFICATION	8.481746747921678E-6	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.999991518253252	WITHOUT_CLASSIFICATION	8.481746747921678E-6	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.999991518253252	WITHOUT_CLASSIFICATION	8.481746747921678E-6	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999849515311807	WITHOUT_CLASSIFICATION	1.5048468819272458E-5	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.9999989673282687	WITHOUT_CLASSIFICATION	1.032671731396566E-6	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999999553683	WITHOUT_CLASSIFICATION	4.463186131227476E-11	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999987834068463	WITHOUT_CLASSIFICATION	1.2165931536940036E-5	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999248893929694	WITHOUT_CLASSIFICATION	7.511060703057886E-5	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999939598346174	WITHOUT_CLASSIFICATION	6.040165382606863E-5	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999990611843451	WITHOUT_CLASSIFICATION	9.388156548236665E-7	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.964761357443723	WITHOUT_CLASSIFICATION	0.03523864255627688	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9987245398579849	WITHOUT_CLASSIFICATION	0.0012754601420150637	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999982818657043	WITHOUT_CLASSIFICATION	1.7181342957007544E-5	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.999999946029574	WITHOUT_CLASSIFICATION	5.397042600426721E-8	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999617404325368	WITHOUT_CLASSIFICATION	3.825956746318966E-5	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984958370615	WITHOUT_CLASSIFICATION	1.5041629385192172E-6	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999712859515	WITHOUT_CLASSIFICATION	2.8714048505816928E-8	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9987106253732703	WITHOUT_CLASSIFICATION	0.0012893746267296352	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999999908062612	WITHOUT_CLASSIFICATION	9.193738870039066E-9	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999069707283	WITHOUT_CLASSIFICATION	9.302927174751618E-8	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999972146072154	WITHOUT_CLASSIFICATION	2.785392784592954E-6	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999969895866276	WITHOUT_CLASSIFICATION	3.01041337241783E-6	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999979395260453	WITHOUT_CLASSIFICATION	2.0604739547068644E-6	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999999070375	WITHOUT_CLASSIFICATION	9.29625791984878E-11	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999997419627124	WITHOUT_CLASSIFICATION	2.580372877118315E-7	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999975746730033	WITHOUT_CLASSIFICATION	2.425326996733257E-6	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999908626815	WITHOUT_CLASSIFICATION	9.137318461052998E-9	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999789732396429	WITHOUT_CLASSIFICATION	2.1026760357170088E-5	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999979490005362	WITHOUT_CLASSIFICATION	2.050999463712428E-6	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999999338914718	WITHOUT_CLASSIFICATION	6.61085281530939E-8	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.9999982142114994	WITHOUT_CLASSIFICATION	1.7857885006566694E-6	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999999819449	WITHOUT_CLASSIFICATION	1.8055064871368078E-11	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999985901758575	WITHOUT_CLASSIFICATION	1.4098241425421245E-6	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999999145565	WITHOUT_CLASSIFICATION	8.544357534998392E-11	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999996064675026	WITHOUT_CLASSIFICATION	3.935324974419403E-7	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999996143123897	WITHOUT_CLASSIFICATION	3.85687610379801E-7	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9993755651944684	WITHOUT_CLASSIFICATION	6.24434805531592E-4	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999999409282957	WITHOUT_CLASSIFICATION	5.907170422460494E-8	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999999438492122	WITHOUT_CLASSIFICATION	5.615078767615093E-8	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999997580215321	WITHOUT_CLASSIFICATION	2.419784678834106E-7	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.9999314994422145	WITHOUT_CLASSIFICATION	6.850055778554843E-5	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999982912264359	WITHOUT_CLASSIFICATION	1.7087735640115496E-6	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.9999728458791024	WITHOUT_CLASSIFICATION	2.7154120897576446E-5	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999707345151	WITHOUT_CLASSIFICATION	2.926548484274862E-8	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999982983254627	WITHOUT_CLASSIFICATION	1.7016745373179764E-6	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9295067453422693	WITHOUT_CLASSIFICATION	0.07049325465773071	IMPLEMENTATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999893304047137	WITHOUT_CLASSIFICATION	1.0669595286261264E-5	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999978831619	WITHOUT_CLASSIFICATION	2.1168381349916483E-9	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999994295654907	WITHOUT_CLASSIFICATION	5.704345092350526E-7	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.99999995283293	WITHOUT_CLASSIFICATION	4.716707002715891E-8	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999998282956422	WITHOUT_CLASSIFICATION	1.7170435772662895E-7	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999914070695743	WITHOUT_CLASSIFICATION	8.592930425669529E-6	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999997691681378	WITHOUT_CLASSIFICATION	2.3083186210369895E-7	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999993915875564	WITHOUT_CLASSIFICATION	6.084124437090493E-7	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999525696575154	WITHOUT_CLASSIFICATION	4.7430342484576416E-5	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998035794249177	WITHOUT_CLASSIFICATION	1.9642057508217556E-4	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999655041739896	WITHOUT_CLASSIFICATION	3.4495826010501556E-5	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999175657219929	WITHOUT_CLASSIFICATION	8.24342780070826E-5	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.9999952577865714	WITHOUT_CLASSIFICATION	4.742213428619114E-6	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9997255511161767	WITHOUT_CLASSIFICATION	2.744488838233794E-4	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.9999994362916784	WITHOUT_CLASSIFICATION	5.637083216123151E-7	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999817794247	WITHOUT_CLASSIFICATION	1.822057527857444E-8	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999649282143134	WITHOUT_CLASSIFICATION	3.5071785686565975E-5	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999999615897854	WITHOUT_CLASSIFICATION	3.8410214601343854E-8	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999884952783	WITHOUT_CLASSIFICATION	1.1504721788753912E-8	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999982997251	WITHOUT_CLASSIFICATION	1.7002748301473463E-9	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999999867544466	WITHOUT_CLASSIFICATION	1.3245553389011236E-8	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999643201952	WITHOUT_CLASSIFICATION	3.5679804802631794E-8	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999810260398	WITHOUT_CLASSIFICATION	1.8973960267206654E-8	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999948133399	WITHOUT_CLASSIFICATION	5.186660128764618E-9	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999997395867168	WITHOUT_CLASSIFICATION	2.604132831396911E-7	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999862272094531	WITHOUT_CLASSIFICATION	1.377279054692399E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999862272094531	WITHOUT_CLASSIFICATION	1.377279054692399E-5	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999998958784806	WITHOUT_CLASSIFICATION	1.0412151938662398E-7	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.999999929340328	WITHOUT_CLASSIFICATION	7.065967194614815E-8	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999131424886	WITHOUT_CLASSIFICATION	8.685751140385353E-8	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999998636357477	WITHOUT_CLASSIFICATION	1.3636425225762635E-7	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999996184578867	WITHOUT_CLASSIFICATION	3.8154211341051923E-7	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999563710931323	WITHOUT_CLASSIFICATION	4.3628906867645414E-5	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999999933694554	WITHOUT_CLASSIFICATION	6.630544602976048E-8	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999724790357	WITHOUT_CLASSIFICATION	2.7520964291138787E-8	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999939453175261	WITHOUT_CLASSIFICATION	6.054682473949522E-6	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999999509746821	WITHOUT_CLASSIFICATION	4.9025317913466194E-8	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999942287590572	WITHOUT_CLASSIFICATION	5.77124094286788E-6	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999986282711957	WITHOUT_CLASSIFICATION	1.3717288043286564E-6	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.9999999286022438	WITHOUT_CLASSIFICATION	7.139775614300898E-8	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999902211791	WITHOUT_CLASSIFICATION	9.778820746221379E-9	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999990896089085	WITHOUT_CLASSIFICATION	9.103910915169848E-7	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9697933793916442	WITHOUT_CLASSIFICATION	0.030206620608355706	IMPLEMENTATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999981910521035	WITHOUT_CLASSIFICATION	1.8089478963755427E-6	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9782518108189666	WITHOUT_CLASSIFICATION	0.021748189181033332	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9209279541394265	WITHOUT_CLASSIFICATION	0.0790720458605735	IMPLEMENTATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.999994945643601	WITHOUT_CLASSIFICATION	5.054356398920975E-6	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9999997212517315	WITHOUT_CLASSIFICATION	2.7874826843354915E-7	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999983482436846	WITHOUT_CLASSIFICATION	1.651756315472381E-6	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999985689991159	WITHOUT_CLASSIFICATION	1.4310008841678902E-6	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9979031867543947	WITHOUT_CLASSIFICATION	0.002096813245605407	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999807428224	WITHOUT_CLASSIFICATION	1.925717756833322E-8	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.9999978621469614	WITHOUT_CLASSIFICATION	2.137853038670605E-6	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999980263155158	WITHOUT_CLASSIFICATION	1.9736844841863653E-6	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999999752022009	WITHOUT_CLASSIFICATION	2.4797799157900564E-8	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999979422141555	WITHOUT_CLASSIFICATION	2.057785844438737E-6	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999932180728356	WITHOUT_CLASSIFICATION	6.78192716443459E-6	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999997767168078	WITHOUT_CLASSIFICATION	2.232831921958694E-7	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999961227714441	WITHOUT_CLASSIFICATION	3.877228555841837E-6	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.9999997022068557	WITHOUT_CLASSIFICATION	2.977931441722785E-7	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.9999964327312236	WITHOUT_CLASSIFICATION	3.5672687764337926E-6	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9991723669763003	WITHOUT_CLASSIFICATION	8.276330236997325E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9991723669763003	WITHOUT_CLASSIFICATION	8.276330236997325E-4	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999987707631115	WITHOUT_CLASSIFICATION	1.2292368884678703E-6	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999815470200937	WITHOUT_CLASSIFICATION	1.845297990626172E-5	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999999948868947	WITHOUT_CLASSIFICATION	5.113105182062709E-9	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999377911364165	WITHOUT_CLASSIFICATION	6.220886358352481E-5	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.99999999169093	WITHOUT_CLASSIFICATION	8.30906985879265E-9	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999999729130407	WITHOUT_CLASSIFICATION	2.7086959468377783E-8	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999994281708947	WITHOUT_CLASSIFICATION	5.718291052633907E-7	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999983471872316	WITHOUT_CLASSIFICATION	1.6528127683512887E-6	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999996956949898	WITHOUT_CLASSIFICATION	3.0430501019826056E-7	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999986351190069	WITHOUT_CLASSIFICATION	1.3648809931364113E-6	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999504500382	WITHOUT_CLASSIFICATION	4.9549961738908544E-8	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999962742612639	WITHOUT_CLASSIFICATION	3.7257387362026442E-6	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998542161399043	WITHOUT_CLASSIFICATION	1.4578386009573337E-4	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999945944117	WITHOUT_CLASSIFICATION	5.405588311456287E-9	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9996425786828264	WITHOUT_CLASSIFICATION	3.574213171736455E-4	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999972729322654	WITHOUT_CLASSIFICATION	2.7270677345557957E-6	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9860004010938885	WITHOUT_CLASSIFICATION	0.01399959890611138	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9860004010938885	WITHOUT_CLASSIFICATION	0.01399959890611138	IMPLEMENTATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999996943900974	WITHOUT_CLASSIFICATION	3.056099025164664E-7	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999996098561362	WITHOUT_CLASSIFICATION	3.9014386370180164E-7	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998855497779996	WITHOUT_CLASSIFICATION	1.1445022200036852E-4	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998353826101	WITHOUT_CLASSIFICATION	1.646173900109948E-7	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999986523242701	WITHOUT_CLASSIFICATION	1.3476757298940547E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999961997619861	WITHOUT_CLASSIFICATION	3.800238013951357E-6	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998460229962405	WITHOUT_CLASSIFICATION	1.5397700375949683E-4	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999724059483	WITHOUT_CLASSIFICATION	2.7594051749609453E-8	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999722667673	WITHOUT_CLASSIFICATION	2.773323269305808E-8	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999584479191	WITHOUT_CLASSIFICATION	4.155208083565426E-8	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.999999401150662	WITHOUT_CLASSIFICATION	5.98849337955786E-7	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.999999401150662	WITHOUT_CLASSIFICATION	5.98849337955786E-7	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999784982787377	WITHOUT_CLASSIFICATION	2.150172126221932E-5	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999998642906482	WITHOUT_CLASSIFICATION	1.3570935165249088E-7	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999979259817148	WITHOUT_CLASSIFICATION	2.0740182852289557E-6	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999998686989369	WITHOUT_CLASSIFICATION	1.3130106305272408E-7	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999961247831872	WITHOUT_CLASSIFICATION	3.875216812769046E-6	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999994749921	WITHOUT_CLASSIFICATION	5.250079220268924E-10	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999993768576309	WITHOUT_CLASSIFICATION	6.231423692616583E-7	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999704014848714	WITHOUT_CLASSIFICATION	2.959851512860003E-5	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9998675870907308	WITHOUT_CLASSIFICATION	1.3241290926925442E-4	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999663086447793	WITHOUT_CLASSIFICATION	3.369135522066841E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996147691439	WITHOUT_CLASSIFICATION	3.8523085611638635E-7	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999801709045213	WITHOUT_CLASSIFICATION	1.9829095478667615E-5	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9988823799248177	WITHOUT_CLASSIFICATION	0.001117620075182378	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999965943962925	WITHOUT_CLASSIFICATION	3.4056037075987274E-6	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999983163522407	WITHOUT_CLASSIFICATION	1.6836477593190487E-6	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999995478461347	WITHOUT_CLASSIFICATION	4.52153865306919E-7	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999998985562392	WITHOUT_CLASSIFICATION	1.0144376081144915E-7	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999985830823	WITHOUT_CLASSIFICATION	1.4169176980023696E-9	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999989370078	WITHOUT_CLASSIFICATION	1.0629922066677008E-9	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.999998727002717	WITHOUT_CLASSIFICATION	1.2729972830482105E-6	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999985497401283	WITHOUT_CLASSIFICATION	1.4502598716768284E-6	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9996992698348793	WITHOUT_CLASSIFICATION	3.007301651206294E-4	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.999999493497245	WITHOUT_CLASSIFICATION	5.065027550541706E-7	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999988269099412	WITHOUT_CLASSIFICATION	1.1730900587758938E-6	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999994416470921	WITHOUT_CLASSIFICATION	5.583529078367184E-7	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999986412649631	WITHOUT_CLASSIFICATION	1.3587350368657285E-6	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999998805240099	WITHOUT_CLASSIFICATION	1.1947599015448859E-7	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999718459348429	WITHOUT_CLASSIFICATION	2.8154065157103616E-4	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9369552840376519	WITHOUT_CLASSIFICATION	0.06304471596234801	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999962240892747	WITHOUT_CLASSIFICATION	3.775910725330372E-6	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9989861870225737	WITHOUT_CLASSIFICATION	0.0010138129774263061	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999617350228	WITHOUT_CLASSIFICATION	3.826497725524793E-8	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999730402899856	WITHOUT_CLASSIFICATION	2.6959710014420037E-5	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9999999754615015	WITHOUT_CLASSIFICATION	2.453849842479764E-8	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999991821550919	WITHOUT_CLASSIFICATION	8.178449079855021E-7	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999986519740127	WITHOUT_CLASSIFICATION	1.348025987282764E-6	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999947445712711	WITHOUT_CLASSIFICATION	5.255428728843678E-6	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.999998831494282	WITHOUT_CLASSIFICATION	1.1685057180215251E-6	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999999467996722	WITHOUT_CLASSIFICATION	5.3200327898793564E-8	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999999467996722	WITHOUT_CLASSIFICATION	5.3200327898793564E-8	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.999999906758494	WITHOUT_CLASSIFICATION	9.324150606238108E-8	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998127020542	WITHOUT_CLASSIFICATION	1.872979457445118E-7	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999999502622166	WITHOUT_CLASSIFICATION	4.973778340127111E-7	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.999995358796355	WITHOUT_CLASSIFICATION	4.641203645008571E-6	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999957117199484	WITHOUT_CLASSIFICATION	4.288280051623408E-6	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999999933787	WITHOUT_CLASSIFICATION	6.621286043417042E-12	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999997411095	WITHOUT_CLASSIFICATION	2.5889042953112515E-10	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.999974744863142	WITHOUT_CLASSIFICATION	2.5255136857983792E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.999999906758494	WITHOUT_CLASSIFICATION	9.324150606238108E-8	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998127020542	WITHOUT_CLASSIFICATION	1.872979457445118E-7	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999974142757357	WITHOUT_CLASSIFICATION	2.585724264257525E-6	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999565798945222	WITHOUT_CLASSIFICATION	4.3420105477661945E-5	IMPLEMENTATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999438627748	WITHOUT_CLASSIFICATION	5.613722524815395E-8	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9995546267375855	WITHOUT_CLASSIFICATION	4.453732624143942E-4	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999999801868549	WITHOUT_CLASSIFICATION	1.981314510285956E-7	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999981287022354	WITHOUT_CLASSIFICATION	1.8712977647400105E-6	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999958230328025	WITHOUT_CLASSIFICATION	4.1769671973780955E-6	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999483889030077	WITHOUT_CLASSIFICATION	5.1611096992163275E-5	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999979730818026	WITHOUT_CLASSIFICATION	2.0269181973867475E-5	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7362776607368805	IMPLEMENTATION	0.2637223392631196	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999999103409	WITHOUT_CLASSIFICATION	8.965904685292248E-11	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7362776607368805	IMPLEMENTATION	0.2637223392631196	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999980901303164	WITHOUT_CLASSIFICATION	1.90986968366801E-6	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999990836706181	WITHOUT_CLASSIFICATION	9.16329381800983E-7	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999994581669178	WITHOUT_CLASSIFICATION	5.418330822064682E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986762623595	WITHOUT_CLASSIFICATION	1.323737640529356E-6	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999944237825219	WITHOUT_CLASSIFICATION	5.576217478072466E-6	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999483889030077	WITHOUT_CLASSIFICATION	5.1611096992163275E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999483889030077	WITHOUT_CLASSIFICATION	5.1611096992163275E-5	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999998878355477	WITHOUT_CLASSIFICATION	1.1216445227475121E-7	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999999413816099	WITHOUT_CLASSIFICATION	5.8618390034654554E-8	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999982102312707	WITHOUT_CLASSIFICATION	1.7897687293803588E-6	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999994252588545	WITHOUT_CLASSIFICATION	5.747411455554529E-7	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.999999455571199	WITHOUT_CLASSIFICATION	5.44428801079198E-7	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999999969241615	WITHOUT_CLASSIFICATION	3.0758384936972216E-8	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9987061543456575	WITHOUT_CLASSIFICATION	0.0012938456543424653	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999995071042387	WITHOUT_CLASSIFICATION	4.928957612993104E-7	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999999580349456	WITHOUT_CLASSIFICATION	4.196505442274407E-8	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999629621724304	WITHOUT_CLASSIFICATION	3.703782756962123E-5	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.9999977882348972	WITHOUT_CLASSIFICATION	2.2117651028147013E-6	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.999999929869695	WITHOUT_CLASSIFICATION	7.013030496220116E-8	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999957863791332	WITHOUT_CLASSIFICATION	4.213620866674444E-6	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.9999621992556873	WITHOUT_CLASSIFICATION	3.780074431265791E-5	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9999998027477487	WITHOUT_CLASSIFICATION	1.9725225135818343E-7	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999534456500001	WITHOUT_CLASSIFICATION	4.655434999988323E-5	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999992549854557	WITHOUT_CLASSIFICATION	7.450145443034274E-6	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999844470428689	WITHOUT_CLASSIFICATION	1.5552957131064448E-5	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999442698035891	WITHOUT_CLASSIFICATION	5.5730196411041094E-5	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999676342509	WITHOUT_CLASSIFICATION	3.2365749031349996E-8	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9999930824246615	WITHOUT_CLASSIFICATION	6.917575338597238E-6	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998158478283933	WITHOUT_CLASSIFICATION	1.8415217160676207E-4	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999818404677979	WITHOUT_CLASSIFICATION	1.8159532202041602E-5	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9976636289088421	WITHOUT_CLASSIFICATION	0.0023363710911578368	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.999974948587774	WITHOUT_CLASSIFICATION	2.505141222591226E-5	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999587101449536	WITHOUT_CLASSIFICATION	4.128985504648048E-5	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999995125741833	WITHOUT_CLASSIFICATION	4.87425816714691E-7	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999997595429213	WITHOUT_CLASSIFICATION	2.4045707870115133E-7	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9762226983209822	WITHOUT_CLASSIFICATION	0.023777301679017922	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9963723433869454	WITHOUT_CLASSIFICATION	0.003627656613054511	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9838158554951344	WITHOUT_CLASSIFICATION	0.016184144504865605	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9872647308642494	WITHOUT_CLASSIFICATION	0.012735269135750597	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9998541267946153	WITHOUT_CLASSIFICATION	1.4587320538464042E-4	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999995071042387	WITHOUT_CLASSIFICATION	4.928957612993104E-7	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999947128998098	WITHOUT_CLASSIFICATION	5.2871001901760895E-6	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.9999763317139849	WITHOUT_CLASSIFICATION	2.3668286015094527E-5	IMPLEMENTATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9506487370394933	WITHOUT_CLASSIFICATION	0.04935126296050673	IMPLEMENTATION
an assertion	WITHOUT_CLASSIFICATION	0.999999915203874	WITHOUT_CLASSIFICATION	8.479612600696909E-8	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9998021423779142	WITHOUT_CLASSIFICATION	1.9785762208582102E-4	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.9999952296234805	WITHOUT_CLASSIFICATION	4.770376519447338E-6	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999994252588545	WITHOUT_CLASSIFICATION	5.747411455554529E-7	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999994252588545	WITHOUT_CLASSIFICATION	5.747411455554529E-7	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999205128878221	WITHOUT_CLASSIFICATION	7.948711217790426E-5	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999911883700786	WITHOUT_CLASSIFICATION	8.811629921369785E-6	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.999999275988258	WITHOUT_CLASSIFICATION	7.24011742031014E-7	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.999979763588472	WITHOUT_CLASSIFICATION	2.0236411527964738E-5	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9997800705995925	WITHOUT_CLASSIFICATION	2.1992940040742935E-4	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999996461836134	WITHOUT_CLASSIFICATION	3.538163866776189E-7	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999992448231209	WITHOUT_CLASSIFICATION	7.551768791827366E-7	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999796527388	WITHOUT_CLASSIFICATION	2.0347261223506436E-8	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999999713261041	WITHOUT_CLASSIFICATION	2.8673895826525206E-8	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999710189338792	WITHOUT_CLASSIFICATION	2.8981066120875657E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999697012947	WITHOUT_CLASSIFICATION	3.0298705391760236E-8	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999948297892056	WITHOUT_CLASSIFICATION	5.170210794389315E-6	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999988008855833	WITHOUT_CLASSIFICATION	1.1991144166849764E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.999999906758494	WITHOUT_CLASSIFICATION	9.324150606238108E-8	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999697012947	WITHOUT_CLASSIFICATION	3.0298705391760236E-8	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999991470381403	WITHOUT_CLASSIFICATION	8.529618597155342E-7	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9996000565752597	WITHOUT_CLASSIFICATION	3.999434247403711E-4	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999994401744485	WITHOUT_CLASSIFICATION	5.598255514748227E-7	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.9409897199224209	IMPLEMENTATION	0.05901028007757905	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999988008855833	WITHOUT_CLASSIFICATION	1.1991144166849764E-5	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999999886381161	WITHOUT_CLASSIFICATION	1.1361883899524607E-7	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999885519613	WITHOUT_CLASSIFICATION	1.1448038871914232E-8	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999338893173	WITHOUT_CLASSIFICATION	6.611068262333847E-8	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999999998067	WITHOUT_CLASSIFICATION	1.9327452905295628E-13	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999900527728585	WITHOUT_CLASSIFICATION	9.947227141489269E-6	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999997046430708	WITHOUT_CLASSIFICATION	2.9535692931772163E-7	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999394274535	WITHOUT_CLASSIFICATION	6.057254651170282E-8	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999912104339116	WITHOUT_CLASSIFICATION	8.789566088443923E-6	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999606047769506	WITHOUT_CLASSIFICATION	3.939522304950287E-5	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999966921206276	WITHOUT_CLASSIFICATION	3.3078793723641266E-6	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999538022879	WITHOUT_CLASSIFICATION	4.6197712074355744E-8	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999828557884204	WITHOUT_CLASSIFICATION	1.7144211579637623E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999697012947	WITHOUT_CLASSIFICATION	3.0298705391760236E-8	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999999886381161	WITHOUT_CLASSIFICATION	1.1361883899524607E-7	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999338893173	WITHOUT_CLASSIFICATION	6.611068262333847E-8	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999995767307054	WITHOUT_CLASSIFICATION	4.2326929457773495E-7	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999995132876198	WITHOUT_CLASSIFICATION	4.8671238015751E-7	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.9999999784598763	WITHOUT_CLASSIFICATION	2.1540123760222624E-8	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999988008855833	WITHOUT_CLASSIFICATION	1.1991144166849764E-5	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999992326014776	WITHOUT_CLASSIFICATION	7.673985223483154E-7	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999972695838383	WITHOUT_CLASSIFICATION	2.730416161798309E-6	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999757740508167	WITHOUT_CLASSIFICATION	2.422594918330956E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999844040949727	WITHOUT_CLASSIFICATION	1.559590502724013E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999912104339116	WITHOUT_CLASSIFICATION	8.789566088443923E-6	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999991470381403	WITHOUT_CLASSIFICATION	8.529618597155342E-7	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.9999602482687755	WITHOUT_CLASSIFICATION	3.975173122457909E-5	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999994867925533	WITHOUT_CLASSIFICATION	5.132074466682966E-7	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999995676420615	WITHOUT_CLASSIFICATION	4.323579385253071E-7	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999862103317599	WITHOUT_CLASSIFICATION	1.3789668240078345E-5	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9621223998013994	WITHOUT_CLASSIFICATION	0.03787760019860063	IMPLEMENTATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9993331696529778	WITHOUT_CLASSIFICATION	6.668303470222254E-4	IMPLEMENTATION
render the SQL	WITHOUT_CLASSIFICATION	0.9999911093922945	WITHOUT_CLASSIFICATION	8.89060770550842E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986762623595	WITHOUT_CLASSIFICATION	1.323737640529356E-6	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998893509171	WITHOUT_CLASSIFICATION	1.1064908297100418E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999669564437335	WITHOUT_CLASSIFICATION	3.304355626649798E-4	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999726577005	WITHOUT_CLASSIFICATION	2.7342299553237426E-8	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999999312671688	WITHOUT_CLASSIFICATION	6.873283116279397E-8	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999798909271	WITHOUT_CLASSIFICATION	2.0109072866764154E-8	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999740784435	WITHOUT_CLASSIFICATION	2.5921556484859225E-8	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999753123481	WITHOUT_CLASSIFICATION	2.468765196346716E-8	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.99999960012492	WITHOUT_CLASSIFICATION	3.998750799957921E-7	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999997260539417	WITHOUT_CLASSIFICATION	2.7394605826147995E-7	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999844040949727	WITHOUT_CLASSIFICATION	1.559590502724013E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999669564437335	WITHOUT_CLASSIFICATION	3.304355626649798E-4	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999386330831406	WITHOUT_CLASSIFICATION	6.136691685939961E-5	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.9999830552140779	WITHOUT_CLASSIFICATION	1.694478592206491E-5	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999955616458714	WITHOUT_CLASSIFICATION	4.438354128539831E-6	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999868479374779	WITHOUT_CLASSIFICATION	1.3152062522130184E-5	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.9999995157328334	WITHOUT_CLASSIFICATION	4.842671665434296E-7	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.999996717533971	WITHOUT_CLASSIFICATION	3.2824660290637462E-6	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.999996906566183	WITHOUT_CLASSIFICATION	3.0934338170455823E-6	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.9975603358923133	WITHOUT_CLASSIFICATION	0.0024396641076867035	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999998982806055	WITHOUT_CLASSIFICATION	1.0171939447456646E-7	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9994927868130569	WITHOUT_CLASSIFICATION	5.072131869430901E-4	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999998368188295	WITHOUT_CLASSIFICATION	1.6318117037276937E-7	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999819844202	WITHOUT_CLASSIFICATION	1.8015579803911567E-8	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999831600951165	WITHOUT_CLASSIFICATION	1.6839904883519602E-5	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.9999995930375664	WITHOUT_CLASSIFICATION	4.069624335846927E-7	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999359742036	WITHOUT_CLASSIFICATION	6.40257963941654E-8	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999667942463	WITHOUT_CLASSIFICATION	3.320575371479355E-8	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999990027491474	WITHOUT_CLASSIFICATION	9.972508525746242E-7	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999379823041	WITHOUT_CLASSIFICATION	6.201769591967E-8	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999976344009496	WITHOUT_CLASSIFICATION	2.365599050426329E-6	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999999452563604	WITHOUT_CLASSIFICATION	5.4743639657032265E-8	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.9999703853169243	WITHOUT_CLASSIFICATION	2.9614683075753893E-5	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999993682207892	WITHOUT_CLASSIFICATION	6.317792109124452E-7	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999997895554628	WITHOUT_CLASSIFICATION	2.104445371903129E-7	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999968079468	WITHOUT_CLASSIFICATION	3.192053139522078E-9	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999999818528219	WITHOUT_CLASSIFICATION	1.8147178109847038E-7	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9162910324544448	WITHOUT_CLASSIFICATION	0.08370896754555525	IMPLEMENTATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9998935195394903	WITHOUT_CLASSIFICATION	1.064804605096052E-4	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999994943146996	WITHOUT_CLASSIFICATION	5.056853003949739E-6	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999910914815956	WITHOUT_CLASSIFICATION	8.908518404310944E-6	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.7728278065332554	IMPLEMENTATION	0.2271721934667445	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999780962527	WITHOUT_CLASSIFICATION	2.1903747267164916E-8	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997285714441556	WITHOUT_CLASSIFICATION	2.714285558444535E-4	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999995833994849	WITHOUT_CLASSIFICATION	4.166005150530389E-7	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999252325717566	WITHOUT_CLASSIFICATION	7.47674282433801E-5	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999958968779	WITHOUT_CLASSIFICATION	4.103122174749079E-9	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9999968097361127	WITHOUT_CLASSIFICATION	3.1902638872208682E-6	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.999999988652266	WITHOUT_CLASSIFICATION	1.1347733962171419E-8	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999741767378397	WITHOUT_CLASSIFICATION	2.5823262160207944E-5	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9999968097361127	WITHOUT_CLASSIFICATION	3.1902638872208682E-6	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999958968779	WITHOUT_CLASSIFICATION	4.103122174749079E-9	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.999999988652266	WITHOUT_CLASSIFICATION	1.1347733962171419E-8	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.9999973403725475	WITHOUT_CLASSIFICATION	2.6596274524997807E-6	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999996898499386	WITHOUT_CLASSIFICATION	3.101500614698715E-7	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999998449926978	WITHOUT_CLASSIFICATION	1.5500730233607156E-7	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999977050896687	WITHOUT_CLASSIFICATION	2.29491033123999E-6	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999993909738	WITHOUT_CLASSIFICATION	6.090262820958281E-10	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.842423336057039	WITHOUT_CLASSIFICATION	0.15757666394296108	IMPLEMENTATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999925902047239	WITHOUT_CLASSIFICATION	7.4097952760530175E-6	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999685088751273	WITHOUT_CLASSIFICATION	3.149112487257199E-5	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999996855887278	WITHOUT_CLASSIFICATION	3.144112721928275E-6	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999960534635581	WITHOUT_CLASSIFICATION	3.946536441890246E-6	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.999998731716611	WITHOUT_CLASSIFICATION	1.268283388898049E-6	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999996207227492	WITHOUT_CLASSIFICATION	3.7927725079477125E-7	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9996323785174275	WITHOUT_CLASSIFICATION	3.676214825725093E-4	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999977050896687	WITHOUT_CLASSIFICATION	2.29491033123999E-6	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9990312912378695	WITHOUT_CLASSIFICATION	9.687087621305305E-4	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999455623746	WITHOUT_CLASSIFICATION	5.443762532587971E-8	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999994212733	WITHOUT_CLASSIFICATION	5.787267769220787E-10	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.999999546162743	WITHOUT_CLASSIFICATION	4.538372570497177E-7	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999994685625604	WITHOUT_CLASSIFICATION	5.31437439614425E-7	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999719875973	WITHOUT_CLASSIFICATION	2.8012402769704602E-8	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9877615115267881	WITHOUT_CLASSIFICATION	0.012238488473211856	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999973227337	WITHOUT_CLASSIFICATION	2.6772662750567812E-9	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999973537127983	WITHOUT_CLASSIFICATION	2.6462872016317697E-6	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999880666313509	WITHOUT_CLASSIFICATION	1.1933368649032222E-5	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999948134507	WITHOUT_CLASSIFICATION	5.186549262383687E-9	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999948134507	WITHOUT_CLASSIFICATION	5.186549262383687E-9	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999985151224	WITHOUT_CLASSIFICATION	1.4848775868789414E-9	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999985151224	WITHOUT_CLASSIFICATION	1.4848775868789414E-9	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.9922384732359828	WITHOUT_CLASSIFICATION	0.007761526764017175	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999994212733	WITHOUT_CLASSIFICATION	5.787267769220787E-10	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999962945499747	WITHOUT_CLASSIFICATION	3.7054500252455716E-6	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999934906732533	WITHOUT_CLASSIFICATION	6.509326746725116E-6	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999996140583722	WITHOUT_CLASSIFICATION	3.859416277510268E-7	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999996140583722	WITHOUT_CLASSIFICATION	3.859416277510268E-7	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999996018329473	WITHOUT_CLASSIFICATION	3.981670526365577E-7	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999992994208392	WITHOUT_CLASSIFICATION	7.005791607512268E-7	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999878149937	WITHOUT_CLASSIFICATION	1.218500636847279E-8	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.9999962603619854	WITHOUT_CLASSIFICATION	3.7396380145649487E-6	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999465067133172	WITHOUT_CLASSIFICATION	5.3493286682892795E-5	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999985729005713	WITHOUT_CLASSIFICATION	1.4270994288151791E-6	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999996753748606	WITHOUT_CLASSIFICATION	3.2462513948300853E-7	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.999973824882128	WITHOUT_CLASSIFICATION	2.6175117872063397E-5	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.9999871390984527	WITHOUT_CLASSIFICATION	1.2860901547170496E-5	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999999808990151	WITHOUT_CLASSIFICATION	1.9100984956236883E-8	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.9999984650338319	WITHOUT_CLASSIFICATION	1.534966168063799E-6	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.9998041895718012	WITHOUT_CLASSIFICATION	1.958104281989053E-4	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999999462468352	WITHOUT_CLASSIFICATION	5.375316482107467E-8	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9999992862470543	WITHOUT_CLASSIFICATION	7.1375294573768E-7	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9998205932807632	WITHOUT_CLASSIFICATION	1.794067192367019E-4	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999911018211657	WITHOUT_CLASSIFICATION	8.898178834345538E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926909330711	WITHOUT_CLASSIFICATION	7.309066928941958E-6	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999871038559333	WITHOUT_CLASSIFICATION	1.2896144066690918E-5	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.999457517916085	WITHOUT_CLASSIFICATION	5.42482083915106E-4	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999874206236	WITHOUT_CLASSIFICATION	1.2579376363689233E-8	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9989667287015528	WITHOUT_CLASSIFICATION	0.001033271298447284	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999997985242697	WITHOUT_CLASSIFICATION	2.0147573019663631E-7	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999836863979841	WITHOUT_CLASSIFICATION	1.6313602015985363E-5	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999993041631077	WITHOUT_CLASSIFICATION	6.958368923785166E-7	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999590922580854	WITHOUT_CLASSIFICATION	4.0907741914510045E-5	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999995905593171	WITHOUT_CLASSIFICATION	4.094406828748742E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999669564437335	WITHOUT_CLASSIFICATION	3.304355626649798E-4	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999819844202	WITHOUT_CLASSIFICATION	1.8015579803911567E-8	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999990611011889	WITHOUT_CLASSIFICATION	9.388988110199437E-7	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999986012495602	WITHOUT_CLASSIFICATION	1.3987504398326666E-6	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717195981342	WITHOUT_CLASSIFICATION	2.8280401865706965E-5	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999507237866847	WITHOUT_CLASSIFICATION	4.927621331531603E-5	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999974099609821	WITHOUT_CLASSIFICATION	2.5900390180219336E-6	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999974099609821	WITHOUT_CLASSIFICATION	2.5900390180219336E-6	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999967376086101	WITHOUT_CLASSIFICATION	3.2623913899287868E-6	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9999987941507889	WITHOUT_CLASSIFICATION	1.2058492111206948E-6	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.999999931318878	WITHOUT_CLASSIFICATION	6.868112200685318E-8	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.999999931318878	WITHOUT_CLASSIFICATION	6.868112200685318E-8	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999880350142417	WITHOUT_CLASSIFICATION	1.1964985758218872E-5	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999945854511997	WITHOUT_CLASSIFICATION	5.414548800325522E-6	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.9999914884421989	WITHOUT_CLASSIFICATION	8.511557801173793E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999854292860478	WITHOUT_CLASSIFICATION	1.4570713952052036E-5	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.999999666097175	WITHOUT_CLASSIFICATION	3.339028249206372E-7	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999999929398091	WITHOUT_CLASSIFICATION	7.060190848029997E-9	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.9997060801434193	WITHOUT_CLASSIFICATION	2.9391985658064096E-4	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999903774896173	WITHOUT_CLASSIFICATION	9.622510382743737E-6	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999998777818082	WITHOUT_CLASSIFICATION	1.2221819174529142E-7	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999998777818082	WITHOUT_CLASSIFICATION	1.2221819174529142E-7	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999932452527508	WITHOUT_CLASSIFICATION	6.75474724925525E-6	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999998312555171	WITHOUT_CLASSIFICATION	1.687444829482375E-7	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999998312555171	WITHOUT_CLASSIFICATION	1.687444829482375E-7	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999999932312968	WITHOUT_CLASSIFICATION	6.768703205123115E-8	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999999991415098	WITHOUT_CLASSIFICATION	8.584900673736563E-10	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9978762079950516	WITHOUT_CLASSIFICATION	0.0021237920049483184	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.9999960723437613	WITHOUT_CLASSIFICATION	3.927656238620331E-6	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999943480743634	WITHOUT_CLASSIFICATION	5.65192563653387E-6	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999994444239	WITHOUT_CLASSIFICATION	5.555761866810186E-10	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999489213016496	WITHOUT_CLASSIFICATION	5.1078698350527045E-5	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999262072875347	WITHOUT_CLASSIFICATION	7.379271246524399E-5	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999997897973194	WITHOUT_CLASSIFICATION	2.1020268060279001E-7	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9998278819000415	WITHOUT_CLASSIFICATION	1.7211809995848015E-4	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999994693566666	WITHOUT_CLASSIFICATION	5.306433333901448E-7	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9998414098948342	WITHOUT_CLASSIFICATION	1.585901051657804E-4	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999997565667219	WITHOUT_CLASSIFICATION	2.434332780949304E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999997565667219	WITHOUT_CLASSIFICATION	2.434332780949304E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999997565667219	WITHOUT_CLASSIFICATION	2.434332780949304E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999997565667219	WITHOUT_CLASSIFICATION	2.434332780949304E-6	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999915154609885	WITHOUT_CLASSIFICATION	8.4845390114636E-6	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999605238270756	WITHOUT_CLASSIFICATION	3.9476172924432856E-5	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999997876414602	WITHOUT_CLASSIFICATION	2.1235853980221555E-6	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.999994889635867	WITHOUT_CLASSIFICATION	5.110364133008612E-6	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999956138861862	WITHOUT_CLASSIFICATION	4.38611381379723E-6	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9999603613031479	WITHOUT_CLASSIFICATION	3.9638696852206976E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999961997619861	WITHOUT_CLASSIFICATION	3.800238013951357E-6	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998911724458212	WITHOUT_CLASSIFICATION	1.0882755417877606E-4	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999429689234163	WITHOUT_CLASSIFICATION	5.70310765838206E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999961997619861	WITHOUT_CLASSIFICATION	3.800238013951357E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999961997619861	WITHOUT_CLASSIFICATION	3.800238013951357E-6	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999605160269043	WITHOUT_CLASSIFICATION	3.948397309569161E-5	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.9999995847270647	WITHOUT_CLASSIFICATION	4.152729352020383E-7	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.9999956156859855	WITHOUT_CLASSIFICATION	4.384314014475862E-6	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999989940252243	WITHOUT_CLASSIFICATION	1.0059747757853396E-6	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999999912984564	WITHOUT_CLASSIFICATION	8.701543599977884E-9	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.999999795457638	WITHOUT_CLASSIFICATION	2.0454236211940454E-7	IMPLEMENTATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9998469753686201	WITHOUT_CLASSIFICATION	1.530246313799476E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999989940252243	WITHOUT_CLASSIFICATION	1.0059747757853396E-6	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999943550041949	WITHOUT_CLASSIFICATION	5.644995805165981E-6	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999964533305632	WITHOUT_CLASSIFICATION	3.546669436841475E-6	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999988647777157	WITHOUT_CLASSIFICATION	1.135222284237266E-6	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999999988931015	WITHOUT_CLASSIFICATION	1.1068985095062592E-9	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999999998589932	WITHOUT_CLASSIFICATION	1.410067881853059E-9	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999993548354419	WITHOUT_CLASSIFICATION	6.451645581217479E-7	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999033115061	WITHOUT_CLASSIFICATION	9.668849381580859E-8	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999644179453847	WITHOUT_CLASSIFICATION	3.5582054615335176E-5	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996330810637	WITHOUT_CLASSIFICATION	3.669189363501107E-7	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999996006375146	WITHOUT_CLASSIFICATION	3.9936248548327535E-7	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999978069342	WITHOUT_CLASSIFICATION	2.1930657956752434E-9	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998346607585	WITHOUT_CLASSIFICATION	1.6533924154509053E-7	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999984754882277	WITHOUT_CLASSIFICATION	1.52451177229305E-6	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999153660866537	WITHOUT_CLASSIFICATION	8.463391334643524E-5	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999617786296476	WITHOUT_CLASSIFICATION	3.822137035233337E-5	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999996998281735	WITHOUT_CLASSIFICATION	3.001718264639703E-7	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999919467901	WITHOUT_CLASSIFICATION	8.053209892545908E-9	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998426543376	WITHOUT_CLASSIFICATION	1.573456624029346E-7	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999920998356147	WITHOUT_CLASSIFICATION	7.900164385414857E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998426543376	WITHOUT_CLASSIFICATION	1.573456624029346E-7	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999997107849288	WITHOUT_CLASSIFICATION	2.8921507129485323E-7	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999905198791	WITHOUT_CLASSIFICATION	9.48012082550925E-9	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999914362519706	WITHOUT_CLASSIFICATION	8.563748029291723E-6	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999953051460262	WITHOUT_CLASSIFICATION	4.694853973907399E-6	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999997971292913	WITHOUT_CLASSIFICATION	2.0287070868401681E-7	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999983672873853	WITHOUT_CLASSIFICATION	1.6327126146188195E-6	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999999697894844	WITHOUT_CLASSIFICATION	3.021051556120046E-8	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999919467901	WITHOUT_CLASSIFICATION	8.053209892545908E-9	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999920998356147	WITHOUT_CLASSIFICATION	7.900164385414857E-6	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999997107849288	WITHOUT_CLASSIFICATION	2.8921507129485323E-7	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999977965794653	WITHOUT_CLASSIFICATION	2.2034205346559606E-6	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.9999964398245189	WITHOUT_CLASSIFICATION	3.560175481027452E-6	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.9999719430878816	WITHOUT_CLASSIFICATION	2.8056912118270674E-5	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999999649917146	WITHOUT_CLASSIFICATION	3.500828529549468E-8	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.9999680709952262	WITHOUT_CLASSIFICATION	3.1929004773825695E-5	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999824957507157	WITHOUT_CLASSIFICATION	1.7504249284214294E-5	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999993549035564	WITHOUT_CLASSIFICATION	6.450964436734055E-7	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926909330711	WITHOUT_CLASSIFICATION	7.309066928941958E-6	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999905198791	WITHOUT_CLASSIFICATION	9.48012082550925E-9	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.999999998222864	WITHOUT_CLASSIFICATION	1.777135982402074E-9	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999998774067086	WITHOUT_CLASSIFICATION	1.225932913706656E-7	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999403426766734	WITHOUT_CLASSIFICATION	5.965732332661204E-5	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999851346436	WITHOUT_CLASSIFICATION	1.4865356472608442E-8	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926909330711	WITHOUT_CLASSIFICATION	7.309066928941958E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999669564437335	WITHOUT_CLASSIFICATION	3.304355626649798E-4	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999978832549555	WITHOUT_CLASSIFICATION	2.1167450445029926E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926909330711	WITHOUT_CLASSIFICATION	7.309066928941958E-6	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999960413934386	WITHOUT_CLASSIFICATION	3.958606561448272E-6	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999998490995775	WITHOUT_CLASSIFICATION	1.5090042250231628E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999669564437335	WITHOUT_CLASSIFICATION	3.304355626649798E-4	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998754341063404	WITHOUT_CLASSIFICATION	1.2456589365965814E-4	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9998539494569547	WITHOUT_CLASSIFICATION	1.4605054304530458E-4	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997041541354	WITHOUT_CLASSIFICATION	2.9584586457288853E-7	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.9999970336145773	WITHOUT_CLASSIFICATION	2.9663854227560175E-6	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999999051162425	WITHOUT_CLASSIFICATION	9.488375754353876E-8	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999998483750155	WITHOUT_CLASSIFICATION	1.5162498451102596E-6	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999995714106605	WITHOUT_CLASSIFICATION	4.285893393971164E-7	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.9999994145211589	WITHOUT_CLASSIFICATION	5.854788410227847E-7	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999862272094531	WITHOUT_CLASSIFICATION	1.377279054692399E-5	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999402878911	WITHOUT_CLASSIFICATION	5.97121089342044E-8	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9978762079950516	WITHOUT_CLASSIFICATION	0.0021237920049483184	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999995789740668	WITHOUT_CLASSIFICATION	4.210259332076504E-7	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999893172634449	WITHOUT_CLASSIFICATION	1.0682736555177656E-5	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999998816263331	WITHOUT_CLASSIFICATION	1.1837366683325321E-7	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999999901644387	WITHOUT_CLASSIFICATION	9.835561299637685E-8	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999989012137	WITHOUT_CLASSIFICATION	1.0987862817920823E-9	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999794547149095	WITHOUT_CLASSIFICATION	2.0545285090573274E-5	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999833202348866	WITHOUT_CLASSIFICATION	1.6679765113504854E-5	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.999999794501568	WITHOUT_CLASSIFICATION	2.0549843208623032E-7	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999999952435351	WITHOUT_CLASSIFICATION	4.756464897491394E-8	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999969065428	WITHOUT_CLASSIFICATION	3.093457196079199E-9	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.9981235119777534	WITHOUT_CLASSIFICATION	0.001876488022246609	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999994460061694	WITHOUT_CLASSIFICATION	5.539938305298896E-7	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999994988961093	WITHOUT_CLASSIFICATION	5.011038906507803E-7	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999992915735243	WITHOUT_CLASSIFICATION	7.084264757049795E-7	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999691629085166	WITHOUT_CLASSIFICATION	3.083709148347161E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999485066927292	WITHOUT_CLASSIFICATION	5.149330727080955E-5	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999997388382073	WITHOUT_CLASSIFICATION	2.611617927191351E-7	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9995075883197186	WITHOUT_CLASSIFICATION	4.924116802813648E-4	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.999990759823407	WITHOUT_CLASSIFICATION	9.240176593006014E-6	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.999998769284243	WITHOUT_CLASSIFICATION	1.23071575692973E-6	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.999999625633627	WITHOUT_CLASSIFICATION	3.743663730730936E-7	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.9952113792783203	WITHOUT_CLASSIFICATION	0.004788620721679725	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999983755935864	WITHOUT_CLASSIFICATION	1.6244064135512325E-6	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999999200998103	WITHOUT_CLASSIFICATION	7.990018972449071E-8	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.9999921407319108	WITHOUT_CLASSIFICATION	7.859268089248935E-6	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999606472436469	WITHOUT_CLASSIFICATION	3.935275635319225E-5	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999999693033538	WITHOUT_CLASSIFICATION	3.069664627980203E-8	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9985995361258686	WITHOUT_CLASSIFICATION	0.0014004638741314458	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999930092666039	WITHOUT_CLASSIFICATION	6.990733396096654E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999669564437335	WITHOUT_CLASSIFICATION	3.304355626649798E-4	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999999472131742	WITHOUT_CLASSIFICATION	5.2786825861255254E-8	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999342327723805	WITHOUT_CLASSIFICATION	6.576722761951115E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999342327723805	WITHOUT_CLASSIFICATION	6.576722761951115E-5	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9984250064747406	WITHOUT_CLASSIFICATION	0.001574993525259274	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999998483750155	WITHOUT_CLASSIFICATION	1.5162498451102596E-6	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9994933573762793	WITHOUT_CLASSIFICATION	5.066426237206821E-4	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999837023066	WITHOUT_CLASSIFICATION	1.62976934152731E-8	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999994590807002	WITHOUT_CLASSIFICATION	5.40919299850001E-7	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999932088992485	WITHOUT_CLASSIFICATION	6.791100751478273E-6	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.9999792785492413	WITHOUT_CLASSIFICATION	2.0721450758699755E-5	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.9999833949897126	WITHOUT_CLASSIFICATION	1.6605010287436933E-5	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999999528473	WITHOUT_CLASSIFICATION	4.7152774038637224E-11	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999991752903	WITHOUT_CLASSIFICATION	8.247097325194075E-10	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999936293158652	WITHOUT_CLASSIFICATION	6.370684134812693E-5	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.9999999195229393	WITHOUT_CLASSIFICATION	8.047706068083803E-8	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999954535937811	WITHOUT_CLASSIFICATION	4.546406219030146E-6	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999999999639308	WITHOUT_CLASSIFICATION	3.606921256215162E-10	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999988104058	WITHOUT_CLASSIFICATION	1.1895941872088435E-9	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999959545186019	WITHOUT_CLASSIFICATION	4.045481398066532E-6	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999244043066	WITHOUT_CLASSIFICATION	7.559569330005015E-8	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999963899813	WITHOUT_CLASSIFICATION	3.610018694179054E-9	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999977992868	WITHOUT_CLASSIFICATION	2.2007131663920667E-9	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9996323126925792	WITHOUT_CLASSIFICATION	3.67687307420724E-4	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999869464862091	WITHOUT_CLASSIFICATION	1.3053513790936903E-5	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9994721934041937	WITHOUT_CLASSIFICATION	5.278065958063668E-4	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999879074767892	WITHOUT_CLASSIFICATION	1.2092523210911462E-5	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999809096228	WITHOUT_CLASSIFICATION	1.9090377152163026E-8	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9985995361258686	WITHOUT_CLASSIFICATION	0.0014004638741314458	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999995502223518	WITHOUT_CLASSIFICATION	4.4977764818474417E-7	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.999999964546037	WITHOUT_CLASSIFICATION	3.5453962967618644E-8	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999975573415	WITHOUT_CLASSIFICATION	2.4426586047432558E-9	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999998620444511	WITHOUT_CLASSIFICATION	1.379555489273197E-7	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9983979133844442	WITHOUT_CLASSIFICATION	0.0016020866155558996	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999155484186295	WITHOUT_CLASSIFICATION	8.445158137053366E-5	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999999452079011	WITHOUT_CLASSIFICATION	5.479209884987102E-8	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999986018555451	WITHOUT_CLASSIFICATION	1.3981444548847165E-6	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.999992880782346	WITHOUT_CLASSIFICATION	7.119217653958051E-6	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999999561286	WITHOUT_CLASSIFICATION	4.387139449785247E-11	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999979250631403	WITHOUT_CLASSIFICATION	2.0749368595972444E-6	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999988680451682	WITHOUT_CLASSIFICATION	1.1319548317108795E-6	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999994813854504	WITHOUT_CLASSIFICATION	5.186145496044539E-7	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999999817672915	WITHOUT_CLASSIFICATION	1.823270852060268E-8	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999999842718982	WITHOUT_CLASSIFICATION	1.5728101776323652E-8	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999581408263314	WITHOUT_CLASSIFICATION	4.185917366852178E-5	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999581408263314	WITHOUT_CLASSIFICATION	4.185917366852178E-5	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999883456483424	WITHOUT_CLASSIFICATION	1.16543516576222E-5	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999236210878639	WITHOUT_CLASSIFICATION	7.637891213601992E-5	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999999980158277	WITHOUT_CLASSIFICATION	1.9841723059763023E-8	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999999980158277	WITHOUT_CLASSIFICATION	1.9841723059763023E-8	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.9999999110180874	WITHOUT_CLASSIFICATION	8.89819126844876E-8	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999984413057442	WITHOUT_CLASSIFICATION	1.5586942557433227E-6	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9984756208768522	WITHOUT_CLASSIFICATION	0.001524379123147821	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999823187142	WITHOUT_CLASSIFICATION	1.768128583150776E-8	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999986795736994	WITHOUT_CLASSIFICATION	1.3204263005793197E-6	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999963580514767	WITHOUT_CLASSIFICATION	3.641948523395965E-6	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999995402915	WITHOUT_CLASSIFICATION	4.597084131227057E-10	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999995402915	WITHOUT_CLASSIFICATION	4.597084131227057E-10	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999945343409496	WITHOUT_CLASSIFICATION	5.465659050376258E-6	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999991872576621	WITHOUT_CLASSIFICATION	8.127423377844259E-7	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999998948147608	WITHOUT_CLASSIFICATION	1.0518523925152756E-7	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999996789511114	WITHOUT_CLASSIFICATION	3.210488885859989E-7	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999996789511114	WITHOUT_CLASSIFICATION	3.210488885859989E-7	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.999999986176582	WITHOUT_CLASSIFICATION	1.38234179241123E-8	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.99999621998163	WITHOUT_CLASSIFICATION	3.7800183699462796E-6	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999989618320503	WITHOUT_CLASSIFICATION	1.0381679496805386E-6	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9999996168212892	WITHOUT_CLASSIFICATION	3.8317871081699933E-7	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999999804922106	WITHOUT_CLASSIFICATION	1.9507789405107914E-8	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999596321204	WITHOUT_CLASSIFICATION	4.036787946904274E-8	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999997247030576	WITHOUT_CLASSIFICATION	2.7529694243316816E-7	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.9999989396074624	WITHOUT_CLASSIFICATION	1.0603925374846479E-6	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.9999999814211332	WITHOUT_CLASSIFICATION	1.8578866845363304E-8	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999999309675919	WITHOUT_CLASSIFICATION	6.903240805760236E-8	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999985002594	WITHOUT_CLASSIFICATION	1.4997405406731457E-9	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9988232547864048	WITHOUT_CLASSIFICATION	0.0011767452135952356	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.9993796539699884	WITHOUT_CLASSIFICATION	6.203460300115101E-4	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999966465315478	WITHOUT_CLASSIFICATION	3.353468452205039E-5	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.9999882303230305	WITHOUT_CLASSIFICATION	1.1769676969606685E-5	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999996840946757	WITHOUT_CLASSIFICATION	3.159053243679439E-7	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999870338597168	WITHOUT_CLASSIFICATION	1.2966140283198277E-4	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999974000339714	WITHOUT_CLASSIFICATION	2.599966028599051E-6	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999970022625508	WITHOUT_CLASSIFICATION	2.9977374492159632E-6	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999980555034591	WITHOUT_CLASSIFICATION	1.9444965408561135E-6	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999993320103912	WITHOUT_CLASSIFICATION	6.679896088325285E-7	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999983464392165	WITHOUT_CLASSIFICATION	1.6535607835449684E-6	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9992540883022517	WITHOUT_CLASSIFICATION	7.459116977482425E-4	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999998966407058	WITHOUT_CLASSIFICATION	1.0335929423142274E-7	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.9999984930337271	WITHOUT_CLASSIFICATION	1.506966272845874E-6	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.9999999919089904	WITHOUT_CLASSIFICATION	8.091009622111659E-9	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999998799261315	WITHOUT_CLASSIFICATION	1.2007386852023296E-7	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999775081034412	WITHOUT_CLASSIFICATION	2.249189655873386E-5	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999011909041	WITHOUT_CLASSIFICATION	9.880909586890924E-8	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999989401475283	WITHOUT_CLASSIFICATION	1.059852471654847E-6	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999938445660872	WITHOUT_CLASSIFICATION	6.155433912806752E-5	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999881854934	WITHOUT_CLASSIFICATION	1.181450651654081E-8	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999984100239063	WITHOUT_CLASSIFICATION	1.5899760935974414E-6	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999989165917337	WITHOUT_CLASSIFICATION	1.0834082662600213E-6	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.99999840978894	WITHOUT_CLASSIFICATION	1.590211060079608E-6	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999906066126618	WITHOUT_CLASSIFICATION	9.393387338284347E-6	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.999996968502914	WITHOUT_CLASSIFICATION	3.031497085968292E-6	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999999999062026	WITHOUT_CLASSIFICATION	9.379740063333541E-10	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999869422427385	WITHOUT_CLASSIFICATION	1.3057757261411586E-5	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999656663924	WITHOUT_CLASSIFICATION	3.433360765662947E-8	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999999986916888	WITHOUT_CLASSIFICATION	1.3083111947484869E-8	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999998001254652	WITHOUT_CLASSIFICATION	1.9987453472598825E-7	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.9999992914465532	WITHOUT_CLASSIFICATION	7.085534468122841E-7	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.999992842799729	WITHOUT_CLASSIFICATION	7.157200271052847E-6	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9999986392602314	WITHOUT_CLASSIFICATION	1.3607397687194213E-6	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999997149426121	WITHOUT_CLASSIFICATION	2.8505738789962335E-7	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.9999995610351735	WITHOUT_CLASSIFICATION	4.3896482643234747E-7	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999995120882917	WITHOUT_CLASSIFICATION	4.8791170813346E-7	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999968958948724	WITHOUT_CLASSIFICATION	3.104105127687516E-6	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999999436955251	WITHOUT_CLASSIFICATION	5.63044749113723E-7	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999921677348254	WITHOUT_CLASSIFICATION	7.832265174581633E-6	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9981416655157179	WITHOUT_CLASSIFICATION	0.0018583344842820707	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9991369926771214	WITHOUT_CLASSIFICATION	8.630073228785163E-4	IMPLEMENTATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999971748013381	WITHOUT_CLASSIFICATION	2.8251986618929512E-6	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999993293170347	WITHOUT_CLASSIFICATION	6.70682965191578E-7	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999833330279581	WITHOUT_CLASSIFICATION	1.666697204190002E-4	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999996984547935	WITHOUT_CLASSIFICATION	3.015452065570276E-7	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999985686326837	WITHOUT_CLASSIFICATION	1.4313673163511752E-6	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999978178222392	WITHOUT_CLASSIFICATION	2.1821777608606226E-6	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999998645055993	WITHOUT_CLASSIFICATION	1.3549440066031055E-7	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999963516821774	WITHOUT_CLASSIFICATION	3.648317822611873E-6	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999963516821774	WITHOUT_CLASSIFICATION	3.648317822611873E-6	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999998890187	WITHOUT_CLASSIFICATION	1.1098133946993323E-10	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9993058652666827	WITHOUT_CLASSIFICATION	6.941347333172958E-4	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999989380675	WITHOUT_CLASSIFICATION	1.0619325579874562E-9	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999999857614454	WITHOUT_CLASSIFICATION	1.4238554604758524E-7	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999123748808	WITHOUT_CLASSIFICATION	8.762511915977113E-8	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999971403658243	WITHOUT_CLASSIFICATION	2.8596341755509027E-6	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.999999974558416	WITHOUT_CLASSIFICATION	2.5441584027487943E-8	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999055790603	WITHOUT_CLASSIFICATION	9.44209397863264E-8	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.999999666009982	WITHOUT_CLASSIFICATION	3.3399001792495606E-7	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999999639484815	WITHOUT_CLASSIFICATION	3.605151844777423E-8	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999997171203677	WITHOUT_CLASSIFICATION	2.8287963226420984E-7	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999984798944922	WITHOUT_CLASSIFICATION	1.5201055078311382E-6	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999943111304	WITHOUT_CLASSIFICATION	5.6888695439880665E-9	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9998737451678475	WITHOUT_CLASSIFICATION	1.262548321523884E-4	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999995569959981	WITHOUT_CLASSIFICATION	4.430040019150282E-7	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999995569959981	WITHOUT_CLASSIFICATION	4.430040019150282E-7	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999997124775	WITHOUT_CLASSIFICATION	2.8752243912657846E-10	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9965861369093829	WITHOUT_CLASSIFICATION	0.003413863090617089	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999998901682453	WITHOUT_CLASSIFICATION	1.0983175467292108E-7	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999687086455	WITHOUT_CLASSIFICATION	3.12913545383552E-8	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999972053254075	WITHOUT_CLASSIFICATION	2.7946745925783836E-6	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999853583303967	WITHOUT_CLASSIFICATION	1.464166960342847E-5	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999997623546335	WITHOUT_CLASSIFICATION	2.3764536665279282E-7	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.9999840065909564	WITHOUT_CLASSIFICATION	1.5993409043497652E-5	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9986321609642933	WITHOUT_CLASSIFICATION	0.001367839035706725	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.999999622879525	WITHOUT_CLASSIFICATION	3.7712047502450467E-7	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9997633761857437	WITHOUT_CLASSIFICATION	2.3662381425621794E-4	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999997487018035	WITHOUT_CLASSIFICATION	2.512981965371322E-7	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999589840899	WITHOUT_CLASSIFICATION	4.101591007521862E-8	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999999421875	WITHOUT_CLASSIFICATION	5.781250333965792E-11	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999999960458399	WITHOUT_CLASSIFICATION	3.954160097526397E-8	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999999914748062	WITHOUT_CLASSIFICATION	8.525193792595508E-9	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999999859656029	WITHOUT_CLASSIFICATION	1.403439710128131E-7	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999671687537	WITHOUT_CLASSIFICATION	3.283124631057852E-8	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999999029617032	WITHOUT_CLASSIFICATION	9.703829687988549E-8	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999995683645	WITHOUT_CLASSIFICATION	4.3163547997531305E-10	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999999998074107	WITHOUT_CLASSIFICATION	1.9258928058380604E-10	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999999336042	WITHOUT_CLASSIFICATION	6.639572452528676E-11	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999999177376937	WITHOUT_CLASSIFICATION	8.22623062740693E-8	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999826090138	WITHOUT_CLASSIFICATION	1.739098624220148E-8	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999997658291102	WITHOUT_CLASSIFICATION	2.3417088974697068E-7	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.9999997044467589	WITHOUT_CLASSIFICATION	2.9555324115037273E-7	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999974136598898	WITHOUT_CLASSIFICATION	2.5863401101216023E-6	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.999999300822962	WITHOUT_CLASSIFICATION	6.991770380189001E-7	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999986217241652	WITHOUT_CLASSIFICATION	1.3782758347909443E-6	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9996908723230431	WITHOUT_CLASSIFICATION	3.091276769568665E-4	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999983695346792	WITHOUT_CLASSIFICATION	1.6304653206598277E-6	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999678713478	WITHOUT_CLASSIFICATION	3.2128652270461787E-8	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.999999658955626	WITHOUT_CLASSIFICATION	3.41044373981982E-7	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999995709504316	WITHOUT_CLASSIFICATION	4.2904956836650254E-7	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999933054894	WITHOUT_CLASSIFICATION	6.6945105385231445E-9	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999755356731171	WITHOUT_CLASSIFICATION	2.4464326882893903E-5	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9998027183871059	WITHOUT_CLASSIFICATION	1.9728161289403153E-4	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998722085351	WITHOUT_CLASSIFICATION	1.2779146489658276E-7	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998496344255	WITHOUT_CLASSIFICATION	1.5036557458176078E-7	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999948825287	WITHOUT_CLASSIFICATION	5.11747127848128E-9	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9976655776402591	WITHOUT_CLASSIFICATION	0.0023344223597409563	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999998837221795	WITHOUT_CLASSIFICATION	1.1627782047965706E-7	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9990666365269968	WITHOUT_CLASSIFICATION	9.333634730030937E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9990666365269968	WITHOUT_CLASSIFICATION	9.333634730030937E-4	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999999038522984	WITHOUT_CLASSIFICATION	9.614770152324017E-8	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999998748258793	WITHOUT_CLASSIFICATION	1.2517412071741188E-7	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9982505932206076	WITHOUT_CLASSIFICATION	0.0017494067793923508	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999541331855364	WITHOUT_CLASSIFICATION	4.5866814463529115E-5	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999736573945	WITHOUT_CLASSIFICATION	2.6342605542096682E-8	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999787331996	WITHOUT_CLASSIFICATION	2.1266800367389152E-8	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999933477028502	WITHOUT_CLASSIFICATION	6.652297149909949E-6	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999999981329342	WITHOUT_CLASSIFICATION	1.8670657983689953E-8	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999971570773275	WITHOUT_CLASSIFICATION	2.8429226726183857E-6	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993274532197	WITHOUT_CLASSIFICATION	6.725467802625292E-7	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987990184551	WITHOUT_CLASSIFICATION	1.2009815449444453E-6	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999997444957224	WITHOUT_CLASSIFICATION	2.5550427755717566E-7	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999093038721	WITHOUT_CLASSIFICATION	9.069612788111916E-8	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.999998823702099	WITHOUT_CLASSIFICATION	1.1762979009673092E-6	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999983515314109	WITHOUT_CLASSIFICATION	1.6484685890946435E-6	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999847706524092	WITHOUT_CLASSIFICATION	1.5229347590735797E-5	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999997586927157	WITHOUT_CLASSIFICATION	2.4130728421784843E-7	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999994165528	WITHOUT_CLASSIFICATION	5.834471600132819E-10	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999964816566	WITHOUT_CLASSIFICATION	3.518343332178353E-9	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9998254521141915	WITHOUT_CLASSIFICATION	1.7454788580837806E-4	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.99999968807857	WITHOUT_CLASSIFICATION	3.1192143003558486E-7	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999949147369	WITHOUT_CLASSIFICATION	5.0852631014189556E-9	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999913860678918	WITHOUT_CLASSIFICATION	8.613932108191501E-6	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999856689815003	WITHOUT_CLASSIFICATION	1.43310184995894E-5	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999999995052281	WITHOUT_CLASSIFICATION	4.947717992877282E-10	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999818464297983	WITHOUT_CLASSIFICATION	1.815357020175143E-5	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9985086366046249	WITHOUT_CLASSIFICATION	0.0014913633953751752	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999624373469	WITHOUT_CLASSIFICATION	3.7562653195949904E-8	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.999999746618197	WITHOUT_CLASSIFICATION	2.5338180302187525E-7	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999929679917873	WITHOUT_CLASSIFICATION	7.032008212738651E-6	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.999982971954391	WITHOUT_CLASSIFICATION	1.7028045608985437E-5	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999976889497578	WITHOUT_CLASSIFICATION	2.3110502422525657E-6	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999958458356902	WITHOUT_CLASSIFICATION	4.1541643097381985E-6	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999999883158281	WITHOUT_CLASSIFICATION	1.1684171908316073E-8	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999959340662	WITHOUT_CLASSIFICATION	4.0659337988966885E-9	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999995299942	WITHOUT_CLASSIFICATION	4.700058223138446E-10	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999869866156936	WITHOUT_CLASSIFICATION	1.3013384306308772E-5	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999976597465	WITHOUT_CLASSIFICATION	2.340253511217303E-9	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999988976208916	WITHOUT_CLASSIFICATION	1.1023791084974921E-6	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999979532699	WITHOUT_CLASSIFICATION	2.0467300922155034E-9	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999987262236865	WITHOUT_CLASSIFICATION	1.2737763135615362E-6	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999460619929	WITHOUT_CLASSIFICATION	5.393800703714492E-8	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999727432195894	WITHOUT_CLASSIFICATION	2.7256780410606206E-5	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999682841222	WITHOUT_CLASSIFICATION	3.17158777590197E-8	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999873969047	WITHOUT_CLASSIFICATION	1.2603095264885752E-8	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999999998738281	WITHOUT_CLASSIFICATION	1.2617176606229698E-10	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999345766603	WITHOUT_CLASSIFICATION	6.542333977320602E-8	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999996870174774	WITHOUT_CLASSIFICATION	3.129825224651168E-7	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999996904424066	WITHOUT_CLASSIFICATION	3.095575934743536E-7	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999943111304	WITHOUT_CLASSIFICATION	5.6888695439880665E-9	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999999993065841	WITHOUT_CLASSIFICATION	6.934158793935819E-10	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999909266074	WITHOUT_CLASSIFICATION	9.073392594645538E-9	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999943237658121	WITHOUT_CLASSIFICATION	5.676234187935833E-6	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999558343950965	WITHOUT_CLASSIFICATION	4.416560490339965E-5	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999972547109	WITHOUT_CLASSIFICATION	2.745289207546437E-9	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999807124761242	WITHOUT_CLASSIFICATION	1.928752387582381E-5	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9834415480094121	WITHOUT_CLASSIFICATION	0.016558451990587964	IMPLEMENTATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999955838266185	WITHOUT_CLASSIFICATION	4.416173381646816E-6	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999982526193	WITHOUT_CLASSIFICATION	1.7473807321107426E-9	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9996135594670971	WITHOUT_CLASSIFICATION	3.864405329029948E-4	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999975242498254	WITHOUT_CLASSIFICATION	2.475750174630135E-6	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999995126201675	WITHOUT_CLASSIFICATION	4.873798324125358E-7	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999854912447	WITHOUT_CLASSIFICATION	1.4508755319185004E-8	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999920794963	WITHOUT_CLASSIFICATION	7.920503770747991E-9	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999262697215	WITHOUT_CLASSIFICATION	7.373027858407443E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973125294135	WITHOUT_CLASSIFICATION	2.6874705865176057E-6	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998018869755432	WITHOUT_CLASSIFICATION	1.981130244568061E-4	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999999236460314	WITHOUT_CLASSIFICATION	7.635396851337378E-8	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999884545603754	WITHOUT_CLASSIFICATION	1.1545439624550289E-5	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999999429767406	WITHOUT_CLASSIFICATION	5.702325933099204E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973125294135	WITHOUT_CLASSIFICATION	2.6874705865176057E-6	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999973758859976	WITHOUT_CLASSIFICATION	2.6241140025187625E-6	IMPLEMENTATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999918534036	WITHOUT_CLASSIFICATION	8.14659648160582E-9	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999993976144619	WITHOUT_CLASSIFICATION	6.023855381466247E-7	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999997520791102	WITHOUT_CLASSIFICATION	2.479208898946142E-7	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999999825923944	WITHOUT_CLASSIFICATION	1.7407605600235398E-7	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999999999335768	WITHOUT_CLASSIFICATION	6.642319650787367E-10	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999999576631	WITHOUT_CLASSIFICATION	4.2336860458197814E-11	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999454041132179	WITHOUT_CLASSIFICATION	5.459588678218684E-5	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999957729742	WITHOUT_CLASSIFICATION	4.227025866818998E-9	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998600597502124	WITHOUT_CLASSIFICATION	1.3994024978766794E-4	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998457324744321	WITHOUT_CLASSIFICATION	1.5426752556794158E-4	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9997600074433279	WITHOUT_CLASSIFICATION	2.399925566720637E-4	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.999998789919537	WITHOUT_CLASSIFICATION	1.2100804630258733E-6	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9938678319462757	WITHOUT_CLASSIFICATION	0.006132168053724205	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999989418494508	WITHOUT_CLASSIFICATION	1.0581505492210885E-6	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999999952702193	WITHOUT_CLASSIFICATION	4.729780710481261E-9	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999809096228	WITHOUT_CLASSIFICATION	1.9090377152163026E-8	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999995659940165	WITHOUT_CLASSIFICATION	4.340059835106735E-7	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999998457084648	WITHOUT_CLASSIFICATION	1.5429153520351044E-7	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9892988916739062	WITHOUT_CLASSIFICATION	0.010701108326093955	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999975814354728	WITHOUT_CLASSIFICATION	2.4185645272152906E-6	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9996529667229124	WITHOUT_CLASSIFICATION	3.4703327708757273E-4	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999391231627277	WITHOUT_CLASSIFICATION	6.087683727235637E-5	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999993889313094	WITHOUT_CLASSIFICATION	6.110686905823922E-7	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999971538949	WITHOUT_CLASSIFICATION	2.8461051946113943E-9	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999983004594	WITHOUT_CLASSIFICATION	1.6995405837850728E-9	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999946006116	WITHOUT_CLASSIFICATION	5.399388455693522E-9	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9994006998981766	WITHOUT_CLASSIFICATION	5.993001018233196E-4	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999069707283	WITHOUT_CLASSIFICATION	9.302927174751618E-8	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9930384000132569	WITHOUT_CLASSIFICATION	0.006961599986743059	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9795849882886786	WITHOUT_CLASSIFICATION	0.020415011711321464	IMPLEMENTATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999999259454229	WITHOUT_CLASSIFICATION	7.405457711459213E-8	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999640643283255	WITHOUT_CLASSIFICATION	3.5935671674501236E-5	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999970552738401	WITHOUT_CLASSIFICATION	2.9447261598923976E-6	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999167706175	WITHOUT_CLASSIFICATION	8.322938247770173E-8	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999990273649654	WITHOUT_CLASSIFICATION	9.726350346132108E-7	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999986867804	WITHOUT_CLASSIFICATION	1.3132195708622325E-9	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999999909881	WITHOUT_CLASSIFICATION	9.011843422079353E-12	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999989592548966	WITHOUT_CLASSIFICATION	1.0407451034756802E-6	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999992743451	WITHOUT_CLASSIFICATION	7.256548012154002E-10	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999807428224	WITHOUT_CLASSIFICATION	1.925717756833322E-8	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9997348443856505	WITHOUT_CLASSIFICATION	2.6515561434949217E-4	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9997348443856505	WITHOUT_CLASSIFICATION	2.6515561434949217E-4	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999999729130407	WITHOUT_CLASSIFICATION	2.7086959468377783E-8	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999504500382	WITHOUT_CLASSIFICATION	4.9549961738908544E-8	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998353826101	WITHOUT_CLASSIFICATION	1.646173900109948E-7	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999999991397854	WITHOUT_CLASSIFICATION	8.602146521976887E-10	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999854292860478	WITHOUT_CLASSIFICATION	1.4570713952052036E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999854292860478	WITHOUT_CLASSIFICATION	1.4570713952052036E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999483889030077	WITHOUT_CLASSIFICATION	5.1611096992163275E-5	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999999999783458	WITHOUT_CLASSIFICATION	2.165425853342575E-11	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999999999748376	WITHOUT_CLASSIFICATION	2.516247925812473E-11	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999985830823	WITHOUT_CLASSIFICATION	1.4169176980023696E-9	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.999998875357147	WITHOUT_CLASSIFICATION	1.124642852997947E-6	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999994416470921	WITHOUT_CLASSIFICATION	5.583529078367184E-7	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999978961296152	WITHOUT_CLASSIFICATION	2.1038703847992527E-6	IMPLEMENTATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999996850153275	WITHOUT_CLASSIFICATION	3.1498467250399764E-6	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999981618473962	WITHOUT_CLASSIFICATION	1.838152603825795E-6	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999995742437584	WITHOUT_CLASSIFICATION	4.257562415215733E-7	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999996746564265	WITHOUT_CLASSIFICATION	3.253435734875179E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996239830636	WITHOUT_CLASSIFICATION	3.760169363279085E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996239830636	WITHOUT_CLASSIFICATION	3.760169363279085E-7	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999999610504	WITHOUT_CLASSIFICATION	3.894951962071861E-11	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999912104339116	WITHOUT_CLASSIFICATION	8.789566088443923E-6	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999997046430708	WITHOUT_CLASSIFICATION	2.9535692931772163E-7	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999999840632247	WITHOUT_CLASSIFICATION	1.593677531996395E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999669564437335	WITHOUT_CLASSIFICATION	3.304355626649798E-4	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999992334121582	WITHOUT_CLASSIFICATION	7.66587841885094E-7	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998893509171	WITHOUT_CLASSIFICATION	1.1064908297100418E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999669564437335	WITHOUT_CLASSIFICATION	3.304355626649798E-4	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999995094613692	WITHOUT_CLASSIFICATION	4.905386308053263E-7	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999999703157171	WITHOUT_CLASSIFICATION	2.9684282880803592E-8	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999795955440456	WITHOUT_CLASSIFICATION	2.040445595447573E-5	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999823648863	WITHOUT_CLASSIFICATION	1.7635113768216887E-8	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998600597502124	WITHOUT_CLASSIFICATION	1.3994024978766794E-4	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.999998297615607	WITHOUT_CLASSIFICATION	1.7023843929367072E-6	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999963953825324	WITHOUT_CLASSIFICATION	3.6046174676582277E-6	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.999995479940513	WITHOUT_CLASSIFICATION	4.520059487009293E-6	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.9999935462377033	WITHOUT_CLASSIFICATION	6.453762296627107E-6	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999998962679585	WITHOUT_CLASSIFICATION	1.0373204150413613E-6	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999996945299954	WITHOUT_CLASSIFICATION	3.0547000460600543E-6	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999999786225162	WITHOUT_CLASSIFICATION	2.137748375534315E-8	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999924628153449	WITHOUT_CLASSIFICATION	7.537184654986929E-6	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999993690840181	WITHOUT_CLASSIFICATION	6.309159819494713E-7	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999822983651404	WITHOUT_CLASSIFICATION	1.7701634859608107E-4	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999822983651404	WITHOUT_CLASSIFICATION	1.7701634859608107E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999989940252243	WITHOUT_CLASSIFICATION	1.0059747757853396E-6	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999990330627903	WITHOUT_CLASSIFICATION	9.669372098277079E-7	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999961997619861	WITHOUT_CLASSIFICATION	3.800238013951357E-6	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999981705805418	WITHOUT_CLASSIFICATION	1.82941945819727E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999941799631868	WITHOUT_CLASSIFICATION	5.820036813150857E-6	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999993318759975	WITHOUT_CLASSIFICATION	6.681240023758692E-7	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999617786296476	WITHOUT_CLASSIFICATION	3.822137035233337E-5	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999999825216	WITHOUT_CLASSIFICATION	1.7478420921953E-11	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999977965794653	WITHOUT_CLASSIFICATION	2.2034205346559606E-6	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999646951813632	WITHOUT_CLASSIFICATION	3.530481863679653E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926909330711	WITHOUT_CLASSIFICATION	7.309066928941958E-6	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9996782216647385	WITHOUT_CLASSIFICATION	3.217783352615367E-4	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999648655644184	WITHOUT_CLASSIFICATION	3.513443558145946E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999988867536	WITHOUT_CLASSIFICATION	1.1132463643919024E-9	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999996677359	WITHOUT_CLASSIFICATION	3.322640941221674E-10	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999862848349822	WITHOUT_CLASSIFICATION	1.3715165017865808E-5	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.999999597553984	WITHOUT_CLASSIFICATION	4.0244601596733164E-7	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999995779082241	WITHOUT_CLASSIFICATION	4.220917758355048E-7	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998711889426611	WITHOUT_CLASSIFICATION	1.288110573388628E-4	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999999994215	WITHOUT_CLASSIFICATION	5.785381869004763E-13	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999999857739	WITHOUT_CLASSIFICATION	1.4226169555701069E-11	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.999999999958394	WITHOUT_CLASSIFICATION	4.160603957397233E-11	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999989618320503	WITHOUT_CLASSIFICATION	1.0381679496805386E-6	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999982976	WITHOUT_CLASSIFICATION	1.7024774107920867E-12	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998142993887	WITHOUT_CLASSIFICATION	1.857006114088607E-7	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998142993887	WITHOUT_CLASSIFICATION	1.857006114088607E-7	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9997908680252497	WITHOUT_CLASSIFICATION	2.0913197475021198E-4	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9968332797162065	WITHOUT_CLASSIFICATION	0.0031667202837935607	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999998977978551	WITHOUT_CLASSIFICATION	1.022021448271652E-7	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999610080157	WITHOUT_CLASSIFICATION	3.89919843249428E-8	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999999145622156	WITHOUT_CLASSIFICATION	8.543778447030962E-8	IMPLEMENTATION
