todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.997641473252101	WITHOUT_CLASSIFICATION	0.0023585267478989764	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.997641473252101	WITHOUT_CLASSIFICATION	0.0023585267478989764	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.9543053041087073	WITHOUT_CLASSIFICATION	0.04569469589129278	IMPLEMENTATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.6573020368916807	WITHOUT_CLASSIFICATION	0.3426979631083193	IMPLEMENTATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.7632524358139094	WITHOUT_CLASSIFICATION	0.23674756418609064	IMPLEMENTATION
TODO: handle TypeDefs	IMPLEMENTATION	0.9910210389557582	IMPLEMENTATION	0.008978961044241769	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9887893662448395	WITHOUT_CLASSIFICATION	0.011210633755160414	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9907376084067576	WITHOUT_CLASSIFICATION	0.009262391593242327	IMPLEMENTATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.8242131728329176	WITHOUT_CLASSIFICATION	0.17578682716708244	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.6392531182753645	IMPLEMENTATION	0.36074688172463554	WITHOUT_CLASSIFICATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.8487093222077944	WITHOUT_CLASSIFICATION	0.1512906777922057	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.9927230556088207	IMPLEMENTATION	0.007276944391179324	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.8024985343485607	WITHOUT_CLASSIFICATION	0.19750146565143922	IMPLEMENTATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.8024985343485607	WITHOUT_CLASSIFICATION	0.19750146565143922	IMPLEMENTATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.9955345083260579	IMPLEMENTATION	0.004465491673942078	WITHOUT_CLASSIFICATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.9109111481754272	IMPLEMENTATION	0.08908885182457284	WITHOUT_CLASSIFICATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9966497874712383	IMPLEMENTATION	0.003350212528761683	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9999511209924734	WITHOUT_CLASSIFICATION	4.887900752666516E-5	IMPLEMENTATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.9999999995553609	WITHOUT_CLASSIFICATION	4.4463913435206146E-10	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.7045010779698032	IMPLEMENTATION	0.2954989220301967	WITHOUT_CLASSIFICATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.8253331949083432	IMPLEMENTATION	0.17466680509165686	WITHOUT_CLASSIFICATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9997772487513332	WITHOUT_CLASSIFICATION	2.2275124866666935E-4	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9661607369500191	IMPLEMENTATION	0.03383926304998094	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9964418778388207	IMPLEMENTATION	0.0035581221611794716	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9964418778388207	IMPLEMENTATION	0.0035581221611794716	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.9977861203892693	IMPLEMENTATION	0.0022138796107306386	WITHOUT_CLASSIFICATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.6211289766943306	IMPLEMENTATION	0.3788710233056694	WITHOUT_CLASSIFICATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9985192237164371	IMPLEMENTATION	0.0014807762835629295	WITHOUT_CLASSIFICATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9020280713936102	IMPLEMENTATION	0.0979719286063898	WITHOUT_CLASSIFICATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9904738423099886	IMPLEMENTATION	0.009526157690011472	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.847957838405648	IMPLEMENTATION	0.15204216159435208	WITHOUT_CLASSIFICATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.8667573897021599	IMPLEMENTATION	0.1332426102978401	WITHOUT_CLASSIFICATION
todo : look at optimizing these...	IMPLEMENTATION	0.9985177452978647	WITHOUT_CLASSIFICATION	0.0014822547021352305	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.52175602575271	WITHOUT_CLASSIFICATION	0.47824397424729004	IMPLEMENTATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9930308458920878	IMPLEMENTATION	0.0069691541079121245	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9924864673452579	WITHOUT_CLASSIFICATION	0.007513532654742095	IMPLEMENTATION
TODO: not visible to the user!	IMPLEMENTATION	0.6576885057817962	IMPLEMENTATION	0.34231149421820395	WITHOUT_CLASSIFICATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.5464225003121429	WITHOUT_CLASSIFICATION	0.45357749968785704	IMPLEMENTATION
TODO: use these in methods above	IMPLEMENTATION	0.8227283684416805	IMPLEMENTATION	0.1772716315583196	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9970277465061662	IMPLEMENTATION	0.002972253493833908	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9970277465061662	IMPLEMENTATION	0.002972253493833908	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9290036173947231	WITHOUT_CLASSIFICATION	0.07099638260527685	IMPLEMENTATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9985526652658862	WITHOUT_CLASSIFICATION	0.001447334734113837	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.981300602671846	WITHOUT_CLASSIFICATION	0.018699397328153906	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9779363316525651	IMPLEMENTATION	0.022063668347434832	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.8191612656650389	IMPLEMENTATION	0.18083873433496114	WITHOUT_CLASSIFICATION
TODO: formulas ?	IMPLEMENTATION	0.9730651295258642	WITHOUT_CLASSIFICATION	0.02693487047413588	IMPLEMENTATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.6149188937364821	IMPLEMENTATION	0.3850811062635178	WITHOUT_CLASSIFICATION
todo : cache this sql...	IMPLEMENTATION	0.9998679894336393	WITHOUT_CLASSIFICATION	1.3201056636078567E-4	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.9733533990360017	IMPLEMENTATION	0.02664660096399822	WITHOUT_CLASSIFICATION
TODO: cache this in an instvar	IMPLEMENTATION	0.923473819281307	WITHOUT_CLASSIFICATION	0.07652618071869291	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.9983075840657721	IMPLEMENTATION	0.0016924159342278796	WITHOUT_CLASSIFICATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.715620994697319	WITHOUT_CLASSIFICATION	0.28437900530268095	IMPLEMENTATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.9707817665725329	IMPLEMENTATION	0.029218233427467048	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.9088654776521786	IMPLEMENTATION	0.09113452234782136	WITHOUT_CLASSIFICATION
TODO: terrible implementation!	IMPLEMENTATION	0.9985401003887089	IMPLEMENTATION	0.0014598996112910995	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.9088654776521786	IMPLEMENTATION	0.09113452234782136	WITHOUT_CLASSIFICATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9999421712024553	IMPLEMENTATION	5.782879754464478E-5	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.9730635048597451	IMPLEMENTATION	0.026936495140254972	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.9088654776521786	IMPLEMENTATION	0.09113452234782136	WITHOUT_CLASSIFICATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999987414504328	WITHOUT_CLASSIFICATION	1.258549567233195E-6	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999987414504328	WITHOUT_CLASSIFICATION	1.258549567233195E-6	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9999233340704181	IMPLEMENTATION	7.666592958186412E-5	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.9995981630185501	WITHOUT_CLASSIFICATION	4.01836981449886E-4	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.99994695428653	WITHOUT_CLASSIFICATION	5.304571346987441E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999840102127981	WITHOUT_CLASSIFICATION	1.5989787201918687E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999840102127981	WITHOUT_CLASSIFICATION	1.5989787201918687E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999840102127981	WITHOUT_CLASSIFICATION	1.5989787201918687E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999840102127981	WITHOUT_CLASSIFICATION	1.5989787201918687E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999840102127981	WITHOUT_CLASSIFICATION	1.5989787201918687E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999840102127981	WITHOUT_CLASSIFICATION	1.5989787201918687E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999840102127981	WITHOUT_CLASSIFICATION	1.5989787201918687E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999929864869698	WITHOUT_CLASSIFICATION	7.013513030304455E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999929864869698	WITHOUT_CLASSIFICATION	7.013513030304455E-6	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999936604104054	WITHOUT_CLASSIFICATION	6.339589594609949E-6	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999388192841	WITHOUT_CLASSIFICATION	6.118071601891822E-8	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999985427699959	WITHOUT_CLASSIFICATION	1.4572300041637859E-6	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997905473923	WITHOUT_CLASSIFICATION	2.0945260764227877E-7	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997905473923	WITHOUT_CLASSIFICATION	2.0945260764227877E-7	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999682416825	WITHOUT_CLASSIFICATION	3.175831758423571E-8	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993973560534	WITHOUT_CLASSIFICATION	6.026439465591078E-7	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999991749264752	WITHOUT_CLASSIFICATION	8.250735248719775E-7	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999946306470188	WITHOUT_CLASSIFICATION	5.369352981156177E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999998748759967	WITHOUT_CLASSIFICATION	1.2512400330076903E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999998748759967	WITHOUT_CLASSIFICATION	1.2512400330076903E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999758434615692	WITHOUT_CLASSIFICATION	2.4156538430864415E-5	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9988580746478758	WITHOUT_CLASSIFICATION	0.0011419253521242083	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.9999766002593793	WITHOUT_CLASSIFICATION	2.3399740620766962E-5	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999999981752897	WITHOUT_CLASSIFICATION	1.8247102122171707E-9	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999987961427	WITHOUT_CLASSIFICATION	1.203857325497848E-9	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999987576139019	WITHOUT_CLASSIFICATION	1.2423860981601262E-6	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.9999226755484216	WITHOUT_CLASSIFICATION	7.732445157839487E-5	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999903100797625	WITHOUT_CLASSIFICATION	9.689920237651351E-6	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999702424570037	WITHOUT_CLASSIFICATION	2.9757542996389785E-5	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999992341551589	WITHOUT_CLASSIFICATION	7.658448411047808E-7	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999888056568259	WITHOUT_CLASSIFICATION	1.1194343174073736E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999806566721383	WITHOUT_CLASSIFICATION	1.9343327861658583E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999997477695	WITHOUT_CLASSIFICATION	2.5223041131977104E-10	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999895691998587	WITHOUT_CLASSIFICATION	1.0430800141293932E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999895691998587	WITHOUT_CLASSIFICATION	1.0430800141293932E-5	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999984945247661	WITHOUT_CLASSIFICATION	1.5054752339119312E-6	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999874746102275	WITHOUT_CLASSIFICATION	1.2525389772450743E-5	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999584206003	WITHOUT_CLASSIFICATION	4.157939978632004E-8	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999910978291435	WITHOUT_CLASSIFICATION	8.902170856484262E-6	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9955765458511355	WITHOUT_CLASSIFICATION	0.004423454148864517	IMPLEMENTATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999999843755208	WITHOUT_CLASSIFICATION	1.562447918054975E-8	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999996191388036	WITHOUT_CLASSIFICATION	3.8086119639361275E-7	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999998819512558	WITHOUT_CLASSIFICATION	1.1804874415811487E-7	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999999997472102	WITHOUT_CLASSIFICATION	2.5278968674232543E-10	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999995169816885	WITHOUT_CLASSIFICATION	4.830183115384088E-7	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999986993549851	WITHOUT_CLASSIFICATION	1.3006450148193302E-6	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999959402086	WITHOUT_CLASSIFICATION	4.059791383920327E-9	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999991108564	WITHOUT_CLASSIFICATION	8.891435991215255E-10	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999923994143668	WITHOUT_CLASSIFICATION	7.600585633295023E-6	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999881155573028	WITHOUT_CLASSIFICATION	1.188444269712932E-5	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949459998916	WITHOUT_CLASSIFICATION	5.054000108373045E-6	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988744020792	WITHOUT_CLASSIFICATION	1.1255979208099068E-5	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999998563935902	WITHOUT_CLASSIFICATION	1.436064096757658E-7	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999980467924575	WITHOUT_CLASSIFICATION	1.9532075424347518E-6	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999876589266049	WITHOUT_CLASSIFICATION	1.2341073395097231E-5	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999991143610646	WITHOUT_CLASSIFICATION	8.856389355292404E-7	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999977553730818	WITHOUT_CLASSIFICATION	2.244626918178392E-6	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999876589266049	WITHOUT_CLASSIFICATION	1.2341073395097231E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999977553730818	WITHOUT_CLASSIFICATION	2.244626918178392E-6	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998429641705	WITHOUT_CLASSIFICATION	1.5703582937138379E-7	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999952632732091	WITHOUT_CLASSIFICATION	4.7367267909079565E-6	IMPLEMENTATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999928939185028	WITHOUT_CLASSIFICATION	7.1060814972210745E-6	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998361096273837	WITHOUT_CLASSIFICATION	1.6389037261633116E-4	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999951113597	WITHOUT_CLASSIFICATION	4.888640350107034E-9	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999999965768176	WITHOUT_CLASSIFICATION	3.4231824295110333E-9	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.999750079733152	WITHOUT_CLASSIFICATION	2.499202668479232E-4	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9539703548843929	WITHOUT_CLASSIFICATION	0.04602964511560712	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9991288080345336	WITHOUT_CLASSIFICATION	8.711919654662629E-4	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9999466906475573	WITHOUT_CLASSIFICATION	5.3309352442850086E-5	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999887662443947	WITHOUT_CLASSIFICATION	1.123375560542325E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999977553730818	WITHOUT_CLASSIFICATION	2.244626918178392E-6	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999976187031	WITHOUT_CLASSIFICATION	2.3812968307346685E-9	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.999874170541985	WITHOUT_CLASSIFICATION	1.2582945801494885E-4	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999945185049071	WITHOUT_CLASSIFICATION	5.481495092944823E-6	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999985091544	WITHOUT_CLASSIFICATION	1.4908455615618315E-9	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.999999904950241	WITHOUT_CLASSIFICATION	9.504975892667475E-8	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999430686045105	WITHOUT_CLASSIFICATION	5.693139548932478E-5	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999984020665421	WITHOUT_CLASSIFICATION	1.5979334578745496E-6	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999093908167	WITHOUT_CLASSIFICATION	9.060918331217638E-8	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999985203173853	WITHOUT_CLASSIFICATION	1.4796826146789556E-6	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999758837785	WITHOUT_CLASSIFICATION	2.41162214923834E-8	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999919135637677	WITHOUT_CLASSIFICATION	8.086436232296312E-6	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999994542065767	WITHOUT_CLASSIFICATION	5.457934233086359E-7	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.8172395520714822	WITHOUT_CLASSIFICATION	0.1827604479285178	IMPLEMENTATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999992867532854	WITHOUT_CLASSIFICATION	7.132467144799062E-7	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999996777955324	WITHOUT_CLASSIFICATION	3.2220446757001534E-7	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9738714515027291	WITHOUT_CLASSIFICATION	0.026128548497270893	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999573789242	WITHOUT_CLASSIFICATION	4.262107576547778E-8	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999986366990007	WITHOUT_CLASSIFICATION	1.3633009993151958E-6	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999992011890534	WITHOUT_CLASSIFICATION	7.988109465978097E-6	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999997753682167	WITHOUT_CLASSIFICATION	2.2463178339205177E-7	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999999938043472	WITHOUT_CLASSIFICATION	6.1956528243003395E-9	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999895979671	WITHOUT_CLASSIFICATION	1.0402032881660878E-8	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999232902613	WITHOUT_CLASSIFICATION	7.670973861698766E-8	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999999514889	WITHOUT_CLASSIFICATION	4.851116513117886E-11	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999895979671	WITHOUT_CLASSIFICATION	1.0402032881660878E-8	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999626948476	WITHOUT_CLASSIFICATION	3.7305152511249325E-8	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999998818853014	WITHOUT_CLASSIFICATION	1.1811469861260624E-7	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999876589266049	WITHOUT_CLASSIFICATION	1.2341073395097231E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999908223871515	WITHOUT_CLASSIFICATION	9.17761284854343E-6	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.9999996756204322	WITHOUT_CLASSIFICATION	3.2437956784173006E-7	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998175799054	WITHOUT_CLASSIFICATION	1.824200945408531E-7	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998175799054	WITHOUT_CLASSIFICATION	1.824200945408531E-7	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999973833459673	WITHOUT_CLASSIFICATION	2.6166540327231116E-6	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.99999998322749	WITHOUT_CLASSIFICATION	1.6772509981890584E-8	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999999922482601	WITHOUT_CLASSIFICATION	7.751739967849568E-9	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999999999985182	WITHOUT_CLASSIFICATION	1.4818025472334584E-11	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999997663637594	WITHOUT_CLASSIFICATION	2.336362405077432E-7	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999337367530342	WITHOUT_CLASSIFICATION	6.626324696582867E-5	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999946924527225	WITHOUT_CLASSIFICATION	5.3075472774808884E-6	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.9999342729692816	WITHOUT_CLASSIFICATION	6.572703071843524E-5	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999960131365728	WITHOUT_CLASSIFICATION	3.986863427092391E-6	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999887011278	WITHOUT_CLASSIFICATION	1.1298872127222322E-8	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998982909876	WITHOUT_CLASSIFICATION	1.0170901247286233E-7	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998982909876	WITHOUT_CLASSIFICATION	1.0170901247286233E-7	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999891326745818	WITHOUT_CLASSIFICATION	1.0867325418295386E-5	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999248111651	WITHOUT_CLASSIFICATION	7.518883502017398E-8	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999986885296452	WITHOUT_CLASSIFICATION	1.311470354855001E-6	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998982909876	WITHOUT_CLASSIFICATION	1.0170901247286233E-7	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999891326745818	WITHOUT_CLASSIFICATION	1.0867325418295386E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999891326745818	WITHOUT_CLASSIFICATION	1.0867325418295386E-5	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999998466217176	WITHOUT_CLASSIFICATION	1.5337828246994068E-7	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998310314888296	WITHOUT_CLASSIFICATION	1.6896851117051355E-4	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999896176891	WITHOUT_CLASSIFICATION	1.0382310884843078E-8	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999996815433185	WITHOUT_CLASSIFICATION	3.1845668151397926E-7	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.999962859816926	WITHOUT_CLASSIFICATION	3.714018307401799E-5	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.999962859816926	WITHOUT_CLASSIFICATION	3.714018307401799E-5	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.999999195716532	WITHOUT_CLASSIFICATION	8.042834679785301E-7	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999999994856339	WITHOUT_CLASSIFICATION	5.143662042716946E-10	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.9999998019574292	WITHOUT_CLASSIFICATION	1.9804257078543454E-7	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999998776442115	WITHOUT_CLASSIFICATION	1.2235578856331967E-7	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999998776442115	WITHOUT_CLASSIFICATION	1.2235578856331967E-7	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999999833102552	WITHOUT_CLASSIFICATION	1.6689744798932574E-7	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999766300647086	WITHOUT_CLASSIFICATION	2.3369935291344308E-5	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999999642313311	WITHOUT_CLASSIFICATION	3.57686688545141E-8	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999959272836	WITHOUT_CLASSIFICATION	4.072716398007482E-9	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999999998157063	WITHOUT_CLASSIFICATION	1.8429364299220848E-10	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999998526342827	WITHOUT_CLASSIFICATION	1.4736571735125708E-7	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999994081603892	WITHOUT_CLASSIFICATION	5.918396107441787E-7	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999977213051826	WITHOUT_CLASSIFICATION	2.2786948174526455E-6	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.9999966951955787	WITHOUT_CLASSIFICATION	3.3048044213773087E-6	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999999642313311	WITHOUT_CLASSIFICATION	3.57686688545141E-8	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.9999955809734433	WITHOUT_CLASSIFICATION	4.41902655676829E-6	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999011629230447	WITHOUT_CLASSIFICATION	9.883707695529662E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999011629230447	WITHOUT_CLASSIFICATION	9.883707695529662E-5	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999920706764	WITHOUT_CLASSIFICATION	7.929323693495695E-9	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998383784595254	WITHOUT_CLASSIFICATION	1.6162154047448188E-4	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999997719188	WITHOUT_CLASSIFICATION	2.2808117248246708E-10	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9975732198077314	WITHOUT_CLASSIFICATION	0.0024267801922685356	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.99999993967908	WITHOUT_CLASSIFICATION	6.032092002044821E-8	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999768399140259	WITHOUT_CLASSIFICATION	2.3160085974083062E-5	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9999806493697989	WITHOUT_CLASSIFICATION	1.935063020104667E-5	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.9999992453704121	WITHOUT_CLASSIFICATION	7.546295878648718E-7	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999989208401521	WITHOUT_CLASSIFICATION	1.0791598479758736E-6	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999904033308	WITHOUT_CLASSIFICATION	9.596669199581333E-9	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999904033308	WITHOUT_CLASSIFICATION	9.596669199581333E-9	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.999999941754884	WITHOUT_CLASSIFICATION	5.8245115998746445E-8	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.99994695428653	WITHOUT_CLASSIFICATION	5.304571346987441E-5	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999999216448394	WITHOUT_CLASSIFICATION	7.835516049436218E-8	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999840102127981	WITHOUT_CLASSIFICATION	1.5989787201918687E-5	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.999999644878267	WITHOUT_CLASSIFICATION	3.551217331002957E-7	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999929864869698	WITHOUT_CLASSIFICATION	7.013513030304455E-6	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999973736755021	WITHOUT_CLASSIFICATION	2.626324497838608E-6	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.999999832298514	WITHOUT_CLASSIFICATION	1.6770148605451688E-7	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999997095059933	WITHOUT_CLASSIFICATION	2.904940067280927E-7	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.9999959093267123	WITHOUT_CLASSIFICATION	4.090673287696452E-6	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999984493194711	WITHOUT_CLASSIFICATION	1.5506805289135167E-6	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.9999864178679043	WITHOUT_CLASSIFICATION	1.3582132095604071E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999758784732565	WITHOUT_CLASSIFICATION	2.412152674344756E-5	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999957732764708	WITHOUT_CLASSIFICATION	4.2267235291212145E-6	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999388192841	WITHOUT_CLASSIFICATION	6.118071601891822E-8	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999992128298664	WITHOUT_CLASSIFICATION	7.87170133650109E-7	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999992128298664	WITHOUT_CLASSIFICATION	7.87170133650109E-7	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.9999997684981127	WITHOUT_CLASSIFICATION	2.3150188731192562E-7	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999951457683279	WITHOUT_CLASSIFICATION	4.854231671994093E-6	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999999281349292	WITHOUT_CLASSIFICATION	7.186507077205886E-8	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999981326717182	WITHOUT_CLASSIFICATION	1.8673282817711592E-6	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999911021054281	WITHOUT_CLASSIFICATION	8.897894571946543E-6	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999977806709477	WITHOUT_CLASSIFICATION	2.2193290522642717E-6	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999997905473923	WITHOUT_CLASSIFICATION	2.0945260764227877E-7	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999992960541774	WITHOUT_CLASSIFICATION	7.039458225402259E-7	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999988753115312	WITHOUT_CLASSIFICATION	1.1246884688563127E-6	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999946273854925	WITHOUT_CLASSIFICATION	5.372614507524636E-6	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999986764283165	WITHOUT_CLASSIFICATION	1.3235716835331607E-6	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.9999894291547508	WITHOUT_CLASSIFICATION	1.057084524923917E-5	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.999944237954831	WITHOUT_CLASSIFICATION	5.576204516892525E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999991569569874	WITHOUT_CLASSIFICATION	8.430430126637772E-7	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999320703962	WITHOUT_CLASSIFICATION	6.792960378450066E-8	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999969626713603	WITHOUT_CLASSIFICATION	3.0373286396749035E-6	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999997920182305	WITHOUT_CLASSIFICATION	2.079817694266225E-7	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999931835085868	WITHOUT_CLASSIFICATION	6.8164914132423115E-6	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.9999998482736207	WITHOUT_CLASSIFICATION	1.5172637931172503E-7	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999840102127981	WITHOUT_CLASSIFICATION	1.5989787201918687E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999840102127981	WITHOUT_CLASSIFICATION	1.5989787201918687E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999929864869698	WITHOUT_CLASSIFICATION	7.013513030304455E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999929864869698	WITHOUT_CLASSIFICATION	7.013513030304455E-6	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999758784732565	WITHOUT_CLASSIFICATION	2.412152674344756E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999992128298664	WITHOUT_CLASSIFICATION	7.87170133650109E-7	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999991569569874	WITHOUT_CLASSIFICATION	8.430430126637772E-7	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999682416825	WITHOUT_CLASSIFICATION	3.175831758423571E-8	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999999546493056	WITHOUT_CLASSIFICATION	4.535069445145207E-8	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999998412678517	WITHOUT_CLASSIFICATION	1.587321483672108E-7	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999988675272955	WITHOUT_CLASSIFICATION	1.1324727045373467E-6	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9999834707760512	WITHOUT_CLASSIFICATION	1.65292239488372E-5	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999599555769	WITHOUT_CLASSIFICATION	4.004442310201077E-8	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.9999922905408211	WITHOUT_CLASSIFICATION	7.709459179067435E-6	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999953896132926	WITHOUT_CLASSIFICATION	4.6103867074190044E-6	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9999702855923587	WITHOUT_CLASSIFICATION	2.9714407641270352E-5	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.9999987242285743	WITHOUT_CLASSIFICATION	1.2757714257457453E-6	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999911227087128	WITHOUT_CLASSIFICATION	8.877291287100765E-6	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999911227087128	WITHOUT_CLASSIFICATION	8.877291287100765E-6	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999958226565	WITHOUT_CLASSIFICATION	4.177343524693417E-9	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999979291899151	WITHOUT_CLASSIFICATION	2.0708100848733836E-6	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999608945404068	WITHOUT_CLASSIFICATION	3.910545959328429E-5	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9998778551322224	WITHOUT_CLASSIFICATION	1.2214486777760984E-4	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999848228648	WITHOUT_CLASSIFICATION	1.517713518867216E-8	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.999999478150232	WITHOUT_CLASSIFICATION	5.218497679295877E-7	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.9999995450114191	WITHOUT_CLASSIFICATION	4.5498858096201313E-7	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993973560534	WITHOUT_CLASSIFICATION	6.026439465591078E-7	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.9999767585196434	WITHOUT_CLASSIFICATION	2.324148035651591E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999993322420266	WITHOUT_CLASSIFICATION	6.677579734784252E-7	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999993322420266	WITHOUT_CLASSIFICATION	6.677579734784252E-7	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.9999997080692171	WITHOUT_CLASSIFICATION	2.9193078289399465E-7	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999991974085768	WITHOUT_CLASSIFICATION	8.025914232457371E-7	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.9999944890945631	WITHOUT_CLASSIFICATION	5.510905436874044E-6	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.999999561746207	WITHOUT_CLASSIFICATION	4.382537931078735E-7	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.9999945994278586	WITHOUT_CLASSIFICATION	5.400572141461234E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999929864869698	WITHOUT_CLASSIFICATION	7.013513030304455E-6	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999758784732565	WITHOUT_CLASSIFICATION	2.412152674344756E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999388192841	WITHOUT_CLASSIFICATION	6.118071601891822E-8	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999991569569874	WITHOUT_CLASSIFICATION	8.430430126637772E-7	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999991569569874	WITHOUT_CLASSIFICATION	8.430430126637772E-7	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995831615935	WITHOUT_CLASSIFICATION	4.168384063987347E-7	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995831615935	WITHOUT_CLASSIFICATION	4.168384063987347E-7	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999982163469714	WITHOUT_CLASSIFICATION	1.7836530285091346E-6	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999726888452951	WITHOUT_CLASSIFICATION	2.7311154704969047E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999726888452951	WITHOUT_CLASSIFICATION	2.7311154704969047E-5	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9999878569078565	WITHOUT_CLASSIFICATION	1.2143092143503987E-5	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.9999983416561027	WITHOUT_CLASSIFICATION	1.658343897403596E-6	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.9999996762725536	WITHOUT_CLASSIFICATION	3.237274464325676E-7	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999991463361895	WITHOUT_CLASSIFICATION	8.536638105619997E-7	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999998170183739	WITHOUT_CLASSIFICATION	1.8298162607966846E-7	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999946306470188	WITHOUT_CLASSIFICATION	5.369352981156177E-6	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999946306470188	WITHOUT_CLASSIFICATION	5.369352981156177E-6	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.9980687966862637	WITHOUT_CLASSIFICATION	0.00193120331373634	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.999993874650548	WITHOUT_CLASSIFICATION	6.125349451894524E-6	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.9999988283698383	WITHOUT_CLASSIFICATION	1.1716301616051544E-6	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.9999734378814334	WITHOUT_CLASSIFICATION	2.6562118566512315E-5	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9999995877904428	WITHOUT_CLASSIFICATION	4.1220955715969657E-7	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.9999774096027793	WITHOUT_CLASSIFICATION	2.2590397220786637E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999998748759967	WITHOUT_CLASSIFICATION	1.2512400330076903E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999950237654613	WITHOUT_CLASSIFICATION	4.9762345386016945E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999950237654613	WITHOUT_CLASSIFICATION	4.9762345386016945E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999758434615692	WITHOUT_CLASSIFICATION	2.4156538430864415E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999758434615692	WITHOUT_CLASSIFICATION	2.4156538430864415E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999693150229096	WITHOUT_CLASSIFICATION	3.068497709034628E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999693150229096	WITHOUT_CLASSIFICATION	3.068497709034628E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999954037039	WITHOUT_CLASSIFICATION	4.596296211866899E-9	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999954037039	WITHOUT_CLASSIFICATION	4.596296211866899E-9	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999946306470188	WITHOUT_CLASSIFICATION	5.369352981156177E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999998748759967	WITHOUT_CLASSIFICATION	1.2512400330076903E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999950237654613	WITHOUT_CLASSIFICATION	4.9762345386016945E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999950237654613	WITHOUT_CLASSIFICATION	4.9762345386016945E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999758434615692	WITHOUT_CLASSIFICATION	2.4156538430864415E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999693150229096	WITHOUT_CLASSIFICATION	3.068497709034628E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999693150229096	WITHOUT_CLASSIFICATION	3.068497709034628E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999954037039	WITHOUT_CLASSIFICATION	4.596296211866899E-9	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999906106365458	WITHOUT_CLASSIFICATION	9.389363454168357E-6	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999999786552599	WITHOUT_CLASSIFICATION	2.1344740096388104E-8	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.9999944975071298	WITHOUT_CLASSIFICATION	5.502492870194993E-6	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9995833110468608	WITHOUT_CLASSIFICATION	4.1668895313919893E-4	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.9999989872154696	WITHOUT_CLASSIFICATION	1.0127845303317202E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999579156639894	WITHOUT_CLASSIFICATION	4.2084336010679254E-5	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999237779293	WITHOUT_CLASSIFICATION	7.622207071671682E-8	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999998123674733	WITHOUT_CLASSIFICATION	1.8763252676642442E-7	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999990978741972	WITHOUT_CLASSIFICATION	9.021258028149016E-7	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999745525558	WITHOUT_CLASSIFICATION	2.5447444170016164E-8	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999958280146266	WITHOUT_CLASSIFICATION	4.171985373394306E-6	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999159394889	WITHOUT_CLASSIFICATION	8.406051110016878E-8	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999973833459673	WITHOUT_CLASSIFICATION	2.6166540327231116E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999579156639894	WITHOUT_CLASSIFICATION	4.2084336010679254E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999579156639894	WITHOUT_CLASSIFICATION	4.2084336010679254E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999579156639894	WITHOUT_CLASSIFICATION	4.2084336010679254E-5	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999999913064191	WITHOUT_CLASSIFICATION	8.693580861662892E-9	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999847830637	WITHOUT_CLASSIFICATION	1.5216936240176704E-8	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999847830637	WITHOUT_CLASSIFICATION	1.5216936240176704E-8	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999979988257	WITHOUT_CLASSIFICATION	2.0011743041532273E-9	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999998859305	WITHOUT_CLASSIFICATION	1.1406951635884711E-10	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999960141706	WITHOUT_CLASSIFICATION	3.985829420313544E-9	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999996012638914	WITHOUT_CLASSIFICATION	3.987361086018841E-6	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999996012638914	WITHOUT_CLASSIFICATION	3.987361086018841E-6	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999987961427	WITHOUT_CLASSIFICATION	1.203857325497848E-9	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999853345147356	WITHOUT_CLASSIFICATION	1.466548526446454E-5	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999853345147356	WITHOUT_CLASSIFICATION	1.466548526446454E-5	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999999961160448	WITHOUT_CLASSIFICATION	3.883955205319627E-8	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999693369297	WITHOUT_CLASSIFICATION	3.066307028252279E-8	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999989957602	WITHOUT_CLASSIFICATION	1.0042397951022309E-9	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999937017294042	WITHOUT_CLASSIFICATION	6.298270595829665E-6	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.9999913286275689	WITHOUT_CLASSIFICATION	8.671372431010614E-6	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.9999903761902416	WITHOUT_CLASSIFICATION	9.62380975851795E-6	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999987576139019	WITHOUT_CLASSIFICATION	1.2423860981601262E-6	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999930222029229	WITHOUT_CLASSIFICATION	6.9777970771329425E-6	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.9778900372682631	WITHOUT_CLASSIFICATION	0.022109962731736918	IMPLEMENTATION
ID	WITHOUT_CLASSIFICATION	0.9998615407029119	WITHOUT_CLASSIFICATION	1.3845929708814332E-4	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999984487664801	WITHOUT_CLASSIFICATION	1.551233519921892E-6	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999702424570037	WITHOUT_CLASSIFICATION	2.9757542996389785E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999035782958	WITHOUT_CLASSIFICATION	9.64217041368739E-8	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999977781233705	WITHOUT_CLASSIFICATION	2.221876629457322E-6	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999790493384	WITHOUT_CLASSIFICATION	2.095066159407893E-8	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999702424570037	WITHOUT_CLASSIFICATION	2.9757542996389785E-5	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999287055884	WITHOUT_CLASSIFICATION	7.12944115681294E-8	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999960342230565	WITHOUT_CLASSIFICATION	3.965776943519044E-6	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999894623248614	WITHOUT_CLASSIFICATION	1.0537675138549278E-5	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9999847465838361	WITHOUT_CLASSIFICATION	1.5253416163921713E-5	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999976382693957	WITHOUT_CLASSIFICATION	2.3617306042718703E-6	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999983280205517	WITHOUT_CLASSIFICATION	1.6719794482697792E-6	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999979841766494	WITHOUT_CLASSIFICATION	2.015823350542411E-6	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999806566721383	WITHOUT_CLASSIFICATION	1.9343327861658583E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999989047351906	WITHOUT_CLASSIFICATION	1.095264809365397E-6	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999997477695	WITHOUT_CLASSIFICATION	2.5223041131977104E-10	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999878709090272	WITHOUT_CLASSIFICATION	1.2129090972738171E-5	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.9999999950715123	WITHOUT_CLASSIFICATION	4.928487735558369E-9	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999793876885428	WITHOUT_CLASSIFICATION	2.0612311457216685E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999987576139019	WITHOUT_CLASSIFICATION	1.2423860981601262E-6	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999989047351906	WITHOUT_CLASSIFICATION	1.095264809365397E-6	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999878709090272	WITHOUT_CLASSIFICATION	1.2129090972738171E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999793876885428	WITHOUT_CLASSIFICATION	2.0612311457216685E-5	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999967643928214	WITHOUT_CLASSIFICATION	3.235607178590928E-6	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.9999930686813713	WITHOUT_CLASSIFICATION	6.931318628753147E-6	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999990565598311	WITHOUT_CLASSIFICATION	9.434401689197055E-7	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999895691998587	WITHOUT_CLASSIFICATION	1.0430800141293932E-5	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999967715785237	WITHOUT_CLASSIFICATION	3.228421476271565E-6	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9999845711861295	WITHOUT_CLASSIFICATION	1.542881387052133E-5	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.999999446050715	WITHOUT_CLASSIFICATION	5.53949284967954E-7	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999928574935071	WITHOUT_CLASSIFICATION	7.14250649297997E-6	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999996522264829	WITHOUT_CLASSIFICATION	3.4777351706610954E-7	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999997233684104	WITHOUT_CLASSIFICATION	2.766315897324969E-7	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999212500187	WITHOUT_CLASSIFICATION	7.874998128792519E-7	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999925575745203	WITHOUT_CLASSIFICATION	7.442425479656026E-6	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999973166881337	WITHOUT_CLASSIFICATION	2.6833118661951626E-6	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999915800473932	WITHOUT_CLASSIFICATION	8.41995260682099E-6	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.9999945265450555	WITHOUT_CLASSIFICATION	5.4734549445151665E-6	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999977860616946	WITHOUT_CLASSIFICATION	2.213938305361945E-6	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999874746102275	WITHOUT_CLASSIFICATION	1.2525389772450743E-5	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999672452784	WITHOUT_CLASSIFICATION	3.275472169440896E-8	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.999989223647994	WITHOUT_CLASSIFICATION	1.0776352005898047E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999989047351906	WITHOUT_CLASSIFICATION	1.095264809365397E-6	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999997147915582	WITHOUT_CLASSIFICATION	2.852084418125798E-7	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999993898723373	WITHOUT_CLASSIFICATION	6.101276627423429E-7	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.9999989396795398	WITHOUT_CLASSIFICATION	1.0603204602111707E-6	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.999993431055614	WITHOUT_CLASSIFICATION	6.568944385910565E-6	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.9999987574397711	WITHOUT_CLASSIFICATION	1.2425602289043963E-6	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.99999890389015	WITHOUT_CLASSIFICATION	1.0961098500432306E-6	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999166142868	WITHOUT_CLASSIFICATION	8.338571314676337E-8	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999999347466037	WITHOUT_CLASSIFICATION	6.525339630439824E-7	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999989308466315	WITHOUT_CLASSIFICATION	1.0691533683979313E-6	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.999988033049186	WITHOUT_CLASSIFICATION	1.1966950813958978E-5	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999773403061608	WITHOUT_CLASSIFICATION	2.265969383923018E-5	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999877168484366	WITHOUT_CLASSIFICATION	1.228315156344362E-5	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9605025638090287	WITHOUT_CLASSIFICATION	0.03949743619097138	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999910978291435	WITHOUT_CLASSIFICATION	8.902170856484262E-6	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.9999999042603536	WITHOUT_CLASSIFICATION	9.573964647174859E-8	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999988662069851	WITHOUT_CLASSIFICATION	1.1337930148595717E-6	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.9999866818523357	WITHOUT_CLASSIFICATION	1.3318147664294778E-5	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.999991034974461	WITHOUT_CLASSIFICATION	8.96502553902716E-6	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.9999915201047326	WITHOUT_CLASSIFICATION	8.479895267354352E-6	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999783037633647	WITHOUT_CLASSIFICATION	2.169623663528742E-5	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999997978028797	WITHOUT_CLASSIFICATION	2.0219712023092292E-7	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999797870140039	WITHOUT_CLASSIFICATION	2.0212985996157516E-5	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999999715420876	WITHOUT_CLASSIFICATION	2.845791240925296E-7	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.999999867127024	WITHOUT_CLASSIFICATION	1.3287297600222504E-7	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999833504227886	WITHOUT_CLASSIFICATION	1.6649577211359668E-5	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999833504227886	WITHOUT_CLASSIFICATION	1.6649577211359668E-5	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999166950933617	WITHOUT_CLASSIFICATION	8.330490663829768E-5	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.99991300929676	WITHOUT_CLASSIFICATION	8.699070324004955E-5	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999931632017186	WITHOUT_CLASSIFICATION	6.836798281390156E-6	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999992840929728	WITHOUT_CLASSIFICATION	7.159070272240775E-7	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999998796990657	WITHOUT_CLASSIFICATION	1.2030093438259077E-7	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999999645131274	WITHOUT_CLASSIFICATION	3.548687258989633E-8	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999997837818526	WITHOUT_CLASSIFICATION	2.162181473975251E-6	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999901458165711	WITHOUT_CLASSIFICATION	9.854183428885714E-6	IMPLEMENTATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999996203827075	WITHOUT_CLASSIFICATION	3.7961729255748186E-7	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999992631976369	WITHOUT_CLASSIFICATION	7.368023631470563E-7	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999930546857572	WITHOUT_CLASSIFICATION	6.945314242719691E-6	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999995765734755	WITHOUT_CLASSIFICATION	4.2342652456913564E-7	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.9999993919637439	WITHOUT_CLASSIFICATION	6.080362560474804E-7	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999997613636145	WITHOUT_CLASSIFICATION	2.386363855773312E-7	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999878785573776	WITHOUT_CLASSIFICATION	1.2121442622342361E-5	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999998294426483	WITHOUT_CLASSIFICATION	1.7055735169927775E-7	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999895352957631	WITHOUT_CLASSIFICATION	1.0464704237024783E-5	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999998593366161	WITHOUT_CLASSIFICATION	1.4066338393280944E-7	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999165576243	WITHOUT_CLASSIFICATION	8.344237568448601E-8	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999704053346	WITHOUT_CLASSIFICATION	2.95946653722305E-8	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975922697019	WITHOUT_CLASSIFICATION	2.407730298103333E-5	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999648963994	WITHOUT_CLASSIFICATION	3.51036005530434E-8	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999998800590659	WITHOUT_CLASSIFICATION	1.1994093408500844E-7	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999950866284528	WITHOUT_CLASSIFICATION	4.913371547167417E-6	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999998361580428	WITHOUT_CLASSIFICATION	1.6384195724523514E-7	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999989443389682	WITHOUT_CLASSIFICATION	1.05566103186605E-6	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.999993533985453	WITHOUT_CLASSIFICATION	6.466014547016712E-6	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999997349906482	WITHOUT_CLASSIFICATION	2.650093517855891E-7	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999994241441	WITHOUT_CLASSIFICATION	5.75855992391681E-10	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999988412808591	WITHOUT_CLASSIFICATION	1.1587191409204184E-6	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999704053346	WITHOUT_CLASSIFICATION	2.95946653722305E-8	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999386063017918	WITHOUT_CLASSIFICATION	6.139369820828703E-5	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999923508808474	WITHOUT_CLASSIFICATION	7.649119152652867E-6	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999922692431557	WITHOUT_CLASSIFICATION	7.730756844315129E-6	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.999975756521245	WITHOUT_CLASSIFICATION	2.424347875505385E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.999975756521245	WITHOUT_CLASSIFICATION	2.424347875505385E-5	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999999868900461	WITHOUT_CLASSIFICATION	1.3109953924253117E-8	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.999999883555579	WITHOUT_CLASSIFICATION	1.1644442099047063E-7	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.999999100924453	WITHOUT_CLASSIFICATION	8.990755470714385E-7	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.999999100924453	WITHOUT_CLASSIFICATION	8.990755470714385E-7	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999999715420876	WITHOUT_CLASSIFICATION	2.845791240925296E-7	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999996692341258	WITHOUT_CLASSIFICATION	3.3076587418628833E-7	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999865107805158	WITHOUT_CLASSIFICATION	1.3489219484057618E-5	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999996171855183	WITHOUT_CLASSIFICATION	3.8281448174348314E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.999999941754884	WITHOUT_CLASSIFICATION	5.8245115998746445E-8	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999865107805158	WITHOUT_CLASSIFICATION	1.3489219484057618E-5	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999996171855183	WITHOUT_CLASSIFICATION	3.8281448174348314E-7	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999877271401982	WITHOUT_CLASSIFICATION	1.227285980184068E-5	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999978899008	WITHOUT_CLASSIFICATION	2.11009921326645E-9	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999998702727577	WITHOUT_CLASSIFICATION	1.297272422571522E-7	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.9999994458155596	WITHOUT_CLASSIFICATION	5.54184440422469E-7	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999658924223542	WITHOUT_CLASSIFICATION	3.4107577645818525E-5	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9997134802474223	WITHOUT_CLASSIFICATION	2.865197525776778E-4	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999987375816909	WITHOUT_CLASSIFICATION	1.262418309082123E-6	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999987375816909	WITHOUT_CLASSIFICATION	1.262418309082123E-6	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999999952526327	WITHOUT_CLASSIFICATION	4.747367293106257E-9	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999999421113	WITHOUT_CLASSIFICATION	5.788870723765958E-10	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999946840469217	WITHOUT_CLASSIFICATION	5.315953078263571E-6	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999988540755	WITHOUT_CLASSIFICATION	1.1459245609692437E-9	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999960208548624	WITHOUT_CLASSIFICATION	3.979145137580992E-6	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999995912942187	WITHOUT_CLASSIFICATION	4.0870578132156325E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.999999941754884	WITHOUT_CLASSIFICATION	5.8245115998746445E-8	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999998275491107	WITHOUT_CLASSIFICATION	1.7245088943101047E-7	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999999983523278	WITHOUT_CLASSIFICATION	1.6476721957856617E-8	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999999983523278	WITHOUT_CLASSIFICATION	1.6476721957856617E-8	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999972143097317	WITHOUT_CLASSIFICATION	2.785690268363561E-6	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999877271401982	WITHOUT_CLASSIFICATION	1.227285980184068E-5	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999729360146946	WITHOUT_CLASSIFICATION	2.7063985305456658E-5	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9998884526369525	WITHOUT_CLASSIFICATION	1.1154736304751173E-4	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9994385201318673	WITHOUT_CLASSIFICATION	5.614798681327077E-4	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999999321543344	WITHOUT_CLASSIFICATION	6.784566559309738E-8	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997757761113473	WITHOUT_CLASSIFICATION	2.242238886528339E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999877271401982	WITHOUT_CLASSIFICATION	1.227285980184068E-5	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999999321543344	WITHOUT_CLASSIFICATION	6.784566559309738E-8	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997757761113473	WITHOUT_CLASSIFICATION	2.242238886528339E-4	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999998805397069	WITHOUT_CLASSIFICATION	1.1946029307938585E-7	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999981430848579	WITHOUT_CLASSIFICATION	1.8569151420687474E-6	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999310403225	WITHOUT_CLASSIFICATION	6.895967749343602E-8	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999877271401982	WITHOUT_CLASSIFICATION	1.227285980184068E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999877271401982	WITHOUT_CLASSIFICATION	1.227285980184068E-5	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9999993358337986	WITHOUT_CLASSIFICATION	6.641662012980159E-7	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.9999988379440915	WITHOUT_CLASSIFICATION	1.1620559084681905E-6	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.9999996628852875	WITHOUT_CLASSIFICATION	3.371147125020832E-7	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999923994143668	WITHOUT_CLASSIFICATION	7.600585633295023E-6	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.9999998107812692	WITHOUT_CLASSIFICATION	1.8921873085621433E-7	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999932648951	WITHOUT_CLASSIFICATION	6.735104940922158E-9	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999867840175725	WITHOUT_CLASSIFICATION	1.321598242759464E-5	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999996744140155	WITHOUT_CLASSIFICATION	3.2558598440759123E-7	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999885894921883	WITHOUT_CLASSIFICATION	1.1410507811677397E-5	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.9999983555102178	WITHOUT_CLASSIFICATION	1.6444897821762145E-6	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999751111179224	WITHOUT_CLASSIFICATION	2.488888207763316E-5	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999733345730891	WITHOUT_CLASSIFICATION	2.666542691090415E-5	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999967416107	WITHOUT_CLASSIFICATION	3.2583893925263803E-9	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999757391443242	WITHOUT_CLASSIFICATION	2.4260855675707605E-5	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985359382177	WITHOUT_CLASSIFICATION	1.4640617822504843E-6	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999672962133	WITHOUT_CLASSIFICATION	3.2703786708031457E-8	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999923994143668	WITHOUT_CLASSIFICATION	7.600585633295023E-6	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.999998251399303	WITHOUT_CLASSIFICATION	1.7486006969430664E-6	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999993113310152	WITHOUT_CLASSIFICATION	6.88668984735769E-7	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999968396338	WITHOUT_CLASSIFICATION	3.16036627005189E-9	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999903516680069	WITHOUT_CLASSIFICATION	9.648331993170138E-6	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9998918552198449	WITHOUT_CLASSIFICATION	1.0814478015517585E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9998918552198449	WITHOUT_CLASSIFICATION	1.0814478015517585E-4	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999923994143668	WITHOUT_CLASSIFICATION	7.600585633295023E-6	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999996491781215	WITHOUT_CLASSIFICATION	3.5082187859738867E-7	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999999848493654	WITHOUT_CLASSIFICATION	1.5150634634255115E-8	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9992665877133842	WITHOUT_CLASSIFICATION	7.334122866159105E-4	IMPLEMENTATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999999750626807	WITHOUT_CLASSIFICATION	2.4937319380585935E-8	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999986018726331	WITHOUT_CLASSIFICATION	1.3981273668441365E-6	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999407954936118	WITHOUT_CLASSIFICATION	5.920450638830076E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.999998758352422	WITHOUT_CLASSIFICATION	1.2416475778840877E-6	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999997628715303	WITHOUT_CLASSIFICATION	2.371284698553186E-7	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999976251680861	WITHOUT_CLASSIFICATION	2.374831913943611E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474991892503	WITHOUT_CLASSIFICATION	5.25008107497187E-5	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999998366968045	WITHOUT_CLASSIFICATION	1.633031955715534E-7	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999998630502355	WITHOUT_CLASSIFICATION	1.369497646320927E-7	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999993395973484	WITHOUT_CLASSIFICATION	6.604026515878131E-7	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.99966297124149	WITHOUT_CLASSIFICATION	3.3702875850999674E-4	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999947549973208	WITHOUT_CLASSIFICATION	5.245002679149581E-6	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999658332297	WITHOUT_CLASSIFICATION	3.416677026861944E-8	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999999991130839	WITHOUT_CLASSIFICATION	8.869160890951941E-9	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999996524272903	WITHOUT_CLASSIFICATION	3.475727096086789E-7	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999932284763533	WITHOUT_CLASSIFICATION	6.7715236467494335E-6	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998942377865	WITHOUT_CLASSIFICATION	1.0576221346500429E-7	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999810748187	WITHOUT_CLASSIFICATION	1.8925181312668472E-8	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999953215892172	WITHOUT_CLASSIFICATION	4.678410782804535E-5	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999465754698972	WITHOUT_CLASSIFICATION	5.342453010272816E-5	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991346674398869	WITHOUT_CLASSIFICATION	8.65332560113218E-4	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976978116922783	WITHOUT_CLASSIFICATION	0.0023021883077217207	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999126691499369	WITHOUT_CLASSIFICATION	8.733085006307195E-5	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999973640124579	WITHOUT_CLASSIFICATION	2.6359875420997696E-5	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987302236425881	WITHOUT_CLASSIFICATION	0.0012697763574119549	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998216648496403	WITHOUT_CLASSIFICATION	1.7833515035963228E-4	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917137997369849	WITHOUT_CLASSIFICATION	0.008286200263015102	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999790191943458	WITHOUT_CLASSIFICATION	2.0980805654161303E-5	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.9999299759646979	WITHOUT_CLASSIFICATION	7.002403530214332E-5	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999920311887066	WITHOUT_CLASSIFICATION	7.968811293348998E-6	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999563122948654	WITHOUT_CLASSIFICATION	4.368770513468677E-5	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877336581642	WITHOUT_CLASSIFICATION	1.2266341835801826E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999587457642937	WITHOUT_CLASSIFICATION	4.125423570641326E-5	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998096324648169	WITHOUT_CLASSIFICATION	1.90367535183047E-4	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762257526672	WITHOUT_CLASSIFICATION	2.377424733282112E-5	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923199601805	WITHOUT_CLASSIFICATION	7.680039819577732E-6	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994039619296988	WITHOUT_CLASSIFICATION	5.960380703010562E-4	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988514883716253	WITHOUT_CLASSIFICATION	0.0011485116283746957	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999998067352511	WITHOUT_CLASSIFICATION	1.9326474892236344E-7	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999560487459145	WITHOUT_CLASSIFICATION	4.395125408559418E-5	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9829760792817	WITHOUT_CLASSIFICATION	0.01702392071829998	IMPLEMENTATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999996686295697	WITHOUT_CLASSIFICATION	3.313704303274577E-7	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999998657826991	WITHOUT_CLASSIFICATION	1.3421730100433921E-7	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998974320041	WITHOUT_CLASSIFICATION	1.0256799590259498E-7	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.9999980344733407	WITHOUT_CLASSIFICATION	1.9655266593053362E-6	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999996333609249	WITHOUT_CLASSIFICATION	3.666390751136676E-7	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999995705846	WITHOUT_CLASSIFICATION	4.294153767784089E-10	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999999307670432	WITHOUT_CLASSIFICATION	6.923295682530596E-8	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999968452371777	WITHOUT_CLASSIFICATION	3.154762822272837E-6	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999990504279812	WITHOUT_CLASSIFICATION	9.495720188031564E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474991892503	WITHOUT_CLASSIFICATION	5.25008107497187E-5	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999935884392351	WITHOUT_CLASSIFICATION	6.411560764925569E-6	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999992457320361	WITHOUT_CLASSIFICATION	7.542679638304433E-7	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999823123898	WITHOUT_CLASSIFICATION	1.768761018292459E-8	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999999970920462	WITHOUT_CLASSIFICATION	2.907953761754851E-9	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999777547261737	WITHOUT_CLASSIFICATION	2.224527382624768E-5	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9999982539672687	WITHOUT_CLASSIFICATION	1.7460327312346886E-6	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999991209942353	WITHOUT_CLASSIFICATION	8.790057647906933E-7	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999563235321064	WITHOUT_CLASSIFICATION	4.367646789361627E-5	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999899292778662	WITHOUT_CLASSIFICATION	1.0070722133716318E-5	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934469169193	WITHOUT_CLASSIFICATION	6.553083080759111E-6	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954384269304	WITHOUT_CLASSIFICATION	4.56157306958368E-6	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9989492971881132	WITHOUT_CLASSIFICATION	0.001050702811886744	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999987583467828	WITHOUT_CLASSIFICATION	1.2416532172798513E-6	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9996279684534697	WITHOUT_CLASSIFICATION	3.7203154653026336E-4	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999788508442072	WITHOUT_CLASSIFICATION	2.114915579277999E-5	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999090537352083	WITHOUT_CLASSIFICATION	9.094626479168609E-5	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999999921242573	WITHOUT_CLASSIFICATION	7.875742702234385E-8	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.999999934558893	WITHOUT_CLASSIFICATION	6.544110704031444E-8	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999997972302442	WITHOUT_CLASSIFICATION	2.0276975565689173E-7	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999993720566	WITHOUT_CLASSIFICATION	6.279433489779653E-10	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999244361283035	WITHOUT_CLASSIFICATION	7.556387169641103E-5	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999551859745656	WITHOUT_CLASSIFICATION	4.481402543452675E-5	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999998149528	WITHOUT_CLASSIFICATION	1.8504721417081332E-10	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999968963431822	WITHOUT_CLASSIFICATION	3.103656817671356E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474991892503	WITHOUT_CLASSIFICATION	5.25008107497187E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998974320041	WITHOUT_CLASSIFICATION	1.0256799590259498E-7	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999993684800877	WITHOUT_CLASSIFICATION	6.315199122918361E-7	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.999999400265399	WITHOUT_CLASSIFICATION	5.997346010369863E-7	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999895075658568	WITHOUT_CLASSIFICATION	1.0492434143126926E-5	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999987904182042	WITHOUT_CLASSIFICATION	1.2095817958007072E-6	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999315022599	WITHOUT_CLASSIFICATION	6.849774015672283E-8	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.9999998217181864	WITHOUT_CLASSIFICATION	1.7828181365615428E-7	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9989492971881132	WITHOUT_CLASSIFICATION	0.001050702811886744	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.999999856507901	WITHOUT_CLASSIFICATION	1.434920989628082E-7	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999903296281764	WITHOUT_CLASSIFICATION	9.670371823699267E-6	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999399847093	WITHOUT_CLASSIFICATION	6.001529073891258E-8	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999982800850116	WITHOUT_CLASSIFICATION	1.7199149884136212E-6	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999591696737	WITHOUT_CLASSIFICATION	4.083032640856615E-8	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999999908344887	WITHOUT_CLASSIFICATION	9.165511303505369E-8	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474991892503	WITHOUT_CLASSIFICATION	5.25008107497187E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474991892503	WITHOUT_CLASSIFICATION	5.25008107497187E-5	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999991431284212	WITHOUT_CLASSIFICATION	8.568715788239136E-7	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.999999862495846	WITHOUT_CLASSIFICATION	1.3750415395268507E-7	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999999982822529	WITHOUT_CLASSIFICATION	1.7177471032130574E-8	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999996265530964	WITHOUT_CLASSIFICATION	3.7344690370862833E-7	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.99999996677738	WITHOUT_CLASSIFICATION	3.322261988849655E-8	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999998274118797	WITHOUT_CLASSIFICATION	1.7258812029029872E-6	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999974234751806	WITHOUT_CLASSIFICATION	2.576524819351951E-6	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.9999904823214137	WITHOUT_CLASSIFICATION	9.51767858622171E-6	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999999545380767	WITHOUT_CLASSIFICATION	4.5461923378105614E-8	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474991892503	WITHOUT_CLASSIFICATION	5.25008107497187E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999483682134	WITHOUT_CLASSIFICATION	5.163178669728656E-8	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999839180198072	WITHOUT_CLASSIFICATION	1.6081980192740417E-5	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999999964976534	WITHOUT_CLASSIFICATION	3.5023464929107587E-9	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999996666598164	WITHOUT_CLASSIFICATION	3.3334018354774674E-7	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999942040252914	WITHOUT_CLASSIFICATION	5.7959747085666195E-6	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9997552041601161	WITHOUT_CLASSIFICATION	2.4479583988393347E-4	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999993984368921	WITHOUT_CLASSIFICATION	6.015631079303826E-7	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.9999999282405043	WITHOUT_CLASSIFICATION	7.175949567321129E-8	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.99948911925059	WITHOUT_CLASSIFICATION	5.10880749409948E-4	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999996218867717	WITHOUT_CLASSIFICATION	3.781132282821506E-7	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999997782039347	WITHOUT_CLASSIFICATION	2.2179606521342862E-7	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999314163666	WITHOUT_CLASSIFICATION	6.858363351042473E-8	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998974320041	WITHOUT_CLASSIFICATION	1.0256799590259498E-7	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999994796615777	WITHOUT_CLASSIFICATION	5.203384223809954E-7	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.999999989773866	WITHOUT_CLASSIFICATION	1.022613402643136E-8	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999988708198481	WITHOUT_CLASSIFICATION	1.1291801519675183E-6	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999999607804343	WITHOUT_CLASSIFICATION	3.921956572798408E-8	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999998914521696	WITHOUT_CLASSIFICATION	1.0854783036574636E-7	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999999081838529	WITHOUT_CLASSIFICATION	9.181614719253502E-8	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998974320041	WITHOUT_CLASSIFICATION	1.0256799590259498E-7	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.999999643051204	WITHOUT_CLASSIFICATION	3.569487958860613E-7	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999839180198072	WITHOUT_CLASSIFICATION	1.6081980192740417E-5	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999926939440493	WITHOUT_CLASSIFICATION	7.3060559506412335E-6	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999483682134	WITHOUT_CLASSIFICATION	5.163178669728656E-8	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474991892503	WITHOUT_CLASSIFICATION	5.25008107497187E-5	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999991246226	WITHOUT_CLASSIFICATION	8.7537738962321E-10	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9995441027211031	WITHOUT_CLASSIFICATION	4.558972788968634E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474991892503	WITHOUT_CLASSIFICATION	5.25008107497187E-5	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999998305926012	WITHOUT_CLASSIFICATION	1.6940739878022623E-7	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999399847093	WITHOUT_CLASSIFICATION	6.001529073891258E-8	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999982800850116	WITHOUT_CLASSIFICATION	1.7199149884136212E-6	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999591696737	WITHOUT_CLASSIFICATION	4.083032640856615E-8	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999998663644097	WITHOUT_CLASSIFICATION	1.3363559024372639E-7	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9999998335269895	WITHOUT_CLASSIFICATION	1.664730105582236E-7	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999994910574616	WITHOUT_CLASSIFICATION	5.089425384189729E-7	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999483682134	WITHOUT_CLASSIFICATION	5.163178669728656E-8	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999991246226	WITHOUT_CLASSIFICATION	8.7537738962321E-10	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474991892503	WITHOUT_CLASSIFICATION	5.25008107497187E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998974320041	WITHOUT_CLASSIFICATION	1.0256799590259498E-7	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999999908344887	WITHOUT_CLASSIFICATION	9.165511303505369E-8	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999991431284212	WITHOUT_CLASSIFICATION	8.568715788239136E-7	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.999999862495846	WITHOUT_CLASSIFICATION	1.3750415395268507E-7	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999980614442	WITHOUT_CLASSIFICATION	1.9385558042868768E-8	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999821751153	WITHOUT_CLASSIFICATION	1.7824884672950473E-8	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999999549232057	WITHOUT_CLASSIFICATION	4.507679424909415E-8	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999995703297	WITHOUT_CLASSIFICATION	4.296703485118122E-10	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999999367842357	WITHOUT_CLASSIFICATION	6.321576423685564E-8	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999999614446781	WITHOUT_CLASSIFICATION	3.855532199709111E-8	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988514883716253	WITHOUT_CLASSIFICATION	0.0011485116283746957	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999999864110722	WITHOUT_CLASSIFICATION	1.3588927640019728E-8	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9993354479511275	WITHOUT_CLASSIFICATION	6.645520488725958E-4	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999995456422611	WITHOUT_CLASSIFICATION	4.5435773887640016E-7	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999724266733	WITHOUT_CLASSIFICATION	2.7573326717918232E-8	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999986934809013	WITHOUT_CLASSIFICATION	1.3065190986894134E-6	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987302236425881	WITHOUT_CLASSIFICATION	0.0012697763574119549	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998216648496403	WITHOUT_CLASSIFICATION	1.7833515035963228E-4	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877336581642	WITHOUT_CLASSIFICATION	1.2266341835801826E-5	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999986934809013	WITHOUT_CLASSIFICATION	1.3065190986894134E-6	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999999284475101	WITHOUT_CLASSIFICATION	7.155248990599843E-7	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999993381062959	WITHOUT_CLASSIFICATION	6.61893704160497E-7	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971989553761803	WITHOUT_CLASSIFICATION	0.0028010446238196005	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996792558710175	WITHOUT_CLASSIFICATION	3.2074412898255205E-4	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999980321973749	WITHOUT_CLASSIFICATION	1.9678026250559848E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474991892503	WITHOUT_CLASSIFICATION	5.25008107497187E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474991892503	WITHOUT_CLASSIFICATION	5.25008107497187E-5	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.9999914857204332	WITHOUT_CLASSIFICATION	8.514279566893774E-6	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999587457642937	WITHOUT_CLASSIFICATION	4.125423570641326E-5	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923199601805	WITHOUT_CLASSIFICATION	7.680039819577732E-6	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999993720566	WITHOUT_CLASSIFICATION	6.279433489779653E-10	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999999993920027	WITHOUT_CLASSIFICATION	6.079973644454057E-10	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999702187039	WITHOUT_CLASSIFICATION	2.9781296080016822E-8	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999971461313	WITHOUT_CLASSIFICATION	2.8538686006673645E-9	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999989644255651	WITHOUT_CLASSIFICATION	1.035574434883309E-6	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999995942820201	WITHOUT_CLASSIFICATION	4.0571797990567683E-7	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.99999998418597	WITHOUT_CLASSIFICATION	1.581403005917734E-8	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999998571014592	WITHOUT_CLASSIFICATION	1.4289854084754362E-7	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999942824591888	WITHOUT_CLASSIFICATION	5.71754081120836E-6	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999976251680861	WITHOUT_CLASSIFICATION	2.374831913943611E-6	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9997503903025655	WITHOUT_CLASSIFICATION	2.496096974344501E-4	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999998367626748	WITHOUT_CLASSIFICATION	1.6323732519938177E-7	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999783355880962	WITHOUT_CLASSIFICATION	2.1664411903765712E-5	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999988333948159	WITHOUT_CLASSIFICATION	1.1666051840595743E-6	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999038697819	WITHOUT_CLASSIFICATION	9.613021813033719E-8	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999927947444035	WITHOUT_CLASSIFICATION	7.205255596511927E-6	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999428913892109	WITHOUT_CLASSIFICATION	5.710861078917877E-5	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992396528796333	WITHOUT_CLASSIFICATION	7.603471203666084E-4	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999947621606	WITHOUT_CLASSIFICATION	5.237839389420504E-8	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999951225822992	WITHOUT_CLASSIFICATION	4.877417700843944E-6	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999995419873665	WITHOUT_CLASSIFICATION	4.580126335140027E-7	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991253777066	WITHOUT_CLASSIFICATION	8.74622293493084E-7	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996967346522	WITHOUT_CLASSIFICATION	3.0326534787748426E-7	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993990460492	WITHOUT_CLASSIFICATION	6.009539507961315E-7	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997409970198	WITHOUT_CLASSIFICATION	2.5900298016492143E-7	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999987160003501	WITHOUT_CLASSIFICATION	1.2839996499392448E-6	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999998812008498	WITHOUT_CLASSIFICATION	1.18799150276898E-7	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998734470766	WITHOUT_CLASSIFICATION	1.2655292333507755E-7	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999924234185623	WITHOUT_CLASSIFICATION	7.5765814377102785E-6	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999255007221	WITHOUT_CLASSIFICATION	7.449927789970106E-8	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996326965371	WITHOUT_CLASSIFICATION	3.6730346287675493E-7	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999997256221917	WITHOUT_CLASSIFICATION	2.74377808304584E-7	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999978061103	WITHOUT_CLASSIFICATION	2.1938897685453203E-9	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999997007425901	WITHOUT_CLASSIFICATION	2.992574099097349E-7	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.999999722579367	WITHOUT_CLASSIFICATION	2.7742063307670225E-7	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999792512375862	WITHOUT_CLASSIFICATION	2.0748762413690085E-5	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999656507166867	WITHOUT_CLASSIFICATION	3.434928331328943E-5	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999996737187568	WITHOUT_CLASSIFICATION	3.262812432147584E-7	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999997913597158	WITHOUT_CLASSIFICATION	2.086402841667316E-7	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999985777042724	WITHOUT_CLASSIFICATION	1.4222957276414671E-6	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9998893498024936	WITHOUT_CLASSIFICATION	1.1065019750638166E-4	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999929015112	WITHOUT_CLASSIFICATION	7.098488809779132E-9	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999394035884985	WITHOUT_CLASSIFICATION	6.0596411501368015E-5	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999903087949	WITHOUT_CLASSIFICATION	9.691205129252104E-9	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999997833643222	WITHOUT_CLASSIFICATION	2.166356778837676E-7	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999978510313238	WITHOUT_CLASSIFICATION	2.1489686762513888E-6	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999998595439	WITHOUT_CLASSIFICATION	1.4045609999151643E-7	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999997432211676	WITHOUT_CLASSIFICATION	2.5677883242877877E-7	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999999173971755	WITHOUT_CLASSIFICATION	8.260282449581988E-7	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999973310194492	WITHOUT_CLASSIFICATION	2.6689805509059883E-6	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9986707507605626	WITHOUT_CLASSIFICATION	0.001329249239437492	IMPLEMENTATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999354117945005	WITHOUT_CLASSIFICATION	6.458820549952815E-5	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999926569916684	WITHOUT_CLASSIFICATION	7.3430083315355015E-6	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999210330667	WITHOUT_CLASSIFICATION	7.896693329487884E-8	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999977499306287	WITHOUT_CLASSIFICATION	2.2500693712085E-6	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999859916189253	WITHOUT_CLASSIFICATION	1.4008381074731507E-5	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999997023656402	WITHOUT_CLASSIFICATION	2.9763435975698274E-7	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999982906799827	WITHOUT_CLASSIFICATION	1.7093200172646946E-6	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999998918770502	WITHOUT_CLASSIFICATION	1.0812294980780447E-6	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9996510753369404	WITHOUT_CLASSIFICATION	3.48924663059608E-4	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999946369911389	WITHOUT_CLASSIFICATION	5.363008861124798E-6	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999986185312	WITHOUT_CLASSIFICATION	1.3814688641676433E-9	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999997846601271	WITHOUT_CLASSIFICATION	2.1533987285615473E-7	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999999882543728	WITHOUT_CLASSIFICATION	1.17456272111302E-7	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999976842804204	WITHOUT_CLASSIFICATION	2.315719579610644E-6	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9983898608605524	WITHOUT_CLASSIFICATION	0.0016101391394476247	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999875188182394	WITHOUT_CLASSIFICATION	1.2481181760580397E-5	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999674534012599	WITHOUT_CLASSIFICATION	3.254659874005596E-5	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.999999925650241	WITHOUT_CLASSIFICATION	7.434975901684072E-8	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999777745859	WITHOUT_CLASSIFICATION	2.2225414090502557E-8	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.9999915237998502	WITHOUT_CLASSIFICATION	8.47620014970887E-6	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999974294363669	WITHOUT_CLASSIFICATION	2.5705636330242557E-6	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.9999983303517992	WITHOUT_CLASSIFICATION	1.6696482007583988E-6	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9998423293352784	WITHOUT_CLASSIFICATION	1.5767066472164985E-4	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.999885720853162	WITHOUT_CLASSIFICATION	1.1427914683805252E-4	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999998862882794	WITHOUT_CLASSIFICATION	1.137117205579203E-7	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999960638957069	WITHOUT_CLASSIFICATION	3.9361042930681155E-6	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999987562649172	WITHOUT_CLASSIFICATION	1.2437350827416022E-6	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999998869391	WITHOUT_CLASSIFICATION	1.1306083916167732E-10	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999998423807	WITHOUT_CLASSIFICATION	1.5761926458620303E-10	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999883212069932	WITHOUT_CLASSIFICATION	1.1678793006813863E-5	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999952538381	WITHOUT_CLASSIFICATION	4.746161870624271E-9	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999997218525308	WITHOUT_CLASSIFICATION	2.7814746919444186E-6	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999968364482	WITHOUT_CLASSIFICATION	3.1635518648409624E-9	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999657677815573	WITHOUT_CLASSIFICATION	3.423221844274346E-5	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.9999944991804683	WITHOUT_CLASSIFICATION	5.500819531703572E-6	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999999992599995	WITHOUT_CLASSIFICATION	7.400004834479774E-10	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999867050057	WITHOUT_CLASSIFICATION	1.3294994430395085E-8	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999998161	WITHOUT_CLASSIFICATION	1.8377734458127207E-13	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.999991982851716	WITHOUT_CLASSIFICATION	8.017148284001724E-6	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.999999829562473	WITHOUT_CLASSIFICATION	1.7043752694757844E-7	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999360357147	WITHOUT_CLASSIFICATION	6.396428530985788E-8	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999992898826123	WITHOUT_CLASSIFICATION	7.101173877669943E-7	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999731660504344	WITHOUT_CLASSIFICATION	2.683394956568907E-5	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999987694571506	WITHOUT_CLASSIFICATION	1.2305428493612608E-6	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999999963211257	WITHOUT_CLASSIFICATION	3.6788743300435595E-9	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999940560015128	WITHOUT_CLASSIFICATION	5.943998487170441E-6	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9999948151758927	WITHOUT_CLASSIFICATION	5.184824107291767E-6	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999949851120576	WITHOUT_CLASSIFICATION	5.014887942368084E-6	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999955170163	WITHOUT_CLASSIFICATION	4.4829836378716455E-9	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999857697513971	WITHOUT_CLASSIFICATION	1.423024860286712E-5	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.9999584801065566	WITHOUT_CLASSIFICATION	4.1519893443369255E-5	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999998998821061	WITHOUT_CLASSIFICATION	1.001178938062551E-7	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999857697513971	WITHOUT_CLASSIFICATION	1.423024860286712E-5	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999321557036	WITHOUT_CLASSIFICATION	6.784429643926791E-8	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.9999999697968632	WITHOUT_CLASSIFICATION	3.020313683657442E-8	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998772854132143	WITHOUT_CLASSIFICATION	1.2271458678571955E-4	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9964145841695601	WITHOUT_CLASSIFICATION	0.003585415830440018	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.9999999636604044	WITHOUT_CLASSIFICATION	3.6339595585493274E-8	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999996195668562	WITHOUT_CLASSIFICATION	3.8043314383286266E-7	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999831955803904	WITHOUT_CLASSIFICATION	1.6804419609653844E-5	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999983753644222	WITHOUT_CLASSIFICATION	1.6246355778561797E-6	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999833376922124	WITHOUT_CLASSIFICATION	1.666230778761689E-5	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999925474714096	WITHOUT_CLASSIFICATION	7.452528590297305E-6	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999999974297235	WITHOUT_CLASSIFICATION	2.5702765391214753E-9	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999939549213577	WITHOUT_CLASSIFICATION	6.0450786423622025E-6	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999980439963405	WITHOUT_CLASSIFICATION	1.956003659488847E-6	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999699200319	WITHOUT_CLASSIFICATION	3.0079968007418267E-8	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999999733972119	WITHOUT_CLASSIFICATION	2.6602788097515477E-7	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999993375326784	WITHOUT_CLASSIFICATION	6.62467321564399E-7	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999153536122003	WITHOUT_CLASSIFICATION	8.464638779968608E-5	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999153536122003	WITHOUT_CLASSIFICATION	8.464638779968608E-5	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999986673389833	WITHOUT_CLASSIFICATION	1.332661016653485E-6	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9999952424619928	WITHOUT_CLASSIFICATION	4.757538007205172E-6	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.9999810956623975	WITHOUT_CLASSIFICATION	1.89043376025921E-5	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.999996601054786	WITHOUT_CLASSIFICATION	3.3989452138370813E-6	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999977582360075	WITHOUT_CLASSIFICATION	2.2417639924810056E-6	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.99997714046752	WITHOUT_CLASSIFICATION	2.285953247995803E-5	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9999986407546153	WITHOUT_CLASSIFICATION	1.3592453847237263E-6	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999917828962	WITHOUT_CLASSIFICATION	8.21710383852385E-9	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.9999999484294217	WITHOUT_CLASSIFICATION	5.157057830799266E-8	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998666350864016	WITHOUT_CLASSIFICATION	1.33364913598429E-4	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999908847527539	WITHOUT_CLASSIFICATION	9.11524724605691E-6	IMPLEMENTATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999034334703	WITHOUT_CLASSIFICATION	9.656652964770774E-8	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.99999896785468	WITHOUT_CLASSIFICATION	1.0321453199057304E-6	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999987537943722	WITHOUT_CLASSIFICATION	1.2462056277579823E-6	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.999999966472754	WITHOUT_CLASSIFICATION	3.352724597556008E-8	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999927947444035	WITHOUT_CLASSIFICATION	7.205255596511927E-6	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999996509516715	WITHOUT_CLASSIFICATION	3.4904832844532777E-7	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999623244059	WITHOUT_CLASSIFICATION	3.7675594137968216E-8	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999757891740585	WITHOUT_CLASSIFICATION	2.4210825941476305E-5	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999872956927418	WITHOUT_CLASSIFICATION	1.2704307258160042E-5	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999893810065	WITHOUT_CLASSIFICATION	1.061899355976376E-8	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.9999990526884472	WITHOUT_CLASSIFICATION	9.473115526989713E-7	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999999938228615	WITHOUT_CLASSIFICATION	6.177138434593598E-9	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999928016804	WITHOUT_CLASSIFICATION	7.198319588009138E-9	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999906199456924	WITHOUT_CLASSIFICATION	9.380054307587261E-6	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999736853622478	WITHOUT_CLASSIFICATION	2.6314637752211395E-5	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999995549532	WITHOUT_CLASSIFICATION	4.450468090647829E-10	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999904215187378	WITHOUT_CLASSIFICATION	9.57848126210387E-6	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999555614569687	WITHOUT_CLASSIFICATION	4.4438543031295674E-5	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9999994727049144	WITHOUT_CLASSIFICATION	5.272950856179821E-7	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.999998233699089	WITHOUT_CLASSIFICATION	1.7663009110602683E-6	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999999219164393	WITHOUT_CLASSIFICATION	7.8083560649096E-8	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.9999888575447989	WITHOUT_CLASSIFICATION	1.114245520094915E-5	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999986479273029	WITHOUT_CLASSIFICATION	1.3520726970572341E-6	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999990504668692	WITHOUT_CLASSIFICATION	9.495331308288924E-7	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.999995580366704	WITHOUT_CLASSIFICATION	4.419633296027358E-6	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.999992266157596	WITHOUT_CLASSIFICATION	7.733842404031379E-6	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999927633036344	WITHOUT_CLASSIFICATION	7.236696365539673E-6	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999997853724587	WITHOUT_CLASSIFICATION	2.146275412120318E-7	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999993868101099	WITHOUT_CLASSIFICATION	6.131898900470062E-7	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.9999902659131655	WITHOUT_CLASSIFICATION	9.734086834520711E-6	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.9999982863095348	WITHOUT_CLASSIFICATION	1.7136904652272753E-6	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999996677200206	WITHOUT_CLASSIFICATION	3.322799795267905E-7	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999086160075	WITHOUT_CLASSIFICATION	9.138399251767736E-8	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999999621726116	WITHOUT_CLASSIFICATION	3.782738835117444E-8	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999980398029631	WITHOUT_CLASSIFICATION	1.9601970369108502E-6	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998922104696177	WITHOUT_CLASSIFICATION	1.07789530382373E-4	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980119020572	WITHOUT_CLASSIFICATION	1.9880979428477487E-6	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923015707252	WITHOUT_CLASSIFICATION	7.698429274762873E-6	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999998922485974	WITHOUT_CLASSIFICATION	1.0775140261017764E-7	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999988610443329	WITHOUT_CLASSIFICATION	1.1389556671523326E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999942824591888	WITHOUT_CLASSIFICATION	5.71754081120836E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999942824591888	WITHOUT_CLASSIFICATION	5.71754081120836E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999015095232	WITHOUT_CLASSIFICATION	9.849047678938626E-7	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999782280029	WITHOUT_CLASSIFICATION	2.1771997082232844E-8	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999972874134833	WITHOUT_CLASSIFICATION	2.712586516713681E-6	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995919571254805	WITHOUT_CLASSIFICATION	4.080428745194495E-4	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999972874134833	WITHOUT_CLASSIFICATION	2.712586516713681E-6	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999801379290402	WITHOUT_CLASSIFICATION	1.986207095978584E-5	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999999013168872	WITHOUT_CLASSIFICATION	9.868311280092221E-7	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999989349509674	WITHOUT_CLASSIFICATION	1.0650490326796977E-6	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999980475584969	WITHOUT_CLASSIFICATION	1.9524415032186718E-6	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999996617261541	WITHOUT_CLASSIFICATION	3.3827384590671626E-7	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999997637082803	WITHOUT_CLASSIFICATION	2.36291719721873E-7	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999995711472663	WITHOUT_CLASSIFICATION	4.288527336620211E-7	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.9999998963575933	WITHOUT_CLASSIFICATION	1.0364240665313308E-7	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999968544243433	WITHOUT_CLASSIFICATION	3.145575656782852E-6	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9979963363267994	WITHOUT_CLASSIFICATION	0.002003663673200602	IMPLEMENTATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999962995284462	WITHOUT_CLASSIFICATION	3.700471553859361E-6	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999479088832	WITHOUT_CLASSIFICATION	5.209111685734362E-8	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999999344354503	WITHOUT_CLASSIFICATION	6.556454977209387E-8	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999999764487956	WITHOUT_CLASSIFICATION	2.355120440344483E-8	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999998744019581	WITHOUT_CLASSIFICATION	1.2559804181093378E-7	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999979074994	WITHOUT_CLASSIFICATION	2.0925005832060677E-9	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.999999829946306	WITHOUT_CLASSIFICATION	1.700536939766442E-7	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.999999829946306	WITHOUT_CLASSIFICATION	1.700536939766442E-7	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999996137638025	WITHOUT_CLASSIFICATION	3.862361974874746E-7	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999885645704	WITHOUT_CLASSIFICATION	1.14354296327348E-8	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999996557012	WITHOUT_CLASSIFICATION	3.4429884057844843E-10	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999334801295771	WITHOUT_CLASSIFICATION	6.651987042296141E-5	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999995089086	WITHOUT_CLASSIFICATION	4.910914740535894E-10	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999999850755352	WITHOUT_CLASSIFICATION	1.492446482977598E-8	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9998027615835874	WITHOUT_CLASSIFICATION	1.972384164125175E-4	IMPLEMENTATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999702307797071	WITHOUT_CLASSIFICATION	2.9769220292835188E-5	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.9999994003799759	WITHOUT_CLASSIFICATION	5.996200241007471E-7	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999999406925701	WITHOUT_CLASSIFICATION	5.930742990772323E-7	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999681870738	WITHOUT_CLASSIFICATION	3.181292614810042E-8	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999996780118156	WITHOUT_CLASSIFICATION	3.219881843955657E-6	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999983479620996	WITHOUT_CLASSIFICATION	1.6520379003492318E-6	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999999532708289	WITHOUT_CLASSIFICATION	4.672917109295788E-7	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999939685550524	WITHOUT_CLASSIFICATION	6.031444947549904E-6	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999999992282284	WITHOUT_CLASSIFICATION	7.717715966085938E-9	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999963518205878	WITHOUT_CLASSIFICATION	3.6481794122795543E-6	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9990196031271352	WITHOUT_CLASSIFICATION	9.80396872864761E-4	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.9999511840289332	WITHOUT_CLASSIFICATION	4.8815971066702065E-5	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999220772232	WITHOUT_CLASSIFICATION	7.79227768003615E-8	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999994399688145	WITHOUT_CLASSIFICATION	5.600311856525003E-7	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9998521086510882	WITHOUT_CLASSIFICATION	1.478913489117344E-4	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9997692551905973	WITHOUT_CLASSIFICATION	2.3074480940266857E-4	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9991046202319759	WITHOUT_CLASSIFICATION	8.953797680242153E-4	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.9999992695093395	WITHOUT_CLASSIFICATION	7.304906605780238E-7	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.9999999692502526	WITHOUT_CLASSIFICATION	3.0749747389859305E-8	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999975285125	WITHOUT_CLASSIFICATION	2.471487333798207E-9	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999439698773752	WITHOUT_CLASSIFICATION	5.603012262481909E-5	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999992812560708	WITHOUT_CLASSIFICATION	7.187439290797263E-7	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999973672201	WITHOUT_CLASSIFICATION	2.6327799115211383E-9	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999999990217573	WITHOUT_CLASSIFICATION	9.7824267957102E-10	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999996040491742	WITHOUT_CLASSIFICATION	3.9595082574174275E-7	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999805337140715	WITHOUT_CLASSIFICATION	1.946628592855412E-5	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999972355525094	WITHOUT_CLASSIFICATION	2.76444749058703E-6	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998227900554865	WITHOUT_CLASSIFICATION	1.7720994451363004E-4	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999996469895277	WITHOUT_CLASSIFICATION	3.530104723789315E-7	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999885917994	WITHOUT_CLASSIFICATION	1.1408200597870063E-7	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999989680471546	WITHOUT_CLASSIFICATION	1.0319528453649412E-6	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999934457513	WITHOUT_CLASSIFICATION	6.554248758664027E-9	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999967326327663	WITHOUT_CLASSIFICATION	3.2673672336923883E-6	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999996193488	WITHOUT_CLASSIFICATION	3.8065123015393637E-10	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998940471112	WITHOUT_CLASSIFICATION	1.0595288879282092E-6	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9999990507029862	WITHOUT_CLASSIFICATION	9.49297013795249E-7	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9215797930386886	WITHOUT_CLASSIFICATION	0.07842020696131133	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999993235165482	WITHOUT_CLASSIFICATION	6.764834518345842E-7	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999958056192023	WITHOUT_CLASSIFICATION	4.194380797609406E-6	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.8346576543332705	IMPLEMENTATION	0.1653423456667294	WITHOUT_CLASSIFICATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999935068314	WITHOUT_CLASSIFICATION	6.493168524323083E-9	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999960937352799	WITHOUT_CLASSIFICATION	3.906264720229092E-6	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999985156533103	WITHOUT_CLASSIFICATION	1.4843466897407102E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977962241084	WITHOUT_CLASSIFICATION	2.2037758914617146E-6	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999819735832	WITHOUT_CLASSIFICATION	1.802641679919689E-8	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999999034488	WITHOUT_CLASSIFICATION	9.655113242044175E-11	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999989105735928	WITHOUT_CLASSIFICATION	1.0894264070986627E-6	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.9999987755697805	WITHOUT_CLASSIFICATION	1.224430219545523E-6	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.999999643051204	WITHOUT_CLASSIFICATION	3.569487958860613E-7	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.999999643051204	WITHOUT_CLASSIFICATION	3.569487958860613E-7	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.99999989296483	WITHOUT_CLASSIFICATION	1.0703516992587216E-7	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.999987841314446	WITHOUT_CLASSIFICATION	1.2158685554019248E-5	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999998829957405	WITHOUT_CLASSIFICATION	1.170042595658718E-7	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999997905928668	WITHOUT_CLASSIFICATION	2.094071332366161E-7	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999998501470769	WITHOUT_CLASSIFICATION	1.4985292296983565E-7	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999753021916	WITHOUT_CLASSIFICATION	2.469780834750268E-8	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9997727979767186	WITHOUT_CLASSIFICATION	2.272020232812937E-4	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999841906431327	WITHOUT_CLASSIFICATION	1.5809356867280194E-5	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999981103151656	WITHOUT_CLASSIFICATION	1.88968483445054E-6	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999998246492	WITHOUT_CLASSIFICATION	1.7535092339232514E-10	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999944257097	WITHOUT_CLASSIFICATION	5.574290181970424E-9	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999998586627986	WITHOUT_CLASSIFICATION	1.4133720134917078E-7	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999997241819867	WITHOUT_CLASSIFICATION	2.758180133853304E-7	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999999408620841	WITHOUT_CLASSIFICATION	5.913791589729059E-7	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999998055342348	WITHOUT_CLASSIFICATION	1.9446576506802933E-7	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999994399135419	WITHOUT_CLASSIFICATION	5.600864581573176E-7	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999886572113608	WITHOUT_CLASSIFICATION	1.1342788639121436E-5	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998435234444	WITHOUT_CLASSIFICATION	1.5647655559389297E-7	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9999970761725138	WITHOUT_CLASSIFICATION	2.9238274863356917E-6	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999949813498	WITHOUT_CLASSIFICATION	5.018650161981556E-9	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999922092882633	WITHOUT_CLASSIFICATION	7.790711736780684E-6	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999981654764	WITHOUT_CLASSIFICATION	1.8345235871300123E-9	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.999997016778506	WITHOUT_CLASSIFICATION	2.983221493958028E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999863656618246	WITHOUT_CLASSIFICATION	1.3634338175319679E-5	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9995460802018955	WITHOUT_CLASSIFICATION	4.539197981045127E-4	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9995155454704844	WITHOUT_CLASSIFICATION	4.8445452951566715E-4	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.8994686967792702	WITHOUT_CLASSIFICATION	0.10053130322072981	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9998937532175477	WITHOUT_CLASSIFICATION	1.0624678245231687E-4	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999898350193797	WITHOUT_CLASSIFICATION	1.016498062029118E-4	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999904366083411	WITHOUT_CLASSIFICATION	9.56339165888076E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999863656618246	WITHOUT_CLASSIFICATION	1.3634338175319679E-5	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999983951325341	WITHOUT_CLASSIFICATION	1.6048674659534653E-6	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999990375616	WITHOUT_CLASSIFICATION	9.624383723843088E-10	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.9999860464715986	WITHOUT_CLASSIFICATION	1.3953528401512304E-5	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999993408243859	WITHOUT_CLASSIFICATION	6.591756141071532E-7	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999999999867173	WITHOUT_CLASSIFICATION	1.3282685553621137E-10	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999959990290608	WITHOUT_CLASSIFICATION	4.00097093921292E-6	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999871288835936	WITHOUT_CLASSIFICATION	1.2871116406323524E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999981233046	WITHOUT_CLASSIFICATION	1.876695382832235E-9	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9988950346320031	WITHOUT_CLASSIFICATION	0.0011049653679969192	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999993408243859	WITHOUT_CLASSIFICATION	6.591756141071532E-7	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999999945755857	WITHOUT_CLASSIFICATION	5.424414163172075E-9	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999981233046	WITHOUT_CLASSIFICATION	1.876695382832235E-9	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999994096349757	WITHOUT_CLASSIFICATION	5.903650243562809E-7	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999768223557655	WITHOUT_CLASSIFICATION	2.3177644234531036E-5	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.999999921228098	WITHOUT_CLASSIFICATION	7.877190203416604E-8	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999681870738	WITHOUT_CLASSIFICATION	3.181292614810042E-8	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999898908256	WITHOUT_CLASSIFICATION	1.0109174323689216E-8	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999999881617939	WITHOUT_CLASSIFICATION	1.1838205985132086E-8	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999833041046	WITHOUT_CLASSIFICATION	1.669589549825621E-8	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.999867999525177	WITHOUT_CLASSIFICATION	1.3200047482304713E-4	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999999445081	WITHOUT_CLASSIFICATION	5.5491873418767E-11	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.9999974654724232	WITHOUT_CLASSIFICATION	2.534527576739924E-6	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999999002265474	WITHOUT_CLASSIFICATION	9.977345256215614E-8	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999999527238725	WITHOUT_CLASSIFICATION	4.72761275094052E-8	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999999189347293	WITHOUT_CLASSIFICATION	8.106527068609979E-7	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999914705664368	WITHOUT_CLASSIFICATION	8.529433563227518E-6	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999960663022026	WITHOUT_CLASSIFICATION	3.933697797374308E-6	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999898164198	WITHOUT_CLASSIFICATION	1.0183580154027233E-8	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999963105285304	WITHOUT_CLASSIFICATION	3.6894714695945643E-6	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9999189507509193	WITHOUT_CLASSIFICATION	8.10492490806802E-5	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.999991191911526	WITHOUT_CLASSIFICATION	8.808088474043551E-6	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999474024724267	WITHOUT_CLASSIFICATION	5.2597527573148055E-5	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999987750700248	WITHOUT_CLASSIFICATION	1.2249299752696867E-6	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999998543903742	WITHOUT_CLASSIFICATION	1.4560962588418938E-7	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999976333245351	WITHOUT_CLASSIFICATION	2.366675464818536E-6	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999999867143063	WITHOUT_CLASSIFICATION	1.3285693669035734E-8	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999984245944276	WITHOUT_CLASSIFICATION	1.5754055725162213E-6	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999494859671443	WITHOUT_CLASSIFICATION	5.0514032855686756E-5	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999999581278872	WITHOUT_CLASSIFICATION	4.187211280139561E-8	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999999567265	WITHOUT_CLASSIFICATION	4.327352215491366E-11	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999976494505798	WITHOUT_CLASSIFICATION	2.350549420314095E-6	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.9999550070979354	WITHOUT_CLASSIFICATION	4.499290206463173E-5	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.999999615221636	WITHOUT_CLASSIFICATION	3.8477836388418066E-7	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999713023023248	WITHOUT_CLASSIFICATION	2.869769767519772E-4	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999235150130716	WITHOUT_CLASSIFICATION	7.64849869283284E-5	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.999997528404711	WITHOUT_CLASSIFICATION	2.4715952890813206E-6	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9988471393560125	WITHOUT_CLASSIFICATION	0.0011528606439874436	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999892657767663	WITHOUT_CLASSIFICATION	1.0734223233754748E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999976048886112	WITHOUT_CLASSIFICATION	2.3951113887775135E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999976048886112	WITHOUT_CLASSIFICATION	2.3951113887775135E-6	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999573840036	WITHOUT_CLASSIFICATION	4.26159963290322E-8	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999891566157242	WITHOUT_CLASSIFICATION	1.08433842758539E-5	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999962053338824	WITHOUT_CLASSIFICATION	3.7946661175689784E-6	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999980753534906	WITHOUT_CLASSIFICATION	1.924646509399479E-6	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999991329703781	WITHOUT_CLASSIFICATION	8.670296218350672E-7	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999935046493955	WITHOUT_CLASSIFICATION	6.495350604450378E-6	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999997823818468	WITHOUT_CLASSIFICATION	2.1761815320525624E-7	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999993122368087	WITHOUT_CLASSIFICATION	6.877631913011017E-7	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999849726747	WITHOUT_CLASSIFICATION	1.5027325259662996E-8	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999877243888	WITHOUT_CLASSIFICATION	1.227561109615791E-8	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999995806342422	WITHOUT_CLASSIFICATION	4.1936575778025477E-7	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999996113182582	WITHOUT_CLASSIFICATION	3.886817418019538E-7	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999871344496997	WITHOUT_CLASSIFICATION	1.2865550300327503E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999976048886112	WITHOUT_CLASSIFICATION	2.3951113887775135E-6	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.99999844342257	WITHOUT_CLASSIFICATION	1.556577429976347E-6	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999990567644539	WITHOUT_CLASSIFICATION	9.432355461737701E-7	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9997295474760877	WITHOUT_CLASSIFICATION	2.7045252391234826E-4	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999968932058008	WITHOUT_CLASSIFICATION	3.106794199225126E-6	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999999799828863	WITHOUT_CLASSIFICATION	2.0017113722312963E-8	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999994922453903	WITHOUT_CLASSIFICATION	5.077546097808656E-7	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998017304171621	WITHOUT_CLASSIFICATION	1.9826958283774985E-4	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999532362375354	WITHOUT_CLASSIFICATION	4.6763762464630745E-5	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999970514871446	WITHOUT_CLASSIFICATION	2.948512855393612E-6	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999976646928759	WITHOUT_CLASSIFICATION	2.3353071240558782E-6	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999774553587308	WITHOUT_CLASSIFICATION	2.25446412692488E-5	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999713023023248	WITHOUT_CLASSIFICATION	2.869769767519772E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999976048886112	WITHOUT_CLASSIFICATION	2.3951113887775135E-6	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999982865568546	WITHOUT_CLASSIFICATION	1.7134431454180555E-6	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999995085655552	WITHOUT_CLASSIFICATION	4.914344447358713E-7	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.9999983588686815	WITHOUT_CLASSIFICATION	1.6411313184903588E-6	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999956468474551	WITHOUT_CLASSIFICATION	4.353152544863367E-6	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9996401525143421	WITHOUT_CLASSIFICATION	3.598474856578177E-4	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999991031880754	WITHOUT_CLASSIFICATION	8.968119245076972E-7	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970666944651	WITHOUT_CLASSIFICATION	2.9333055349187376E-6	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999998670432522	WITHOUT_CLASSIFICATION	1.3295674787303696E-7	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999947607977	WITHOUT_CLASSIFICATION	5.239202212540137E-9	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.999998333347472	WITHOUT_CLASSIFICATION	1.6666525279510278E-6	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999996251402541	WITHOUT_CLASSIFICATION	3.7485974596474425E-7	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999719815100573	WITHOUT_CLASSIFICATION	2.8018489942769083E-5	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.999999784051518	WITHOUT_CLASSIFICATION	2.1594848204711078E-7	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999980057070444	WITHOUT_CLASSIFICATION	1.994292955569349E-6	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999801379290402	WITHOUT_CLASSIFICATION	1.986207095978584E-5	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999999958290295	WITHOUT_CLASSIFICATION	4.170970493056025E-8	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999778815646	WITHOUT_CLASSIFICATION	2.211843547994267E-8	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999719885342	WITHOUT_CLASSIFICATION	2.8011465910670027E-8	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.9999984490323006	WITHOUT_CLASSIFICATION	1.5509676993649648E-6	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999122446421	WITHOUT_CLASSIFICATION	8.775535784776324E-8	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999980395543062	WITHOUT_CLASSIFICATION	1.96044569384373E-6	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999980395543062	WITHOUT_CLASSIFICATION	1.96044569384373E-6	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999235235329812	WITHOUT_CLASSIFICATION	7.647646701876884E-5	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999976324426	WITHOUT_CLASSIFICATION	2.367557281174553E-9	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999888895179045	WITHOUT_CLASSIFICATION	1.1110482095490378E-5	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999703760798808	WITHOUT_CLASSIFICATION	2.9623920119111942E-5	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999947828720434	WITHOUT_CLASSIFICATION	5.2171279566633985E-6	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999997860120479	WITHOUT_CLASSIFICATION	2.1398795209470287E-7	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999267788145698	WITHOUT_CLASSIFICATION	7.322118543023674E-5	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999903057194	WITHOUT_CLASSIFICATION	9.694280605455459E-9	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999903057194	WITHOUT_CLASSIFICATION	9.694280605455459E-9	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999986410159107	WITHOUT_CLASSIFICATION	1.3589840892509337E-6	IMPLEMENTATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999997494067777	WITHOUT_CLASSIFICATION	2.5059322230172665E-7	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999998984143253	WITHOUT_CLASSIFICATION	1.015856745588206E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994699808445	WITHOUT_CLASSIFICATION	5.300191554469269E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994699808445	WITHOUT_CLASSIFICATION	5.300191554469269E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994699808445	WITHOUT_CLASSIFICATION	5.300191554469269E-7	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999942069722249	WITHOUT_CLASSIFICATION	5.79302777523003E-6	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999998015678747	WITHOUT_CLASSIFICATION	1.9843212519956865E-7	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9951595052608583	WITHOUT_CLASSIFICATION	0.004840494739141687	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999572766371769	WITHOUT_CLASSIFICATION	4.272336282312604E-5	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999994539420289	WITHOUT_CLASSIFICATION	5.460579711155337E-7	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999976048886112	WITHOUT_CLASSIFICATION	2.3951113887775135E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999976048886112	WITHOUT_CLASSIFICATION	2.3951113887775135E-6	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999958443048813	WITHOUT_CLASSIFICATION	4.1556951187694635E-6	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999971724093318	WITHOUT_CLASSIFICATION	2.8275906682602876E-6	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9992153848622024	WITHOUT_CLASSIFICATION	7.84615137797645E-4	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9997913527792597	WITHOUT_CLASSIFICATION	2.086472207403736E-4	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999994872706236	WITHOUT_CLASSIFICATION	5.127293764014397E-7	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.9999913778694788	WITHOUT_CLASSIFICATION	8.622130521151031E-6	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.999999243420479	WITHOUT_CLASSIFICATION	7.565795209691609E-7	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999953265825581	WITHOUT_CLASSIFICATION	4.6734174419206605E-6	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999997428741344	WITHOUT_CLASSIFICATION	2.571258655985394E-7	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999822346084	WITHOUT_CLASSIFICATION	1.7765391584928355E-8	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999250864217	WITHOUT_CLASSIFICATION	7.491357840707093E-8	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999939546705036	WITHOUT_CLASSIFICATION	6.045329496415484E-6	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999992822325832	WITHOUT_CLASSIFICATION	7.177674167815518E-7	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999992822325832	WITHOUT_CLASSIFICATION	7.177674167815518E-7	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999993991345472	WITHOUT_CLASSIFICATION	6.008654528709605E-7	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999993991345472	WITHOUT_CLASSIFICATION	6.008654528709605E-7	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999994459224583	WITHOUT_CLASSIFICATION	5.540775417495422E-7	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.999998607325976	WITHOUT_CLASSIFICATION	1.3926740239925163E-6	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.999998607325976	WITHOUT_CLASSIFICATION	1.3926740239925163E-6	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999977879697887	WITHOUT_CLASSIFICATION	2.2120302113954426E-6	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999998595882953	WITHOUT_CLASSIFICATION	1.404117047057501E-6	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999690215172161	WITHOUT_CLASSIFICATION	3.097848278390996E-4	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999980395543062	WITHOUT_CLASSIFICATION	1.96044569384373E-6	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999466674300452	WITHOUT_CLASSIFICATION	5.333256995469208E-5	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999998595882953	WITHOUT_CLASSIFICATION	1.404117047057501E-6	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999999888485793	WITHOUT_CLASSIFICATION	1.1151420614097444E-8	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9996053434132844	WITHOUT_CLASSIFICATION	3.9465658671548084E-4	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999969416496899	WITHOUT_CLASSIFICATION	3.058350310073641E-6	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999966992770444	WITHOUT_CLASSIFICATION	3.3007229557404457E-6	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999990391976582	WITHOUT_CLASSIFICATION	9.608023418120783E-7	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.99996789538694	WITHOUT_CLASSIFICATION	3.210461306006599E-5	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999903424879053	WITHOUT_CLASSIFICATION	9.65751209480883E-6	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999993088655158	WITHOUT_CLASSIFICATION	6.911344841974171E-7	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999998573103044	WITHOUT_CLASSIFICATION	1.4268969560544316E-7	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999999709862	WITHOUT_CLASSIFICATION	2.9013813109108744E-11	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999982639437	WITHOUT_CLASSIFICATION	1.7360562949494088E-9	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.9999939583057673	WITHOUT_CLASSIFICATION	6.041694232647229E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.999982206177568	WITHOUT_CLASSIFICATION	1.779382243214822E-5	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.9999995397429061	WITHOUT_CLASSIFICATION	4.6025709396281474E-7	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.999863318611414	WITHOUT_CLASSIFICATION	1.3668138858612434E-4	IMPLEMENTATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999982505010756	WITHOUT_CLASSIFICATION	1.7494989243573637E-6	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999690099468	WITHOUT_CLASSIFICATION	3.099005324474622E-8	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999983470068815	WITHOUT_CLASSIFICATION	1.6529931185665711E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999983470068815	WITHOUT_CLASSIFICATION	1.6529931185665711E-6	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.999999768038935	WITHOUT_CLASSIFICATION	2.319610650446183E-7	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999999771756475	WITHOUT_CLASSIFICATION	2.282435252416156E-8	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999996741645589	WITHOUT_CLASSIFICATION	3.258354411634879E-7	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998447903045795	WITHOUT_CLASSIFICATION	1.5520969542043249E-4	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999993455068551	WITHOUT_CLASSIFICATION	6.544931448794746E-7	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999493715031565	WITHOUT_CLASSIFICATION	5.062849684350135E-5	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999986387688968	WITHOUT_CLASSIFICATION	1.3612311032143898E-6	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999996023731755	WITHOUT_CLASSIFICATION	3.9762682435748376E-7	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999970159162456	WITHOUT_CLASSIFICATION	2.9840837543914513E-6	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.99999996275569	WITHOUT_CLASSIFICATION	3.72443099286711E-8	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999998561286415	WITHOUT_CLASSIFICATION	1.4387135859223245E-7	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999719815100573	WITHOUT_CLASSIFICATION	2.8018489942769083E-5	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999998452160352	WITHOUT_CLASSIFICATION	1.5478396475884654E-7	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.999998510201356	WITHOUT_CLASSIFICATION	1.4897986440375944E-6	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9998701415447336	WITHOUT_CLASSIFICATION	1.2985845526638463E-4	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999991283531703	WITHOUT_CLASSIFICATION	8.716468297354832E-7	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999656249072	WITHOUT_CLASSIFICATION	3.437509278166286E-8	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999656249072	WITHOUT_CLASSIFICATION	3.437509278166286E-8	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999435900180677	WITHOUT_CLASSIFICATION	5.6409981932406704E-5	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999984367771558	WITHOUT_CLASSIFICATION	1.5632228442341224E-6	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999943492614202	WITHOUT_CLASSIFICATION	5.650738579867003E-6	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.9999995571637063	WITHOUT_CLASSIFICATION	4.4283629370623216E-7	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.9999980741022118	WITHOUT_CLASSIFICATION	1.925897788337145E-6	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999930440302625	WITHOUT_CLASSIFICATION	6.955969737608925E-6	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999906664294146	WITHOUT_CLASSIFICATION	9.33357058544143E-6	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999825391458	WITHOUT_CLASSIFICATION	1.7460854242964264E-8	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999938439270889	WITHOUT_CLASSIFICATION	6.156072911149016E-6	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.999999996621827	WITHOUT_CLASSIFICATION	3.3781730719675644E-9	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999016342341	WITHOUT_CLASSIFICATION	9.836576591997437E-8	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999825391458	WITHOUT_CLASSIFICATION	1.7460854242964264E-8	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999999445417925	WITHOUT_CLASSIFICATION	5.545820750271211E-7	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999927705142327	WITHOUT_CLASSIFICATION	7.229485767309775E-6	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999299457858	WITHOUT_CLASSIFICATION	7.005421426151116E-8	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9999999640650405	WITHOUT_CLASSIFICATION	3.59349594793783E-8	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999938304155	WITHOUT_CLASSIFICATION	6.1695844906872225E-9	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999992442645133	WITHOUT_CLASSIFICATION	7.557354867677929E-7	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9997284926416132	WITHOUT_CLASSIFICATION	2.7150735838674464E-4	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.999999800162272	WITHOUT_CLASSIFICATION	1.998377280066633E-7	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999991314443	WITHOUT_CLASSIFICATION	8.685557293353287E-10	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999874079586624	WITHOUT_CLASSIFICATION	1.259204133758831E-4	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9995875264488183	WITHOUT_CLASSIFICATION	4.124735511815677E-4	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999999998265345	WITHOUT_CLASSIFICATION	1.7346548587339988E-9	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999655001398	WITHOUT_CLASSIFICATION	3.449986025198723E-8	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.999995028807299	WITHOUT_CLASSIFICATION	4.9711927010508E-6	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999229913850824	WITHOUT_CLASSIFICATION	7.700861491760794E-5	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999984942155264	WITHOUT_CLASSIFICATION	1.5057844735228882E-6	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999790433453	WITHOUT_CLASSIFICATION	2.095665481681545E-8	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9983431486840242	WITHOUT_CLASSIFICATION	0.0016568513159758102	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9997438542938838	WITHOUT_CLASSIFICATION	2.561457061163137E-4	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9997278669116361	WITHOUT_CLASSIFICATION	2.721330883638693E-4	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999940019559632	WITHOUT_CLASSIFICATION	5.9980440367716335E-6	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999993198119091	WITHOUT_CLASSIFICATION	6.801880908419093E-7	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999919004509561	WITHOUT_CLASSIFICATION	8.099549043939441E-6	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.9999832811941551	WITHOUT_CLASSIFICATION	1.6718805844897493E-5	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999998569474772	WITHOUT_CLASSIFICATION	1.430525228905403E-7	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999011629230447	WITHOUT_CLASSIFICATION	9.883707695529662E-5	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999642529085	WITHOUT_CLASSIFICATION	3.5747091536381776E-8	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999946543526901	WITHOUT_CLASSIFICATION	5.345647309941837E-6	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999373539536	WITHOUT_CLASSIFICATION	6.264604637897607E-8	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999919201294357	WITHOUT_CLASSIFICATION	8.079870564233803E-6	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999990794924625	WITHOUT_CLASSIFICATION	9.205075374870424E-7	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999998094952007	WITHOUT_CLASSIFICATION	1.9050479921977192E-7	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998101888445042	WITHOUT_CLASSIFICATION	1.8981115549570487E-4	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999961364592	WITHOUT_CLASSIFICATION	3.863540823474911E-9	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999995323602379	WITHOUT_CLASSIFICATION	4.6763976211414617E-7	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999997108735471	WITHOUT_CLASSIFICATION	2.8912645296239083E-7	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999998481128	WITHOUT_CLASSIFICATION	1.5188713612308694E-10	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999971908858	WITHOUT_CLASSIFICATION	2.809114161963695E-9	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999998889716118	WITHOUT_CLASSIFICATION	1.1102838814927496E-7	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999980785037619	WITHOUT_CLASSIFICATION	1.921496238050546E-6	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999989142081005	WITHOUT_CLASSIFICATION	1.085791899475892E-6	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999458553046	WITHOUT_CLASSIFICATION	5.4144695402042175E-8	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999653791972299	WITHOUT_CLASSIFICATION	3.462080277011033E-5	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999722658159	WITHOUT_CLASSIFICATION	2.7734184111859344E-8	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999999410821255	WITHOUT_CLASSIFICATION	5.891787446561236E-8	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999994797552133	WITHOUT_CLASSIFICATION	5.202447867284684E-7	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.999999969740708	WITHOUT_CLASSIFICATION	3.02592919517105E-8	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999983796291981	WITHOUT_CLASSIFICATION	1.6203708018906099E-6	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999999830184391	WITHOUT_CLASSIFICATION	1.6981560963649996E-8	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999998745284724	WITHOUT_CLASSIFICATION	1.254715276525154E-7	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700412057885	WITHOUT_CLASSIFICATION	2.9958794211577824E-5	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999993570241207	WITHOUT_CLASSIFICATION	6.429758793191834E-7	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999938753712	WITHOUT_CLASSIFICATION	6.124628779050587E-9	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999999999369849	WITHOUT_CLASSIFICATION	6.301509268112926E-10	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999967309438	WITHOUT_CLASSIFICATION	3.2690563046171133E-9	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999973233351505	WITHOUT_CLASSIFICATION	2.6766648495249876E-6	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999900694421783	WITHOUT_CLASSIFICATION	9.930557821647988E-6	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999981225139982	WITHOUT_CLASSIFICATION	1.8774860017490323E-6	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.9999976818009886	WITHOUT_CLASSIFICATION	2.318199011389016E-6	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999999815387708	WITHOUT_CLASSIFICATION	1.8461229226251135E-8	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999833973256536	WITHOUT_CLASSIFICATION	1.6602674346396257E-5	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999855417190561	WITHOUT_CLASSIFICATION	1.445828094387027E-5	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.9999824237377428	WITHOUT_CLASSIFICATION	1.7576262257192355E-5	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999999932065	WITHOUT_CLASSIFICATION	6.793385526887519E-12	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999999371690776	WITHOUT_CLASSIFICATION	6.283092227157378E-8	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999999338507388	WITHOUT_CLASSIFICATION	6.614926119991258E-7	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700412057885	WITHOUT_CLASSIFICATION	2.9958794211577824E-5	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999984308725592	WITHOUT_CLASSIFICATION	1.569127440744377E-6	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.999990671837007	WITHOUT_CLASSIFICATION	9.328162993021064E-6	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.999999997627865	WITHOUT_CLASSIFICATION	2.372134969194251E-9	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999999273416214	WITHOUT_CLASSIFICATION	7.265837863835215E-8	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999943755323052	WITHOUT_CLASSIFICATION	5.624467694730213E-6	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999997395888255	WITHOUT_CLASSIFICATION	2.60411174507143E-7	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999938439270889	WITHOUT_CLASSIFICATION	6.156072911149016E-6	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999050950040995	WITHOUT_CLASSIFICATION	9.490499590039771E-5	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999995323602379	WITHOUT_CLASSIFICATION	4.6763976211414617E-7	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999673912890902	WITHOUT_CLASSIFICATION	3.2608710909777955E-5	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999993587581365	WITHOUT_CLASSIFICATION	6.412418634633651E-7	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999978405073	WITHOUT_CLASSIFICATION	2.159492699943587E-9	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999927580941	WITHOUT_CLASSIFICATION	7.2419058690347595E-9	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999933065406018	WITHOUT_CLASSIFICATION	6.693459398222719E-6	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999989403010269	WITHOUT_CLASSIFICATION	1.0596989730673353E-6	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999995848635509	WITHOUT_CLASSIFICATION	4.151364491712628E-7	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999999939929066	WITHOUT_CLASSIFICATION	6.007093393047278E-8	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999642810705	WITHOUT_CLASSIFICATION	3.571892942600233E-8	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.999999993034528	WITHOUT_CLASSIFICATION	6.9654720328333054E-9	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999568319852629	WITHOUT_CLASSIFICATION	4.316801473706273E-5	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999666324380213	WITHOUT_CLASSIFICATION	3.336756197868011E-5	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998007616256	WITHOUT_CLASSIFICATION	1.9923837437659623E-7	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998007616256	WITHOUT_CLASSIFICATION	1.9923837437659623E-7	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999939447832	WITHOUT_CLASSIFICATION	6.055216702836428E-9	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999987414881869	WITHOUT_CLASSIFICATION	1.2585118130992488E-5	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999930906281	WITHOUT_CLASSIFICATION	6.909371788420424E-9	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999962287663	WITHOUT_CLASSIFICATION	3.771233686596E-9	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999995996513042	WITHOUT_CLASSIFICATION	4.003486957552361E-7	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999997246060865	WITHOUT_CLASSIFICATION	2.7539391336833576E-7	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999994848517	WITHOUT_CLASSIFICATION	5.151483073202539E-10	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999997828828636	WITHOUT_CLASSIFICATION	2.171171364438005E-7	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999523401214	WITHOUT_CLASSIFICATION	4.76598785259978E-8	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999994596365135	WITHOUT_CLASSIFICATION	5.403634864646874E-7	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999761558710767	WITHOUT_CLASSIFICATION	2.384412892330023E-5	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.9999937399265123	WITHOUT_CLASSIFICATION	6.260073487733146E-6	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999953978804271	WITHOUT_CLASSIFICATION	4.602119572855513E-6	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999950954189	WITHOUT_CLASSIFICATION	4.904581056723664E-9	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999853435214431	WITHOUT_CLASSIFICATION	1.4656478556874085E-5	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999839038843	WITHOUT_CLASSIFICATION	1.6096115678483205E-8	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999995414659594	WITHOUT_CLASSIFICATION	4.585340406350076E-7	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999999080792994	WITHOUT_CLASSIFICATION	9.192070058297635E-8	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999879828289	WITHOUT_CLASSIFICATION	1.2017171158265278E-8	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999999724421526	WITHOUT_CLASSIFICATION	2.755784739858156E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474991892503	WITHOUT_CLASSIFICATION	5.25008107497187E-5	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999999999543613	WITHOUT_CLASSIFICATION	4.563871408906725E-10	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999999384313534	WITHOUT_CLASSIFICATION	6.156864661070182E-8	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999942092338	WITHOUT_CLASSIFICATION	5.790766267882902E-9	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999993329921817	WITHOUT_CLASSIFICATION	6.670078183665654E-7	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.9999018012982266	WITHOUT_CLASSIFICATION	9.819870177341649E-5	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9998414634039922	WITHOUT_CLASSIFICATION	1.5853659600796564E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474991892503	WITHOUT_CLASSIFICATION	5.25008107497187E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474991892503	WITHOUT_CLASSIFICATION	5.25008107497187E-5	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999998630502355	WITHOUT_CLASSIFICATION	1.369497646320927E-7	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999920336261	WITHOUT_CLASSIFICATION	7.966373998442174E-9	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999999029057068	WITHOUT_CLASSIFICATION	9.709429317304776E-8	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999995754049	WITHOUT_CLASSIFICATION	4.245951000358746E-7	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999964745017617	WITHOUT_CLASSIFICATION	3.5254982384545112E-6	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999999907733453	WITHOUT_CLASSIFICATION	9.226654662829671E-9	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999977980928256	WITHOUT_CLASSIFICATION	2.20190717432693E-6	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9965828633661793	WITHOUT_CLASSIFICATION	0.0034171366338207106	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999985288588031	WITHOUT_CLASSIFICATION	1.4711411968636216E-6	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999477631957	WITHOUT_CLASSIFICATION	5.223680427077397E-8	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999974579970484	WITHOUT_CLASSIFICATION	2.542002951629745E-6	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9998732675079819	WITHOUT_CLASSIFICATION	1.2673249201805608E-4	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999990185205495	WITHOUT_CLASSIFICATION	9.814794505271978E-7	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999999073235939	WITHOUT_CLASSIFICATION	9.267640610120259E-7	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987379193354416	WITHOUT_CLASSIFICATION	0.0012620806645583659	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999999544939158	WITHOUT_CLASSIFICATION	4.5506084205983106E-7	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999999322311983	WITHOUT_CLASSIFICATION	6.776880160764616E-8	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999998952897126	WITHOUT_CLASSIFICATION	1.047102873476281E-7	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.999999758191448	WITHOUT_CLASSIFICATION	2.418085519351478E-7	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971989553761803	WITHOUT_CLASSIFICATION	0.0028010446238196005	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.9778900372682631	WITHOUT_CLASSIFICATION	0.022109962731736918	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999993042318991	WITHOUT_CLASSIFICATION	6.957681008721651E-7	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9998729722171138	WITHOUT_CLASSIFICATION	1.2702778288619588E-4	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999251531379081	WITHOUT_CLASSIFICATION	7.484686209191257E-5	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999563971801134	WITHOUT_CLASSIFICATION	4.360281988670015E-5	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999843621351237	WITHOUT_CLASSIFICATION	1.5637864876390492E-5	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999866050705	WITHOUT_CLASSIFICATION	1.3394929438224895E-8	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999963703974059	WITHOUT_CLASSIFICATION	3.6296025941971594E-6	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999960131643615	WITHOUT_CLASSIFICATION	3.98683563846119E-6	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999996308689313	WITHOUT_CLASSIFICATION	3.6913106873955503E-7	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.999999920631389	WITHOUT_CLASSIFICATION	7.936861101994735E-8	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999985228564657	WITHOUT_CLASSIFICATION	1.4771435343507893E-6	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.9999991344823126	WITHOUT_CLASSIFICATION	8.655176873765705E-7	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999994902401886	WITHOUT_CLASSIFICATION	5.097598113297722E-7	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999999885739011	WITHOUT_CLASSIFICATION	1.1426098897263587E-7	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999980995398	WITHOUT_CLASSIFICATION	1.900460188726055E-9	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999895194070163	WITHOUT_CLASSIFICATION	1.0480592983700874E-5	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999792958559074	WITHOUT_CLASSIFICATION	2.070414409254665E-5	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999995957865587	WITHOUT_CLASSIFICATION	4.042134413577673E-7	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999997588048	WITHOUT_CLASSIFICATION	2.411952357926661E-10	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999991715659452	WITHOUT_CLASSIFICATION	8.284340547909582E-7	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999998029642989	WITHOUT_CLASSIFICATION	1.970357010995329E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999926309613716	WITHOUT_CLASSIFICATION	7.369038628461073E-6	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999977169819994	WITHOUT_CLASSIFICATION	2.283018000661359E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999926309613716	WITHOUT_CLASSIFICATION	7.369038628461073E-6	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999998334534	WITHOUT_CLASSIFICATION	1.6654649872444296E-10	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999440891998	WITHOUT_CLASSIFICATION	5.591080015979193E-8	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999906980795118	WITHOUT_CLASSIFICATION	9.30192048829129E-6	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999922892406036	WITHOUT_CLASSIFICATION	7.71075939643312E-6	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999358392152	WITHOUT_CLASSIFICATION	6.416078481008939E-8	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999984981601422	WITHOUT_CLASSIFICATION	1.5018398578617902E-6	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999999958934683	WITHOUT_CLASSIFICATION	4.106531692641935E-9	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999080921151	WITHOUT_CLASSIFICATION	9.190788493115859E-8	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999999151203496	WITHOUT_CLASSIFICATION	8.487965041613635E-8	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999998815685333	WITHOUT_CLASSIFICATION	1.1843146678810056E-7	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999051874624	WITHOUT_CLASSIFICATION	9.481253755467847E-8	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999998274292123	WITHOUT_CLASSIFICATION	1.7257078775030153E-7	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999776101464	WITHOUT_CLASSIFICATION	2.238985365656013E-8	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9996842366611249	WITHOUT_CLASSIFICATION	3.157633388750389E-4	IMPLEMENTATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999978415906352	WITHOUT_CLASSIFICATION	2.1584093648062445E-5	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999997072238577	WITHOUT_CLASSIFICATION	2.927761422853532E-7	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999998160701857	WITHOUT_CLASSIFICATION	1.8392981428643133E-7	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999842367172	WITHOUT_CLASSIFICATION	1.5763282817578006E-8	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999976461231	WITHOUT_CLASSIFICATION	2.353876849160642E-9	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999998375500774	WITHOUT_CLASSIFICATION	1.6244992251239316E-7	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999909015367	WITHOUT_CLASSIFICATION	9.098463248938105E-9	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999976954580622	WITHOUT_CLASSIFICATION	2.3045419379041553E-6	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9998978096151057	WITHOUT_CLASSIFICATION	1.0219038489434569E-4	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999627307946636	WITHOUT_CLASSIFICATION	3.726920533634337E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999959824339325	WITHOUT_CLASSIFICATION	4.01756606739165E-6	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999975837083	WITHOUT_CLASSIFICATION	2.416291698449942E-9	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999974044585302	WITHOUT_CLASSIFICATION	2.595541469789966E-6	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.9999973317651024	WITHOUT_CLASSIFICATION	2.6682348975762814E-6	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998955699095	WITHOUT_CLASSIFICATION	1.0443009041868837E-7	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999948765746624	WITHOUT_CLASSIFICATION	5.123425337640221E-6	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.999999543460457	WITHOUT_CLASSIFICATION	4.5653954291860455E-7	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999831044342935	WITHOUT_CLASSIFICATION	1.6895565706517146E-5	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999998117645	WITHOUT_CLASSIFICATION	1.882356054350343E-10	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999908994004103	WITHOUT_CLASSIFICATION	9.100599589705682E-6	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999715261067742	WITHOUT_CLASSIFICATION	2.8473893225771085E-5	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.9999989038283256	WITHOUT_CLASSIFICATION	1.0961716744308854E-6	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9999993858587105	WITHOUT_CLASSIFICATION	6.141412895053759E-7	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999202053687	WITHOUT_CLASSIFICATION	7.979463133518219E-8	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9999977054226749	WITHOUT_CLASSIFICATION	2.2945773252101936E-6	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999827511653	WITHOUT_CLASSIFICATION	1.7248834646746003E-8	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.999999966007458	WITHOUT_CLASSIFICATION	3.399254203155905E-8	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.9999939996294898	WITHOUT_CLASSIFICATION	6.000370510250349E-6	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999988708198481	WITHOUT_CLASSIFICATION	1.1291801519675183E-6	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999975837083	WITHOUT_CLASSIFICATION	2.416291698449942E-9	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999896350819417	WITHOUT_CLASSIFICATION	1.0364918058248127E-5	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999997763977588	WITHOUT_CLASSIFICATION	2.236022410904573E-7	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999884915394801	WITHOUT_CLASSIFICATION	1.1508460519980325E-5	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999999964599657	WITHOUT_CLASSIFICATION	3.540034337291748E-9	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.9999993140612208	WITHOUT_CLASSIFICATION	6.859387793128218E-7	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999687829636	WITHOUT_CLASSIFICATION	3.121703636899929E-8	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999968610014777	WITHOUT_CLASSIFICATION	3.138998522258666E-6	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.999968937475934	WITHOUT_CLASSIFICATION	3.1062524066022906E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999962889933486	WITHOUT_CLASSIFICATION	3.7110066514992275E-6	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999158167461	WITHOUT_CLASSIFICATION	8.418325392863656E-8	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.9999464115430718	WITHOUT_CLASSIFICATION	5.358845692810249E-5	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999965097632	WITHOUT_CLASSIFICATION	3.490236851835431E-9	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999989438107856	WITHOUT_CLASSIFICATION	1.056189214474898E-6	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999978513025143	WITHOUT_CLASSIFICATION	2.148697485750764E-6	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999868433679	WITHOUT_CLASSIFICATION	1.3156632206443942E-8	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999981397507	WITHOUT_CLASSIFICATION	1.8602492772376791E-9	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999343770957	WITHOUT_CLASSIFICATION	6.562290427314575E-8	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999999909845458	WITHOUT_CLASSIFICATION	9.015454209004361E-8	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999811519051256	WITHOUT_CLASSIFICATION	1.884809487440486E-5	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999896350819417	WITHOUT_CLASSIFICATION	1.0364918058248127E-5	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999996396332057	WITHOUT_CLASSIFICATION	3.603667943695249E-7	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999997411785545	WITHOUT_CLASSIFICATION	2.5882144543791935E-7	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999995009705691	WITHOUT_CLASSIFICATION	4.990294309649867E-7	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999994674360814	WITHOUT_CLASSIFICATION	5.325639186838651E-7	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999997462742	WITHOUT_CLASSIFICATION	2.5372588338190613E-10	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.8013091774872909	WITHOUT_CLASSIFICATION	0.19869082251270911	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.8013091774872909	WITHOUT_CLASSIFICATION	0.19869082251270911	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999775137491151	WITHOUT_CLASSIFICATION	2.2486250884909542E-5	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.8013091774872909	WITHOUT_CLASSIFICATION	0.19869082251270911	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.8013091774872909	WITHOUT_CLASSIFICATION	0.19869082251270911	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.999991932435723	WITHOUT_CLASSIFICATION	8.067564276987575E-6	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999999315228551	WITHOUT_CLASSIFICATION	6.847714490324022E-7	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999998533205761	WITHOUT_CLASSIFICATION	1.4667942396054554E-7	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999952391880982	WITHOUT_CLASSIFICATION	4.760811901913399E-6	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999992954956016	WITHOUT_CLASSIFICATION	7.045043982397524E-7	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.999981208894732	WITHOUT_CLASSIFICATION	1.879110526803406E-5	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.99978538984811	WITHOUT_CLASSIFICATION	2.1461015188988132E-4	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999991935695944	WITHOUT_CLASSIFICATION	8.064304055648967E-7	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999944003651529	WITHOUT_CLASSIFICATION	5.599634847160693E-6	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999930371926747	WITHOUT_CLASSIFICATION	6.962807325243924E-6	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999941696469383	WITHOUT_CLASSIFICATION	5.830353061661817E-6	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999968878975788	WITHOUT_CLASSIFICATION	3.1121024212607833E-6	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.999999716626019	WITHOUT_CLASSIFICATION	2.8337398094966635E-7	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999978505901342	WITHOUT_CLASSIFICATION	2.149409865874691E-6	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999999783665438	WITHOUT_CLASSIFICATION	2.1633456255364326E-8	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.999996201255478	WITHOUT_CLASSIFICATION	3.7987445220115235E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999015095232	WITHOUT_CLASSIFICATION	9.849047678938626E-7	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999986268124219	WITHOUT_CLASSIFICATION	1.3731875781625302E-6	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999908778205097	WITHOUT_CLASSIFICATION	9.122179490384619E-6	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999958406497539	WITHOUT_CLASSIFICATION	4.159350246079677E-6	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999612930875609	WITHOUT_CLASSIFICATION	3.87069124390769E-5	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.9999990154567059	WITHOUT_CLASSIFICATION	9.84543294052428E-7	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999015095232	WITHOUT_CLASSIFICATION	9.849047678938626E-7	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999974044585302	WITHOUT_CLASSIFICATION	2.595541469789966E-6	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.9999726443699017	WITHOUT_CLASSIFICATION	2.7355630098225473E-5	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997409970198	WITHOUT_CLASSIFICATION	2.5900298016492143E-7	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998734470766	WITHOUT_CLASSIFICATION	1.2655292333507755E-7	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.9999971727928616	WITHOUT_CLASSIFICATION	2.8272071384016788E-6	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999787401495445	WITHOUT_CLASSIFICATION	2.1259850455488125E-5	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.9999991990813628	WITHOUT_CLASSIFICATION	8.009186372591267E-7	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.952710485884717	WITHOUT_CLASSIFICATION	0.04728951411528304	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999528833755955	WITHOUT_CLASSIFICATION	4.711662440452145E-5	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999994008249399	WITHOUT_CLASSIFICATION	5.991750600860562E-7	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999805817626557	WITHOUT_CLASSIFICATION	1.94182373443179E-5	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999997902761	WITHOUT_CLASSIFICATION	2.097238086597319E-10	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999999809553153	WITHOUT_CLASSIFICATION	1.9044684698645765E-7	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999990362495083	WITHOUT_CLASSIFICATION	9.637504917349121E-7	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999989627647832	WITHOUT_CLASSIFICATION	1.0372352168542366E-6	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999723820775	WITHOUT_CLASSIFICATION	2.7617922602369103E-8	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999993878645441	WITHOUT_CLASSIFICATION	6.121354558402286E-7	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9989498103589342	WITHOUT_CLASSIFICATION	0.0010501896410658634	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999952614194	WITHOUT_CLASSIFICATION	4.738580613156627E-9	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999951474496491	WITHOUT_CLASSIFICATION	4.852550350892516E-6	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999850605747975	WITHOUT_CLASSIFICATION	1.49394252025025E-5	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999886961374114	WITHOUT_CLASSIFICATION	1.1303862588606468E-5	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999564824416	WITHOUT_CLASSIFICATION	4.35175585554345E-8	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999528833755955	WITHOUT_CLASSIFICATION	4.711662440452145E-5	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999998388065022	WITHOUT_CLASSIFICATION	1.6119349782496169E-7	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.999995985323353	WITHOUT_CLASSIFICATION	4.0146766469987815E-6	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999225571226817	WITHOUT_CLASSIFICATION	7.744287731824263E-5	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999990900683035	WITHOUT_CLASSIFICATION	9.099316965843101E-7	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948972309232	WITHOUT_CLASSIFICATION	5.102769076873045E-6	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.9999979680916669	WITHOUT_CLASSIFICATION	2.031908333159577E-6	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.9999996404368299	WITHOUT_CLASSIFICATION	3.595631701102251E-7	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.9999988599500971	WITHOUT_CLASSIFICATION	1.1400499029304952E-6	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.9999996221525637	WITHOUT_CLASSIFICATION	3.778474363528646E-7	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.9999067303625018	WITHOUT_CLASSIFICATION	9.326963749821316E-5	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999929693686059	WITHOUT_CLASSIFICATION	7.030631394099055E-6	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999997993889268	WITHOUT_CLASSIFICATION	2.0061107313103782E-7	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999726843333309	WITHOUT_CLASSIFICATION	2.7315666669263165E-5	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999985323986	WITHOUT_CLASSIFICATION	1.4676014042674182E-9	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.999999941754884	WITHOUT_CLASSIFICATION	5.8245115998746445E-8	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999999973706228	WITHOUT_CLASSIFICATION	2.6293771318122015E-9	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999115350339	WITHOUT_CLASSIFICATION	8.846496615992378E-8	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999929693686059	WITHOUT_CLASSIFICATION	7.030631394099055E-6	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999992075175	WITHOUT_CLASSIFICATION	7.924825895865042E-10	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999993740967249	WITHOUT_CLASSIFICATION	6.259032751415035E-7	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999995282200814	WITHOUT_CLASSIFICATION	4.7177991847819825E-7	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998532254592726	WITHOUT_CLASSIFICATION	1.4677454072734792E-4	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.9999989589038032	WITHOUT_CLASSIFICATION	1.0410961967601384E-6	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999938601635917	WITHOUT_CLASSIFICATION	6.139836408243095E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.999999941754884	WITHOUT_CLASSIFICATION	5.8245115998746445E-8	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.99999862696099	WITHOUT_CLASSIFICATION	1.3730390100304304E-6	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947219657609	WITHOUT_CLASSIFICATION	5.27803423904686E-6	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998595952872	WITHOUT_CLASSIFICATION	1.4040471279443096E-6	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9894330848989642	WITHOUT_CLASSIFICATION	0.010566915101035853	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9583807991371099	WITHOUT_CLASSIFICATION	0.04161920086289008	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9923619330913631	WITHOUT_CLASSIFICATION	0.0076380669086368695	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995959869431	WITHOUT_CLASSIFICATION	4.0401305698871154E-7	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995959869431	WITHOUT_CLASSIFICATION	4.0401305698871154E-7	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999999925935064	WITHOUT_CLASSIFICATION	7.406493664552373E-9	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999989874185731	WITHOUT_CLASSIFICATION	1.0125814268755759E-6	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.9999996012984602	WITHOUT_CLASSIFICATION	3.9870153984723863E-7	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.9999995196472732	WITHOUT_CLASSIFICATION	4.803527267042565E-7	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999473248152556	WITHOUT_CLASSIFICATION	5.267518474444543E-5	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977531577491	WITHOUT_CLASSIFICATION	2.2468422510148115E-6	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848540124511	WITHOUT_CLASSIFICATION	1.5145987548952607E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999589117880193	WITHOUT_CLASSIFICATION	4.1088211980558605E-5	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999996525708935	WITHOUT_CLASSIFICATION	3.474291064731887E-7	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999903560381	WITHOUT_CLASSIFICATION	9.643961900673027E-7	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977531577491	WITHOUT_CLASSIFICATION	2.2468422510148115E-6	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848540124511	WITHOUT_CLASSIFICATION	1.5145987548952607E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999589117880193	WITHOUT_CLASSIFICATION	4.1088211980558605E-5	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.9999995433485346	WITHOUT_CLASSIFICATION	4.566514654668952E-7	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.9999937832136436	WITHOUT_CLASSIFICATION	6.216786356287023E-6	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999981601215	WITHOUT_CLASSIFICATION	1.8398784812147661E-9	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999998300890711	WITHOUT_CLASSIFICATION	1.69910928870635E-7	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999997382039948	WITHOUT_CLASSIFICATION	2.6179600513262105E-7	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999957356155968	WITHOUT_CLASSIFICATION	4.264384403234872E-6	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999991513173933	WITHOUT_CLASSIFICATION	8.486826068834989E-7	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.9999994559596042	WITHOUT_CLASSIFICATION	5.440403958090748E-7	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9999975538846281	WITHOUT_CLASSIFICATION	2.4461153719525806E-6	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999957507908871	WITHOUT_CLASSIFICATION	4.2492091129590005E-6	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999777067535	WITHOUT_CLASSIFICATION	2.229324645743148E-8	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999997362511752	WITHOUT_CLASSIFICATION	2.637488248037218E-6	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999979505519715	WITHOUT_CLASSIFICATION	2.0494480284817025E-6	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999156245829	WITHOUT_CLASSIFICATION	8.437541702305148E-8	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999990174863038	WITHOUT_CLASSIFICATION	9.825136961749661E-7	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999999455582417	WITHOUT_CLASSIFICATION	5.444175829859119E-8	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999983962123379	WITHOUT_CLASSIFICATION	1.6037876621708996E-6	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999993096583468	WITHOUT_CLASSIFICATION	6.9034165318880605E-6	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999978127640148	WITHOUT_CLASSIFICATION	2.1872359852605033E-6	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999910529917128	WITHOUT_CLASSIFICATION	8.947008287311488E-6	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999986172873	WITHOUT_CLASSIFICATION	1.3827127240831777E-9	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999970851939158	WITHOUT_CLASSIFICATION	2.914806084200768E-5	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999990769692482	WITHOUT_CLASSIFICATION	9.230307517125739E-7	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999313377368874	WITHOUT_CLASSIFICATION	6.866226311266973E-5	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999999984794081	WITHOUT_CLASSIFICATION	1.520591842814208E-9	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998173869485328	WITHOUT_CLASSIFICATION	1.8261305146720504E-4	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992362148848	WITHOUT_CLASSIFICATION	7.63785115131924E-7	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999446365168414	WITHOUT_CLASSIFICATION	5.5363483158523584E-5	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999963404919	WITHOUT_CLASSIFICATION	3.659507980455913E-9	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995776121677	WITHOUT_CLASSIFICATION	4.2238783229169736E-6	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999697608172039	WITHOUT_CLASSIFICATION	3.0239182796080223E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999360357147	WITHOUT_CLASSIFICATION	6.396428530985788E-8	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999360357147	WITHOUT_CLASSIFICATION	6.396428530985788E-8	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999999266468	WITHOUT_CLASSIFICATION	7.33532885889014E-11	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999999817975928	WITHOUT_CLASSIFICATION	1.82024072087441E-8	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9997612802858735	WITHOUT_CLASSIFICATION	2.387197141263732E-4	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999719815100573	WITHOUT_CLASSIFICATION	2.8018489942769083E-5	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9998622751192716	WITHOUT_CLASSIFICATION	1.377248807284672E-4	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999985718027	WITHOUT_CLASSIFICATION	1.428197276343263E-9	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.9999912594485161	WITHOUT_CLASSIFICATION	8.74055148397342E-6	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.9999934240245054	WITHOUT_CLASSIFICATION	6.5759754945698495E-6	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999949851120576	WITHOUT_CLASSIFICATION	5.014887942368084E-6	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997904363794	WITHOUT_CLASSIFICATION	2.095636205957296E-7	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994954148317	WITHOUT_CLASSIFICATION	5.045851683972137E-7	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997348143465	WITHOUT_CLASSIFICATION	2.651856535582947E-7	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990760765887	WITHOUT_CLASSIFICATION	9.239234114055315E-7	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999130056213	WITHOUT_CLASSIFICATION	8.699437864968394E-8	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995115467578	WITHOUT_CLASSIFICATION	4.884532421197394E-7	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999054943206	WITHOUT_CLASSIFICATION	9.45056793803863E-8	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986581770691	WITHOUT_CLASSIFICATION	1.341822930787213E-6	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994826105064	WITHOUT_CLASSIFICATION	5.173894934837158E-7	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976597356751	WITHOUT_CLASSIFICATION	2.340264324852112E-6	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996614255413	WITHOUT_CLASSIFICATION	3.385744586648172E-7	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999841022701899	WITHOUT_CLASSIFICATION	1.5897729810055823E-5	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999893843115256	WITHOUT_CLASSIFICATION	1.0615688474441444E-5	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999998489415884	WITHOUT_CLASSIFICATION	1.5105841154737126E-7	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999756583442	WITHOUT_CLASSIFICATION	2.4341655821384075E-8	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999660565531	WITHOUT_CLASSIFICATION	3.39434469341286E-8	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.9991948948298567	WITHOUT_CLASSIFICATION	8.051051701433514E-4	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999997566675057	WITHOUT_CLASSIFICATION	2.4333249421391424E-7	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9998339014945545	WITHOUT_CLASSIFICATION	1.6609850544550386E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999998489415884	WITHOUT_CLASSIFICATION	1.5105841154737126E-7	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999998489415884	WITHOUT_CLASSIFICATION	1.5105841154737126E-7	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999025257426353	WITHOUT_CLASSIFICATION	9.747425736482774E-5	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999991763121681	WITHOUT_CLASSIFICATION	8.23687831909194E-7	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999565012451	WITHOUT_CLASSIFICATION	4.3498755002600956E-8	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999992160394739	WITHOUT_CLASSIFICATION	7.83960526099718E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.999982206177568	WITHOUT_CLASSIFICATION	1.779382243214822E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999910529917128	WITHOUT_CLASSIFICATION	8.947008287311488E-6	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999996921044815	WITHOUT_CLASSIFICATION	3.078955185046459E-7	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999932966367671	WITHOUT_CLASSIFICATION	6.703363233030609E-6	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999999676368987	WITHOUT_CLASSIFICATION	3.236310134942671E-8	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998775013394661	WITHOUT_CLASSIFICATION	1.2249866053396318E-4	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9997960691620681	WITHOUT_CLASSIFICATION	2.0393083793201884E-4	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944374296965	WITHOUT_CLASSIFICATION	5.562570303545048E-6	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999966547149061	WITHOUT_CLASSIFICATION	3.3452850939400084E-6	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999966547149061	WITHOUT_CLASSIFICATION	3.3452850939400084E-6	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999995929199308	WITHOUT_CLASSIFICATION	4.070800692128663E-7	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999995929199308	WITHOUT_CLASSIFICATION	4.070800692128663E-7	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992427061454329	WITHOUT_CLASSIFICATION	7.572938545672515E-4	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996766575061	WITHOUT_CLASSIFICATION	3.233424938379016E-7	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999907629309	WITHOUT_CLASSIFICATION	9.237069038533508E-9	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997314923982632	WITHOUT_CLASSIFICATION	2.6850760173675355E-4	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9991698958796529	WITHOUT_CLASSIFICATION	8.301041203471936E-4	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999953980942883	WITHOUT_CLASSIFICATION	4.601905711804659E-6	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999904517159981	WITHOUT_CLASSIFICATION	9.548284001862598E-6	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991649174237	WITHOUT_CLASSIFICATION	8.350825763683113E-7	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999999600229725	WITHOUT_CLASSIFICATION	3.9977027519595156E-8	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9999999817323277	WITHOUT_CLASSIFICATION	1.8267672249564632E-8	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999995039663	WITHOUT_CLASSIFICATION	4.960336934961169E-9	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999942824591888	WITHOUT_CLASSIFICATION	5.71754081120836E-6	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999921477519521	WITHOUT_CLASSIFICATION	7.85224804793522E-6	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999576344404512	WITHOUT_CLASSIFICATION	4.2365559548860464E-5	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999998718276525	WITHOUT_CLASSIFICATION	1.2817234748270645E-7	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999912785615271	WITHOUT_CLASSIFICATION	8.721438472854382E-6	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999912785615271	WITHOUT_CLASSIFICATION	8.721438472854382E-6	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999912785615271	WITHOUT_CLASSIFICATION	8.721438472854382E-6	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999907387667604	WITHOUT_CLASSIFICATION	9.261233239677667E-6	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.9999992299280904	WITHOUT_CLASSIFICATION	7.700719095425468E-7	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999999256302	WITHOUT_CLASSIFICATION	7.436984436403283E-11	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999878414706733	WITHOUT_CLASSIFICATION	1.2158529326768382E-5	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999426852973191	WITHOUT_CLASSIFICATION	5.7314702680926135E-5	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998239032697764	WITHOUT_CLASSIFICATION	1.7609673022352527E-4	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999991903158547	WITHOUT_CLASSIFICATION	8.096841454013894E-7	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9861731647155637	WITHOUT_CLASSIFICATION	0.01382683528443632	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9454470118464471	WITHOUT_CLASSIFICATION	0.05455298815355293	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999955668693173	WITHOUT_CLASSIFICATION	4.433130682641146E-6	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.999999960464288	WITHOUT_CLASSIFICATION	3.95357121602458E-8	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999776709520517	WITHOUT_CLASSIFICATION	2.2329047948315968E-5	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985359382177	WITHOUT_CLASSIFICATION	1.4640617822504843E-6	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999761061257	WITHOUT_CLASSIFICATION	2.3893874307366503E-8	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9988785969861159	WITHOUT_CLASSIFICATION	0.0011214030138841542	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999999931528395	WITHOUT_CLASSIFICATION	6.847160592250151E-9	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999917229533	WITHOUT_CLASSIFICATION	8.277046705649297E-8	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999967571101777	WITHOUT_CLASSIFICATION	3.2428898223659966E-6	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999965562518852	WITHOUT_CLASSIFICATION	3.443748114739972E-6	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999994798129697	WITHOUT_CLASSIFICATION	5.20187030338426E-7	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999999607486	WITHOUT_CLASSIFICATION	3.9251429980597127E-11	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999854480708	WITHOUT_CLASSIFICATION	1.4551929278730788E-8	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999995315160776	WITHOUT_CLASSIFICATION	4.6848392243441134E-7	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999926355388	WITHOUT_CLASSIFICATION	7.364461121350387E-9	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999929984627541	WITHOUT_CLASSIFICATION	7.0015372459269676E-6	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999975761181472	WITHOUT_CLASSIFICATION	2.423881852749817E-6	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999998084638233	WITHOUT_CLASSIFICATION	1.9153617670960178E-7	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.9999993902494321	WITHOUT_CLASSIFICATION	6.097505680519258E-7	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999999722374	WITHOUT_CLASSIFICATION	2.7762535270162625E-11	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999986479273029	WITHOUT_CLASSIFICATION	1.3520726970572341E-6	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999999943647	WITHOUT_CLASSIFICATION	5.635224403823359E-12	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999997703632045	WITHOUT_CLASSIFICATION	2.2963679543481757E-7	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999996150877634	WITHOUT_CLASSIFICATION	3.849122366426738E-7	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9975953199690901	WITHOUT_CLASSIFICATION	0.002404680030909795	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999999661780457	WITHOUT_CLASSIFICATION	3.382195424977205E-8	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999999467412367	WITHOUT_CLASSIFICATION	5.3258763315488354E-8	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998435234444	WITHOUT_CLASSIFICATION	1.5647655559389297E-7	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.9999743105616988	WITHOUT_CLASSIFICATION	2.568943830114467E-5	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999997650797297	WITHOUT_CLASSIFICATION	2.3492027034894175E-7	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.9999905079690865	WITHOUT_CLASSIFICATION	9.49203091352393E-6	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999946760816	WITHOUT_CLASSIFICATION	5.323918485681085E-9	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999971189402508	WITHOUT_CLASSIFICATION	2.8810597492792996E-6	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9343215335084336	WITHOUT_CLASSIFICATION	0.06567846649156643	IMPLEMENTATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999997115069965	WITHOUT_CLASSIFICATION	2.8849300349997195E-6	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999960175788	WITHOUT_CLASSIFICATION	3.982421242679074E-9	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999997220776176	WITHOUT_CLASSIFICATION	2.779223824302296E-7	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.9999999580282715	WITHOUT_CLASSIFICATION	4.19717285068166E-8	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.999999829946306	WITHOUT_CLASSIFICATION	1.700536939766442E-7	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999861663886451	WITHOUT_CLASSIFICATION	1.3833611354926515E-5	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999998465237465	WITHOUT_CLASSIFICATION	1.5347625352413733E-7	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999988192833645	WITHOUT_CLASSIFICATION	1.1807166354986693E-6	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999138087518107	WITHOUT_CLASSIFICATION	8.619124818937534E-5	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998176445354457	WITHOUT_CLASSIFICATION	1.8235546455437827E-4	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999904322273829	WITHOUT_CLASSIFICATION	9.567772617059792E-6	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999538512972164	WITHOUT_CLASSIFICATION	4.614870278371505E-5	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.999991672959945	WITHOUT_CLASSIFICATION	8.327040055096933E-6	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998070604577861	WITHOUT_CLASSIFICATION	1.9293954221386727E-4	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.9999996659874119	WITHOUT_CLASSIFICATION	3.340125881707969E-7	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999692211217	WITHOUT_CLASSIFICATION	3.077887831737078E-8	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999407850559845	WITHOUT_CLASSIFICATION	5.921494401551361E-5	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999999621687578	WITHOUT_CLASSIFICATION	3.7831242252071884E-8	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999881364491	WITHOUT_CLASSIFICATION	1.1863550965553563E-8	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999994784021	WITHOUT_CLASSIFICATION	5.215979492746686E-10	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999999919115407	WITHOUT_CLASSIFICATION	8.088459401525763E-9	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999791594549	WITHOUT_CLASSIFICATION	2.0840545062047005E-8	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999665486282	WITHOUT_CLASSIFICATION	3.34513717270093E-8	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999922809605	WITHOUT_CLASSIFICATION	7.719039494777222E-9	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999999182586639	WITHOUT_CLASSIFICATION	8.174133604244693E-8	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999863656618246	WITHOUT_CLASSIFICATION	1.3634338175319679E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999863656618246	WITHOUT_CLASSIFICATION	1.3634338175319679E-5	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999999199478663	WITHOUT_CLASSIFICATION	8.00521336696359E-8	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999999320998588	WITHOUT_CLASSIFICATION	6.790014121053126E-8	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999996473419174	WITHOUT_CLASSIFICATION	3.526580826058022E-7	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999989888241906	WITHOUT_CLASSIFICATION	1.0111758093946576E-6	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999995593592729	WITHOUT_CLASSIFICATION	4.4064072701535517E-7	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999344798318435	WITHOUT_CLASSIFICATION	6.55201681565697E-5	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999686561423	WITHOUT_CLASSIFICATION	3.1343857728731214E-8	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999546275685	WITHOUT_CLASSIFICATION	4.5372431437634196E-8	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999969572185895	WITHOUT_CLASSIFICATION	3.042781410470158E-6	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999999949435914	WITHOUT_CLASSIFICATION	5.056408672324088E-9	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999991754876894	WITHOUT_CLASSIFICATION	8.245123107113745E-7	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999996973556954	WITHOUT_CLASSIFICATION	3.026443046300297E-7	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.9999999435987668	WITHOUT_CLASSIFICATION	5.6401233158775216E-8	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999939190428	WITHOUT_CLASSIFICATION	6.0809571024215964E-9	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999996880189282	WITHOUT_CLASSIFICATION	3.1198107181400114E-7	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9878662622239558	WITHOUT_CLASSIFICATION	0.012133737776044153	IMPLEMENTATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999990298650956	WITHOUT_CLASSIFICATION	9.70134904460404E-7	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9941914213713682	WITHOUT_CLASSIFICATION	0.005808578628631879	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9137619906785661	WITHOUT_CLASSIFICATION	0.08623800932143383	IMPLEMENTATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999958243728914	WITHOUT_CLASSIFICATION	4.175627108676109E-6	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9999992533546171	WITHOUT_CLASSIFICATION	7.466453828450789E-7	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999997083790048	WITHOUT_CLASSIFICATION	2.9162099522772647E-7	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999988508284068	WITHOUT_CLASSIFICATION	1.1491715931184295E-6	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9984128305338692	WITHOUT_CLASSIFICATION	0.0015871694661306955	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999998602669751	WITHOUT_CLASSIFICATION	1.3973302498248456E-7	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.9999961472961381	WITHOUT_CLASSIFICATION	3.852703861950482E-6	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999906606346666	WITHOUT_CLASSIFICATION	9.339365333391502E-6	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999999893956938	WITHOUT_CLASSIFICATION	1.0604306163610768E-8	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999979660157654	WITHOUT_CLASSIFICATION	2.0339842345957324E-6	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999963155961424	WITHOUT_CLASSIFICATION	3.6844038575050643E-6	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999996953402174	WITHOUT_CLASSIFICATION	3.046597825555985E-7	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999962481185599	WITHOUT_CLASSIFICATION	3.751881440056513E-6	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.9999996986480428	WITHOUT_CLASSIFICATION	3.013519571717453E-7	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.9999970099744334	WITHOUT_CLASSIFICATION	2.9900255666557106E-6	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999342801103357	WITHOUT_CLASSIFICATION	6.571988966428862E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999342801103357	WITHOUT_CLASSIFICATION	6.571988966428862E-4	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999984674238647	WITHOUT_CLASSIFICATION	1.532576135377341E-6	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999770305723735	WITHOUT_CLASSIFICATION	2.2969427626502974E-5	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999999884689141	WITHOUT_CLASSIFICATION	1.1531085865424858E-8	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999614911526474	WITHOUT_CLASSIFICATION	3.850884735266194E-5	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999999930764638	WITHOUT_CLASSIFICATION	6.923536192666654E-9	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999999748814363	WITHOUT_CLASSIFICATION	2.5118563645286426E-8	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999993842467249	WITHOUT_CLASSIFICATION	6.15753275265913E-7	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999986019960101	WITHOUT_CLASSIFICATION	1.3980039899781248E-6	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999998322218066	WITHOUT_CLASSIFICATION	1.6777819345490574E-7	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.99999691394834	WITHOUT_CLASSIFICATION	3.086051659986202E-6	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999763371502	WITHOUT_CLASSIFICATION	2.3662849758394797E-8	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999930756843937	WITHOUT_CLASSIFICATION	6.9243156062824635E-6	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999277082734792	WITHOUT_CLASSIFICATION	7.229172652070418E-5	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999947874219	WITHOUT_CLASSIFICATION	5.212578131207267E-9	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999376297253847	WITHOUT_CLASSIFICATION	6.237027461529636E-5	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999987727294865	WITHOUT_CLASSIFICATION	1.2272705135454492E-6	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9937926680766781	WITHOUT_CLASSIFICATION	0.006207331923321878	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9937926680766781	WITHOUT_CLASSIFICATION	0.006207331923321878	IMPLEMENTATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999999260535561	WITHOUT_CLASSIFICATION	7.39464437778368E-8	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999996569947381	WITHOUT_CLASSIFICATION	3.43005261890258E-7	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999983907042029	WITHOUT_CLASSIFICATION	1.6092957970985478E-5	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998614921174	WITHOUT_CLASSIFICATION	1.3850788259595087E-7	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999079831433	WITHOUT_CLASSIFICATION	9.201685671464863E-7	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999942824591888	WITHOUT_CLASSIFICATION	5.71754081120836E-6	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999898350193797	WITHOUT_CLASSIFICATION	1.016498062029118E-4	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999542531244	WITHOUT_CLASSIFICATION	4.574687572984065E-8	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999102767018	WITHOUT_CLASSIFICATION	8.972329824715315E-8	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999779785793	WITHOUT_CLASSIFICATION	2.2021420694215204E-8	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.99999949775792	WITHOUT_CLASSIFICATION	5.022420799678879E-7	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.99999949775792	WITHOUT_CLASSIFICATION	5.022420799678879E-7	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999782719260246	WITHOUT_CLASSIFICATION	2.1728073975334402E-5	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999998301304661	WITHOUT_CLASSIFICATION	1.6986953393263253E-7	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999968499807229	WITHOUT_CLASSIFICATION	3.15001927703268E-6	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999992082918104	WITHOUT_CLASSIFICATION	7.917081894556431E-7	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999976695749102	WITHOUT_CLASSIFICATION	2.3304250898924094E-6	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.99999999800626	WITHOUT_CLASSIFICATION	1.9937399173039924E-9	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999991088148409	WITHOUT_CLASSIFICATION	8.91185159035893E-7	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999768223557655	WITHOUT_CLASSIFICATION	2.3177644234531036E-5	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.999975414817	WITHOUT_CLASSIFICATION	2.4585182999964208E-5	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999690215172161	WITHOUT_CLASSIFICATION	3.097848278390996E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999976048886112	WITHOUT_CLASSIFICATION	2.3951113887775135E-6	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999932808700325	WITHOUT_CLASSIFICATION	6.719129967516638E-6	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9997295474760877	WITHOUT_CLASSIFICATION	2.7045252391234826E-4	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999956468474551	WITHOUT_CLASSIFICATION	4.353152544863367E-6	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999994071861769	WITHOUT_CLASSIFICATION	5.928138231308717E-7	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999994459224583	WITHOUT_CLASSIFICATION	5.540775417495422E-7	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999999029057068	WITHOUT_CLASSIFICATION	9.709429317304776E-8	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999975141747	WITHOUT_CLASSIFICATION	2.4858252150281103E-9	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999993142231	WITHOUT_CLASSIFICATION	6.85776907734282E-10	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.9999988486447858	WITHOUT_CLASSIFICATION	1.151355214096232E-6	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999957853098892	WITHOUT_CLASSIFICATION	4.214690110806605E-6	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997683447808532	WITHOUT_CLASSIFICATION	2.3165521914689813E-4	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999994670729371	WITHOUT_CLASSIFICATION	5.329270629684742E-7	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999977879697887	WITHOUT_CLASSIFICATION	2.2120302113954426E-6	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999996123966729	WITHOUT_CLASSIFICATION	3.876033271190999E-7	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999990290194162	WITHOUT_CLASSIFICATION	9.70980583837967E-7	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999988493452764	WITHOUT_CLASSIFICATION	1.150654723553603E-6	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9998628752375691	WITHOUT_CLASSIFICATION	1.3712476243077102E-4	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9941246201395587	WITHOUT_CLASSIFICATION	0.005875379860441355	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999992766531383	WITHOUT_CLASSIFICATION	7.2334686170615304E-6	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9995763086895357	WITHOUT_CLASSIFICATION	4.2369131046423095E-4	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999656249072	WITHOUT_CLASSIFICATION	3.437509278166286E-8	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999459851737776	WITHOUT_CLASSIFICATION	5.4014826222362094E-5	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9999999882582769	WITHOUT_CLASSIFICATION	1.1741723193018696E-8	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999995115492085	WITHOUT_CLASSIFICATION	4.884507914391717E-7	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999995725221376	WITHOUT_CLASSIFICATION	4.274778623981759E-7	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.99999561296629	WITHOUT_CLASSIFICATION	4.38703370994042E-6	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999991379966867	WITHOUT_CLASSIFICATION	8.620033132185068E-7	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999999328357856	WITHOUT_CLASSIFICATION	6.716421436765342E-8	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999999328357856	WITHOUT_CLASSIFICATION	6.716421436765342E-8	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999361777834	WITHOUT_CLASSIFICATION	6.382221661621858E-8	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999035782958	WITHOUT_CLASSIFICATION	9.64217041368739E-8	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999997071841858	WITHOUT_CLASSIFICATION	2.9281581413600523E-7	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.9999893223126874	WITHOUT_CLASSIFICATION	1.0677687312486364E-5	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999970021925634	WITHOUT_CLASSIFICATION	2.9978074365578523E-6	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999999986469	WITHOUT_CLASSIFICATION	1.353219151691086E-12	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999618706	WITHOUT_CLASSIFICATION	3.8129424023168016E-11	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999934293105879	WITHOUT_CLASSIFICATION	6.570689412125949E-6	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999361777834	WITHOUT_CLASSIFICATION	6.382221661621858E-8	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999035782958	WITHOUT_CLASSIFICATION	9.64217041368739E-8	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999985858792272	WITHOUT_CLASSIFICATION	1.4141207727699596E-6	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999265731129477	WITHOUT_CLASSIFICATION	7.342688705224161E-5	IMPLEMENTATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999769528075	WITHOUT_CLASSIFICATION	2.3047192541177962E-8	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9994535376607612	WITHOUT_CLASSIFICATION	5.464623392387843E-4	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999997805962755	WITHOUT_CLASSIFICATION	2.1940372440427938E-7	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999997113326481	WITHOUT_CLASSIFICATION	2.886673518583606E-7	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999986376314963	WITHOUT_CLASSIFICATION	1.3623685036431856E-6	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999669664480352	WITHOUT_CLASSIFICATION	3.303355196487332E-5	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999901725948608	WITHOUT_CLASSIFICATION	9.827405139199111E-6	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8801746716027331	IMPLEMENTATION	0.11982532839726684	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999999670643	WITHOUT_CLASSIFICATION	3.293565096555283E-11	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8801746716027331	IMPLEMENTATION	0.11982532839726684	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999983768416543	WITHOUT_CLASSIFICATION	1.6231583456566104E-6	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999994867254354	WITHOUT_CLASSIFICATION	5.13274564636723E-7	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999995329416427	WITHOUT_CLASSIFICATION	4.6705835736295825E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987739076873	WITHOUT_CLASSIFICATION	1.226092312684131E-6	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999997913724983	WITHOUT_CLASSIFICATION	2.0862750168903157E-6	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999669664480352	WITHOUT_CLASSIFICATION	3.303355196487332E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999669664480352	WITHOUT_CLASSIFICATION	3.303355196487332E-5	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999999270225438	WITHOUT_CLASSIFICATION	7.297745621284431E-8	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999999542273051	WITHOUT_CLASSIFICATION	4.5772694834502846E-8	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999989058672019	WITHOUT_CLASSIFICATION	1.0941327981443393E-6	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999994305832223	WITHOUT_CLASSIFICATION	5.694167777657604E-7	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999990861486701	WITHOUT_CLASSIFICATION	9.13851330010493E-7	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999999553173232	WITHOUT_CLASSIFICATION	4.468267683569495E-8	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.999164727358043	WITHOUT_CLASSIFICATION	8.352726419570338E-4	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.999999765298543	WITHOUT_CLASSIFICATION	2.3470145694579685E-7	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999999854819026	WITHOUT_CLASSIFICATION	1.4518097377750168E-8	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999793876885428	WITHOUT_CLASSIFICATION	2.0612311457216685E-5	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.9999980288288074	WITHOUT_CLASSIFICATION	1.971171192565032E-6	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.9999999268631512	WITHOUT_CLASSIFICATION	7.313684885471316E-8	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.999996881637429	WITHOUT_CLASSIFICATION	3.1183625709952985E-6	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.9999818303712249	WITHOUT_CLASSIFICATION	1.8169628775076244E-5	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9999998465244327	WITHOUT_CLASSIFICATION	1.5347556719294226E-7	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999831165793213	WITHOUT_CLASSIFICATION	1.688342067877527E-5	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999968684385334	WITHOUT_CLASSIFICATION	3.1315614666279953E-6	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999938118232243	WITHOUT_CLASSIFICATION	6.188176775575196E-6	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999976433760595	WITHOUT_CLASSIFICATION	2.3566239405087406E-5	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999905155336	WITHOUT_CLASSIFICATION	9.48446654463317E-9	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9999952822605561	WITHOUT_CLASSIFICATION	4.717739443864782E-6	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999328604191039	WITHOUT_CLASSIFICATION	6.713958089613878E-5	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999737034816436	WITHOUT_CLASSIFICATION	2.6296518356512187E-5	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9992458899397599	WITHOUT_CLASSIFICATION	7.541100602401547E-4	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999820627152445	WITHOUT_CLASSIFICATION	1.7937284755541146E-5	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999767925926848	WITHOUT_CLASSIFICATION	2.3207407315204714E-5	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999995804162021	WITHOUT_CLASSIFICATION	4.195837979398847E-7	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999992455715511	WITHOUT_CLASSIFICATION	7.54428448948202E-7	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9929952926005615	WITHOUT_CLASSIFICATION	0.007004707399438464	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.997896771400062	WITHOUT_CLASSIFICATION	0.002103228599937957	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9959968577631312	WITHOUT_CLASSIFICATION	0.004003142236868848	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9555337048578579	WITHOUT_CLASSIFICATION	0.044466295142141996	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9997771481015711	WITHOUT_CLASSIFICATION	2.2285189842878743E-4	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.999999765298543	WITHOUT_CLASSIFICATION	2.3470145694579685E-7	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999947557414964	WITHOUT_CLASSIFICATION	5.244258503554116E-6	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.9999781285514169	WITHOUT_CLASSIFICATION	2.187144858315661E-5	IMPLEMENTATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9274275537487061	WITHOUT_CLASSIFICATION	0.07257244625129396	IMPLEMENTATION
an assertion	WITHOUT_CLASSIFICATION	0.9999999150354716	WITHOUT_CLASSIFICATION	8.496452846204894E-8	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9998789188410147	WITHOUT_CLASSIFICATION	1.2108115898529608E-4	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.9999981696200514	WITHOUT_CLASSIFICATION	1.8303799485915877E-6	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999994305832223	WITHOUT_CLASSIFICATION	5.694167777657604E-7	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999994305832223	WITHOUT_CLASSIFICATION	5.694167777657604E-7	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999677988264889	WITHOUT_CLASSIFICATION	3.2201173511114275E-5	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999964006851821	WITHOUT_CLASSIFICATION	3.599314817878743E-6	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.9999995449796164	WITHOUT_CLASSIFICATION	4.550203836718196E-7	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999829696537301	WITHOUT_CLASSIFICATION	1.7030346269908164E-5	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999723617585367	WITHOUT_CLASSIFICATION	2.7638241463421806E-5	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999986697416295	WITHOUT_CLASSIFICATION	1.330258370433637E-6	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999994893387186	WITHOUT_CLASSIFICATION	5.106612814484423E-7	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999636182747	WITHOUT_CLASSIFICATION	3.638172532876956E-8	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999999772414755	WITHOUT_CLASSIFICATION	2.275852454618628E-8	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999838052439529	WITHOUT_CLASSIFICATION	1.619475604714631E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999611421463	WITHOUT_CLASSIFICATION	3.885785379031326E-8	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999965022583039	WITHOUT_CLASSIFICATION	3.497741696127641E-6	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999852106128068	WITHOUT_CLASSIFICATION	1.4789387193183782E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999361777834	WITHOUT_CLASSIFICATION	6.382221661621858E-8	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999611421463	WITHOUT_CLASSIFICATION	3.885785379031326E-8	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999996598169806	WITHOUT_CLASSIFICATION	3.401830194510016E-7	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9998625346804488	WITHOUT_CLASSIFICATION	1.3746531955125343E-4	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999996823462304	WITHOUT_CLASSIFICATION	3.1765376957891727E-7	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.9503410143766037	IMPLEMENTATION	0.04965898562339644	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999852106128068	WITHOUT_CLASSIFICATION	1.4789387193183782E-5	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999992951697162	WITHOUT_CLASSIFICATION	7.048302837384115E-7	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999994574604998	WITHOUT_CLASSIFICATION	5.425395001438314E-7	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999987101550409	WITHOUT_CLASSIFICATION	1.2898449589963244E-6	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999999996784	WITHOUT_CLASSIFICATION	3.216153352389279E-13	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999879345102869	WITHOUT_CLASSIFICATION	1.2065489713238967E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999997493327154	WITHOUT_CLASSIFICATION	2.5066728465377306E-7	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999592642315	WITHOUT_CLASSIFICATION	4.073576863307175E-8	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999941978972857	WITHOUT_CLASSIFICATION	5.80210271428498E-6	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999734537499495	WITHOUT_CLASSIFICATION	2.6546250050449062E-5	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999979503973069	WITHOUT_CLASSIFICATION	2.0496026930896688E-6	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999996664512298	WITHOUT_CLASSIFICATION	3.335487701337659E-7	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.999976045243076	WITHOUT_CLASSIFICATION	2.3954756924008675E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999611421463	WITHOUT_CLASSIFICATION	3.885785379031326E-8	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999992951697162	WITHOUT_CLASSIFICATION	7.048302837384115E-7	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999987101550409	WITHOUT_CLASSIFICATION	1.2898449589963244E-6	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999996892723992	WITHOUT_CLASSIFICATION	3.107276007337157E-7	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999997149397407	WITHOUT_CLASSIFICATION	2.850602592909766E-7	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.9999999491078975	WITHOUT_CLASSIFICATION	5.0892102537451335E-8	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999852106128068	WITHOUT_CLASSIFICATION	1.4789387193183782E-5	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.999999056019988	WITHOUT_CLASSIFICATION	9.439800119786068E-7	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999959292161226	WITHOUT_CLASSIFICATION	4.070783877462263E-6	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999702424570037	WITHOUT_CLASSIFICATION	2.9757542996389785E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999895691998587	WITHOUT_CLASSIFICATION	1.0430800141293932E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999941978972857	WITHOUT_CLASSIFICATION	5.80210271428498E-6	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999996598169806	WITHOUT_CLASSIFICATION	3.401830194510016E-7	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.9999719523241483	WITHOUT_CLASSIFICATION	2.804767585179427E-5	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999993928847791	WITHOUT_CLASSIFICATION	6.071152209133528E-7	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999998341030766	WITHOUT_CLASSIFICATION	1.6589692339028004E-7	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.999991419611026	WITHOUT_CLASSIFICATION	8.58038897390963E-6	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9857626551051097	WITHOUT_CLASSIFICATION	0.014237344894890215	IMPLEMENTATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9996325372979601	WITHOUT_CLASSIFICATION	3.674627020399436E-4	IMPLEMENTATION
render the SQL	WITHOUT_CLASSIFICATION	0.999994500405466	WITHOUT_CLASSIFICATION	5.499594533889801E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987739076873	WITHOUT_CLASSIFICATION	1.226092312684131E-6	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999361826437	WITHOUT_CLASSIFICATION	6.381735627895994E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999772169935077	WITHOUT_CLASSIFICATION	2.2783006492288238E-4	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999844627391	WITHOUT_CLASSIFICATION	1.5537260931276904E-8	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999999885534868	WITHOUT_CLASSIFICATION	1.144651321316558E-7	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999803502146	WITHOUT_CLASSIFICATION	1.9649785326650274E-8	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999802592806	WITHOUT_CLASSIFICATION	1.974071944103795E-8	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999743862054	WITHOUT_CLASSIFICATION	2.5613794627725987E-8	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.9999996460559647	WITHOUT_CLASSIFICATION	3.5394403531526665E-7	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999999678394945	WITHOUT_CLASSIFICATION	3.2160505505119826E-7	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999895691998587	WITHOUT_CLASSIFICATION	1.0430800141293932E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999772169935077	WITHOUT_CLASSIFICATION	2.2783006492288238E-4	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999477656618443	WITHOUT_CLASSIFICATION	5.2234338155855444E-5	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.9999899449869472	WITHOUT_CLASSIFICATION	1.005501305278214E-5	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999947401479478	WITHOUT_CLASSIFICATION	5.259852052204716E-6	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999878472979044	WITHOUT_CLASSIFICATION	1.2152702095696871E-5	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.9999994532002071	WITHOUT_CLASSIFICATION	5.467997927821833E-7	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999974942333081	WITHOUT_CLASSIFICATION	2.5057666920135484E-6	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.999999030582314	WITHOUT_CLASSIFICATION	9.694176860181947E-7	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.9976417865730578	WITHOUT_CLASSIFICATION	0.002358213426942263	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999999952616393	WITHOUT_CLASSIFICATION	4.7383607146555526E-8	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9997248866962881	WITHOUT_CLASSIFICATION	2.751133037118491E-4	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999999170058571	WITHOUT_CLASSIFICATION	8.299414297978369E-8	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999835132553	WITHOUT_CLASSIFICATION	1.648674472415313E-8	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999465446920129	WITHOUT_CLASSIFICATION	5.345530798714583E-5	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.9999993043017508	WITHOUT_CLASSIFICATION	6.956982490937709E-7	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999694311361	WITHOUT_CLASSIFICATION	3.0568863862314586E-8	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999644506199	WITHOUT_CLASSIFICATION	3.554938017479033E-8	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999997787290445	WITHOUT_CLASSIFICATION	2.2127095549927626E-6	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999361971613	WITHOUT_CLASSIFICATION	6.380283865883566E-8	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999998824381245	WITHOUT_CLASSIFICATION	1.1756187550167507E-6	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999998955680018	WITHOUT_CLASSIFICATION	1.0443199820646101E-7	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.9999808229809818	WITHOUT_CLASSIFICATION	1.917701901825473E-5	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999999342388884	WITHOUT_CLASSIFICATION	6.576111159213795E-7	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999998485227632	WITHOUT_CLASSIFICATION	1.5147723686610176E-7	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999979913275	WITHOUT_CLASSIFICATION	2.0086725202298097E-9	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999998861416646	WITHOUT_CLASSIFICATION	1.1385833538603992E-7	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8293009791560788	WITHOUT_CLASSIFICATION	0.1706990208439211	IMPLEMENTATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9998981527118435	WITHOUT_CLASSIFICATION	1.0184728815660488E-4	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999982126626749	WITHOUT_CLASSIFICATION	1.787337325182207E-6	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999968234844899	WITHOUT_CLASSIFICATION	3.1765155101790265E-6	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.7580021511299342	IMPLEMENTATION	0.24199784887006573	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999699869466	WITHOUT_CLASSIFICATION	3.001305328810032E-8	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999874079586624	WITHOUT_CLASSIFICATION	1.259204133758831E-4	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999998244651882	WITHOUT_CLASSIFICATION	1.755348118344714E-7	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999050950040995	WITHOUT_CLASSIFICATION	9.490499590039771E-5	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999904457625	WITHOUT_CLASSIFICATION	9.554237440241753E-9	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9999971128550377	WITHOUT_CLASSIFICATION	2.8871449622480592E-6	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.999999987052882	WITHOUT_CLASSIFICATION	1.2947118175499358E-8	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999649237644468	WITHOUT_CLASSIFICATION	3.5076235553171065E-5	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9999971128550377	WITHOUT_CLASSIFICATION	2.8871449622480592E-6	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999904457625	WITHOUT_CLASSIFICATION	9.554237440241753E-9	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.999999987052882	WITHOUT_CLASSIFICATION	1.2947118175499358E-8	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.99999796493936	WITHOUT_CLASSIFICATION	2.0350606399589305E-6	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999989857632438	WITHOUT_CLASSIFICATION	1.0142367561660116E-6	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999341161548	WITHOUT_CLASSIFICATION	6.588384516198126E-8	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999989214695731	WITHOUT_CLASSIFICATION	1.078530426881261E-6	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999999995615885	WITHOUT_CLASSIFICATION	4.38411498233307E-9	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.6148835796089213	WITHOUT_CLASSIFICATION	0.38511642039107863	IMPLEMENTATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999844929653058	WITHOUT_CLASSIFICATION	1.5507034694253657E-5	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9997213243172727	WITHOUT_CLASSIFICATION	2.786756827273183E-4	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999953302484759	WITHOUT_CLASSIFICATION	4.669751524136105E-6	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999984282139942	WITHOUT_CLASSIFICATION	1.571786005856038E-6	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.9999991623005239	WITHOUT_CLASSIFICATION	8.376994761542003E-7	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999989028442023	WITHOUT_CLASSIFICATION	1.0971557976502783E-6	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9993994075056327	WITHOUT_CLASSIFICATION	6.005924943672988E-4	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999989214695731	WITHOUT_CLASSIFICATION	1.078530426881261E-6	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9993076167006695	WITHOUT_CLASSIFICATION	6.923832993305476E-4	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999640658117	WITHOUT_CLASSIFICATION	3.593418831446535E-8	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999995242543	WITHOUT_CLASSIFICATION	4.757456575425961E-10	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999997539148966	WITHOUT_CLASSIFICATION	2.460851034427665E-7	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999995651151459	WITHOUT_CLASSIFICATION	4.34884854085913E-7	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999553510961	WITHOUT_CLASSIFICATION	4.464890385103536E-8	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9931136711710875	WITHOUT_CLASSIFICATION	0.006886328828912597	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999979502014	WITHOUT_CLASSIFICATION	2.04979863770992E-9	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999969104888706	WITHOUT_CLASSIFICATION	3.0895111294556197E-6	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999951972157678	WITHOUT_CLASSIFICATION	4.802784232295526E-6	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999916724386	WITHOUT_CLASSIFICATION	8.32756145628119E-9	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999916724386	WITHOUT_CLASSIFICATION	8.32756145628119E-9	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999994910802	WITHOUT_CLASSIFICATION	5.089197247551232E-10	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999994910802	WITHOUT_CLASSIFICATION	5.089197247551232E-10	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.9908858882733708	WITHOUT_CLASSIFICATION	0.00911411172662924	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999995242543	WITHOUT_CLASSIFICATION	4.757456575425961E-10	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999960328079472	WITHOUT_CLASSIFICATION	3.967192052793639E-6	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999920156159184	WITHOUT_CLASSIFICATION	7.984384081667585E-6	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999995936704645	WITHOUT_CLASSIFICATION	4.063295354512847E-7	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999995936704645	WITHOUT_CLASSIFICATION	4.063295354512847E-7	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999996969938006	WITHOUT_CLASSIFICATION	3.030061993357761E-7	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999996870583398	WITHOUT_CLASSIFICATION	3.1294166020226204E-6	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999287818286	WITHOUT_CLASSIFICATION	7.121817141080543E-8	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.9999978498779893	WITHOUT_CLASSIFICATION	2.1501220106311623E-6	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999681020497448	WITHOUT_CLASSIFICATION	3.1897950255044224E-5	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999965205052879	WITHOUT_CLASSIFICATION	3.4794947121098633E-6	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999997305518729	WITHOUT_CLASSIFICATION	2.694481271506299E-7	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999527119023116	WITHOUT_CLASSIFICATION	4.728809768829762E-5	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.9999856230930788	WITHOUT_CLASSIFICATION	1.4376906921197752E-5	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999999781196101	WITHOUT_CLASSIFICATION	2.188038986220896E-8	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.9999971413300558	WITHOUT_CLASSIFICATION	2.858669944213573E-6	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.999897536070373	WITHOUT_CLASSIFICATION	1.0246392962692688E-4	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999999452857845	WITHOUT_CLASSIFICATION	5.471421554443608E-8	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9999996673029796	WITHOUT_CLASSIFICATION	3.326970204064626E-7	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999308911413197	WITHOUT_CLASSIFICATION	6.910885868020726E-5	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999983280710492	WITHOUT_CLASSIFICATION	1.67192895081045E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961547409092	WITHOUT_CLASSIFICATION	3.845259090759304E-6	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.999996957314	WITHOUT_CLASSIFICATION	3.042686000034791E-6	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9993126341538435	WITHOUT_CLASSIFICATION	6.873658461564313E-4	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999957300699	WITHOUT_CLASSIFICATION	4.269930084854577E-9	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9990848540309425	WITHOUT_CLASSIFICATION	9.151459690576429E-4	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999999042121693	WITHOUT_CLASSIFICATION	9.578783069287146E-8	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999933643376985	WITHOUT_CLASSIFICATION	6.635662301466218E-6	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999993514466861	WITHOUT_CLASSIFICATION	6.485533138108639E-7	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999719815100573	WITHOUT_CLASSIFICATION	2.8018489942769083E-5	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999995119980438	WITHOUT_CLASSIFICATION	4.880019561207159E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999772169935077	WITHOUT_CLASSIFICATION	2.2783006492288238E-4	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999835132553	WITHOUT_CLASSIFICATION	1.648674472415313E-8	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999986735438278	WITHOUT_CLASSIFICATION	1.3264561722606352E-6	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999970081227356	WITHOUT_CLASSIFICATION	2.9918772643825466E-6	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999982288625903	WITHOUT_CLASSIFICATION	1.7711374097043586E-5	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999791241017683	WITHOUT_CLASSIFICATION	2.0875898231740343E-5	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999971433232332	WITHOUT_CLASSIFICATION	2.8566767668975715E-6	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999971433232332	WITHOUT_CLASSIFICATION	2.8566767668975715E-6	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999988884118279	WITHOUT_CLASSIFICATION	1.1115881719852548E-6	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9999992251701001	WITHOUT_CLASSIFICATION	7.748298999466114E-7	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999999113990258	WITHOUT_CLASSIFICATION	8.86009741950802E-8	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999999113990258	WITHOUT_CLASSIFICATION	8.86009741950802E-8	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999900694421783	WITHOUT_CLASSIFICATION	9.930557821647988E-6	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999936253842893	WITHOUT_CLASSIFICATION	6.374615710776173E-6	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.9999890828138184	WITHOUT_CLASSIFICATION	1.091718618155589E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.999982206177568	WITHOUT_CLASSIFICATION	1.779382243214822E-5	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.9999996846754459	WITHOUT_CLASSIFICATION	3.1532455410357894E-7	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999999966261899	WITHOUT_CLASSIFICATION	3.373810099044632E-9	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.9998025944571725	WITHOUT_CLASSIFICATION	1.9740554282760754E-4	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999906106365458	WITHOUT_CLASSIFICATION	9.389363454168357E-6	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999072645261	WITHOUT_CLASSIFICATION	9.273547385642921E-8	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999072645261	WITHOUT_CLASSIFICATION	9.273547385642921E-8	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999962719529426	WITHOUT_CLASSIFICATION	3.7280470574098204E-6	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999996816344472	WITHOUT_CLASSIFICATION	3.1836555284328035E-7	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999996816344472	WITHOUT_CLASSIFICATION	3.1836555284328035E-7	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999695686566	WITHOUT_CLASSIFICATION	3.043134346361006E-8	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999999988664502	WITHOUT_CLASSIFICATION	1.1335497549450298E-9	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9980438511922733	WITHOUT_CLASSIFICATION	0.0019561488077266542	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.9999983743495154	WITHOUT_CLASSIFICATION	1.6256504844961416E-6	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999981759228647	WITHOUT_CLASSIFICATION	1.8240771354035909E-6	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999993823281	WITHOUT_CLASSIFICATION	6.176719909004844E-10	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9997337333875703	WITHOUT_CLASSIFICATION	2.6626661242966045E-4	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999535031149615	WITHOUT_CLASSIFICATION	4.649688503855101E-5	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999997876078078	WITHOUT_CLASSIFICATION	2.123921921111237E-7	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9998788456723648	WITHOUT_CLASSIFICATION	1.211543276351458E-4	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999994272606687	WITHOUT_CLASSIFICATION	5.727393313153232E-7	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9992050415741376	WITHOUT_CLASSIFICATION	7.949584258622732E-4	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999986018726331	WITHOUT_CLASSIFICATION	1.3981273668441365E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999986018726331	WITHOUT_CLASSIFICATION	1.3981273668441365E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999986018726331	WITHOUT_CLASSIFICATION	1.3981273668441365E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999986018726331	WITHOUT_CLASSIFICATION	1.3981273668441365E-6	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999967944509255	WITHOUT_CLASSIFICATION	3.205549074608786E-6	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999821893468572	WITHOUT_CLASSIFICATION	1.781065314275094E-5	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999974394459513	WITHOUT_CLASSIFICATION	2.5605540486930558E-6	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.9999956751229548	WITHOUT_CLASSIFICATION	4.3248770451307365E-6	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999984970071836	WITHOUT_CLASSIFICATION	1.502992816428117E-6	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9999628161514654	WITHOUT_CLASSIFICATION	3.718384853453784E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999942824591888	WITHOUT_CLASSIFICATION	5.71754081120836E-6	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.999951021019417	WITHOUT_CLASSIFICATION	4.897898058288427E-5	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999457201405044	WITHOUT_CLASSIFICATION	5.427985949564734E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999942824591888	WITHOUT_CLASSIFICATION	5.71754081120836E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999942824591888	WITHOUT_CLASSIFICATION	5.71754081120836E-6	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999012477781046	WITHOUT_CLASSIFICATION	9.875222189535048E-5	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.9999995621762209	WITHOUT_CLASSIFICATION	4.378237790653929E-7	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.9999963896489666	WITHOUT_CLASSIFICATION	3.6103510333670506E-6	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999997343159609	WITHOUT_CLASSIFICATION	2.656840390906938E-7	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999999978788874	WITHOUT_CLASSIFICATION	2.1211125759820345E-9	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999998334549414	WITHOUT_CLASSIFICATION	1.6654505873222998E-7	IMPLEMENTATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9998645684497312	WITHOUT_CLASSIFICATION	1.3543155026888643E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999997343159609	WITHOUT_CLASSIFICATION	2.656840390906938E-7	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999982701081652	WITHOUT_CLASSIFICATION	1.7298918347478358E-6	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999932218652731	WITHOUT_CLASSIFICATION	6.77813472690027E-6	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999987449721706	WITHOUT_CLASSIFICATION	1.2550278294063572E-6	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999999988351018	WITHOUT_CLASSIFICATION	1.1648982323377685E-9	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999999962180811	WITHOUT_CLASSIFICATION	3.781918888046234E-9	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999997375184722	WITHOUT_CLASSIFICATION	2.6248152791167653E-7	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999058996387	WITHOUT_CLASSIFICATION	9.410036125768049E-8	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999631733578732	WITHOUT_CLASSIFICATION	3.6826642126723765E-5	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999777074118	WITHOUT_CLASSIFICATION	2.229258819826326E-7	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999992787806266	WITHOUT_CLASSIFICATION	7.212193735113145E-7	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999976199946	WITHOUT_CLASSIFICATION	2.3800054508976685E-9	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.999999876538746	WITHOUT_CLASSIFICATION	1.2346125398044084E-7	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999989278900555	WITHOUT_CLASSIFICATION	1.0721099445478833E-6	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999233537544017	WITHOUT_CLASSIFICATION	7.664624559823168E-5	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999774278068024	WITHOUT_CLASSIFICATION	2.257219319753016E-5	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999997755166069	WITHOUT_CLASSIFICATION	2.2448339310898422E-7	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999952186278	WITHOUT_CLASSIFICATION	4.7813722222592536E-9	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999999156181886	WITHOUT_CLASSIFICATION	8.438181143971422E-8	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999922113566223	WITHOUT_CLASSIFICATION	7.788643377622837E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999999156181886	WITHOUT_CLASSIFICATION	8.438181143971422E-8	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999997608864661	WITHOUT_CLASSIFICATION	2.3911353389100294E-7	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999934667756	WITHOUT_CLASSIFICATION	6.533224436443702E-9	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999885140175958	WITHOUT_CLASSIFICATION	1.1485982404169613E-5	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999981771209183	WITHOUT_CLASSIFICATION	1.8228790817670122E-6	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999997551544265	WITHOUT_CLASSIFICATION	2.448455734242047E-7	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999965500889371	WITHOUT_CLASSIFICATION	3.4499110629783102E-6	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999999882732409	WITHOUT_CLASSIFICATION	1.1726759156745883E-8	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999952186278	WITHOUT_CLASSIFICATION	4.7813722222592536E-9	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999922113566223	WITHOUT_CLASSIFICATION	7.788643377622837E-6	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999997608864661	WITHOUT_CLASSIFICATION	2.3911353389100294E-7	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999989889941575	WITHOUT_CLASSIFICATION	1.0110058425170037E-6	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.9999930872621086	WITHOUT_CLASSIFICATION	6.912737891486083E-6	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.9999825325076024	WITHOUT_CLASSIFICATION	1.74674923975947E-5	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999999943733963	WITHOUT_CLASSIFICATION	5.626603815680968E-9	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.9999640361363366	WITHOUT_CLASSIFICATION	3.596386366337807E-5	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999581652311004	WITHOUT_CLASSIFICATION	4.1834768899508794E-5	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999968391524909	WITHOUT_CLASSIFICATION	3.1608475090434076E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961547409092	WITHOUT_CLASSIFICATION	3.845259090759304E-6	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999934667756	WITHOUT_CLASSIFICATION	6.533224436443702E-9	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999985726425	WITHOUT_CLASSIFICATION	1.42735743513495E-9	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999998857689696	WITHOUT_CLASSIFICATION	1.1423103046400543E-7	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999405597913296	WITHOUT_CLASSIFICATION	5.944020867059508E-5	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999694039643	WITHOUT_CLASSIFICATION	3.0596035642156714E-8	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961547409092	WITHOUT_CLASSIFICATION	3.845259090759304E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999772169935077	WITHOUT_CLASSIFICATION	2.2783006492288238E-4	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999977164968816	WITHOUT_CLASSIFICATION	2.2835031183960988E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961547409092	WITHOUT_CLASSIFICATION	3.845259090759304E-6	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999986310312724	WITHOUT_CLASSIFICATION	1.3689687276047029E-6	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999999073235939	WITHOUT_CLASSIFICATION	9.267640610120259E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999772169935077	WITHOUT_CLASSIFICATION	2.2783006492288238E-4	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998395881358443	WITHOUT_CLASSIFICATION	1.6041186415582983E-4	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999143881535834	WITHOUT_CLASSIFICATION	8.561184641666265E-5	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999993042318991	WITHOUT_CLASSIFICATION	6.957681008721651E-7	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.99999832954018	WITHOUT_CLASSIFICATION	1.6704598200639132E-6	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999995374757569	WITHOUT_CLASSIFICATION	4.625242431133929E-7	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999998933701786	WITHOUT_CLASSIFICATION	1.0662982139747507E-6	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999987857855468	WITHOUT_CLASSIFICATION	1.2142144532343492E-6	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.9999997517334182	WITHOUT_CLASSIFICATION	2.48266581872185E-7	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999863656618246	WITHOUT_CLASSIFICATION	1.3634338175319679E-5	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999997710699751	WITHOUT_CLASSIFICATION	2.2893002494754765E-7	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9980438511922733	WITHOUT_CLASSIFICATION	0.0019561488077266542	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999997821805611	WITHOUT_CLASSIFICATION	2.1781943899486272E-7	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999967315427365	WITHOUT_CLASSIFICATION	3.268457263467531E-6	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999998251854941	WITHOUT_CLASSIFICATION	1.7481450576584283E-7	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999999322311983	WITHOUT_CLASSIFICATION	6.776880160764616E-8	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999984267165	WITHOUT_CLASSIFICATION	1.5732834938891096E-9	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999532665266676	WITHOUT_CLASSIFICATION	4.673347333226518E-5	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999933267460949	WITHOUT_CLASSIFICATION	6.673253905146839E-6	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999994806476874	WITHOUT_CLASSIFICATION	5.193523125908338E-7	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999501522382	WITHOUT_CLASSIFICATION	4.984776184218449E-8	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999714937088	WITHOUT_CLASSIFICATION	2.8506291304548526E-8	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.9982551995232921	WITHOUT_CLASSIFICATION	0.001744800476707867	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999998685662241	WITHOUT_CLASSIFICATION	1.3143377580101334E-7	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999999826309735	WITHOUT_CLASSIFICATION	1.736902649374414E-7	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999995621988416	WITHOUT_CLASSIFICATION	4.3780115845552927E-7	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999646348194052	WITHOUT_CLASSIFICATION	3.5365180594759414E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999579156639894	WITHOUT_CLASSIFICATION	4.2084336010679254E-5	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999998192363655	WITHOUT_CLASSIFICATION	1.8076363439277454E-7	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9995431290084357	WITHOUT_CLASSIFICATION	4.56870991564324E-4	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999909721385832	WITHOUT_CLASSIFICATION	9.027861416828085E-6	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999991023190905	WITHOUT_CLASSIFICATION	8.976809095208367E-7	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999993282131965	WITHOUT_CLASSIFICATION	6.717868034290976E-7	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.995027230473643	WITHOUT_CLASSIFICATION	0.004972769526356969	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999991715659452	WITHOUT_CLASSIFICATION	8.284340547909582E-7	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999999235923053	WITHOUT_CLASSIFICATION	7.640769480497605E-8	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.9999949971091076	WITHOUT_CLASSIFICATION	5.002890892494729E-6	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999919939950803	WITHOUT_CLASSIFICATION	8.006004919630352E-6	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999999720733598	WITHOUT_CLASSIFICATION	2.7926640195665233E-8	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.998198888116286	WITHOUT_CLASSIFICATION	0.001801111883714043	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999596044649394	WITHOUT_CLASSIFICATION	4.039553506059708E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999772169935077	WITHOUT_CLASSIFICATION	2.2783006492288238E-4	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999999731478564	WITHOUT_CLASSIFICATION	2.6852143652128436E-8	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999011629230447	WITHOUT_CLASSIFICATION	9.883707695529662E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999011629230447	WITHOUT_CLASSIFICATION	9.883707695529662E-5	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.998420732056066	WITHOUT_CLASSIFICATION	0.001579267943933964	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999998933701786	WITHOUT_CLASSIFICATION	1.0662982139747507E-6	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9991754078216106	WITHOUT_CLASSIFICATION	8.245921783893707E-4	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999731887665	WITHOUT_CLASSIFICATION	2.681123348434611E-8	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999085322384	WITHOUT_CLASSIFICATION	9.146776149257505E-8	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999976243197493	WITHOUT_CLASSIFICATION	2.375680250721015E-6	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.9999886864777245	WITHOUT_CLASSIFICATION	1.1313522275411975E-5	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.9999900262072168	WITHOUT_CLASSIFICATION	9.973792783130253E-6	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999999877135	WITHOUT_CLASSIFICATION	1.228660485917454E-11	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999991181683	WITHOUT_CLASSIFICATION	8.818317194793363E-10	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999885234356233	WITHOUT_CLASSIFICATION	1.1476564376672268E-5	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.9999998425352876	WITHOUT_CLASSIFICATION	1.5746471245464322E-7	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999944943214647	WITHOUT_CLASSIFICATION	5.505678535316643E-6	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999997309255	WITHOUT_CLASSIFICATION	2.690745700620263E-10	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999975107223	WITHOUT_CLASSIFICATION	2.4892777340913134E-9	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999879051175404	WITHOUT_CLASSIFICATION	1.2094882459513654E-5	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999998929428554	WITHOUT_CLASSIFICATION	1.0705714464200012E-7	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999976377799	WITHOUT_CLASSIFICATION	2.362220070907412E-9	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999993464647	WITHOUT_CLASSIFICATION	6.535352762414258E-10	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.99969018914691	WITHOUT_CLASSIFICATION	3.09810853089967E-4	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999945533087929	WITHOUT_CLASSIFICATION	5.4466912070577285E-6	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9997500027625897	WITHOUT_CLASSIFICATION	2.4999723741026057E-4	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999995597047985	WITHOUT_CLASSIFICATION	4.402952014985393E-6	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999883554362	WITHOUT_CLASSIFICATION	1.1644563682119428E-8	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.998198888116286	WITHOUT_CLASSIFICATION	0.001801111883714043	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999998761843607	WITHOUT_CLASSIFICATION	1.2381563928279004E-7	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999998039438791	WITHOUT_CLASSIFICATION	1.960561209482457E-7	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999921776136	WITHOUT_CLASSIFICATION	7.822386415374786E-9	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999999568679514	WITHOUT_CLASSIFICATION	4.313204850261535E-8	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9982860810472672	WITHOUT_CLASSIFICATION	0.0017139189527328276	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999445227804041	WITHOUT_CLASSIFICATION	5.547721959583597E-5	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999999097366137	WITHOUT_CLASSIFICATION	9.026338633402336E-8	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999989547056083	WITHOUT_CLASSIFICATION	1.045294391773698E-6	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999932904214159	WITHOUT_CLASSIFICATION	6.709578584070908E-6	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999999894438	WITHOUT_CLASSIFICATION	1.055617034709589E-11	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999988928518159	WITHOUT_CLASSIFICATION	1.1071481842115853E-6	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999997276522593	WITHOUT_CLASSIFICATION	2.7234774062481664E-7	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999997546418867	WITHOUT_CLASSIFICATION	2.453581132999825E-7	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999999746360265	WITHOUT_CLASSIFICATION	2.5363973509045847E-8	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.999999990867514	WITHOUT_CLASSIFICATION	9.132486066794937E-9	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999589141320434	WITHOUT_CLASSIFICATION	4.108586795667872E-5	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999589141320434	WITHOUT_CLASSIFICATION	4.108586795667872E-5	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999885657938966	WITHOUT_CLASSIFICATION	1.143420610337408E-5	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999632547045297	WITHOUT_CLASSIFICATION	3.6745295470248753E-5	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999898595936	WITHOUT_CLASSIFICATION	1.0140406379938493E-8	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999898595936	WITHOUT_CLASSIFICATION	1.0140406379938493E-8	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.9999999046870073	WITHOUT_CLASSIFICATION	9.531299270560274E-8	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999968878975788	WITHOUT_CLASSIFICATION	3.1121024212607833E-6	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9996263571722006	WITHOUT_CLASSIFICATION	3.7364282779940117E-4	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999293379848	WITHOUT_CLASSIFICATION	7.066201517137872E-8	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999988660182282	WITHOUT_CLASSIFICATION	1.1339817717883638E-6	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999981245759132	WITHOUT_CLASSIFICATION	1.8754240868877915E-6	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999995172112	WITHOUT_CLASSIFICATION	4.827888372342648E-10	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999995172112	WITHOUT_CLASSIFICATION	4.827888372342648E-10	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999964545089204	WITHOUT_CLASSIFICATION	3.5454910795827795E-6	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999996820713921	WITHOUT_CLASSIFICATION	3.179286078429986E-7	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999999646491453	WITHOUT_CLASSIFICATION	3.5350854672118774E-8	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999997413952914	WITHOUT_CLASSIFICATION	2.5860470864321335E-7	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999997413952914	WITHOUT_CLASSIFICATION	2.5860470864321335E-7	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.9999999691523506	WITHOUT_CLASSIFICATION	3.084764936708339E-8	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999936469960898	WITHOUT_CLASSIFICATION	6.353003910137859E-6	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999992495467629	WITHOUT_CLASSIFICATION	7.504532372290081E-7	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9999993258257718	WITHOUT_CLASSIFICATION	6.741742282693377E-7	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999998579514748	WITHOUT_CLASSIFICATION	1.4204852513405864E-7	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.999999960558615	WITHOUT_CLASSIFICATION	3.944138507876974E-8	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999994847919927	WITHOUT_CLASSIFICATION	5.152080072147737E-7	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.9999987705995345	WITHOUT_CLASSIFICATION	1.229400465616673E-6	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.999999985149744	WITHOUT_CLASSIFICATION	1.4850255958128982E-8	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999999384143737	WITHOUT_CLASSIFICATION	6.158562625064516E-8	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999991008923	WITHOUT_CLASSIFICATION	8.99107814449699E-10	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9990989385177698	WITHOUT_CLASSIFICATION	9.010614822303303E-4	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.9994249992805911	WITHOUT_CLASSIFICATION	5.750007194087672E-4	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999828622358187	WITHOUT_CLASSIFICATION	1.713776418125505E-5	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.9999918271807969	WITHOUT_CLASSIFICATION	8.172819203116445E-6	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999993967876414	WITHOUT_CLASSIFICATION	6.032123586127392E-7	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999300620346081	WITHOUT_CLASSIFICATION	6.993796539189364E-5	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999988818315821	WITHOUT_CLASSIFICATION	1.1181684178483914E-6	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999921321441093	WITHOUT_CLASSIFICATION	7.867855890675234E-6	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999964200212509	WITHOUT_CLASSIFICATION	3.5799787490466206E-6	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999986544657956	WITHOUT_CLASSIFICATION	1.3455342043811198E-6	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999946374997437	WITHOUT_CLASSIFICATION	5.362500256394443E-6	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9997222832484589	WITHOUT_CLASSIFICATION	2.7771675154111884E-4	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999998963702947	WITHOUT_CLASSIFICATION	1.0362970530593824E-7	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.9999992177263429	WITHOUT_CLASSIFICATION	7.822736570442464E-7	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.9999999721966448	WITHOUT_CLASSIFICATION	2.7803355148918406E-8	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999997592571385	WITHOUT_CLASSIFICATION	2.4074286149755957E-7	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999808253914684	WITHOUT_CLASSIFICATION	1.917460853168667E-5	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999380709962	WITHOUT_CLASSIFICATION	6.192900376776286E-8	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999990174863038	WITHOUT_CLASSIFICATION	9.825136961749661E-7	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999970851939158	WITHOUT_CLASSIFICATION	2.914806084200768E-5	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999960381181	WITHOUT_CLASSIFICATION	3.961881906520731E-9	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999996542549748	WITHOUT_CLASSIFICATION	3.457450251880204E-6	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999991842401461	WITHOUT_CLASSIFICATION	8.157598539706943E-7	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999978755357368	WITHOUT_CLASSIFICATION	2.1244642631410236E-6	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999949960191239	WITHOUT_CLASSIFICATION	5.003980876140525E-6	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.9999986882539066	WITHOUT_CLASSIFICATION	1.3117460934473324E-6	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999994849603	WITHOUT_CLASSIFICATION	5.150397166891153E-10	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999871106590463	WITHOUT_CLASSIFICATION	1.2889340953623792E-5	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999681477043	WITHOUT_CLASSIFICATION	3.185229570760989E-8	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999999921036229	WITHOUT_CLASSIFICATION	7.896377110286947E-9	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999995859989228	WITHOUT_CLASSIFICATION	4.140010771498155E-7	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.9999989394461358	WITHOUT_CLASSIFICATION	1.0605538642113769E-6	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.999992845881187	WITHOUT_CLASSIFICATION	7.154118813051161E-6	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9999994024818638	WITHOUT_CLASSIFICATION	5.975181361856879E-7	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999994676966518	WITHOUT_CLASSIFICATION	5.323033482284955E-7	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.9999993169701473	WITHOUT_CLASSIFICATION	6.83029852680562E-7	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999994928471919	WITHOUT_CLASSIFICATION	5.071528080632785E-7	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999981161970727	WITHOUT_CLASSIFICATION	1.8838029272136577E-6	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999993985181852	WITHOUT_CLASSIFICATION	6.014818148128264E-7	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999891368853835	WITHOUT_CLASSIFICATION	1.086311461648177E-5	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9997725251569489	WITHOUT_CLASSIFICATION	2.2747484305096476E-4	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9998709724458011	WITHOUT_CLASSIFICATION	1.2902755419890065E-4	IMPLEMENTATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999998482635007	WITHOUT_CLASSIFICATION	1.5173649929499477E-7	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.999998538930443	WITHOUT_CLASSIFICATION	1.4610695570560034E-6	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999595387667801	WITHOUT_CLASSIFICATION	4.046123321976887E-5	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999993434881769	WITHOUT_CLASSIFICATION	6.565118230775861E-7	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999992948547507	WITHOUT_CLASSIFICATION	7.051452491924336E-7	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999964372733277	WITHOUT_CLASSIFICATION	3.562726672446611E-6	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999998980586919	WITHOUT_CLASSIFICATION	1.0194130801611507E-7	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999839315652543	WITHOUT_CLASSIFICATION	1.6068434745572573E-5	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999839315652543	WITHOUT_CLASSIFICATION	1.6068434745572573E-5	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999999578084	WITHOUT_CLASSIFICATION	4.219145380114445E-11	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999079657164562	WITHOUT_CLASSIFICATION	9.203428354382519E-5	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999999998596227	WITHOUT_CLASSIFICATION	1.4037729991535452E-9	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999183768388	WITHOUT_CLASSIFICATION	8.16231612043538E-8	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999035111075	WITHOUT_CLASSIFICATION	9.648889249278428E-8	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999983282607254	WITHOUT_CLASSIFICATION	1.6717392746178548E-6	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999999499950325	WITHOUT_CLASSIFICATION	5.0004967510236596E-8	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999949748032	WITHOUT_CLASSIFICATION	5.025196781954432E-9	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999996166876493	WITHOUT_CLASSIFICATION	3.833123506842511E-7	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999999684270998	WITHOUT_CLASSIFICATION	3.1572900143740434E-8	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999993938151613	WITHOUT_CLASSIFICATION	6.06184838688763E-7	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.999998957702172	WITHOUT_CLASSIFICATION	1.042297828025403E-6	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999891119855	WITHOUT_CLASSIFICATION	1.0888014521410808E-8	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999812626464957	WITHOUT_CLASSIFICATION	1.873735350436853E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999115350339	WITHOUT_CLASSIFICATION	8.846496615992378E-8	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999115350339	WITHOUT_CLASSIFICATION	8.846496615992378E-8	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999996677467	WITHOUT_CLASSIFICATION	3.3225338761904795E-10	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9955155506596983	WITHOUT_CLASSIFICATION	0.004484449340301575	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999998844770841	WITHOUT_CLASSIFICATION	1.1552291590518624E-7	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999754923579	WITHOUT_CLASSIFICATION	2.4507642167423876E-8	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999929693686059	WITHOUT_CLASSIFICATION	7.030631394099055E-6	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884099123089	WITHOUT_CLASSIFICATION	1.1590087691129126E-5	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999994854557049	WITHOUT_CLASSIFICATION	5.145442951139526E-7	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.9999925234622893	WITHOUT_CLASSIFICATION	7.476537710688362E-6	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9966471035699791	WITHOUT_CLASSIFICATION	0.0033528964300208134	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999998166422807	WITHOUT_CLASSIFICATION	1.8335771935080055E-7	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999473585331708	WITHOUT_CLASSIFICATION	5.2641466829072794E-5	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999998738986152	WITHOUT_CLASSIFICATION	1.26101384754694E-7	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999825989003	WITHOUT_CLASSIFICATION	1.7401099605638877E-8	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999999674364	WITHOUT_CLASSIFICATION	3.25636938718808E-11	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999521853304	WITHOUT_CLASSIFICATION	4.7814669471842395E-8	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999999797607323	WITHOUT_CLASSIFICATION	2.02392677086217E-8	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999993684800877	WITHOUT_CLASSIFICATION	6.315199122918361E-7	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999998305926012	WITHOUT_CLASSIFICATION	1.6940739878022623E-7	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999999142123385	WITHOUT_CLASSIFICATION	8.578766158146046E-8	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999991246226	WITHOUT_CLASSIFICATION	8.7537738962321E-10	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999999993845742	WITHOUT_CLASSIFICATION	6.154258109877198E-10	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999999425051	WITHOUT_CLASSIFICATION	5.7494908440826303E-11	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999999022583366	WITHOUT_CLASSIFICATION	9.774166335437734E-8	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999874832407	WITHOUT_CLASSIFICATION	1.2516759252200773E-8	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999995984463451	WITHOUT_CLASSIFICATION	4.01553654810155E-7	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.9999998266992727	WITHOUT_CLASSIFICATION	1.7330072741973274E-7	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999997362511752	WITHOUT_CLASSIFICATION	2.637488248037218E-6	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999994562571969	WITHOUT_CLASSIFICATION	5.43742803102106E-7	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999988643521296	WITHOUT_CLASSIFICATION	1.1356478703304915E-6	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999681507981986	WITHOUT_CLASSIFICATION	3.1849201801451634E-5	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999994564292254	WITHOUT_CLASSIFICATION	5.435707746152549E-7	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999832875935	WITHOUT_CLASSIFICATION	1.671240648055155E-8	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.999999815534245	WITHOUT_CLASSIFICATION	1.8446575504729283E-7	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999997103580376	WITHOUT_CLASSIFICATION	2.8964196249082967E-7	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999985314416	WITHOUT_CLASSIFICATION	1.4685583144501358E-9	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999974044509633	WITHOUT_CLASSIFICATION	2.5955490365745107E-6	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9997442316109438	WITHOUT_CLASSIFICATION	2.557683890562384E-4	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999183939654	WITHOUT_CLASSIFICATION	8.160603468482202E-8	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999379675284	WITHOUT_CLASSIFICATION	6.203247167631707E-8	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999755414903	WITHOUT_CLASSIFICATION	2.445850965479596E-8	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.999020896969568	WITHOUT_CLASSIFICATION	9.791030304320463E-4	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999902169935948	WITHOUT_CLASSIFICATION	9.78300640527688E-6	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9992077623690416	WITHOUT_CLASSIFICATION	7.922376309583202E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9992077623690416	WITHOUT_CLASSIFICATION	7.922376309583202E-4	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999999738149697	WITHOUT_CLASSIFICATION	2.618503021874935E-8	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999999923250162	WITHOUT_CLASSIFICATION	7.674983794824904E-8	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9970622803375024	WITHOUT_CLASSIFICATION	0.0029377196624975643	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999735016945541	WITHOUT_CLASSIFICATION	2.6498305445902142E-5	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999896646393	WITHOUT_CLASSIFICATION	1.0335360753701269E-8	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999701926552	WITHOUT_CLASSIFICATION	2.980734490604415E-8	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999956404945557	WITHOUT_CLASSIFICATION	4.3595054443106165E-6	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999887337837	WITHOUT_CLASSIFICATION	1.126621642744163E-8	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999873238990261	WITHOUT_CLASSIFICATION	1.2676100974007528E-5	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996087867468	WITHOUT_CLASSIFICATION	3.9121325321550817E-7	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993090079555	WITHOUT_CLASSIFICATION	6.909920444143151E-7	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999998489415884	WITHOUT_CLASSIFICATION	1.5105841154737126E-7	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999669503062	WITHOUT_CLASSIFICATION	3.30496937891643E-8	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999997882733969	WITHOUT_CLASSIFICATION	2.117266031493941E-7	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999950349907637	WITHOUT_CLASSIFICATION	4.965009236203272E-6	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999983441888587	WITHOUT_CLASSIFICATION	1.6558111412406933E-6	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999997100840833	WITHOUT_CLASSIFICATION	2.899159167576148E-7	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999994763022	WITHOUT_CLASSIFICATION	5.236976835762934E-10	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999991033132	WITHOUT_CLASSIFICATION	8.966868574009056E-10	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.99971122400373	WITHOUT_CLASSIFICATION	2.8877599626989195E-4	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999995595651804	WITHOUT_CLASSIFICATION	4.404348196483753E-7	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999937787538	WITHOUT_CLASSIFICATION	6.221246146077519E-9	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999974785413673	WITHOUT_CLASSIFICATION	2.521458632623457E-6	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999303634210773	WITHOUT_CLASSIFICATION	6.963657892271655E-5	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999999993965969	WITHOUT_CLASSIFICATION	6.034030328169802E-10	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999948062433062	WITHOUT_CLASSIFICATION	5.193756693791268E-6	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9990282984166912	WITHOUT_CLASSIFICATION	9.717015833088278E-4	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999996715716767	WITHOUT_CLASSIFICATION	3.2842832327843433E-7	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999293679457	WITHOUT_CLASSIFICATION	7.063205425058403E-8	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999988012768339	WITHOUT_CLASSIFICATION	1.1987231660857958E-6	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999947837413713	WITHOUT_CLASSIFICATION	5.2162586287529765E-6	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999996328014944	WITHOUT_CLASSIFICATION	3.6719850564515586E-7	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999975521196351	WITHOUT_CLASSIFICATION	2.4478803648440393E-6	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999999337302378	WITHOUT_CLASSIFICATION	6.626976221666439E-8	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.999999993034528	WITHOUT_CLASSIFICATION	6.9654720328333054E-9	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999996129996	WITHOUT_CLASSIFICATION	3.8700042364978475E-10	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999627307946636	WITHOUT_CLASSIFICATION	3.726920533634337E-5	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999992392563	WITHOUT_CLASSIFICATION	7.607436689640683E-10	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999985722243596	WITHOUT_CLASSIFICATION	1.4277756403146084E-6	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999966696335	WITHOUT_CLASSIFICATION	3.3303666086869367E-9	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999973309743725	WITHOUT_CLASSIFICATION	2.669025627489311E-6	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999831073833	WITHOUT_CLASSIFICATION	1.6892616724485608E-8	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999523304192718	WITHOUT_CLASSIFICATION	4.7669580728206334E-5	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999101182014	WITHOUT_CLASSIFICATION	8.988179854227309E-8	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999936162881	WITHOUT_CLASSIFICATION	6.383711864667881E-9	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999999996747282	WITHOUT_CLASSIFICATION	3.2527172557889867E-10	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999690115381	WITHOUT_CLASSIFICATION	3.0988462018574666E-8	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999975122204497	WITHOUT_CLASSIFICATION	2.487779550245879E-6	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999996619057336	WITHOUT_CLASSIFICATION	3.3809426643019067E-7	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999891119855	WITHOUT_CLASSIFICATION	1.0888014521410808E-8	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999999997614755	WITHOUT_CLASSIFICATION	2.385245003618756E-10	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999796701928	WITHOUT_CLASSIFICATION	2.0329807220191567E-8	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999876403322538	WITHOUT_CLASSIFICATION	1.2359667746244649E-5	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999337064880331	WITHOUT_CLASSIFICATION	6.629351196691401E-5	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999985891003	WITHOUT_CLASSIFICATION	1.410899646840258E-9	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.999994981190528	WITHOUT_CLASSIFICATION	5.0188094720393885E-6	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9815271378869448	WITHOUT_CLASSIFICATION	0.018472862113055225	IMPLEMENTATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999902840982049	WITHOUT_CLASSIFICATION	9.71590179502464E-6	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999995039663	WITHOUT_CLASSIFICATION	4.960336934961169E-9	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9997971127511169	WITHOUT_CLASSIFICATION	2.028872488829648E-4	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999980406760166	WITHOUT_CLASSIFICATION	1.9593239834196425E-6	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999996128588369	WITHOUT_CLASSIFICATION	3.8714116308296777E-7	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999994674360814	WITHOUT_CLASSIFICATION	5.325639186838651E-7	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999897016317	WITHOUT_CLASSIFICATION	1.0298368214926443E-8	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999933008875	WITHOUT_CLASSIFICATION	6.699112445901125E-9	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974684237228	WITHOUT_CLASSIFICATION	2.531576277166191E-6	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999318916980282	WITHOUT_CLASSIFICATION	6.810830197170587E-5	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999999685115271	WITHOUT_CLASSIFICATION	3.14884728335381E-8	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999867588405713	WITHOUT_CLASSIFICATION	1.3241159428805453E-5	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999993967200488	WITHOUT_CLASSIFICATION	6.03279951102218E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974684237228	WITHOUT_CLASSIFICATION	2.531576277166191E-6	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999882649959504	WITHOUT_CLASSIFICATION	1.1735004049537537E-5	IMPLEMENTATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999759168448	WITHOUT_CLASSIFICATION	2.4083155175548175E-8	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999998458732253	WITHOUT_CLASSIFICATION	1.5412677477031978E-7	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999995016888077	WITHOUT_CLASSIFICATION	4.983111921904417E-7	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999993886644775	WITHOUT_CLASSIFICATION	6.113355224239191E-7	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999995843087	WITHOUT_CLASSIFICATION	4.156912571155042E-10	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999999114532	WITHOUT_CLASSIFICATION	8.854681787805292E-11	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999589107814483	WITHOUT_CLASSIFICATION	4.108921855174647E-5	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999999995379848	WITHOUT_CLASSIFICATION	4.620151986387614E-9	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999772448205233	WITHOUT_CLASSIFICATION	2.275517947672467E-5	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999480035300282	WITHOUT_CLASSIFICATION	5.199646997189618E-5	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998653309646719	WITHOUT_CLASSIFICATION	1.3466903532816723E-4	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999977152643676	WITHOUT_CLASSIFICATION	2.284735632367609E-6	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9980030279261136	WITHOUT_CLASSIFICATION	0.001996972073886347	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999980808024566	WITHOUT_CLASSIFICATION	1.919197543414755E-6	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.999999998082301	WITHOUT_CLASSIFICATION	1.917698916666236E-9	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999883554362	WITHOUT_CLASSIFICATION	1.1644563682119428E-8	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999997489614053	WITHOUT_CLASSIFICATION	2.510385946840541E-7	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.999999797620846	WITHOUT_CLASSIFICATION	2.02379154026166E-7	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9979870275338365	WITHOUT_CLASSIFICATION	0.0020129724661634616	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.999998806050401	WITHOUT_CLASSIFICATION	1.1939495989755681E-6	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9995047803670636	WITHOUT_CLASSIFICATION	4.952196329364348E-4	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999208124316081	WITHOUT_CLASSIFICATION	7.918756839190971E-5	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.999999306335698	WITHOUT_CLASSIFICATION	6.936643020518685E-7	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999990831244	WITHOUT_CLASSIFICATION	9.168755446465938E-10	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999945850766	WITHOUT_CLASSIFICATION	5.41492332357702E-9	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999926102995	WITHOUT_CLASSIFICATION	7.389700534487408E-9	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998039862929523	WITHOUT_CLASSIFICATION	1.9601370704766256E-4	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999917229533	WITHOUT_CLASSIFICATION	8.277046705649297E-8	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9990373311182227	WITHOUT_CLASSIFICATION	9.626688817772797E-4	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.7808719346107141	WITHOUT_CLASSIFICATION	0.21912806538928578	IMPLEMENTATION
and perform the load	WITHOUT_CLASSIFICATION	0.999999915362277	WITHOUT_CLASSIFICATION	8.463772302530669E-8	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999776863617506	WITHOUT_CLASSIFICATION	2.2313638249424616E-5	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999985389924203	WITHOUT_CLASSIFICATION	1.4610075797851876E-6	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999362382752	WITHOUT_CLASSIFICATION	6.376172481227333E-8	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999658902406	WITHOUT_CLASSIFICATION	3.4109759297276025E-8	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999981285306	WITHOUT_CLASSIFICATION	1.871469358242358E-9	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999999820423	WITHOUT_CLASSIFICATION	1.7957794787356637E-11	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999995742639133	WITHOUT_CLASSIFICATION	4.257360867643181E-7	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999991792993	WITHOUT_CLASSIFICATION	8.207006971581892E-10	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999998602669751	WITHOUT_CLASSIFICATION	1.3973302498248456E-7	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9997800654408943	WITHOUT_CLASSIFICATION	2.1993455910573873E-4	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9997800654408943	WITHOUT_CLASSIFICATION	2.1993455910573873E-4	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999999748814363	WITHOUT_CLASSIFICATION	2.5118563645286426E-8	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999763371502	WITHOUT_CLASSIFICATION	2.3662849758394797E-8	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998614921174	WITHOUT_CLASSIFICATION	1.3850788259595087E-7	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999999858413245	WITHOUT_CLASSIFICATION	1.4158675595857778E-8	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.999982206177568	WITHOUT_CLASSIFICATION	1.779382243214822E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.999982206177568	WITHOUT_CLASSIFICATION	1.779382243214822E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999669664480352	WITHOUT_CLASSIFICATION	3.303355196487332E-5	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999999999940857	WITHOUT_CLASSIFICATION	5.914259059896814E-12	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.999999999977038	WITHOUT_CLASSIFICATION	2.2962027701913338E-11	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999975141747	WITHOUT_CLASSIFICATION	2.4858252150281103E-9	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999994430189547	WITHOUT_CLASSIFICATION	5.569810452700776E-7	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999996123966729	WITHOUT_CLASSIFICATION	3.876033271190999E-7	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999989881951556	WITHOUT_CLASSIFICATION	1.01180484435932E-6	IMPLEMENTATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999983175879228	WITHOUT_CLASSIFICATION	1.6824120773102517E-6	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999978096575659	WITHOUT_CLASSIFICATION	2.190342434052631E-6	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999998836566028	WITHOUT_CLASSIFICATION	1.1634339731758642E-7	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999852180381	WITHOUT_CLASSIFICATION	1.4781961879243448E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996309756654	WITHOUT_CLASSIFICATION	3.690243346755099E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996309756654	WITHOUT_CLASSIFICATION	3.690243346755099E-7	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999999814418	WITHOUT_CLASSIFICATION	1.8558123005993654E-11	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999941978972857	WITHOUT_CLASSIFICATION	5.80210271428498E-6	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999997493327154	WITHOUT_CLASSIFICATION	2.5066728465377306E-7	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999999950775297	WITHOUT_CLASSIFICATION	4.922470278189321E-9	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999772169935077	WITHOUT_CLASSIFICATION	2.2783006492288238E-4	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999983255576881	WITHOUT_CLASSIFICATION	1.6744423119593149E-6	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999361826437	WITHOUT_CLASSIFICATION	6.381735627895994E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999772169935077	WITHOUT_CLASSIFICATION	2.2783006492288238E-4	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999992799935108	WITHOUT_CLASSIFICATION	7.200064892676124E-7	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999999802024675	WITHOUT_CLASSIFICATION	1.9797532489243053E-8	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999957560042912	WITHOUT_CLASSIFICATION	4.243995708749381E-6	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.999999957133957	WITHOUT_CLASSIFICATION	4.28660430039995E-8	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999772448205233	WITHOUT_CLASSIFICATION	2.275517947672467E-5	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999971513057188	WITHOUT_CLASSIFICATION	2.8486942811613334E-6	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.999995537295652	WITHOUT_CLASSIFICATION	4.462704348004724E-6	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999986280803853	WITHOUT_CLASSIFICATION	1.3719196146518424E-6	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.9999950401338087	WITHOUT_CLASSIFICATION	4.959866191363711E-6	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999990062532496	WITHOUT_CLASSIFICATION	9.93746750515225E-7	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999966655189765	WITHOUT_CLASSIFICATION	3.334481023533199E-6	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999999712675947	WITHOUT_CLASSIFICATION	2.8732405420295024E-8	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999969256217364	WITHOUT_CLASSIFICATION	3.0743782635960793E-6	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999989305462018	WITHOUT_CLASSIFICATION	1.0694537981170053E-6	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997952886248469	WITHOUT_CLASSIFICATION	2.0471137515307004E-4	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997952886248469	WITHOUT_CLASSIFICATION	2.0471137515307004E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999997343159609	WITHOUT_CLASSIFICATION	2.656840390906938E-7	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999998498648667	WITHOUT_CLASSIFICATION	1.501351333251114E-7	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999942824591888	WITHOUT_CLASSIFICATION	5.71754081120836E-6	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999961843413256	WITHOUT_CLASSIFICATION	3.815658674397545E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999908223871515	WITHOUT_CLASSIFICATION	9.17761284854343E-6	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999997391627583	WITHOUT_CLASSIFICATION	2.6083724165012854E-7	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999774278068024	WITHOUT_CLASSIFICATION	2.257219319753016E-5	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999999895668	WITHOUT_CLASSIFICATION	1.043314128500337E-11	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999989889941575	WITHOUT_CLASSIFICATION	1.0110058425170037E-6	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998361096273837	WITHOUT_CLASSIFICATION	1.6389037261633116E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961547409092	WITHOUT_CLASSIFICATION	3.845259090759304E-6	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.998227964487734	WITHOUT_CLASSIFICATION	0.0017720355122659802	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9998954282645429	WITHOUT_CLASSIFICATION	1.0457173545701813E-4	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999976187031	WITHOUT_CLASSIFICATION	2.3812968307346685E-9	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999994557459	WITHOUT_CLASSIFICATION	5.442541655038739E-10	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999919135637677	WITHOUT_CLASSIFICATION	8.086436232296312E-6	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999998871312935	WITHOUT_CLASSIFICATION	1.1286870650117948E-7	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999994542065767	WITHOUT_CLASSIFICATION	5.457934233086359E-7	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999143301756607	WITHOUT_CLASSIFICATION	8.566982433928383E-5	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999999994414	WITHOUT_CLASSIFICATION	5.585940746907927E-13	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999999896909	WITHOUT_CLASSIFICATION	1.030904102819916E-11	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999996022361	WITHOUT_CLASSIFICATION	3.977639675892248E-10	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999992495467629	WITHOUT_CLASSIFICATION	7.504532372290081E-7	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999767176	WITHOUT_CLASSIFICATION	2.3282298674234062E-11	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998175799054	WITHOUT_CLASSIFICATION	1.824200945408531E-7	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998175799054	WITHOUT_CLASSIFICATION	1.824200945408531E-7	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999766300647086	WITHOUT_CLASSIFICATION	2.3369935291344308E-5	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9975732198077314	WITHOUT_CLASSIFICATION	0.0024267801922685356	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999699783073	WITHOUT_CLASSIFICATION	3.0021692638537465E-8	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999998249629696	WITHOUT_CLASSIFICATION	1.750370303718834E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.999999941754884	WITHOUT_CLASSIFICATION	5.8245115998746445E-8	IMPLEMENTATION
