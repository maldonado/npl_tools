todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9962236187852035	WITHOUT_CLASSIFICATION	0.003776381214796477	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9962236187852035	WITHOUT_CLASSIFICATION	0.003776381214796477	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.9574874274785709	WITHOUT_CLASSIFICATION	0.042512572521429016	IMPLEMENTATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.6692261510821678	WITHOUT_CLASSIFICATION	0.33077384891783235	IMPLEMENTATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.8755575672179999	WITHOUT_CLASSIFICATION	0.12444243278200008	IMPLEMENTATION
TODO: handle TypeDefs	IMPLEMENTATION	0.9897613376077462	IMPLEMENTATION	0.010238662392253696	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9861555599251669	WITHOUT_CLASSIFICATION	0.013844440074833014	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9924320129697382	WITHOUT_CLASSIFICATION	0.007567987030261827	IMPLEMENTATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.8757410686974417	WITHOUT_CLASSIFICATION	0.12425893130255827	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.6846859984959199	IMPLEMENTATION	0.3153140015040799	WITHOUT_CLASSIFICATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.6565439930408283	WITHOUT_CLASSIFICATION	0.3434560069591716	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.9920199473664177	IMPLEMENTATION	0.007980052633582207	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.852426909297996	WITHOUT_CLASSIFICATION	0.14757309070200397	IMPLEMENTATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.852426909297996	WITHOUT_CLASSIFICATION	0.14757309070200397	IMPLEMENTATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.9904862249934767	IMPLEMENTATION	0.00951377500652336	WITHOUT_CLASSIFICATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.8483100830713999	IMPLEMENTATION	0.15168991692860018	WITHOUT_CLASSIFICATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9981104973451823	IMPLEMENTATION	0.001889502654817733	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9999481517037767	WITHOUT_CLASSIFICATION	5.184829622325566E-5	IMPLEMENTATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.9999999989476496	WITHOUT_CLASSIFICATION	1.0523503740535953E-9	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.8464769495254675	IMPLEMENTATION	0.15352305047453266	WITHOUT_CLASSIFICATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.848954448076942	IMPLEMENTATION	0.15104555192305788	WITHOUT_CLASSIFICATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9993407996817218	WITHOUT_CLASSIFICATION	6.592003182781875E-4	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9070777829181575	IMPLEMENTATION	0.09292221708184249	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9952844158120284	IMPLEMENTATION	0.004715584187971561	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9952844158120284	IMPLEMENTATION	0.004715584187971561	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.9984627636685219	IMPLEMENTATION	0.001537236331478115	WITHOUT_CLASSIFICATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.5207708703410507	IMPLEMENTATION	0.47922912965894926	WITHOUT_CLASSIFICATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9995822517037285	IMPLEMENTATION	4.177482962714944E-4	WITHOUT_CLASSIFICATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.951366925252209	IMPLEMENTATION	0.04863307474779107	WITHOUT_CLASSIFICATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9918707376740358	IMPLEMENTATION	0.00812926232596417	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.6187409777439845	IMPLEMENTATION	0.3812590222560155	WITHOUT_CLASSIFICATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.943121629933459	IMPLEMENTATION	0.05687837006654091	WITHOUT_CLASSIFICATION
todo : look at optimizing these...	IMPLEMENTATION	0.9983078830731958	WITHOUT_CLASSIFICATION	0.0016921169268040994	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.5379612501622808	WITHOUT_CLASSIFICATION	0.4620387498377192	IMPLEMENTATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9925767286039454	IMPLEMENTATION	0.007423271396054597	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.989132151545675	WITHOUT_CLASSIFICATION	0.010867848454325119	IMPLEMENTATION
TODO: not visible to the user!	IMPLEMENTATION	0.5036579216092373	WITHOUT_CLASSIFICATION	0.4963420783907627	IMPLEMENTATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.7044326621798082	WITHOUT_CLASSIFICATION	0.2955673378201918	IMPLEMENTATION
TODO: use these in methods above	IMPLEMENTATION	0.7535218383149044	IMPLEMENTATION	0.2464781616850955	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.995481761529139	IMPLEMENTATION	0.004518238470860924	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.995481761529139	IMPLEMENTATION	0.004518238470860924	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.8406234430983777	WITHOUT_CLASSIFICATION	0.15937655690162228	IMPLEMENTATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9985819861479864	WITHOUT_CLASSIFICATION	0.001418013852013591	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9735739022508471	WITHOUT_CLASSIFICATION	0.02642609774915293	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9885257879197752	IMPLEMENTATION	0.011474212080224911	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.8987809266713994	IMPLEMENTATION	0.10121907332860067	WITHOUT_CLASSIFICATION
TODO: formulas ?	IMPLEMENTATION	0.9766280254860961	WITHOUT_CLASSIFICATION	0.023371974513903847	IMPLEMENTATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.7361384678091832	IMPLEMENTATION	0.2638615321908168	WITHOUT_CLASSIFICATION
todo : cache this sql...	IMPLEMENTATION	0.9998738215574475	WITHOUT_CLASSIFICATION	1.2617844255244641E-4	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.977982767012234	IMPLEMENTATION	0.02201723298776611	WITHOUT_CLASSIFICATION
TODO: cache this in an instvar	IMPLEMENTATION	0.9320339267091937	WITHOUT_CLASSIFICATION	0.06796607329080624	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.9987491763903539	IMPLEMENTATION	0.001250823609646137	WITHOUT_CLASSIFICATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.6055949416069004	IMPLEMENTATION	0.39440505839309964	WITHOUT_CLASSIFICATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.9823096635261059	IMPLEMENTATION	0.01769033647389406	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.9043224178168384	IMPLEMENTATION	0.09567758218316157	WITHOUT_CLASSIFICATION
TODO: terrible implementation!	IMPLEMENTATION	0.9979872517617051	IMPLEMENTATION	0.0020127482382948426	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.9043224178168384	IMPLEMENTATION	0.09567758218316157	WITHOUT_CLASSIFICATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9999731848864567	IMPLEMENTATION	2.681511354335847E-5	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.962072023033352	IMPLEMENTATION	0.03792797696664795	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.9043224178168384	IMPLEMENTATION	0.09567758218316157	WITHOUT_CLASSIFICATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999977313293122	WITHOUT_CLASSIFICATION	2.2686706877668592E-6	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999977313293122	WITHOUT_CLASSIFICATION	2.2686706877668592E-6	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9989895643049445	IMPLEMENTATION	0.0010104356950555175	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.9993971704240957	WITHOUT_CLASSIFICATION	6.028295759042178E-4	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.999962783471912	WITHOUT_CLASSIFICATION	3.721652808803126E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999823120103578	WITHOUT_CLASSIFICATION	1.7687989642200584E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999823120103578	WITHOUT_CLASSIFICATION	1.7687989642200584E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999823120103578	WITHOUT_CLASSIFICATION	1.7687989642200584E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999823120103578	WITHOUT_CLASSIFICATION	1.7687989642200584E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999823120103578	WITHOUT_CLASSIFICATION	1.7687989642200584E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999823120103578	WITHOUT_CLASSIFICATION	1.7687989642200584E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999823120103578	WITHOUT_CLASSIFICATION	1.7687989642200584E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999942243301813	WITHOUT_CLASSIFICATION	5.775669818803953E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999942243301813	WITHOUT_CLASSIFICATION	5.775669818803953E-6	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999941248993469	WITHOUT_CLASSIFICATION	5.875100653174498E-6	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999463127249	WITHOUT_CLASSIFICATION	5.3687275020733396E-8	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999989106932136	WITHOUT_CLASSIFICATION	1.089306786489955E-6	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999998425590104	WITHOUT_CLASSIFICATION	1.5744098959090628E-7	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999998425590104	WITHOUT_CLASSIFICATION	1.5744098959090628E-7	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999875585146	WITHOUT_CLASSIFICATION	1.2441485467887728E-8	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999998906351654	WITHOUT_CLASSIFICATION	1.093648346021116E-6	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999946872042897	WITHOUT_CLASSIFICATION	5.312795710267062E-6	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999965956653647	WITHOUT_CLASSIFICATION	3.404334635292467E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999990687331543	WITHOUT_CLASSIFICATION	9.312668458024729E-7	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999990687331543	WITHOUT_CLASSIFICATION	9.312668458024729E-7	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999799672061013	WITHOUT_CLASSIFICATION	2.0032793898717813E-5	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9994915562957202	WITHOUT_CLASSIFICATION	5.084437042797521E-4	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.9999679283734761	WITHOUT_CLASSIFICATION	3.2071626523862445E-5	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999999993389795	WITHOUT_CLASSIFICATION	6.610204670762692E-10	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999971843733	WITHOUT_CLASSIFICATION	2.8156267921843955E-9	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999989412717986	WITHOUT_CLASSIFICATION	1.0587282013496745E-6	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.9999391059521284	WITHOUT_CLASSIFICATION	6.089404787148428E-5	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.99999134117089	WITHOUT_CLASSIFICATION	8.658829110129826E-6	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999662370553905	WITHOUT_CLASSIFICATION	3.376294460961104E-5	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999986016436392	WITHOUT_CLASSIFICATION	1.398356360799877E-6	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.99999058542779	WITHOUT_CLASSIFICATION	9.414572209952786E-6	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999880570391975	WITHOUT_CLASSIFICATION	1.1942960802609018E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999997978156	WITHOUT_CLASSIFICATION	2.021843597124152E-10	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999930295217788	WITHOUT_CLASSIFICATION	6.9704782211784505E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999930295217788	WITHOUT_CLASSIFICATION	6.9704782211784505E-6	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999986577454046	WITHOUT_CLASSIFICATION	1.3422545953049733E-6	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999904382157474	WITHOUT_CLASSIFICATION	9.561784252603302E-6	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999434016748	WITHOUT_CLASSIFICATION	5.6598325251987414E-8	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999845848951784	WITHOUT_CLASSIFICATION	1.541510482168907E-5	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.998518037864188	WITHOUT_CLASSIFICATION	0.0014819621358119841	IMPLEMENTATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999998368994493	WITHOUT_CLASSIFICATION	1.6310055079634772E-7	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999998539078473	WITHOUT_CLASSIFICATION	1.4609215268767874E-7	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999999507189333	WITHOUT_CLASSIFICATION	4.928106661767746E-8	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999999984763523	WITHOUT_CLASSIFICATION	1.5236476478363452E-9	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999996540235283	WITHOUT_CLASSIFICATION	3.459764717071552E-7	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999993193507517	WITHOUT_CLASSIFICATION	6.806492482176315E-7	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999981546134	WITHOUT_CLASSIFICATION	1.8453865819715342E-9	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999996902744	WITHOUT_CLASSIFICATION	3.0972559162551963E-10	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999990229099082	WITHOUT_CLASSIFICATION	9.77090091801693E-6	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999925418865027	WITHOUT_CLASSIFICATION	7.458113497268811E-6	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945638388861	WITHOUT_CLASSIFICATION	5.436161114010231E-6	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916312989672	WITHOUT_CLASSIFICATION	8.368701032870473E-6	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999999317197978	WITHOUT_CLASSIFICATION	6.828020210477844E-8	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999969696174211	WITHOUT_CLASSIFICATION	3.0303825790002815E-6	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.99998911614512	WITHOUT_CLASSIFICATION	1.0883854880020132E-5	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999995852307205	WITHOUT_CLASSIFICATION	4.147692794854798E-7	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999974071267019	WITHOUT_CLASSIFICATION	2.592873297936173E-6	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.99998911614512	WITHOUT_CLASSIFICATION	1.0883854880020132E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999974071267019	WITHOUT_CLASSIFICATION	2.592873297936173E-6	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999997634151249	WITHOUT_CLASSIFICATION	2.3658487525855503E-7	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999992593559189	WITHOUT_CLASSIFICATION	7.406440811447336E-7	IMPLEMENTATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999928624449416	WITHOUT_CLASSIFICATION	7.137555058514725E-6	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999951658698605	WITHOUT_CLASSIFICATION	4.834130139492201E-5	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999861523143	WITHOUT_CLASSIFICATION	1.3847685642194235E-8	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999999964088703	WITHOUT_CLASSIFICATION	3.59112986606537E-9	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999563530757434	WITHOUT_CLASSIFICATION	4.3646924256544524E-5	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9640822844530292	WITHOUT_CLASSIFICATION	0.03591771554697083	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9995309081362636	WITHOUT_CLASSIFICATION	4.690918637364464E-4	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9999423671172255	WITHOUT_CLASSIFICATION	5.763288277452833E-5	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999913104380633	WITHOUT_CLASSIFICATION	8.689561936642483E-6	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999974071267019	WITHOUT_CLASSIFICATION	2.592873297936173E-6	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999885973758	WITHOUT_CLASSIFICATION	1.140262413233651E-8	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.999956260642131	WITHOUT_CLASSIFICATION	4.3739357869074255E-5	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999951406422741	WITHOUT_CLASSIFICATION	4.859357725861187E-6	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999993775796	WITHOUT_CLASSIFICATION	6.224203461676618E-10	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999529595041	WITHOUT_CLASSIFICATION	4.7040496031070805E-8	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999437010301323	WITHOUT_CLASSIFICATION	5.629896986769386E-5	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999979123298349	WITHOUT_CLASSIFICATION	2.087670165111343E-6	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999430072071	WITHOUT_CLASSIFICATION	5.699279299705058E-8	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999990698344116	WITHOUT_CLASSIFICATION	9.301655885757762E-7	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999865550638	WITHOUT_CLASSIFICATION	1.3444936212992703E-8	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999979519961717	WITHOUT_CLASSIFICATION	2.048003828285608E-6	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999985253942418	WITHOUT_CLASSIFICATION	1.4746057582123772E-6	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9194872967308666	WITHOUT_CLASSIFICATION	0.0805127032691335	IMPLEMENTATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999996123575536	WITHOUT_CLASSIFICATION	3.8764244640190525E-7	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999994987552613	WITHOUT_CLASSIFICATION	5.012447387313322E-7	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9744779231027317	WITHOUT_CLASSIFICATION	0.025522076897268174	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999732687896	WITHOUT_CLASSIFICATION	2.6731210441796345E-8	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999999216211169	WITHOUT_CLASSIFICATION	7.837888308467928E-7	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999952391876709	WITHOUT_CLASSIFICATION	4.76081232911333E-6	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.999999868787982	WITHOUT_CLASSIFICATION	1.3121201809054436E-7	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.999999947166106	WITHOUT_CLASSIFICATION	5.283389395955419E-8	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999894069546	WITHOUT_CLASSIFICATION	1.0593045311345831E-8	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999998381009317	WITHOUT_CLASSIFICATION	1.6189906813371786E-7	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999998645709	WITHOUT_CLASSIFICATION	1.3542918200530248E-10	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999894069546	WITHOUT_CLASSIFICATION	1.0593045311345831E-8	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999998734267833	WITHOUT_CLASSIFICATION	1.2657321676335514E-7	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999974207742954	WITHOUT_CLASSIFICATION	2.5792257046031182E-6	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.99998911614512	WITHOUT_CLASSIFICATION	1.0883854880020132E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999931822385494	WITHOUT_CLASSIFICATION	6.817761450581465E-6	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.9999997053373271	WITHOUT_CLASSIFICATION	2.946626729394373E-7	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998800497245	WITHOUT_CLASSIFICATION	1.1995027553135836E-7	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998800497245	WITHOUT_CLASSIFICATION	1.1995027553135836E-7	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999961595303416	WITHOUT_CLASSIFICATION	3.840469658446378E-6	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999894449059	WITHOUT_CLASSIFICATION	1.0555094134833194E-8	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.999999996732994	WITHOUT_CLASSIFICATION	3.2670058924161255E-9	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999999999985974	WITHOUT_CLASSIFICATION	1.4025876447251988E-11	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999999845151372	WITHOUT_CLASSIFICATION	1.548486280820723E-7	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999708244129444	WITHOUT_CLASSIFICATION	2.9175587055531555E-5	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999995560469238	WITHOUT_CLASSIFICATION	4.439530761948219E-6	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.9999390893774845	WITHOUT_CLASSIFICATION	6.091062251546338E-5	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999973686795847	WITHOUT_CLASSIFICATION	2.631320415338805E-6	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999899918317	WITHOUT_CLASSIFICATION	1.0008168211696738E-8	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997852653127	WITHOUT_CLASSIFICATION	2.1473468730758696E-7	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997852653127	WITHOUT_CLASSIFICATION	2.1473468730758696E-7	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999873378908329	WITHOUT_CLASSIFICATION	1.2662109167139204E-5	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999640817702	WITHOUT_CLASSIFICATION	3.591822971572077E-8	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999967772927542	WITHOUT_CLASSIFICATION	3.2227072459237343E-6	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997852653127	WITHOUT_CLASSIFICATION	2.1473468730758696E-7	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999873378908329	WITHOUT_CLASSIFICATION	1.2662109167139204E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999873378908329	WITHOUT_CLASSIFICATION	1.2662109167139204E-5	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.999999884954212	WITHOUT_CLASSIFICATION	1.1504578795589541E-7	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.999905497001095	WITHOUT_CLASSIFICATION	9.45029989050802E-5	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999859916616	WITHOUT_CLASSIFICATION	1.4008338363030348E-8	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999111925136	WITHOUT_CLASSIFICATION	8.880748634700174E-8	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999793833352908	WITHOUT_CLASSIFICATION	2.0616664709215388E-5	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999793833352908	WITHOUT_CLASSIFICATION	2.0616664709215388E-5	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999997195003445	WITHOUT_CLASSIFICATION	2.804996554276905E-7	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999999998862968	WITHOUT_CLASSIFICATION	1.13703212084653E-9	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.9999997250664285	WITHOUT_CLASSIFICATION	2.7493357152462433E-7	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999169152325	WITHOUT_CLASSIFICATION	8.308476748387117E-8	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999169152325	WITHOUT_CLASSIFICATION	8.308476748387117E-8	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999998953431264	WITHOUT_CLASSIFICATION	1.0465687372999884E-7	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999818158039173	WITHOUT_CLASSIFICATION	1.8184196082687855E-5	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999999063673072	WITHOUT_CLASSIFICATION	9.363269284729567E-8	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999945733152	WITHOUT_CLASSIFICATION	5.4266848167259105E-9	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999999998873197	WITHOUT_CLASSIFICATION	1.1268029796149962E-10	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999329995081	WITHOUT_CLASSIFICATION	6.700049194705172E-8	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999996564137648	WITHOUT_CLASSIFICATION	3.4358623517137506E-7	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999969234805375	WITHOUT_CLASSIFICATION	3.0765194625309014E-6	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.9999953424143523	WITHOUT_CLASSIFICATION	4.657585647794769E-6	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999999063673072	WITHOUT_CLASSIFICATION	9.363269284729567E-8	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.9999972157882754	WITHOUT_CLASSIFICATION	2.784211724649339E-6	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.999916130518806	WITHOUT_CLASSIFICATION	8.386948119392376E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.999916130518806	WITHOUT_CLASSIFICATION	8.386948119392376E-5	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999890051928	WITHOUT_CLASSIFICATION	1.0994807167552504E-8	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999399659250371	WITHOUT_CLASSIFICATION	6.003407496294933E-5	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999999142571	WITHOUT_CLASSIFICATION	8.574282994424234E-11	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9986004430866015	WITHOUT_CLASSIFICATION	0.0013995569133986219	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999999164701421	WITHOUT_CLASSIFICATION	8.352985800086337E-8	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999518055375508	WITHOUT_CLASSIFICATION	4.81944624492591E-5	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9999814811451407	WITHOUT_CLASSIFICATION	1.8518854859322024E-5	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.9999989318188175	WITHOUT_CLASSIFICATION	1.0681811825299698E-6	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999993023389703	WITHOUT_CLASSIFICATION	6.97661029839356E-7	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999901573656	WITHOUT_CLASSIFICATION	9.842634245249094E-9	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999901573656	WITHOUT_CLASSIFICATION	9.842634245249094E-9	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999999059841274	WITHOUT_CLASSIFICATION	9.401587258478E-8	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.999962783471912	WITHOUT_CLASSIFICATION	3.721652808803126E-5	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999999251565365	WITHOUT_CLASSIFICATION	7.484346358515601E-8	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999823120103578	WITHOUT_CLASSIFICATION	1.7687989642200584E-5	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.9999997349283197	WITHOUT_CLASSIFICATION	2.6507168034866283E-7	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999942243301813	WITHOUT_CLASSIFICATION	5.775669818803953E-6	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.999996780387785	WITHOUT_CLASSIFICATION	3.21961221503381E-6	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.999999844891427	WITHOUT_CLASSIFICATION	1.551085730197804E-7	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999997601200239	WITHOUT_CLASSIFICATION	2.3987997611118246E-7	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.9999936507868679	WITHOUT_CLASSIFICATION	6.349213132133889E-6	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999984927965722	WITHOUT_CLASSIFICATION	1.507203427853072E-6	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.9999857451179525	WITHOUT_CLASSIFICATION	1.425488204748912E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999766600750448	WITHOUT_CLASSIFICATION	2.3339924955232972E-5	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999966951574132	WITHOUT_CLASSIFICATION	3.3048425868358405E-6	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999463127249	WITHOUT_CLASSIFICATION	5.3687275020733396E-8	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999994280543302	WITHOUT_CLASSIFICATION	5.719456698373024E-7	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999994280543302	WITHOUT_CLASSIFICATION	5.719456698373024E-7	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.9999996585212703	WITHOUT_CLASSIFICATION	3.414787296898943E-7	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9998614516278305	WITHOUT_CLASSIFICATION	1.38548372169557E-4	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.999998555076591	WITHOUT_CLASSIFICATION	1.4449234089940003E-6	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999979500581113	WITHOUT_CLASSIFICATION	2.049941888608458E-6	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999935130834484	WITHOUT_CLASSIFICATION	6.4869165515928105E-6	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999982365655491	WITHOUT_CLASSIFICATION	1.7634344509759494E-6	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999998425590104	WITHOUT_CLASSIFICATION	1.5744098959090628E-7	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999967062102757	WITHOUT_CLASSIFICATION	3.2937897242353203E-6	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999988770679511	WITHOUT_CLASSIFICATION	1.1229320488179074E-6	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.999996055539425	WITHOUT_CLASSIFICATION	3.944460574982905E-6	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999983054973282	WITHOUT_CLASSIFICATION	1.6945026718513773E-6	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.9999833271963697	WITHOUT_CLASSIFICATION	1.6672803630245478E-5	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.9999362378297072	WITHOUT_CLASSIFICATION	6.376217029275974E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999992645040948	WITHOUT_CLASSIFICATION	7.354959051324466E-7	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999721055954	WITHOUT_CLASSIFICATION	2.7894404544908677E-8	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999980486485484	WITHOUT_CLASSIFICATION	1.951351451545946E-6	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999998436650523	WITHOUT_CLASSIFICATION	1.5633494772771618E-7	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999711637920546	WITHOUT_CLASSIFICATION	2.8836207945409315E-5	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.9999979262873201	WITHOUT_CLASSIFICATION	2.073712679954705E-6	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999823120103578	WITHOUT_CLASSIFICATION	1.7687989642200584E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999823120103578	WITHOUT_CLASSIFICATION	1.7687989642200584E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999942243301813	WITHOUT_CLASSIFICATION	5.775669818803953E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999942243301813	WITHOUT_CLASSIFICATION	5.775669818803953E-6	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999766600750448	WITHOUT_CLASSIFICATION	2.3339924955232972E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999994280543302	WITHOUT_CLASSIFICATION	5.719456698373024E-7	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999992645040948	WITHOUT_CLASSIFICATION	7.354959051324466E-7	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999875585146	WITHOUT_CLASSIFICATION	1.2441485467887728E-8	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999985121856434	WITHOUT_CLASSIFICATION	1.4878143565807607E-6	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999992224960554	WITHOUT_CLASSIFICATION	7.775039445314072E-7	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9997401629162729	WITHOUT_CLASSIFICATION	2.5983708372710247E-4	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9999815325228795	WITHOUT_CLASSIFICATION	1.8467477120476795E-5	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999208668174	WITHOUT_CLASSIFICATION	7.913318259211441E-8	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.999994330661852	WITHOUT_CLASSIFICATION	5.669338148082468E-6	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999957564212771	WITHOUT_CLASSIFICATION	4.2435787228598265E-6	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9999712387496533	WITHOUT_CLASSIFICATION	2.8761250346717157E-5	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.9999991958943711	WITHOUT_CLASSIFICATION	8.04105628743165E-7	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.999988038597755	WITHOUT_CLASSIFICATION	1.196140224496373E-5	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.999988038597755	WITHOUT_CLASSIFICATION	1.196140224496373E-5	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999847107309	WITHOUT_CLASSIFICATION	1.5289269043128005E-8	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999913287434529	WITHOUT_CLASSIFICATION	8.671256547138165E-6	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999814273623627	WITHOUT_CLASSIFICATION	1.857263763731507E-5	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9998194679010324	WITHOUT_CLASSIFICATION	1.8053209896775585E-4	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999490684089	WITHOUT_CLASSIFICATION	5.0931590992088693E-8	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.9999988252557077	WITHOUT_CLASSIFICATION	1.174744292284729E-6	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.9999990568274382	WITHOUT_CLASSIFICATION	9.431725619114496E-7	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999998906351654	WITHOUT_CLASSIFICATION	1.093648346021116E-6	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.9999788090440949	WITHOUT_CLASSIFICATION	2.1190955905100106E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999995497160957	WITHOUT_CLASSIFICATION	4.5028390416073774E-7	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999995497160957	WITHOUT_CLASSIFICATION	4.5028390416073774E-7	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.9999997115748488	WITHOUT_CLASSIFICATION	2.88425151254568E-7	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999967221087288	WITHOUT_CLASSIFICATION	3.2778912711088283E-6	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.9999945489825679	WITHOUT_CLASSIFICATION	5.451017432203417E-6	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999997300035788	WITHOUT_CLASSIFICATION	2.699964212020833E-7	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.9999949614260689	WITHOUT_CLASSIFICATION	5.038573931103494E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999942243301813	WITHOUT_CLASSIFICATION	5.775669818803953E-6	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999766600750448	WITHOUT_CLASSIFICATION	2.3339924955232972E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999463127249	WITHOUT_CLASSIFICATION	5.3687275020733396E-8	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999992645040948	WITHOUT_CLASSIFICATION	7.354959051324466E-7	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999992645040948	WITHOUT_CLASSIFICATION	7.354959051324466E-7	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992875984682	WITHOUT_CLASSIFICATION	7.124015317937599E-7	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992875984682	WITHOUT_CLASSIFICATION	7.124015317937599E-7	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999982956817318	WITHOUT_CLASSIFICATION	1.7043182682205567E-6	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999684682254145	WITHOUT_CLASSIFICATION	3.153177458541288E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999684682254145	WITHOUT_CLASSIFICATION	3.153177458541288E-5	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9999849493278447	WITHOUT_CLASSIFICATION	1.5050672155388507E-5	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.9999986743532421	WITHOUT_CLASSIFICATION	1.3256467579207442E-6	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.99999874921273	WITHOUT_CLASSIFICATION	1.2507872700468654E-6	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999957172232974	WITHOUT_CLASSIFICATION	4.2827767025837085E-6	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999998923765325	WITHOUT_CLASSIFICATION	1.0762346754967208E-7	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999965956653647	WITHOUT_CLASSIFICATION	3.404334635292467E-6	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999965956653647	WITHOUT_CLASSIFICATION	3.404334635292467E-6	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.9983558451964959	WITHOUT_CLASSIFICATION	0.0016441548035040663	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.9999957392503996	WITHOUT_CLASSIFICATION	4.2607496002949835E-6	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.9999990887919228	WITHOUT_CLASSIFICATION	9.112080771038507E-7	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.9999773160185393	WITHOUT_CLASSIFICATION	2.268398146068247E-5	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9999996820901642	WITHOUT_CLASSIFICATION	3.179098357536949E-7	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.9999834388786519	WITHOUT_CLASSIFICATION	1.6561121348062278E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999990687331543	WITHOUT_CLASSIFICATION	9.312668458024729E-7	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999965174952897	WITHOUT_CLASSIFICATION	3.4825047103708006E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999965174952897	WITHOUT_CLASSIFICATION	3.4825047103708006E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999799672061013	WITHOUT_CLASSIFICATION	2.0032793898717813E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999799672061013	WITHOUT_CLASSIFICATION	2.0032793898717813E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999706355003574	WITHOUT_CLASSIFICATION	2.936449964263084E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999706355003574	WITHOUT_CLASSIFICATION	2.936449964263084E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999969962053	WITHOUT_CLASSIFICATION	3.0037946306359573E-9	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999969962053	WITHOUT_CLASSIFICATION	3.0037946306359573E-9	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999965956653647	WITHOUT_CLASSIFICATION	3.404334635292467E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999990687331543	WITHOUT_CLASSIFICATION	9.312668458024729E-7	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999965174952897	WITHOUT_CLASSIFICATION	3.4825047103708006E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999965174952897	WITHOUT_CLASSIFICATION	3.4825047103708006E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999799672061013	WITHOUT_CLASSIFICATION	2.0032793898717813E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999706355003574	WITHOUT_CLASSIFICATION	2.936449964263084E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999706355003574	WITHOUT_CLASSIFICATION	2.936449964263084E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999969962053	WITHOUT_CLASSIFICATION	3.0037946306359573E-9	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999920433967207	WITHOUT_CLASSIFICATION	7.956603279314992E-6	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999999796108013	WITHOUT_CLASSIFICATION	2.0389198771471E-8	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.9999932092803739	WITHOUT_CLASSIFICATION	6.790719626110136E-6	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998027132262166	WITHOUT_CLASSIFICATION	1.9728677378339955E-4	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.9999992541041881	WITHOUT_CLASSIFICATION	7.458958119012077E-7	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999606202612842	WITHOUT_CLASSIFICATION	3.9379738715807116E-5	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999796675729	WITHOUT_CLASSIFICATION	2.033242707746211E-8	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.99999947701266	WITHOUT_CLASSIFICATION	5.229873399576262E-7	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999993399819548	WITHOUT_CLASSIFICATION	6.600180451382948E-7	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999877235781	WITHOUT_CLASSIFICATION	1.2276421896919499E-8	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999953753028696	WITHOUT_CLASSIFICATION	4.624697130358046E-6	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999303777373	WITHOUT_CLASSIFICATION	6.962226271793076E-8	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999961595303416	WITHOUT_CLASSIFICATION	3.840469658446378E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999606202612842	WITHOUT_CLASSIFICATION	3.9379738715807116E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999606202612842	WITHOUT_CLASSIFICATION	3.9379738715807116E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999606202612842	WITHOUT_CLASSIFICATION	3.9379738715807116E-5	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999999904581983	WITHOUT_CLASSIFICATION	9.541801625718076E-9	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999856011901	WITHOUT_CLASSIFICATION	1.4398809959191949E-8	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999856011901	WITHOUT_CLASSIFICATION	1.4398809959191949E-8	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999890697305	WITHOUT_CLASSIFICATION	1.0930269393752284E-8	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999999352619	WITHOUT_CLASSIFICATION	6.473807076937382E-11	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999882077241	WITHOUT_CLASSIFICATION	1.1792275968083318E-8	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999802496211462	WITHOUT_CLASSIFICATION	1.9750378853870614E-5	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999802496211462	WITHOUT_CLASSIFICATION	1.9750378853870614E-5	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999971843733	WITHOUT_CLASSIFICATION	2.8156267921843955E-9	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999860256059122	WITHOUT_CLASSIFICATION	1.3974394087768727E-5	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999860256059122	WITHOUT_CLASSIFICATION	1.3974394087768727E-5	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999998610598102	WITHOUT_CLASSIFICATION	1.3894018977851025E-7	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999875364574	WITHOUT_CLASSIFICATION	1.246354259010104E-8	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999991598914	WITHOUT_CLASSIFICATION	8.401086160211851E-10	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999925879269078	WITHOUT_CLASSIFICATION	7.412073092202454E-6	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.9999933322365804	WITHOUT_CLASSIFICATION	6.667763419575312E-6	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.999992319559262	WITHOUT_CLASSIFICATION	7.680440737901125E-6	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999989412717986	WITHOUT_CLASSIFICATION	1.0587282013496745E-6	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999945902948507	WITHOUT_CLASSIFICATION	5.409705149327757E-6	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.9781834153619123	WITHOUT_CLASSIFICATION	0.02181658463808756	IMPLEMENTATION
ID	WITHOUT_CLASSIFICATION	0.9998868386744086	WITHOUT_CLASSIFICATION	1.1316132559128657E-4	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999990867243401	WITHOUT_CLASSIFICATION	9.132756599196748E-7	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999662370553905	WITHOUT_CLASSIFICATION	3.376294460961104E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999432412681	WITHOUT_CLASSIFICATION	5.675873203324941E-8	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999995573675776	WITHOUT_CLASSIFICATION	4.426324223030346E-7	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999945652063	WITHOUT_CLASSIFICATION	5.434793737166507E-9	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999662370553905	WITHOUT_CLASSIFICATION	3.376294460961104E-5	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999998432483848	WITHOUT_CLASSIFICATION	1.567516152078818E-7	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999943211583653	WITHOUT_CLASSIFICATION	5.678841634667036E-6	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999991456133167	WITHOUT_CLASSIFICATION	8.543866832990501E-6	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9999878475800045	WITHOUT_CLASSIFICATION	1.2152419995597657E-5	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999982289917813	WITHOUT_CLASSIFICATION	1.771008218810118E-6	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999987065038999	WITHOUT_CLASSIFICATION	1.2934960999989662E-6	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999985398202955	WITHOUT_CLASSIFICATION	1.4601797045810761E-6	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999880570391975	WITHOUT_CLASSIFICATION	1.1942960802609018E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999989964253319	WITHOUT_CLASSIFICATION	1.0035746681225975E-6	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999997978156	WITHOUT_CLASSIFICATION	2.021843597124152E-10	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999910733508337	WITHOUT_CLASSIFICATION	8.926649166354456E-6	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.999999993397118	WITHOUT_CLASSIFICATION	6.602881968176039E-9	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999851238127869	WITHOUT_CLASSIFICATION	1.4876187213176815E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999989412717986	WITHOUT_CLASSIFICATION	1.0587282013496745E-6	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999989964253319	WITHOUT_CLASSIFICATION	1.0035746681225975E-6	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999910733508337	WITHOUT_CLASSIFICATION	8.926649166354456E-6	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999851238127869	WITHOUT_CLASSIFICATION	1.4876187213176815E-5	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999969075134401	WITHOUT_CLASSIFICATION	3.092486559828944E-6	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.9999947079441122	WITHOUT_CLASSIFICATION	5.2920558877878316E-6	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999984587518792	WITHOUT_CLASSIFICATION	1.541248120758728E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999930295217788	WITHOUT_CLASSIFICATION	6.9704782211784505E-6	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.999997582784963	WITHOUT_CLASSIFICATION	2.417215037043176E-6	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9999831940971373	WITHOUT_CLASSIFICATION	1.6805902862703185E-5	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.9999995408828217	WITHOUT_CLASSIFICATION	4.591171782432437E-7	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999929693587994	WITHOUT_CLASSIFICATION	7.030641200531791E-6	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999997049713754	WITHOUT_CLASSIFICATION	2.9502862456653825E-7	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999998948990495	WITHOUT_CLASSIFICATION	1.051009505029428E-7	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999993516502101	WITHOUT_CLASSIFICATION	6.483497898675499E-7	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999947307358152	WITHOUT_CLASSIFICATION	5.269264184776034E-6	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999991672968245	WITHOUT_CLASSIFICATION	8.327031756182299E-7	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999919803719061	WITHOUT_CLASSIFICATION	8.019628094025155E-6	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.9999959452904865	WITHOUT_CLASSIFICATION	4.054709513517059E-6	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.999998134402223	WITHOUT_CLASSIFICATION	1.8655977769288108E-6	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999904382157474	WITHOUT_CLASSIFICATION	9.561784252603302E-6	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999770249648	WITHOUT_CLASSIFICATION	2.2975035171267746E-8	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.9999907758689159	WITHOUT_CLASSIFICATION	9.224131084094842E-6	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999989964253319	WITHOUT_CLASSIFICATION	1.0035746681225975E-6	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999992584248165	WITHOUT_CLASSIFICATION	7.415751834434565E-7	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999991900804632	WITHOUT_CLASSIFICATION	8.099195368190612E-7	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.9999987919354084	WITHOUT_CLASSIFICATION	1.208064591591369E-6	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999961354884042	WITHOUT_CLASSIFICATION	3.864511595784677E-6	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.9999983076165024	WITHOUT_CLASSIFICATION	1.6923834975820982E-6	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999990487818925	WITHOUT_CLASSIFICATION	9.512181076500932E-7	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999999968457691	WITHOUT_CLASSIFICATION	3.1542308913401226E-8	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999995280732534	WITHOUT_CLASSIFICATION	4.7192674662473425E-7	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999963313801066	WITHOUT_CLASSIFICATION	3.6686198934139547E-6	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.9999886548443747	WITHOUT_CLASSIFICATION	1.1345155625376098E-5	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999856908652639	WITHOUT_CLASSIFICATION	1.4309134736053433E-5	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999932011587718	WITHOUT_CLASSIFICATION	6.798841228284721E-6	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9660056798152745	WITHOUT_CLASSIFICATION	0.033994320184725486	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999845848951784	WITHOUT_CLASSIFICATION	1.541510482168907E-5	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.9999997431676837	WITHOUT_CLASSIFICATION	2.5683231628881054E-7	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999957106269951	WITHOUT_CLASSIFICATION	4.2893730047951495E-6	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.9999873370902701	WITHOUT_CLASSIFICATION	1.2662909729917688E-5	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999875941261593	WITHOUT_CLASSIFICATION	1.2405873840686765E-5	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.9999923431840105	WITHOUT_CLASSIFICATION	7.65681598948818E-6	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999782056597671	WITHOUT_CLASSIFICATION	2.1794340232862146E-5	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999997556885195	WITHOUT_CLASSIFICATION	2.4431148041012405E-7	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999897456354949	WITHOUT_CLASSIFICATION	1.0254364505107008E-4	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999992310978856	WITHOUT_CLASSIFICATION	7.689021143851188E-7	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999998789435037	WITHOUT_CLASSIFICATION	1.2105649625975273E-7	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999809201110783	WITHOUT_CLASSIFICATION	1.9079888921737212E-5	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999809201110783	WITHOUT_CLASSIFICATION	1.9079888921737212E-5	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999146663212902	WITHOUT_CLASSIFICATION	8.533367870976918E-5	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9997049357906451	WITHOUT_CLASSIFICATION	2.9506420935496744E-4	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999967893811801	WITHOUT_CLASSIFICATION	3.210618819955269E-6	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999995062079897	WITHOUT_CLASSIFICATION	4.937920102422209E-7	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999999292873925	WITHOUT_CLASSIFICATION	7.071260754454383E-8	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999999792953596	WITHOUT_CLASSIFICATION	2.0704640413293246E-8	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999988306220796	WITHOUT_CLASSIFICATION	1.169377920374063E-6	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999956838757229	WITHOUT_CLASSIFICATION	4.3161242771075325E-6	IMPLEMENTATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999984418238459	WITHOUT_CLASSIFICATION	1.5581761540803956E-6	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999991483275533	WITHOUT_CLASSIFICATION	8.516724465677906E-7	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999941681804487	WITHOUT_CLASSIFICATION	5.831819551242218E-6	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999997406703444	WITHOUT_CLASSIFICATION	2.593296556412779E-7	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.9999993441234272	WITHOUT_CLASSIFICATION	6.558765727548381E-7	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999993384925507	WITHOUT_CLASSIFICATION	6.615074492671944E-7	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999939680913565	WITHOUT_CLASSIFICATION	6.031908643426549E-6	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999999057605394	WITHOUT_CLASSIFICATION	9.423946062733461E-8	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999956003511404	WITHOUT_CLASSIFICATION	4.399648859544942E-6	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999999030389004	WITHOUT_CLASSIFICATION	9.696109957992985E-8	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999491862555	WITHOUT_CLASSIFICATION	5.081374465341632E-8	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999731852868	WITHOUT_CLASSIFICATION	2.681471322854135E-8	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894692489835	WITHOUT_CLASSIFICATION	1.0530751016609332E-5	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999907556237	WITHOUT_CLASSIFICATION	9.244376172999567E-9	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999999124546971	WITHOUT_CLASSIFICATION	8.754530280092896E-8	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999979738998721	WITHOUT_CLASSIFICATION	2.0261001279734574E-6	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999998532794658	WITHOUT_CLASSIFICATION	1.4672053418634797E-7	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999990654121464	WITHOUT_CLASSIFICATION	9.345878536312086E-7	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999869648476888	WITHOUT_CLASSIFICATION	1.3035152311115334E-5	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999995115240555	WITHOUT_CLASSIFICATION	4.884759445224529E-7	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999993074066	WITHOUT_CLASSIFICATION	6.925934611881535E-10	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999990390158151	WITHOUT_CLASSIFICATION	9.609841849193234E-7	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999731852868	WITHOUT_CLASSIFICATION	2.681471322854135E-8	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999426978574735	WITHOUT_CLASSIFICATION	5.73021425265175E-5	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999558543619345	WITHOUT_CLASSIFICATION	4.414563806545047E-5	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999958370362232	WITHOUT_CLASSIFICATION	4.162963776799071E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999702394323332	WITHOUT_CLASSIFICATION	2.9760567666817246E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999702394323332	WITHOUT_CLASSIFICATION	2.9760567666817246E-5	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.999999992438573	WITHOUT_CLASSIFICATION	7.561426988112178E-9	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999999373949966	WITHOUT_CLASSIFICATION	6.260500344666471E-8	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999991731991155	WITHOUT_CLASSIFICATION	8.268008845920625E-7	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999991731991155	WITHOUT_CLASSIFICATION	8.268008845920625E-7	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999992310978856	WITHOUT_CLASSIFICATION	7.689021143851188E-7	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999999902606599	WITHOUT_CLASSIFICATION	9.73934009658575E-8	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999834171289453	WITHOUT_CLASSIFICATION	1.6582871054659132E-5	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999996380140115	WITHOUT_CLASSIFICATION	3.6198598852900525E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999999059841274	WITHOUT_CLASSIFICATION	9.401587258478E-8	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999834171289453	WITHOUT_CLASSIFICATION	1.6582871054659132E-5	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999996380140115	WITHOUT_CLASSIFICATION	3.6198598852900525E-7	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999903400360866	WITHOUT_CLASSIFICATION	9.65996391348244E-6	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999984921334	WITHOUT_CLASSIFICATION	1.5078665570988053E-9	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999075847019	WITHOUT_CLASSIFICATION	9.241529808188406E-8	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.9999994462622573	WITHOUT_CLASSIFICATION	5.537377426258919E-7	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999678366877265	WITHOUT_CLASSIFICATION	3.2163312273608925E-5	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9998688051791306	WITHOUT_CLASSIFICATION	1.311948208695051E-4	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999991111738433	WITHOUT_CLASSIFICATION	8.888261567891584E-7	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999991111738433	WITHOUT_CLASSIFICATION	8.888261567891584E-7	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999999932711406	WITHOUT_CLASSIFICATION	6.728859361305505E-9	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999993580314	WITHOUT_CLASSIFICATION	6.419686325435313E-10	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999964774676229	WITHOUT_CLASSIFICATION	3.5225323771247673E-6	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999949706382	WITHOUT_CLASSIFICATION	5.029361844215045E-9	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999969997442781	WITHOUT_CLASSIFICATION	3.0002557219105046E-6	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999996186392301	WITHOUT_CLASSIFICATION	3.8136076991068277E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999999059841274	WITHOUT_CLASSIFICATION	9.401587258478E-8	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999998478820021	WITHOUT_CLASSIFICATION	1.5211799786357002E-7	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999465267091	WITHOUT_CLASSIFICATION	5.3473290971817767E-8	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999465267091	WITHOUT_CLASSIFICATION	5.3473290971817767E-8	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999986916243684	WITHOUT_CLASSIFICATION	1.3083756316607558E-6	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999903400360866	WITHOUT_CLASSIFICATION	9.65996391348244E-6	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999733931637904	WITHOUT_CLASSIFICATION	2.6606836209520693E-5	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999840748635189	WITHOUT_CLASSIFICATION	1.5925136480990593E-5	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.999538792731068	WITHOUT_CLASSIFICATION	4.612072689319466E-4	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999999641529328	WITHOUT_CLASSIFICATION	3.584706716044551E-8	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998259351693186	WITHOUT_CLASSIFICATION	1.7406483068148934E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999903400360866	WITHOUT_CLASSIFICATION	9.65996391348244E-6	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999999641529328	WITHOUT_CLASSIFICATION	3.584706716044551E-8	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998259351693186	WITHOUT_CLASSIFICATION	1.7406483068148934E-4	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999998970360136	WITHOUT_CLASSIFICATION	1.0296398644507137E-7	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999987399304483	WITHOUT_CLASSIFICATION	1.2600695516368834E-6	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999996751384158	WITHOUT_CLASSIFICATION	3.248615841439304E-7	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999903400360866	WITHOUT_CLASSIFICATION	9.65996391348244E-6	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999903400360866	WITHOUT_CLASSIFICATION	9.65996391348244E-6	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9999994125085363	WITHOUT_CLASSIFICATION	5.874914636732101E-7	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.9999986746869898	WITHOUT_CLASSIFICATION	1.3253130101886542E-6	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.9999997059461858	WITHOUT_CLASSIFICATION	2.9405381420328106E-7	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999990229099082	WITHOUT_CLASSIFICATION	9.77090091801693E-6	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.9999997816210906	WITHOUT_CLASSIFICATION	2.183789094526663E-7	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999951134887	WITHOUT_CLASSIFICATION	4.886511321204687E-9	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999956017173057	WITHOUT_CLASSIFICATION	4.398282694162892E-6	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999997860953725	WITHOUT_CLASSIFICATION	2.1390462748809112E-7	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999947514700398	WITHOUT_CLASSIFICATION	5.248529960124074E-6	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.9999986333472153	WITHOUT_CLASSIFICATION	1.3666527846361914E-6	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999910319692423	WITHOUT_CLASSIFICATION	8.968030757772395E-6	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999975337305299	WITHOUT_CLASSIFICATION	2.466269470100452E-5	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999999995304105	WITHOUT_CLASSIFICATION	4.6958949699706976E-9	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999910645584154	WITHOUT_CLASSIFICATION	8.935441584663033E-6	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982840581938	WITHOUT_CLASSIFICATION	1.7159418062006233E-6	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.999999978385953	WITHOUT_CLASSIFICATION	2.161404692237961E-8	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999990229099082	WITHOUT_CLASSIFICATION	9.77090091801693E-6	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999978997257828	WITHOUT_CLASSIFICATION	2.1002742171444246E-6	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999992189515448	WITHOUT_CLASSIFICATION	7.810484552547536E-7	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999955738703	WITHOUT_CLASSIFICATION	4.426129659465228E-9	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999887657170389	WITHOUT_CLASSIFICATION	1.1234282961152852E-5	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9998344374851826	WITHOUT_CLASSIFICATION	1.6556251481737852E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9998344374851826	WITHOUT_CLASSIFICATION	1.6556251481737852E-4	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999990229099082	WITHOUT_CLASSIFICATION	9.77090091801693E-6	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999998377870131	WITHOUT_CLASSIFICATION	1.6221298694860758E-7	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.999999976354591	WITHOUT_CLASSIFICATION	2.3645409013645594E-8	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9995333988552192	WITHOUT_CLASSIFICATION	4.6660114478082755E-4	IMPLEMENTATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999999635319807	WITHOUT_CLASSIFICATION	3.646801932824037E-8	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999987330099224	WITHOUT_CLASSIFICATION	1.2669900775727923E-6	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999831326022666	WITHOUT_CLASSIFICATION	1.686739773344328E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999978514144668	WITHOUT_CLASSIFICATION	2.148585533261172E-6	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999997313847108	WITHOUT_CLASSIFICATION	2.6861528928202633E-7	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999986712571506	WITHOUT_CLASSIFICATION	1.328742849483639E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727213081163	WITHOUT_CLASSIFICATION	2.727869188364979E-5	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999998550513276	WITHOUT_CLASSIFICATION	1.4494867240801374E-7	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999996161236032	WITHOUT_CLASSIFICATION	3.8387639674331124E-7	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999989453302578	WITHOUT_CLASSIFICATION	1.0546697421521281E-6	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9995724690701636	WITHOUT_CLASSIFICATION	4.2753092983641275E-4	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999970970108006	WITHOUT_CLASSIFICATION	2.9029891993044057E-6	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999920529082	WITHOUT_CLASSIFICATION	7.947091791242232E-8	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999999957350527	WITHOUT_CLASSIFICATION	4.264947322671472E-9	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999998661591958	WITHOUT_CLASSIFICATION	1.3384080416992012E-7	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999957375765303	WITHOUT_CLASSIFICATION	4.262423469705702E-6	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999915996521	WITHOUT_CLASSIFICATION	8.400347893317726E-8	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999236630008	WITHOUT_CLASSIFICATION	7.633699920964022E-8	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999937598262519	WITHOUT_CLASSIFICATION	6.240173748073703E-6	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999974564919138	WITHOUT_CLASSIFICATION	2.5435080861985906E-5	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995800026029414	WITHOUT_CLASSIFICATION	4.1999739705860634E-4	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992040902518902	WITHOUT_CLASSIFICATION	7.959097481098434E-4	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999216306580601	WITHOUT_CLASSIFICATION	7.83693419399318E-5	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999826403570514	WITHOUT_CLASSIFICATION	1.735964294855087E-5	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992623233463113	WITHOUT_CLASSIFICATION	7.376766536887095E-4	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998831026082534	WITHOUT_CLASSIFICATION	1.1689739174660408E-4	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9943135350188265	WITHOUT_CLASSIFICATION	0.005686464981173556	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999874401004442	WITHOUT_CLASSIFICATION	1.2559899555730738E-5	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.9999063670787272	WITHOUT_CLASSIFICATION	9.36329212728858E-5	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999917097907178	WITHOUT_CLASSIFICATION	8.290209282199457E-6	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580126248829	WITHOUT_CLASSIFICATION	4.198737511707431E-5	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922233741596	WITHOUT_CLASSIFICATION	7.776625840367465E-6	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999432262437588	WITHOUT_CLASSIFICATION	5.677375624116208E-5	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998460835746865	WITHOUT_CLASSIFICATION	1.5391642531343042E-4	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999097605916266	WITHOUT_CLASSIFICATION	9.023940837330029E-5	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999915100270584	WITHOUT_CLASSIFICATION	8.489972941609944E-6	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994900842628481	WITHOUT_CLASSIFICATION	5.099157371518872E-4	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992243398926914	WITHOUT_CLASSIFICATION	7.756601073085101E-4	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999998685307251	WITHOUT_CLASSIFICATION	1.3146927491387066E-7	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701842735127	WITHOUT_CLASSIFICATION	2.9815726487236314E-5	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9871126192875797	WITHOUT_CLASSIFICATION	0.012887380712420288	IMPLEMENTATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998497435975	WITHOUT_CLASSIFICATION	1.5025640259141187E-7	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999375718436	WITHOUT_CLASSIFICATION	6.242815634143876E-8	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999594295225	WITHOUT_CLASSIFICATION	4.0570477467636324E-8	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.9999962509202787	WITHOUT_CLASSIFICATION	3.749079721428264E-6	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999996793656011	WITHOUT_CLASSIFICATION	3.206343989504901E-7	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999997363391	WITHOUT_CLASSIFICATION	2.636608686868959E-10	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999999541333064	WITHOUT_CLASSIFICATION	4.5866693442087156E-8	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999983312267756	WITHOUT_CLASSIFICATION	1.6687732244028307E-6	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999995881670731	WITHOUT_CLASSIFICATION	4.118329269073949E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727213081163	WITHOUT_CLASSIFICATION	2.727869188364979E-5	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999958644360384	WITHOUT_CLASSIFICATION	4.13556396168556E-6	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999994368497368	WITHOUT_CLASSIFICATION	5.63150263136108E-7	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999857384589	WITHOUT_CLASSIFICATION	1.426154103778262E-8	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999999969904655	WITHOUT_CLASSIFICATION	3.0095344357230763E-9	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999752664743997	WITHOUT_CLASSIFICATION	2.4733525600255154E-5	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9999984860668217	WITHOUT_CLASSIFICATION	1.5139331782135022E-6	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999996077863735	WITHOUT_CLASSIFICATION	3.922136264749393E-7	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999327162908141	WITHOUT_CLASSIFICATION	6.728370918583729E-5	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754064760448	WITHOUT_CLASSIFICATION	2.459352395526817E-5	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99998686114557	WITHOUT_CLASSIFICATION	1.3138854430051954E-5	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999871984761478	WITHOUT_CLASSIFICATION	1.2801523852175693E-5	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9991297072131349	WITHOUT_CLASSIFICATION	8.702927868651153E-4	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999997339199125	WITHOUT_CLASSIFICATION	2.660800874755644E-7	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9997559091538827	WITHOUT_CLASSIFICATION	2.4409084611727352E-4	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999886542115304	WITHOUT_CLASSIFICATION	1.1345788469619394E-5	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999263249983039	WITHOUT_CLASSIFICATION	7.367500169607182E-5	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999998838283081	WITHOUT_CLASSIFICATION	1.1617169195186128E-7	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999999587347989	WITHOUT_CLASSIFICATION	4.126520112185853E-8	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999998330470512	WITHOUT_CLASSIFICATION	1.6695294880181226E-7	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999995151218	WITHOUT_CLASSIFICATION	4.84878370610151E-10	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999229929945711	WITHOUT_CLASSIFICATION	7.700700542884145E-5	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999738231677668	WITHOUT_CLASSIFICATION	2.617683223310337E-5	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999990869927	WITHOUT_CLASSIFICATION	9.130074004172096E-10	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999943840142447	WITHOUT_CLASSIFICATION	5.61598575539753E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727213081163	WITHOUT_CLASSIFICATION	2.727869188364979E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999594295225	WITHOUT_CLASSIFICATION	4.0570477467636324E-8	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999979176544127	WITHOUT_CLASSIFICATION	2.0823455873144337E-6	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999985552263266	WITHOUT_CLASSIFICATION	1.444773673384562E-6	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999921171393947	WITHOUT_CLASSIFICATION	7.882860605197539E-6	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999994484000888	WITHOUT_CLASSIFICATION	5.515999111326767E-7	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999997198848702	WITHOUT_CLASSIFICATION	2.8011512983860445E-7	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.9999998666757838	WITHOUT_CLASSIFICATION	1.3332421616804342E-7	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9991297072131349	WITHOUT_CLASSIFICATION	8.702927868651153E-4	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999998902317719	WITHOUT_CLASSIFICATION	1.0976822801690154E-7	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999961551194267	WITHOUT_CLASSIFICATION	3.8448805733372216E-6	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999997403674314	WITHOUT_CLASSIFICATION	2.5963256849711077E-7	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999947067058721	WITHOUT_CLASSIFICATION	5.293294127982956E-6	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999998876364868	WITHOUT_CLASSIFICATION	1.1236351318572649E-7	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999107169151	WITHOUT_CLASSIFICATION	8.928308501818186E-8	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727213081163	WITHOUT_CLASSIFICATION	2.727869188364979E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727213081163	WITHOUT_CLASSIFICATION	2.727869188364979E-5	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999858708203998	WITHOUT_CLASSIFICATION	1.4129179600191666E-4	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.999999892372567	WITHOUT_CLASSIFICATION	1.0762743305484265E-7	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999999878272358	WITHOUT_CLASSIFICATION	1.2172764128791907E-8	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999996066235425	WITHOUT_CLASSIFICATION	3.933764574773464E-7	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999999853539343	WITHOUT_CLASSIFICATION	1.4646065674036417E-8	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999995571974144	WITHOUT_CLASSIFICATION	4.4280258564775593E-7	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999975926733982	WITHOUT_CLASSIFICATION	2.407326601827062E-6	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.9999693167141858	WITHOUT_CLASSIFICATION	3.068328581425392E-5	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999999615056812	WITHOUT_CLASSIFICATION	3.849431893342153E-8	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727213081163	WITHOUT_CLASSIFICATION	2.727869188364979E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999999965613376	WITHOUT_CLASSIFICATION	3.43866240727325E-8	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999900855664531	WITHOUT_CLASSIFICATION	9.914433546920905E-6	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999999967852995	WITHOUT_CLASSIFICATION	3.2147005853384737E-9	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999998025303359	WITHOUT_CLASSIFICATION	1.9746966410151235E-7	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999951081851168	WITHOUT_CLASSIFICATION	4.891814883113566E-6	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9998710995482921	WITHOUT_CLASSIFICATION	1.2890045170791528E-4	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999998082954432	WITHOUT_CLASSIFICATION	1.9170455663449294E-7	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.9999999100079563	WITHOUT_CLASSIFICATION	8.999204374536661E-8	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9998127191793891	WITHOUT_CLASSIFICATION	1.8728082061087188E-4	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999996162052159	WITHOUT_CLASSIFICATION	3.837947840276383E-7	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999998001086681	WITHOUT_CLASSIFICATION	1.998913319668826E-7	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999792868818	WITHOUT_CLASSIFICATION	2.0713118197605328E-8	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999594295225	WITHOUT_CLASSIFICATION	4.0570477467636324E-8	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999999681093059	WITHOUT_CLASSIFICATION	3.1890694142644814E-8	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999999841406881	WITHOUT_CLASSIFICATION	1.585931187124665E-8	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999978262833874	WITHOUT_CLASSIFICATION	2.173716612599215E-6	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999999818096952	WITHOUT_CLASSIFICATION	1.819030480623306E-8	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999999074056195	WITHOUT_CLASSIFICATION	9.259438045765625E-8	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999999283460383	WITHOUT_CLASSIFICATION	7.165396164785253E-8	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999594295225	WITHOUT_CLASSIFICATION	4.0570477467636324E-8	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999996402296755	WITHOUT_CLASSIFICATION	3.597703244722901E-7	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999900855664531	WITHOUT_CLASSIFICATION	9.914433546920905E-6	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999952519866112	WITHOUT_CLASSIFICATION	4.74801338876474E-6	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999999965613376	WITHOUT_CLASSIFICATION	3.43866240727325E-8	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727213081163	WITHOUT_CLASSIFICATION	2.727869188364979E-5	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999999143391	WITHOUT_CLASSIFICATION	8.566088368620602E-11	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9997752176146883	WITHOUT_CLASSIFICATION	2.2478238531170626E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727213081163	WITHOUT_CLASSIFICATION	2.727869188364979E-5	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.999999895521066	WITHOUT_CLASSIFICATION	1.0447893400205225E-7	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999997403674314	WITHOUT_CLASSIFICATION	2.5963256849711077E-7	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999947067058721	WITHOUT_CLASSIFICATION	5.293294127982956E-6	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999998876364868	WITHOUT_CLASSIFICATION	1.1236351318572649E-7	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999998912398949	WITHOUT_CLASSIFICATION	1.0876010505258564E-7	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9999997354759336	WITHOUT_CLASSIFICATION	2.645240664613361E-7	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999994075501805	WITHOUT_CLASSIFICATION	5.92449819633735E-7	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999999965613376	WITHOUT_CLASSIFICATION	3.43866240727325E-8	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999999143391	WITHOUT_CLASSIFICATION	8.566088368620602E-11	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727213081163	WITHOUT_CLASSIFICATION	2.727869188364979E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999594295225	WITHOUT_CLASSIFICATION	4.0570477467636324E-8	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999107169151	WITHOUT_CLASSIFICATION	8.928308501818186E-8	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999858708203998	WITHOUT_CLASSIFICATION	1.4129179600191666E-4	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.999999892372567	WITHOUT_CLASSIFICATION	1.0762743305484265E-7	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999861388104	WITHOUT_CLASSIFICATION	1.3861189630659797E-8	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999824436265	WITHOUT_CLASSIFICATION	1.7556373454051235E-8	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999999770715241	WITHOUT_CLASSIFICATION	2.2928475859144087E-8	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999996553851	WITHOUT_CLASSIFICATION	3.4461481410730834E-10	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.99999996082911	WITHOUT_CLASSIFICATION	3.9170890040292555E-8	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.999999951664684	WITHOUT_CLASSIFICATION	4.8335315964459785E-8	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992243398926914	WITHOUT_CLASSIFICATION	7.756601073085101E-4	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999999960118913	WITHOUT_CLASSIFICATION	3.988108727812658E-9	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.999253439239254	WITHOUT_CLASSIFICATION	7.465607607459967E-4	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999995618594312	WITHOUT_CLASSIFICATION	4.381405688964086E-7	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999493413319	WITHOUT_CLASSIFICATION	5.065866807921665E-8	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999982115661123	WITHOUT_CLASSIFICATION	1.7884338876926333E-6	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992623233463113	WITHOUT_CLASSIFICATION	7.376766536887095E-4	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998831026082534	WITHOUT_CLASSIFICATION	1.1689739174660408E-4	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922233741596	WITHOUT_CLASSIFICATION	7.776625840367465E-6	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999982115661123	WITHOUT_CLASSIFICATION	1.7884338876926333E-6	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999991002304501	WITHOUT_CLASSIFICATION	8.997695499063156E-7	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999986388200174	WITHOUT_CLASSIFICATION	1.3611799825984135E-6	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982478707454786	WITHOUT_CLASSIFICATION	0.001752129254521312	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997819812654432	WITHOUT_CLASSIFICATION	2.180187345568716E-4	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999951420920316	WITHOUT_CLASSIFICATION	4.857907968417415E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727213081163	WITHOUT_CLASSIFICATION	2.727869188364979E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727213081163	WITHOUT_CLASSIFICATION	2.727869188364979E-5	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.999991908167058	WITHOUT_CLASSIFICATION	8.091832942029993E-6	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999432262437588	WITHOUT_CLASSIFICATION	5.677375624116208E-5	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999915100270584	WITHOUT_CLASSIFICATION	8.489972941609944E-6	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999995151218	WITHOUT_CLASSIFICATION	4.84878370610151E-10	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999999995370844	WITHOUT_CLASSIFICATION	4.629156117466031E-10	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999896756924	WITHOUT_CLASSIFICATION	1.0324307645483016E-8	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999958919902	WITHOUT_CLASSIFICATION	4.108009823927557E-9	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999988940320117	WITHOUT_CLASSIFICATION	1.1059679882993825E-6	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999996518453795	WITHOUT_CLASSIFICATION	3.481546205148757E-7	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999822364555	WITHOUT_CLASSIFICATION	1.776354447873764E-8	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999998895202239	WITHOUT_CLASSIFICATION	1.1047977605102633E-7	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999994267278387	WITHOUT_CLASSIFICATION	5.732721612912284E-6	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999986712571506	WITHOUT_CLASSIFICATION	1.328742849483639E-6	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9998770890095657	WITHOUT_CLASSIFICATION	1.229109904342309E-4	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999985611029651	WITHOUT_CLASSIFICATION	1.4388970348078303E-6	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999949775097202	WITHOUT_CLASSIFICATION	5.0224902797945985E-5	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999993988589069	WITHOUT_CLASSIFICATION	6.011410932141323E-7	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999996792216007	WITHOUT_CLASSIFICATION	3.207783993346666E-7	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999920021521578	WITHOUT_CLASSIFICATION	7.99784784222586E-6	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999615189109835	WITHOUT_CLASSIFICATION	3.848108901653427E-5	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993002186178371	WITHOUT_CLASSIFICATION	6.997813821628158E-4	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996342992263	WITHOUT_CLASSIFICATION	3.6570077371447864E-7	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999932268872043	WITHOUT_CLASSIFICATION	6.773112795734357E-6	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999992688119766	WITHOUT_CLASSIFICATION	7.311880232779611E-7	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999932545241225	WITHOUT_CLASSIFICATION	6.745475877506661E-6	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999976059464791	WITHOUT_CLASSIFICATION	2.3940535208230048E-6	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999982553927774	WITHOUT_CLASSIFICATION	1.744607222632309E-6	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993257057371	WITHOUT_CLASSIFICATION	6.742942628954503E-7	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999986041455644	WITHOUT_CLASSIFICATION	1.395854435554068E-6	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999998923618737	WITHOUT_CLASSIFICATION	1.076381261973431E-7	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997559654584	WITHOUT_CLASSIFICATION	2.440345416668732E-7	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999942050188673	WITHOUT_CLASSIFICATION	5.794981132728416E-6	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998111839766	WITHOUT_CLASSIFICATION	1.8881602331474325E-7	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997137447669	WITHOUT_CLASSIFICATION	2.862552330336814E-7	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999997106272389	WITHOUT_CLASSIFICATION	2.89372761118898E-7	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999976443454	WITHOUT_CLASSIFICATION	2.3556544943523863E-9	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999996029927262	WITHOUT_CLASSIFICATION	3.9700727376310367E-7	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.9999994762438448	WITHOUT_CLASSIFICATION	5.237561552636145E-7	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999843974255773	WITHOUT_CLASSIFICATION	1.560257442275976E-5	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999748863277824	WITHOUT_CLASSIFICATION	2.5113672217533097E-5	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999997005343906	WITHOUT_CLASSIFICATION	2.994656093282474E-7	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999998431991328	WITHOUT_CLASSIFICATION	1.56800867229813E-7	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999989870197347	WITHOUT_CLASSIFICATION	1.0129802653228989E-6	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9998922896802052	WITHOUT_CLASSIFICATION	1.0771031979488791E-4	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.999999961775034	WITHOUT_CLASSIFICATION	3.8224965970819625E-8	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999639262455754	WITHOUT_CLASSIFICATION	3.6073754424517905E-5	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999612709667	WITHOUT_CLASSIFICATION	3.872903336164136E-8	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999997295816611	WITHOUT_CLASSIFICATION	2.7041833893485895E-7	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999980880259625	WITHOUT_CLASSIFICATION	1.911974037538566E-6	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999995069729698	WITHOUT_CLASSIFICATION	4.93027030250118E-7	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999024421506	WITHOUT_CLASSIFICATION	9.755784944054342E-8	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999992286186021	WITHOUT_CLASSIFICATION	7.713813978277767E-7	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999968739072205	WITHOUT_CLASSIFICATION	3.1260927795366303E-6	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9986861633316917	WITHOUT_CLASSIFICATION	0.0013138366683083146	IMPLEMENTATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999482296021637	WITHOUT_CLASSIFICATION	5.1770397836344496E-5	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999874738003863	WITHOUT_CLASSIFICATION	1.2526199613629059E-5	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999042556023	WITHOUT_CLASSIFICATION	9.574439779499067E-8	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999973067715483	WITHOUT_CLASSIFICATION	2.6932284518439157E-6	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999767995298969	WITHOUT_CLASSIFICATION	2.320047010300297E-5	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999989683166381	WITHOUT_CLASSIFICATION	1.031683361881335E-6	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999961053813389	WITHOUT_CLASSIFICATION	3.8946186611051335E-6	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999989356856689	WITHOUT_CLASSIFICATION	1.0643143310795988E-6	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9997594048001051	WITHOUT_CLASSIFICATION	2.405951998948319E-4	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999935376326299	WITHOUT_CLASSIFICATION	6.462367370091763E-6	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999991471851	WITHOUT_CLASSIFICATION	8.528149276405697E-10	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999999721587264	WITHOUT_CLASSIFICATION	2.7841273597231567E-7	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999535007786	WITHOUT_CLASSIFICATION	4.6499221353168296E-8	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999999375756729	WITHOUT_CLASSIFICATION	6.242432709205117E-7	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9963977505127889	WITHOUT_CLASSIFICATION	0.003602249487211061	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999852456742174	WITHOUT_CLASSIFICATION	1.4754325782649474E-5	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999813390120169	WITHOUT_CLASSIFICATION	1.8660987982993368E-5	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.99999991835108	WITHOUT_CLASSIFICATION	8.164892001970265E-8	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.999999969006777	WITHOUT_CLASSIFICATION	3.099322305402771E-8	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.9999930285419136	WITHOUT_CLASSIFICATION	6.971458086360867E-6	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.999998025890328	WITHOUT_CLASSIFICATION	1.9741096718942397E-6	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.9999980723006742	WITHOUT_CLASSIFICATION	1.927699325898544E-6	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9780754198505719	WITHOUT_CLASSIFICATION	0.021924580149428007	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9998907194329293	WITHOUT_CLASSIFICATION	1.0928056707079832E-4	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.999999911235677	WITHOUT_CLASSIFICATION	8.876432306210895E-8	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999896133587689	WITHOUT_CLASSIFICATION	1.0386641231140446E-5	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999995124645887	WITHOUT_CLASSIFICATION	4.875354113101573E-7	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999999421519	WITHOUT_CLASSIFICATION	5.784795898698984E-11	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999999557827	WITHOUT_CLASSIFICATION	4.421722096472626E-11	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999892146326056	WITHOUT_CLASSIFICATION	1.0785367394475371E-5	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999970943696	WITHOUT_CLASSIFICATION	2.9056303443402302E-9	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999976018673222	WITHOUT_CLASSIFICATION	2.3981326776713755E-6	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999971465072	WITHOUT_CLASSIFICATION	2.8534927098379935E-9	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999374325537373	WITHOUT_CLASSIFICATION	6.256744626267124E-5	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.9999918342980922	WITHOUT_CLASSIFICATION	8.165701907658847E-6	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.999999999314534	WITHOUT_CLASSIFICATION	6.854660247669887E-10	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999927049493	WITHOUT_CLASSIFICATION	7.295050650885919E-9	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999998448	WITHOUT_CLASSIFICATION	1.5512595427782048E-13	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999936096694981	WITHOUT_CLASSIFICATION	6.390330501876108E-6	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999998706833091	WITHOUT_CLASSIFICATION	1.2931669090922275E-7	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999560594337	WITHOUT_CLASSIFICATION	4.394056622157257E-8	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999995943796454	WITHOUT_CLASSIFICATION	4.0562035470056556E-7	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999701866038306	WITHOUT_CLASSIFICATION	2.9813396169262974E-5	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999994969586687	WITHOUT_CLASSIFICATION	5.030413312558842E-7	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999999972277004	WITHOUT_CLASSIFICATION	2.772299642742228E-9	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999963136798168	WITHOUT_CLASSIFICATION	3.6863201833549252E-6	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9999949324944292	WITHOUT_CLASSIFICATION	5.067505570929628E-6	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999948587260346	WITHOUT_CLASSIFICATION	5.141273965439929E-6	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999895142073	WITHOUT_CLASSIFICATION	1.0485792632588314E-8	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999892014694467	WITHOUT_CLASSIFICATION	1.0798530553307683E-5	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.9999637855339313	WITHOUT_CLASSIFICATION	3.6214466068643425E-5	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999998374423174	WITHOUT_CLASSIFICATION	1.62557682629512E-7	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999892014694467	WITHOUT_CLASSIFICATION	1.0798530553307683E-5	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999633564409	WITHOUT_CLASSIFICATION	3.664355911090003E-8	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.9999999755243254	WITHOUT_CLASSIFICATION	2.4475674574829465E-8	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999166293818177	WITHOUT_CLASSIFICATION	8.337061818224443E-5	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9968380738664586	WITHOUT_CLASSIFICATION	0.0031619261335415322	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.9999999205807117	WITHOUT_CLASSIFICATION	7.941928827058739E-8	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999997002867128	WITHOUT_CLASSIFICATION	2.99713287213259E-7	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999893057657078	WITHOUT_CLASSIFICATION	1.0694234292147464E-5	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999992264796718	WITHOUT_CLASSIFICATION	7.73520328238716E-7	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999787805013342	WITHOUT_CLASSIFICATION	2.121949866575145E-5	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999949758483017	WITHOUT_CLASSIFICATION	5.024151698312524E-6	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999999968561715	WITHOUT_CLASSIFICATION	3.1438286779647037E-9	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.999995069553102	WITHOUT_CLASSIFICATION	4.930446898001643E-6	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999989713381296	WITHOUT_CLASSIFICATION	1.028661870284629E-6	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999919484641	WITHOUT_CLASSIFICATION	8.051535903801642E-9	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999993777675165	WITHOUT_CLASSIFICATION	6.222324834335882E-7	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999997254914279	WITHOUT_CLASSIFICATION	2.7450857212567343E-7	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999298842127409	WITHOUT_CLASSIFICATION	7.011578725921591E-5	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999298842127409	WITHOUT_CLASSIFICATION	7.011578725921591E-5	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999975586454618	WITHOUT_CLASSIFICATION	2.4413545381603294E-6	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9999905782274047	WITHOUT_CLASSIFICATION	9.42177259527974E-6	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.999984667320261	WITHOUT_CLASSIFICATION	1.533267973898274E-5	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.9999957556307488	WITHOUT_CLASSIFICATION	4.244369251089113E-6	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999976449940533	WITHOUT_CLASSIFICATION	2.3550059467202695E-6	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999800277798347	WITHOUT_CLASSIFICATION	1.997222016517515E-5	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9999976497634306	WITHOUT_CLASSIFICATION	2.350236569321774E-6	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999714846389	WITHOUT_CLASSIFICATION	2.8515361031622867E-8	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.9999999233111445	WITHOUT_CLASSIFICATION	7.66888554070523E-8	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999406199658042	WITHOUT_CLASSIFICATION	5.938003419584696E-5	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999683688673817	WITHOUT_CLASSIFICATION	3.163113261829941E-5	IMPLEMENTATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999743323544	WITHOUT_CLASSIFICATION	2.5667645532803425E-8	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999990437878411	WITHOUT_CLASSIFICATION	9.562121589384554E-7	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999987733992824	WITHOUT_CLASSIFICATION	1.22660071752339E-6	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999608250902	WITHOUT_CLASSIFICATION	3.917490967887295E-8	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999920021521578	WITHOUT_CLASSIFICATION	7.99784784222586E-6	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.999999613386631	WITHOUT_CLASSIFICATION	3.866133690118896E-7	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999748736391	WITHOUT_CLASSIFICATION	2.5126360787308173E-8	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999366629783023	WITHOUT_CLASSIFICATION	6.333702169774743E-5	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999889051536128	WITHOUT_CLASSIFICATION	1.109484638722658E-5	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999837988051	WITHOUT_CLASSIFICATION	1.6201194910205137E-8	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.9999990364541794	WITHOUT_CLASSIFICATION	9.6354582052854E-7	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999999954135373	WITHOUT_CLASSIFICATION	4.586462612642876E-9	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999967452022	WITHOUT_CLASSIFICATION	3.254797708555814E-9	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999792306963049	WITHOUT_CLASSIFICATION	2.0769303695011136E-5	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999856365995798	WITHOUT_CLASSIFICATION	1.4363400420117461E-5	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.999999999667037	WITHOUT_CLASSIFICATION	3.329629451676625E-10	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999945637017096	WITHOUT_CLASSIFICATION	5.436298290432542E-6	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999564998653524	WITHOUT_CLASSIFICATION	4.350013464767507E-5	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9999992721741803	WITHOUT_CLASSIFICATION	7.278258197995754E-7	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999984435454363	WITHOUT_CLASSIFICATION	1.5564545637409106E-6	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999998875851474	WITHOUT_CLASSIFICATION	1.124148526709599E-7	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.9999871017753607	WITHOUT_CLASSIFICATION	1.289822463929448E-5	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999983364498621	WITHOUT_CLASSIFICATION	1.6635501377957833E-6	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999992712000326	WITHOUT_CLASSIFICATION	7.287999672818127E-7	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999909930487865	WITHOUT_CLASSIFICATION	9.006951213489582E-6	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999886689164218	WITHOUT_CLASSIFICATION	1.1331083578198407E-5	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999919158036236	WITHOUT_CLASSIFICATION	8.084196376455522E-6	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999998418520625	WITHOUT_CLASSIFICATION	1.5814793749709394E-7	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999995901432498	WITHOUT_CLASSIFICATION	4.098567501647314E-7	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.9999827274022736	WITHOUT_CLASSIFICATION	1.7272597726445054E-5	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.9999984488759239	WITHOUT_CLASSIFICATION	1.5511240760463473E-6	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999992900571274	WITHOUT_CLASSIFICATION	7.099428725912068E-7	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.999999848988551	WITHOUT_CLASSIFICATION	1.5101144909495474E-7	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999999260452953	WITHOUT_CLASSIFICATION	7.395470461865893E-8	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999990990863561	WITHOUT_CLASSIFICATION	9.009136438806906E-7	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998703670361204	WITHOUT_CLASSIFICATION	1.2963296387948265E-4	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985591235341	WITHOUT_CLASSIFICATION	1.4408764659169114E-6	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999982241051009	WITHOUT_CLASSIFICATION	1.775894899102986E-5	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999704837198	WITHOUT_CLASSIFICATION	2.9516280253980967E-8	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999985866694802	WITHOUT_CLASSIFICATION	1.413330519800077E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999994267278387	WITHOUT_CLASSIFICATION	5.732721612912284E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999994267278387	WITHOUT_CLASSIFICATION	5.732721612912284E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999992691059558	WITHOUT_CLASSIFICATION	7.308940442061608E-7	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999107090649	WITHOUT_CLASSIFICATION	8.929093508930164E-8	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999958916444665	WITHOUT_CLASSIFICATION	4.108355533564897E-6	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999513977390981	WITHOUT_CLASSIFICATION	4.860226090189139E-4	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999958916444665	WITHOUT_CLASSIFICATION	4.108355533564897E-6	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999614673543413	WITHOUT_CLASSIFICATION	3.853264565875251E-5	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999992727359499	WITHOUT_CLASSIFICATION	7.272640500431084E-7	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999986483637693	WITHOUT_CLASSIFICATION	1.3516362307420437E-6	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999979729654566	WITHOUT_CLASSIFICATION	2.0270345434705195E-6	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999998276534134	WITHOUT_CLASSIFICATION	1.7234658663639638E-7	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999997707623037	WITHOUT_CLASSIFICATION	2.2923769626299503E-7	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999991949018997	WITHOUT_CLASSIFICATION	8.050981002719248E-7	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.9999999214395411	WITHOUT_CLASSIFICATION	7.856045889583711E-8	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999991604413507	WITHOUT_CLASSIFICATION	8.395586492530976E-7	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9989264534505798	WITHOUT_CLASSIFICATION	0.0010735465494201301	IMPLEMENTATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.999937153126515	WITHOUT_CLASSIFICATION	6.284687348505734E-5	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.999999955685663	WITHOUT_CLASSIFICATION	4.43143368929059E-8	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999999313595626	WITHOUT_CLASSIFICATION	6.864043749583539E-8	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999993600156561	WITHOUT_CLASSIFICATION	6.399843438773222E-7	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999809051502	WITHOUT_CLASSIFICATION	1.9094849818858972E-8	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999987957848	WITHOUT_CLASSIFICATION	1.2042151709258684E-9	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999998301273835	WITHOUT_CLASSIFICATION	1.698726164966688E-7	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999998301273835	WITHOUT_CLASSIFICATION	1.698726164966688E-7	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.999999231342785	WITHOUT_CLASSIFICATION	7.686572149929138E-7	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999837614539	WITHOUT_CLASSIFICATION	1.623854606217627E-8	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999997797053	WITHOUT_CLASSIFICATION	2.202947421177235E-10	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.99977765371323	WITHOUT_CLASSIFICATION	2.2234628677005372E-4	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999984881439	WITHOUT_CLASSIFICATION	1.5118559924912216E-9	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999999881384699	WITHOUT_CLASSIFICATION	1.1861530181902846E-8	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9998328430940371	WITHOUT_CLASSIFICATION	1.6715690596291313E-4	IMPLEMENTATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999567063931128	WITHOUT_CLASSIFICATION	4.3293606887043116E-5	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.9999993978492825	WITHOUT_CLASSIFICATION	6.021507175231032E-7	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999997717908713	WITHOUT_CLASSIFICATION	2.2820912884930367E-7	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999261370541	WITHOUT_CLASSIFICATION	7.386294586011643E-8	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999931719728159	WITHOUT_CLASSIFICATION	6.828027184095657E-6	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999986371028563	WITHOUT_CLASSIFICATION	1.3628971437346901E-6	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999993001455796	WITHOUT_CLASSIFICATION	6.998544203626631E-7	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999970734813632	WITHOUT_CLASSIFICATION	2.92651863676773E-6	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999930824991	WITHOUT_CLASSIFICATION	6.917500858298544E-9	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999861260585375	WITHOUT_CLASSIFICATION	1.3873941462420238E-5	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9992593792095996	WITHOUT_CLASSIFICATION	7.406207904003136E-4	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.9999699229542945	WITHOUT_CLASSIFICATION	3.007704570549719E-5	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999998882581285	WITHOUT_CLASSIFICATION	1.117418714943435E-7	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999993329481656	WITHOUT_CLASSIFICATION	6.670518344501958E-7	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9998112264947174	WITHOUT_CLASSIFICATION	1.8877350528264555E-4	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999796268513514	WITHOUT_CLASSIFICATION	2.037314864860711E-4	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9985576023680105	WITHOUT_CLASSIFICATION	0.0014423976319894749	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.9999994482820895	WITHOUT_CLASSIFICATION	5.517179104969267E-7	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.99999994498041	WITHOUT_CLASSIFICATION	5.50195900902192E-8	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999989538908	WITHOUT_CLASSIFICATION	1.0461091607689368E-9	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.999980061389606	WITHOUT_CLASSIFICATION	1.9938610393918737E-5	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999994131980839	WITHOUT_CLASSIFICATION	5.868019160526752E-7	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999986048282	WITHOUT_CLASSIFICATION	1.3951717829256267E-9	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999999999084662	WITHOUT_CLASSIFICATION	9.1533689311953E-11	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999992553075987	WITHOUT_CLASSIFICATION	7.446924012576049E-7	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999745009052171	WITHOUT_CLASSIFICATION	2.5499094782846506E-5	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999977808292739	WITHOUT_CLASSIFICATION	2.2191707260697445E-6	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998509075914195	WITHOUT_CLASSIFICATION	1.4909240858049442E-4	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999993460910861	WITHOUT_CLASSIFICATION	6.539089139426047E-7	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998270186248	WITHOUT_CLASSIFICATION	1.729813750954178E-7	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.999998029913505	WITHOUT_CLASSIFICATION	1.970086495072478E-6	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999867189218	WITHOUT_CLASSIFICATION	1.3281078188545463E-8	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999977912789745	WITHOUT_CLASSIFICATION	2.2087210255652785E-6	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999994850205	WITHOUT_CLASSIFICATION	5.149794773092176E-10	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994415728873	WITHOUT_CLASSIFICATION	5.584271125958977E-7	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9999986570205227	WITHOUT_CLASSIFICATION	1.3429794772330322E-6	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.923758979125462	WITHOUT_CLASSIFICATION	0.07624102087453792	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999996659082969	WITHOUT_CLASSIFICATION	3.340917030591647E-7	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.999998038549052	WITHOUT_CLASSIFICATION	1.961450948030975E-6	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.7155271043275482	IMPLEMENTATION	0.28447289567245176	WITHOUT_CLASSIFICATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999951039722	WITHOUT_CLASSIFICATION	4.896027788135347E-9	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999900815691452	WITHOUT_CLASSIFICATION	9.91843085478065E-6	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999973341315662	WITHOUT_CLASSIFICATION	2.6658684338852726E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987594791497	WITHOUT_CLASSIFICATION	1.240520850344941E-6	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999910957484	WITHOUT_CLASSIFICATION	8.904251670956548E-9	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999999164971	WITHOUT_CLASSIFICATION	8.350285689378066E-11	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999997102963772	WITHOUT_CLASSIFICATION	2.8970362268113664E-7	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.99999850734331	WITHOUT_CLASSIFICATION	1.492656690042745E-6	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999996402296755	WITHOUT_CLASSIFICATION	3.597703244722901E-7	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999996402296755	WITHOUT_CLASSIFICATION	3.597703244722901E-7	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999398217927	WITHOUT_CLASSIFICATION	6.017820736749191E-8	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999846669494451	WITHOUT_CLASSIFICATION	1.5333050554888967E-5	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999998998347748	WITHOUT_CLASSIFICATION	1.0016522523985058E-7	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.999998963128683	WITHOUT_CLASSIFICATION	1.0368713169630908E-6	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999993936761176	WITHOUT_CLASSIFICATION	6.063238825598306E-7	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999923633235	WITHOUT_CLASSIFICATION	7.636676609340042E-9	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9996979717525989	WITHOUT_CLASSIFICATION	3.020282474010781E-4	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999690000451557	WITHOUT_CLASSIFICATION	3.099995484429837E-5	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999963106231298	WITHOUT_CLASSIFICATION	3.689376870241416E-6	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999998494418	WITHOUT_CLASSIFICATION	1.5055830208275356E-10	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999977564985	WITHOUT_CLASSIFICATION	2.243501595992964E-9	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999999938516534	WITHOUT_CLASSIFICATION	6.148346604288892E-8	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999997686677712	WITHOUT_CLASSIFICATION	2.3133222894601876E-7	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999995377994061	WITHOUT_CLASSIFICATION	4.622005939297427E-7	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999996807689128	WITHOUT_CLASSIFICATION	3.1923108720081897E-7	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999992169232428	WITHOUT_CLASSIFICATION	7.830767571040437E-7	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999860019817906	WITHOUT_CLASSIFICATION	1.3998018209507966E-5	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999196614846	WITHOUT_CLASSIFICATION	8.033851539477402E-8	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9999972008907165	WITHOUT_CLASSIFICATION	2.79910928353496E-6	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999972174668	WITHOUT_CLASSIFICATION	2.7825332542218096E-9	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999868007450292	WITHOUT_CLASSIFICATION	1.319925497090256E-5	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999989928737	WITHOUT_CLASSIFICATION	1.0071262468225826E-9	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999961985996665	WITHOUT_CLASSIFICATION	3.8014003336422348E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999832924761588	WITHOUT_CLASSIFICATION	1.6707523841106564E-5	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9996935244447326	WITHOUT_CLASSIFICATION	3.064755552674491E-4	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9987423659082211	WITHOUT_CLASSIFICATION	0.001257634091778892	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.5729601110683221	WITHOUT_CLASSIFICATION	0.42703988893167777	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9995959977775796	WITHOUT_CLASSIFICATION	4.040022224204077E-4	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998808041111874	WITHOUT_CLASSIFICATION	1.191958888125613E-4	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.999994314194421	WITHOUT_CLASSIFICATION	5.6858055789471145E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999832924761588	WITHOUT_CLASSIFICATION	1.6707523841106564E-5	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999988983515474	WITHOUT_CLASSIFICATION	1.1016484525587935E-6	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.999999993570166	WITHOUT_CLASSIFICATION	6.429833945580999E-9	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.9999885210705126	WITHOUT_CLASSIFICATION	1.1478929487412604E-5	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999984891424456	WITHOUT_CLASSIFICATION	1.5108575543534133E-6	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999997254156	WITHOUT_CLASSIFICATION	2.74584305038208E-10	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999960939174124	WITHOUT_CLASSIFICATION	3.906082587589964E-6	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999665323979994	WITHOUT_CLASSIFICATION	3.346760200066779E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999999995002436	WITHOUT_CLASSIFICATION	4.9975640477869266E-9	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9988105051504967	WITHOUT_CLASSIFICATION	0.0011894948495033036	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999984891424456	WITHOUT_CLASSIFICATION	1.5108575543534133E-6	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999999974235825	WITHOUT_CLASSIFICATION	2.576417464511112E-9	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999999995002436	WITHOUT_CLASSIFICATION	4.9975640477869266E-9	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999996045252354	WITHOUT_CLASSIFICATION	3.9547476465266944E-7	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999974355284728	WITHOUT_CLASSIFICATION	2.5644715272051326E-5	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999354425496	WITHOUT_CLASSIFICATION	6.455745035005094E-8	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999261370541	WITHOUT_CLASSIFICATION	7.386294586011643E-8	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999979067116	WITHOUT_CLASSIFICATION	2.0932883590293793E-9	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999999949167016	WITHOUT_CLASSIFICATION	5.0832984611554305E-9	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999963447896	WITHOUT_CLASSIFICATION	3.655210315089916E-9	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9997960523754132	WITHOUT_CLASSIFICATION	2.039476245867602E-4	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999999650472	WITHOUT_CLASSIFICATION	3.4952768778685095E-11	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.9999986514501881	WITHOUT_CLASSIFICATION	1.3485498118815477E-6	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999999538701589	WITHOUT_CLASSIFICATION	4.612984095612058E-8	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999999326915381	WITHOUT_CLASSIFICATION	6.730846186508296E-8	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999992730254703	WITHOUT_CLASSIFICATION	7.269745297526604E-7	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999905986520962	WITHOUT_CLASSIFICATION	9.40134790387023E-6	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999951099289489	WITHOUT_CLASSIFICATION	4.890071051138686E-6	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999905023361	WITHOUT_CLASSIFICATION	9.497663909018688E-9	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999950119323516	WITHOUT_CLASSIFICATION	4.988067648283777E-6	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9999263649627681	WITHOUT_CLASSIFICATION	7.363503723189859E-5	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999920361083688	WITHOUT_CLASSIFICATION	7.963891631110616E-6	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999749476927782	WITHOUT_CLASSIFICATION	2.5052307221843224E-5	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999937348829049	WITHOUT_CLASSIFICATION	6.2651170950739945E-6	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999998808314533	WITHOUT_CLASSIFICATION	1.1916854671475198E-7	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999978622670743	WITHOUT_CLASSIFICATION	2.137732925776736E-6	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999999822153496	WITHOUT_CLASSIFICATION	1.778465048796633E-8	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999990773126084	WITHOUT_CLASSIFICATION	9.226873916791118E-7	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999710044338738	WITHOUT_CLASSIFICATION	2.8995566126264102E-5	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999999760606127	WITHOUT_CLASSIFICATION	2.393938720406333E-8	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999999238567	WITHOUT_CLASSIFICATION	7.61433642767143E-11	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999982138052226	WITHOUT_CLASSIFICATION	1.7861947775114293E-6	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.9999507769687136	WITHOUT_CLASSIFICATION	4.922303128646831E-5	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.9999997097635235	WITHOUT_CLASSIFICATION	2.9023647642725635E-7	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997948762845117	WITHOUT_CLASSIFICATION	2.0512371548835612E-4	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999502560306719	WITHOUT_CLASSIFICATION	4.9743969328075165E-5	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.999999314553316	WITHOUT_CLASSIFICATION	6.854466839107573E-7	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9988095771693415	WITHOUT_CLASSIFICATION	0.0011904228306584834	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.999994146868415	WITHOUT_CLASSIFICATION	5.853131584915867E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999997694528201	WITHOUT_CLASSIFICATION	2.3054717989777434E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999997694528201	WITHOUT_CLASSIFICATION	2.3054717989777434E-6	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999770647104	WITHOUT_CLASSIFICATION	2.2935289561457238E-8	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999963293428187	WITHOUT_CLASSIFICATION	3.670657181387036E-6	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999995091052158	WITHOUT_CLASSIFICATION	4.9089478420171535E-6	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999990927858508	WITHOUT_CLASSIFICATION	9.072141491638753E-7	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999992638880428	WITHOUT_CLASSIFICATION	7.361119572192592E-7	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999924111971407	WITHOUT_CLASSIFICATION	7.588802859221285E-6	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999996156008777	WITHOUT_CLASSIFICATION	3.843991223285176E-7	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999997410271599	WITHOUT_CLASSIFICATION	2.5897284011759086E-7	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999461522153	WITHOUT_CLASSIFICATION	5.384778474638892E-8	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999964197935	WITHOUT_CLASSIFICATION	3.5802063904009438E-9	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999998383141978	WITHOUT_CLASSIFICATION	1.616858021601798E-7	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999995713058519	WITHOUT_CLASSIFICATION	4.2869414811530524E-7	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999982952004414	WITHOUT_CLASSIFICATION	1.7047995586033036E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999997694528201	WITHOUT_CLASSIFICATION	2.3054717989777434E-6	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999989597823689	WITHOUT_CLASSIFICATION	1.040217631142028E-6	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999991412494411	WITHOUT_CLASSIFICATION	8.587505588104245E-7	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999077464269706	WITHOUT_CLASSIFICATION	9.225357302939455E-5	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999983881509242	WITHOUT_CLASSIFICATION	1.6118490757298339E-6	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999999730940461	WITHOUT_CLASSIFICATION	2.6905954001188174E-8	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999992766010677	WITHOUT_CLASSIFICATION	7.233989322680923E-7	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998259154825387	WITHOUT_CLASSIFICATION	1.7408451746130497E-4	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999523901656378	WITHOUT_CLASSIFICATION	4.760983436217884E-5	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999983190930236	WITHOUT_CLASSIFICATION	1.6809069764432775E-6	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999982487485715	WITHOUT_CLASSIFICATION	1.7512514286109476E-6	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999917727765977	WITHOUT_CLASSIFICATION	8.22722340226586E-6	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997948762845117	WITHOUT_CLASSIFICATION	2.0512371548835612E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999997694528201	WITHOUT_CLASSIFICATION	2.3054717989777434E-6	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999970491497073	WITHOUT_CLASSIFICATION	2.9508502927345932E-6	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999998076482138	WITHOUT_CLASSIFICATION	1.9235178625057857E-7	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.9999984035464242	WITHOUT_CLASSIFICATION	1.5964535757744381E-6	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999943912499694	WITHOUT_CLASSIFICATION	5.6087500306866115E-6	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999102135193336	WITHOUT_CLASSIFICATION	8.9786480666418E-5	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999986877574549	WITHOUT_CLASSIFICATION	1.312242545141374E-6	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987128381476	WITHOUT_CLASSIFICATION	1.287161852381009E-6	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999199584289	WITHOUT_CLASSIFICATION	8.004157107455228E-8	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999985683434	WITHOUT_CLASSIFICATION	1.4316565843394595E-9	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999989941345011	WITHOUT_CLASSIFICATION	1.0058654989062964E-6	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999995132806816	WITHOUT_CLASSIFICATION	4.867193184229667E-7	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999783790889412	WITHOUT_CLASSIFICATION	2.1620911058820484E-5	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999998744553033	WITHOUT_CLASSIFICATION	1.2554469667211806E-7	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999986199730948	WITHOUT_CLASSIFICATION	1.3800269051648358E-6	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999614673543413	WITHOUT_CLASSIFICATION	3.853264565875251E-5	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999999961985513	WITHOUT_CLASSIFICATION	3.8014486995071365E-8	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999623498823	WITHOUT_CLASSIFICATION	3.765011757836472E-8	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999726354135	WITHOUT_CLASSIFICATION	2.7364586408601303E-8	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.9999988927762608	WITHOUT_CLASSIFICATION	1.1072237391845344E-6	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999865724656	WITHOUT_CLASSIFICATION	1.3427534286622307E-8	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999987880366875	WITHOUT_CLASSIFICATION	1.2119633123913802E-6	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999987880366875	WITHOUT_CLASSIFICATION	1.2119633123913802E-6	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999379038227547	WITHOUT_CLASSIFICATION	6.209617724523063E-5	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999990537225	WITHOUT_CLASSIFICATION	9.462774943018265E-10	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999957283376156	WITHOUT_CLASSIFICATION	4.271662384383623E-6	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999729273729963	WITHOUT_CLASSIFICATION	2.7072627003710553E-5	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999972297878814	WITHOUT_CLASSIFICATION	2.770212118510648E-6	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999998989143408	WITHOUT_CLASSIFICATION	1.0108565909826874E-7	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999545030204405	WITHOUT_CLASSIFICATION	4.5496979559389094E-5	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999634504863	WITHOUT_CLASSIFICATION	3.65495137552602E-8	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999634504863	WITHOUT_CLASSIFICATION	3.65495137552602E-8	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999983871209194	WITHOUT_CLASSIFICATION	1.6128790805815487E-6	IMPLEMENTATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999996573437534	WITHOUT_CLASSIFICATION	3.4265624662028065E-7	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999999555680698	WITHOUT_CLASSIFICATION	4.443193020029002E-8	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994568946812	WITHOUT_CLASSIFICATION	5.431053187295158E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994568946812	WITHOUT_CLASSIFICATION	5.431053187295158E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994568946812	WITHOUT_CLASSIFICATION	5.431053187295158E-7	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999907985711138	WITHOUT_CLASSIFICATION	9.201428886258773E-6	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999998362720393	WITHOUT_CLASSIFICATION	1.6372796070369007E-7	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9983622095958219	WITHOUT_CLASSIFICATION	0.0016377904041780687	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999395763775055	WITHOUT_CLASSIFICATION	6.0423622494484474E-5	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999994324904345	WITHOUT_CLASSIFICATION	5.675095654349726E-7	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999997694528201	WITHOUT_CLASSIFICATION	2.3054717989777434E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999997694528201	WITHOUT_CLASSIFICATION	2.3054717989777434E-6	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.999998688622836	WITHOUT_CLASSIFICATION	1.3113771640093703E-6	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999983468629188	WITHOUT_CLASSIFICATION	1.653137081135269E-6	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9985510029768722	WITHOUT_CLASSIFICATION	0.0014489970231278176	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9995966735827494	WITHOUT_CLASSIFICATION	4.0332641725055916E-4	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999996381485545	WITHOUT_CLASSIFICATION	3.618514454404007E-7	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.9999899531494112	WITHOUT_CLASSIFICATION	1.0046850588865155E-5	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999995703909326	WITHOUT_CLASSIFICATION	4.296090673715389E-7	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999956751270133	WITHOUT_CLASSIFICATION	4.324872986813194E-6	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999997521088928	WITHOUT_CLASSIFICATION	2.4789110726177624E-7	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999931830553	WITHOUT_CLASSIFICATION	6.8169446156990266E-9	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999644129883	WITHOUT_CLASSIFICATION	3.5587011607143985E-8	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999975029895902	WITHOUT_CLASSIFICATION	2.4970104098271695E-6	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.99999952179225	WITHOUT_CLASSIFICATION	4.782077499116954E-7	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.99999952179225	WITHOUT_CLASSIFICATION	4.782077499116954E-7	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999996174566489	WITHOUT_CLASSIFICATION	3.8254335108774384E-7	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999996174566489	WITHOUT_CLASSIFICATION	3.8254335108774384E-7	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999996439520192	WITHOUT_CLASSIFICATION	3.5604798068756713E-7	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999992065793439	WITHOUT_CLASSIFICATION	7.934206560001246E-7	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999992065793439	WITHOUT_CLASSIFICATION	7.934206560001246E-7	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999986250924708	WITHOUT_CLASSIFICATION	1.3749075291979413E-6	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999989267391246	WITHOUT_CLASSIFICATION	1.0732608754199128E-6	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9996865589190951	WITHOUT_CLASSIFICATION	3.1344108090495794E-4	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999987880366875	WITHOUT_CLASSIFICATION	1.2119633123913802E-6	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999460997817707	WITHOUT_CLASSIFICATION	5.390021822927274E-5	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999989267391246	WITHOUT_CLASSIFICATION	1.0732608754199128E-6	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999999950384013	WITHOUT_CLASSIFICATION	4.961598615856639E-9	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9988216420996215	WITHOUT_CLASSIFICATION	0.0011783579003785062	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999989641842864	WITHOUT_CLASSIFICATION	1.035815713632515E-6	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999984647888699	WITHOUT_CLASSIFICATION	1.5352111300714399E-6	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999986597295498	WITHOUT_CLASSIFICATION	1.3402704502536426E-6	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999522588288922	WITHOUT_CLASSIFICATION	4.774117110786033E-5	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999973176869547	WITHOUT_CLASSIFICATION	2.6823130454450137E-6	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999998408286742	WITHOUT_CLASSIFICATION	1.59171325844685E-7	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999998711662049	WITHOUT_CLASSIFICATION	1.2883379499966891E-7	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999999738419	WITHOUT_CLASSIFICATION	2.6158017780572367E-11	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999987668255	WITHOUT_CLASSIFICATION	1.2331744334821019E-9	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.999994974321387	WITHOUT_CLASSIFICATION	5.025678612966026E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999848545821817	WITHOUT_CLASSIFICATION	1.5145417818452374E-5	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.999999529425632	WITHOUT_CLASSIFICATION	4.7057436814669274E-7	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9897147021469372	WITHOUT_CLASSIFICATION	0.010285297853062616	IMPLEMENTATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999986567887851	WITHOUT_CLASSIFICATION	1.3432112148759065E-6	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999263393158	WITHOUT_CLASSIFICATION	7.366068415421695E-8	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999985186397307	WITHOUT_CLASSIFICATION	1.4813602693746038E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999985186397307	WITHOUT_CLASSIFICATION	1.4813602693746038E-6	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.999999771174698	WITHOUT_CLASSIFICATION	2.2882530191336547E-7	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999999631320248	WITHOUT_CLASSIFICATION	3.6867975316735124E-8	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999995728114416	WITHOUT_CLASSIFICATION	4.2718855845338197E-7	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999284896545776	WITHOUT_CLASSIFICATION	7.15103454223921E-5	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999995249901922	WITHOUT_CLASSIFICATION	4.750098078061456E-7	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999498662100971	WITHOUT_CLASSIFICATION	5.0133789903011E-5	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999964985943541	WITHOUT_CLASSIFICATION	3.501405645788757E-6	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999995249400966	WITHOUT_CLASSIFICATION	4.7505990342423114E-7	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999977117675451	WITHOUT_CLASSIFICATION	2.2882324549583087E-6	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999998927284086	WITHOUT_CLASSIFICATION	1.0727159129063802E-7	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999998390597103	WITHOUT_CLASSIFICATION	1.6094028964202445E-7	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999783790889412	WITHOUT_CLASSIFICATION	2.1620911058820484E-5	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999998660737894	WITHOUT_CLASSIFICATION	1.3392621058207114E-7	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.999999530016139	WITHOUT_CLASSIFICATION	4.6998386099913916E-7	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999601786543666	WITHOUT_CLASSIFICATION	3.9821345633301375E-5	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999991488315579	WITHOUT_CLASSIFICATION	8.511684420992556E-7	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999832847137	WITHOUT_CLASSIFICATION	1.6715286332057015E-8	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999832847137	WITHOUT_CLASSIFICATION	1.6715286332057015E-8	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999746830240639	WITHOUT_CLASSIFICATION	2.531697593609406E-5	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999993691105409	WITHOUT_CLASSIFICATION	6.308894590603449E-7	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999925898771193	WITHOUT_CLASSIFICATION	7.4101228807426255E-6	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.9999992632056941	WITHOUT_CLASSIFICATION	7.367943059084367E-7	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.999998541031734	WITHOUT_CLASSIFICATION	1.4589682659755927E-6	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999933212269124	WITHOUT_CLASSIFICATION	6.67877308753215E-6	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999942729150877	WITHOUT_CLASSIFICATION	5.727084912225999E-6	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999913337415	WITHOUT_CLASSIFICATION	8.666258405435916E-9	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999899819633832	WITHOUT_CLASSIFICATION	1.0018036616752075E-5	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999975761662	WITHOUT_CLASSIFICATION	2.4238338178764635E-9	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999998042520895	WITHOUT_CLASSIFICATION	1.9574791050485155E-7	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999913337415	WITHOUT_CLASSIFICATION	8.666258405435916E-9	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999992628460749	WITHOUT_CLASSIFICATION	7.371539251694554E-7	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999920763631257	WITHOUT_CLASSIFICATION	7.92363687435762E-6	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999997874139567	WITHOUT_CLASSIFICATION	2.12586043298328E-7	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9999999713468272	WITHOUT_CLASSIFICATION	2.8653172897431276E-8	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999984277468	WITHOUT_CLASSIFICATION	1.572253184105351E-9	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999994525807937	WITHOUT_CLASSIFICATION	5.474192062237894E-7	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999396632560209	WITHOUT_CLASSIFICATION	6.0336743979174836E-5	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999998292357876	WITHOUT_CLASSIFICATION	1.707642124110764E-7	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999966547816	WITHOUT_CLASSIFICATION	3.3452183772734754E-9	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999941707384639	WITHOUT_CLASSIFICATION	5.829261536154984E-6	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9997204267041513	WITHOUT_CLASSIFICATION	2.795732958486687E-4	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999982164268	WITHOUT_CLASSIFICATION	1.7835732040814802E-9	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999506762003	WITHOUT_CLASSIFICATION	4.9323799809802386E-8	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999948058400364	WITHOUT_CLASSIFICATION	5.19415996367062E-6	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998682825244496	WITHOUT_CLASSIFICATION	1.3171747555042564E-4	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999995489899479	WITHOUT_CLASSIFICATION	4.510100520488075E-7	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999941030132	WITHOUT_CLASSIFICATION	5.8969867484675475E-9	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9978472611826315	WITHOUT_CLASSIFICATION	0.0021527388173686254	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9996733156015795	WITHOUT_CLASSIFICATION	3.2668439842060054E-4	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999575301411362	WITHOUT_CLASSIFICATION	4.2469858863727834E-5	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999973594896207	WITHOUT_CLASSIFICATION	2.6405103793522357E-6	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999984843753593	WITHOUT_CLASSIFICATION	1.5156246405785283E-6	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999808132422678	WITHOUT_CLASSIFICATION	1.9186757732069156E-5	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.999986313947631	WITHOUT_CLASSIFICATION	1.3686052368945947E-5	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999050068944	WITHOUT_CLASSIFICATION	9.499310550424813E-8	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.999916130518806	WITHOUT_CLASSIFICATION	8.386948119392376E-5	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999732367256	WITHOUT_CLASSIFICATION	2.67632743833221E-8	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999967770264198	WITHOUT_CLASSIFICATION	3.2229735801860777E-6	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999190654224	WITHOUT_CLASSIFICATION	8.093457769164484E-8	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999951393277223	WITHOUT_CLASSIFICATION	4.860672277661111E-6	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999985494775061	WITHOUT_CLASSIFICATION	1.450522493786784E-6	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999997360489791	WITHOUT_CLASSIFICATION	2.639510209137983E-7	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999083659682972	WITHOUT_CLASSIFICATION	9.163403170274737E-5	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999913390716	WITHOUT_CLASSIFICATION	8.660928491514473E-9	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999997873322111	WITHOUT_CLASSIFICATION	2.126677889394409E-7	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999998569605021	WITHOUT_CLASSIFICATION	1.4303949801599502E-7	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999998908913	WITHOUT_CLASSIFICATION	1.0910866830381736E-10	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999961141529	WITHOUT_CLASSIFICATION	3.885847110745979E-9	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999999912180563	WITHOUT_CLASSIFICATION	8.781943697365424E-8	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999971910262089	WITHOUT_CLASSIFICATION	2.808973791026009E-6	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999993755330244	WITHOUT_CLASSIFICATION	6.244669755182778E-7	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999543724369	WITHOUT_CLASSIFICATION	4.562756307904091E-8	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999905248867342	WITHOUT_CLASSIFICATION	9.47511326581975E-6	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999524040687	WITHOUT_CLASSIFICATION	4.759593130037378E-8	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.999999949542405	WITHOUT_CLASSIFICATION	5.0457595017898674E-8	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999999815130679	WITHOUT_CLASSIFICATION	1.848693208567791E-7	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999992817326396	WITHOUT_CLASSIFICATION	7.182673603179148E-7	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999975829365912	WITHOUT_CLASSIFICATION	2.4170634087302038E-6	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999999785671545	WITHOUT_CLASSIFICATION	2.1432845548304164E-8	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999999192030352	WITHOUT_CLASSIFICATION	8.079696486615446E-8	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999769065569352	WITHOUT_CLASSIFICATION	2.3093443064852213E-5	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.99999980101235	WITHOUT_CLASSIFICATION	1.9898765003825612E-7	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999442180267	WITHOUT_CLASSIFICATION	5.578197329063787E-8	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999987137963	WITHOUT_CLASSIFICATION	1.286203749849064E-9	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999923735233	WITHOUT_CLASSIFICATION	7.626476697582722E-9	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999989481854242	WITHOUT_CLASSIFICATION	1.0518145758012272E-6	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999936596317246	WITHOUT_CLASSIFICATION	6.3403682754833624E-6	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999986004797546	WITHOUT_CLASSIFICATION	1.3995202453772202E-6	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.999998269918551	WITHOUT_CLASSIFICATION	1.730081449023042E-6	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.999999988592034	WITHOUT_CLASSIFICATION	1.1407966062250232E-8	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999930411388086	WITHOUT_CLASSIFICATION	6.958861191330512E-6	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.999992024928771	WITHOUT_CLASSIFICATION	7.975071228915497E-6	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.9999799194485005	WITHOUT_CLASSIFICATION	2.0080551499601345E-5	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999999892779	WITHOUT_CLASSIFICATION	1.0722054657912604E-11	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999998972333307	WITHOUT_CLASSIFICATION	1.027666693429896E-7	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999995004320601	WITHOUT_CLASSIFICATION	4.995679398657307E-7	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999769065569352	WITHOUT_CLASSIFICATION	2.3093443064852213E-5	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999985342643345	WITHOUT_CLASSIFICATION	1.4657356654564678E-6	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999912675040505	WITHOUT_CLASSIFICATION	8.732495949479229E-6	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999965648612	WITHOUT_CLASSIFICATION	3.435138750732193E-9	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999999738955717	WITHOUT_CLASSIFICATION	2.6104428337654584E-8	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999929771239616	WITHOUT_CLASSIFICATION	7.02287603837222E-6	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999997483179699	WITHOUT_CLASSIFICATION	2.5168203018929603E-7	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999899819633832	WITHOUT_CLASSIFICATION	1.0018036616752075E-5	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999793472141895	WITHOUT_CLASSIFICATION	2.0652785810598596E-5	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999997873322111	WITHOUT_CLASSIFICATION	2.126677889394409E-7	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999257692627127	WITHOUT_CLASSIFICATION	7.423073728724051E-5	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999978877819542	WITHOUT_CLASSIFICATION	2.1122180456831414E-6	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999942396175	WITHOUT_CLASSIFICATION	5.760382562395236E-9	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999795835399	WITHOUT_CLASSIFICATION	2.041646012896686E-8	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999954983456417	WITHOUT_CLASSIFICATION	4.501654358284535E-6	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999984460930388	WITHOUT_CLASSIFICATION	1.5539069611996798E-6	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997727954483	WITHOUT_CLASSIFICATION	2.2720455166242335E-7	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999999712159375	WITHOUT_CLASSIFICATION	2.8784062474365034E-8	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999208441068	WITHOUT_CLASSIFICATION	7.9155893189764E-8	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999980893164	WITHOUT_CLASSIFICATION	1.9106836093202337E-9	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999667835540101	WITHOUT_CLASSIFICATION	3.321644598988003E-5	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999782430629118	WITHOUT_CLASSIFICATION	2.175693708822656E-5	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999544862986	WITHOUT_CLASSIFICATION	4.5513701393242617E-8	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999544862986	WITHOUT_CLASSIFICATION	4.5513701393242617E-8	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999859131459	WITHOUT_CLASSIFICATION	1.4086854113447416E-8	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999887323925293	WITHOUT_CLASSIFICATION	1.1267607470804344E-5	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999999993951095	WITHOUT_CLASSIFICATION	6.0489050653633666E-9	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.999999995698505	WITHOUT_CLASSIFICATION	4.301495026293247E-9	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999999673191314	WITHOUT_CLASSIFICATION	3.268086860828009E-7	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999999816672453	WITHOUT_CLASSIFICATION	1.8332754714638427E-7	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999982742276	WITHOUT_CLASSIFICATION	1.7257723809687565E-9	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999998127057782	WITHOUT_CLASSIFICATION	1.8729422176481354E-7	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999827726053	WITHOUT_CLASSIFICATION	1.7227394785215248E-8	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999995427620388	WITHOUT_CLASSIFICATION	4.572379612287699E-7	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.999983558040046	WITHOUT_CLASSIFICATION	1.6441959953987812E-5	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.9999962601744318	WITHOUT_CLASSIFICATION	3.739825568211822E-6	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999975946847874	WITHOUT_CLASSIFICATION	2.4053152126789378E-6	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999991635113	WITHOUT_CLASSIFICATION	8.364886790621459E-10	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.999975614047807	WITHOUT_CLASSIFICATION	2.4385952192888E-5	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999936429992	WITHOUT_CLASSIFICATION	6.357000843398127E-9	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999996169830374	WITHOUT_CLASSIFICATION	3.8301696257608075E-7	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999999280884617	WITHOUT_CLASSIFICATION	7.191153835742078E-8	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999838867707	WITHOUT_CLASSIFICATION	1.611322932489878E-8	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999996973141435	WITHOUT_CLASSIFICATION	3.0268585647332934E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727213081163	WITHOUT_CLASSIFICATION	2.727869188364979E-5	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999992877889	WITHOUT_CLASSIFICATION	7.122110942668487E-10	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999997703968078	WITHOUT_CLASSIFICATION	2.2960319218825752E-7	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999856950951	WITHOUT_CLASSIFICATION	1.4304904850797897E-8	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999996444515009	WITHOUT_CLASSIFICATION	3.5554849912714164E-7	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.9999286796940214	WITHOUT_CLASSIFICATION	7.132030597860414E-5	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9998194618245463	WITHOUT_CLASSIFICATION	1.8053817545365678E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727213081163	WITHOUT_CLASSIFICATION	2.727869188364979E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727213081163	WITHOUT_CLASSIFICATION	2.727869188364979E-5	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999996161236032	WITHOUT_CLASSIFICATION	3.8387639674331124E-7	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999933366601	WITHOUT_CLASSIFICATION	6.663339825563168E-9	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999999477605321	WITHOUT_CLASSIFICATION	5.223946791288188E-8	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998520925268	WITHOUT_CLASSIFICATION	1.4790747322858097E-7	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999987696295144	WITHOUT_CLASSIFICATION	1.2303704856425449E-6	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999999956474155	WITHOUT_CLASSIFICATION	4.352584570955443E-9	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999951021671163	WITHOUT_CLASSIFICATION	4.8978328837771204E-6	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9962739320071338	WITHOUT_CLASSIFICATION	0.003726067992866218	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999987306949093	WITHOUT_CLASSIFICATION	1.2693050907809194E-6	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999703202025	WITHOUT_CLASSIFICATION	2.967979743602728E-8	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999983539351672	WITHOUT_CLASSIFICATION	1.6460648327642856E-6	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9997638471609265	WITHOUT_CLASSIFICATION	2.361528390735913E-4	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999971450556708	WITHOUT_CLASSIFICATION	2.854944329302004E-6	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999989584253255	WITHOUT_CLASSIFICATION	1.0415746744861426E-6	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990212275644822	WITHOUT_CLASSIFICATION	9.78772435517826E-4	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999998390848613	WITHOUT_CLASSIFICATION	1.6091513864830343E-7	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999999456794622	WITHOUT_CLASSIFICATION	5.43205378077476E-8	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999999478645895	WITHOUT_CLASSIFICATION	5.213541046041626E-8	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999997767057576	WITHOUT_CLASSIFICATION	2.2329424240934494E-7	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982478707454786	WITHOUT_CLASSIFICATION	0.001752129254521312	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.9781834153619123	WITHOUT_CLASSIFICATION	0.02181658463808756	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999996546043465	WITHOUT_CLASSIFICATION	3.4539565353868137E-7	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999500002394475	WITHOUT_CLASSIFICATION	4.999976055256302E-5	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999588904290316	WITHOUT_CLASSIFICATION	4.1109570968380976E-5	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700516869044	WITHOUT_CLASSIFICATION	2.9948313095609452E-5	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999993357934196	WITHOUT_CLASSIFICATION	6.642065804045007E-6	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999916282577	WITHOUT_CLASSIFICATION	8.37174217731044E-9	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999980480651494	WITHOUT_CLASSIFICATION	1.9519348507124935E-6	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999953115850154	WITHOUT_CLASSIFICATION	4.68841498459618E-6	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999989981706027	WITHOUT_CLASSIFICATION	1.0018293973741238E-6	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999999398427922	WITHOUT_CLASSIFICATION	6.0157207800293E-8	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999989246667383	WITHOUT_CLASSIFICATION	1.0753332616953736E-6	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.9999983090034968	WITHOUT_CLASSIFICATION	1.6909965031673304E-6	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999994949806905	WITHOUT_CLASSIFICATION	5.050193094520512E-7	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999999466035574	WITHOUT_CLASSIFICATION	5.339644250843498E-8	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999979207317	WITHOUT_CLASSIFICATION	2.0792682921248847E-9	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999922688316005	WITHOUT_CLASSIFICATION	7.731168399473857E-6	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999847791432311	WITHOUT_CLASSIFICATION	1.522085676890017E-5	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999991936830528	WITHOUT_CLASSIFICATION	8.063169471120166E-7	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999996687603	WITHOUT_CLASSIFICATION	3.3123971829467435E-10	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999993142547953	WITHOUT_CLASSIFICATION	6.857452047596076E-7	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999922360885894	WITHOUT_CLASSIFICATION	7.76391141057723E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999917626112779	WITHOUT_CLASSIFICATION	8.237388722176663E-6	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999979724249262	WITHOUT_CLASSIFICATION	2.027575073888567E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999917626112779	WITHOUT_CLASSIFICATION	8.237388722176663E-6	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999998954492	WITHOUT_CLASSIFICATION	1.0455085054473145E-10	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999999195494631	WITHOUT_CLASSIFICATION	8.045053694862251E-8	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999338265652344	WITHOUT_CLASSIFICATION	6.617343476552568E-5	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999832274650441	WITHOUT_CLASSIFICATION	1.6772534955915555E-5	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999997913417262	WITHOUT_CLASSIFICATION	2.086582738193439E-7	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999869338385698	WITHOUT_CLASSIFICATION	1.306616143011046E-5	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999999963519399	WITHOUT_CLASSIFICATION	3.648060096514783E-9	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999999883297702	WITHOUT_CLASSIFICATION	1.1670229807500447E-7	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999999196622691	WITHOUT_CLASSIFICATION	8.033773082142692E-8	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999597391421	WITHOUT_CLASSIFICATION	4.0260857813956056E-8	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999531870265	WITHOUT_CLASSIFICATION	4.681297350666836E-8	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999994192177133	WITHOUT_CLASSIFICATION	5.807822866898764E-7	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999671405324	WITHOUT_CLASSIFICATION	3.285946750833995E-8	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999511187719772	WITHOUT_CLASSIFICATION	4.888122802282469E-5	IMPLEMENTATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999962477552992	WITHOUT_CLASSIFICATION	3.752244700804262E-5	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999996555136978	WITHOUT_CLASSIFICATION	3.444863020600448E-7	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999193551595	WITHOUT_CLASSIFICATION	8.06448405135684E-8	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999951847901	WITHOUT_CLASSIFICATION	4.815209840491956E-9	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999968495137	WITHOUT_CLASSIFICATION	3.1504863066341622E-9	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999998190394187	WITHOUT_CLASSIFICATION	1.8096058117208376E-7	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999678098973	WITHOUT_CLASSIFICATION	3.2190102662809255E-8	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999971092809933	WITHOUT_CLASSIFICATION	2.8907190066120675E-6	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9996984067783777	WITHOUT_CLASSIFICATION	3.0159322162227604E-4	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999896260048816	WITHOUT_CLASSIFICATION	1.0373995118485399E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999962244407351	WITHOUT_CLASSIFICATION	3.775559264976803E-6	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999984580306	WITHOUT_CLASSIFICATION	1.5419694394171646E-9	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.999997251030602	WITHOUT_CLASSIFICATION	2.7489693979329468E-6	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.9999970476312073	WITHOUT_CLASSIFICATION	2.9523687927073426E-6	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998217919257	WITHOUT_CLASSIFICATION	1.7820807432355315E-7	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999979628820542	WITHOUT_CLASSIFICATION	2.037117945858182E-6	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.9999996020989692	WITHOUT_CLASSIFICATION	3.9790103086476713E-7	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999650664715167	WITHOUT_CLASSIFICATION	3.493352848335663E-5	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999999783414	WITHOUT_CLASSIFICATION	2.1658544186588865E-11	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999894331767043	WITHOUT_CLASSIFICATION	1.0566823295755678E-5	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999722763694494	WITHOUT_CLASSIFICATION	2.772363055062168E-5	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.9999982302428203	WITHOUT_CLASSIFICATION	1.7697571796412003E-6	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9999993893657124	WITHOUT_CLASSIFICATION	6.106342875463964E-7	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999999888440717	WITHOUT_CLASSIFICATION	1.115592830560812E-7	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9999979972120989	WITHOUT_CLASSIFICATION	2.00278790112263E-6	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999848775297	WITHOUT_CLASSIFICATION	1.5122470182989347E-8	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.9999999523145193	WITHOUT_CLASSIFICATION	4.768548060569407E-8	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.9999871556277183	WITHOUT_CLASSIFICATION	1.2844372281648277E-5	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999978262833874	WITHOUT_CLASSIFICATION	2.173716612599215E-6	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999984580306	WITHOUT_CLASSIFICATION	1.5419694394171646E-9	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.999987861916421	WITHOUT_CLASSIFICATION	1.2138083579128642E-5	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999995050736291	WITHOUT_CLASSIFICATION	4.949263709374616E-7	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.999989675153746	WITHOUT_CLASSIFICATION	1.0324846253841502E-5	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999999937498597	WITHOUT_CLASSIFICATION	6.2501403503973575E-9	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.9999992885674023	WITHOUT_CLASSIFICATION	7.114325977311432E-7	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999400148877	WITHOUT_CLASSIFICATION	5.998511229976213E-8	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999929023439388	WITHOUT_CLASSIFICATION	7.097656061237581E-6	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999596787213171	WITHOUT_CLASSIFICATION	4.0321278682891396E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999963402451905	WITHOUT_CLASSIFICATION	3.659754809555323E-6	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999998522659744	WITHOUT_CLASSIFICATION	1.4773402550268698E-7	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.9999740998082965	WITHOUT_CLASSIFICATION	2.590019170347514E-5	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999973686178	WITHOUT_CLASSIFICATION	2.631382274413703E-9	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999993600626663	WITHOUT_CLASSIFICATION	6.399373337418315E-7	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999971287726489	WITHOUT_CLASSIFICATION	2.871227351154818E-6	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999887051583	WITHOUT_CLASSIFICATION	1.129484175751701E-8	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999987290664	WITHOUT_CLASSIFICATION	1.270933663465967E-9	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999998745437155	WITHOUT_CLASSIFICATION	1.2545628448758476E-7	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999088319201	WITHOUT_CLASSIFICATION	9.116807991148633E-8	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.999967993839826	WITHOUT_CLASSIFICATION	3.200616017387494E-5	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.999987861916421	WITHOUT_CLASSIFICATION	1.2138083579128642E-5	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999999084893642	WITHOUT_CLASSIFICATION	9.151063581662739E-7	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999999018401404	WITHOUT_CLASSIFICATION	9.81598595722571E-8	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999998111935137	WITHOUT_CLASSIFICATION	1.8880648632626856E-7	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999989380054537	WITHOUT_CLASSIFICATION	1.0619945462675852E-6	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999999269464	WITHOUT_CLASSIFICATION	7.305357836459576E-11	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.8964226108881036	WITHOUT_CLASSIFICATION	0.10357738911189635	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.8964226108881036	WITHOUT_CLASSIFICATION	0.10357738911189635	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999992004565363	WITHOUT_CLASSIFICATION	7.99543463707274E-6	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.8964226108881036	WITHOUT_CLASSIFICATION	0.10357738911189635	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.8964226108881036	WITHOUT_CLASSIFICATION	0.10357738911189635	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999943861467507	WITHOUT_CLASSIFICATION	5.613853249261337E-6	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999998811573615	WITHOUT_CLASSIFICATION	1.1884263853502056E-7	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999997051788221	WITHOUT_CLASSIFICATION	2.9482117788032634E-7	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999929427846601	WITHOUT_CLASSIFICATION	7.057215339894543E-6	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999984677496605	WITHOUT_CLASSIFICATION	1.5322503393948748E-6	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999971028472595	WITHOUT_CLASSIFICATION	2.897152740497595E-6	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9996199301531024	WITHOUT_CLASSIFICATION	3.8006984689757423E-4	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999660292129	WITHOUT_CLASSIFICATION	3.3970786990727353E-8	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999893792588286	WITHOUT_CLASSIFICATION	1.0620741171455493E-5	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999918439412828	WITHOUT_CLASSIFICATION	8.156058717227513E-6	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999970032696904	WITHOUT_CLASSIFICATION	2.99673030953268E-6	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999973393170973	WITHOUT_CLASSIFICATION	2.660682902591725E-6	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999996078533778	WITHOUT_CLASSIFICATION	3.921466222029275E-7	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999987796915542	WITHOUT_CLASSIFICATION	1.2203084458562154E-6	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999999896219536	WITHOUT_CLASSIFICATION	1.0378046429208436E-8	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999978853472219	WITHOUT_CLASSIFICATION	2.1146527780272692E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999992691059558	WITHOUT_CLASSIFICATION	7.308940442061608E-7	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999999654538845	WITHOUT_CLASSIFICATION	3.4546115501714017E-7	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999874484412182	WITHOUT_CLASSIFICATION	1.2551558781810677E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999976929236009	WITHOUT_CLASSIFICATION	2.3070763991260766E-6	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999669870027581	WITHOUT_CLASSIFICATION	3.301299724178284E-5	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.999998114844258	WITHOUT_CLASSIFICATION	1.8851557419061108E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999992691059558	WITHOUT_CLASSIFICATION	7.308940442061608E-7	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.999997251030602	WITHOUT_CLASSIFICATION	2.7489693979329468E-6	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.9999776084191182	WITHOUT_CLASSIFICATION	2.239158088186834E-5	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993257057371	WITHOUT_CLASSIFICATION	6.742942628954503E-7	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997559654584	WITHOUT_CLASSIFICATION	2.440345416668732E-7	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.9999976668984979	WITHOUT_CLASSIFICATION	2.3331015022247876E-6	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999934629798656	WITHOUT_CLASSIFICATION	6.537020134340191E-6	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.9999995773022325	WITHOUT_CLASSIFICATION	4.226977674904039E-7	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9841487646521843	WITHOUT_CLASSIFICATION	0.01585123534781568	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999669567651689	WITHOUT_CLASSIFICATION	3.304323483107052E-5	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999993482869929	WITHOUT_CLASSIFICATION	6.517130071042672E-7	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999738376597852	WITHOUT_CLASSIFICATION	2.616234021489035E-5	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999998350807	WITHOUT_CLASSIFICATION	1.6491927437982871E-10	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999998210885989	WITHOUT_CLASSIFICATION	1.78911401187327E-7	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999992839173165	WITHOUT_CLASSIFICATION	7.160826834051653E-7	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999992033721455	WITHOUT_CLASSIFICATION	7.966278543906002E-7	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.99999993636855	WITHOUT_CLASSIFICATION	6.363144992614865E-8	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999988036930181	WITHOUT_CLASSIFICATION	1.1963069818848455E-6	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9991365302598972	WITHOUT_CLASSIFICATION	8.634697401027605E-4	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999958781298	WITHOUT_CLASSIFICATION	4.121870127023148E-9	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999989129373947	WITHOUT_CLASSIFICATION	1.0870626052801599E-6	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999914323606635	WITHOUT_CLASSIFICATION	8.567639336509238E-6	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.999991413288933	WITHOUT_CLASSIFICATION	8.586711066944141E-6	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999331241387	WITHOUT_CLASSIFICATION	6.687586131488735E-8	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999669567651689	WITHOUT_CLASSIFICATION	3.304323483107052E-5	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999997506779479	WITHOUT_CLASSIFICATION	2.4932205215030106E-7	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.9999952208909694	WITHOUT_CLASSIFICATION	4.7791090306281025E-6	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999467184086488	WITHOUT_CLASSIFICATION	5.328159135120934E-5	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999992872279739	WITHOUT_CLASSIFICATION	7.127720260529115E-7	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975130402701	WITHOUT_CLASSIFICATION	2.486959729987202E-6	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.999998689163213	WITHOUT_CLASSIFICATION	1.3108367869795864E-6	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.9999997030320317	WITHOUT_CLASSIFICATION	2.9696796826916296E-7	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.9999985928883939	WITHOUT_CLASSIFICATION	1.4071116060682645E-6	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.9999995132943186	WITHOUT_CLASSIFICATION	4.867056813863122E-7	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.9999320434243981	WITHOUT_CLASSIFICATION	6.795657560184246E-5	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999950762312828	WITHOUT_CLASSIFICATION	4.9237687170996315E-6	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999997405190156	WITHOUT_CLASSIFICATION	2.5948098442819253E-7	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999632003097213	WITHOUT_CLASSIFICATION	3.679969027862176E-5	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999905351136	WITHOUT_CLASSIFICATION	9.464886509546046E-9	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999999059841274	WITHOUT_CLASSIFICATION	9.401587258478E-8	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999999981794294	WITHOUT_CLASSIFICATION	1.820570611327118E-8	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999334324849	WITHOUT_CLASSIFICATION	6.656751501427508E-8	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999950762312828	WITHOUT_CLASSIFICATION	4.9237687170996315E-6	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999996717043	WITHOUT_CLASSIFICATION	3.2829568301096926E-10	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999998791041959	WITHOUT_CLASSIFICATION	1.2089580406853553E-7	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999972404725719	WITHOUT_CLASSIFICATION	2.759527428033998E-6	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9997327490358493	WITHOUT_CLASSIFICATION	2.672509641507593E-4	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.999998784293895	WITHOUT_CLASSIFICATION	1.2157061049195891E-6	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.999988472387838	WITHOUT_CLASSIFICATION	1.1527612162094295E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999999059841274	WITHOUT_CLASSIFICATION	9.401587258478E-8	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999971438804651	WITHOUT_CLASSIFICATION	2.8561195348071678E-6	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975755541429	WITHOUT_CLASSIFICATION	2.4244458570960208E-6	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991460184943	WITHOUT_CLASSIFICATION	8.539815057820739E-7	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9950910365165764	WITHOUT_CLASSIFICATION	0.004908963483423591	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9679404995158666	WITHOUT_CLASSIFICATION	0.032059500484133356	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9963464812344549	WITHOUT_CLASSIFICATION	0.003653518765545035	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999982606348179	WITHOUT_CLASSIFICATION	1.7393651820784636E-6	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999982606348179	WITHOUT_CLASSIFICATION	1.7393651820784636E-6	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999999930536486	WITHOUT_CLASSIFICATION	6.946351355578222E-9	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999982781173812	WITHOUT_CLASSIFICATION	1.7218826187723242E-6	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.9999994732280644	WITHOUT_CLASSIFICATION	5.267719356163162E-7	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.999999363617057	WITHOUT_CLASSIFICATION	6.36382943057854E-7	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999396798254873	WITHOUT_CLASSIFICATION	6.032017451264226E-5	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981225877951	WITHOUT_CLASSIFICATION	1.8774122048880904E-6	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881681078494	WITHOUT_CLASSIFICATION	1.1831892150582794E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999706782566211	WITHOUT_CLASSIFICATION	2.9321743378891415E-5	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999998783411276	WITHOUT_CLASSIFICATION	1.2165887243140405E-7	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991738750245	WITHOUT_CLASSIFICATION	8.261249756339594E-7	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981225877951	WITHOUT_CLASSIFICATION	1.8774122048880904E-6	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881681078494	WITHOUT_CLASSIFICATION	1.1831892150582794E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999706782566211	WITHOUT_CLASSIFICATION	2.9321743378891415E-5	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.9999995682335209	WITHOUT_CLASSIFICATION	4.317664791243615E-7	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.9999920980072812	WITHOUT_CLASSIFICATION	7.901992718845291E-6	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999985329096	WITHOUT_CLASSIFICATION	1.467090401328997E-9	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999998035835147	WITHOUT_CLASSIFICATION	1.9641648533132024E-7	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999544285465	WITHOUT_CLASSIFICATION	4.557145352933144E-8	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999903416268158	WITHOUT_CLASSIFICATION	9.658373184146367E-6	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999985745588726	WITHOUT_CLASSIFICATION	1.4254411273691833E-6	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.9999993327136499	WITHOUT_CLASSIFICATION	6.67286350166764E-7	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9999982041435769	WITHOUT_CLASSIFICATION	1.7958564231912834E-6	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999951260349941	WITHOUT_CLASSIFICATION	4.873965006008805E-6	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999836963673	WITHOUT_CLASSIFICATION	1.6303632659579064E-8	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999954748629584	WITHOUT_CLASSIFICATION	4.525137041540329E-6	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999978049518439	WITHOUT_CLASSIFICATION	2.1950481560985116E-6	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999998524827275	WITHOUT_CLASSIFICATION	1.4751727244301956E-7	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999991083111314	WITHOUT_CLASSIFICATION	8.916888686343856E-7	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.999999926827775	WITHOUT_CLASSIFICATION	7.317222494922547E-8	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999980260847746	WITHOUT_CLASSIFICATION	1.9739152254174953E-6	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999911848300301	WITHOUT_CLASSIFICATION	8.815169969862352E-6	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.999997788314573	WITHOUT_CLASSIFICATION	2.211685427082403E-6	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999948176363924	WITHOUT_CLASSIFICATION	5.182363607583025E-6	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999985817636	WITHOUT_CLASSIFICATION	1.4182363291004482E-9	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999488246641594	WITHOUT_CLASSIFICATION	5.117533584057861E-5	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999997537326511	WITHOUT_CLASSIFICATION	2.462673489069817E-6	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.999956106025873	WITHOUT_CLASSIFICATION	4.389397412691325E-5	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999999987935667	WITHOUT_CLASSIFICATION	1.2064332456684755E-9	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998406598402578	WITHOUT_CLASSIFICATION	1.5934015974215972E-4	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993570886863	WITHOUT_CLASSIFICATION	6.429113137655378E-7	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999429502220772	WITHOUT_CLASSIFICATION	5.704977792285902E-5	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999953038926	WITHOUT_CLASSIFICATION	4.696107403471374E-9	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964137052952	WITHOUT_CLASSIFICATION	3.586294704791391E-6	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999689251422536	WITHOUT_CLASSIFICATION	3.107485774640206E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999560594337	WITHOUT_CLASSIFICATION	4.394056622157257E-8	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999560594337	WITHOUT_CLASSIFICATION	4.394056622157257E-8	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999998656768	WITHOUT_CLASSIFICATION	1.3432329572603137E-10	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999999806051888	WITHOUT_CLASSIFICATION	1.9394811294155615E-8	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9998977928899608	WITHOUT_CLASSIFICATION	1.022071100391816E-4	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999783790889412	WITHOUT_CLASSIFICATION	2.1620911058820484E-5	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999368774181803	WITHOUT_CLASSIFICATION	6.312258181977759E-5	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999985682186	WITHOUT_CLASSIFICATION	1.4317814007039134E-9	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.999989249423953	WITHOUT_CLASSIFICATION	1.0750576047019029E-5	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.9999943656622077	WITHOUT_CLASSIFICATION	5.634337792291408E-6	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999948587260346	WITHOUT_CLASSIFICATION	5.141273965439929E-6	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995556881828	WITHOUT_CLASSIFICATION	4.4431181712411215E-7	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989870398978	WITHOUT_CLASSIFICATION	1.0129601023265147E-6	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995577538598	WITHOUT_CLASSIFICATION	4.4224614008499833E-7	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988234222348	WITHOUT_CLASSIFICATION	1.176577765223101E-6	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999185091605	WITHOUT_CLASSIFICATION	8.149083949083359E-8	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992600387297	WITHOUT_CLASSIFICATION	7.399612702937008E-7	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997614647572	WITHOUT_CLASSIFICATION	2.385352428076164E-7	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968729925762	WITHOUT_CLASSIFICATION	3.1270074237866626E-6	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998973491507	WITHOUT_CLASSIFICATION	1.0265084929956092E-6	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953258865578	WITHOUT_CLASSIFICATION	4.674113442135239E-6	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995612825848	WITHOUT_CLASSIFICATION	4.3871741522644123E-7	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999878854038295	WITHOUT_CLASSIFICATION	1.2114596170507453E-5	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999922109835577	WITHOUT_CLASSIFICATION	7.789016442349716E-6	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999999230287254	WITHOUT_CLASSIFICATION	7.697127452553448E-8	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999332767414	WITHOUT_CLASSIFICATION	6.672325866521497E-8	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999195473165	WITHOUT_CLASSIFICATION	8.045268342013863E-8	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.9996274479549493	WITHOUT_CLASSIFICATION	3.7255204505068834E-4	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999997593374901	WITHOUT_CLASSIFICATION	2.4066250984458066E-7	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.999499447706771	WITHOUT_CLASSIFICATION	5.005522932290284E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999999230287254	WITHOUT_CLASSIFICATION	7.697127452553448E-8	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999999230287254	WITHOUT_CLASSIFICATION	7.697127452553448E-8	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9998014026132179	WITHOUT_CLASSIFICATION	1.9859738678201612E-4	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999993726135615	WITHOUT_CLASSIFICATION	6.27386438467021E-7	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999929693038	WITHOUT_CLASSIFICATION	7.030696192257914E-9	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999952437655748	WITHOUT_CLASSIFICATION	4.756234425102631E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999848545821817	WITHOUT_CLASSIFICATION	1.5145417818452374E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999948176363924	WITHOUT_CLASSIFICATION	5.182363607583025E-6	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999995322410756	WITHOUT_CLASSIFICATION	4.677589242968566E-7	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999913736555551	WITHOUT_CLASSIFICATION	8.62634444488594E-6	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999999604126125	WITHOUT_CLASSIFICATION	3.958738747093923E-8	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999126275718917	WITHOUT_CLASSIFICATION	8.737242810820864E-5	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9991838831020645	WITHOUT_CLASSIFICATION	8.161168979354021E-4	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950122303899	WITHOUT_CLASSIFICATION	4.987769610117036E-6	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999807854218342	WITHOUT_CLASSIFICATION	1.9214578165779412E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999807854218342	WITHOUT_CLASSIFICATION	1.9214578165779412E-5	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999983115520431	WITHOUT_CLASSIFICATION	1.6884479568017905E-6	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999983115520431	WITHOUT_CLASSIFICATION	1.6884479568017905E-6	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980766920658697	WITHOUT_CLASSIFICATION	0.0019233079341304201	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999719303088	WITHOUT_CLASSIFICATION	2.8069691205664034E-7	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999782373198	WITHOUT_CLASSIFICATION	2.176268018584157E-8	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997857073717457	WITHOUT_CLASSIFICATION	2.1429262825430016E-4	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9991613294074203	WITHOUT_CLASSIFICATION	8.386705925796977E-4	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999934391564128	WITHOUT_CLASSIFICATION	6.560843587197164E-6	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935084003965	WITHOUT_CLASSIFICATION	6.4915996035235995E-6	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995547804263	WITHOUT_CLASSIFICATION	4.4521957365861497E-7	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999999735425051	WITHOUT_CLASSIFICATION	2.6457494762322868E-8	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9999999752359308	WITHOUT_CLASSIFICATION	2.476406928908165E-8	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999960672407	WITHOUT_CLASSIFICATION	3.932759334027384E-9	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999994267278387	WITHOUT_CLASSIFICATION	5.732721612912284E-6	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999945805395023	WITHOUT_CLASSIFICATION	5.419460497634318E-6	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.999976999059006	WITHOUT_CLASSIFICATION	2.3000940993999982E-5	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999998199030986	WITHOUT_CLASSIFICATION	1.8009690143896637E-7	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999883621633272	WITHOUT_CLASSIFICATION	1.1637836672814132E-5	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999883621633272	WITHOUT_CLASSIFICATION	1.1637836672814132E-5	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999883621633272	WITHOUT_CLASSIFICATION	1.1637836672814132E-5	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999986423316388	WITHOUT_CLASSIFICATION	1.3576683611505542E-6	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.999999393592577	WITHOUT_CLASSIFICATION	6.064074229175751E-7	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999999999962438	WITHOUT_CLASSIFICATION	3.756196393706255E-11	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999846670786899	WITHOUT_CLASSIFICATION	1.5332921310127955E-5	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999766101236504	WITHOUT_CLASSIFICATION	2.338987634955159E-5	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999119667495588	WITHOUT_CLASSIFICATION	8.803325044112723E-5	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999974719174343	WITHOUT_CLASSIFICATION	2.5280825656995164E-6	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9944821616185011	WITHOUT_CLASSIFICATION	0.005517838381498925	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9517133221601836	WITHOUT_CLASSIFICATION	0.04828667783981644	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999970582371522	WITHOUT_CLASSIFICATION	2.9417628478285943E-6	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.999999992728242	WITHOUT_CLASSIFICATION	7.271757842916244E-9	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9972054594900629	WITHOUT_CLASSIFICATION	0.002794540509937094	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982840581938	WITHOUT_CLASSIFICATION	1.7159418062006233E-6	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.999999963724845	WITHOUT_CLASSIFICATION	3.627515491640378E-8	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9989406742930007	WITHOUT_CLASSIFICATION	0.0010593257069993185	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999999933637587	WITHOUT_CLASSIFICATION	6.6362413245628154E-9	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999997770256525	WITHOUT_CLASSIFICATION	2.2297434751946488E-7	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999986511850435	WITHOUT_CLASSIFICATION	1.3488149564843294E-6	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999998311792491	WITHOUT_CLASSIFICATION	1.6882075090081536E-6	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999993631848528	WITHOUT_CLASSIFICATION	6.368151472767609E-7	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999999838406	WITHOUT_CLASSIFICATION	1.6159341943811027E-11	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999939384839	WITHOUT_CLASSIFICATION	6.061516181193815E-9	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998791889505	WITHOUT_CLASSIFICATION	1.2081104945145514E-7	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.999999991523875	WITHOUT_CLASSIFICATION	8.476125041817038E-9	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999994148125908	WITHOUT_CLASSIFICATION	5.85187409204971E-6	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999978043479545	WITHOUT_CLASSIFICATION	2.1956520455137805E-6	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999998332740287	WITHOUT_CLASSIFICATION	1.6672597119235725E-7	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.9999996547545013	WITHOUT_CLASSIFICATION	3.4524549868592074E-7	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999999999890279	WITHOUT_CLASSIFICATION	1.0972103129319813E-10	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999983364498621	WITHOUT_CLASSIFICATION	1.6635501377957833E-6	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999999918504	WITHOUT_CLASSIFICATION	8.149595414919307E-12	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999998105104897	WITHOUT_CLASSIFICATION	1.8948951035218408E-7	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999996839875541	WITHOUT_CLASSIFICATION	3.160124459792274E-7	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9981765340157811	WITHOUT_CLASSIFICATION	0.001823465984218882	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999999807794001	WITHOUT_CLASSIFICATION	1.922059985189987E-8	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999999514609748	WITHOUT_CLASSIFICATION	4.8539025330373746E-8	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999196614846	WITHOUT_CLASSIFICATION	8.033851539477402E-8	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.9999664654610027	WITHOUT_CLASSIFICATION	3.353453899728381E-5	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999998560861815	WITHOUT_CLASSIFICATION	1.439138185004282E-7	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.9999702510276473	WITHOUT_CLASSIFICATION	2.9748972352721378E-5	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999909807115	WITHOUT_CLASSIFICATION	9.019288587674017E-9	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999963287805492	WITHOUT_CLASSIFICATION	3.6712194508063793E-6	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9943512702765561	WITHOUT_CLASSIFICATION	0.005648729723443897	IMPLEMENTATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999929386142973	WITHOUT_CLASSIFICATION	7.061385702719731E-6	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999995137914	WITHOUT_CLASSIFICATION	4.862087375481614E-10	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999998551601206	WITHOUT_CLASSIFICATION	1.448398795005202E-7	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.999999966362405	WITHOUT_CLASSIFICATION	3.3637595068971385E-8	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999998301273835	WITHOUT_CLASSIFICATION	1.698726164966688E-7	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999857984886642	WITHOUT_CLASSIFICATION	1.4201511335928328E-5	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999998468628898	WITHOUT_CLASSIFICATION	1.5313711012688676E-7	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999989656304061	WITHOUT_CLASSIFICATION	1.0343695938799441E-6	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999518185341577	WITHOUT_CLASSIFICATION	4.818146584229451E-5	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9997626456455067	WITHOUT_CLASSIFICATION	2.3735435449334655E-4	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999835987841657	WITHOUT_CLASSIFICATION	1.6401215834365606E-5	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999981967247556	WITHOUT_CLASSIFICATION	1.803275244406031E-5	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.9999957610717065	WITHOUT_CLASSIFICATION	4.2389282934633205E-6	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9997211024804962	WITHOUT_CLASSIFICATION	2.7889751950378885E-4	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.999999799174429	WITHOUT_CLASSIFICATION	2.0082557098742392E-7	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999405655569	WITHOUT_CLASSIFICATION	5.9434443023658305E-8	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999586850281011	WITHOUT_CLASSIFICATION	4.131497189878955E-5	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.999999942166894	WITHOUT_CLASSIFICATION	5.783310603969184E-8	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999999991530481	WITHOUT_CLASSIFICATION	8.469519075837167E-9	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999994613517	WITHOUT_CLASSIFICATION	5.38648317384183E-10	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999999827594124	WITHOUT_CLASSIFICATION	1.7240587611980936E-8	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999883816525	WITHOUT_CLASSIFICATION	1.1618347434919436E-8	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999999978487301	WITHOUT_CLASSIFICATION	2.151269897114864E-8	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999898555983	WITHOUT_CLASSIFICATION	1.0144401609888182E-8	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999998177900916	WITHOUT_CLASSIFICATION	1.8220990828491719E-7	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999832924761588	WITHOUT_CLASSIFICATION	1.6707523841106564E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999832924761588	WITHOUT_CLASSIFICATION	1.6707523841106564E-5	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999998599173686	WITHOUT_CLASSIFICATION	1.4008263140633985E-7	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999999614118799	WITHOUT_CLASSIFICATION	3.858812010846518E-8	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999995203486174	WITHOUT_CLASSIFICATION	4.796513826867745E-7	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999991726602445	WITHOUT_CLASSIFICATION	8.273397555733035E-7	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.999999454642221	WITHOUT_CLASSIFICATION	5.453577789306089E-7	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999665067913782	WITHOUT_CLASSIFICATION	3.349320862174884E-5	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999928169954	WITHOUT_CLASSIFICATION	7.183004703374945E-9	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999716445251	WITHOUT_CLASSIFICATION	2.8355474929725896E-8	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999941071673031	WITHOUT_CLASSIFICATION	5.8928326969484395E-6	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999999917732392	WITHOUT_CLASSIFICATION	8.226760910415777E-9	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999992072962146	WITHOUT_CLASSIFICATION	7.92703785310748E-7	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999998434158726	WITHOUT_CLASSIFICATION	1.5658412735494474E-7	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.9999999222919693	WITHOUT_CLASSIFICATION	7.770803067654114E-8	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999938382067	WITHOUT_CLASSIFICATION	6.161793344398946E-9	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999997482390749	WITHOUT_CLASSIFICATION	2.517609250773668E-7	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9883212292335186	WITHOUT_CLASSIFICATION	0.011678770766481423	IMPLEMENTATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.999999273805409	WITHOUT_CLASSIFICATION	7.261945910616838E-7	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9950859571988315	WITHOUT_CLASSIFICATION	0.004914042801168383	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9603059720298882	WITHOUT_CLASSIFICATION	0.039694027970111755	IMPLEMENTATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999984884795733	WITHOUT_CLASSIFICATION	1.5115204267184987E-6	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9999989308412508	WITHOUT_CLASSIFICATION	1.0691587491438034E-6	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999997241826722	WITHOUT_CLASSIFICATION	2.7581732769533367E-7	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999989132878225	WITHOUT_CLASSIFICATION	1.0867121774660197E-6	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9991766925025167	WITHOUT_CLASSIFICATION	8.233074974833973E-4	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999529731859	WITHOUT_CLASSIFICATION	4.702681412295605E-8	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.9999957037699566	WITHOUT_CLASSIFICATION	4.2962300433475515E-6	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999926540682076	WITHOUT_CLASSIFICATION	7.3459317923930525E-6	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999999898810951	WITHOUT_CLASSIFICATION	1.0118904966073671E-8	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999967063218039	WITHOUT_CLASSIFICATION	3.293678196013089E-6	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999974724967137	WITHOUT_CLASSIFICATION	2.527503286386924E-6	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999999676609293	WITHOUT_CLASSIFICATION	3.2339070696983923E-7	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999976457407374	WITHOUT_CLASSIFICATION	2.354259262565194E-6	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.9999995424641572	WITHOUT_CLASSIFICATION	4.5753584276703737E-7	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.9999962029507564	WITHOUT_CLASSIFICATION	3.7970492434920557E-6	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9994763339212575	WITHOUT_CLASSIFICATION	5.236660787424323E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9994763339212575	WITHOUT_CLASSIFICATION	5.236660787424323E-4	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999991991168997	WITHOUT_CLASSIFICATION	8.008831002764603E-7	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999701607212043	WITHOUT_CLASSIFICATION	2.9839278795654003E-5	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999999850798307	WITHOUT_CLASSIFICATION	1.492016930356787E-8	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999381856371725	WITHOUT_CLASSIFICATION	6.1814362827564E-5	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999999968369422	WITHOUT_CLASSIFICATION	3.163057868345069E-9	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999999831518904	WITHOUT_CLASSIFICATION	1.6848109670866318E-8	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999992747094131	WITHOUT_CLASSIFICATION	7.252905868449718E-7	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999988258929187	WITHOUT_CLASSIFICATION	1.1741070813270088E-6	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999998905842656	WITHOUT_CLASSIFICATION	1.0941573438842146E-7	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999988316644306	WITHOUT_CLASSIFICATION	1.1683355694384775E-6	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999486011574	WITHOUT_CLASSIFICATION	5.139884261420156E-8	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999975262236671	WITHOUT_CLASSIFICATION	2.4737763329979467E-6	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999246137192398	WITHOUT_CLASSIFICATION	7.538628076025735E-5	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999950305024	WITHOUT_CLASSIFICATION	4.9694975512511614E-9	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999514090182618	WITHOUT_CLASSIFICATION	4.859098173819435E-5	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999987668893916	WITHOUT_CLASSIFICATION	1.233110608447868E-6	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.994722149381902	WITHOUT_CLASSIFICATION	0.005277850618098057	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.994722149381902	WITHOUT_CLASSIFICATION	0.005277850618098057	IMPLEMENTATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999999401666534	WITHOUT_CLASSIFICATION	5.983334655710194E-8	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999996304746785	WITHOUT_CLASSIFICATION	3.695253214220095E-7	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999913696439957	WITHOUT_CLASSIFICATION	8.63035600439717E-6	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998809085681	WITHOUT_CLASSIFICATION	1.1909143190490059E-7	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999994147527689	WITHOUT_CLASSIFICATION	5.852472310503215E-7	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999994267278387	WITHOUT_CLASSIFICATION	5.732721612912284E-6	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998808041111874	WITHOUT_CLASSIFICATION	1.191958888125613E-4	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999521645915	WITHOUT_CLASSIFICATION	4.783540853875236E-8	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999675985578	WITHOUT_CLASSIFICATION	3.2401442120083274E-8	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999984692509	WITHOUT_CLASSIFICATION	1.5307491004227178E-8	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9999997420421305	WITHOUT_CLASSIFICATION	2.5795786951460117E-7	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9999997420421305	WITHOUT_CLASSIFICATION	2.5795786951460117E-7	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999899294373517	WITHOUT_CLASSIFICATION	1.0070562648410827E-5	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.99999981524112	WITHOUT_CLASSIFICATION	1.847588798913949E-7	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999978499127595	WITHOUT_CLASSIFICATION	2.150087240421118E-6	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.99999885843108	WITHOUT_CLASSIFICATION	1.1415689200178808E-6	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999972081186392	WITHOUT_CLASSIFICATION	2.791881360653035E-6	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999997282405	WITHOUT_CLASSIFICATION	2.717593922625058E-10	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999989668016401	WITHOUT_CLASSIFICATION	1.0331983599306626E-6	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999974355284728	WITHOUT_CLASSIFICATION	2.5644715272051326E-5	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.999972012438353	WITHOUT_CLASSIFICATION	2.7987561646975416E-5	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9996865589190951	WITHOUT_CLASSIFICATION	3.1344108090495794E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999997694528201	WITHOUT_CLASSIFICATION	2.3054717989777434E-6	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999970576779817	WITHOUT_CLASSIFICATION	2.9423220181878103E-6	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999077464269706	WITHOUT_CLASSIFICATION	9.225357302939455E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999943912499694	WITHOUT_CLASSIFICATION	5.6087500306866115E-6	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999993887551363	WITHOUT_CLASSIFICATION	6.112448637145596E-7	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999996439520192	WITHOUT_CLASSIFICATION	3.5604798068756713E-7	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999999477605321	WITHOUT_CLASSIFICATION	5.223946791288188E-8	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999999994909447	WITHOUT_CLASSIFICATION	5.0905528747021315E-9	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999989217997	WITHOUT_CLASSIFICATION	1.0782003075218754E-9	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.9999986326374116	WITHOUT_CLASSIFICATION	1.3673625883033041E-6	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999972247081063	WITHOUT_CLASSIFICATION	2.7752918938397998E-6	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9998634577642911	WITHOUT_CLASSIFICATION	1.365422357089395E-4	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999993613930374	WITHOUT_CLASSIFICATION	6.386069626964315E-7	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999986250924708	WITHOUT_CLASSIFICATION	1.3749075291979413E-6	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999996412159915	WITHOUT_CLASSIFICATION	3.5878400855538947E-7	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.999999661237355	WITHOUT_CLASSIFICATION	3.387626450369517E-7	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999985414363735	WITHOUT_CLASSIFICATION	1.458563626464437E-6	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999300739631	WITHOUT_CLASSIFICATION	6.992603690004797E-5	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9984176697653988	WITHOUT_CLASSIFICATION	0.0015823302346012111	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999813519875764	WITHOUT_CLASSIFICATION	1.8648012423521205E-5	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9998771738830426	WITHOUT_CLASSIFICATION	1.2282611695738402E-4	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999832847137	WITHOUT_CLASSIFICATION	1.6715286332057015E-8	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999529808085332	WITHOUT_CLASSIFICATION	4.701919146680064E-5	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9999999853301094	WITHOUT_CLASSIFICATION	1.4669890722236886E-8	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999997883332552	WITHOUT_CLASSIFICATION	2.1166674484491966E-7	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999993907481884	WITHOUT_CLASSIFICATION	6.092518114928524E-7	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999965671602605	WITHOUT_CLASSIFICATION	3.432839739469691E-6	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999995414207903	WITHOUT_CLASSIFICATION	4.585792097596123E-7	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999999518182899	WITHOUT_CLASSIFICATION	4.8181710085328585E-8	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999999518182899	WITHOUT_CLASSIFICATION	4.8181710085328585E-8	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999593618621	WITHOUT_CLASSIFICATION	4.063813793196301E-8	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999432412681	WITHOUT_CLASSIFICATION	5.675873203324941E-8	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998933594948	WITHOUT_CLASSIFICATION	1.066405051967453E-7	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.9999906970886645	WITHOUT_CLASSIFICATION	9.302911335549658E-6	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999979423120621	WITHOUT_CLASSIFICATION	2.0576879379008348E-6	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999999967213	WITHOUT_CLASSIFICATION	3.278804975169041E-12	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999931769	WITHOUT_CLASSIFICATION	6.823069290115641E-12	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999864956658887	WITHOUT_CLASSIFICATION	1.3504334111191126E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999593618621	WITHOUT_CLASSIFICATION	4.063813793196301E-8	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999432412681	WITHOUT_CLASSIFICATION	5.675873203324941E-8	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999988378439028	WITHOUT_CLASSIFICATION	1.1621560971745599E-6	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999652043496817	WITHOUT_CLASSIFICATION	3.479565031818818E-5	IMPLEMENTATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999696118856	WITHOUT_CLASSIFICATION	3.0388114426383115E-8	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9996467484412604	WITHOUT_CLASSIFICATION	3.5325155873952303E-4	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999996788458322	WITHOUT_CLASSIFICATION	3.211541678585698E-7	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999998398730418	WITHOUT_CLASSIFICATION	1.6012695831602846E-7	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999980017401056	WITHOUT_CLASSIFICATION	1.998259894471106E-6	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999727157724588	WITHOUT_CLASSIFICATION	2.7284227541105842E-5	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999882593702942	WITHOUT_CLASSIFICATION	1.1740629705812308E-5	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9413354817952453	IMPLEMENTATION	0.05866451820475462	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999999800528	WITHOUT_CLASSIFICATION	1.9947138003542577E-11	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9413354817952453	IMPLEMENTATION	0.05866451820475462	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999984960473506	WITHOUT_CLASSIFICATION	1.503952649399282E-6	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999996633434354	WITHOUT_CLASSIFICATION	3.3665656459901326E-7	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999994479123934	WITHOUT_CLASSIFICATION	5.520876066589873E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994362988969	WITHOUT_CLASSIFICATION	5.637011030196861E-7	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999996344739936	WITHOUT_CLASSIFICATION	3.655260063978018E-6	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999727157724588	WITHOUT_CLASSIFICATION	2.7284227541105842E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999727157724588	WITHOUT_CLASSIFICATION	2.7284227541105842E-5	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999999382920146	WITHOUT_CLASSIFICATION	6.170798537829635E-8	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.999999942805996	WITHOUT_CLASSIFICATION	5.719400401970124E-8	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999995015342531	WITHOUT_CLASSIFICATION	4.984657469245314E-7	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999993334003596	WITHOUT_CLASSIFICATION	6.66599640323362E-7	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999990233534879	WITHOUT_CLASSIFICATION	9.766465122001285E-7	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999999255292097	WITHOUT_CLASSIFICATION	7.447079024349017E-8	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9991746696232335	WITHOUT_CLASSIFICATION	8.253303767666042E-4	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999998103487353	WITHOUT_CLASSIFICATION	1.896512647873063E-7	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999999819677494	WITHOUT_CLASSIFICATION	1.8032250654108087E-8	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999851238127869	WITHOUT_CLASSIFICATION	1.4876187213176815E-5	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.9999978608846921	WITHOUT_CLASSIFICATION	2.139115307767053E-6	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.9999999444599892	WITHOUT_CLASSIFICATION	5.554001074223527E-8	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999964129502649	WITHOUT_CLASSIFICATION	3.5870497351241964E-6	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.999982142893206	WITHOUT_CLASSIFICATION	1.7857106793940263E-5	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9999999042066724	WITHOUT_CLASSIFICATION	9.579332758234177E-8	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999857613431307	WITHOUT_CLASSIFICATION	1.4238656869382951E-5	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999959413817822	WITHOUT_CLASSIFICATION	4.058618217806597E-6	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999942491930238	WITHOUT_CLASSIFICATION	5.750806976233132E-6	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999879001129467	WITHOUT_CLASSIFICATION	1.2099887053357702E-5	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999851533312	WITHOUT_CLASSIFICATION	1.4846668772297007E-8	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9999965725641067	WITHOUT_CLASSIFICATION	3.4274358932569357E-6	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999478393001855	WITHOUT_CLASSIFICATION	5.216069981453927E-5	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999535034177534	WITHOUT_CLASSIFICATION	4.649658224654965E-5	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9995514272021083	WITHOUT_CLASSIFICATION	4.4857279789164967E-4	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999773928865131	WITHOUT_CLASSIFICATION	2.260711348692586E-5	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999598016398463	WITHOUT_CLASSIFICATION	4.0198360153673835E-5	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999997181555973	WITHOUT_CLASSIFICATION	2.818444027274267E-7	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999993789612122	WITHOUT_CLASSIFICATION	6.210387879796057E-7	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.995415132048363	WITHOUT_CLASSIFICATION	0.004584867951637034	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9962006388459272	WITHOUT_CLASSIFICATION	0.003799361154072772	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9952683162884676	WITHOUT_CLASSIFICATION	0.004731683711532439	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.930296914745749	WITHOUT_CLASSIFICATION	0.06970308525425102	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.999920272295415	WITHOUT_CLASSIFICATION	7.97277045849758E-5	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999998103487353	WITHOUT_CLASSIFICATION	1.896512647873063E-7	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999920135693166	WITHOUT_CLASSIFICATION	7.986430683498884E-6	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.999977620838679	WITHOUT_CLASSIFICATION	2.2379161321004204E-5	IMPLEMENTATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9486869018922602	WITHOUT_CLASSIFICATION	0.05131309810773975	IMPLEMENTATION
an assertion	WITHOUT_CLASSIFICATION	0.9999998449395718	WITHOUT_CLASSIFICATION	1.5506042824468366E-7	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9996830239866517	WITHOUT_CLASSIFICATION	3.1697601334824076E-4	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.9999976967492535	WITHOUT_CLASSIFICATION	2.3032507463898773E-6	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999993334003596	WITHOUT_CLASSIFICATION	6.66599640323362E-7	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999993334003596	WITHOUT_CLASSIFICATION	6.66599640323362E-7	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9998856027118869	WITHOUT_CLASSIFICATION	1.1439728811304617E-4	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999962727710917	WITHOUT_CLASSIFICATION	3.7272289083770333E-6	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.9999996531331218	WITHOUT_CLASSIFICATION	3.4686687820005636E-7	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.999954942856341	WITHOUT_CLASSIFICATION	4.505714365889035E-5	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999535397199897	WITHOUT_CLASSIFICATION	4.646028001038518E-5	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999994750789605	WITHOUT_CLASSIFICATION	5.249210394971318E-7	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999996355471574	WITHOUT_CLASSIFICATION	3.644528425836217E-7	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999740072162	WITHOUT_CLASSIFICATION	2.599278375626016E-8	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.999999974225792	WITHOUT_CLASSIFICATION	2.577420793454266E-8	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999905682473159	WITHOUT_CLASSIFICATION	9.431752684064644E-6	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999733707208	WITHOUT_CLASSIFICATION	2.662927923063596E-8	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999978495902285	WITHOUT_CLASSIFICATION	2.1504097713551344E-6	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999894834619066	WITHOUT_CLASSIFICATION	1.0516538093326484E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999593618621	WITHOUT_CLASSIFICATION	4.063813793196301E-8	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999733707208	WITHOUT_CLASSIFICATION	2.662927923063596E-8	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999998008035988	WITHOUT_CLASSIFICATION	1.9919640105878346E-7	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9997891583295967	WITHOUT_CLASSIFICATION	2.1084167040334988E-4	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999996807231052	WITHOUT_CLASSIFICATION	3.192768947375452E-7	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.9451157259799674	IMPLEMENTATION	0.0548842740200327	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999894834619066	WITHOUT_CLASSIFICATION	1.0516538093326484E-5	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999991743849589	WITHOUT_CLASSIFICATION	8.256150411433468E-7	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996428096444	WITHOUT_CLASSIFICATION	3.571903555809197E-7	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999985696450094	WITHOUT_CLASSIFICATION	1.4303549905821373E-6	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999999994444	WITHOUT_CLASSIFICATION	5.55598520541966E-13	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999906006890308	WITHOUT_CLASSIFICATION	9.39931096926772E-6	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999998431624331	WITHOUT_CLASSIFICATION	1.56837566980505E-7	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999736978854	WITHOUT_CLASSIFICATION	2.630211459179428E-8	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999953724877174	WITHOUT_CLASSIFICATION	4.62751228253841E-6	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999505485496959	WITHOUT_CLASSIFICATION	4.9451450304065925E-5	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999969320278438	WITHOUT_CLASSIFICATION	3.0679721561635645E-6	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999995228808413	WITHOUT_CLASSIFICATION	4.77119158648043E-7	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999298370494477	WITHOUT_CLASSIFICATION	7.016295055229524E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999733707208	WITHOUT_CLASSIFICATION	2.662927923063596E-8	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999991743849589	WITHOUT_CLASSIFICATION	8.256150411433468E-7	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999985696450094	WITHOUT_CLASSIFICATION	1.4303549905821373E-6	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999998348713649	WITHOUT_CLASSIFICATION	1.65128635064609E-7	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999999311050899	WITHOUT_CLASSIFICATION	6.889491020565282E-8	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.9999999366255906	WITHOUT_CLASSIFICATION	6.337440936315824E-8	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999894834619066	WITHOUT_CLASSIFICATION	1.0516538093326484E-5	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.999998858792866	WITHOUT_CLASSIFICATION	1.141207133944075E-6	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999961212748939	WITHOUT_CLASSIFICATION	3.878725106120343E-6	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999662370553905	WITHOUT_CLASSIFICATION	3.376294460961104E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999930295217788	WITHOUT_CLASSIFICATION	6.9704782211784505E-6	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999953724877174	WITHOUT_CLASSIFICATION	4.62751228253841E-6	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999998008035988	WITHOUT_CLASSIFICATION	1.9919640105878346E-7	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.9999761961967348	WITHOUT_CLASSIFICATION	2.3803803265175464E-5	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.999999700376055	WITHOUT_CLASSIFICATION	2.996239449789308E-7	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999998839574475	WITHOUT_CLASSIFICATION	1.1604255245942619E-7	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999947542302995	WITHOUT_CLASSIFICATION	5.245769700553766E-6	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.990225393488442	WITHOUT_CLASSIFICATION	0.009774606511558028	IMPLEMENTATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9997176058816776	WITHOUT_CLASSIFICATION	2.823941183224371E-4	IMPLEMENTATION
render the SQL	WITHOUT_CLASSIFICATION	0.9999966636095613	WITHOUT_CLASSIFICATION	3.3363904386351944E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994362988969	WITHOUT_CLASSIFICATION	5.637011030196861E-7	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999637666049	WITHOUT_CLASSIFICATION	3.6233395085959975E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998240121382267	WITHOUT_CLASSIFICATION	1.7598786177332694E-4	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999911523406	WITHOUT_CLASSIFICATION	8.847659452324664E-9	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999992008859124	WITHOUT_CLASSIFICATION	7.991140875343476E-7	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999801695674	WITHOUT_CLASSIFICATION	1.9830432670503292E-8	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999580770864	WITHOUT_CLASSIFICATION	4.192291346122338E-8	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999778298176	WITHOUT_CLASSIFICATION	2.2170182345001656E-8	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.9999996812609369	WITHOUT_CLASSIFICATION	3.187390632306901E-7	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999997571464575	WITHOUT_CLASSIFICATION	2.4285354255946793E-7	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999930295217788	WITHOUT_CLASSIFICATION	6.9704782211784505E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998240121382267	WITHOUT_CLASSIFICATION	1.7598786177332694E-4	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999630234305408	WITHOUT_CLASSIFICATION	3.6976569459234555E-5	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.9999938836062228	WITHOUT_CLASSIFICATION	6.116393777244955E-6	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999961459175011	WITHOUT_CLASSIFICATION	3.8540824989015055E-6	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999910922413228	WITHOUT_CLASSIFICATION	8.907758677169636E-6	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.9999958421066927	WITHOUT_CLASSIFICATION	4.15789330737864E-6	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999958547624205	WITHOUT_CLASSIFICATION	4.145237579490796E-6	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999959857721705	WITHOUT_CLASSIFICATION	4.01422782949247E-6	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.9981738497600071	WITHOUT_CLASSIFICATION	0.0018261502399929512	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999999736481555	WITHOUT_CLASSIFICATION	2.635184454546493E-8	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9991469797160792	WITHOUT_CLASSIFICATION	8.530202839208017E-4	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999999297472955	WITHOUT_CLASSIFICATION	7.025270453960776E-8	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999842351315	WITHOUT_CLASSIFICATION	1.5764868591050743E-8	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999590147514054	WITHOUT_CLASSIFICATION	4.098524859465745E-5	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.9999993630272365	WITHOUT_CLASSIFICATION	6.369727635744279E-7	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999479252922	WITHOUT_CLASSIFICATION	5.207470771096899E-8	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999617747083	WITHOUT_CLASSIFICATION	3.822529173988375E-8	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999998025070383	WITHOUT_CLASSIFICATION	1.9749296169975086E-6	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999535987508	WITHOUT_CLASSIFICATION	4.640124924890251E-8	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999974685292377	WITHOUT_CLASSIFICATION	2.531470762419031E-6	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999999217293479	WITHOUT_CLASSIFICATION	7.827065202467056E-8	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.9999872592626896	WITHOUT_CLASSIFICATION	1.2740737310322761E-5	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999994411436347	WITHOUT_CLASSIFICATION	5.588563651806271E-7	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999997683092442	WITHOUT_CLASSIFICATION	2.3169075578696107E-7	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999967259235	WITHOUT_CLASSIFICATION	3.274076545618571E-9	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999998730378405	WITHOUT_CLASSIFICATION	1.2696215949460098E-7	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9007758055815368	WITHOUT_CLASSIFICATION	0.09922419441846325	IMPLEMENTATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9998395775378712	WITHOUT_CLASSIFICATION	1.6042246212884885E-4	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999992684979787	WITHOUT_CLASSIFICATION	7.315020213348064E-7	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999996876361607	WITHOUT_CLASSIFICATION	3.1236383929435244E-6	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.7056738553106435	IMPLEMENTATION	0.2943261446893565	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999545403095	WITHOUT_CLASSIFICATION	4.545969039188939E-8	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999941707384639	WITHOUT_CLASSIFICATION	5.829261536154984E-6	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999991464865124	WITHOUT_CLASSIFICATION	8.535134876622745E-7	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999793472141895	WITHOUT_CLASSIFICATION	2.0652785810598596E-5	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999999996457678	WITHOUT_CLASSIFICATION	3.5423219275284877E-9	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9999959054863993	WITHOUT_CLASSIFICATION	4.094513600746623E-6	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999999732433181	WITHOUT_CLASSIFICATION	2.6756681876865196E-8	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999726582525551	WITHOUT_CLASSIFICATION	2.7341747444904585E-5	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9999959054863993	WITHOUT_CLASSIFICATION	4.094513600746623E-6	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999999996457678	WITHOUT_CLASSIFICATION	3.5423219275284877E-9	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999999732433181	WITHOUT_CLASSIFICATION	2.6756681876865196E-8	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.9999982306868066	WITHOUT_CLASSIFICATION	1.7693131933502037E-6	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999986836276439	WITHOUT_CLASSIFICATION	1.31637235621452E-6	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999558181526	WITHOUT_CLASSIFICATION	4.418184736192417E-8	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999994526132053	WITHOUT_CLASSIFICATION	5.47386794664852E-7	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999903523277	WITHOUT_CLASSIFICATION	9.647672334533055E-9	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.6545573090775221	IMPLEMENTATION	0.345442690922478	WITHOUT_CLASSIFICATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999790998106289	WITHOUT_CLASSIFICATION	2.0900189370982376E-5	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9991959799750785	WITHOUT_CLASSIFICATION	8.040200249215029E-4	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999976014482331	WITHOUT_CLASSIFICATION	2.398551766775925E-6	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999999055087934	WITHOUT_CLASSIFICATION	9.449120659591161E-7	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.9999989706363195	WITHOUT_CLASSIFICATION	1.0293636805213304E-6	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999975305076803	WITHOUT_CLASSIFICATION	2.469492319814117E-6	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997328178829059	WITHOUT_CLASSIFICATION	2.671821170940742E-4	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999994526132053	WITHOUT_CLASSIFICATION	5.47386794664852E-7	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9987112131969731	WITHOUT_CLASSIFICATION	0.0012887868030268907	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999859755813	WITHOUT_CLASSIFICATION	1.4024418770556228E-8	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999985760594	WITHOUT_CLASSIFICATION	1.4239406500181464E-9	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999997460592565	WITHOUT_CLASSIFICATION	2.5394074354153993E-7	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999995896832783	WITHOUT_CLASSIFICATION	4.1031672178522665E-7	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999440211242	WITHOUT_CLASSIFICATION	5.597887569871947E-8	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9942013191719269	WITHOUT_CLASSIFICATION	0.005798680828073136	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.999999997446927	WITHOUT_CLASSIFICATION	2.5530729172987796E-9	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999998449442441	WITHOUT_CLASSIFICATION	1.5505575591224538E-6	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999993167545913	WITHOUT_CLASSIFICATION	6.832454085883329E-7	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999909383466	WITHOUT_CLASSIFICATION	9.061653418704657E-9	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999909383466	WITHOUT_CLASSIFICATION	9.061653418704657E-9	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999997127685	WITHOUT_CLASSIFICATION	2.872314356129076E-10	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999997127685	WITHOUT_CLASSIFICATION	2.872314356129076E-10	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.9917501349742316	WITHOUT_CLASSIFICATION	0.008249865025768457	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999985760594	WITHOUT_CLASSIFICATION	1.4239406500181464E-9	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999957329372068	WITHOUT_CLASSIFICATION	4.267062793217345E-6	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999930326881549	WITHOUT_CLASSIFICATION	6.967311845156098E-6	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999995416786406	WITHOUT_CLASSIFICATION	4.5832135951075536E-7	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999995416786406	WITHOUT_CLASSIFICATION	4.5832135951075536E-7	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999997615131813	WITHOUT_CLASSIFICATION	2.38486818734931E-7	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999985793221796	WITHOUT_CLASSIFICATION	1.4206778204150885E-6	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999483828019	WITHOUT_CLASSIFICATION	5.1617198157304496E-8	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.9999989814990559	WITHOUT_CLASSIFICATION	1.0185009441277426E-6	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.999983434040834	WITHOUT_CLASSIFICATION	1.6565959166063467E-5	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999958886452368	WITHOUT_CLASSIFICATION	4.111354763166178E-6	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999998155635401	WITHOUT_CLASSIFICATION	1.8443645986784396E-7	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999688862790826	WITHOUT_CLASSIFICATION	3.111372091741687E-5	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.9999903141292127	WITHOUT_CLASSIFICATION	9.685870787275814E-6	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999998820436132	WITHOUT_CLASSIFICATION	1.1795638664541057E-7	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.9999980178108476	WITHOUT_CLASSIFICATION	1.9821891523797578E-6	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.9999250055913864	WITHOUT_CLASSIFICATION	7.499440861358009E-5	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999999509719566	WITHOUT_CLASSIFICATION	4.902804327793148E-8	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9999997472095031	WITHOUT_CLASSIFICATION	2.527904969106166E-7	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999209168006301	WITHOUT_CLASSIFICATION	7.908319936981746E-5	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999988648489926	WITHOUT_CLASSIFICATION	1.135151007429389E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973826401964	WITHOUT_CLASSIFICATION	2.6173598036077594E-6	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999977784205627	WITHOUT_CLASSIFICATION	2.221579437337411E-6	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9998841969566877	WITHOUT_CLASSIFICATION	1.1580304331234528E-4	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999528366925	WITHOUT_CLASSIFICATION	4.716330751822662E-8	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9995394356566747	WITHOUT_CLASSIFICATION	4.6056434332534727E-4	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999999622212384	WITHOUT_CLASSIFICATION	3.777876155299185E-8	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999908621096006	WITHOUT_CLASSIFICATION	9.137890399355584E-6	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999999332946581	WITHOUT_CLASSIFICATION	6.670534189331236E-7	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999783790889412	WITHOUT_CLASSIFICATION	2.1620911058820484E-5	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999996161734979	WITHOUT_CLASSIFICATION	3.8382650212624574E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998240121382267	WITHOUT_CLASSIFICATION	1.7598786177332694E-4	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999842351315	WITHOUT_CLASSIFICATION	1.5764868591050743E-8	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999988247204676	WITHOUT_CLASSIFICATION	1.1752795323621187E-6	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999990399546315	WITHOUT_CLASSIFICATION	9.600453685625747E-7	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999867836721366	WITHOUT_CLASSIFICATION	1.3216327863435183E-5	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999567323278982	WITHOUT_CLASSIFICATION	4.326767210179194E-5	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999976707886793	WITHOUT_CLASSIFICATION	2.3292113207526553E-6	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999976707886793	WITHOUT_CLASSIFICATION	2.3292113207526553E-6	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999987473560378	WITHOUT_CLASSIFICATION	1.2526439622727127E-6	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9999993616034152	WITHOUT_CLASSIFICATION	6.38396584728892E-7	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999998939807395	WITHOUT_CLASSIFICATION	1.0601926059089161E-7	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999998939807395	WITHOUT_CLASSIFICATION	1.0601926059089161E-7	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999936596317246	WITHOUT_CLASSIFICATION	6.3403682754833624E-6	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999914161950757	WITHOUT_CLASSIFICATION	8.583804924278335E-6	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.9999903498971398	WITHOUT_CLASSIFICATION	9.650102860190996E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999848545821817	WITHOUT_CLASSIFICATION	1.5145417818452374E-5	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.9999995239721344	WITHOUT_CLASSIFICATION	4.7602786549842864E-7	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999999980043411	WITHOUT_CLASSIFICATION	1.9956588933406875E-9	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.999869575720082	WITHOUT_CLASSIFICATION	1.3042427991813172E-4	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999920433967207	WITHOUT_CLASSIFICATION	7.956603279314992E-6	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999745311308	WITHOUT_CLASSIFICATION	2.5468869283533446E-8	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999745311308	WITHOUT_CLASSIFICATION	2.5468869283533446E-8	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999998590381117	WITHOUT_CLASSIFICATION	1.409618883009144E-6	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999997696719818	WITHOUT_CLASSIFICATION	2.303280182578124E-7	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999997696719818	WITHOUT_CLASSIFICATION	2.303280182578124E-7	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999919393768	WITHOUT_CLASSIFICATION	8.060623227656096E-9	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999999990613321	WITHOUT_CLASSIFICATION	9.38667920770725E-10	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9978830852536336	WITHOUT_CLASSIFICATION	0.002116914746366492	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.9999987310406341	WITHOUT_CLASSIFICATION	1.2689593659174268E-6	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999987942673749	WITHOUT_CLASSIFICATION	1.2057326250428292E-6	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999993748074	WITHOUT_CLASSIFICATION	6.251926705211331E-10	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.99990237670494	WITHOUT_CLASSIFICATION	9.762329505999461E-5	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999770321710523	WITHOUT_CLASSIFICATION	2.2967828947642573E-5	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999997463978509	WITHOUT_CLASSIFICATION	2.5360214906945687E-7	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9998547324759772	WITHOUT_CLASSIFICATION	1.4526752402280454E-4	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999993021683664	WITHOUT_CLASSIFICATION	6.978316336149467E-7	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9990163944132381	WITHOUT_CLASSIFICATION	9.836055867619717E-4	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999987330099224	WITHOUT_CLASSIFICATION	1.2669900775727923E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999987330099224	WITHOUT_CLASSIFICATION	1.2669900775727923E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999987330099224	WITHOUT_CLASSIFICATION	1.2669900775727923E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999987330099224	WITHOUT_CLASSIFICATION	1.2669900775727923E-6	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999981219193438	WITHOUT_CLASSIFICATION	1.8780806561387726E-6	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999665940969574	WITHOUT_CLASSIFICATION	3.340590304266384E-5	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999955979885119	WITHOUT_CLASSIFICATION	4.402011488069503E-6	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.9999970659554034	WITHOUT_CLASSIFICATION	2.9340445965805888E-6	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999997204643166	WITHOUT_CLASSIFICATION	2.7953568340560404E-6	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9999735615700435	WITHOUT_CLASSIFICATION	2.6438429956494897E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999994267278387	WITHOUT_CLASSIFICATION	5.732721612912284E-6	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999406287802446	WITHOUT_CLASSIFICATION	5.9371219755378524E-5	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999726298415287	WITHOUT_CLASSIFICATION	2.7370158471339696E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999994267278387	WITHOUT_CLASSIFICATION	5.732721612912284E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999994267278387	WITHOUT_CLASSIFICATION	5.732721612912284E-6	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.999952343426219	WITHOUT_CLASSIFICATION	4.765657378113128E-5	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.9999996321168271	WITHOUT_CLASSIFICATION	3.678831729157395E-7	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.9999921054555756	WITHOUT_CLASSIFICATION	7.894544424411341E-6	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999970395968466	WITHOUT_CLASSIFICATION	2.9604031534935394E-6	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999999925573615	WITHOUT_CLASSIFICATION	7.44263851807333E-9	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999999279136434	WITHOUT_CLASSIFICATION	7.208635652804106E-8	IMPLEMENTATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999528788590463	WITHOUT_CLASSIFICATION	4.712114095372993E-5	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999970395968466	WITHOUT_CLASSIFICATION	2.9604031534935394E-6	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999963189457877	WITHOUT_CLASSIFICATION	3.6810542124133454E-6	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999887818815767	WITHOUT_CLASSIFICATION	1.1218118423302318E-5	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999989519144151	WITHOUT_CLASSIFICATION	1.0480855847884335E-6	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999999972935303	WITHOUT_CLASSIFICATION	2.706469731774631E-9	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999999980719758	WITHOUT_CLASSIFICATION	1.928024197888199E-9	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999997114231407	WITHOUT_CLASSIFICATION	2.885768593252748E-7	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999998433122859	WITHOUT_CLASSIFICATION	1.5668771417611573E-7	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.999971946142408	WITHOUT_CLASSIFICATION	2.8053857592075808E-5	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996767379175	WITHOUT_CLASSIFICATION	3.2326208246751156E-7	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999992282521378	WITHOUT_CLASSIFICATION	7.717478621432933E-7	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999958306146	WITHOUT_CLASSIFICATION	4.1693854008985E-9	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.999999890438676	WITHOUT_CLASSIFICATION	1.0956132401204693E-7	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999985700508602	WITHOUT_CLASSIFICATION	1.4299491397648273E-6	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999574264933682	WITHOUT_CLASSIFICATION	4.257350663173792E-5	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999885154547768	WITHOUT_CLASSIFICATION	1.1484545223255814E-5	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999997382415089	WITHOUT_CLASSIFICATION	2.617584911455518E-7	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999978836628	WITHOUT_CLASSIFICATION	2.1163372500096124E-9	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999999548054769	WITHOUT_CLASSIFICATION	4.519452309689417E-8	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999974867887682	WITHOUT_CLASSIFICATION	2.5132112318016804E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999999548054769	WITHOUT_CLASSIFICATION	4.519452309689417E-8	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999994160594097	WITHOUT_CLASSIFICATION	5.83940590297585E-7	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999949513346	WITHOUT_CLASSIFICATION	5.048665383890827E-9	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999955757425438	WITHOUT_CLASSIFICATION	4.424257456159824E-6	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.999998004418346	WITHOUT_CLASSIFICATION	1.9955816540826693E-6	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999998074355416	WITHOUT_CLASSIFICATION	1.9256445841753422E-7	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999976468230812	WITHOUT_CLASSIFICATION	2.3531769188240945E-6	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999999935792024	WITHOUT_CLASSIFICATION	6.420797589720547E-9	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999978836628	WITHOUT_CLASSIFICATION	2.1163372500096124E-9	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999974867887682	WITHOUT_CLASSIFICATION	2.5132112318016804E-6	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999994160594097	WITHOUT_CLASSIFICATION	5.83940590297585E-7	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999985985974926	WITHOUT_CLASSIFICATION	1.401402507315332E-6	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.9999934986879663	WITHOUT_CLASSIFICATION	6.501312033745065E-6	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.999984820009436	WITHOUT_CLASSIFICATION	1.5179990563960838E-5	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999999953109319	WITHOUT_CLASSIFICATION	4.689068150835978E-9	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.9999742243613211	WITHOUT_CLASSIFICATION	2.577563867899709E-5	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999861512733863	WITHOUT_CLASSIFICATION	1.3848726613695833E-4	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999975941528428	WITHOUT_CLASSIFICATION	2.4058471570486275E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973826401964	WITHOUT_CLASSIFICATION	2.6173598036077594E-6	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999949513346	WITHOUT_CLASSIFICATION	5.048665383890827E-9	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999953552329	WITHOUT_CLASSIFICATION	4.644767140363673E-9	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999998868460213	WITHOUT_CLASSIFICATION	1.1315397872530932E-7	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999751230612043	WITHOUT_CLASSIFICATION	2.4876938795696845E-5	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999462251812	WITHOUT_CLASSIFICATION	5.377481890787597E-8	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973826401964	WITHOUT_CLASSIFICATION	2.6173598036077594E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998240121382267	WITHOUT_CLASSIFICATION	1.7598786177332694E-4	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999962845926238	WITHOUT_CLASSIFICATION	3.71540737624916E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973826401964	WITHOUT_CLASSIFICATION	2.6173598036077594E-6	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999998278815051	WITHOUT_CLASSIFICATION	1.7211849495060488E-7	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999989584253255	WITHOUT_CLASSIFICATION	1.0415746744861426E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998240121382267	WITHOUT_CLASSIFICATION	1.7598786177332694E-4	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999044908237072	WITHOUT_CLASSIFICATION	9.550917629274269E-5	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999145821277527	WITHOUT_CLASSIFICATION	8.541787224717412E-5	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999996546043465	WITHOUT_CLASSIFICATION	3.4539565353868137E-7	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.9999980263020455	WITHOUT_CLASSIFICATION	1.973697954586085E-6	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999992681110429	WITHOUT_CLASSIFICATION	7.318889570247499E-7	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.99999804067816	WITHOUT_CLASSIFICATION	1.959321839992665E-6	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999989242830603	WITHOUT_CLASSIFICATION	1.0757169396822512E-6	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.9999997267130292	WITHOUT_CLASSIFICATION	2.732869707937621E-7	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999832924761588	WITHOUT_CLASSIFICATION	1.6707523841106564E-5	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999997403696892	WITHOUT_CLASSIFICATION	2.59630310905666E-7	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9978830852536336	WITHOUT_CLASSIFICATION	0.002116914746366492	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999998540960781	WITHOUT_CLASSIFICATION	1.4590392185780537E-7	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999979298750892	WITHOUT_CLASSIFICATION	2.07012491072021E-6	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999998784864518	WITHOUT_CLASSIFICATION	1.2151354817943277E-7	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999999456794622	WITHOUT_CLASSIFICATION	5.43205378077476E-8	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999990428529	WITHOUT_CLASSIFICATION	9.571471213079958E-10	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999742899768929	WITHOUT_CLASSIFICATION	2.571002310716759E-5	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999961017033477	WITHOUT_CLASSIFICATION	3.898296652190756E-6	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999908269928355	WITHOUT_CLASSIFICATION	9.173007164494814E-6	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999999909063454	WITHOUT_CLASSIFICATION	9.093654590157963E-8	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999455234587	WITHOUT_CLASSIFICATION	5.4476541232023806E-8	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.9980569011703387	WITHOUT_CLASSIFICATION	0.0019430988296612257	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999998531123591	WITHOUT_CLASSIFICATION	1.468876409510089E-7	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999998479259946	WITHOUT_CLASSIFICATION	1.5207400537338608E-7	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999994425198734	WITHOUT_CLASSIFICATION	5.574801266541743E-7	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999685847493892	WITHOUT_CLASSIFICATION	3.141525061079628E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999606202612842	WITHOUT_CLASSIFICATION	3.9379738715807116E-5	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999997808160747	WITHOUT_CLASSIFICATION	2.1918392537161377E-7	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9996712263220475	WITHOUT_CLASSIFICATION	3.287736779523612E-4	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999876058358288	WITHOUT_CLASSIFICATION	1.2394164171174068E-5	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999993756676885	WITHOUT_CLASSIFICATION	6.243323114547115E-7	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.999998924420792	WITHOUT_CLASSIFICATION	1.0755792079521004E-6	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.9949831200858673	WITHOUT_CLASSIFICATION	0.005016879914132587	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999993142547953	WITHOUT_CLASSIFICATION	6.857452047596076E-7	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999999203855425	WITHOUT_CLASSIFICATION	7.961445746390941E-8	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.9999962958175628	WITHOUT_CLASSIFICATION	3.7041824372618066E-6	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999880166058306	WITHOUT_CLASSIFICATION	1.198339416943559E-5	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999999849626144	WITHOUT_CLASSIFICATION	1.5037385453351417E-8	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9977187566454303	WITHOUT_CLASSIFICATION	0.002281243354569668	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999922049241473	WITHOUT_CLASSIFICATION	7.795075852703744E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998240121382267	WITHOUT_CLASSIFICATION	1.7598786177332694E-4	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999999506103501	WITHOUT_CLASSIFICATION	4.9389649872517354E-8	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.999916130518806	WITHOUT_CLASSIFICATION	8.386948119392376E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.999916130518806	WITHOUT_CLASSIFICATION	8.386948119392376E-5	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999045345173481	WITHOUT_CLASSIFICATION	9.546548265187252E-5	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.99999804067816	WITHOUT_CLASSIFICATION	1.959321839992665E-6	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9995463114579386	WITHOUT_CLASSIFICATION	4.536885420613151E-4	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999756761162	WITHOUT_CLASSIFICATION	2.4323883753529214E-8	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999998922427402	WITHOUT_CLASSIFICATION	1.0775725968127997E-7	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.999990674888733	WITHOUT_CLASSIFICATION	9.325111266975534E-6	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.9999919475618599	WITHOUT_CLASSIFICATION	8.052438140104887E-6	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.9999921857222748	WITHOUT_CLASSIFICATION	7.814277725224639E-6	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999999999993518	WITHOUT_CLASSIFICATION	6.481986637975272E-12	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999978020229	WITHOUT_CLASSIFICATION	2.197977060390219E-9	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999836417002829	WITHOUT_CLASSIFICATION	1.6358299717163595E-5	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.9999998553620468	WITHOUT_CLASSIFICATION	1.4463795315160308E-7	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9998731669907104	WITHOUT_CLASSIFICATION	1.2683300928963246E-4	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999995614791	WITHOUT_CLASSIFICATION	4.3852088601568356E-10	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999980142477	WITHOUT_CLASSIFICATION	1.9857523758509306E-9	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999974976433027	WITHOUT_CLASSIFICATION	2.502356697409155E-6	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999280433187	WITHOUT_CLASSIFICATION	7.195668129941431E-8	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.99999999665075	WITHOUT_CLASSIFICATION	3.3492499279650324E-9	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999993328926	WITHOUT_CLASSIFICATION	6.671074000597548E-10	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999274523857543	WITHOUT_CLASSIFICATION	7.254761424567227E-5	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999977590255218	WITHOUT_CLASSIFICATION	2.2409744781302315E-6	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9998267793725338	WITHOUT_CLASSIFICATION	1.732206274662909E-4	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999963357155413	WITHOUT_CLASSIFICATION	3.6642844587071505E-6	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999287927818	WITHOUT_CLASSIFICATION	7.120721817429158E-8	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9977187566454303	WITHOUT_CLASSIFICATION	0.002281243354569668	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999998242947852	WITHOUT_CLASSIFICATION	1.757052147672266E-7	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999994688457846	WITHOUT_CLASSIFICATION	5.311542154772756E-7	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999923929956	WITHOUT_CLASSIFICATION	7.607004402818747E-9	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999999141385683	WITHOUT_CLASSIFICATION	8.586143171973027E-8	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9977980154242452	WITHOUT_CLASSIFICATION	0.0022019845757547864	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999475545404128	WITHOUT_CLASSIFICATION	5.244545958729934E-5	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999999190854197	WITHOUT_CLASSIFICATION	8.091458028265291E-8	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999998909994692	WITHOUT_CLASSIFICATION	1.0900053079867847E-6	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999918766567122	WITHOUT_CLASSIFICATION	8.123343287775446E-6	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999997174774	WITHOUT_CLASSIFICATION	2.825225415413423E-10	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999987998492139	WITHOUT_CLASSIFICATION	1.2001507860061896E-6	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999997257987123	WITHOUT_CLASSIFICATION	2.742012876753438E-7	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999997759949151	WITHOUT_CLASSIFICATION	2.2400508494688393E-7	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999999899097681	WITHOUT_CLASSIFICATION	1.0090231817985966E-8	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999999692608842	WITHOUT_CLASSIFICATION	3.0739115774868065E-8	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999987517437949	WITHOUT_CLASSIFICATION	1.248256205089986E-5	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999987517437949	WITHOUT_CLASSIFICATION	1.248256205089986E-5	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999872668254339	WITHOUT_CLASSIFICATION	1.2733174566147292E-5	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999777760499011	WITHOUT_CLASSIFICATION	2.222395009892758E-5	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999924025202	WITHOUT_CLASSIFICATION	7.59747970536685E-9	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999924025202	WITHOUT_CLASSIFICATION	7.59747970536685E-9	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.9999999305079236	WITHOUT_CLASSIFICATION	6.949207634183221E-8	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999973393170973	WITHOUT_CLASSIFICATION	2.660682902591725E-6	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9997007664491946	WITHOUT_CLASSIFICATION	2.9923355080536447E-4	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999841578451	WITHOUT_CLASSIFICATION	1.5842154908127587E-8	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999990137519845	WITHOUT_CLASSIFICATION	9.862480154849302E-7	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999982289236798	WITHOUT_CLASSIFICATION	1.7710763200893282E-6	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999995927373	WITHOUT_CLASSIFICATION	4.072626327133251E-10	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999995927373	WITHOUT_CLASSIFICATION	4.072626327133251E-10	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999963435637925	WITHOUT_CLASSIFICATION	3.6564362074937978E-6	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999996104193037	WITHOUT_CLASSIFICATION	3.895806963202479E-7	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999999802508795	WITHOUT_CLASSIFICATION	1.974912047409183E-8	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999998213497092	WITHOUT_CLASSIFICATION	1.7865029066734205E-7	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999998213497092	WITHOUT_CLASSIFICATION	1.7865029066734205E-7	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.99999992421366	WITHOUT_CLASSIFICATION	7.5786339898882E-8	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999865057127544	WITHOUT_CLASSIFICATION	1.3494287245677256E-5	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999415938037	WITHOUT_CLASSIFICATION	5.840619630963397E-8	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9999996786103102	WITHOUT_CLASSIFICATION	3.2138968980464893E-7	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999989855554402	WITHOUT_CLASSIFICATION	1.0144445597962077E-6	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999350923446	WITHOUT_CLASSIFICATION	6.490765532452074E-8	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999994430183844	WITHOUT_CLASSIFICATION	5.569816155750708E-7	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.9999982107014801	WITHOUT_CLASSIFICATION	1.7892985198227138E-6	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.9999999796380951	WITHOUT_CLASSIFICATION	2.0361904933290256E-8	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999999205760515	WITHOUT_CLASSIFICATION	7.942394859327207E-8	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999977428646	WITHOUT_CLASSIFICATION	2.2571353565931288E-9	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.998689533519802	WITHOUT_CLASSIFICATION	0.001310466480197943	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.9990584400658487	WITHOUT_CLASSIFICATION	9.415599341514208E-4	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999541268891862	WITHOUT_CLASSIFICATION	4.587311081378883E-5	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.9999895202481888	WITHOUT_CLASSIFICATION	1.047975181133084E-5	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999894894768154	WITHOUT_CLASSIFICATION	1.0510523184551969E-5	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999755430615742	WITHOUT_CLASSIFICATION	2.445693842576785E-5	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999991827698184	WITHOUT_CLASSIFICATION	8.172301815969271E-7	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.999986002236553	WITHOUT_CLASSIFICATION	1.3997763446982961E-5	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999946993088633	WITHOUT_CLASSIFICATION	5.3006911366588755E-6	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999978384853233	WITHOUT_CLASSIFICATION	2.161514676717542E-6	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999976184651154	WITHOUT_CLASSIFICATION	2.3815348846315472E-6	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9998580062632226	WITHOUT_CLASSIFICATION	1.4199373677742773E-4	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999998532935223	WITHOUT_CLASSIFICATION	1.467064777024412E-7	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.9999992380672135	WITHOUT_CLASSIFICATION	7.619327866174483E-7	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.9999999361362374	WITHOUT_CLASSIFICATION	6.386376263641682E-8	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999998013163665	WITHOUT_CLASSIFICATION	1.9868363348790477E-7	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999779129197872	WITHOUT_CLASSIFICATION	2.20870802128032E-5	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999537694012	WITHOUT_CLASSIFICATION	4.6230598807980086E-8	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999991083111314	WITHOUT_CLASSIFICATION	8.916888686343856E-7	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999488246641594	WITHOUT_CLASSIFICATION	5.117533584057861E-5	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999910675563	WITHOUT_CLASSIFICATION	8.932443633539114E-9	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999970837943332	WITHOUT_CLASSIFICATION	2.916205666937493E-6	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.999998845855542	WITHOUT_CLASSIFICATION	1.1541444579220065E-6	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999976340654769	WITHOUT_CLASSIFICATION	2.3659345230150713E-6	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999794875531286	WITHOUT_CLASSIFICATION	2.0512446871439185E-5	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.9999988793508248	WITHOUT_CLASSIFICATION	1.1206491751769027E-6	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999997240318	WITHOUT_CLASSIFICATION	2.759682027808194E-10	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999976178904891	WITHOUT_CLASSIFICATION	2.382109510897054E-5	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999864455078	WITHOUT_CLASSIFICATION	1.3554492177906778E-8	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999995966981862	WITHOUT_CLASSIFICATION	4.0330181384188127E-7	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999996211480123	WITHOUT_CLASSIFICATION	3.7885198762640976E-7	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.9999989720525053	WITHOUT_CLASSIFICATION	1.027947494717414E-6	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.9999646985395747	WITHOUT_CLASSIFICATION	3.530146042529877E-5	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9999994365832063	WITHOUT_CLASSIFICATION	5.634167936885447E-7	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999996107216848	WITHOUT_CLASSIFICATION	3.892783151541547E-7	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.9999992442474037	WITHOUT_CLASSIFICATION	7.557525963665574E-7	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999996507697553	WITHOUT_CLASSIFICATION	3.4923024472713543E-7	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999984925400531	WITHOUT_CLASSIFICATION	1.5074599467958067E-6	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999996443792977	WITHOUT_CLASSIFICATION	3.5562070239721585E-7	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999885206868989	WITHOUT_CLASSIFICATION	1.147931310114209E-5	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999033514040891	WITHOUT_CLASSIFICATION	9.664859591078617E-5	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999673667492001	WITHOUT_CLASSIFICATION	3.2633250799993015E-5	IMPLEMENTATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999730761661	WITHOUT_CLASSIFICATION	2.6923833926355346E-8	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999983866671235	WITHOUT_CLASSIFICATION	1.6133328765659433E-6	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999887157563855	WITHOUT_CLASSIFICATION	1.1284243614566197E-5	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999994028405264	WITHOUT_CLASSIFICATION	5.971594737377267E-7	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999994099988342	WITHOUT_CLASSIFICATION	5.90001165865465E-7	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999833887561732	WITHOUT_CLASSIFICATION	1.661124382670648E-5	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.999999967847974	WITHOUT_CLASSIFICATION	3.2152026028826434E-8	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999868058141864	WITHOUT_CLASSIFICATION	1.3194185813561275E-5	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999868058141864	WITHOUT_CLASSIFICATION	1.3194185813561275E-5	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999999835371	WITHOUT_CLASSIFICATION	1.6462954675650514E-11	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999053542514681	WITHOUT_CLASSIFICATION	9.464574853196136E-5	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999978599579	WITHOUT_CLASSIFICATION	2.14004219112931E-9	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999999992982537	WITHOUT_CLASSIFICATION	7.017463148690426E-9	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999999957380224	WITHOUT_CLASSIFICATION	4.261977602696081E-8	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999986841892897	WITHOUT_CLASSIFICATION	1.3158107103829396E-6	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999999444281911	WITHOUT_CLASSIFICATION	5.557180888429697E-8	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.99999999900726	WITHOUT_CLASSIFICATION	9.927400042520012E-10	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999998257374874	WITHOUT_CLASSIFICATION	1.7426251257866308E-7	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999999795923757	WITHOUT_CLASSIFICATION	2.040762422726084E-8	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999999734384768	WITHOUT_CLASSIFICATION	2.656152320195909E-7	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.999998618864092	WITHOUT_CLASSIFICATION	1.3811359080531522E-6	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999842566687	WITHOUT_CLASSIFICATION	1.5743331310087827E-8	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999636584307536	WITHOUT_CLASSIFICATION	3.6341569246480136E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999334324849	WITHOUT_CLASSIFICATION	6.656751501427508E-8	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999334324849	WITHOUT_CLASSIFICATION	6.656751501427508E-8	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999997476646	WITHOUT_CLASSIFICATION	2.5233533602242794E-10	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9990350456751657	WITHOUT_CLASSIFICATION	9.649543248343313E-4	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999999700584437	WITHOUT_CLASSIFICATION	2.994155630505022E-7	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999177172288	WITHOUT_CLASSIFICATION	8.228277113958207E-8	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999950762312828	WITHOUT_CLASSIFICATION	4.9237687170996315E-6	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999913700858922	WITHOUT_CLASSIFICATION	8.629914107763567E-6	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999999710567706	WITHOUT_CLASSIFICATION	2.894322940164349E-7	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.9999907061869467	WITHOUT_CLASSIFICATION	9.293813053208517E-6	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9982771762282971	WITHOUT_CLASSIFICATION	0.0017228237717028427	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999994770760228	WITHOUT_CLASSIFICATION	5.229239773477537E-7	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9977329397828888	WITHOUT_CLASSIFICATION	0.00226706021711112	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999997160862559	WITHOUT_CLASSIFICATION	2.839137439687771E-7	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.999999991082558	WITHOUT_CLASSIFICATION	8.917441973042061E-9	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999999999947875	WITHOUT_CLASSIFICATION	5.212501545231284E-11	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999845212327	WITHOUT_CLASSIFICATION	1.5478767265938264E-8	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999999517037564	WITHOUT_CLASSIFICATION	4.829624344354479E-8	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999979176544127	WITHOUT_CLASSIFICATION	2.0823455873144337E-6	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.999999895521066	WITHOUT_CLASSIFICATION	1.0447893400205225E-7	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999990700940353	WITHOUT_CLASSIFICATION	9.299059647370385E-7	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999999143391	WITHOUT_CLASSIFICATION	8.566088368620602E-11	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999999998806779	WITHOUT_CLASSIFICATION	1.1932204119878478E-10	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999999786829	WITHOUT_CLASSIFICATION	2.1317101975436097E-11	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999998918341433	WITHOUT_CLASSIFICATION	1.0816585667465188E-7	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999999220499	WITHOUT_CLASSIFICATION	7.795010305618351E-10	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999998434998315	WITHOUT_CLASSIFICATION	1.5650016841713663E-7	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.999999812487793	WITHOUT_CLASSIFICATION	1.8751220697476625E-7	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999954748629584	WITHOUT_CLASSIFICATION	4.525137041540329E-6	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999970389241238	WITHOUT_CLASSIFICATION	2.9610758761964207E-6	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999976780035513	WITHOUT_CLASSIFICATION	2.3219964487263183E-6	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999678366590189	WITHOUT_CLASSIFICATION	3.2163340981167086E-5	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999992543158571	WITHOUT_CLASSIFICATION	7.456841429821425E-7	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999905848669	WITHOUT_CLASSIFICATION	9.415133220469864E-9	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999998234134158	WITHOUT_CLASSIFICATION	1.7658658426573395E-7	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999997153359328	WITHOUT_CLASSIFICATION	2.8466406724814496E-7	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999999997641279	WITHOUT_CLASSIFICATION	2.358721058541639E-9	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999976877389383	WITHOUT_CLASSIFICATION	2.312261061699758E-6	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9997606177213095	WITHOUT_CLASSIFICATION	2.3938227869045104E-4	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999448557078	WITHOUT_CLASSIFICATION	5.5144292349572576E-8	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999882528273	WITHOUT_CLASSIFICATION	1.1747172694073764E-7	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999931664122	WITHOUT_CLASSIFICATION	6.833587786039956E-9	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9976719558131828	WITHOUT_CLASSIFICATION	0.0023280441868171187	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999907750389412	WITHOUT_CLASSIFICATION	9.224961058860383E-6	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9993358011743158	WITHOUT_CLASSIFICATION	6.641988256842645E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9993358011743158	WITHOUT_CLASSIFICATION	6.641988256842645E-4	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999999278942642	WITHOUT_CLASSIFICATION	7.210573586182057E-8	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999635142588	WITHOUT_CLASSIFICATION	3.648574123258168E-8	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9948467975087969	WITHOUT_CLASSIFICATION	0.005153202491203073	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999769696120692	WITHOUT_CLASSIFICATION	2.3030387930753257E-5	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999821076015	WITHOUT_CLASSIFICATION	1.7892398442542703E-8	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.999999982664148	WITHOUT_CLASSIFICATION	1.7335851936840667E-8	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999958857017567	WITHOUT_CLASSIFICATION	4.114298243375675E-6	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999776803018	WITHOUT_CLASSIFICATION	2.2319698225172817E-8	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999906333856691	WITHOUT_CLASSIFICATION	9.366614330886236E-6	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992736442136	WITHOUT_CLASSIFICATION	7.263557865283055E-7	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986364068143	WITHOUT_CLASSIFICATION	1.3635931857577977E-6	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999999230287254	WITHOUT_CLASSIFICATION	7.697127452553448E-8	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999684588299	WITHOUT_CLASSIFICATION	3.1541170096130436E-8	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999710393025	WITHOUT_CLASSIFICATION	2.8960697403610296E-8	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999951124896317	WITHOUT_CLASSIFICATION	4.887510368341472E-6	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999995186655595	WITHOUT_CLASSIFICATION	4.81334440482388E-7	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999525476143	WITHOUT_CLASSIFICATION	4.7452385573235894E-8	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999985759761	WITHOUT_CLASSIFICATION	1.4240239362234556E-9	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999927300195	WITHOUT_CLASSIFICATION	7.269980601413744E-9	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.999887244234578	WITHOUT_CLASSIFICATION	1.1275576542197885E-4	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999997951820966	WITHOUT_CLASSIFICATION	2.0481790340659667E-7	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999938769106	WITHOUT_CLASSIFICATION	6.123089393651361E-9	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999996690950628	WITHOUT_CLASSIFICATION	3.309049371929307E-7	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999984140130986	WITHOUT_CLASSIFICATION	1.5859869014049538E-5	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999999992027412	WITHOUT_CLASSIFICATION	7.972586927334815E-10	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999977292609755	WITHOUT_CLASSIFICATION	2.2707390245216785E-6	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9994988233842726	WITHOUT_CLASSIFICATION	5.0117661572733E-4	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999998571512957	WITHOUT_CLASSIFICATION	1.4284870427055815E-7	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999555933778	WITHOUT_CLASSIFICATION	4.440662226493333E-8	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999997758452268	WITHOUT_CLASSIFICATION	2.2415477322422694E-7	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999968014760003	WITHOUT_CLASSIFICATION	3.1985239995934223E-6	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999998361849486	WITHOUT_CLASSIFICATION	1.638150514406082E-7	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999920171360769	WITHOUT_CLASSIFICATION	7.982863923241159E-6	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999999683931793	WITHOUT_CLASSIFICATION	3.160682070888532E-8	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999980893164	WITHOUT_CLASSIFICATION	1.9106836093202337E-9	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999999678705	WITHOUT_CLASSIFICATION	3.212953820237325E-11	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999896260048816	WITHOUT_CLASSIFICATION	1.0373995118485399E-5	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999998671251	WITHOUT_CLASSIFICATION	1.3287499861892588E-10	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999991583997214	WITHOUT_CLASSIFICATION	8.416002786322425E-7	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999819594395	WITHOUT_CLASSIFICATION	1.8040560484110436E-8	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999963282672542	WITHOUT_CLASSIFICATION	3.671732745848111E-6	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999905518687	WITHOUT_CLASSIFICATION	9.44813128769926E-9	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999769511947201	WITHOUT_CLASSIFICATION	2.3048805279992896E-5	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999708272441	WITHOUT_CLASSIFICATION	2.9172755942531284E-8	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999980981604	WITHOUT_CLASSIFICATION	1.9018395606278183E-9	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999999998011315	WITHOUT_CLASSIFICATION	1.9886846659017456E-10	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999998239369328	WITHOUT_CLASSIFICATION	1.7606306718493433E-7	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999983800327376	WITHOUT_CLASSIFICATION	1.6199672623462673E-6	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999996997074674	WITHOUT_CLASSIFICATION	3.0029253266235803E-7	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999842566687	WITHOUT_CLASSIFICATION	1.5743331310087827E-8	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999999998712524	WITHOUT_CLASSIFICATION	1.2874755705662387E-10	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999948798164	WITHOUT_CLASSIFICATION	5.120183607132123E-9	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999965923521842	WITHOUT_CLASSIFICATION	3.4076478157769292E-6	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999785538110233	WITHOUT_CLASSIFICATION	2.1446188976679846E-5	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999997029337	WITHOUT_CLASSIFICATION	2.970662806806021E-10	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999931347119274	WITHOUT_CLASSIFICATION	6.865288072543524E-6	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9780504570988368	WITHOUT_CLASSIFICATION	0.021949542901163233	IMPLEMENTATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.999991422297835	WITHOUT_CLASSIFICATION	8.577702165026775E-6	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999960672407	WITHOUT_CLASSIFICATION	3.932759334027384E-9	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9995663169288834	WITHOUT_CLASSIFICATION	4.336830711166125E-4	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999987671568842	WITHOUT_CLASSIFICATION	1.2328431157642106E-6	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.999999094783393	WITHOUT_CLASSIFICATION	9.052166070810753E-7	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999989380054537	WITHOUT_CLASSIFICATION	1.0619945462675852E-6	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999957785484	WITHOUT_CLASSIFICATION	4.221451676731413E-9	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999977871763	WITHOUT_CLASSIFICATION	2.2128236674597335E-9	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983188922583	WITHOUT_CLASSIFICATION	1.6811077416645193E-6	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999155285328679	WITHOUT_CLASSIFICATION	8.447146713208537E-5	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999999787334899	WITHOUT_CLASSIFICATION	2.126651009330547E-8	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999939095912314	WITHOUT_CLASSIFICATION	6.090408768554857E-6	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999998491495659	WITHOUT_CLASSIFICATION	1.508504342378341E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983188922583	WITHOUT_CLASSIFICATION	1.6811077416645193E-6	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999753792126499	WITHOUT_CLASSIFICATION	2.4620787350059467E-5	IMPLEMENTATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999818420356	WITHOUT_CLASSIFICATION	1.815796440652381E-8	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999088243605	WITHOUT_CLASSIFICATION	9.117563944873997E-8	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999997527608195	WITHOUT_CLASSIFICATION	2.4723918046063714E-7	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999983641965541	WITHOUT_CLASSIFICATION	1.6358034459286655E-6	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999987334205	WITHOUT_CLASSIFICATION	1.266579553234709E-9	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.999999999888939	WITHOUT_CLASSIFICATION	1.1106106154779107E-10	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9998083555524117	WITHOUT_CLASSIFICATION	1.9164444758835514E-4	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999903447241	WITHOUT_CLASSIFICATION	9.655276018594557E-9	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999887514711905	WITHOUT_CLASSIFICATION	1.1248528809556597E-5	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998693010033615	WITHOUT_CLASSIFICATION	1.3069899663858874E-4	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998850769013915	WITHOUT_CLASSIFICATION	1.1492309860847823E-4	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999972390438258	WITHOUT_CLASSIFICATION	2.760956174230743E-6	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9985743530523659	WITHOUT_CLASSIFICATION	0.0014256469476341608	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999988724959619	WITHOUT_CLASSIFICATION	1.1275040381384395E-6	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999999966856823	WITHOUT_CLASSIFICATION	3.3143176555852557E-9	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999287927818	WITHOUT_CLASSIFICATION	7.120721817429158E-8	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999994247793933	WITHOUT_CLASSIFICATION	5.752206066560826E-7	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999991392478107	WITHOUT_CLASSIFICATION	8.607521892886263E-7	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9982836946711257	WITHOUT_CLASSIFICATION	0.0017163053288744524	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999993964636582	WITHOUT_CLASSIFICATION	6.035363418806046E-7	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9998378567773584	WITHOUT_CLASSIFICATION	1.6214322264167155E-4	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999690744976919	WITHOUT_CLASSIFICATION	3.092550230817325E-5	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999996240419562	WITHOUT_CLASSIFICATION	3.7595804379471123E-7	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999994391163	WITHOUT_CLASSIFICATION	5.608837162184584E-10	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999873398477	WITHOUT_CLASSIFICATION	1.2660152240569524E-8	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999896274782	WITHOUT_CLASSIFICATION	1.0372521837406677E-8	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999579223339208	WITHOUT_CLASSIFICATION	4.207766607932811E-5	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999997770256525	WITHOUT_CLASSIFICATION	2.2297434751946488E-7	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9997127722108143	WITHOUT_CLASSIFICATION	2.8722778918569485E-4	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9547972618830382	WITHOUT_CLASSIFICATION	0.04520273811696198	IMPLEMENTATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999998934305194	WITHOUT_CLASSIFICATION	1.0656948047275936E-7	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999897611606396	WITHOUT_CLASSIFICATION	1.0238839360347515E-5	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999976263019897	WITHOUT_CLASSIFICATION	2.3736980102290305E-6	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999421473394	WITHOUT_CLASSIFICATION	5.785266055903141E-8	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999856111903	WITHOUT_CLASSIFICATION	1.4388809588485935E-8	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999999998456111	WITHOUT_CLASSIFICATION	1.5438890089709407E-9	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999999687847	WITHOUT_CLASSIFICATION	3.121516354989769E-11	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999943367129716	WITHOUT_CLASSIFICATION	5.663287028523986E-6	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999995651865	WITHOUT_CLASSIFICATION	4.3481347670930483E-10	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999529731859	WITHOUT_CLASSIFICATION	4.702681412295605E-8	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999148773953487	WITHOUT_CLASSIFICATION	8.512260465136305E-5	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999148773953487	WITHOUT_CLASSIFICATION	8.512260465136305E-5	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999999831518904	WITHOUT_CLASSIFICATION	1.6848109670866318E-8	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999486011574	WITHOUT_CLASSIFICATION	5.139884261420156E-8	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998809085681	WITHOUT_CLASSIFICATION	1.1909143190490059E-7	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999994189756783	WITHOUT_CLASSIFICATION	5.810243217045533E-7	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999848545821817	WITHOUT_CLASSIFICATION	1.5145417818452374E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999848545821817	WITHOUT_CLASSIFICATION	1.5145417818452374E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999727157724588	WITHOUT_CLASSIFICATION	2.7284227541105842E-5	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999999999918215	WITHOUT_CLASSIFICATION	8.178506833751557E-12	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999999999828383	WITHOUT_CLASSIFICATION	1.7161785675676284E-11	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999999994909447	WITHOUT_CLASSIFICATION	5.0905528747021315E-9	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999989337710433	WITHOUT_CLASSIFICATION	1.0662289566273605E-6	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999996412159915	WITHOUT_CLASSIFICATION	3.5878400855538947E-7	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999988694249019	WITHOUT_CLASSIFICATION	1.130575098146719E-6	IMPLEMENTATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999979381611316	WITHOUT_CLASSIFICATION	2.0618388683512187E-6	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999986809436733	WITHOUT_CLASSIFICATION	1.3190563267475923E-6	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999021645483	WITHOUT_CLASSIFICATION	9.783545168335259E-8	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999999210005681	WITHOUT_CLASSIFICATION	7.899943188599525E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998809064354	WITHOUT_CLASSIFICATION	1.1909356450133865E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998809064354	WITHOUT_CLASSIFICATION	1.1909356450133865E-7	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999999938146	WITHOUT_CLASSIFICATION	6.185348665061625E-12	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999953724877174	WITHOUT_CLASSIFICATION	4.62751228253841E-6	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999998431624331	WITHOUT_CLASSIFICATION	1.56837566980505E-7	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999999967788071	WITHOUT_CLASSIFICATION	3.221192882069207E-9	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998240121382267	WITHOUT_CLASSIFICATION	1.7598786177332694E-4	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999994432967079	WITHOUT_CLASSIFICATION	5.567032920959634E-7	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999637666049	WITHOUT_CLASSIFICATION	3.6233395085959975E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998240121382267	WITHOUT_CLASSIFICATION	1.7598786177332694E-4	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999994385820133	WITHOUT_CLASSIFICATION	5.614179867169848E-7	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.999999967347409	WITHOUT_CLASSIFICATION	3.2652591041018146E-8	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999948690206385	WITHOUT_CLASSIFICATION	5.1309793615962E-6	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999228353227	WITHOUT_CLASSIFICATION	7.716467732754487E-8	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999887514711905	WITHOUT_CLASSIFICATION	1.1248528809556597E-5	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999979189598265	WITHOUT_CLASSIFICATION	2.081040173581902E-6	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999951499207881	WITHOUT_CLASSIFICATION	4.850079211890738E-6	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999992079383222	WITHOUT_CLASSIFICATION	7.920616777789724E-7	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.9999946674083133	WITHOUT_CLASSIFICATION	5.332591686688303E-6	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999984313264502	WITHOUT_CLASSIFICATION	1.568673549871162E-6	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999922714653827	WITHOUT_CLASSIFICATION	7.728534617287446E-6	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999999324370595	WITHOUT_CLASSIFICATION	6.756294039594239E-8	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999993265169517	WITHOUT_CLASSIFICATION	6.734830483764188E-7	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999994047845383	WITHOUT_CLASSIFICATION	5.952154615725256E-7	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997233267989266	WITHOUT_CLASSIFICATION	2.76673201073407E-4	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997233267989266	WITHOUT_CLASSIFICATION	2.76673201073407E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999970395968466	WITHOUT_CLASSIFICATION	2.9604031534935394E-6	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999848257473	WITHOUT_CLASSIFICATION	1.5174252762483318E-8	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.999994267278387	WITHOUT_CLASSIFICATION	5.732721612912284E-6	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999805765162832	WITHOUT_CLASSIFICATION	1.942348371671858E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999931822385494	WITHOUT_CLASSIFICATION	6.817761450581465E-6	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999996380655777	WITHOUT_CLASSIFICATION	3.619344224182741E-7	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999885154547768	WITHOUT_CLASSIFICATION	1.1484545223255814E-5	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999999967276	WITHOUT_CLASSIFICATION	3.272438445566671E-12	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999985985974926	WITHOUT_CLASSIFICATION	1.401402507315332E-6	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999951658698605	WITHOUT_CLASSIFICATION	4.834130139492201E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973826401964	WITHOUT_CLASSIFICATION	2.6173598036077594E-6	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9996254509455267	WITHOUT_CLASSIFICATION	3.7454905447334766E-4	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999585071181388	WITHOUT_CLASSIFICATION	4.149288186125092E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999885973758	WITHOUT_CLASSIFICATION	1.140262413233651E-8	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999997425376	WITHOUT_CLASSIFICATION	2.5746243051069736E-10	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999979519961717	WITHOUT_CLASSIFICATION	2.048003828285608E-6	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999993502981843	WITHOUT_CLASSIFICATION	6.497018156618902E-7	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999985253942418	WITHOUT_CLASSIFICATION	1.4746057582123772E-6	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.999622944804874	WITHOUT_CLASSIFICATION	3.7705519512597E-4	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999999998427	WITHOUT_CLASSIFICATION	1.5727333180836017E-13	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999999730524	WITHOUT_CLASSIFICATION	2.6947499918109435E-11	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999999764049	WITHOUT_CLASSIFICATION	2.3595099634424585E-11	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999415938037	WITHOUT_CLASSIFICATION	5.840619630963397E-8	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999816942	WITHOUT_CLASSIFICATION	1.8305822722461354E-11	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998800497245	WITHOUT_CLASSIFICATION	1.1995027553135836E-7	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998800497245	WITHOUT_CLASSIFICATION	1.1995027553135836E-7	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999818158039173	WITHOUT_CLASSIFICATION	1.8184196082687855E-5	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9986004430866015	WITHOUT_CLASSIFICATION	0.0013995569133986219	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999889679261	WITHOUT_CLASSIFICATION	1.1032074007601526E-8	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999998180384092	WITHOUT_CLASSIFICATION	1.8196159069806465E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999999059841274	WITHOUT_CLASSIFICATION	9.401587258478E-8	IMPLEMENTATION
