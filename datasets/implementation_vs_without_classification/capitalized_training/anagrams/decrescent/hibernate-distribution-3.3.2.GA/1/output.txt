todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.8957516205441166	WITHOUT_CLASSIFICATION	0.10424837945588343	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.8957516205441166	WITHOUT_CLASSIFICATION	0.10424837945588343	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.9690788712856296	WITHOUT_CLASSIFICATION	0.030921128714370333	IMPLEMENTATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.6821958756467822	WITHOUT_CLASSIFICATION	0.3178041243532179	IMPLEMENTATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9538340502883295	WITHOUT_CLASSIFICATION	0.04616594971167064	IMPLEMENTATION
TODO: handle TypeDefs	IMPLEMENTATION	0.7436768184986504	IMPLEMENTATION	0.2563231815013496	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9536060705658072	WITHOUT_CLASSIFICATION	0.04639392943419284	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9925917182028317	WITHOUT_CLASSIFICATION	0.00740828179716837	IMPLEMENTATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9998933012715348	WITHOUT_CLASSIFICATION	1.0669872846523743E-4	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.7549680346379117	WITHOUT_CLASSIFICATION	0.24503196536208827	IMPLEMENTATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9627010596089287	WITHOUT_CLASSIFICATION	0.03729894039107117	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.8018202622426133	IMPLEMENTATION	0.19817973775738676	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9850482503335872	WITHOUT_CLASSIFICATION	0.014951749666412668	IMPLEMENTATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9850482503335872	WITHOUT_CLASSIFICATION	0.014951749666412668	IMPLEMENTATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.9761119377897958	IMPLEMENTATION	0.023888062210204137	WITHOUT_CLASSIFICATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.9849601507339011	IMPLEMENTATION	0.015039849266098979	WITHOUT_CLASSIFICATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999802791511431	IMPLEMENTATION	1.9720848856915325E-5	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9786493606555139	WITHOUT_CLASSIFICATION	0.021350639344486146	IMPLEMENTATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.9999999218886232	WITHOUT_CLASSIFICATION	7.811137687719167E-8	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.981460769743489	WITHOUT_CLASSIFICATION	0.018539230256510997	IMPLEMENTATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.6985360246515507	IMPLEMENTATION	0.3014639753484492	WITHOUT_CLASSIFICATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9996744703401694	WITHOUT_CLASSIFICATION	3.2552965983060776E-4	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.899710820732989	WITHOUT_CLASSIFICATION	0.10028917926701095	IMPLEMENTATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9975374691700729	IMPLEMENTATION	0.002462530829927174	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9975374691700729	IMPLEMENTATION	0.002462530829927174	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.9986008739452082	IMPLEMENTATION	0.001399126054791756	WITHOUT_CLASSIFICATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9858806818511744	WITHOUT_CLASSIFICATION	0.014119318148825702	IMPLEMENTATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9457383096412735	IMPLEMENTATION	0.054261690358726654	WITHOUT_CLASSIFICATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9699401985738918	WITHOUT_CLASSIFICATION	0.030059801426108233	IMPLEMENTATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.7889557524526764	IMPLEMENTATION	0.21104424754732362	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9346890463513049	WITHOUT_CLASSIFICATION	0.06531095364869519	IMPLEMENTATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.663347658992756	WITHOUT_CLASSIFICATION	0.33665234100724395	IMPLEMENTATION
todo : look at optimizing these...	IMPLEMENTATION	0.9987291194308909	WITHOUT_CLASSIFICATION	0.0012708805691089595	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.5167984118994173	IMPLEMENTATION	0.48320158810058256	WITHOUT_CLASSIFICATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.8833973223320778	IMPLEMENTATION	0.11660267766792216	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.7939683832852682	WITHOUT_CLASSIFICATION	0.20603161671473189	IMPLEMENTATION
TODO: not visible to the user!	IMPLEMENTATION	0.919587979755348	WITHOUT_CLASSIFICATION	0.080412020244652	IMPLEMENTATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.8662962013825192	WITHOUT_CLASSIFICATION	0.13370379861748086	IMPLEMENTATION
TODO: use these in methods above	IMPLEMENTATION	0.9165174484543024	WITHOUT_CLASSIFICATION	0.08348255154569761	IMPLEMENTATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9761426319228611	IMPLEMENTATION	0.023857368077138882	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9761426319228611	IMPLEMENTATION	0.023857368077138882	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.5673490149108912	IMPLEMENTATION	0.43265098508910893	WITHOUT_CLASSIFICATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9961344083273245	WITHOUT_CLASSIFICATION	0.003865591672675437	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9562327271630077	WITHOUT_CLASSIFICATION	0.04376727283699219	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9945566187304237	IMPLEMENTATION	0.005443381269576286	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.7408104442044587	WITHOUT_CLASSIFICATION	0.25918955579554126	IMPLEMENTATION
TODO: formulas ?	IMPLEMENTATION	0.9822522582902771	WITHOUT_CLASSIFICATION	0.017747741709723014	IMPLEMENTATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.9518123442993297	WITHOUT_CLASSIFICATION	0.04818765570067037	IMPLEMENTATION
todo : cache this sql...	IMPLEMENTATION	0.999206085877819	WITHOUT_CLASSIFICATION	7.93914122180977E-4	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.8660843008672423	WITHOUT_CLASSIFICATION	0.1339156991327577	IMPLEMENTATION
TODO: cache this in an instvar	IMPLEMENTATION	0.9691803305095166	WITHOUT_CLASSIFICATION	0.030819669490483533	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.9737227633520991	IMPLEMENTATION	0.026277236647900968	WITHOUT_CLASSIFICATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9849560960095036	IMPLEMENTATION	0.015043903990496446	WITHOUT_CLASSIFICATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.8171361294791095	IMPLEMENTATION	0.1828638705208905	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.830251977761607	IMPLEMENTATION	0.16974802223839308	WITHOUT_CLASSIFICATION
TODO: terrible implementation!	IMPLEMENTATION	0.9902359482049585	IMPLEMENTATION	0.0097640517950415	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.830251977761607	IMPLEMENTATION	0.16974802223839308	WITHOUT_CLASSIFICATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9999474589249867	IMPLEMENTATION	5.254107501313672E-5	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.6854142802372211	WITHOUT_CLASSIFICATION	0.31458571976277905	IMPLEMENTATION
TODO: proxies!	IMPLEMENTATION	0.830251977761607	IMPLEMENTATION	0.16974802223839308	WITHOUT_CLASSIFICATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999983627721314	WITHOUT_CLASSIFICATION	1.6372278685504018E-6	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999983627721314	WITHOUT_CLASSIFICATION	1.6372278685504018E-6	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9998291071442416	IMPLEMENTATION	1.7089285575846473E-4	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.9997785903662559	WITHOUT_CLASSIFICATION	2.2140963374394095E-4	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.999974835898155	WITHOUT_CLASSIFICATION	2.5164101844983125E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9998905069036644	WITHOUT_CLASSIFICATION	1.0949309633558327E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9998905069036644	WITHOUT_CLASSIFICATION	1.0949309633558327E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9998905069036644	WITHOUT_CLASSIFICATION	1.0949309633558327E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9998905069036644	WITHOUT_CLASSIFICATION	1.0949309633558327E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9998905069036644	WITHOUT_CLASSIFICATION	1.0949309633558327E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9998905069036644	WITHOUT_CLASSIFICATION	1.0949309633558327E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9998905069036644	WITHOUT_CLASSIFICATION	1.0949309633558327E-4	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9997931132058046	WITHOUT_CLASSIFICATION	2.068867941953922E-4	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9997931132058046	WITHOUT_CLASSIFICATION	2.068867941953922E-4	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9998673564261159	WITHOUT_CLASSIFICATION	1.3264357388408925E-4	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999994785450993	WITHOUT_CLASSIFICATION	5.214549007072278E-7	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999891221021192	WITHOUT_CLASSIFICATION	1.0877897880780571E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999723036207804	WITHOUT_CLASSIFICATION	2.7696379219579157E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999723036207804	WITHOUT_CLASSIFICATION	2.7696379219579157E-5	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.999999964556384	WITHOUT_CLASSIFICATION	3.544361608439855E-8	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.99999920972062	WITHOUT_CLASSIFICATION	7.902793800533381E-7	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999996166198566	WITHOUT_CLASSIFICATION	3.833801435045875E-7	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999786381903994	WITHOUT_CLASSIFICATION	2.1361809600585107E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999926809994787	WITHOUT_CLASSIFICATION	7.3190005212276115E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999926809994787	WITHOUT_CLASSIFICATION	7.3190005212276115E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999013930287786	WITHOUT_CLASSIFICATION	9.86069712214041E-5	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9997822064321048	WITHOUT_CLASSIFICATION	2.1779356789516867E-4	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.9999773163211305	WITHOUT_CLASSIFICATION	2.268367886946583E-5	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999999944744126	WITHOUT_CLASSIFICATION	5.525587415897503E-9	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999754093974	WITHOUT_CLASSIFICATION	2.459060257720034E-8	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9988587914778368	WITHOUT_CLASSIFICATION	0.0011412085221630802	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.9972301199710663	WITHOUT_CLASSIFICATION	0.0027698800289336543	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9994936396091878	WITHOUT_CLASSIFICATION	5.063603908122852E-4	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9991877034004224	WITHOUT_CLASSIFICATION	8.122965995776237E-4	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.999801113166363	WITHOUT_CLASSIFICATION	1.9888683363687663E-4	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.99964942822195	WITHOUT_CLASSIFICATION	3.5057177804993935E-4	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9990984375436238	WITHOUT_CLASSIFICATION	9.0156245637618E-4	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999882619451	WITHOUT_CLASSIFICATION	1.1738054792476688E-8	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9989590385202974	WITHOUT_CLASSIFICATION	0.0010409614797025689	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9989590385202974	WITHOUT_CLASSIFICATION	0.0010409614797025689	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999687916279586	WITHOUT_CLASSIFICATION	3.120837204133001E-5	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9980650120274618	WITHOUT_CLASSIFICATION	0.0019349879725382786	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999533612892	WITHOUT_CLASSIFICATION	4.66387108410009E-8	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9994014745429094	WITHOUT_CLASSIFICATION	5.98525457090513E-4	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.8532820873295361	WITHOUT_CLASSIFICATION	0.14671791267046383	IMPLEMENTATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999996152950914	WITHOUT_CLASSIFICATION	3.847049086151696E-7	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999958045552957	WITHOUT_CLASSIFICATION	4.195444704252608E-6	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999989808266008	WITHOUT_CLASSIFICATION	1.0191733992810988E-6	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999988290912775	WITHOUT_CLASSIFICATION	1.1709087225919513E-6	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999372123666953	WITHOUT_CLASSIFICATION	6.278763330472993E-5	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999979136981071	WITHOUT_CLASSIFICATION	2.0863018928626064E-6	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.999937722647444	WITHOUT_CLASSIFICATION	6.227735255599915E-5	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.999997882380564	WITHOUT_CLASSIFICATION	2.1176194361116644E-6	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9993456635987062	WITHOUT_CLASSIFICATION	6.543364012937804E-4	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999113470558165	WITHOUT_CLASSIFICATION	8.86529441835475E-5	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993259238701517	WITHOUT_CLASSIFICATION	6.740761298482292E-4	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989435841334113	WITHOUT_CLASSIFICATION	0.0010564158665886522	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999018201029878	WITHOUT_CLASSIFICATION	9.817989701226801E-5	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999996245332453	WITHOUT_CLASSIFICATION	3.754667547402094E-7	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9998854410424471	WITHOUT_CLASSIFICATION	1.1455895755275841E-4	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999959052720547	WITHOUT_CLASSIFICATION	4.09472794533904E-6	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9998262236204494	WITHOUT_CLASSIFICATION	1.737763795506219E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9998854410424471	WITHOUT_CLASSIFICATION	1.1455895755275841E-4	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9998262236204494	WITHOUT_CLASSIFICATION	1.737763795506219E-4	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999795155065	WITHOUT_CLASSIFICATION	2.048449357364861E-8	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9963810157858232	WITHOUT_CLASSIFICATION	0.0036189842141768993	IMPLEMENTATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9997630944348078	WITHOUT_CLASSIFICATION	2.3690556519212323E-4	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9993461158971308	WITHOUT_CLASSIFICATION	6.53884102869086E-4	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999977848324809	WITHOUT_CLASSIFICATION	2.2151675190839723E-6	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999999951616885	WITHOUT_CLASSIFICATION	4.838311586223363E-9	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9937317166420381	WITHOUT_CLASSIFICATION	0.006268283357961995	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9977816446226769	WITHOUT_CLASSIFICATION	0.002218355377323187	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.8836061649964869	WITHOUT_CLASSIFICATION	0.11639383500351307	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9995118698513838	WITHOUT_CLASSIFICATION	4.881301486161806E-4	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999387961785308	WITHOUT_CLASSIFICATION	6.120382146913115E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9998262236204494	WITHOUT_CLASSIFICATION	1.737763795506219E-4	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.99999997419189	WITHOUT_CLASSIFICATION	2.5808110023941314E-8	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9995614957452831	WITHOUT_CLASSIFICATION	4.3850425471689996E-4	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999945246898374	WITHOUT_CLASSIFICATION	5.475310162580963E-6	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999998464617	WITHOUT_CLASSIFICATION	1.5353829150547769E-10	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999972417628776	WITHOUT_CLASSIFICATION	2.7582371222576084E-6	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999868814029524	WITHOUT_CLASSIFICATION	1.3118597047442417E-5	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9997384503846134	WITHOUT_CLASSIFICATION	2.615496153866034E-4	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999995443986571	WITHOUT_CLASSIFICATION	4.556013428950405E-6	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999952461940146	WITHOUT_CLASSIFICATION	4.753805985437851E-6	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999989660724368	WITHOUT_CLASSIFICATION	1.0339275632547849E-6	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999963004224097	WITHOUT_CLASSIFICATION	3.6995775903508325E-6	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999848134868601	WITHOUT_CLASSIFICATION	1.518651313995091E-5	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9841789579117262	WITHOUT_CLASSIFICATION	0.01582104208827378	IMPLEMENTATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.999992340595644	WITHOUT_CLASSIFICATION	7.659404355991877E-6	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999377974211	WITHOUT_CLASSIFICATION	6.220257894304587E-8	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9996325192232733	WITHOUT_CLASSIFICATION	3.6748077672672867E-4	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999994408600854	WITHOUT_CLASSIFICATION	5.591399145064628E-7	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9998762590878909	WITHOUT_CLASSIFICATION	1.2374091210897706E-4	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999117387341	WITHOUT_CLASSIFICATION	8.826126583691853E-8	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999597953851667	WITHOUT_CLASSIFICATION	4.020461483324039E-5	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999999241360421	WITHOUT_CLASSIFICATION	7.586395786864969E-8	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9997802296796933	WITHOUT_CLASSIFICATION	2.1977032030677808E-4	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999979731649646	WITHOUT_CLASSIFICATION	2.026835035334285E-6	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999943915516	WITHOUT_CLASSIFICATION	5.608448290647789E-9	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9997802296796933	WITHOUT_CLASSIFICATION	2.1977032030677808E-4	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999989853172995	WITHOUT_CLASSIFICATION	1.0146827004734373E-6	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999989877996032	WITHOUT_CLASSIFICATION	1.0122003968238102E-6	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9998854410424471	WITHOUT_CLASSIFICATION	1.1455895755275841E-4	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999748652813749	WITHOUT_CLASSIFICATION	2.5134718625083116E-5	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.9999973954318601	WITHOUT_CLASSIFICATION	2.6045681398835716E-6	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999945040209886	WITHOUT_CLASSIFICATION	5.495979011403896E-6	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999945040209886	WITHOUT_CLASSIFICATION	5.495979011403896E-6	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999600084199685	WITHOUT_CLASSIFICATION	3.999158003148107E-5	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999645906247	WITHOUT_CLASSIFICATION	3.540937523230395E-8	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999996727114916	WITHOUT_CLASSIFICATION	3.2728850840769173E-7	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999950382406	WITHOUT_CLASSIFICATION	4.961759446543495E-9	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999980294799704	WITHOUT_CLASSIFICATION	1.970520029475438E-6	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999618368361453	WITHOUT_CLASSIFICATION	3.816316385467902E-5	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9998150936391234	WITHOUT_CLASSIFICATION	1.8490636087676316E-4	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.9976558815139237	WITHOUT_CLASSIFICATION	0.0023441184860762566	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999449383901	WITHOUT_CLASSIFICATION	5.506160990199228E-8	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999997841724706	WITHOUT_CLASSIFICATION	2.15827529446047E-7	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999855552041697	WITHOUT_CLASSIFICATION	1.4444795830354578E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999855552041697	WITHOUT_CLASSIFICATION	1.4444795830354578E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998875136913186	WITHOUT_CLASSIFICATION	1.1248630868141606E-4	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999716406439675	WITHOUT_CLASSIFICATION	2.835935603240847E-5	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999976741099499	WITHOUT_CLASSIFICATION	2.3258900501853636E-6	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999855552041697	WITHOUT_CLASSIFICATION	1.4444795830354578E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998875136913186	WITHOUT_CLASSIFICATION	1.1248630868141606E-4	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998875136913186	WITHOUT_CLASSIFICATION	1.1248630868141606E-4	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999998152904161	WITHOUT_CLASSIFICATION	1.8470958384935566E-7	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998855445990603	WITHOUT_CLASSIFICATION	1.1445540093973145E-4	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999990448290074	WITHOUT_CLASSIFICATION	9.551709926225669E-7	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999974019587742	WITHOUT_CLASSIFICATION	2.5980412259023902E-6	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9998282608514746	WITHOUT_CLASSIFICATION	1.717391485254469E-4	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9998282608514746	WITHOUT_CLASSIFICATION	1.717391485254469E-4	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999889596833754	WITHOUT_CLASSIFICATION	1.1040316624534489E-5	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999987210124041	WITHOUT_CLASSIFICATION	1.2789875959288667E-6	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.9999948026693409	WITHOUT_CLASSIFICATION	5.197330659053116E-6	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999994709010334	WITHOUT_CLASSIFICATION	5.290989666732505E-7	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999994709010334	WITHOUT_CLASSIFICATION	5.290989666732505E-7	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999848514345128	WITHOUT_CLASSIFICATION	1.51485654872068E-5	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9965940311123951	WITHOUT_CLASSIFICATION	0.0034059688876049384	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9947859108357044	WITHOUT_CLASSIFICATION	0.005214089164295522	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999823475466	WITHOUT_CLASSIFICATION	1.7652453434559233E-8	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.999999836623945	WITHOUT_CLASSIFICATION	1.6337605505630996E-7	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999983678756248	WITHOUT_CLASSIFICATION	1.6321243751671256E-6	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.999995162780009	WITHOUT_CLASSIFICATION	4.837219991058802E-6	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9997003545186232	WITHOUT_CLASSIFICATION	2.9964548137684666E-4	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.9999905661505265	WITHOUT_CLASSIFICATION	9.433849473442474E-6	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9947859108357044	WITHOUT_CLASSIFICATION	0.005214089164295522	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.9998972810782273	WITHOUT_CLASSIFICATION	1.0271892177269645E-4	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9989849882685395	WITHOUT_CLASSIFICATION	0.0010150117314603963	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9989849882685395	WITHOUT_CLASSIFICATION	0.0010150117314603963	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.999279629402446	WITHOUT_CLASSIFICATION	7.203705975540035E-4	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9972873692395747	WITHOUT_CLASSIFICATION	0.0027126307604252854	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999979419830783	WITHOUT_CLASSIFICATION	2.0580169216316684E-6	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9894118561633353	WITHOUT_CLASSIFICATION	0.010588143836664678	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999749193246067	WITHOUT_CLASSIFICATION	2.508067539326634E-5	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.9997568692987495	WITHOUT_CLASSIFICATION	2.4313070125040107E-4	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9996126362341824	WITHOUT_CLASSIFICATION	3.873637658176395E-4	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.9999913809901835	WITHOUT_CLASSIFICATION	8.619009816544528E-6	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999960164908495	WITHOUT_CLASSIFICATION	3.983509150576505E-6	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999988006942506	WITHOUT_CLASSIFICATION	1.1993057494132565E-6	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999988006942506	WITHOUT_CLASSIFICATION	1.1993057494132565E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999960960023662	WITHOUT_CLASSIFICATION	3.903997633826036E-6	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.999974835898155	WITHOUT_CLASSIFICATION	2.5164101844983125E-5	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999998893738575	WITHOUT_CLASSIFICATION	1.1062614254736E-7	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9998905069036644	WITHOUT_CLASSIFICATION	1.0949309633558327E-4	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.999997216374439	WITHOUT_CLASSIFICATION	2.7836255611046892E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9997931132058046	WITHOUT_CLASSIFICATION	2.068867941953922E-4	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999712114722691	WITHOUT_CLASSIFICATION	2.878852773087477E-5	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999845885528441	WITHOUT_CLASSIFICATION	1.5411447155915264E-5	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999973678943933	WITHOUT_CLASSIFICATION	2.6321056066796334E-6	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.9999964244271875	WITHOUT_CLASSIFICATION	3.575572812530604E-6	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999680059327112	WITHOUT_CLASSIFICATION	3.199406728886995E-5	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.9991730276979209	WITHOUT_CLASSIFICATION	8.269723020791534E-4	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9990458077311406	WITHOUT_CLASSIFICATION	9.541922688594336E-4	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999941700731251	WITHOUT_CLASSIFICATION	5.829926874869014E-6	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999994785450993	WITHOUT_CLASSIFICATION	5.214549007072278E-7	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999952512685271	WITHOUT_CLASSIFICATION	4.748731472968581E-6	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999952512685271	WITHOUT_CLASSIFICATION	4.748731472968581E-6	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.9999992617538745	WITHOUT_CLASSIFICATION	7.382461255876287E-7	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999657771056848	WITHOUT_CLASSIFICATION	3.422289431521985E-5	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999857434003285	WITHOUT_CLASSIFICATION	1.4256599671411722E-5	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999912897606676	WITHOUT_CLASSIFICATION	8.710239332282365E-6	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999659462023598	WITHOUT_CLASSIFICATION	3.405379764015061E-5	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9998332930275617	WITHOUT_CLASSIFICATION	1.6670697243831788E-4	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999723036207804	WITHOUT_CLASSIFICATION	2.7696379219579157E-5	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999752824707024	WITHOUT_CLASSIFICATION	2.471752929758064E-5	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999785275922778	WITHOUT_CLASSIFICATION	2.1472407722252858E-5	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999892289146929	WITHOUT_CLASSIFICATION	1.077108530707803E-5	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.999997547553994	WITHOUT_CLASSIFICATION	2.452446006013596E-6	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.9999017892891182	WITHOUT_CLASSIFICATION	9.821071088184514E-5	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.9998313479841586	WITHOUT_CLASSIFICATION	1.6865201584128587E-4	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999657317570819	WITHOUT_CLASSIFICATION	3.426824291801872E-5	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998681745869	WITHOUT_CLASSIFICATION	1.3182541320918206E-7	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999950203818749	WITHOUT_CLASSIFICATION	4.979618125135109E-6	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999870301763469	WITHOUT_CLASSIFICATION	1.2969823653105574E-5	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.99986765665536	WITHOUT_CLASSIFICATION	1.3234334463989037E-4	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.9999996218277772	WITHOUT_CLASSIFICATION	3.781722228672853E-7	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9998905069036644	WITHOUT_CLASSIFICATION	1.0949309633558327E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9998905069036644	WITHOUT_CLASSIFICATION	1.0949309633558327E-4	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9997931132058046	WITHOUT_CLASSIFICATION	2.068867941953922E-4	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9997931132058046	WITHOUT_CLASSIFICATION	2.068867941953922E-4	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9990458077311406	WITHOUT_CLASSIFICATION	9.541922688594336E-4	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999952512685271	WITHOUT_CLASSIFICATION	4.748731472968581E-6	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999657317570819	WITHOUT_CLASSIFICATION	3.426824291801872E-5	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.999999964556384	WITHOUT_CLASSIFICATION	3.544361608439855E-8	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999992235179935	WITHOUT_CLASSIFICATION	7.764820064666995E-7	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999979541322513	WITHOUT_CLASSIFICATION	2.0458677486823122E-6	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999953692474969	WITHOUT_CLASSIFICATION	4.630752503078584E-6	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9999659516690603	WITHOUT_CLASSIFICATION	3.4048330939624436E-5	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999974543257949	WITHOUT_CLASSIFICATION	2.5456742050164087E-6	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.9997317826262312	WITHOUT_CLASSIFICATION	2.6821737376876817E-4	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999951138280595	WITHOUT_CLASSIFICATION	4.886171940521987E-6	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9996812454449089	WITHOUT_CLASSIFICATION	3.1875455509115444E-4	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.9999986874541562	WITHOUT_CLASSIFICATION	1.312545843796668E-6	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999866903275227	WITHOUT_CLASSIFICATION	1.3309672477297129E-5	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999866903275227	WITHOUT_CLASSIFICATION	1.3309672477297129E-5	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999936861053639	WITHOUT_CLASSIFICATION	6.3138946361323E-6	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999997202617971	WITHOUT_CLASSIFICATION	2.797382028850473E-7	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999745524012434	WITHOUT_CLASSIFICATION	2.544759875652282E-5	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9996390725356326	WITHOUT_CLASSIFICATION	3.60927464367448E-4	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999795080492002	WITHOUT_CLASSIFICATION	2.0491950799821533E-5	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.9999998905960299	WITHOUT_CLASSIFICATION	1.0940397011623669E-7	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.9999980001486158	WITHOUT_CLASSIFICATION	1.9998513842199778E-6	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.99999920972062	WITHOUT_CLASSIFICATION	7.902793800533381E-7	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.9999194340600434	WITHOUT_CLASSIFICATION	8.056593995660302E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999905757320842	WITHOUT_CLASSIFICATION	9.424267915776104E-6	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999905757320842	WITHOUT_CLASSIFICATION	9.424267915776104E-6	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.9999910023981566	WITHOUT_CLASSIFICATION	8.997601843345302E-6	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999997333279471	WITHOUT_CLASSIFICATION	2.6667205286710993E-7	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.9999885505682066	WITHOUT_CLASSIFICATION	1.1449431793398308E-5	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999977852524136	WITHOUT_CLASSIFICATION	2.214747586376389E-6	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.9997729915543235	WITHOUT_CLASSIFICATION	2.2700844567644752E-4	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9997931132058046	WITHOUT_CLASSIFICATION	2.068867941953922E-4	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9990458077311406	WITHOUT_CLASSIFICATION	9.541922688594336E-4	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999994785450993	WITHOUT_CLASSIFICATION	5.214549007072278E-7	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999657317570819	WITHOUT_CLASSIFICATION	3.426824291801872E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999657317570819	WITHOUT_CLASSIFICATION	3.426824291801872E-5	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993539557149	WITHOUT_CLASSIFICATION	6.460442850286027E-7	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993539557149	WITHOUT_CLASSIFICATION	6.460442850286027E-7	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999995516125829	WITHOUT_CLASSIFICATION	4.483874170892276E-6	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9998463241720559	WITHOUT_CLASSIFICATION	1.5367582794409843E-4	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9998463241720559	WITHOUT_CLASSIFICATION	1.5367582794409843E-4	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9999000659856718	WITHOUT_CLASSIFICATION	9.993401432811245E-5	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.999913367448417	WITHOUT_CLASSIFICATION	8.663255158291767E-5	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.9999988490210827	WITHOUT_CLASSIFICATION	1.15097891736957E-6	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999996247361923	WITHOUT_CLASSIFICATION	3.7526380763731286E-7	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999998638930906	WITHOUT_CLASSIFICATION	1.3610690941991645E-7	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999786381903994	WITHOUT_CLASSIFICATION	2.1361809600585107E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999786381903994	WITHOUT_CLASSIFICATION	2.1361809600585107E-5	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.997660815538282	WITHOUT_CLASSIFICATION	0.0023391844617179237	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.9999943270188181	WITHOUT_CLASSIFICATION	5.67298118192539E-6	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.999930380931839	WITHOUT_CLASSIFICATION	6.96190681610286E-5	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.9991077384903984	WITHOUT_CLASSIFICATION	8.922615096016162E-4	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9999646352379981	WITHOUT_CLASSIFICATION	3.536476200187883E-5	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.9996256578769246	WITHOUT_CLASSIFICATION	3.74342123075323E-4	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999926809994787	WITHOUT_CLASSIFICATION	7.3190005212276115E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999702459105068	WITHOUT_CLASSIFICATION	2.9754089493285195E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999702459105068	WITHOUT_CLASSIFICATION	2.9754089493285195E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999013930287786	WITHOUT_CLASSIFICATION	9.86069712214041E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999013930287786	WITHOUT_CLASSIFICATION	9.86069712214041E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9996977100586283	WITHOUT_CLASSIFICATION	3.0228994137174864E-4	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9996977100586283	WITHOUT_CLASSIFICATION	3.0228994137174864E-4	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999993906796383	WITHOUT_CLASSIFICATION	6.093203617548359E-7	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999993906796383	WITHOUT_CLASSIFICATION	6.093203617548359E-7	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999786381903994	WITHOUT_CLASSIFICATION	2.1361809600585107E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999926809994787	WITHOUT_CLASSIFICATION	7.3190005212276115E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999702459105068	WITHOUT_CLASSIFICATION	2.9754089493285195E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999702459105068	WITHOUT_CLASSIFICATION	2.9754089493285195E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999013930287786	WITHOUT_CLASSIFICATION	9.86069712214041E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9996977100586283	WITHOUT_CLASSIFICATION	3.0228994137174864E-4	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9996977100586283	WITHOUT_CLASSIFICATION	3.0228994137174864E-4	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999993906796383	WITHOUT_CLASSIFICATION	6.093203617548359E-7	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999787513771233	WITHOUT_CLASSIFICATION	2.1248622876659922E-5	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999990797294338	WITHOUT_CLASSIFICATION	9.202705663123994E-7	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.9999901565022927	WITHOUT_CLASSIFICATION	9.843497707247817E-6	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999954593993133	WITHOUT_CLASSIFICATION	4.540600686705211E-6	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.9999355347958636	WITHOUT_CLASSIFICATION	6.44652041363981E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9994114836015878	WITHOUT_CLASSIFICATION	5.885163984120982E-4	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999771972666676	WITHOUT_CLASSIFICATION	2.2802733332371288E-5	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999991961108022	WITHOUT_CLASSIFICATION	8.038891977929073E-7	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999989701191417	WITHOUT_CLASSIFICATION	1.029880858247996E-6	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999996608596295	WITHOUT_CLASSIFICATION	3.3914037042763154E-7	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999981597226847	WITHOUT_CLASSIFICATION	1.8402773152976528E-5	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999991510849071	WITHOUT_CLASSIFICATION	8.489150927872767E-7	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999600084199685	WITHOUT_CLASSIFICATION	3.999158003148107E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9994114836015878	WITHOUT_CLASSIFICATION	5.885163984120982E-4	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9994114836015878	WITHOUT_CLASSIFICATION	5.885163984120982E-4	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9994114836015878	WITHOUT_CLASSIFICATION	5.885163984120982E-4	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999835235948477	WITHOUT_CLASSIFICATION	1.6476405152313835E-5	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999241867737	WITHOUT_CLASSIFICATION	7.581322632118753E-8	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999241867737	WITHOUT_CLASSIFICATION	7.581322632118753E-8	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999953165735284	WITHOUT_CLASSIFICATION	4.683426471669809E-6	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999994396406	WITHOUT_CLASSIFICATION	5.603594135386362E-10	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.999999527657238	WITHOUT_CLASSIFICATION	4.7234276206882505E-7	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999771853951132	WITHOUT_CLASSIFICATION	2.2814604886877812E-5	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999771853951132	WITHOUT_CLASSIFICATION	2.2814604886877812E-5	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999754093974	WITHOUT_CLASSIFICATION	2.459060257720034E-8	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999754362027888	WITHOUT_CLASSIFICATION	2.456379721111599E-5	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999754362027888	WITHOUT_CLASSIFICATION	2.456379721111599E-5	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999987873995597	WITHOUT_CLASSIFICATION	1.2126004402449424E-6	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999963091259041	WITHOUT_CLASSIFICATION	3.6908740959464063E-6	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999707648981	WITHOUT_CLASSIFICATION	2.92351019455214E-8	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9990204269694688	WITHOUT_CLASSIFICATION	9.795730305312224E-4	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.9984013624425896	WITHOUT_CLASSIFICATION	0.001598637557410321	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.9986432263159433	WITHOUT_CLASSIFICATION	0.0013567736840567016	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9988587914778368	WITHOUT_CLASSIFICATION	0.0011412085221630802	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9996823579559897	WITHOUT_CLASSIFICATION	3.176420440103977E-4	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.970214159832507	WITHOUT_CLASSIFICATION	0.02978584016749301	IMPLEMENTATION
ID	WITHOUT_CLASSIFICATION	0.9968152062418746	WITHOUT_CLASSIFICATION	0.0031847937581253602	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9998186941496708	WITHOUT_CLASSIFICATION	1.8130585032913885E-4	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9991877034004224	WITHOUT_CLASSIFICATION	8.122965995776237E-4	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999769332561	WITHOUT_CLASSIFICATION	2.3066743893049874E-7	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9998065988437261	WITHOUT_CLASSIFICATION	1.934011562737647E-4	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999991697107395	WITHOUT_CLASSIFICATION	8.302892604658129E-7	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9991877034004224	WITHOUT_CLASSIFICATION	8.122965995776237E-4	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999896122574308	WITHOUT_CLASSIFICATION	1.0387742569236717E-5	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999062776975778	WITHOUT_CLASSIFICATION	9.372230242216478E-5	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9998084517026846	WITHOUT_CLASSIFICATION	1.915482973152693E-4	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9993713394346537	WITHOUT_CLASSIFICATION	6.286605653462317E-4	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9993051573251727	WITHOUT_CLASSIFICATION	6.94842674827222E-4	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9996863412111374	WITHOUT_CLASSIFICATION	3.136587888625875E-4	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9997193331978502	WITHOUT_CLASSIFICATION	2.8066680214980264E-4	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9990984375436238	WITHOUT_CLASSIFICATION	9.0156245637618E-4	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997570286209706	WITHOUT_CLASSIFICATION	2.429713790294039E-4	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999882619451	WITHOUT_CLASSIFICATION	1.1738054792476688E-8	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9998891433131749	WITHOUT_CLASSIFICATION	1.1085668682503785E-4	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.9999998013147697	WITHOUT_CLASSIFICATION	1.986852302756683E-7	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9978661531413757	WITHOUT_CLASSIFICATION	0.0021338468586242208	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9988587914778368	WITHOUT_CLASSIFICATION	0.0011412085221630802	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997570286209706	WITHOUT_CLASSIFICATION	2.429713790294039E-4	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9998891433131749	WITHOUT_CLASSIFICATION	1.1085668682503785E-4	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9978661531413757	WITHOUT_CLASSIFICATION	0.0021338468586242208	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998420378244692	WITHOUT_CLASSIFICATION	1.5796217553087338E-4	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.9987668473791441	WITHOUT_CLASSIFICATION	0.0012331526208558155	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998445962519755	WITHOUT_CLASSIFICATION	1.5540374802441018E-4	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9989590385202974	WITHOUT_CLASSIFICATION	0.0010409614797025689	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9995612855191608	WITHOUT_CLASSIFICATION	4.387144808391873E-4	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9999738863449718	WITHOUT_CLASSIFICATION	2.6113655028215674E-5	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.9999884267787299	WITHOUT_CLASSIFICATION	1.157322127008248E-5	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999512638199717	WITHOUT_CLASSIFICATION	4.8736180028406925E-5	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999775813126476	WITHOUT_CLASSIFICATION	2.2418687352460222E-5	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999984054748486	WITHOUT_CLASSIFICATION	1.5945251513930083E-6	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999992356505889	WITHOUT_CLASSIFICATION	7.643494111309743E-7	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999922064635866	WITHOUT_CLASSIFICATION	7.793536413387277E-6	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999995575804298	WITHOUT_CLASSIFICATION	4.424195703257434E-7	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999944561157057	WITHOUT_CLASSIFICATION	5.543884294255631E-6	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.9982431382213529	WITHOUT_CLASSIFICATION	0.0017568617786470322	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998971585990977	WITHOUT_CLASSIFICATION	1.028414009023501E-4	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9980650120274618	WITHOUT_CLASSIFICATION	0.0019349879725382786	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999999994610131	WITHOUT_CLASSIFICATION	5.389868976674916E-9	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.9992791809345059	WITHOUT_CLASSIFICATION	7.208190654941879E-4	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997570286209706	WITHOUT_CLASSIFICATION	2.429713790294039E-4	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999993317145224	WITHOUT_CLASSIFICATION	6.682854776583393E-7	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999932532440816	WITHOUT_CLASSIFICATION	6.7467559183206154E-6	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.9999853882316715	WITHOUT_CLASSIFICATION	1.4611768328576956E-5	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9953726119781682	WITHOUT_CLASSIFICATION	0.004627388021831874	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.9998958351078117	WITHOUT_CLASSIFICATION	1.0416489218834297E-4	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.999860566330852	WITHOUT_CLASSIFICATION	1.3943366914801998E-4	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999730108341595	WITHOUT_CLASSIFICATION	2.6989165840597123E-5	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999992878509629	WITHOUT_CLASSIFICATION	7.121490370630342E-7	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999888498920534	WITHOUT_CLASSIFICATION	1.1150107946686195E-5	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.9978742359267212	WITHOUT_CLASSIFICATION	0.0021257640732788383	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999213493353379	WITHOUT_CLASSIFICATION	7.865066466210671E-4	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9977574099366482	WITHOUT_CLASSIFICATION	0.002242590063351766	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9463017906198452	WITHOUT_CLASSIFICATION	0.05369820938015478	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9994014745429094	WITHOUT_CLASSIFICATION	5.98525457090513E-4	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.9999990509342522	WITHOUT_CLASSIFICATION	9.490657478020097E-7	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999963870741969	WITHOUT_CLASSIFICATION	3.6129258030381214E-6	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.9998806556428091	WITHOUT_CLASSIFICATION	1.1934435719076156E-4	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.999942689306487	WITHOUT_CLASSIFICATION	5.731069351287653E-5	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.9999972066391625	WITHOUT_CLASSIFICATION	2.793360837592176E-6	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9995037777917832	WITHOUT_CLASSIFICATION	4.962222082167274E-4	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9998733760006816	WITHOUT_CLASSIFICATION	1.2662399931836016E-4	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9990015587655998	WITHOUT_CLASSIFICATION	9.984412344001428E-4	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999816212711552	WITHOUT_CLASSIFICATION	1.837872884482263E-5	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999995974457153	WITHOUT_CLASSIFICATION	4.02554284576249E-7	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9980696493706145	WITHOUT_CLASSIFICATION	0.0019303506293855083	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9980696493706145	WITHOUT_CLASSIFICATION	0.0019303506293855083	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999416484619505	WITHOUT_CLASSIFICATION	5.835153804934098E-5	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9926685196626326	WITHOUT_CLASSIFICATION	0.00733148033736745	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999831858342985	WITHOUT_CLASSIFICATION	1.6814165701487293E-5	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999922112690108	WITHOUT_CLASSIFICATION	7.788730989184631E-6	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999898850812313	WITHOUT_CLASSIFICATION	1.0114918768714129E-5	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999954307331981	WITHOUT_CLASSIFICATION	4.569266801915925E-6	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999142164979196	WITHOUT_CLASSIFICATION	8.578350208042714E-5	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.6793834771237067	WITHOUT_CLASSIFICATION	0.3206165228762932	IMPLEMENTATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999935413446759	WITHOUT_CLASSIFICATION	6.45865532412162E-6	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.999995275559492	WITHOUT_CLASSIFICATION	4.724440507960823E-6	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999467052487465	WITHOUT_CLASSIFICATION	5.329475125355186E-5	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999908713095012	WITHOUT_CLASSIFICATION	9.128690498869386E-6	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.9999823058899506	WITHOUT_CLASSIFICATION	1.769411004931171E-5	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999816508549987	WITHOUT_CLASSIFICATION	1.8349145001344356E-5	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999917768088679	WITHOUT_CLASSIFICATION	8.223191132120075E-6	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9998682725045429	WITHOUT_CLASSIFICATION	1.3172749545718818E-4	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9996894060979592	WITHOUT_CLASSIFICATION	3.105939020407625E-4	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999706013747705	WITHOUT_CLASSIFICATION	2.9398625229585866E-5	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786298663791	WITHOUT_CLASSIFICATION	2.1370133621004222E-5	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999984735233802	WITHOUT_CLASSIFICATION	1.5264766197793096E-6	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974483878359794	WITHOUT_CLASSIFICATION	0.0025516121640206534	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999982005972269	WITHOUT_CLASSIFICATION	1.799402773099741E-6	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999969138266037	WITHOUT_CLASSIFICATION	3.086173396203606E-6	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999605661951132	WITHOUT_CLASSIFICATION	3.943380488672263E-5	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999845819799185	WITHOUT_CLASSIFICATION	1.5418020081517125E-5	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9995738120151909	WITHOUT_CLASSIFICATION	4.261879848090158E-4	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996258162757329	WITHOUT_CLASSIFICATION	3.7418372426716793E-4	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999902129179982	WITHOUT_CLASSIFICATION	9.787082001867319E-6	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999996094963608	WITHOUT_CLASSIFICATION	3.905036392511613E-7	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9993641342699047	WITHOUT_CLASSIFICATION	6.358657300953003E-4	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999984735233802	WITHOUT_CLASSIFICATION	1.5264766197793096E-6	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9998492942239086	WITHOUT_CLASSIFICATION	1.507057760914459E-4	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9996510133993474	WITHOUT_CLASSIFICATION	3.489866006526128E-4	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9997043584620994	WITHOUT_CLASSIFICATION	2.956415379005749E-4	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9998242090239273	WITHOUT_CLASSIFICATION	1.7579097607262547E-4	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9998242090239273	WITHOUT_CLASSIFICATION	1.7579097607262547E-4	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999862177231732	WITHOUT_CLASSIFICATION	1.3782276826844338E-5	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.999988886504303	WITHOUT_CLASSIFICATION	1.1113495697082743E-5	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999916240410739	WITHOUT_CLASSIFICATION	8.375958926178738E-6	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999916240410739	WITHOUT_CLASSIFICATION	8.375958926178738E-6	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999816212711552	WITHOUT_CLASSIFICATION	1.837872884482263E-5	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999973932912981	WITHOUT_CLASSIFICATION	2.6067087017770673E-6	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998732367699964	WITHOUT_CLASSIFICATION	1.2676323000351922E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999992531626906	WITHOUT_CLASSIFICATION	7.468373093921478E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999960960023662	WITHOUT_CLASSIFICATION	3.903997633826036E-6	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998732367699964	WITHOUT_CLASSIFICATION	1.2676323000351922E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999992531626906	WITHOUT_CLASSIFICATION	7.468373093921478E-6	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996179255050764	WITHOUT_CLASSIFICATION	3.820744949235968E-4	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999997366168732	WITHOUT_CLASSIFICATION	2.633831267628327E-7	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999971100312568	WITHOUT_CLASSIFICATION	2.8899687432707817E-6	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.9999966270607096	WITHOUT_CLASSIFICATION	3.372939290497472E-6	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9998729783403607	WITHOUT_CLASSIFICATION	1.2702165963940647E-4	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9783804744484315	WITHOUT_CLASSIFICATION	0.02161952555156856	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.999999873270575	WITHOUT_CLASSIFICATION	1.2672942487852036E-7	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.999999873270575	WITHOUT_CLASSIFICATION	1.2672942487852036E-7	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.999998808785732	WITHOUT_CLASSIFICATION	1.1912142679072209E-6	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999997874801695	WITHOUT_CLASSIFICATION	2.1251983055030772E-7	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999811299981111	WITHOUT_CLASSIFICATION	1.887000188896746E-5	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999999973828443	WITHOUT_CLASSIFICATION	2.6171557023571523E-8	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999989649698248	WITHOUT_CLASSIFICATION	1.0350301752538343E-6	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999903833264209	WITHOUT_CLASSIFICATION	9.616673579085813E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999960960023662	WITHOUT_CLASSIFICATION	3.903997633826036E-6	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999952697701798	WITHOUT_CLASSIFICATION	4.730229820254898E-6	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999999831971415	WITHOUT_CLASSIFICATION	1.6802858504462816E-7	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999999831971415	WITHOUT_CLASSIFICATION	1.6802858504462816E-7	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9998283094917604	WITHOUT_CLASSIFICATION	1.716905082395956E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996179255050764	WITHOUT_CLASSIFICATION	3.820744949235968E-4	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9998892792719342	WITHOUT_CLASSIFICATION	1.1072072806579819E-4	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999749775001797	WITHOUT_CLASSIFICATION	2.5022499820386192E-5	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9563499209607156	WITHOUT_CLASSIFICATION	0.04365007903928438	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999994761616425	WITHOUT_CLASSIFICATION	5.238383575370568E-7	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9995788786267792	WITHOUT_CLASSIFICATION	4.211213732207597E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996179255050764	WITHOUT_CLASSIFICATION	3.820744949235968E-4	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999994761616425	WITHOUT_CLASSIFICATION	5.238383575370568E-7	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9995788786267792	WITHOUT_CLASSIFICATION	4.211213732207597E-4	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.999946630190326	WITHOUT_CLASSIFICATION	5.336980967405441E-5	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999382865843388	WITHOUT_CLASSIFICATION	6.171341566124752E-5	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999996568433888	WITHOUT_CLASSIFICATION	3.4315661118846324E-7	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996179255050764	WITHOUT_CLASSIFICATION	3.820744949235968E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996179255050764	WITHOUT_CLASSIFICATION	3.820744949235968E-4	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9999158056769487	WITHOUT_CLASSIFICATION	8.41943230513024E-5	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.9999901194629549	WITHOUT_CLASSIFICATION	9.880537045135793E-6	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.9999824672089787	WITHOUT_CLASSIFICATION	1.753279102134066E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9993456635987062	WITHOUT_CLASSIFICATION	6.543364012937804E-4	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.999981795683983	WITHOUT_CLASSIFICATION	1.820431601699014E-5	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999998815079921	WITHOUT_CLASSIFICATION	1.1849200785242456E-7	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999942407202052	WITHOUT_CLASSIFICATION	5.759279794746248E-6	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999902759598494	WITHOUT_CLASSIFICATION	9.72404015075024E-6	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999694203781034	WITHOUT_CLASSIFICATION	3.057962189658437E-5	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.9999327407513797	WITHOUT_CLASSIFICATION	6.725924862032395E-5	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9997757342204195	WITHOUT_CLASSIFICATION	2.2426577958045124E-4	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9997220920410804	WITHOUT_CLASSIFICATION	2.7790795891966983E-4	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999891047512	WITHOUT_CLASSIFICATION	1.0895248734269505E-8	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999615446613854	WITHOUT_CLASSIFICATION	3.845533861461949E-5	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999843226388511	WITHOUT_CLASSIFICATION	1.56773611489685E-5	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999998948515817	WITHOUT_CLASSIFICATION	1.0514841824877943E-7	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9993456635987062	WITHOUT_CLASSIFICATION	6.543364012937804E-4	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.999997366048571	WITHOUT_CLASSIFICATION	2.63395142892669E-6	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999851338122041	WITHOUT_CLASSIFICATION	1.4866187795790291E-5	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999968885969267	WITHOUT_CLASSIFICATION	3.1114030732518195E-6	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998783166776105	WITHOUT_CLASSIFICATION	1.2168332238956217E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.998976788219359	WITHOUT_CLASSIFICATION	0.0010232117806410555	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.998976788219359	WITHOUT_CLASSIFICATION	0.0010232117806410555	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9993456635987062	WITHOUT_CLASSIFICATION	6.543364012937804E-4	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9696463827430666	WITHOUT_CLASSIFICATION	0.0303536172569334	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.999999847331748	WITHOUT_CLASSIFICATION	1.5266825194744324E-7	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.7896412764487217	IMPLEMENTATION	0.2103587235512782	WITHOUT_CLASSIFICATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999990845091523	WITHOUT_CLASSIFICATION	9.154908476828823E-7	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999117826060089	WITHOUT_CLASSIFICATION	8.821739399113777E-5	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999939804945799	WITHOUT_CLASSIFICATION	6.0195054200657335E-6	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9979558594091974	WITHOUT_CLASSIFICATION	0.002044140590802664	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9997248490377708	WITHOUT_CLASSIFICATION	2.751509622291606E-4	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999959091118054	WITHOUT_CLASSIFICATION	4.090888194592394E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996229884432044	WITHOUT_CLASSIFICATION	3.7701155679560773E-4	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999685703584184	WITHOUT_CLASSIFICATION	3.142964158158858E-5	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999706201333518	WITHOUT_CLASSIFICATION	2.9379866648214074E-5	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999933024920524	WITHOUT_CLASSIFICATION	6.697507947494154E-6	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9912994930093983	WITHOUT_CLASSIFICATION	0.008700506990601627	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999983442595122	WITHOUT_CLASSIFICATION	1.6557404878668043E-6	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960300737128	WITHOUT_CLASSIFICATION	3.969926287199661E-6	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999997054117088	WITHOUT_CLASSIFICATION	2.945882912366669E-7	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999981524915923	WITHOUT_CLASSIFICATION	1.8475084077058993E-6	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9997523339290725	WITHOUT_CLASSIFICATION	2.476660709275794E-4	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994523864915	WITHOUT_CLASSIFICATION	5.476135084689831E-7	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999966665457595	WITHOUT_CLASSIFICATION	3.3334542404415493E-6	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999727172288619	WITHOUT_CLASSIFICATION	2.728277113804601E-5	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9998786051624491	WITHOUT_CLASSIFICATION	1.213948375509537E-4	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994632570521943	WITHOUT_CLASSIFICATION	5.367429478056813E-4	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993693324808044	WITHOUT_CLASSIFICATION	6.306675191956052E-4	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9786242898516719	WITHOUT_CLASSIFICATION	0.02137571014832804	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995989984965084	WITHOUT_CLASSIFICATION	4.0100150349158643E-4	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9543345192097831	WITHOUT_CLASSIFICATION	0.04566548079021702	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9734094957205756	WITHOUT_CLASSIFICATION	0.026590504279424425	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9403560987126116	WITHOUT_CLASSIFICATION	0.05964390128738832	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9966038239124839	WITHOUT_CLASSIFICATION	0.003396176087516048	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.998861353895178	WITHOUT_CLASSIFICATION	0.0011386461048219479	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9997306153899436	WITHOUT_CLASSIFICATION	2.693846100565082E-4	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99960896284453	WITHOUT_CLASSIFICATION	3.910371554700513E-4	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998608144339995	WITHOUT_CLASSIFICATION	1.3918556600039258E-4	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999624399982845	WITHOUT_CLASSIFICATION	3.756000171549226E-4	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9904944327806774	WITHOUT_CLASSIFICATION	0.00950556721932259	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999315281899972	WITHOUT_CLASSIFICATION	6.847181000279618E-4	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997994172203578	WITHOUT_CLASSIFICATION	2.0058277964219448E-4	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9676907062671836	WITHOUT_CLASSIFICATION	0.03230929373281645	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9685045474708395	WITHOUT_CLASSIFICATION	0.03149545252916056	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999406854498816	WITHOUT_CLASSIFICATION	5.9314550118277864E-5	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996752768228072	WITHOUT_CLASSIFICATION	3.247231771927834E-4	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.999779131146687	WITHOUT_CLASSIFICATION	2.2086885331307462E-4	IMPLEMENTATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999850143799149	WITHOUT_CLASSIFICATION	1.4985620085149114E-5	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999928506035445	WITHOUT_CLASSIFICATION	7.149396455608921E-6	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999987835685903	WITHOUT_CLASSIFICATION	1.2164314096955333E-5	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.9999478787424377	WITHOUT_CLASSIFICATION	5.212125756231481E-5	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999965829362597	WITHOUT_CLASSIFICATION	3.417063740310568E-6	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999736822769	WITHOUT_CLASSIFICATION	2.631772303068506E-8	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9998572538432031	WITHOUT_CLASSIFICATION	1.4274615679684747E-4	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9997745717515609	WITHOUT_CLASSIFICATION	2.254282484390155E-4	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9992453304107602	WITHOUT_CLASSIFICATION	7.546695892397546E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996229884432044	WITHOUT_CLASSIFICATION	3.7701155679560773E-4	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998875589493398	WITHOUT_CLASSIFICATION	1.1244105066017704E-4	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.9996416544656995	WITHOUT_CLASSIFICATION	3.58345534300394E-4	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.999999918013295	WITHOUT_CLASSIFICATION	8.198670499398988E-8	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999968331984618	WITHOUT_CLASSIFICATION	3.16680153815688E-6	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9961390695375805	WITHOUT_CLASSIFICATION	0.003860930462419621	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9995904028385622	WITHOUT_CLASSIFICATION	4.0959716143790665E-4	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999998320671488	WITHOUT_CLASSIFICATION	1.6793285109702412E-7	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999794523130903	WITHOUT_CLASSIFICATION	2.0547686909712108E-4	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998193994823559	WITHOUT_CLASSIFICATION	1.8060051764405614E-4	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999985119638958	WITHOUT_CLASSIFICATION	1.488036104211047E-5	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994142515614138	WITHOUT_CLASSIFICATION	5.857484385862281E-4	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9903104160164606	WITHOUT_CLASSIFICATION	0.009689583983539439	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999748699882508	WITHOUT_CLASSIFICATION	2.513001174914716E-5	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9977622933843194	WITHOUT_CLASSIFICATION	0.002237706615680556	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999694254630493	WITHOUT_CLASSIFICATION	3.057453695053297E-5	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998796068952696	WITHOUT_CLASSIFICATION	1.2039310473043844E-4	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999959852118246	WITHOUT_CLASSIFICATION	4.01478817536389E-6	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999999513565851	WITHOUT_CLASSIFICATION	4.864341497537052E-8	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999986439317008	WITHOUT_CLASSIFICATION	1.3560682992061328E-5	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999997675381672	WITHOUT_CLASSIFICATION	2.3246183280958602E-7	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9972432000067529	WITHOUT_CLASSIFICATION	0.0027567999932471346	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9978945514953778	WITHOUT_CLASSIFICATION	0.0021054485046222635	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.999999919113952	WITHOUT_CLASSIFICATION	8.088604789759667E-8	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.999913433924894	WITHOUT_CLASSIFICATION	8.656607510613173E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996229884432044	WITHOUT_CLASSIFICATION	3.7701155679560773E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999987835685903	WITHOUT_CLASSIFICATION	1.2164314096955333E-5	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999936851185317	WITHOUT_CLASSIFICATION	6.314881468279568E-6	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999958869899155	WITHOUT_CLASSIFICATION	4.1130100845344905E-6	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999273953677594	WITHOUT_CLASSIFICATION	7.260463224051673E-5	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999473471563256	WITHOUT_CLASSIFICATION	5.265284367437688E-5	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999958538110346	WITHOUT_CLASSIFICATION	4.146188965356361E-6	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.9999955247496904	WITHOUT_CLASSIFICATION	4.475250309555321E-6	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9903104160164606	WITHOUT_CLASSIFICATION	0.009689583983539439	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999697017623096	WITHOUT_CLASSIFICATION	3.0298237690437415E-5	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9996924500064653	WITHOUT_CLASSIFICATION	3.0754999353469495E-4	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999991974804523	WITHOUT_CLASSIFICATION	8.025195476106215E-7	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999927606108818	WITHOUT_CLASSIFICATION	7.2393891181135424E-6	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.99999934580609	WITHOUT_CLASSIFICATION	6.541939100923754E-7	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999945931825717	WITHOUT_CLASSIFICATION	5.406817428261634E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996229884432044	WITHOUT_CLASSIFICATION	3.7701155679560773E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996229884432044	WITHOUT_CLASSIFICATION	3.7701155679560773E-4	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999662162028352	WITHOUT_CLASSIFICATION	3.3783797164731935E-5	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999998237753894	WITHOUT_CLASSIFICATION	1.7622461056235456E-7	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999953777767619	WITHOUT_CLASSIFICATION	4.6222232380982084E-5	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999993811485316	WITHOUT_CLASSIFICATION	6.188514682817635E-7	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999973118486428	WITHOUT_CLASSIFICATION	2.688151357183571E-6	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999338077891101	WITHOUT_CLASSIFICATION	6.619221088998463E-5	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9994726843879438	WITHOUT_CLASSIFICATION	5.273156120561521E-4	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.9999118175768943	WITHOUT_CLASSIFICATION	8.818242310571102E-5	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999944234970436	WITHOUT_CLASSIFICATION	5.576502956319242E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996229884432044	WITHOUT_CLASSIFICATION	3.7701155679560773E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999740926359	WITHOUT_CLASSIFICATION	2.5907364133794044E-8	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9998139085474709	WITHOUT_CLASSIFICATION	1.8609145252905624E-4	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999975538116921	WITHOUT_CLASSIFICATION	2.446188307914581E-6	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999926121534378	WITHOUT_CLASSIFICATION	7.3878465622213805E-6	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999995696886052	WITHOUT_CLASSIFICATION	4.303113948021867E-6	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999041064310819	WITHOUT_CLASSIFICATION	9.589356891822766E-5	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999934921513091	WITHOUT_CLASSIFICATION	6.507848690979068E-6	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.9999988595003309	WITHOUT_CLASSIFICATION	1.1404996691384055E-6	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9069408001618956	WITHOUT_CLASSIFICATION	0.09305919983810435	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999963444425994	WITHOUT_CLASSIFICATION	3.655557400609733E-6	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999981611142831	WITHOUT_CLASSIFICATION	1.838885716998448E-6	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999992395215054	WITHOUT_CLASSIFICATION	7.604784946002594E-6	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999987835685903	WITHOUT_CLASSIFICATION	1.2164314096955333E-5	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9998895174850124	WITHOUT_CLASSIFICATION	1.104825149875766E-4	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999999260724695	WITHOUT_CLASSIFICATION	7.392753056798287E-8	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999999214541125	WITHOUT_CLASSIFICATION	7.854588748791026E-8	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999992647727334	WITHOUT_CLASSIFICATION	7.352272665714393E-7	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999967042164137	WITHOUT_CLASSIFICATION	3.295783586272141E-6	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999966601033986	WITHOUT_CLASSIFICATION	3.3398966014441606E-6	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999987835685903	WITHOUT_CLASSIFICATION	1.2164314096955333E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999955210680557	WITHOUT_CLASSIFICATION	4.4789319443447766E-6	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9998139085474709	WITHOUT_CLASSIFICATION	1.8609145252905624E-4	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9992170599817536	WITHOUT_CLASSIFICATION	7.829400182464117E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999740926359	WITHOUT_CLASSIFICATION	2.5907364133794044E-8	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996229884432044	WITHOUT_CLASSIFICATION	3.7701155679560773E-4	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999985317664707	WITHOUT_CLASSIFICATION	1.4682335293170365E-6	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.995875188798689	WITHOUT_CLASSIFICATION	0.0041248112013109834	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996229884432044	WITHOUT_CLASSIFICATION	3.7701155679560773E-4	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999874365065237	WITHOUT_CLASSIFICATION	1.2563493476439702E-5	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999991974804523	WITHOUT_CLASSIFICATION	8.025195476106215E-7	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999927606108818	WITHOUT_CLASSIFICATION	7.2393891181135424E-6	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.99999934580609	WITHOUT_CLASSIFICATION	6.541939100923754E-7	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999983966115173	WITHOUT_CLASSIFICATION	1.6033884827007397E-6	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9999984553890169	WITHOUT_CLASSIFICATION	1.5446109831145791E-6	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999995808958806	WITHOUT_CLASSIFICATION	4.1910411942690344E-7	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999740926359	WITHOUT_CLASSIFICATION	2.5907364133794044E-8	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999985317664707	WITHOUT_CLASSIFICATION	1.4682335293170365E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996229884432044	WITHOUT_CLASSIFICATION	3.7701155679560773E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999987835685903	WITHOUT_CLASSIFICATION	1.2164314096955333E-5	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999945931825717	WITHOUT_CLASSIFICATION	5.406817428261634E-6	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999662162028352	WITHOUT_CLASSIFICATION	3.3783797164731935E-5	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999998237753894	WITHOUT_CLASSIFICATION	1.7622461056235456E-7	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974981905525	WITHOUT_CLASSIFICATION	2.5018094475299694E-6	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995036162767	WITHOUT_CLASSIFICATION	4.963837233109823E-7	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999942088695986	WITHOUT_CLASSIFICATION	5.791130401344105E-6	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999994911704673	WITHOUT_CLASSIFICATION	5.088295326277526E-7	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999998225760377	WITHOUT_CLASSIFICATION	1.7742396220453591E-7	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.999996537515422	WITHOUT_CLASSIFICATION	3.4624845779367513E-6	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9685045474708395	WITHOUT_CLASSIFICATION	0.03149545252916056	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999993799238313	WITHOUT_CLASSIFICATION	6.200761686440906E-7	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9994040802233386	WITHOUT_CLASSIFICATION	5.959197766613974E-4	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999909629463192	WITHOUT_CLASSIFICATION	9.037053680762897E-6	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999822028591	WITHOUT_CLASSIFICATION	1.7797140892212423E-8	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999949436711701	WITHOUT_CLASSIFICATION	5.056328829871829E-6	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9543345192097831	WITHOUT_CLASSIFICATION	0.04566548079021702	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9734094957205756	WITHOUT_CLASSIFICATION	0.026590504279424425	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998608144339995	WITHOUT_CLASSIFICATION	1.3918556600039258E-4	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999949436711701	WITHOUT_CLASSIFICATION	5.056328829871829E-6	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999997292368165	WITHOUT_CLASSIFICATION	2.7076318349409776E-6	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999592880292659	WITHOUT_CLASSIFICATION	4.071197073399819E-5	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975405475998953	WITHOUT_CLASSIFICATION	0.002459452400104708	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9944147051065757	WITHOUT_CLASSIFICATION	0.005585294893424333	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9988612891652814	WITHOUT_CLASSIFICATION	0.0011387108347186464	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996229884432044	WITHOUT_CLASSIFICATION	3.7701155679560773E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996229884432044	WITHOUT_CLASSIFICATION	3.7701155679560773E-4	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.9997469636119374	WITHOUT_CLASSIFICATION	2.530363880625805E-4	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999624399982845	WITHOUT_CLASSIFICATION	3.756000171549226E-4	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997994172203578	WITHOUT_CLASSIFICATION	2.0058277964219448E-4	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999997675381672	WITHOUT_CLASSIFICATION	2.3246183280958602E-7	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999999918264849	WITHOUT_CLASSIFICATION	8.173515143727871E-9	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999993436185006	WITHOUT_CLASSIFICATION	6.563814994021738E-7	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.99999992613514	WITHOUT_CLASSIFICATION	7.386486006440513E-8	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999945660107808	WITHOUT_CLASSIFICATION	5.4339892191365705E-6	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999990408654058	WITHOUT_CLASSIFICATION	9.591345941272116E-7	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999978609976392	WITHOUT_CLASSIFICATION	2.1390023608232697E-6	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999910486633441	WITHOUT_CLASSIFICATION	8.951336655870086E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998119800886399	WITHOUT_CLASSIFICATION	1.880199113601554E-4	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999959091118054	WITHOUT_CLASSIFICATION	4.090888194592394E-5	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9975291442581186	WITHOUT_CLASSIFICATION	0.0024708557418814457	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999993148203127	WITHOUT_CLASSIFICATION	6.851796873595177E-7	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9996514111025764	WITHOUT_CLASSIFICATION	3.485888974235968E-4	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9995552221332139	WITHOUT_CLASSIFICATION	4.4477786678607135E-4	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999985983816546	WITHOUT_CLASSIFICATION	1.4016183454386087E-6	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999754911266926	WITHOUT_CLASSIFICATION	2.4508873307397765E-5	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995478194117227	WITHOUT_CLASSIFICATION	4.5218058827726013E-4	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9774321507456039	WITHOUT_CLASSIFICATION	0.022567849254396113	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999829363679575	WITHOUT_CLASSIFICATION	1.7063632042457514E-5	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999322596421069	WITHOUT_CLASSIFICATION	6.774035789314971E-5	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.999994872012415	WITHOUT_CLASSIFICATION	5.1279875850166925E-6	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999359830321122	WITHOUT_CLASSIFICATION	6.401696788791548E-5	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999832894822834	WITHOUT_CLASSIFICATION	1.671051771657762E-5	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999065374401187	WITHOUT_CLASSIFICATION	9.34625598813437E-5	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999435188500966	WITHOUT_CLASSIFICATION	5.6481149903410875E-5	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999738017011626	WITHOUT_CLASSIFICATION	2.6198298837461066E-5	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999333495799623	WITHOUT_CLASSIFICATION	6.665042003776468E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999564641461172	WITHOUT_CLASSIFICATION	4.353585388270018E-5	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9991159290639227	WITHOUT_CLASSIFICATION	8.840709360774567E-4	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998435844668205	WITHOUT_CLASSIFICATION	1.5641553317947765E-4	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963142038377	WITHOUT_CLASSIFICATION	3.685796162263585E-6	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999359687943918	WITHOUT_CLASSIFICATION	6.403120560815137E-5	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999991492332954	WITHOUT_CLASSIFICATION	8.50766704654715E-7	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9998491879884341	WITHOUT_CLASSIFICATION	1.50812011565863E-4	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.9999969846076068	WITHOUT_CLASSIFICATION	3.015392393271851E-6	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999522180397756	WITHOUT_CLASSIFICATION	4.7781960224279926E-5	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998439002413275	WITHOUT_CLASSIFICATION	1.5609975867241768E-4	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999989919389686	WITHOUT_CLASSIFICATION	1.0080610314603759E-6	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999992709694584	WITHOUT_CLASSIFICATION	7.29030541599872E-6	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999582402719845	WITHOUT_CLASSIFICATION	4.175972801553076E-5	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999905545554381	WITHOUT_CLASSIFICATION	9.445444561949247E-6	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999991263839059	WITHOUT_CLASSIFICATION	8.736160941086993E-7	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9996290280302211	WITHOUT_CLASSIFICATION	3.709719697789231E-4	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999552769101	WITHOUT_CLASSIFICATION	4.472308988948176E-8	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999970014885283	WITHOUT_CLASSIFICATION	2.998511471716465E-6	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999969798697187	WITHOUT_CLASSIFICATION	3.020130281196815E-6	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999749808086738	WITHOUT_CLASSIFICATION	2.501919132626876E-5	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999997771673251	WITHOUT_CLASSIFICATION	2.2283267479908009E-7	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999998491602835	WITHOUT_CLASSIFICATION	1.5083971643527397E-7	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9983062109825906	WITHOUT_CLASSIFICATION	0.0016937890174093383	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.8700284269464419	IMPLEMENTATION	0.12997157305355822	WITHOUT_CLASSIFICATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998650437606333	WITHOUT_CLASSIFICATION	1.349562393667112E-4	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999047943609851	WITHOUT_CLASSIFICATION	9.520563901490194E-5	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999990779572759	WITHOUT_CLASSIFICATION	9.220427241127232E-7	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9994753668735914	WITHOUT_CLASSIFICATION	5.246331264084925E-4	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9996050742858064	WITHOUT_CLASSIFICATION	3.949257141937109E-4	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998649190936693	WITHOUT_CLASSIFICATION	1.3508090633078987E-4	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999542559924954	WITHOUT_CLASSIFICATION	4.5744007504601454E-5	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999015999974595	WITHOUT_CLASSIFICATION	9.840000254055793E-5	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999959157724094	WITHOUT_CLASSIFICATION	4.084227590613315E-6	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999900645325295	WITHOUT_CLASSIFICATION	9.935467470593906E-6	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999997889917833	WITHOUT_CLASSIFICATION	2.1100821667342433E-7	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999624947471817	WITHOUT_CLASSIFICATION	3.7505252818421215E-5	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999489862043	WITHOUT_CLASSIFICATION	5.1013795745952085E-8	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9889102560741626	WITHOUT_CLASSIFICATION	0.011089743925837357	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9833239023622051	WITHOUT_CLASSIFICATION	0.01667609763779481	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999974574841886	WITHOUT_CLASSIFICATION	2.5425158114070164E-6	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9997838075374428	WITHOUT_CLASSIFICATION	2.161924625572797E-4	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.999996504477209	WITHOUT_CLASSIFICATION	3.495522791024282E-6	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999987389039638	WITHOUT_CLASSIFICATION	1.2610960360732113E-6	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.999773766214392	WITHOUT_CLASSIFICATION	2.2623378560797903E-4	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999987166808013	WITHOUT_CLASSIFICATION	1.2833191987234958E-6	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.999989550608695	WITHOUT_CLASSIFICATION	1.0449391305097045E-5	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9968230937299905	WITHOUT_CLASSIFICATION	0.003176906270009613	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9964666046383618	WITHOUT_CLASSIFICATION	0.003533395361638175	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999426964757772	WITHOUT_CLASSIFICATION	5.730352422278474E-5	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999985879667743	WITHOUT_CLASSIFICATION	1.4120332256927975E-6	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999694858734434	WITHOUT_CLASSIFICATION	3.0514126556600125E-4	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999993525807396	WITHOUT_CLASSIFICATION	6.474192604881205E-7	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999973024831481	WITHOUT_CLASSIFICATION	2.6975168519040673E-6	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999410325900561	WITHOUT_CLASSIFICATION	5.8967409943864194E-5	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999867214173579	WITHOUT_CLASSIFICATION	1.3278582642117347E-5	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.99997276595055	WITHOUT_CLASSIFICATION	2.7234049450102288E-5	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999994767906697	WITHOUT_CLASSIFICATION	5.232093303670277E-7	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999891284539419	WITHOUT_CLASSIFICATION	1.087154605808809E-5	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.9999120372125194	WITHOUT_CLASSIFICATION	8.796278748056213E-5	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999999901900933	WITHOUT_CLASSIFICATION	9.809906748023886E-9	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999936328994301	WITHOUT_CLASSIFICATION	6.367100569830791E-6	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999996908	WITHOUT_CLASSIFICATION	3.0922912313275825E-13	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999728869373087	WITHOUT_CLASSIFICATION	2.7113062691294406E-5	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999842480882387	WITHOUT_CLASSIFICATION	1.5751911761311838E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999555784311082	WITHOUT_CLASSIFICATION	4.4421568891857166E-5	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9995930130141044	WITHOUT_CLASSIFICATION	4.0698698589563984E-4	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998734891249997	WITHOUT_CLASSIFICATION	1.2651087500035633E-4	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9991256705690733	WITHOUT_CLASSIFICATION	8.743294309266413E-4	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999977946976589	WITHOUT_CLASSIFICATION	2.2053023409934023E-6	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999529062706947	WITHOUT_CLASSIFICATION	4.7093729305316995E-5	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9998955848010239	WITHOUT_CLASSIFICATION	1.0441519897606189E-4	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999339166292808	WITHOUT_CLASSIFICATION	6.608337071924951E-5	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.999996577723888	WITHOUT_CLASSIFICATION	3.4222761120148E-6	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9997543410044513	WITHOUT_CLASSIFICATION	2.4565899554870575E-4	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.9991921511740433	WITHOUT_CLASSIFICATION	8.078488259566974E-4	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.99995878538931	WITHOUT_CLASSIFICATION	4.1214610690034764E-5	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9997543410044513	WITHOUT_CLASSIFICATION	2.4565899554870575E-4	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999991453357652	WITHOUT_CLASSIFICATION	8.546642347300386E-7	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.9999991039839286	WITHOUT_CLASSIFICATION	8.960160714771643E-7	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9995644031665688	WITHOUT_CLASSIFICATION	4.3559683343116735E-4	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.5517828851202137	WITHOUT_CLASSIFICATION	0.4482171148797862	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.9999996012765626	WITHOUT_CLASSIFICATION	3.987234372913109E-7	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999970618793474	WITHOUT_CLASSIFICATION	2.9381206526387135E-6	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9949808031557824	WITHOUT_CLASSIFICATION	0.005019196844217554	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999948769407063	WITHOUT_CLASSIFICATION	5.123059293592531E-6	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9985359123770148	WITHOUT_CLASSIFICATION	0.0014640876229851986	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9980828958092691	WITHOUT_CLASSIFICATION	0.0019171041907308577	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999996864578731	WITHOUT_CLASSIFICATION	3.135421268837939E-7	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999951980993547	WITHOUT_CLASSIFICATION	4.801900645310317E-6	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999310388116747	WITHOUT_CLASSIFICATION	6.896118832523925E-5	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999294264068	WITHOUT_CLASSIFICATION	7.05735931485448E-8	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999845476388084	WITHOUT_CLASSIFICATION	1.5452361191646315E-5	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9986273722898268	WITHOUT_CLASSIFICATION	0.00137262771017322	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9991951636856663	WITHOUT_CLASSIFICATION	8.048363143336598E-4	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9991951636856663	WITHOUT_CLASSIFICATION	8.048363143336598E-4	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9998695088917317	WITHOUT_CLASSIFICATION	1.30491108268391E-4	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9999632503957968	WITHOUT_CLASSIFICATION	3.674960420316988E-5	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.9998736183548832	WITHOUT_CLASSIFICATION	1.2638164511677785E-4	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.9999520835211331	WITHOUT_CLASSIFICATION	4.791647886693582E-5	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999946539571417	WITHOUT_CLASSIFICATION	5.3460428582335E-6	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999674049089228	WITHOUT_CLASSIFICATION	3.2595091077328034E-5	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9999829031888434	WITHOUT_CLASSIFICATION	1.709681115653746E-5	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999630296694	WITHOUT_CLASSIFICATION	3.6970330565212035E-8	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.99999984419506	WITHOUT_CLASSIFICATION	1.5580494001919112E-7	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998180750254506	WITHOUT_CLASSIFICATION	1.8192497454934194E-4	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999643923563399	WITHOUT_CLASSIFICATION	3.560764366001893E-5	IMPLEMENTATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999995157409513	WITHOUT_CLASSIFICATION	4.842590487961968E-7	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999858126804523	WITHOUT_CLASSIFICATION	1.418731954774598E-5	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999926196982797	WITHOUT_CLASSIFICATION	7.380301720251657E-6	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999997083916923	WITHOUT_CLASSIFICATION	2.9160830772965245E-7	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999754911266926	WITHOUT_CLASSIFICATION	2.4508873307397765E-5	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9997644662472055	WITHOUT_CLASSIFICATION	2.355337527944343E-4	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999943239021716	WITHOUT_CLASSIFICATION	5.676097828391703E-6	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999853300810961	WITHOUT_CLASSIFICATION	1.4669918903884825E-5	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999798018569174	WITHOUT_CLASSIFICATION	2.0198143082692662E-5	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999962816850732	WITHOUT_CLASSIFICATION	3.7183149268473525E-6	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.9999546405054669	WITHOUT_CLASSIFICATION	4.5359494533171206E-5	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999999215620392	WITHOUT_CLASSIFICATION	7.84379607132851E-8	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999929198379462	WITHOUT_CLASSIFICATION	7.0801620537439565E-6	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999644519463586	WITHOUT_CLASSIFICATION	3.554805364127828E-5	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999083160684837	WITHOUT_CLASSIFICATION	9.168393151633456E-5	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999973027852	WITHOUT_CLASSIFICATION	2.69721483096507E-9	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999924618611479	WITHOUT_CLASSIFICATION	7.53813885217614E-6	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9998007238355496	WITHOUT_CLASSIFICATION	1.9927616445037017E-4	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9999925150951096	WITHOUT_CLASSIFICATION	7.4849048904400945E-6	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999752606304937	WITHOUT_CLASSIFICATION	2.4739369506332695E-5	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999990423791676	WITHOUT_CLASSIFICATION	9.576208324086435E-7	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.9999293942984492	WITHOUT_CLASSIFICATION	7.060570155080083E-5	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999988000120895	WITHOUT_CLASSIFICATION	1.199987910492158E-6	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999961759356409	WITHOUT_CLASSIFICATION	3.824064359053109E-6	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.999999611603105	WITHOUT_CLASSIFICATION	3.8839689491047663E-7	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999304618126161	WITHOUT_CLASSIFICATION	6.953818738388556E-5	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999876851466039	WITHOUT_CLASSIFICATION	1.2314853396267745E-5	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999977276017726	WITHOUT_CLASSIFICATION	2.272398227402227E-6	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999997684294305	WITHOUT_CLASSIFICATION	2.3157056947341733E-7	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.9999578600301432	WITHOUT_CLASSIFICATION	4.2139969856778456E-5	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.9999976499321721	WITHOUT_CLASSIFICATION	2.3500678279025975E-6	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999843464736043	WITHOUT_CLASSIFICATION	1.5653526395673924E-5	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999945096155995	WITHOUT_CLASSIFICATION	5.490384400536646E-6	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.999998291899742	WITHOUT_CLASSIFICATION	1.7081002580987463E-6	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999990316156128	WITHOUT_CLASSIFICATION	9.683843872520528E-7	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996954900952566	WITHOUT_CLASSIFICATION	3.045099047434205E-4	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822810560521	WITHOUT_CLASSIFICATION	1.7718943947908058E-5	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998258854316746	WITHOUT_CLASSIFICATION	1.7411456832534873E-4	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9972885721095409	WITHOUT_CLASSIFICATION	0.0027114278904591493	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999992317376822	WITHOUT_CLASSIFICATION	7.682623177955262E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998119800886399	WITHOUT_CLASSIFICATION	1.880199113601554E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998119800886399	WITHOUT_CLASSIFICATION	1.880199113601554E-4	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999931226407728	WITHOUT_CLASSIFICATION	6.877359227159442E-6	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999907051438889	WITHOUT_CLASSIFICATION	9.294856111141635E-6	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.999996300872971	WITHOUT_CLASSIFICATION	3.699127029113415E-6	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175432067486	WITHOUT_CLASSIFICATION	1.8245679325143137E-4	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.999996300872971	WITHOUT_CLASSIFICATION	3.699127029113415E-6	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999562882609666	WITHOUT_CLASSIFICATION	4.371173903327312E-5	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999808562554748	WITHOUT_CLASSIFICATION	1.9143744525175154E-5	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999810818981316	WITHOUT_CLASSIFICATION	1.8918101868361827E-5	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999148664631414	WITHOUT_CLASSIFICATION	8.513353685855066E-5	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999952416794567	WITHOUT_CLASSIFICATION	4.75832054329606E-5	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999922031599898	WITHOUT_CLASSIFICATION	7.796840010172963E-6	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999167696902778	WITHOUT_CLASSIFICATION	8.323030972225982E-5	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.9999979116802831	WITHOUT_CLASSIFICATION	2.0883197169408456E-6	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999581770010876	WITHOUT_CLASSIFICATION	4.182299891234861E-5	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9680122084676581	WITHOUT_CLASSIFICATION	0.03198779153234187	IMPLEMENTATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999802355793915	WITHOUT_CLASSIFICATION	1.9764420608524968E-5	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9986826964201729	WITHOUT_CLASSIFICATION	0.0013173035798270877	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999843012182336	WITHOUT_CLASSIFICATION	1.569878176649667E-5	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999478174371333	WITHOUT_CLASSIFICATION	5.218256286660756E-5	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9993236857354576	WITHOUT_CLASSIFICATION	6.763142645425219E-4	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9998192240443247	WITHOUT_CLASSIFICATION	1.8077595567522284E-4	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999892037343612	WITHOUT_CLASSIFICATION	1.0796265638795457E-5	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999892037343612	WITHOUT_CLASSIFICATION	1.0796265638795457E-5	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999714489850926	WITHOUT_CLASSIFICATION	2.8551014907421985E-5	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.999999792950304	WITHOUT_CLASSIFICATION	2.0704969610671244E-7	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999663602014	WITHOUT_CLASSIFICATION	3.363979871312696E-8	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999988888541945	WITHOUT_CLASSIFICATION	1.1111458054376165E-6	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.99999962883654	WITHOUT_CLASSIFICATION	3.711634599853365E-7	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999480544397769	WITHOUT_CLASSIFICATION	5.1945560223092835E-5	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9278417510560206	IMPLEMENTATION	0.07215824894397928	WITHOUT_CLASSIFICATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999972282071988	WITHOUT_CLASSIFICATION	2.771792801236501E-6	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.9999943970805887	WITHOUT_CLASSIFICATION	5.602919411404667E-6	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999997499722449	WITHOUT_CLASSIFICATION	2.500277550987088E-6	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999996959641131	WITHOUT_CLASSIFICATION	3.040358869016682E-6	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999954456365892	WITHOUT_CLASSIFICATION	4.554363410877482E-6	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999347671454873	WITHOUT_CLASSIFICATION	6.523285451266892E-5	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9996856517751606	WITHOUT_CLASSIFICATION	3.1434822483939655E-4	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999133175738009	WITHOUT_CLASSIFICATION	8.668242619910478E-5	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999986888922296	WITHOUT_CLASSIFICATION	1.3111077702927105E-6	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999984842238706	WITHOUT_CLASSIFICATION	1.5157761294064965E-6	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9993191371557139	WITHOUT_CLASSIFICATION	6.808628442860522E-4	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.9991943523324335	WITHOUT_CLASSIFICATION	8.056476675664002E-4	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999956622279114	WITHOUT_CLASSIFICATION	4.337772088663389E-6	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999847410270393	WITHOUT_CLASSIFICATION	1.525897296064825E-5	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9987300799519011	WITHOUT_CLASSIFICATION	0.0012699200480989245	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9998059216491514	WITHOUT_CLASSIFICATION	1.9407835084846943E-4	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9997689290484376	WITHOUT_CLASSIFICATION	2.310709515624647E-4	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.9991804203933908	WITHOUT_CLASSIFICATION	8.195796066091748E-4	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.9999962998840236	WITHOUT_CLASSIFICATION	3.700115976332948E-6	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999991073889605	WITHOUT_CLASSIFICATION	8.926110394587281E-7	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9982460282977393	WITHOUT_CLASSIFICATION	0.0017539717022606095	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9997168526559986	WITHOUT_CLASSIFICATION	2.8314734400132225E-4	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999994746507984	WITHOUT_CLASSIFICATION	5.253492014901861E-7	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999999850817181	WITHOUT_CLASSIFICATION	1.491828187774345E-8	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999229476576877	WITHOUT_CLASSIFICATION	7.705234231229843E-5	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996355465220779	WITHOUT_CLASSIFICATION	3.644534779221627E-4	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999701133636643	WITHOUT_CLASSIFICATION	2.988663633573903E-5	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999466821172648	WITHOUT_CLASSIFICATION	5.331788273514317E-5	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.999987849180751	WITHOUT_CLASSIFICATION	1.2150819249114656E-5	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999903737823388	WITHOUT_CLASSIFICATION	9.626217661244974E-6	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999904027862394	WITHOUT_CLASSIFICATION	9.597213760562007E-6	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999992940168553	WITHOUT_CLASSIFICATION	7.059831446945496E-7	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999583301109185	WITHOUT_CLASSIFICATION	4.1669889081559646E-5	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999954807584728	WITHOUT_CLASSIFICATION	4.519241527164099E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957277799132	WITHOUT_CLASSIFICATION	4.2722200868734915E-6	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9999959518202826	WITHOUT_CLASSIFICATION	4.048179717336648E-6	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9540134763773191	WITHOUT_CLASSIFICATION	0.04598652362268084	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.999760963307822	WITHOUT_CLASSIFICATION	2.3903669217790934E-4	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9979475399539086	WITHOUT_CLASSIFICATION	0.002052460046091429	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9648597723156676	IMPLEMENTATION	0.03514022768433239	WITHOUT_CLASSIFICATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999998770938063	WITHOUT_CLASSIFICATION	1.2290619367061188E-7	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999450776900576	WITHOUT_CLASSIFICATION	5.492230994248992E-5	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.999492024347189	WITHOUT_CLASSIFICATION	5.079756528111155E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929438992892	WITHOUT_CLASSIFICATION	7.056100710846042E-6	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999993670383321	WITHOUT_CLASSIFICATION	6.329616679107741E-7	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999990380416668	WITHOUT_CLASSIFICATION	9.619583332685023E-7	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999346454048469	WITHOUT_CLASSIFICATION	6.535459515308571E-5	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.999975466609748	WITHOUT_CLASSIFICATION	2.4533390252045483E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999955210680557	WITHOUT_CLASSIFICATION	4.4789319443447766E-6	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999955210680557	WITHOUT_CLASSIFICATION	4.4789319443447766E-6	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999765675344514	WITHOUT_CLASSIFICATION	2.34324655486685E-5	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9996559159953414	WITHOUT_CLASSIFICATION	3.4408400465858936E-4	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999990087457572	WITHOUT_CLASSIFICATION	9.912542427861812E-7	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999804784339106	WITHOUT_CLASSIFICATION	1.9521566089465297E-5	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999716075562479	WITHOUT_CLASSIFICATION	2.839244375215015E-5	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999359960413	WITHOUT_CLASSIFICATION	6.40039586332489E-8	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9993285022910166	WITHOUT_CLASSIFICATION	6.71497708983317E-4	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9998293445681976	WITHOUT_CLASSIFICATION	1.7065543180239267E-4	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999647977177917	WITHOUT_CLASSIFICATION	3.520228220828847E-5	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999998865830916	WITHOUT_CLASSIFICATION	1.1341690840620415E-7	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999928861877357	WITHOUT_CLASSIFICATION	7.11381226423891E-6	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999988220724867	WITHOUT_CLASSIFICATION	1.1779275133051808E-6	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999534663159907	WITHOUT_CLASSIFICATION	4.653368400923478E-5	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998771811004892	WITHOUT_CLASSIFICATION	1.2281889951078572E-4	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999974115021396	WITHOUT_CLASSIFICATION	2.5884978604653973E-6	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999690181654345	WITHOUT_CLASSIFICATION	3.098183456547153E-5	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999852635057274	WITHOUT_CLASSIFICATION	1.4736494272623397E-5	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999910120517416	WITHOUT_CLASSIFICATION	8.987948258431465E-6	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9999660460448506	WITHOUT_CLASSIFICATION	3.3953955149288314E-5	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999997376831816	WITHOUT_CLASSIFICATION	2.623168183802507E-7	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9991171047046333	WITHOUT_CLASSIFICATION	8.82895295366677E-4	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999995426421047	WITHOUT_CLASSIFICATION	4.573578952957155E-7	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999911796747732	WITHOUT_CLASSIFICATION	8.820325226691498E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996559159953414	WITHOUT_CLASSIFICATION	3.4408400465858936E-4	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9993969471645872	WITHOUT_CLASSIFICATION	6.030528354128693E-4	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9939215139476123	WITHOUT_CLASSIFICATION	0.00607848605238764	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.7513328062759177	WITHOUT_CLASSIFICATION	0.24866719372408233	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9962735352554606	WITHOUT_CLASSIFICATION	0.0037264647445394276	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9993885307667435	WITHOUT_CLASSIFICATION	6.114692332564965E-4	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9998415480719135	WITHOUT_CLASSIFICATION	1.5845192808643005E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996559159953414	WITHOUT_CLASSIFICATION	3.4408400465858936E-4	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9995334029587432	WITHOUT_CLASSIFICATION	4.665970412568062E-4	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999998679663721	WITHOUT_CLASSIFICATION	1.3203362799580102E-7	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.9990251000399172	WITHOUT_CLASSIFICATION	9.748999600829037E-4	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999965212888814	WITHOUT_CLASSIFICATION	3.4787111186647533E-6	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999999115618289	WITHOUT_CLASSIFICATION	8.843817109168777E-7	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9996249252378845	WITHOUT_CLASSIFICATION	3.7507476211549336E-4	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.999939179604922	WITHOUT_CLASSIFICATION	6.082039507796041E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998457632373	WITHOUT_CLASSIFICATION	1.5423676278161105E-7	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.834570340665265	WITHOUT_CLASSIFICATION	0.16542965933473494	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999965212888814	WITHOUT_CLASSIFICATION	3.4787111186647533E-6	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999924195246112	WITHOUT_CLASSIFICATION	7.5804753888719854E-6	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998457632373	WITHOUT_CLASSIFICATION	1.5423676278161105E-7	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998663944119788	WITHOUT_CLASSIFICATION	1.3360558802121412E-4	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9991061774721052	WITHOUT_CLASSIFICATION	8.938225278947106E-4	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9970054540585156	WITHOUT_CLASSIFICATION	0.0029945459414844637	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999996959641131	WITHOUT_CLASSIFICATION	3.040358869016682E-6	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999987982174744	WITHOUT_CLASSIFICATION	1.2017825255966239E-5	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999964389170929	WITHOUT_CLASSIFICATION	3.5610829071209385E-6	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999977066437692	WITHOUT_CLASSIFICATION	2.293356230903048E-6	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.996112638693615	WITHOUT_CLASSIFICATION	0.003887361306384927	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999960312601	WITHOUT_CLASSIFICATION	3.968739902554351E-9	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.9998387292687276	WITHOUT_CLASSIFICATION	1.6127073127236998E-4	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999966365264211	WITHOUT_CLASSIFICATION	3.3634735787727424E-6	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999977877256593	WITHOUT_CLASSIFICATION	2.2122743405959005E-6	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999535022950268	WITHOUT_CLASSIFICATION	4.649770497323829E-5	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9996232947089191	WITHOUT_CLASSIFICATION	3.767052910809383E-4	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997999743892374	WITHOUT_CLASSIFICATION	2.0002561076260217E-4	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999733533056	WITHOUT_CLASSIFICATION	2.664669440046475E-8	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999997382839888	WITHOUT_CLASSIFICATION	2.6171601121296925E-7	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9964541020835298	WITHOUT_CLASSIFICATION	0.003545897916470347	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999894765653671	WITHOUT_CLASSIFICATION	1.0523434632827635E-5	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999922968281724	WITHOUT_CLASSIFICATION	7.703171827506283E-6	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9995273605911476	WITHOUT_CLASSIFICATION	4.7263940885248015E-4	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999976137635403	WITHOUT_CLASSIFICATION	2.3862364596948727E-6	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999149067199424	WITHOUT_CLASSIFICATION	8.509328005763254E-5	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999699087668602	WITHOUT_CLASSIFICATION	3.0091233139841844E-5	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999735128009987	WITHOUT_CLASSIFICATION	2.6487199001328388E-5	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999941106082679	WITHOUT_CLASSIFICATION	5.889391732073354E-6	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.999999917727454	WITHOUT_CLASSIFICATION	8.227254601782231E-8	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999998873741331	WITHOUT_CLASSIFICATION	1.1262586695914985E-7	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999013186036172	WITHOUT_CLASSIFICATION	9.868139638279258E-5	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.999923388814825	WITHOUT_CLASSIFICATION	7.661118517502175E-5	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.999958576595506	WITHOUT_CLASSIFICATION	4.142340449394177E-5	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999820869492665	WITHOUT_CLASSIFICATION	1.791305073357601E-5	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999429680633856	WITHOUT_CLASSIFICATION	5.7031936614392025E-5	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9997148898671576	WITHOUT_CLASSIFICATION	2.8511013284243837E-4	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9987137286977766	WITHOUT_CLASSIFICATION	0.0012862713022233302	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999924083547426	WITHOUT_CLASSIFICATION	7.591645257472016E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999995698752645	WITHOUT_CLASSIFICATION	4.301247354880343E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999995698752645	WITHOUT_CLASSIFICATION	4.301247354880343E-6	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999992900374164	WITHOUT_CLASSIFICATION	7.099625836043349E-7	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9973797648860813	WITHOUT_CLASSIFICATION	0.002620235113918767	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999935250776394	WITHOUT_CLASSIFICATION	6.474922360558748E-6	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999947954561561	WITHOUT_CLASSIFICATION	5.204543843921726E-6	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999939691434468	WITHOUT_CLASSIFICATION	6.0308565531957865E-5	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9995972433714685	WITHOUT_CLASSIFICATION	4.027566285315621E-4	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999651114309998	WITHOUT_CLASSIFICATION	3.488856900018339E-5	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999989098950934	WITHOUT_CLASSIFICATION	1.0901049065864317E-5	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9998922654166148	WITHOUT_CLASSIFICATION	1.0773458338530404E-4	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999650064176002	WITHOUT_CLASSIFICATION	3.4993582399822306E-5	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999912219758752	WITHOUT_CLASSIFICATION	8.778024124903941E-6	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999994460073206	WITHOUT_CLASSIFICATION	5.539926793611135E-7	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9985740729105276	WITHOUT_CLASSIFICATION	0.0014259270894724453	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999995698752645	WITHOUT_CLASSIFICATION	4.301247354880343E-6	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999832649824488	WITHOUT_CLASSIFICATION	1.6735017551169795E-5	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9998115352915935	WITHOUT_CLASSIFICATION	1.8846470840647246E-4	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9992627884983114	WITHOUT_CLASSIFICATION	7.372115016886419E-4	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999619643019568	WITHOUT_CLASSIFICATION	3.803569804321446E-5	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999935665670194	WITHOUT_CLASSIFICATION	6.433432980612278E-6	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999988651544512	WITHOUT_CLASSIFICATION	1.134845548742374E-6	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999373451593956	WITHOUT_CLASSIFICATION	6.265484060439237E-5	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999754576393229	WITHOUT_CLASSIFICATION	2.4542360677079118E-5	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999574922321883	WITHOUT_CLASSIFICATION	4.2507767811656375E-5	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998746757061877	WITHOUT_CLASSIFICATION	1.253242938122311E-4	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9995284419204681	WITHOUT_CLASSIFICATION	4.715580795319111E-4	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999820869492665	WITHOUT_CLASSIFICATION	1.791305073357601E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999995698752645	WITHOUT_CLASSIFICATION	4.301247354880343E-6	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9996537168944901	WITHOUT_CLASSIFICATION	3.4628310550997225E-4	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999960598965255	WITHOUT_CLASSIFICATION	3.940103474570915E-6	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.9999418341465632	WITHOUT_CLASSIFICATION	5.816585343663832E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999736105206205	WITHOUT_CLASSIFICATION	2.6389479379476735E-5	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999119713170409	WITHOUT_CLASSIFICATION	8.802868295906063E-5	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999960104757205	WITHOUT_CLASSIFICATION	3.989524279509363E-6	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999431588326742	WITHOUT_CLASSIFICATION	5.684116732581439E-5	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999373019727	WITHOUT_CLASSIFICATION	6.269802733057892E-8	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.999999575873236	WITHOUT_CLASSIFICATION	4.241267640916514E-7	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999619759866311	WITHOUT_CLASSIFICATION	3.8024013368939575E-5	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9998688108096705	WITHOUT_CLASSIFICATION	1.3118919032945563E-4	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9985035569654312	WITHOUT_CLASSIFICATION	0.0014964430345687078	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999870344296872	WITHOUT_CLASSIFICATION	1.2965570312902137E-5	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999643906031327	WITHOUT_CLASSIFICATION	3.560939686726213E-5	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999562882609666	WITHOUT_CLASSIFICATION	4.371173903327312E-5	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999916476323877	WITHOUT_CLASSIFICATION	8.352367612294059E-5	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999958646966699	WITHOUT_CLASSIFICATION	4.135303330122922E-6	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999909415578364	WITHOUT_CLASSIFICATION	9.058442163575226E-6	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.9998981653970809	WITHOUT_CLASSIFICATION	1.0183460291913077E-4	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999299215164	WITHOUT_CLASSIFICATION	7.007848353705619E-8	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997327095609361	WITHOUT_CLASSIFICATION	2.672904390638781E-4	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997327095609361	WITHOUT_CLASSIFICATION	2.672904390638781E-4	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999694382807829	WITHOUT_CLASSIFICATION	3.0561719217106594E-5	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999864344522	WITHOUT_CLASSIFICATION	1.3565547879114044E-8	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999156790272522	WITHOUT_CLASSIFICATION	8.432097274780836E-5	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999920627223203	WITHOUT_CLASSIFICATION	7.937277679685627E-6	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9998246793331874	WITHOUT_CLASSIFICATION	1.7532066681260982E-4	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999671711454186	WITHOUT_CLASSIFICATION	3.2828854581423345E-5	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9997092343263316	WITHOUT_CLASSIFICATION	2.907656736683942E-4	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999512720378	WITHOUT_CLASSIFICATION	4.8727962080999914E-8	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999512720378	WITHOUT_CLASSIFICATION	4.8727962080999914E-8	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9995538824230056	WITHOUT_CLASSIFICATION	4.461175769944331E-4	IMPLEMENTATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999988821639622	WITHOUT_CLASSIFICATION	1.1178360378974751E-6	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999771049829768	WITHOUT_CLASSIFICATION	2.2895017023206948E-5	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999993820206762	WITHOUT_CLASSIFICATION	6.179793239415269E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999993820206762	WITHOUT_CLASSIFICATION	6.179793239415269E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999993820206762	WITHOUT_CLASSIFICATION	6.179793239415269E-7	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999956990835366	WITHOUT_CLASSIFICATION	4.300916463374772E-6	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999734177336	WITHOUT_CLASSIFICATION	2.6582266462165745E-8	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9991225682759296	WITHOUT_CLASSIFICATION	8.774317240703996E-4	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999384207602992	WITHOUT_CLASSIFICATION	6.157923970082706E-5	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999978199459314	WITHOUT_CLASSIFICATION	2.1800540685420587E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999995698752645	WITHOUT_CLASSIFICATION	4.301247354880343E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999995698752645	WITHOUT_CLASSIFICATION	4.301247354880343E-6	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9986642258535352	WITHOUT_CLASSIFICATION	0.0013357741464647649	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9990799182614486	WITHOUT_CLASSIFICATION	9.200817385514594E-4	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9996948846262091	WITHOUT_CLASSIFICATION	3.051153737908899E-4	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9998121826592711	WITHOUT_CLASSIFICATION	1.8781734072894894E-4	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999960060603197	WITHOUT_CLASSIFICATION	3.993939680316511E-6	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.9999829150082203	WITHOUT_CLASSIFICATION	1.708499177970697E-5	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999832765283124	WITHOUT_CLASSIFICATION	1.6723471687556983E-5	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999723724798136	WITHOUT_CLASSIFICATION	2.7627520186462483E-5	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999929122201919	WITHOUT_CLASSIFICATION	7.0877798079980854E-6	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999996222960519	WITHOUT_CLASSIFICATION	3.7770394811229426E-7	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999862353753179	WITHOUT_CLASSIFICATION	1.3764624682050846E-5	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999427091087791	WITHOUT_CLASSIFICATION	5.729089122084025E-5	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999598982816607	WITHOUT_CLASSIFICATION	4.0101718339274715E-5	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999598982816607	WITHOUT_CLASSIFICATION	4.0101718339274715E-5	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.99996742947949	WITHOUT_CLASSIFICATION	3.257052050995057E-5	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.99996742947949	WITHOUT_CLASSIFICATION	3.257052050995052E-5	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999655256400642	WITHOUT_CLASSIFICATION	3.447435993573183E-5	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998904067231579	WITHOUT_CLASSIFICATION	1.0959327684204993E-4	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998904067231579	WITHOUT_CLASSIFICATION	1.0959327684204993E-4	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999479879101664	WITHOUT_CLASSIFICATION	5.201208983364011E-5	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998925667776101	WITHOUT_CLASSIFICATION	1.0743322238992238E-4	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999451284958055	WITHOUT_CLASSIFICATION	5.4871504194393874E-5	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997327095609361	WITHOUT_CLASSIFICATION	2.672904390638781E-4	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9996634372633891	WITHOUT_CLASSIFICATION	3.3656273661085694E-4	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998925667776101	WITHOUT_CLASSIFICATION	1.0743322238992248E-4	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999995815823396	WITHOUT_CLASSIFICATION	4.1841766033335214E-7	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9953952530213852	WITHOUT_CLASSIFICATION	0.004604746978614774	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998852191828483	WITHOUT_CLASSIFICATION	1.1478081715160571E-4	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999157337856938	WITHOUT_CLASSIFICATION	8.426621430616064E-5	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999986986982299	WITHOUT_CLASSIFICATION	1.3013017701033088E-6	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9992368085481033	WITHOUT_CLASSIFICATION	7.631914518967119E-4	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999930741127554	WITHOUT_CLASSIFICATION	6.925887244680932E-6	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9974636046220424	WITHOUT_CLASSIFICATION	0.0025363953779576473	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999824273756969	WITHOUT_CLASSIFICATION	1.7572624303131646E-5	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999959869565	WITHOUT_CLASSIFICATION	4.013043455391406E-9	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999985320628269	WITHOUT_CLASSIFICATION	1.4679371731879227E-6	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.9995839648566942	WITHOUT_CLASSIFICATION	4.160351433058821E-4	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9998676140467141	WITHOUT_CLASSIFICATION	1.3238595328593275E-4	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.9999587966693215	WITHOUT_CLASSIFICATION	4.120333067842307E-5	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.8698917552105203	WITHOUT_CLASSIFICATION	0.13010824478947958	IMPLEMENTATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9996617251120544	WITHOUT_CLASSIFICATION	3.3827488794562784E-4	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999771443836	WITHOUT_CLASSIFICATION	2.285561639394406E-8	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999881953929236	WITHOUT_CLASSIFICATION	1.1804607076527043E-5	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999881953929236	WITHOUT_CLASSIFICATION	1.1804607076527043E-5	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999984404839743	WITHOUT_CLASSIFICATION	1.559516025644332E-6	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999998034777482	WITHOUT_CLASSIFICATION	1.9652225191028423E-7	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999987336082081	WITHOUT_CLASSIFICATION	1.2663917918730936E-6	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.998407446766763	WITHOUT_CLASSIFICATION	0.0015925532332371176	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999920681385883	WITHOUT_CLASSIFICATION	7.931861411712371E-6	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999004812827255	WITHOUT_CLASSIFICATION	9.951871727450378E-5	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9996441150924333	WITHOUT_CLASSIFICATION	3.55884907566627E-4	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999953006906771	WITHOUT_CLASSIFICATION	4.699309322813994E-6	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9998566110455972	WITHOUT_CLASSIFICATION	1.433889544028035E-4	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999997433470185	WITHOUT_CLASSIFICATION	2.5665298144702743E-7	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999964003076364	WITHOUT_CLASSIFICATION	3.5996923635958144E-6	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9985035569654312	WITHOUT_CLASSIFICATION	0.0014964430345687078	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999993457014451	WITHOUT_CLASSIFICATION	6.542985548728128E-7	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999594991202677	WITHOUT_CLASSIFICATION	4.050087973236026E-5	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999944696416566	WITHOUT_CLASSIFICATION	5.5303583433654835E-6	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999938959883209	WITHOUT_CLASSIFICATION	6.104011679039257E-6	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999994920757773	WITHOUT_CLASSIFICATION	5.0792422269860015E-6	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999994920757773	WITHOUT_CLASSIFICATION	5.0792422269860015E-6	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9997782957593224	WITHOUT_CLASSIFICATION	2.2170424067753016E-4	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.999911624634329	WITHOUT_CLASSIFICATION	8.837536567096445E-5	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999349388033789	WITHOUT_CLASSIFICATION	6.50611966210777E-5	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.9999799485283942	WITHOUT_CLASSIFICATION	2.005147160581708E-5	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.9999969095356783	WITHOUT_CLASSIFICATION	3.0904643216427984E-6	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.999737954579225	WITHOUT_CLASSIFICATION	2.620454207750126E-4	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9996430598678288	WITHOUT_CLASSIFICATION	3.569401321712657E-4	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999999786612028	WITHOUT_CLASSIFICATION	2.1338797189457445E-7	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9993158521256119	WITHOUT_CLASSIFICATION	6.841478743880335E-4	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999996097476195	WITHOUT_CLASSIFICATION	3.90252380607276E-7	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999678714956	WITHOUT_CLASSIFICATION	3.2128504451492824E-8	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999999786612028	WITHOUT_CLASSIFICATION	2.1338797189457445E-7	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999960052549666	WITHOUT_CLASSIFICATION	3.994745033436582E-6	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9998156718828194	WITHOUT_CLASSIFICATION	1.8432811718053962E-4	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999982602279386	WITHOUT_CLASSIFICATION	1.739772061426223E-6	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9999936167871332	WITHOUT_CLASSIFICATION	6.3832128668209825E-6	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999848801983	WITHOUT_CLASSIFICATION	1.511980179207099E-8	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999980152960536	WITHOUT_CLASSIFICATION	1.984703946438543E-6	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9992681592288809	WITHOUT_CLASSIFICATION	7.318407711190554E-4	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999971532904246	WITHOUT_CLASSIFICATION	2.84670957530282E-6	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999999203966207	WITHOUT_CLASSIFICATION	7.960337931024762E-7	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999946274789131	WITHOUT_CLASSIFICATION	5.372521086904286E-5	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9993441834469403	WITHOUT_CLASSIFICATION	6.558165530596528E-4	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999997553462824	WITHOUT_CLASSIFICATION	2.446537176352687E-7	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999997511605843	WITHOUT_CLASSIFICATION	2.488394158379927E-7	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999997239932171	WITHOUT_CLASSIFICATION	2.760067828697023E-7	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999676514773058	WITHOUT_CLASSIFICATION	3.234852269419333E-5	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999832946007191	WITHOUT_CLASSIFICATION	1.6705399280919715E-5	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999756337507415	WITHOUT_CLASSIFICATION	2.4366249258502676E-5	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9924738312764358	WITHOUT_CLASSIFICATION	0.007526168723564124	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9951231598117727	WITHOUT_CLASSIFICATION	0.004876840188227298	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9994609743396967	WITHOUT_CLASSIFICATION	5.390256603033909E-4	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999974986305903	WITHOUT_CLASSIFICATION	2.501369409669135E-6	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9998908079201589	WITHOUT_CLASSIFICATION	1.0919207984112128E-4	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999987123266041	WITHOUT_CLASSIFICATION	1.2876733959266106E-6	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.9990443681733667	WITHOUT_CLASSIFICATION	9.556318266333351E-4	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999854492476733	WITHOUT_CLASSIFICATION	1.4550752326659972E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9989849882685395	WITHOUT_CLASSIFICATION	0.0010150117314603963	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999998580968416	WITHOUT_CLASSIFICATION	1.4190315839113981E-6	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9997396367412179	WITHOUT_CLASSIFICATION	2.6036325878203416E-4	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999989481169698	WITHOUT_CLASSIFICATION	1.0518830301580105E-6	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9998848526423129	WITHOUT_CLASSIFICATION	1.1514735768707047E-4	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999490255705	WITHOUT_CLASSIFICATION	5.0974429377861E-8	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999988102615746	WITHOUT_CLASSIFICATION	1.1897384254484982E-6	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999852730010665	WITHOUT_CLASSIFICATION	1.4726998933556456E-5	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999348158276	WITHOUT_CLASSIFICATION	6.51841724621691E-8	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999951508805622	WITHOUT_CLASSIFICATION	4.849119437823904E-6	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9998355470108835	WITHOUT_CLASSIFICATION	1.6445298911649288E-4	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999998340677178	WITHOUT_CLASSIFICATION	1.6593228228711595E-7	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999851388418	WITHOUT_CLASSIFICATION	1.4861158247316993E-8	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999998475130011	WITHOUT_CLASSIFICATION	1.524869989079169E-7	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999634606930656	WITHOUT_CLASSIFICATION	3.653930693447639E-5	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999998888946863	WITHOUT_CLASSIFICATION	1.1110531370333392E-6	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999999267120919	WITHOUT_CLASSIFICATION	7.328790810091583E-7	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999635762519224	WITHOUT_CLASSIFICATION	3.6423748077618765E-5	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999486091083	WITHOUT_CLASSIFICATION	5.139089174312808E-8	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999970993025051	WITHOUT_CLASSIFICATION	2.9006974948739424E-6	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999910446071759	WITHOUT_CLASSIFICATION	8.95539282417738E-6	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.999994780775631	WITHOUT_CLASSIFICATION	5.219224369081115E-6	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999874221750736	WITHOUT_CLASSIFICATION	1.2577824926284722E-5	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999986108603157	WITHOUT_CLASSIFICATION	1.3891396842624186E-6	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999877864868276	WITHOUT_CLASSIFICATION	1.2213513172302363E-5	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997967961953445	WITHOUT_CLASSIFICATION	2.0320380465560742E-4	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.999995030699487	WITHOUT_CLASSIFICATION	4.969300512926109E-6	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999503184722	WITHOUT_CLASSIFICATION	4.968152779495946E-8	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999638821561	WITHOUT_CLASSIFICATION	3.611784401379808E-8	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.999999597911802	WITHOUT_CLASSIFICATION	4.020881979814766E-7	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999261901834041	WITHOUT_CLASSIFICATION	7.380981659577785E-5	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9987629518524257	WITHOUT_CLASSIFICATION	0.0012370481475742206	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999840933939359	WITHOUT_CLASSIFICATION	1.59066060641456E-5	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.9999151406055045	WITHOUT_CLASSIFICATION	8.485939449548625E-5	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999998103602695	WITHOUT_CLASSIFICATION	1.8963973050610628E-7	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999923477889122	WITHOUT_CLASSIFICATION	7.652211087740509E-6	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.999971182077763	WITHOUT_CLASSIFICATION	2.8817922237062297E-5	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.9999679391941245	WITHOUT_CLASSIFICATION	3.206080587545089E-5	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.999998983133234	WITHOUT_CLASSIFICATION	1.016866765998873E-6	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999982016293274	WITHOUT_CLASSIFICATION	1.798370672679896E-6	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999733647308015	WITHOUT_CLASSIFICATION	2.6635269198623965E-5	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997967961953445	WITHOUT_CLASSIFICATION	2.0320380465560742E-4	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.999979538560259	WITHOUT_CLASSIFICATION	2.0461439741020774E-5	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999656170615904	WITHOUT_CLASSIFICATION	3.438293840960541E-5	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999993219376818	WITHOUT_CLASSIFICATION	6.780623181018098E-7	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999991621433635	WITHOUT_CLASSIFICATION	8.378566366076248E-7	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9994098604719679	WITHOUT_CLASSIFICATION	5.901395280320644E-4	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999920638044434	WITHOUT_CLASSIFICATION	7.936195556625475E-6	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9993158521256119	WITHOUT_CLASSIFICATION	6.841478743880335E-4	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999971449165519	WITHOUT_CLASSIFICATION	2.855083448154091E-6	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999951508805622	WITHOUT_CLASSIFICATION	4.849119437823904E-6	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9998675173152887	WITHOUT_CLASSIFICATION	1.3248268471138808E-4	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999646757879377	WITHOUT_CLASSIFICATION	3.532421206232855E-5	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999971576522898	WITHOUT_CLASSIFICATION	2.842347710243295E-6	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999929806825293	WITHOUT_CLASSIFICATION	7.019317470698586E-6	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.998146296593838	WITHOUT_CLASSIFICATION	0.001853703406161924	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999979793800715	WITHOUT_CLASSIFICATION	2.0206199284686392E-6	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9997517742286927	WITHOUT_CLASSIFICATION	2.482257713073547E-4	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999995667289501	WITHOUT_CLASSIFICATION	4.332710499644438E-7	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999993693871595	WITHOUT_CLASSIFICATION	6.306128404016021E-7	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.99999766831289	WITHOUT_CLASSIFICATION	2.331687109842372E-6	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9994452733602629	WITHOUT_CLASSIFICATION	5.547266397370351E-4	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9998205906970227	WITHOUT_CLASSIFICATION	1.7940930297720976E-4	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999754810632434	WITHOUT_CLASSIFICATION	2.4518936756581665E-5	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999754810632434	WITHOUT_CLASSIFICATION	2.4518936756581665E-5	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999975918259646	WITHOUT_CLASSIFICATION	2.408174035432604E-6	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9991653066815225	WITHOUT_CLASSIFICATION	8.346933184774117E-4	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999998219823573	WITHOUT_CLASSIFICATION	1.7801764271553942E-7	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999966482767811	WITHOUT_CLASSIFICATION	3.351723218770688E-6	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999997984561126	WITHOUT_CLASSIFICATION	2.0154388728995402E-7	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999106132950843	WITHOUT_CLASSIFICATION	8.938670491556564E-5	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999994090125	WITHOUT_CLASSIFICATION	5.909874854042101E-10	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999990564967388	WITHOUT_CLASSIFICATION	9.435032613132862E-7	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999988806954659	WITHOUT_CLASSIFICATION	1.119304534100968E-5	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999984688712654	WITHOUT_CLASSIFICATION	1.5311287346188561E-6	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.999617520155424	WITHOUT_CLASSIFICATION	3.8247984457596485E-4	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.9997699516393338	WITHOUT_CLASSIFICATION	2.3004836066611097E-4	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999792768892801	WITHOUT_CLASSIFICATION	2.072311071997049E-5	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999992918845786	WITHOUT_CLASSIFICATION	7.081154214312495E-7	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9994219554927654	WITHOUT_CLASSIFICATION	5.780445072345816E-4	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999998941165683	WITHOUT_CLASSIFICATION	1.0588343173702132E-7	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999641238392913	WITHOUT_CLASSIFICATION	3.587616070856702E-5	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998967286663042	WITHOUT_CLASSIFICATION	1.0327133369585327E-4	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999948841389	WITHOUT_CLASSIFICATION	5.1158610675289495E-9	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999169351186	WITHOUT_CLASSIFICATION	8.306488141750903E-8	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996229884432044	WITHOUT_CLASSIFICATION	3.7701155679560773E-4	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999999347656882	WITHOUT_CLASSIFICATION	6.523431180017308E-7	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999998092316016	WITHOUT_CLASSIFICATION	1.9076839837348538E-7	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999998726274413	WITHOUT_CLASSIFICATION	1.2737255883534704E-7	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999794717083342	WITHOUT_CLASSIFICATION	2.0528291665712223E-5	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.9981528514203677	WITHOUT_CLASSIFICATION	0.001847148579632264	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9990091865593531	WITHOUT_CLASSIFICATION	9.908134406469257E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996229884432044	WITHOUT_CLASSIFICATION	3.7701155679560773E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996229884432044	WITHOUT_CLASSIFICATION	3.7701155679560773E-4	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999706201333518	WITHOUT_CLASSIFICATION	2.9379866648214074E-5	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999955114577	WITHOUT_CLASSIFICATION	4.488542279417124E-9	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999991039186872	WITHOUT_CLASSIFICATION	8.960813128844599E-7	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999725882587385	WITHOUT_CLASSIFICATION	2.7411741261556506E-5	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9998861636582905	WITHOUT_CLASSIFICATION	1.1383634170947625E-4	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999986629588898	WITHOUT_CLASSIFICATION	1.3370411101731282E-6	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999405645549707	WITHOUT_CLASSIFICATION	5.943544502924007E-5	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9992419523534641	WITHOUT_CLASSIFICATION	7.58047646535934E-4	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999776763454061	WITHOUT_CLASSIFICATION	2.2323654593895987E-5	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999993173928244	WITHOUT_CLASSIFICATION	6.826071755965207E-7	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999827336351921	WITHOUT_CLASSIFICATION	1.7266364807998206E-5	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999830491591645	WITHOUT_CLASSIFICATION	1.6950840835558632E-5	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999697546828238	WITHOUT_CLASSIFICATION	3.0245317176243456E-5	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999662217745027	WITHOUT_CLASSIFICATION	3.377822549741316E-5	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9875735088690955	WITHOUT_CLASSIFICATION	0.012426491130904566	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999996436796277	WITHOUT_CLASSIFICATION	3.563203722670624E-7	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999954395199675	WITHOUT_CLASSIFICATION	4.560480032526124E-6	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999772578702623	WITHOUT_CLASSIFICATION	2.274212973767462E-5	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999914840494222	WITHOUT_CLASSIFICATION	8.515950577726155E-6	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975405475998953	WITHOUT_CLASSIFICATION	0.002459452400104708	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.970214159832507	WITHOUT_CLASSIFICATION	0.02978584016749301	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999985476576044	WITHOUT_CLASSIFICATION	1.4523423955963982E-6	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999952392173576	WITHOUT_CLASSIFICATION	4.7607826424798015E-6	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.999977467211866	WITHOUT_CLASSIFICATION	2.2532788133927133E-5	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998285168680648	WITHOUT_CLASSIFICATION	1.7148313193519958E-4	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999527605388698	WITHOUT_CLASSIFICATION	4.723946113014109E-5	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999993954993348	WITHOUT_CLASSIFICATION	6.045006652009603E-7	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999654844018986	WITHOUT_CLASSIFICATION	3.451559810136112E-5	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999918883707803	WITHOUT_CLASSIFICATION	8.111629219551912E-6	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9997485455455941	WITHOUT_CLASSIFICATION	2.5145445440586083E-4	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999998211553957	WITHOUT_CLASSIFICATION	1.7884460431167713E-7	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999937408000118	WITHOUT_CLASSIFICATION	6.259199988231902E-6	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.9999952295693064	WITHOUT_CLASSIFICATION	4.770430693576187E-6	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999836821720933	WITHOUT_CLASSIFICATION	1.631782790661548E-5	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999995708101319	WITHOUT_CLASSIFICATION	4.2918986806263056E-7	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999998350120451	WITHOUT_CLASSIFICATION	1.6498795484108385E-7	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9997584800875782	WITHOUT_CLASSIFICATION	2.4151991242173947E-4	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9992261679708061	WITHOUT_CLASSIFICATION	7.738320291938217E-4	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.999999574721712	WITHOUT_CLASSIFICATION	4.2527828803799874E-7	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999947186003	WITHOUT_CLASSIFICATION	5.2813996048348155E-9	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999786739558265	WITHOUT_CLASSIFICATION	2.1326044173566354E-5	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999827155257807	WITHOUT_CLASSIFICATION	1.7284474219290123E-4	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999882729977457	WITHOUT_CLASSIFICATION	1.1727002254281209E-5	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999895223068404	WITHOUT_CLASSIFICATION	1.0477693159684673E-5	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999882729977457	WITHOUT_CLASSIFICATION	1.1727002254281209E-5	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999921057101826	WITHOUT_CLASSIFICATION	7.894289817296814E-6	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999981168934853	WITHOUT_CLASSIFICATION	1.8831065146825497E-6	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999990126416339	WITHOUT_CLASSIFICATION	9.873583661035686E-6	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999942370719611	WITHOUT_CLASSIFICATION	5.762928038883265E-6	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999281442525	WITHOUT_CLASSIFICATION	7.185574750450013E-8	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999981609339078	WITHOUT_CLASSIFICATION	1.8390660921967517E-5	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999999070930109	WITHOUT_CLASSIFICATION	9.290698913539127E-8	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999998511487334	WITHOUT_CLASSIFICATION	1.4885126667577395E-7	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999987118325531	WITHOUT_CLASSIFICATION	1.2881674469159743E-6	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999402793493988	WITHOUT_CLASSIFICATION	5.972065060124064E-5	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999977621303469	WITHOUT_CLASSIFICATION	2.237869653093646E-6	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999997525576863	WITHOUT_CLASSIFICATION	2.474423138021018E-7	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999994598669487	WITHOUT_CLASSIFICATION	5.401330513148088E-7	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.8593822900237171	IMPLEMENTATION	0.1406177099762829	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999553201778347	WITHOUT_CLASSIFICATION	4.4679822165214385E-5	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999997266214389	WITHOUT_CLASSIFICATION	2.733785611357409E-7	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999992293942613	WITHOUT_CLASSIFICATION	7.706057386909096E-7	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999990710812885	WITHOUT_CLASSIFICATION	9.28918711607194E-7	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999980562190196	WITHOUT_CLASSIFICATION	1.9437809803536705E-6	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999684581643197	WITHOUT_CLASSIFICATION	3.154183568039447E-5	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999999976708783	WITHOUT_CLASSIFICATION	2.3291216966621905E-8	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9998503710811784	WITHOUT_CLASSIFICATION	1.496289188216391E-4	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9996856700284309	WITHOUT_CLASSIFICATION	3.1432997156916693E-4	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999962226121112	WITHOUT_CLASSIFICATION	3.7773878888347037E-6	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997897036546433	WITHOUT_CLASSIFICATION	2.1029634535683626E-4	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999855934849	WITHOUT_CLASSIFICATION	1.4406515084451071E-8	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9996264595651404	WITHOUT_CLASSIFICATION	3.7354043485970614E-4	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.9999916484809047	WITHOUT_CLASSIFICATION	8.351519095412678E-6	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999928235900274	WITHOUT_CLASSIFICATION	7.176409972635863E-6	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999814746469159	WITHOUT_CLASSIFICATION	1.8525353084147616E-5	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.9999633469493785	WITHOUT_CLASSIFICATION	3.6653050621587505E-5	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9876112623294503	WITHOUT_CLASSIFICATION	0.012388737670549764	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999995676892971	WITHOUT_CLASSIFICATION	4.323107029121362E-7	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999772006082623	WITHOUT_CLASSIFICATION	2.2799391737707305E-5	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9994286585675619	WITHOUT_CLASSIFICATION	5.713414324381726E-4	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.9999602485967993	WITHOUT_CLASSIFICATION	3.975140320067225E-5	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9999890578239397	WITHOUT_CLASSIFICATION	1.094217606038759E-5	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999944931784259	WITHOUT_CLASSIFICATION	5.506821574073738E-6	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9998473863081689	WITHOUT_CLASSIFICATION	1.5261369183106247E-4	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999990926401302	WITHOUT_CLASSIFICATION	9.073598699154562E-7	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.9999997688612058	WITHOUT_CLASSIFICATION	2.3113879421467583E-7	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.9999953534698609	WITHOUT_CLASSIFICATION	4.646530139057669E-6	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999999214541125	WITHOUT_CLASSIFICATION	7.854588748791026E-8	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999855934849	WITHOUT_CLASSIFICATION	1.4406515084451071E-8	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9997809348143856	WITHOUT_CLASSIFICATION	2.1906518561436877E-4	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999983798504073	WITHOUT_CLASSIFICATION	1.6201495926907658E-6	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999639120862055	WITHOUT_CLASSIFICATION	3.6087913794594784E-5	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999974937901425	WITHOUT_CLASSIFICATION	2.506209857436315E-6	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.9999725397776942	WITHOUT_CLASSIFICATION	2.7460222305856982E-5	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999996864622642	WITHOUT_CLASSIFICATION	3.135377357408563E-7	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.99999989638507	WITHOUT_CLASSIFICATION	1.0361492999058593E-7	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999989923665785	WITHOUT_CLASSIFICATION	1.0076334214717507E-6	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998554476246928	WITHOUT_CLASSIFICATION	1.445523753072378E-4	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999929609943513	WITHOUT_CLASSIFICATION	7.039005648636727E-6	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.9993159782577197	WITHOUT_CLASSIFICATION	6.840217422803531E-4	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999971918345995	WITHOUT_CLASSIFICATION	2.808165400578214E-6	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999392827064578	WITHOUT_CLASSIFICATION	6.07172935422987E-5	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999450575290911	WITHOUT_CLASSIFICATION	5.494247090882411E-5	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999998329525732	WITHOUT_CLASSIFICATION	1.67047426720291E-7	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999997745641469	WITHOUT_CLASSIFICATION	2.2543585321660764E-7	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999997823553333	WITHOUT_CLASSIFICATION	2.1764466667138814E-7	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999971178641289	WITHOUT_CLASSIFICATION	2.882135870945145E-6	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999979489286519	WITHOUT_CLASSIFICATION	2.0510713481266577E-6	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9997809348143856	WITHOUT_CLASSIFICATION	2.1906518561436877E-4	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999928334029776	WITHOUT_CLASSIFICATION	7.166597022361324E-6	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999805333498399	WITHOUT_CLASSIFICATION	1.9466650160078945E-5	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999806920398443	WITHOUT_CLASSIFICATION	1.9307960155666525E-5	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999901868053106	WITHOUT_CLASSIFICATION	9.813194689300897E-6	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999729539434	WITHOUT_CLASSIFICATION	2.7046056665243872E-8	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.7249754387598826	WITHOUT_CLASSIFICATION	0.2750245612401175	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.7249754387598826	WITHOUT_CLASSIFICATION	0.2750245612401175	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999941839065255	WITHOUT_CLASSIFICATION	5.816093474561305E-6	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.7249754387598826	WITHOUT_CLASSIFICATION	0.2750245612401175	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.7249754387598826	WITHOUT_CLASSIFICATION	0.2750245612401175	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9995858944672401	WITHOUT_CLASSIFICATION	4.1410553275986943E-4	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999572254645153	WITHOUT_CLASSIFICATION	4.277453548472145E-5	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999940866747933	WITHOUT_CLASSIFICATION	5.913325206710344E-6	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999373057441812	WITHOUT_CLASSIFICATION	6.269425581882945E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9973673710957062	WITHOUT_CLASSIFICATION	0.0026326289042937347	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9973589780470768	WITHOUT_CLASSIFICATION	0.002641021952923107	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9973075941929965	WITHOUT_CLASSIFICATION	0.002692405807003412	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9994207624545984	WITHOUT_CLASSIFICATION	5.792375454015519E-4	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999758103309959	WITHOUT_CLASSIFICATION	2.4189669004062382E-5	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999885825139961	WITHOUT_CLASSIFICATION	1.1417486003763612E-5	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999862818220566	WITHOUT_CLASSIFICATION	1.3718177943305398E-5	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999942792668653	WITHOUT_CLASSIFICATION	5.720733134692581E-6	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999982368863795	WITHOUT_CLASSIFICATION	1.7631136205170903E-6	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999984389094412	WITHOUT_CLASSIFICATION	1.561090558937648E-6	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999985335187078	WITHOUT_CLASSIFICATION	1.4664812920808217E-6	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.999865512698383	WITHOUT_CLASSIFICATION	1.3448730161706891E-4	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999931226407728	WITHOUT_CLASSIFICATION	6.877359227159442E-6	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9997212239249029	WITHOUT_CLASSIFICATION	2.787760750970171E-4	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9987178784295337	WITHOUT_CLASSIFICATION	0.0012821215704662365	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999965276053232	WITHOUT_CLASSIFICATION	3.4723946767358694E-6	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9998533914320278	WITHOUT_CLASSIFICATION	1.466085679721946E-4	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.9999436732841525	WITHOUT_CLASSIFICATION	5.632671584750074E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999931226407728	WITHOUT_CLASSIFICATION	6.877359227159442E-6	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9996264595651404	WITHOUT_CLASSIFICATION	3.7354043485970614E-4	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.9999743804586921	WITHOUT_CLASSIFICATION	2.561954130791617E-5	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999435188500966	WITHOUT_CLASSIFICATION	5.6481149903410875E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999564641461172	WITHOUT_CLASSIFICATION	4.353585388270018E-5	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.9999317956535735	WITHOUT_CLASSIFICATION	6.820434642652902E-5	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999750581983167	WITHOUT_CLASSIFICATION	2.4941801683313376E-5	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.9999971267041466	WITHOUT_CLASSIFICATION	2.873295853392857E-6	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9858493942162893	WITHOUT_CLASSIFICATION	0.014150605783710728	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.999855165997588	WITHOUT_CLASSIFICATION	1.4483400241206248E-4	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999904118819132	WITHOUT_CLASSIFICATION	9.58811808680418E-6	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.9998722196474827	WITHOUT_CLASSIFICATION	1.277803525171954E-4	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999998427542277	WITHOUT_CLASSIFICATION	1.5724577226552447E-7	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999358031800123	WITHOUT_CLASSIFICATION	6.419681998774342E-5	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999949862521705	WITHOUT_CLASSIFICATION	5.0137478295230705E-6	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9989024729512163	WITHOUT_CLASSIFICATION	0.0010975270487837145	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999983817073504	WITHOUT_CLASSIFICATION	1.6182926496484998E-6	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999964265249817	WITHOUT_CLASSIFICATION	3.57347501825355E-6	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9992300165213139	WITHOUT_CLASSIFICATION	7.699834786860634E-4	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999864417847	WITHOUT_CLASSIFICATION	1.3558215360226415E-8	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999899588339821	WITHOUT_CLASSIFICATION	1.0041166017839144E-5	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999853265990813	WITHOUT_CLASSIFICATION	1.4673400918588728E-5	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999296569340683	WITHOUT_CLASSIFICATION	7.034306593168454E-5	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999987223588892	WITHOUT_CLASSIFICATION	1.2776411108963187E-6	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.999855165997588	WITHOUT_CLASSIFICATION	1.4483400241206248E-4	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999994588776709	WITHOUT_CLASSIFICATION	5.411223290688089E-7	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.9999732630676186	WITHOUT_CLASSIFICATION	2.6736932381468317E-5	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9992899195236316	WITHOUT_CLASSIFICATION	7.100804763683747E-4	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.999938534846432	WITHOUT_CLASSIFICATION	6.14651535679774E-5	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999567851824633	WITHOUT_CLASSIFICATION	4.3214817536649865E-5	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.9999953863913681	WITHOUT_CLASSIFICATION	4.6136086318354615E-6	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.9999389180862072	WITHOUT_CLASSIFICATION	6.108191379279284E-5	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.9999988638101545	WITHOUT_CLASSIFICATION	1.1361898454589364E-6	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.9999946889065339	WITHOUT_CLASSIFICATION	5.311093466194033E-6	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.9999924330432077	WITHOUT_CLASSIFICATION	7.566956792210699E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999974876022632	WITHOUT_CLASSIFICATION	2.512397736801531E-5	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999926198936406	WITHOUT_CLASSIFICATION	7.3801063593839555E-6	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9998305881444113	WITHOUT_CLASSIFICATION	1.6941185558859827E-4	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999968544466858	WITHOUT_CLASSIFICATION	3.1455533142044473E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999960960023662	WITHOUT_CLASSIFICATION	3.903997633826036E-6	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999972897078234	WITHOUT_CLASSIFICATION	2.710292176640265E-6	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999772732770049	WITHOUT_CLASSIFICATION	2.2726722995033785E-5	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999974876022632	WITHOUT_CLASSIFICATION	2.512397736801531E-5	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999984108864993	WITHOUT_CLASSIFICATION	1.5891135006172264E-6	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9991492188078367	WITHOUT_CLASSIFICATION	8.507811921632414E-4	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999253290236548	WITHOUT_CLASSIFICATION	7.467097634519962E-5	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9571123090771686	WITHOUT_CLASSIFICATION	0.042887690922831435	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.9999972092402388	WITHOUT_CLASSIFICATION	2.7907597612212823E-6	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999713664001074	WITHOUT_CLASSIFICATION	2.863359989255548E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999960960023662	WITHOUT_CLASSIFICATION	3.903997633826036E-6	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999754208430334	WITHOUT_CLASSIFICATION	2.457915696666204E-5	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998717777570406	WITHOUT_CLASSIFICATION	1.2822224295931547E-4	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965787994128	WITHOUT_CLASSIFICATION	3.4212005870957203E-6	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995228288514996	WITHOUT_CLASSIFICATION	4.771711485005166E-4	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.797821363445296	WITHOUT_CLASSIFICATION	0.20217863655470414	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.946704568558165	WITHOUT_CLASSIFICATION	0.05329543144183498	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999978422484288	WITHOUT_CLASSIFICATION	2.1577515711981793E-5	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999978422484288	WITHOUT_CLASSIFICATION	2.1577515711981793E-5	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999969807423371	WITHOUT_CLASSIFICATION	3.019257662930028E-6	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999927987114698	WITHOUT_CLASSIFICATION	7.201288530127713E-6	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.9999962189487354	WITHOUT_CLASSIFICATION	3.7810512645537655E-6	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.9999932896780022	WITHOUT_CLASSIFICATION	6.710321997802708E-6	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.999865983948123	WITHOUT_CLASSIFICATION	1.3401605187697744E-4	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999736878894928	WITHOUT_CLASSIFICATION	2.631211050717529E-5	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998773860341894	WITHOUT_CLASSIFICATION	1.2261396581059406E-4	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982380568691414	WITHOUT_CLASSIFICATION	0.0017619431308586243	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999985618855289	WITHOUT_CLASSIFICATION	1.4381144711323357E-6	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999981535052963	WITHOUT_CLASSIFICATION	1.846494703695564E-5	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999736878894928	WITHOUT_CLASSIFICATION	2.631211050717529E-5	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998773860341894	WITHOUT_CLASSIFICATION	1.2261396581059406E-4	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982380568691414	WITHOUT_CLASSIFICATION	0.0017619431308586243	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.9999083430747753	WITHOUT_CLASSIFICATION	9.165692522465399E-5	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.9999212057412944	WITHOUT_CLASSIFICATION	7.879425870560915E-5	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.999999939552127	WITHOUT_CLASSIFICATION	6.044787310494745E-8	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999917287343465	WITHOUT_CLASSIFICATION	8.271265653480375E-6	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999856365593305	WITHOUT_CLASSIFICATION	1.4363440669601027E-5	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999970491894722	WITHOUT_CLASSIFICATION	2.9508105277623876E-6	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999975220415251	WITHOUT_CLASSIFICATION	2.4779584749894304E-6	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.9999860327351882	WITHOUT_CLASSIFICATION	1.3967264811906387E-5	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9998276524632442	WITHOUT_CLASSIFICATION	1.7234753675584842E-4	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999886393046037	WITHOUT_CLASSIFICATION	1.1360695396393419E-5	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999662173326168	WITHOUT_CLASSIFICATION	3.3782667383157536E-5	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999427172945751	WITHOUT_CLASSIFICATION	5.7282705424829524E-5	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999908307955429	WITHOUT_CLASSIFICATION	9.169204457173858E-6	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999994593758172	WITHOUT_CLASSIFICATION	5.406241827760858E-7	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999978358630669	WITHOUT_CLASSIFICATION	2.164136933075662E-6	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999998261855738	WITHOUT_CLASSIFICATION	1.7381442618082455E-7	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9993188749996184	WITHOUT_CLASSIFICATION	6.811250003816836E-4	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997641186314816	WITHOUT_CLASSIFICATION	2.358813685184529E-4	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999780073835426	WITHOUT_CLASSIFICATION	2.19926164573851E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999578183382365	WITHOUT_CLASSIFICATION	4.218166176350437E-5	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999862800648	WITHOUT_CLASSIFICATION	1.3719935233206372E-8	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999947803452051	WITHOUT_CLASSIFICATION	5.219654794826148E-6	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999998729270082	WITHOUT_CLASSIFICATION	1.2707299184425546E-7	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999976752958823	WITHOUT_CLASSIFICATION	2.324704117669285E-6	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999999930349587	WITHOUT_CLASSIFICATION	6.965041373651468E-9	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9990688818055811	WITHOUT_CLASSIFICATION	9.311181944189111E-4	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998788455047385	WITHOUT_CLASSIFICATION	1.21154495261547E-4	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994743856449104	WITHOUT_CLASSIFICATION	5.256143550895037E-4	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999945438079352	WITHOUT_CLASSIFICATION	5.45619206477897E-6	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998337201265497	WITHOUT_CLASSIFICATION	1.662798734503253E-4	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999532416672163	WITHOUT_CLASSIFICATION	4.6758332783640036E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999555784311082	WITHOUT_CLASSIFICATION	4.4421568891857166E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999555784311082	WITHOUT_CLASSIFICATION	4.4421568891857166E-5	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999986489273	WITHOUT_CLASSIFICATION	1.3510726565960073E-9	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999408980319209	WITHOUT_CLASSIFICATION	5.91019680791082E-5	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9996946161756514	WITHOUT_CLASSIFICATION	3.0538382434863135E-4	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9985035569654312	WITHOUT_CLASSIFICATION	0.0014964430345687078	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9996850987919477	WITHOUT_CLASSIFICATION	3.1490120805237E-4	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999998712020632	WITHOUT_CLASSIFICATION	1.2879793671103415E-7	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.9996694422705752	WITHOUT_CLASSIFICATION	3.305577294248414E-4	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.9999915153236149	WITHOUT_CLASSIFICATION	8.484676385101054E-6	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999339166292808	WITHOUT_CLASSIFICATION	6.608337071924951E-5	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975337421702	WITHOUT_CLASSIFICATION	2.4662578297894023E-6	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979496562313	WITHOUT_CLASSIFICATION	2.0503437686558416E-6	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992010102827	WITHOUT_CLASSIFICATION	7.989897172864471E-7	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796953345005	WITHOUT_CLASSIFICATION	2.03046654995685E-5	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990430541551	WITHOUT_CLASSIFICATION	9.569458449442306E-7	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976721082167	WITHOUT_CLASSIFICATION	2.327891783334675E-6	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971963176119	WITHOUT_CLASSIFICATION	2.803682388054594E-6	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976415331134	WITHOUT_CLASSIFICATION	2.358466886638451E-6	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963678536776	WITHOUT_CLASSIFICATION	3.6321463224318835E-6	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940522865793	WITHOUT_CLASSIFICATION	5.947713420699692E-6	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920848688045	WITHOUT_CLASSIFICATION	7.915131195527525E-6	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999666683964645	WITHOUT_CLASSIFICATION	3.333160353543366E-5	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999859580392023	WITHOUT_CLASSIFICATION	1.404196079781129E-5	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999942154577959	WITHOUT_CLASSIFICATION	5.78454220421375E-6	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999703542448504	WITHOUT_CLASSIFICATION	2.964575514966561E-5	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999923831175788	WITHOUT_CLASSIFICATION	7.616882421211658E-6	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.9997454149407751	WITHOUT_CLASSIFICATION	2.5458505922498276E-4	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999951982945433	WITHOUT_CLASSIFICATION	4.8017054567149056E-6	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9794818555799911	WITHOUT_CLASSIFICATION	0.020518144420008818	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999942154577959	WITHOUT_CLASSIFICATION	5.78454220421375E-6	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999942154577959	WITHOUT_CLASSIFICATION	5.78454220421375E-6	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999679876362727	WITHOUT_CLASSIFICATION	3.201236372726962E-5	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999770296409451	WITHOUT_CLASSIFICATION	2.2970359054842053E-5	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999841878491192	WITHOUT_CLASSIFICATION	1.5812150880815122E-5	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999106945467497	WITHOUT_CLASSIFICATION	8.930545325026993E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9998676140467141	WITHOUT_CLASSIFICATION	1.3238595328593275E-4	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999578183382365	WITHOUT_CLASSIFICATION	4.218166176350437E-5	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999186963250792	WITHOUT_CLASSIFICATION	8.130367492075571E-5	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999874517931906	WITHOUT_CLASSIFICATION	1.2548206809264811E-5	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999987139825062	WITHOUT_CLASSIFICATION	1.2860174937792287E-6	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938692895409	WITHOUT_CLASSIFICATION	6.130710459040542E-6	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9997753522860447	WITHOUT_CLASSIFICATION	2.2464771395528516E-4	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999514735150247	WITHOUT_CLASSIFICATION	4.8526484975248304E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9978906776927282	WITHOUT_CLASSIFICATION	0.002109322307271866	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9978906776927282	WITHOUT_CLASSIFICATION	0.002109322307271866	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998613649657835	WITHOUT_CLASSIFICATION	1.3863503421653362E-4	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998613649657835	WITHOUT_CLASSIFICATION	1.3863503421653362E-4	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982344268802021	WITHOUT_CLASSIFICATION	0.0017655731197978514	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959194405545	WITHOUT_CLASSIFICATION	4.080559445533058E-6	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999716722012	WITHOUT_CLASSIFICATION	2.8327798747719372E-8	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9958699506866977	WITHOUT_CLASSIFICATION	0.004130049313302319	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9957553144553273	WITHOUT_CLASSIFICATION	0.00424468554467277	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999337142084025	WITHOUT_CLASSIFICATION	6.628579159755378E-5	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996611952304505	WITHOUT_CLASSIFICATION	3.388047695494556E-4	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934199333675	WITHOUT_CLASSIFICATION	6.5800666324559265E-6	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999973148834378	WITHOUT_CLASSIFICATION	2.6851165623384838E-6	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9999982912032908	WITHOUT_CLASSIFICATION	1.7087967092089542E-6	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999997088546911	WITHOUT_CLASSIFICATION	2.911453088149934E-7	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998119800886399	WITHOUT_CLASSIFICATION	1.880199113601554E-4	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9994723498665993	WITHOUT_CLASSIFICATION	5.276501334007511E-4	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999418250701447	WITHOUT_CLASSIFICATION	5.817492985530933E-5	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999945146130688	WITHOUT_CLASSIFICATION	5.485386931304416E-6	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999906110010414	WITHOUT_CLASSIFICATION	9.388998958717335E-6	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999906110010414	WITHOUT_CLASSIFICATION	9.388998958717335E-6	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999906110010414	WITHOUT_CLASSIFICATION	9.388998958717335E-6	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9998734775515428	WITHOUT_CLASSIFICATION	1.2652244845728252E-4	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.9999911221039138	WITHOUT_CLASSIFICATION	8.877896086302363E-6	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999761588151	WITHOUT_CLASSIFICATION	2.3841184851422646E-8	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9996559159953414	WITHOUT_CLASSIFICATION	3.4408400465858936E-4	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987013070912945	WITHOUT_CLASSIFICATION	0.001298692908705535	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988113921130658	WITHOUT_CLASSIFICATION	0.0011886078869343035	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999993239953912	WITHOUT_CLASSIFICATION	6.760046087953215E-6	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.6092621935443665	WITHOUT_CLASSIFICATION	0.3907378064556335	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999482434104174	WITHOUT_CLASSIFICATION	5.1756589582614315E-5	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999538376145607	WITHOUT_CLASSIFICATION	4.616238543938951E-5	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999975648219319	WITHOUT_CLASSIFICATION	2.435178067984491E-6	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9997794399589373	WITHOUT_CLASSIFICATION	2.2056004106263974E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999843226388511	WITHOUT_CLASSIFICATION	1.56773611489685E-5	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999988522491564	WITHOUT_CLASSIFICATION	1.1477508435764575E-6	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9993766499203728	WITHOUT_CLASSIFICATION	6.23350079627253E-4	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.99999970385417	WITHOUT_CLASSIFICATION	2.9614583002601956E-7	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999964969426783	WITHOUT_CLASSIFICATION	3.503057321546665E-6	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9998886677956301	WITHOUT_CLASSIFICATION	1.1133220436994387E-4	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9998939142315073	WITHOUT_CLASSIFICATION	1.060857684927562E-4	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999955421886254	WITHOUT_CLASSIFICATION	4.457811374508862E-6	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.999999576568526	WITHOUT_CLASSIFICATION	4.234314739588335E-7	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999925392906334	WITHOUT_CLASSIFICATION	7.460709366570501E-6	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9998342442499696	WITHOUT_CLASSIFICATION	1.657557500303163E-4	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999997937345736	WITHOUT_CLASSIFICATION	2.0626542636790162E-7	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999748288753206	WITHOUT_CLASSIFICATION	2.51711246793974E-4	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9990899496932015	WITHOUT_CLASSIFICATION	9.100503067984122E-4	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999994516263263	WITHOUT_CLASSIFICATION	5.483736737552408E-7	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.9999391547663357	WITHOUT_CLASSIFICATION	6.084523366428611E-5	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999790796602	WITHOUT_CLASSIFICATION	2.09203397730505E-8	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999988000120895	WITHOUT_CLASSIFICATION	1.199987910492158E-6	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999021933653007	WITHOUT_CLASSIFICATION	9.780663469918391E-5	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999844890584044	WITHOUT_CLASSIFICATION	1.5510941595635865E-5	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999775138957243	WITHOUT_CLASSIFICATION	2.2486104275772944E-5	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.5089570964022592	WITHOUT_CLASSIFICATION	0.49104290359774083	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999882331630299	WITHOUT_CLASSIFICATION	1.1766836970177454E-5	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9996714571198555	WITHOUT_CLASSIFICATION	3.285428801445216E-4	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999910120517416	WITHOUT_CLASSIFICATION	8.987948258431465E-6	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.9997960110351267	WITHOUT_CLASSIFICATION	2.0398896487323198E-4	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999975734078609	WITHOUT_CLASSIFICATION	2.4265921392073555E-6	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.9997231798606598	WITHOUT_CLASSIFICATION	2.7682013934011545E-4	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9998702654625157	WITHOUT_CLASSIFICATION	1.2973453748431365E-4	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999999204376722	WITHOUT_CLASSIFICATION	7.95623279280943E-8	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.6411699638021922	WITHOUT_CLASSIFICATION	0.3588300361978079	IMPLEMENTATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.998657212214919	WITHOUT_CLASSIFICATION	0.0013427877850811026	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999505675708906	WITHOUT_CLASSIFICATION	4.9432429109270066E-5	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999905200747374	WITHOUT_CLASSIFICATION	9.479925262558364E-6	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.9999987654093316	WITHOUT_CLASSIFICATION	1.2345906683679463E-6	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999892037343612	WITHOUT_CLASSIFICATION	1.0796265638795457E-5	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9991449790622307	WITHOUT_CLASSIFICATION	8.550209377692181E-4	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999543603414861	WITHOUT_CLASSIFICATION	4.5639658513922355E-5	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999906351210058	WITHOUT_CLASSIFICATION	9.36487899412651E-6	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9997740844453208	WITHOUT_CLASSIFICATION	2.259155546791601E-4	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999553135408993	WITHOUT_CLASSIFICATION	4.468645910070421E-4	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998091082660738	WITHOUT_CLASSIFICATION	1.908917339260566E-4	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9995479117439134	WITHOUT_CLASSIFICATION	4.520882560865562E-4	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.9999697135615587	WITHOUT_CLASSIFICATION	3.028643844123886E-5	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9986101428843314	WITHOUT_CLASSIFICATION	0.0013898571156685609	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.9999828301098684	WITHOUT_CLASSIFICATION	1.7169890131611202E-5	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999989791868741	WITHOUT_CLASSIFICATION	1.0208131258936622E-6	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9997986126865162	WITHOUT_CLASSIFICATION	2.0138731348378909E-4	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999933468549365	WITHOUT_CLASSIFICATION	6.65314506354147E-6	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999991808876106	WITHOUT_CLASSIFICATION	8.19112389320153E-7	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999855043107	WITHOUT_CLASSIFICATION	1.4495689257559685E-8	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999996716009947	WITHOUT_CLASSIFICATION	3.283990053508496E-7	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999998740074728	WITHOUT_CLASSIFICATION	1.2599252714537265E-7	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999720921092082	WITHOUT_CLASSIFICATION	2.790789079175087E-5	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999983839958583	WITHOUT_CLASSIFICATION	1.6160041418298834E-6	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999967426508531	WITHOUT_CLASSIFICATION	3.2573491468317363E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996559159953414	WITHOUT_CLASSIFICATION	3.4408400465858936E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996559159953414	WITHOUT_CLASSIFICATION	3.4408400465858936E-4	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999973874976557	WITHOUT_CLASSIFICATION	2.612502344363661E-6	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999817633393111	WITHOUT_CLASSIFICATION	1.82366606888515E-5	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999995288740045	WITHOUT_CLASSIFICATION	4.711259955138137E-7	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999990780407965	WITHOUT_CLASSIFICATION	9.21959203539725E-7	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9998983946935731	WITHOUT_CLASSIFICATION	1.0160530642692687E-4	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9997155433204208	WITHOUT_CLASSIFICATION	2.844566795792363E-4	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999994211349678	WITHOUT_CLASSIFICATION	5.788650322641216E-7	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999981122980816	WITHOUT_CLASSIFICATION	1.8877019184275144E-6	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.999952002199782	WITHOUT_CLASSIFICATION	4.79978002180016E-5	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999982031426018	WITHOUT_CLASSIFICATION	1.7968573981486375E-6	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999994463266246	WITHOUT_CLASSIFICATION	5.53673375462314E-7	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999712575112248	WITHOUT_CLASSIFICATION	2.8742488775225643E-5	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.9999961457449563	WITHOUT_CLASSIFICATION	3.854255043673961E-6	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999998589652718	WITHOUT_CLASSIFICATION	1.4103472835420476E-7	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999945948442281	WITHOUT_CLASSIFICATION	5.405155771811031E-6	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.8034176163897859	WITHOUT_CLASSIFICATION	0.19658238361021405	IMPLEMENTATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999966173535859	WITHOUT_CLASSIFICATION	3.3826464140705774E-6	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9247392681477137	WITHOUT_CLASSIFICATION	0.07526073185228638	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.7933331549049283	WITHOUT_CLASSIFICATION	0.20666684509507174	IMPLEMENTATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9998824998880437	WITHOUT_CLASSIFICATION	1.1750011195622886E-4	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9999935045530957	WITHOUT_CLASSIFICATION	6.495446904281112E-6	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999826218625353	WITHOUT_CLASSIFICATION	1.7378137464709722E-5	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999861758583133	WITHOUT_CLASSIFICATION	1.3824141686833315E-5	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9913178219725882	WITHOUT_CLASSIFICATION	0.008682178027411743	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999992950147042	WITHOUT_CLASSIFICATION	7.049852958185761E-7	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.999976240440364	WITHOUT_CLASSIFICATION	2.3759559635915643E-5	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999984924645012	WITHOUT_CLASSIFICATION	1.507535498824636E-6	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999970522300171	WITHOUT_CLASSIFICATION	2.947769982849588E-6	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999476855668172	WITHOUT_CLASSIFICATION	5.231443318272275E-5	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999404967402448	WITHOUT_CLASSIFICATION	5.950325975513739E-5	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999980117098305	WITHOUT_CLASSIFICATION	1.9882901694769747E-6	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999629233507512	WITHOUT_CLASSIFICATION	3.707664924872976E-5	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.999996368127189	WITHOUT_CLASSIFICATION	3.6318728110204237E-6	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.9998732666484224	WITHOUT_CLASSIFICATION	1.2673335157762283E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9992725131401539	WITHOUT_CLASSIFICATION	7.274868598460126E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9992725131401539	WITHOUT_CLASSIFICATION	7.274868598460126E-4	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.99981761672625	WITHOUT_CLASSIFICATION	1.8238327374995802E-4	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9990534097467149	WITHOUT_CLASSIFICATION	9.465902532851901E-4	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999997640590315	WITHOUT_CLASSIFICATION	2.3594096850479288E-7	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999940480752959	WITHOUT_CLASSIFICATION	5.951924704097878E-6	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999911044125545	WITHOUT_CLASSIFICATION	8.895587445601017E-6	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999883976756964	WITHOUT_CLASSIFICATION	1.1602324303543372E-5	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999856253793749	WITHOUT_CLASSIFICATION	1.4374620625165197E-5	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999980962989959	WITHOUT_CLASSIFICATION	1.9037010040983385E-6	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999884211584932	WITHOUT_CLASSIFICATION	1.1578841506886099E-5	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9991985283197935	WITHOUT_CLASSIFICATION	8.014716802064372E-4	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999988669169784	WITHOUT_CLASSIFICATION	1.1330830215653953E-6	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999988016680776	WITHOUT_CLASSIFICATION	1.198331922369951E-6	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999238262769939	WITHOUT_CLASSIFICATION	7.617372300600517E-5	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999993494304621	WITHOUT_CLASSIFICATION	6.50569537942163E-7	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999615706527936	WITHOUT_CLASSIFICATION	3.842934720648238E-5	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999110597478897	WITHOUT_CLASSIFICATION	8.894025211020814E-5	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.8918806195412455	IMPLEMENTATION	0.10811938045875445	WITHOUT_CLASSIFICATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.8918806195412455	IMPLEMENTATION	0.10811938045875445	WITHOUT_CLASSIFICATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999891533166719	WITHOUT_CLASSIFICATION	1.0846683328076178E-5	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999926438498201	WITHOUT_CLASSIFICATION	7.356150179838896E-6	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999590513121052	WITHOUT_CLASSIFICATION	4.094868789484205E-5	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999997514042024	WITHOUT_CLASSIFICATION	2.4859579755619825E-7	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998702329978412	WITHOUT_CLASSIFICATION	1.2976700215878778E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998119800886399	WITHOUT_CLASSIFICATION	1.880199113601554E-4	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9993885307667435	WITHOUT_CLASSIFICATION	6.114692332564965E-4	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999992857842844	WITHOUT_CLASSIFICATION	7.142157156428055E-7	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999947178421106	WITHOUT_CLASSIFICATION	5.282157889418925E-6	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999941360493839	WITHOUT_CLASSIFICATION	5.863950616066166E-6	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9999044490153516	WITHOUT_CLASSIFICATION	9.55509846483778E-5	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9999044490153516	WITHOUT_CLASSIFICATION	9.55509846483778E-5	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999209962002061	WITHOUT_CLASSIFICATION	7.900379979380969E-5	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999944445995432	WITHOUT_CLASSIFICATION	5.555400456793426E-5	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999844248048496	WITHOUT_CLASSIFICATION	1.5575195150341988E-5	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999705968556519	WITHOUT_CLASSIFICATION	2.9403144348128797E-5	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.999875851614852	WITHOUT_CLASSIFICATION	1.2414838514802367E-4	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999981365780316	WITHOUT_CLASSIFICATION	1.8634219683488407E-6	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999978336682718	WITHOUT_CLASSIFICATION	2.166331728162779E-6	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9991061774721052	WITHOUT_CLASSIFICATION	8.938225278947106E-4	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9992142107688583	WITHOUT_CLASSIFICATION	7.85789231141601E-4	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999451284958055	WITHOUT_CLASSIFICATION	5.4871504194393874E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999995698752645	WITHOUT_CLASSIFICATION	4.301247354880343E-6	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9987152634844737	WITHOUT_CLASSIFICATION	0.0012847365155262752	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9992627884983114	WITHOUT_CLASSIFICATION	7.372115016886419E-4	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999736105206205	WITHOUT_CLASSIFICATION	2.6389479379476735E-5	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999013823856399	WITHOUT_CLASSIFICATION	9.861761436012794E-5	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999655256400642	WITHOUT_CLASSIFICATION	3.447435993573183E-5	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999991039186872	WITHOUT_CLASSIFICATION	8.960813128844599E-7	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999896388303	WITHOUT_CLASSIFICATION	1.0361169670467009E-8	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999984736865455	WITHOUT_CLASSIFICATION	1.5263134545124867E-6	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.9999779272156027	WITHOUT_CLASSIFICATION	2.207278439731819E-5	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.99999034272835	WITHOUT_CLASSIFICATION	9.657271650122324E-6	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9990991793731031	WITHOUT_CLASSIFICATION	9.008206268968055E-4	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999955861777103	WITHOUT_CLASSIFICATION	4.413822289656731E-6	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999479879101664	WITHOUT_CLASSIFICATION	5.201208983364011E-5	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999795683595777	WITHOUT_CLASSIFICATION	2.0431640422207247E-5	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9997335012824617	WITHOUT_CLASSIFICATION	2.6649871753822864E-4	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999835925046542	WITHOUT_CLASSIFICATION	1.6407495345840538E-5	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9998131523503109	WITHOUT_CLASSIFICATION	1.8684764968919033E-4	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.6133534286665303	WITHOUT_CLASSIFICATION	0.3866465713334697	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999992353180955	WITHOUT_CLASSIFICATION	7.646819045006439E-7	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9810350939041306	WITHOUT_CLASSIFICATION	0.01896490609586938	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999994920757773	WITHOUT_CLASSIFICATION	5.0792422269860015E-6	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999178909489419	WITHOUT_CLASSIFICATION	8.210905105813385E-5	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9999983453203273	WITHOUT_CLASSIFICATION	1.6546796727176929E-6	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999975860904577	WITHOUT_CLASSIFICATION	2.4139095422116735E-6	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999720290176028	WITHOUT_CLASSIFICATION	2.797098239721186E-5	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999503887080614	WITHOUT_CLASSIFICATION	4.961129193851743E-5	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999388354976564	WITHOUT_CLASSIFICATION	6.116450234363225E-5	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.999996482952652	WITHOUT_CLASSIFICATION	3.5170473480924627E-6	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.999996482952652	WITHOUT_CLASSIFICATION	3.5170473480924627E-6	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999896693868893	WITHOUT_CLASSIFICATION	1.0330613110737892E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999769332561	WITHOUT_CLASSIFICATION	2.3066743893049874E-7	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999945960572951	WITHOUT_CLASSIFICATION	5.40394270494064E-6	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.9999914015181953	WITHOUT_CLASSIFICATION	8.598481804673377E-6	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999549724960566	WITHOUT_CLASSIFICATION	4.502750394337151E-5	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999983019265274	WITHOUT_CLASSIFICATION	1.6980734726234461E-6	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999995362152	WITHOUT_CLASSIFICATION	4.6378471708562697E-10	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.999975294851202	WITHOUT_CLASSIFICATION	2.470514879809144E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999896693868893	WITHOUT_CLASSIFICATION	1.0330613110737892E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999769332561	WITHOUT_CLASSIFICATION	2.3066743893049874E-7	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999268966196142	WITHOUT_CLASSIFICATION	7.310338038585382E-5	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9815612642060529	WITHOUT_CLASSIFICATION	0.01843873579394711	IMPLEMENTATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999968295980016	WITHOUT_CLASSIFICATION	3.1704019983741175E-6	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9996488779856778	WITHOUT_CLASSIFICATION	3.511220143221718E-4	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999939028441253	WITHOUT_CLASSIFICATION	6.097155874733049E-6	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999931534599237	WITHOUT_CLASSIFICATION	6.8465400762319605E-6	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999906016829261	WITHOUT_CLASSIFICATION	9.398317073849329E-6	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9987398188755958	WITHOUT_CLASSIFICATION	0.0012601811244042226	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999874531583822	WITHOUT_CLASSIFICATION	1.2546841617836308E-5	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9018505854026924	WITHOUT_CLASSIFICATION	0.0981494145973077	IMPLEMENTATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999998932632	WITHOUT_CLASSIFICATION	1.0673690209334228E-10	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9018505854026924	WITHOUT_CLASSIFICATION	0.0981494145973077	IMPLEMENTATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.999999622925198	WITHOUT_CLASSIFICATION	3.770748020537813E-7	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999945649145788	WITHOUT_CLASSIFICATION	5.435085421206618E-6	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999992780821516	WITHOUT_CLASSIFICATION	7.219178483963745E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998121638674295	WITHOUT_CLASSIFICATION	1.878361325704434E-4	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9997371875017261	WITHOUT_CLASSIFICATION	2.6281249827382624E-4	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9987398188755958	WITHOUT_CLASSIFICATION	0.0012601811244042226	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9987398188755958	WITHOUT_CLASSIFICATION	0.0012601811244042226	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999994938076313	WITHOUT_CLASSIFICATION	5.061923687498746E-7	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999995711165166	WITHOUT_CLASSIFICATION	4.288834834166024E-7	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999877781139092	WITHOUT_CLASSIFICATION	1.2221886090758233E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999990649788058	WITHOUT_CLASSIFICATION	9.350211942044414E-6	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999298236413937	WITHOUT_CLASSIFICATION	7.017635860638021E-5	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999998724079656	WITHOUT_CLASSIFICATION	1.2759203439814108E-6	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.8708510603380323	IMPLEMENTATION	0.1291489396619677	WITHOUT_CLASSIFICATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999971195151512	WITHOUT_CLASSIFICATION	2.880484848709958E-6	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999987383564362	WITHOUT_CLASSIFICATION	1.2616435637485493E-6	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9978661531413757	WITHOUT_CLASSIFICATION	0.0021338468586242208	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.999949428720294	WITHOUT_CLASSIFICATION	5.057127970602015E-5	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.9999947441034224	WITHOUT_CLASSIFICATION	5.255896577674124E-6	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999984602162267	WITHOUT_CLASSIFICATION	1.5397837733565714E-6	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.9988273786716756	WITHOUT_CLASSIFICATION	0.0011726213283243662	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9999949874960093	WITHOUT_CLASSIFICATION	5.012503990678052E-6	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9998607112181321	WITHOUT_CLASSIFICATION	1.39288781867927E-4	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999470856712442	WITHOUT_CLASSIFICATION	5.2914328755701666E-5	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999807038678514	WITHOUT_CLASSIFICATION	1.9296132148516196E-5	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9994885813342599	WITHOUT_CLASSIFICATION	5.114186657402011E-4	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999988764736012	WITHOUT_CLASSIFICATION	1.1235263987747234E-6	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9994861968513434	WITHOUT_CLASSIFICATION	5.13803148656577E-4	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9993233591016867	WITHOUT_CLASSIFICATION	6.766408983133782E-4	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9993379701274437	WITHOUT_CLASSIFICATION	6.620298725561854E-4	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9957487503279273	WITHOUT_CLASSIFICATION	0.004251249672072662	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9998794141671283	WITHOUT_CLASSIFICATION	1.2058583287161827E-4	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998766181605379	WITHOUT_CLASSIFICATION	1.2338183946210217E-4	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999490921823692	WITHOUT_CLASSIFICATION	5.090781763083882E-5	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999533633379362	WITHOUT_CLASSIFICATION	4.66366620638603E-5	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.960441542906018	WITHOUT_CLASSIFICATION	0.039558457093982	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9997487662758464	WITHOUT_CLASSIFICATION	2.512337241536663E-4	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9995490902934082	WITHOUT_CLASSIFICATION	4.50909706591706E-4	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9983993722844632	WITHOUT_CLASSIFICATION	0.0016006277155368935	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999632076156467	WITHOUT_CLASSIFICATION	3.679238435336748E-5	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999971195151512	WITHOUT_CLASSIFICATION	2.880484848709958E-6	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9998664946738199	WITHOUT_CLASSIFICATION	1.3350532618008185E-4	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.9877013088852439	WITHOUT_CLASSIFICATION	0.012298691114756162	IMPLEMENTATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9948151539106015	WITHOUT_CLASSIFICATION	0.005184846089398393	IMPLEMENTATION
an assertion	WITHOUT_CLASSIFICATION	0.9999994976068425	WITHOUT_CLASSIFICATION	5.023931575075193E-7	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9992556996883689	WITHOUT_CLASSIFICATION	7.443003116311992E-4	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.9999908918655	WITHOUT_CLASSIFICATION	9.108134500004851E-6	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999990649788058	WITHOUT_CLASSIFICATION	9.350211942044414E-6	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999990649788058	WITHOUT_CLASSIFICATION	9.350211942044414E-6	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9992449635861241	WITHOUT_CLASSIFICATION	7.550364138758169E-4	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.999859555500636	WITHOUT_CLASSIFICATION	1.4044449936412136E-4	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.9999940264052597	WITHOUT_CLASSIFICATION	5.973594740363303E-6	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999412489621561	WITHOUT_CLASSIFICATION	5.875103784394358E-5	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.743814695555739	WITHOUT_CLASSIFICATION	0.256185304444261	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999971244199108	WITHOUT_CLASSIFICATION	2.8755800892293733E-6	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9997388141548017	WITHOUT_CLASSIFICATION	2.611858451982497E-4	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999989054226401	WITHOUT_CLASSIFICATION	1.0945773598421341E-6	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999991073270001	WITHOUT_CLASSIFICATION	8.926729998487434E-7	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998602283178692	WITHOUT_CLASSIFICATION	1.397716821307921E-4	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998704101816	WITHOUT_CLASSIFICATION	1.2958981836460688E-7	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.99999850962429	WITHOUT_CLASSIFICATION	1.4903757099282552E-6	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999768145784896	WITHOUT_CLASSIFICATION	2.3185421510397086E-4	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999896693868893	WITHOUT_CLASSIFICATION	1.0330613110737892E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998704101816	WITHOUT_CLASSIFICATION	1.2958981836460688E-7	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999975324907904	WITHOUT_CLASSIFICATION	2.467509209573275E-6	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.99999549298118	WITHOUT_CLASSIFICATION	4.50701882002772E-6	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.999996728908147	WITHOUT_CLASSIFICATION	3.271091853167184E-6	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.8714496070303621	IMPLEMENTATION	0.1285503929696379	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999768145784896	WITHOUT_CLASSIFICATION	2.3185421510397086E-4	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.99999993605806	WITHOUT_CLASSIFICATION	6.394193994648589E-8	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999144608815	WITHOUT_CLASSIFICATION	8.553911841364202E-8	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999987998945928	WITHOUT_CLASSIFICATION	1.2001054071281417E-6	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.999999999965389	WITHOUT_CLASSIFICATION	3.461103860400527E-11	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9991500135783377	WITHOUT_CLASSIFICATION	8.499864216622404E-4	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999876978488776	WITHOUT_CLASSIFICATION	1.2302151122363021E-5	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999410752042	WITHOUT_CLASSIFICATION	5.892479575249901E-8	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9976291836638759	WITHOUT_CLASSIFICATION	0.002370816336124028	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999833069857197	WITHOUT_CLASSIFICATION	1.6693014280381816E-5	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999970992790627	WITHOUT_CLASSIFICATION	2.9007209373302065E-6	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999960921630926	WITHOUT_CLASSIFICATION	3.907836907422446E-6	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9982945207111042	WITHOUT_CLASSIFICATION	0.0017054792888957354	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998704101816	WITHOUT_CLASSIFICATION	1.2958981836460688E-7	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.99999993605806	WITHOUT_CLASSIFICATION	6.394193994648589E-8	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999987998945928	WITHOUT_CLASSIFICATION	1.2001054071281417E-6	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999881074729061	WITHOUT_CLASSIFICATION	1.1892527093802137E-5	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999177138745923	WITHOUT_CLASSIFICATION	8.22861254077279E-5	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.9999991696684931	WITHOUT_CLASSIFICATION	8.303315068657064E-7	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999768145784896	WITHOUT_CLASSIFICATION	2.3185421510397086E-4	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.999999094522177	WITHOUT_CLASSIFICATION	9.05477823042339E-7	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9996328337877991	WITHOUT_CLASSIFICATION	3.6716621220089595E-4	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9991877034004224	WITHOUT_CLASSIFICATION	8.122965995776237E-4	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9989590385202974	WITHOUT_CLASSIFICATION	0.0010409614797025689	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9976291836638759	WITHOUT_CLASSIFICATION	0.002370816336124028	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999975324907904	WITHOUT_CLASSIFICATION	2.467509209573275E-6	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.99797672599936	WITHOUT_CLASSIFICATION	0.0020232740006398795	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999993441517168	WITHOUT_CLASSIFICATION	6.558482832061249E-7	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.999968871894378	WITHOUT_CLASSIFICATION	3.1128105621974265E-5	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999788876292487	WITHOUT_CLASSIFICATION	2.111237075127004E-5	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9991743095147425	WITHOUT_CLASSIFICATION	8.256904852574316E-4	IMPLEMENTATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999424140464365	WITHOUT_CLASSIFICATION	5.758595356348824E-5	IMPLEMENTATION
render the SQL	WITHOUT_CLASSIFICATION	0.9999149511376119	WITHOUT_CLASSIFICATION	8.504886238809124E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998121638674295	WITHOUT_CLASSIFICATION	1.878361325704434E-4	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999987992950022	WITHOUT_CLASSIFICATION	1.2007049977968431E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9929528856891077	WITHOUT_CLASSIFICATION	0.007047114310892352	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998057431082	WITHOUT_CLASSIFICATION	1.9425689183851584E-7	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999999700573733	WITHOUT_CLASSIFICATION	2.9942626687633376E-8	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999870036906	WITHOUT_CLASSIFICATION	1.2996309477794008E-8	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999388566477	WITHOUT_CLASSIFICATION	6.114335218366353E-8	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999999862727519	WITHOUT_CLASSIFICATION	1.3727248103687607E-7	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.9999901825248857	WITHOUT_CLASSIFICATION	9.817475114244653E-6	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999975981652194	WITHOUT_CLASSIFICATION	2.4018347806329195E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9989590385202974	WITHOUT_CLASSIFICATION	0.0010409614797025689	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9929528856891077	WITHOUT_CLASSIFICATION	0.007047114310892352	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9982467647790192	WITHOUT_CLASSIFICATION	0.0017532352209807486	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.9982795602104053	WITHOUT_CLASSIFICATION	0.0017204397895946597	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9998954692558559	WITHOUT_CLASSIFICATION	1.0453074414404423E-4	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9983686440224778	WITHOUT_CLASSIFICATION	0.0016313559775222542	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.9999942471429105	WITHOUT_CLASSIFICATION	5.75285708945508E-6	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999992266545548	WITHOUT_CLASSIFICATION	7.733454452017233E-7	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999766559106403	WITHOUT_CLASSIFICATION	2.3344089359775695E-5	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.9997892824961016	WITHOUT_CLASSIFICATION	2.1071750389839818E-4	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999290884119989	WITHOUT_CLASSIFICATION	7.091158800115597E-5	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999868497575296	WITHOUT_CLASSIFICATION	1.3150242470284171E-5	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999984199148463	WITHOUT_CLASSIFICATION	1.5800851537926134E-6	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999999895969423	WITHOUT_CLASSIFICATION	1.0403057708732342E-7	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999623965575933	WITHOUT_CLASSIFICATION	3.760344240657762E-5	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.9999876084714291	WITHOUT_CLASSIFICATION	1.2391528570891204E-5	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999996689985201	WITHOUT_CLASSIFICATION	3.310014798575728E-7	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998523947782	WITHOUT_CLASSIFICATION	1.4760522174464872E-7	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9998761812011131	WITHOUT_CLASSIFICATION	1.2381879888685203E-4	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999936646619353	WITHOUT_CLASSIFICATION	6.335338064771863E-6	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999996952910848	WITHOUT_CLASSIFICATION	3.047089151918676E-6	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999990769046729	WITHOUT_CLASSIFICATION	9.230953271358416E-7	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.9970321480465566	WITHOUT_CLASSIFICATION	0.002967851953443415	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999641675756149	WITHOUT_CLASSIFICATION	3.58324243851222E-5	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.999991697069676	WITHOUT_CLASSIFICATION	8.302930323860528E-6	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999996221995627	WITHOUT_CLASSIFICATION	3.778004373017081E-6	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999958464111492	WITHOUT_CLASSIFICATION	4.1535888506798E-6	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9326137240901377	WITHOUT_CLASSIFICATION	0.06738627590986236	IMPLEMENTATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999308888831221	WITHOUT_CLASSIFICATION	6.911111687795588E-5	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999936132590668	WITHOUT_CLASSIFICATION	6.386740933189496E-5	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9995753819595286	WITHOUT_CLASSIFICATION	4.2461804047139135E-4	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.8580557023070932	IMPLEMENTATION	0.1419442976929068	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999854396057	WITHOUT_CLASSIFICATION	1.4560394246500212E-8	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999946274789131	WITHOUT_CLASSIFICATION	5.372521086904286E-5	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999996202331763	WITHOUT_CLASSIFICATION	3.7976682370220317E-6	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999971449165519	WITHOUT_CLASSIFICATION	2.855083448154091E-6	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999989940147532	WITHOUT_CLASSIFICATION	1.0059852467471634E-6	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9999898825400436	WITHOUT_CLASSIFICATION	1.0117459956468537E-5	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999991165276174	WITHOUT_CLASSIFICATION	8.834723825570605E-7	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999930837133804	WITHOUT_CLASSIFICATION	6.916286619705323E-6	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9999898825400436	WITHOUT_CLASSIFICATION	1.0117459956468537E-5	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999989940147532	WITHOUT_CLASSIFICATION	1.0059852467471634E-6	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999991165276174	WITHOUT_CLASSIFICATION	8.834723825570605E-7	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.9999933883848865	WITHOUT_CLASSIFICATION	6.611615113402547E-6	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999984509283509	WITHOUT_CLASSIFICATION	1.5490716490225265E-6	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999977865465124	WITHOUT_CLASSIFICATION	2.2134534875963006E-6	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.999909666012264	WITHOUT_CLASSIFICATION	9.033398773585938E-5	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999878713496	WITHOUT_CLASSIFICATION	1.212865044171801E-8	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5720541434791451	WITHOUT_CLASSIFICATION	0.427945856520855	IMPLEMENTATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9989221012129992	WITHOUT_CLASSIFICATION	0.0010778987870008314	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998210840111549	WITHOUT_CLASSIFICATION	1.7891598884517952E-4	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999999070593884	WITHOUT_CLASSIFICATION	9.294061159236896E-7	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999994220255004	WITHOUT_CLASSIFICATION	5.779744995999881E-6	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.9999927536695155	WITHOUT_CLASSIFICATION	7.246330484515193E-6	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999998042659327	WITHOUT_CLASSIFICATION	1.9573406724091118E-7	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997373494780292	WITHOUT_CLASSIFICATION	2.626505219707488E-4	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.999909666012264	WITHOUT_CLASSIFICATION	9.033398773585938E-5	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9997407082737303	WITHOUT_CLASSIFICATION	2.5929172626967546E-4	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999995931253595	WITHOUT_CLASSIFICATION	4.0687464053098493E-7	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998670649685	WITHOUT_CLASSIFICATION	1.3293503152654038E-7	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999997771877017	WITHOUT_CLASSIFICATION	2.2281229819266357E-7	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.999997687043222	WITHOUT_CLASSIFICATION	2.3129567780638246E-6	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999963076281932	WITHOUT_CLASSIFICATION	3.692371806797929E-6	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9208776922508604	WITHOUT_CLASSIFICATION	0.07912230774913963	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.999999958276128	WITHOUT_CLASSIFICATION	4.172387193679354E-8	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999680248661705	WITHOUT_CLASSIFICATION	3.19751338294825E-5	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999948957620269	WITHOUT_CLASSIFICATION	5.104237973034569E-6	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999985480338535	WITHOUT_CLASSIFICATION	1.4519661465275885E-6	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999985480338535	WITHOUT_CLASSIFICATION	1.4519661465275885E-6	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999802533739	WITHOUT_CLASSIFICATION	1.9746626208944874E-8	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999802533739	WITHOUT_CLASSIFICATION	1.9746626208944874E-8	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.9769283982992341	WITHOUT_CLASSIFICATION	0.023071601700765998	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999998670649685	WITHOUT_CLASSIFICATION	1.3293503152654038E-7	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9995504281555944	WITHOUT_CLASSIFICATION	4.4957184440554864E-4	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999922187527274	WITHOUT_CLASSIFICATION	7.781247272595917E-6	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999984130700574	WITHOUT_CLASSIFICATION	1.5869299426329305E-6	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999984130700574	WITHOUT_CLASSIFICATION	1.5869299426329305E-6	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999980108504977	WITHOUT_CLASSIFICATION	1.989149502389487E-6	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999978584683099	WITHOUT_CLASSIFICATION	2.141531690020446E-6	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999967282983405	WITHOUT_CLASSIFICATION	3.27170165939093E-6	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.9999943956731795	WITHOUT_CLASSIFICATION	5.604326820546896E-6	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9998231460561025	WITHOUT_CLASSIFICATION	1.768539438974784E-4	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9996729491189588	WITHOUT_CLASSIFICATION	3.2705088104114814E-4	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999890123907653	WITHOUT_CLASSIFICATION	1.0987609234621853E-5	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999336187168382	WITHOUT_CLASSIFICATION	6.638128316189588E-5	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.9998561852589405	WITHOUT_CLASSIFICATION	1.438147410594652E-4	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999999352464639	WITHOUT_CLASSIFICATION	6.475353601475511E-8	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.99999231342281	WITHOUT_CLASSIFICATION	7.686577189891216E-6	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.9984316683983583	WITHOUT_CLASSIFICATION	0.0015683316016417185	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999986486403838	WITHOUT_CLASSIFICATION	1.351359616127389E-6	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9999737018049886	WITHOUT_CLASSIFICATION	2.6298195011415265E-5	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9980487576424358	WITHOUT_CLASSIFICATION	0.0019512423575642644	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999460739807304	WITHOUT_CLASSIFICATION	5.392601926958208E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998015807653851	WITHOUT_CLASSIFICATION	1.984192346150026E-4	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999567375647948	WITHOUT_CLASSIFICATION	4.326243520531211E-5	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9987675556412221	WITHOUT_CLASSIFICATION	0.0012324443587779055	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999940103868378	WITHOUT_CLASSIFICATION	5.989613162287834E-6	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9998710737926975	WITHOUT_CLASSIFICATION	1.289262073026269E-4	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999956497607417	WITHOUT_CLASSIFICATION	4.350239258262058E-6	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998971330113696	WITHOUT_CLASSIFICATION	1.0286698863047135E-4	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9998795122720814	WITHOUT_CLASSIFICATION	1.2048772791856883E-4	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9985035569654312	WITHOUT_CLASSIFICATION	0.0014964430345687078	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999988335094163	WITHOUT_CLASSIFICATION	1.1664905837712163E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9929528856891077	WITHOUT_CLASSIFICATION	0.007047114310892352	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999999895969423	WITHOUT_CLASSIFICATION	1.0403057708732342E-7	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999975818254343	WITHOUT_CLASSIFICATION	2.418174565811836E-6	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999986582010705	WITHOUT_CLASSIFICATION	1.3417989295497534E-6	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984879213513815	WITHOUT_CLASSIFICATION	0.0015120786486184804	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990991807726455	WITHOUT_CLASSIFICATION	9.008192273545356E-4	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999293378458143	WITHOUT_CLASSIFICATION	7.066215418571321E-5	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999293378458143	WITHOUT_CLASSIFICATION	7.066215418571321E-5	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999987460662272	WITHOUT_CLASSIFICATION	1.2539337728205222E-6	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9997750287507833	WITHOUT_CLASSIFICATION	2.249712492166673E-4	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.999997233447277	WITHOUT_CLASSIFICATION	2.7665527230094385E-6	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.999997233447277	WITHOUT_CLASSIFICATION	2.7665527230094385E-6	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9987629518524257	WITHOUT_CLASSIFICATION	0.0012370481475742206	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998579717635515	WITHOUT_CLASSIFICATION	1.4202823644846908E-4	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.999808795155869	WITHOUT_CLASSIFICATION	1.912048441309161E-4	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9998676140467141	WITHOUT_CLASSIFICATION	1.3238595328593275E-4	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.9999865070303501	WITHOUT_CLASSIFICATION	1.3492969649955856E-5	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999699653161219	WITHOUT_CLASSIFICATION	3.0034683878031564E-5	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.9980538124511468	WITHOUT_CLASSIFICATION	0.0019461875488532515	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999787513771233	WITHOUT_CLASSIFICATION	2.1248622876659922E-5	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999991511196885	WITHOUT_CLASSIFICATION	8.488803114738665E-7	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999991511196885	WITHOUT_CLASSIFICATION	8.488803114738665E-7	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999372695009163	WITHOUT_CLASSIFICATION	6.273049908368313E-5	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999971372638953	WITHOUT_CLASSIFICATION	2.8627361047798796E-6	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999971372638953	WITHOUT_CLASSIFICATION	2.8627361047798796E-6	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.99999972096065	WITHOUT_CLASSIFICATION	2.7903934989324655E-7	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999999694925538	WITHOUT_CLASSIFICATION	3.0507446202204856E-8	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.8870119477338192	WITHOUT_CLASSIFICATION	0.11298805226618078	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.9999530360174028	WITHOUT_CLASSIFICATION	4.6963982597204805E-5	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999552432363245	WITHOUT_CLASSIFICATION	4.475676367560915E-5	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999998990759178	WITHOUT_CLASSIFICATION	1.0092408209873592E-7	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.999965927241444	WITHOUT_CLASSIFICATION	3.407275855606544E-5	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9994285065745603	WITHOUT_CLASSIFICATION	5.714934254397615E-4	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999546108975	WITHOUT_CLASSIFICATION	4.538910249499865E-8	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9988314745382677	WITHOUT_CLASSIFICATION	0.0011685254617322977	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999989901852057	WITHOUT_CLASSIFICATION	1.0098147942752448E-6	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9998192981765933	WITHOUT_CLASSIFICATION	1.807018234067666E-4	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999117826060089	WITHOUT_CLASSIFICATION	8.821739399113777E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999117826060089	WITHOUT_CLASSIFICATION	8.821739399113777E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999117826060089	WITHOUT_CLASSIFICATION	8.821739399113777E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999117826060089	WITHOUT_CLASSIFICATION	8.821739399113777E-5	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999607824165233	WITHOUT_CLASSIFICATION	3.921758347673363E-5	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999584234072183	WITHOUT_CLASSIFICATION	4.157659278163134E-5	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999369815681571	WITHOUT_CLASSIFICATION	6.301843184279092E-5	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.9997158842045051	WITHOUT_CLASSIFICATION	2.841157954948949E-4	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999163306153833	WITHOUT_CLASSIFICATION	8.366938461671287E-5	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9998442806851988	WITHOUT_CLASSIFICATION	1.557193148011884E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998119800886399	WITHOUT_CLASSIFICATION	1.880199113601554E-4	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9991144734255808	WITHOUT_CLASSIFICATION	8.855265744192189E-4	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9988272793371398	WITHOUT_CLASSIFICATION	0.0011727206628602753	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998119800886399	WITHOUT_CLASSIFICATION	1.880199113601554E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998119800886399	WITHOUT_CLASSIFICATION	1.880199113601554E-4	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999518940975058	WITHOUT_CLASSIFICATION	4.810590249421736E-5	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.9999571061041134	WITHOUT_CLASSIFICATION	4.289389588667527E-5	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.999964986594452	WITHOUT_CLASSIFICATION	3.5013405548042615E-5	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995695006344	WITHOUT_CLASSIFICATION	4.3049936551339723E-7	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999979841785471	WITHOUT_CLASSIFICATION	2.0158214529620297E-6	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9996966280723688	WITHOUT_CLASSIFICATION	3.033719276311217E-4	IMPLEMENTATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999519830853831	WITHOUT_CLASSIFICATION	4.801691461681038E-5	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995695006344	WITHOUT_CLASSIFICATION	4.3049936551339723E-7	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.8524939715695524	WITHOUT_CLASSIFICATION	0.14750602843044763	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.999926971388681	WITHOUT_CLASSIFICATION	7.302861131894241E-5	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999964853645146	WITHOUT_CLASSIFICATION	3.514635485366298E-6	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999984459909026	WITHOUT_CLASSIFICATION	1.5540090974344918E-6	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9989663254795029	WITHOUT_CLASSIFICATION	0.0010336745204969958	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.999673167141347	WITHOUT_CLASSIFICATION	3.268328586529296E-4	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999952333858256	WITHOUT_CLASSIFICATION	4.766614174413369E-6	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999921169110042	WITHOUT_CLASSIFICATION	7.883088995833722E-6	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998288500741103	WITHOUT_CLASSIFICATION	1.7114992588979208E-4	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999997051480229	WITHOUT_CLASSIFICATION	2.9485197712980896E-7	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982717316738	WITHOUT_CLASSIFICATION	1.7282683261819377E-6	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999990572779537	WITHOUT_CLASSIFICATION	9.427220462827712E-7	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999593740876456	WITHOUT_CLASSIFICATION	4.062591235456398E-5	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9990225677363538	WITHOUT_CLASSIFICATION	9.774322636462581E-4	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999997863198077	WITHOUT_CLASSIFICATION	2.1368019240254113E-7	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999402553985911	WITHOUT_CLASSIFICATION	5.9744601408935316E-5	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999856791254	WITHOUT_CLASSIFICATION	1.4320874556420897E-8	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999740561096295	WITHOUT_CLASSIFICATION	2.5943890370416774E-5	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999969949974475	WITHOUT_CLASSIFICATION	3.005002552313206E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999740561096295	WITHOUT_CLASSIFICATION	2.5943890370416774E-5	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999885690915085	WITHOUT_CLASSIFICATION	1.1430908491488541E-5	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999991392275932	WITHOUT_CLASSIFICATION	8.607724067582483E-7	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999317049953848	WITHOUT_CLASSIFICATION	6.82950046153055E-5	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.999918078763539	WITHOUT_CLASSIFICATION	8.19212364610728E-5	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999739397333405	WITHOUT_CLASSIFICATION	2.6060266659541844E-5	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999841537455025	WITHOUT_CLASSIFICATION	1.584625449746419E-5	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999988128673071	WITHOUT_CLASSIFICATION	1.1871326928667657E-6	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999856791254	WITHOUT_CLASSIFICATION	1.4320874556420897E-8	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999969949974475	WITHOUT_CLASSIFICATION	3.005002552313206E-6	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999885690915085	WITHOUT_CLASSIFICATION	1.1430908491488541E-5	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999554296732512	WITHOUT_CLASSIFICATION	4.457032674883474E-5	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.999926483135926	WITHOUT_CLASSIFICATION	7.351686407391212E-5	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.999442814506778	WITHOUT_CLASSIFICATION	5.571854932219686E-4	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.99999965698832	WITHOUT_CLASSIFICATION	3.430116798757966E-7	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.9990965524860493	WITHOUT_CLASSIFICATION	9.034475139506796E-4	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9997382766629852	WITHOUT_CLASSIFICATION	2.6172333701481894E-4	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999984285908017	WITHOUT_CLASSIFICATION	1.5714091983353238E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998015807653851	WITHOUT_CLASSIFICATION	1.984192346150026E-4	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999991392275932	WITHOUT_CLASSIFICATION	8.607724067582483E-7	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999975600006503	WITHOUT_CLASSIFICATION	2.439999349715319E-6	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999985852741723	WITHOUT_CLASSIFICATION	1.4147258277049169E-6	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.999315279011912	WITHOUT_CLASSIFICATION	6.847209880879776E-4	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999976841485712	WITHOUT_CLASSIFICATION	2.315851428708595E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998015807653851	WITHOUT_CLASSIFICATION	1.984192346150026E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9929528856891077	WITHOUT_CLASSIFICATION	0.007047114310892352	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999998160874582	WITHOUT_CLASSIFICATION	1.8391254172926362E-7	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998015807653851	WITHOUT_CLASSIFICATION	1.984192346150026E-4	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999996299411581	WITHOUT_CLASSIFICATION	3.700588418620377E-7	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999662217745027	WITHOUT_CLASSIFICATION	3.377822549741316E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9929528856891077	WITHOUT_CLASSIFICATION	0.007047114310892352	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999889940492569	WITHOUT_CLASSIFICATION	1.1005950743200612E-5	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999753166492259	WITHOUT_CLASSIFICATION	2.4683350774071818E-5	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999985476576044	WITHOUT_CLASSIFICATION	1.4523423955963982E-6	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.9999895696551537	WITHOUT_CLASSIFICATION	1.0430344846329181E-5	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999999197754877	WITHOUT_CLASSIFICATION	8.022451234331574E-8	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999165837598802	WITHOUT_CLASSIFICATION	8.341624011976466E-5	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999993935517275	WITHOUT_CLASSIFICATION	6.064482726032151E-7	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.9999887342201852	WITHOUT_CLASSIFICATION	1.1265779814867217E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996559159953414	WITHOUT_CLASSIFICATION	3.4408400465858936E-4	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999999908630011	WITHOUT_CLASSIFICATION	9.136998897507483E-8	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.8870119477338192	WITHOUT_CLASSIFICATION	0.11298805226618078	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999829266524725	WITHOUT_CLASSIFICATION	1.707334752747235E-5	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999989651867977	WITHOUT_CLASSIFICATION	1.0348132023457898E-6	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999955726872543	WITHOUT_CLASSIFICATION	4.427312745750781E-6	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999954395199675	WITHOUT_CLASSIFICATION	4.560480032526124E-6	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999998924944938	WITHOUT_CLASSIFICATION	1.0750550619122422E-7	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999084540353228	WITHOUT_CLASSIFICATION	9.154596467718367E-5	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9971039820194224	WITHOUT_CLASSIFICATION	0.002896017980577598	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9994861134499848	WITHOUT_CLASSIFICATION	5.138865500150706E-4	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999996140100275	WITHOUT_CLASSIFICATION	3.859899725242213E-7	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999433185428	WITHOUT_CLASSIFICATION	5.6681457124256636E-8	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.8870119477338192	WITHOUT_CLASSIFICATION	0.11298805226618078	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999195103103381	WITHOUT_CLASSIFICATION	8.048968966188603E-5	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999955450451244	WITHOUT_CLASSIFICATION	4.454954875565326E-6	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999975250632462	WITHOUT_CLASSIFICATION	2.474936753668872E-6	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9998948366182586	WITHOUT_CLASSIFICATION	1.0516338174128997E-4	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9994114836015878	WITHOUT_CLASSIFICATION	5.885163984120982E-4	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999997720376287	WITHOUT_CLASSIFICATION	2.2796237137564747E-7	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9773406247281392	WITHOUT_CLASSIFICATION	0.02265937527186078	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999390370798598	WITHOUT_CLASSIFICATION	6.0962920140158325E-5	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9997219889974589	WITHOUT_CLASSIFICATION	2.780110025410691E-4	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999990163758475	WITHOUT_CLASSIFICATION	9.836241524675412E-7	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.678071015997178	WITHOUT_CLASSIFICATION	0.32192898400282194	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999786739558265	WITHOUT_CLASSIFICATION	2.1326044173566354E-5	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999765782215988	WITHOUT_CLASSIFICATION	2.342177840117959E-5	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.9998890825559463	WITHOUT_CLASSIFICATION	1.1091744405372299E-4	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9995881010054085	WITHOUT_CLASSIFICATION	4.1189899459143987E-4	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999989684712943	WITHOUT_CLASSIFICATION	1.0315287057578908E-6	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9453614885280948	WITHOUT_CLASSIFICATION	0.05463851147190514	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999978545776126	WITHOUT_CLASSIFICATION	2.1454223873436318E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9929528856891077	WITHOUT_CLASSIFICATION	0.007047114310892352	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999194578235037	WITHOUT_CLASSIFICATION	8.054217649627768E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9989849882685395	WITHOUT_CLASSIFICATION	0.0010150117314603963	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9989849882685395	WITHOUT_CLASSIFICATION	0.0010150117314603963	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9003082220386357	IMPLEMENTATION	0.09969177796136432	WITHOUT_CLASSIFICATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999165837598802	WITHOUT_CLASSIFICATION	8.341624011976466E-5	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9982296234075823	WITHOUT_CLASSIFICATION	0.0017703765924176724	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999879305184	WITHOUT_CLASSIFICATION	1.2069481582849351E-8	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9997535835100305	WITHOUT_CLASSIFICATION	2.464164899695264E-4	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.998794587231109	WITHOUT_CLASSIFICATION	0.0012054127688908853	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.9999963030210995	WITHOUT_CLASSIFICATION	3.6969789004268454E-6	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.9991346083434446	WITHOUT_CLASSIFICATION	8.653916565554274E-4	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999244115203	WITHOUT_CLASSIFICATION	7.558847973498923E-8	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999949890991	WITHOUT_CLASSIFICATION	5.010900920634993E-9	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.965735468922036	WITHOUT_CLASSIFICATION	0.03426453107796404	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.9999988713300213	WITHOUT_CLASSIFICATION	1.1286699786745135E-6	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999908969061759	WITHOUT_CLASSIFICATION	9.103093824034382E-6	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999764688247	WITHOUT_CLASSIFICATION	2.3531175322177386E-8	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999159372273	WITHOUT_CLASSIFICATION	8.406277269164098E-8	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9462158239689071	WITHOUT_CLASSIFICATION	0.053784176031092895	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999991700810323	WITHOUT_CLASSIFICATION	8.299189676806351E-7	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999993581321495	WITHOUT_CLASSIFICATION	6.418678505862645E-7	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999727518777	WITHOUT_CLASSIFICATION	2.7248122243666338E-8	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9764992920242014	WITHOUT_CLASSIFICATION	0.0235007079757985	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999821927955128	WITHOUT_CLASSIFICATION	1.7807204487185147E-5	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999950670745173	WITHOUT_CLASSIFICATION	4.932925482702153E-5	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999610189238846	WITHOUT_CLASSIFICATION	3.8981076115531994E-5	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999003215736	WITHOUT_CLASSIFICATION	9.967842634783218E-8	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9453614885280948	WITHOUT_CLASSIFICATION	0.05463851147190514	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999605084316674	WITHOUT_CLASSIFICATION	3.949156833260939E-5	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999990528333482	WITHOUT_CLASSIFICATION	9.471666518865406E-7	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999651190484	WITHOUT_CLASSIFICATION	3.488095160509761E-8	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999975713533216	WITHOUT_CLASSIFICATION	2.4286466783657434E-6	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9546989270813612	WITHOUT_CLASSIFICATION	0.04530107291863874	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999945545547818	WITHOUT_CLASSIFICATION	5.4454452182335345E-6	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999996147486327	WITHOUT_CLASSIFICATION	3.85251367131643E-7	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999795053092159	WITHOUT_CLASSIFICATION	2.0494690784152716E-5	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999968548973165	WITHOUT_CLASSIFICATION	3.1451026834014185E-6	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999890953514	WITHOUT_CLASSIFICATION	1.0904648606163473E-8	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.999988987888004	WITHOUT_CLASSIFICATION	1.1012111995920071E-5	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999107927337707	WITHOUT_CLASSIFICATION	8.920726622932549E-5	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999225599877996	WITHOUT_CLASSIFICATION	7.74400122005277E-5	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999995258410097	WITHOUT_CLASSIFICATION	4.741589902853121E-7	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999812816416	WITHOUT_CLASSIFICATION	1.87183583999277E-5	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9995310565870533	WITHOUT_CLASSIFICATION	4.6894341294663184E-4	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9995310565870533	WITHOUT_CLASSIFICATION	4.6894341294663184E-4	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9981871159057495	WITHOUT_CLASSIFICATION	0.0018128840942504398	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9993219924358979	WITHOUT_CLASSIFICATION	6.780075641021109E-4	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999997745573008	WITHOUT_CLASSIFICATION	2.2544269906198953E-7	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999997745573008	WITHOUT_CLASSIFICATION	2.2544269906198953E-7	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.9999990785321742	WITHOUT_CLASSIFICATION	9.214678258101253E-7	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999942792668653	WITHOUT_CLASSIFICATION	5.720733134692581E-6	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9800121521767784	WITHOUT_CLASSIFICATION	0.019987847823221692	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999996123128404	WITHOUT_CLASSIFICATION	3.8768715959137814E-7	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999631878075355	WITHOUT_CLASSIFICATION	3.681219246452425E-5	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999497512358996	WITHOUT_CLASSIFICATION	5.024876410034722E-5	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999998845524702	WITHOUT_CLASSIFICATION	1.1544752974273867E-7	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999998845524702	WITHOUT_CLASSIFICATION	1.1544752974273867E-7	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999425295897106	WITHOUT_CLASSIFICATION	5.74704102894286E-5	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999980836026158	WITHOUT_CLASSIFICATION	1.916397384243821E-6	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999986778627458	WITHOUT_CLASSIFICATION	1.3221372541553535E-6	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999957157524346	WITHOUT_CLASSIFICATION	4.2842475653267125E-6	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999957157524346	WITHOUT_CLASSIFICATION	4.2842475653267125E-6	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.9999995396000444	WITHOUT_CLASSIFICATION	4.6039995556528905E-7	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999748146282696	WITHOUT_CLASSIFICATION	2.5185371730358365E-5	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999916094758956	WITHOUT_CLASSIFICATION	8.39052410431524E-6	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9999910244931456	WITHOUT_CLASSIFICATION	8.975506854371594E-6	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999944362901951	WITHOUT_CLASSIFICATION	5.5637098048910145E-6	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999922219805342	WITHOUT_CLASSIFICATION	7.778019465910762E-6	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999899869941691	WITHOUT_CLASSIFICATION	1.0013005830930593E-5	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.9999928395922641	WITHOUT_CLASSIFICATION	7.160407735932755E-6	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.9999987899787807	WITHOUT_CLASSIFICATION	1.210021219346171E-6	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999806655343187	WITHOUT_CLASSIFICATION	1.93344656811655E-5	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999951641544	WITHOUT_CLASSIFICATION	4.835845595636603E-9	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9932108832326865	WITHOUT_CLASSIFICATION	0.00678911676731351	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.9986038442017379	WITHOUT_CLASSIFICATION	0.0013961557982621418	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9990674285386079	WITHOUT_CLASSIFICATION	9.325714613922678E-4	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.9996930570031922	WITHOUT_CLASSIFICATION	3.0694299680780236E-4	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999987208062607	WITHOUT_CLASSIFICATION	1.2791937391564606E-6	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9994121079932036	WITHOUT_CLASSIFICATION	5.878920067964359E-4	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999907740447888	WITHOUT_CLASSIFICATION	9.225955211167851E-6	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999828288331131	WITHOUT_CLASSIFICATION	1.717116688694526E-5	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999959887970882	WITHOUT_CLASSIFICATION	4.011202911844775E-6	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999993934073494	WITHOUT_CLASSIFICATION	6.065926505931937E-6	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9995283210831588	WITHOUT_CLASSIFICATION	4.7167891684122155E-4	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9387428048665555	WITHOUT_CLASSIFICATION	0.061257195133444575	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999963837863896	WITHOUT_CLASSIFICATION	3.6162136103979444E-6	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.99997327628605	WITHOUT_CLASSIFICATION	2.6723713949886795E-5	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.9999999873958444	WITHOUT_CLASSIFICATION	1.2604155457714543E-8	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999997496468761	WITHOUT_CLASSIFICATION	2.5035312388392384E-7	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998073222476755	WITHOUT_CLASSIFICATION	1.926777523244295E-4	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999990818347879	WITHOUT_CLASSIFICATION	9.181652119966834E-7	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999978358630669	WITHOUT_CLASSIFICATION	2.164136933075662E-6	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999947803452051	WITHOUT_CLASSIFICATION	5.219654794826148E-6	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999991606336986	WITHOUT_CLASSIFICATION	8.393663014510255E-7	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999989732851754	WITHOUT_CLASSIFICATION	1.026714824595603E-6	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999878464793791	WITHOUT_CLASSIFICATION	1.215352062081596E-5	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.999993088567718	WITHOUT_CLASSIFICATION	6.911432282010948E-6	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999407155225126	WITHOUT_CLASSIFICATION	5.928447748732368E-5	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.9999572869068001	WITHOUT_CLASSIFICATION	4.271309319982605E-5	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999998541757065	WITHOUT_CLASSIFICATION	1.45824293563333E-7	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999757425556514	WITHOUT_CLASSIFICATION	2.425744434860285E-5	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999733950307	WITHOUT_CLASSIFICATION	2.6604969352582062E-8	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999999777959276	WITHOUT_CLASSIFICATION	2.2204072408994124E-7	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.999991802539577	WITHOUT_CLASSIFICATION	8.197460423060974E-6	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.9999981275142437	WITHOUT_CLASSIFICATION	1.8724857562307524E-6	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.99998715325681	WITHOUT_CLASSIFICATION	1.2846743190111982E-5	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9999429973747079	WITHOUT_CLASSIFICATION	5.700262529214004E-5	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999992573813477	WITHOUT_CLASSIFICATION	7.42618652414969E-7	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.9999764094411336	WITHOUT_CLASSIFICATION	2.3590558866409747E-5	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999547937120744	WITHOUT_CLASSIFICATION	4.5206287925654477E-5	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999990104072617	WITHOUT_CLASSIFICATION	9.895927383238852E-7	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999997247980945	WITHOUT_CLASSIFICATION	2.752019054907128E-6	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999036035378539	WITHOUT_CLASSIFICATION	9.639646214615262E-5	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9984659060111171	WITHOUT_CLASSIFICATION	0.001534093988883026	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9944784272272451	WITHOUT_CLASSIFICATION	0.00552157277275483	IMPLEMENTATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999867767636441	WITHOUT_CLASSIFICATION	1.322323635578055E-5	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.999959845313849	WITHOUT_CLASSIFICATION	4.015468615100078E-5	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.994206985638607	WITHOUT_CLASSIFICATION	0.005793014361392971	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999517657593197	WITHOUT_CLASSIFICATION	4.823424068036057E-5	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999891001062874	WITHOUT_CLASSIFICATION	1.0899893712595996E-5	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999946860540713	WITHOUT_CLASSIFICATION	5.313945928774566E-6	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999866967232973	WITHOUT_CLASSIFICATION	1.3303276702630341E-5	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999962998482929	WITHOUT_CLASSIFICATION	3.7001517071791377E-6	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999962998482929	WITHOUT_CLASSIFICATION	3.7001517071791377E-6	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999671187237	WITHOUT_CLASSIFICATION	3.2881276256095724E-8	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999955694713956	WITHOUT_CLASSIFICATION	4.430528604453902E-6	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999998988348943	WITHOUT_CLASSIFICATION	1.0116510572509143E-7	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999016826169	WITHOUT_CLASSIFICATION	9.831738307244869E-8	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999971333942891	WITHOUT_CLASSIFICATION	2.8666057108866414E-6	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999646482869184	WITHOUT_CLASSIFICATION	3.535171308149552E-5	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999995891357257	WITHOUT_CLASSIFICATION	4.108642742475906E-7	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999976400805579	WITHOUT_CLASSIFICATION	2.3599194421477828E-6	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999978057405012	WITHOUT_CLASSIFICATION	2.19425949877579E-6	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999996434726561	WITHOUT_CLASSIFICATION	3.5652734391274134E-7	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999996467307629	WITHOUT_CLASSIFICATION	3.5326923710103372E-6	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999875587137284	WITHOUT_CLASSIFICATION	1.2441286271570991E-5	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999004695561	WITHOUT_CLASSIFICATION	9.95304439025259E-7	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9993790615950964	WITHOUT_CLASSIFICATION	6.209384049036361E-4	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999772732770049	WITHOUT_CLASSIFICATION	2.2726722995033785E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999772732770049	WITHOUT_CLASSIFICATION	2.2726722995033785E-5	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999864605476	WITHOUT_CLASSIFICATION	1.3539452463172202E-8	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999868017001056	WITHOUT_CLASSIFICATION	1.3198299894409907E-5	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999991694729907	WITHOUT_CLASSIFICATION	8.305270093061488E-7	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999997416241445	WITHOUT_CLASSIFICATION	2.5837585549906817E-7	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999974876022632	WITHOUT_CLASSIFICATION	2.512397736801531E-5	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999189120674312	WITHOUT_CLASSIFICATION	8.108793256882542E-5	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999766885047325	WITHOUT_CLASSIFICATION	2.3311495267441846E-5	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.9999835511145767	WITHOUT_CLASSIFICATION	1.6448885423334724E-5	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9991722513206636	WITHOUT_CLASSIFICATION	8.277486793364386E-4	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999835422302841	WITHOUT_CLASSIFICATION	1.6457769715906723E-5	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999947998055381	WITHOUT_CLASSIFICATION	5.20019446188624E-6	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999994915609703	WITHOUT_CLASSIFICATION	5.084390295611562E-7	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999967866850222	WITHOUT_CLASSIFICATION	3.2133149778770444E-6	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999290943639	WITHOUT_CLASSIFICATION	7.090563610683252E-8	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999916061584179	WITHOUT_CLASSIFICATION	8.393841582123818E-6	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999988478483726	WITHOUT_CLASSIFICATION	1.1521516273816207E-6	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999936851185317	WITHOUT_CLASSIFICATION	6.314881468279568E-6	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999874365065237	WITHOUT_CLASSIFICATION	1.2563493476439702E-5	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999991580775291	WITHOUT_CLASSIFICATION	8.419224708210809E-7	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999985317664707	WITHOUT_CLASSIFICATION	1.4682335293170365E-6	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999997719146253	WITHOUT_CLASSIFICATION	2.2808537473337502E-7	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999873096246	WITHOUT_CLASSIFICATION	1.2690375359657332E-8	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999672659441297	WITHOUT_CLASSIFICATION	3.273405587027319E-5	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999975722497777	WITHOUT_CLASSIFICATION	2.42775022233548E-6	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999971286347545	WITHOUT_CLASSIFICATION	2.8713652455105603E-6	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.9999917493750506	WITHOUT_CLASSIFICATION	8.250624949325477E-6	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999427172945751	WITHOUT_CLASSIFICATION	5.7282705424829524E-5	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9998925720736745	WITHOUT_CLASSIFICATION	1.074279263255728E-4	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999984510362419	WITHOUT_CLASSIFICATION	1.5489637582197813E-6	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.986837168062588	WITHOUT_CLASSIFICATION	0.013162831937411986	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999999046471113	WITHOUT_CLASSIFICATION	9.535288881460713E-8	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999994172437779	WITHOUT_CLASSIFICATION	5.827562220660869E-7	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999861541562587	WITHOUT_CLASSIFICATION	1.3845843741417254E-5	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999976242691434	WITHOUT_CLASSIFICATION	2.3757308566673668E-6	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999884048997617	WITHOUT_CLASSIFICATION	1.1595100238314231E-4	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999824471464049	WITHOUT_CLASSIFICATION	1.7552853595098053E-4	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9927257325693861	WITHOUT_CLASSIFICATION	0.007274267430613926	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999930379183777	WITHOUT_CLASSIFICATION	6.962081622278062E-6	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999899668910814	WITHOUT_CLASSIFICATION	1.0033108918580523E-5	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999998983476808	WITHOUT_CLASSIFICATION	1.0165231920336592E-7	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9990927854727456	WITHOUT_CLASSIFICATION	9.072145272544132E-4	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999960838103096	WITHOUT_CLASSIFICATION	3.916189690358234E-6	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997038359067736	WITHOUT_CLASSIFICATION	2.9616409322640464E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997038359067736	WITHOUT_CLASSIFICATION	2.9616409322640464E-4	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999044055021725	WITHOUT_CLASSIFICATION	9.559449782748222E-5	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999980735655142	WITHOUT_CLASSIFICATION	1.92643448592304E-6	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9959558968421476	WITHOUT_CLASSIFICATION	0.004044103157852393	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999994791265035	WITHOUT_CLASSIFICATION	5.208734964981882E-6	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999984600578758	WITHOUT_CLASSIFICATION	1.539942124216088E-6	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999928676087475	WITHOUT_CLASSIFICATION	7.132391252479713E-6	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9995294369498611	WITHOUT_CLASSIFICATION	4.7056305013896054E-4	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999991794129539	WITHOUT_CLASSIFICATION	8.205870459935919E-7	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999967692497912	WITHOUT_CLASSIFICATION	3.23075020882664E-6	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953804467172	WITHOUT_CLASSIFICATION	4.619553282717355E-6	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916266404746	WITHOUT_CLASSIFICATION	8.373359525387459E-6	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999942154577959	WITHOUT_CLASSIFICATION	5.78454220421375E-6	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999982911051999	WITHOUT_CLASSIFICATION	1.7088948001076684E-5	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9998233664556201	WITHOUT_CLASSIFICATION	1.7663354437986864E-4	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999652407941133	WITHOUT_CLASSIFICATION	3.475920588667977E-5	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9967160210556152	WITHOUT_CLASSIFICATION	0.0032839789443847864	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999941813752583	WITHOUT_CLASSIFICATION	5.8186247416953085E-6	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999997025032296	WITHOUT_CLASSIFICATION	2.974967704795179E-7	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999987306120335	WITHOUT_CLASSIFICATION	1.2693879664493832E-6	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9996823593769752	WITHOUT_CLASSIFICATION	3.1764062302475706E-4	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999996451250888	WITHOUT_CLASSIFICATION	3.548749112499421E-7	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999778082757	WITHOUT_CLASSIFICATION	2.219172437277167E-8	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9995100168949326	WITHOUT_CLASSIFICATION	4.899831050674628E-4	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9990984998856167	WITHOUT_CLASSIFICATION	9.015001143833668E-4	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999982040960592	WITHOUT_CLASSIFICATION	1.7959039407665474E-6	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9979026419223289	WITHOUT_CLASSIFICATION	0.002097358077671049	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9997382490171173	WITHOUT_CLASSIFICATION	2.617509828827152E-4	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999257101904	WITHOUT_CLASSIFICATION	7.428980966389147E-8	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999984971417278	WITHOUT_CLASSIFICATION	1.5028582721863306E-6	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.893482348941543	WITHOUT_CLASSIFICATION	0.10651765105845709	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9948236006534334	WITHOUT_CLASSIFICATION	0.005176399346566511	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9998644682992245	WITHOUT_CLASSIFICATION	1.3553170077559298E-4	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9997899894481659	WITHOUT_CLASSIFICATION	2.1001055183424782E-4	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999997529997695	WITHOUT_CLASSIFICATION	2.47000230500426E-7	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.99999766831289	WITHOUT_CLASSIFICATION	2.331687109842372E-6	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999995455022611	WITHOUT_CLASSIFICATION	4.544977389285136E-7	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999962226121112	WITHOUT_CLASSIFICATION	3.7773878888347037E-6	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999950959928549	WITHOUT_CLASSIFICATION	4.904007145144481E-6	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9998438238408687	WITHOUT_CLASSIFICATION	1.5617615913128777E-4	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999793139698	WITHOUT_CLASSIFICATION	2.0686030266403092E-8	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9997206381143504	WITHOUT_CLASSIFICATION	2.793618856496278E-4	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999558068939928	WITHOUT_CLASSIFICATION	4.419310600722986E-5	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999945142471378	WITHOUT_CLASSIFICATION	5.485752862146268E-6	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999991990103739	WITHOUT_CLASSIFICATION	8.009896259821612E-7	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999357421316	WITHOUT_CLASSIFICATION	6.425786831884447E-8	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.999996559739626	WITHOUT_CLASSIFICATION	3.440260373894983E-6	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999976570634687	WITHOUT_CLASSIFICATION	2.342936531368028E-6	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9987342321619469	WITHOUT_CLASSIFICATION	0.001265767838053144	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999998526314966	WITHOUT_CLASSIFICATION	1.4736850349146813E-7	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999004695561	WITHOUT_CLASSIFICATION	9.95304439025259E-7	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999999990587952	WITHOUT_CLASSIFICATION	9.412047243067603E-10	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999972321532759	WITHOUT_CLASSIFICATION	2.7678467241622336E-6	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9997477490776148	WITHOUT_CLASSIFICATION	2.5225092238523637E-4	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999961707444631	WITHOUT_CLASSIFICATION	3.829255536906266E-6	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999956292918905	WITHOUT_CLASSIFICATION	4.370708109625865E-6	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9983310180702305	WITHOUT_CLASSIFICATION	0.0016689819297694844	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.5952339228060254	IMPLEMENTATION	0.40476607719397467	WITHOUT_CLASSIFICATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999165531815297	WITHOUT_CLASSIFICATION	8.344681847030944E-5	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999997088546911	WITHOUT_CLASSIFICATION	2.911453088149934E-7	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9956149994820661	WITHOUT_CLASSIFICATION	0.004385000517933933	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999920756908165	WITHOUT_CLASSIFICATION	7.924309183408667E-6	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.7051231260327341	WITHOUT_CLASSIFICATION	0.29487687396726586	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999901868053106	WITHOUT_CLASSIFICATION	9.813194689300897E-6	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999525738531	WITHOUT_CLASSIFICATION	4.7426146837293846E-8	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999995093954352	WITHOUT_CLASSIFICATION	4.906045647566418E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983266454074337	WITHOUT_CLASSIFICATION	0.0016733545925663707	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9965139334244782	WITHOUT_CLASSIFICATION	0.003486066575521748	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999992430260646	WITHOUT_CLASSIFICATION	7.569739355255034E-7	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9998962772261069	WITHOUT_CLASSIFICATION	1.0372277389314542E-4	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999947996397393	WITHOUT_CLASSIFICATION	5.2003602607626274E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983266454074337	WITHOUT_CLASSIFICATION	0.0016733545925663707	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999957710713606	WITHOUT_CLASSIFICATION	4.22892863941845E-6	IMPLEMENTATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999390966617	WITHOUT_CLASSIFICATION	6.090333829606314E-8	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999988694403841	WITHOUT_CLASSIFICATION	1.130559615829725E-6	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999997962886561	WITHOUT_CLASSIFICATION	2.037113438389421E-7	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999996862824425	WITHOUT_CLASSIFICATION	3.1371755749452405E-7	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999759832068	WITHOUT_CLASSIFICATION	2.401679327915579E-8	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999998793181866	WITHOUT_CLASSIFICATION	1.2068181347241805E-7	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9935048101236629	WITHOUT_CLASSIFICATION	0.00649518987633714	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999991762132038	WITHOUT_CLASSIFICATION	8.237867962317807E-7	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999962364753213	WITHOUT_CLASSIFICATION	3.763524678653591E-6	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9871691913004558	WITHOUT_CLASSIFICATION	0.012830808699544215	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999493805413474	WITHOUT_CLASSIFICATION	5.061945865266162E-5	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999431211413534	WITHOUT_CLASSIFICATION	5.687885864657642E-5	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.7476390092778727	WITHOUT_CLASSIFICATION	0.25236099072212725	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.999081725101355	WITHOUT_CLASSIFICATION	9.18274898645006E-4	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999998325674879	WITHOUT_CLASSIFICATION	1.6743251213628275E-7	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999003215736	WITHOUT_CLASSIFICATION	9.967842634783218E-8	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9998342971760209	WITHOUT_CLASSIFICATION	1.6570282397906312E-4	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999996577015883	WITHOUT_CLASSIFICATION	3.422984117724918E-7	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9943307786981149	WITHOUT_CLASSIFICATION	0.005669221301884976	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9954460626262306	WITHOUT_CLASSIFICATION	0.004553937373769437	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9951811388765408	WITHOUT_CLASSIFICATION	0.004818861123459229	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9980919931379971	WITHOUT_CLASSIFICATION	0.0019080068620028594	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999978778192402	WITHOUT_CLASSIFICATION	2.122180759860476E-6	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999997199465581	WITHOUT_CLASSIFICATION	2.800534418938482E-7	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999911506371	WITHOUT_CLASSIFICATION	8.849362916802391E-9	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999992988244899	WITHOUT_CLASSIFICATION	7.011755099931165E-7	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9993699328590783	WITHOUT_CLASSIFICATION	6.300671409218046E-4	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999964969426783	WITHOUT_CLASSIFICATION	3.503057321546665E-6	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9824885845166879	WITHOUT_CLASSIFICATION	0.017511415483312122	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9673415513472086	IMPLEMENTATION	0.032658448652791536	WITHOUT_CLASSIFICATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999986423868629	WITHOUT_CLASSIFICATION	1.3576131371687629E-6	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9986059833551151	WITHOUT_CLASSIFICATION	0.0013940166448849422	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9998170692183733	WITHOUT_CLASSIFICATION	1.8293078162673877E-4	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999819558795306	WITHOUT_CLASSIFICATION	1.8044120469334177E-5	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9997885079338534	WITHOUT_CLASSIFICATION	2.1149206614661426E-4	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999909622562	WITHOUT_CLASSIFICATION	9.037743890367163E-9	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999987121461849	WITHOUT_CLASSIFICATION	1.2878538151360835E-6	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999992647610051	WITHOUT_CLASSIFICATION	7.352389948029557E-7	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999998303122182	WITHOUT_CLASSIFICATION	1.6968778191168346E-7	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999992950147042	WITHOUT_CLASSIFICATION	7.049852958185761E-7	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9966485262352913	WITHOUT_CLASSIFICATION	0.0033514737647087076	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9966485262352913	WITHOUT_CLASSIFICATION	0.0033514737647087076	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999883976756964	WITHOUT_CLASSIFICATION	1.1602324303543372E-5	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999988669169784	WITHOUT_CLASSIFICATION	1.1330830215653953E-6	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999997514042024	WITHOUT_CLASSIFICATION	2.4859579755619825E-7	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999999192729913	WITHOUT_CLASSIFICATION	8.072700869446636E-8	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9998676140467141	WITHOUT_CLASSIFICATION	1.3238595328593275E-4	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9998676140467141	WITHOUT_CLASSIFICATION	1.3238595328593275E-4	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9987398188755958	WITHOUT_CLASSIFICATION	0.0012601811244042226	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999992328142475	WITHOUT_CLASSIFICATION	7.671857525455529E-7	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999999835832797	WITHOUT_CLASSIFICATION	1.6416720312884274E-8	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999896388303	WITHOUT_CLASSIFICATION	1.0361169670467009E-8	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999904466255759	WITHOUT_CLASSIFICATION	9.553374424073242E-6	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999795683595777	WITHOUT_CLASSIFICATION	2.0431640422207247E-5	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9997974376371832	WITHOUT_CLASSIFICATION	2.025623628168917E-4	IMPLEMENTATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999716859101987	WITHOUT_CLASSIFICATION	2.831408980126388E-5	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999817655467811	WITHOUT_CLASSIFICATION	1.82344532189116E-5	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9996990166139452	WITHOUT_CLASSIFICATION	3.0098338605485193E-4	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999220440511	WITHOUT_CLASSIFICATION	7.795594895913255E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894323116236	WITHOUT_CLASSIFICATION	1.056768837634287E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894323116236	WITHOUT_CLASSIFICATION	1.056768837634287E-5	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999998301302	WITHOUT_CLASSIFICATION	1.6986984998761983E-10	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9976291836638759	WITHOUT_CLASSIFICATION	0.002370816336124028	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999876978488776	WITHOUT_CLASSIFICATION	1.2302151122363021E-5	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999998165680772	WITHOUT_CLASSIFICATION	1.8343192269708647E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9929528856891077	WITHOUT_CLASSIFICATION	0.007047114310892352	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999878711471778	WITHOUT_CLASSIFICATION	1.2128852822304077E-5	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999987992950022	WITHOUT_CLASSIFICATION	1.2007049977968431E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9929528856891077	WITHOUT_CLASSIFICATION	0.007047114310892352	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999762128445788	WITHOUT_CLASSIFICATION	2.3787155421123665E-5	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999994810592081	WITHOUT_CLASSIFICATION	5.189407918917348E-7	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999998481138073	WITHOUT_CLASSIFICATION	1.5188619276266018E-7	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999612036444376	WITHOUT_CLASSIFICATION	3.879635556240245E-5	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999962364753213	WITHOUT_CLASSIFICATION	3.763524678653591E-6	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999990319212058	WITHOUT_CLASSIFICATION	9.680787943039616E-7	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9998941565033965	WITHOUT_CLASSIFICATION	1.0584349660346268E-4	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999658686202538	WITHOUT_CLASSIFICATION	3.413137974617951E-5	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.9999752541623165	WITHOUT_CLASSIFICATION	2.474583768361714E-5	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999836537904493	WITHOUT_CLASSIFICATION	1.6346209550685068E-5	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999873669030108	WITHOUT_CLASSIFICATION	1.2633096989216716E-5	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999947420831008	WITHOUT_CLASSIFICATION	5.257916899203524E-6	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999926115948685	WITHOUT_CLASSIFICATION	7.3884051314448705E-6	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999992060029366	WITHOUT_CLASSIFICATION	7.939970634304811E-7	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9920288582136235	WITHOUT_CLASSIFICATION	0.007971141786376435	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9920288582136235	WITHOUT_CLASSIFICATION	0.007971141786376435	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995695006344	WITHOUT_CLASSIFICATION	4.3049936551339723E-7	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999089527260601	WITHOUT_CLASSIFICATION	9.104727393998831E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998119800886399	WITHOUT_CLASSIFICATION	1.880199113601554E-4	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999904701413588	WITHOUT_CLASSIFICATION	9.529858641195762E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999748652813749	WITHOUT_CLASSIFICATION	2.5134718625083116E-5	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9998746516320124	WITHOUT_CLASSIFICATION	1.2534836798757857E-4	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999997863198077	WITHOUT_CLASSIFICATION	2.1368019240254113E-7	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999402985462	WITHOUT_CLASSIFICATION	5.970145380769976E-8	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999554296732512	WITHOUT_CLASSIFICATION	4.457032674883474E-5	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9993461158971308	WITHOUT_CLASSIFICATION	6.53884102869086E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998015807653851	WITHOUT_CLASSIFICATION	1.984192346150026E-4	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9979583637393957	WITHOUT_CLASSIFICATION	0.0020416362606043444	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9979280876165134	WITHOUT_CLASSIFICATION	0.002071912383486517	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.99999997419189	WITHOUT_CLASSIFICATION	2.5808110023941314E-8	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999997007201908	WITHOUT_CLASSIFICATION	2.9927980907120467E-7	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999963004224097	WITHOUT_CLASSIFICATION	3.6995775903508325E-6	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999922014355	WITHOUT_CLASSIFICATION	7.798564495280807E-9	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999848134868601	WITHOUT_CLASSIFICATION	1.518651313995091E-5	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999004194110563	WITHOUT_CLASSIFICATION	9.958058894359094E-5	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999997278116	WITHOUT_CLASSIFICATION	2.721884401545404E-10	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999974019634	WITHOUT_CLASSIFICATION	2.598036625245101E-9	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999444098685	WITHOUT_CLASSIFICATION	5.5590131549586894E-8	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999916094758956	WITHOUT_CLASSIFICATION	8.39052410431524E-6	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999948997924	WITHOUT_CLASSIFICATION	5.100207690483103E-9	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999945040209886	WITHOUT_CLASSIFICATION	5.495979011403896E-6	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999945040209886	WITHOUT_CLASSIFICATION	5.495979011403896E-6	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9965940311123951	WITHOUT_CLASSIFICATION	0.0034059688876049384	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9894118561633353	WITHOUT_CLASSIFICATION	0.010588143836664678	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999228856080293	WITHOUT_CLASSIFICATION	7.711439197066023E-5	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999969412273928	WITHOUT_CLASSIFICATION	3.0587726072447566E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999960960023662	WITHOUT_CLASSIFICATION	3.903997633826036E-6	IMPLEMENTATION
