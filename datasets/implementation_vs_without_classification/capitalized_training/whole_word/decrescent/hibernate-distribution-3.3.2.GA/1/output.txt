todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9917321904876196	WITHOUT_CLASSIFICATION	0.008267809512380417	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9917321904876196	WITHOUT_CLASSIFICATION	0.008267809512380417	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.8569998732855423	WITHOUT_CLASSIFICATION	0.1430001267144577	IMPLEMENTATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9056307734954402	WITHOUT_CLASSIFICATION	0.0943692265045598	IMPLEMENTATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.6957497113404789	IMPLEMENTATION	0.30425028865952114	WITHOUT_CLASSIFICATION
TODO: handle TypeDefs	IMPLEMENTATION	0.785074972307001	IMPLEMENTATION	0.21492502769299918	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.7703158214673204	WITHOUT_CLASSIFICATION	0.2296841785326797	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.6319927472507257	WITHOUT_CLASSIFICATION	0.36800725274927437	IMPLEMENTATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9037922443711738	WITHOUT_CLASSIFICATION	0.09620775562882622	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.6889100444231975	WITHOUT_CLASSIFICATION	0.31108995557680247	IMPLEMENTATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9684294096463243	WITHOUT_CLASSIFICATION	0.03157059035367571	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.785074972307001	IMPLEMENTATION	0.21492502769299918	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.6293030828825994	IMPLEMENTATION	0.37069691711740077	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.6293030828825994	IMPLEMENTATION	0.37069691711740077	WITHOUT_CLASSIFICATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.5584671937452103	WITHOUT_CLASSIFICATION	0.4415328062547897	IMPLEMENTATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.666422183356487	WITHOUT_CLASSIFICATION	0.333577816643513	IMPLEMENTATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999882854961961	IMPLEMENTATION	1.1714503803785672E-5	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.8842317555731879	WITHOUT_CLASSIFICATION	0.11576824442681213	IMPLEMENTATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.9999193055044319	WITHOUT_CLASSIFICATION	8.069449556814716E-5	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.7351666901261116	IMPLEMENTATION	0.26483330987388837	WITHOUT_CLASSIFICATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.5834808950023102	WITHOUT_CLASSIFICATION	0.4165191049976899	IMPLEMENTATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9994086978398247	WITHOUT_CLASSIFICATION	5.913021601752934E-4	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.7411111456272416	WITHOUT_CLASSIFICATION	0.2588888543727585	IMPLEMENTATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.7779630695924986	IMPLEMENTATION	0.2220369304075013	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.7779630695924986	IMPLEMENTATION	0.2220369304075013	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.9541562615894198	IMPLEMENTATION	0.04584373841058007	WITHOUT_CLASSIFICATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.8182184384742452	WITHOUT_CLASSIFICATION	0.18178156152575478	IMPLEMENTATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.970188802678937	IMPLEMENTATION	0.02981119732106288	WITHOUT_CLASSIFICATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.6933960192261526	WITHOUT_CLASSIFICATION	0.30660398077384743	IMPLEMENTATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9680498685624814	IMPLEMENTATION	0.03195013143751858	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.891251596077114	WITHOUT_CLASSIFICATION	0.10874840392288598	IMPLEMENTATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.6319927472507257	WITHOUT_CLASSIFICATION	0.36800725274927437	IMPLEMENTATION
todo : look at optimizing these...	IMPLEMENTATION	0.9990348190850133	WITHOUT_CLASSIFICATION	9.651809149866578E-4	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.6948295677729577	IMPLEMENTATION	0.3051704322270424	WITHOUT_CLASSIFICATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9643452609684192	IMPLEMENTATION	0.035654739031580715	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.617335577052053	IMPLEMENTATION	0.382664422947947	WITHOUT_CLASSIFICATION
TODO: not visible to the user!	IMPLEMENTATION	0.8677197880439871	IMPLEMENTATION	0.13228021195601294	WITHOUT_CLASSIFICATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.743820718334111	WITHOUT_CLASSIFICATION	0.256179281665889	IMPLEMENTATION
TODO: use these in methods above	IMPLEMENTATION	0.7805006440253001	WITHOUT_CLASSIFICATION	0.21949935597469986	IMPLEMENTATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8518098545446756	IMPLEMENTATION	0.1481901454553244	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.8518098545446756	IMPLEMENTATION	0.1481901454553244	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.6957365886795339	IMPLEMENTATION	0.30426341132046614	WITHOUT_CLASSIFICATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.998267562778006	WITHOUT_CLASSIFICATION	0.0017324372219939602	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9392548385540992	WITHOUT_CLASSIFICATION	0.06074516144590085	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9991626018686699	IMPLEMENTATION	8.373981313300947E-4	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.7022732212442097	WITHOUT_CLASSIFICATION	0.29772677875579034	IMPLEMENTATION
TODO: formulas ?	IMPLEMENTATION	0.643296958896725	WITHOUT_CLASSIFICATION	0.35670304110327505	IMPLEMENTATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.7961391187156128	WITHOUT_CLASSIFICATION	0.20386088128438715	IMPLEMENTATION
todo : cache this sql...	IMPLEMENTATION	0.9977716535517696	WITHOUT_CLASSIFICATION	0.002228346448230425	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.9640896481032926	WITHOUT_CLASSIFICATION	0.03591035189670742	IMPLEMENTATION
TODO: cache this in an instvar	IMPLEMENTATION	0.9492249141557189	WITHOUT_CLASSIFICATION	0.05077508584428105	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.7137014068352258	IMPLEMENTATION	0.2862985931647743	WITHOUT_CLASSIFICATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.916115231740157	IMPLEMENTATION	0.08388476825984305	WITHOUT_CLASSIFICATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.8578825688456039	IMPLEMENTATION	0.1421174311543961	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.688147262116085	WITHOUT_CLASSIFICATION	0.3118527378839149	IMPLEMENTATION
TODO: terrible implementation!	IMPLEMENTATION	0.666422183356487	WITHOUT_CLASSIFICATION	0.333577816643513	IMPLEMENTATION
TODO: proxies!	IMPLEMENTATION	0.688147262116085	WITHOUT_CLASSIFICATION	0.3118527378839149	IMPLEMENTATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.8783912550680628	IMPLEMENTATION	0.12160874493193718	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.7165368406147318	WITHOUT_CLASSIFICATION	0.28346315938526817	IMPLEMENTATION
TODO: proxies!	IMPLEMENTATION	0.688147262116085	WITHOUT_CLASSIFICATION	0.3118527378839149	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9919252661413175	WITHOUT_CLASSIFICATION	0.008074733858682534	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9919252661413175	WITHOUT_CLASSIFICATION	0.008074733858682534	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9984634152437426	IMPLEMENTATION	0.0015365847562574557	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.7676289738424931	IMPLEMENTATION	0.23237102615750693	WITHOUT_CLASSIFICATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999810039312883	WITHOUT_CLASSIFICATION	1.8996068711685392E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9996994040076421	WITHOUT_CLASSIFICATION	3.0059599235796936E-4	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9996994040076421	WITHOUT_CLASSIFICATION	3.0059599235796936E-4	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9992278988779584	WITHOUT_CLASSIFICATION	7.721011220415702E-4	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9998373530032134	WITHOUT_CLASSIFICATION	1.6264699678654758E-4	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9990869697346056	WITHOUT_CLASSIFICATION	9.130302653944522E-4	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9990869697346056	WITHOUT_CLASSIFICATION	9.130302653944522E-4	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9997816019519257	WITHOUT_CLASSIFICATION	2.183980480744209E-4	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999617056177627	WITHOUT_CLASSIFICATION	3.8294382237293327E-4	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999570156840611	WITHOUT_CLASSIFICATION	4.298431593890488E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999448829026701	WITHOUT_CLASSIFICATION	5.511709732976862E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999939196871482	WITHOUT_CLASSIFICATION	6.080312851794471E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999939196871482	WITHOUT_CLASSIFICATION	6.080312851794471E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9994674796400503	WITHOUT_CLASSIFICATION	5.325203599496302E-4	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9988653854559738	WITHOUT_CLASSIFICATION	0.0011346145440261609	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.9997514098449435	WITHOUT_CLASSIFICATION	2.485901550564982E-4	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9998578927922906	WITHOUT_CLASSIFICATION	1.4210720770944167E-4	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9997452618969823	WITHOUT_CLASSIFICATION	2.5473810301764786E-4	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.9985873028566036	WITHOUT_CLASSIFICATION	0.001412697143396425	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9995659609806834	WITHOUT_CLASSIFICATION	4.340390193165413E-4	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999648487265341	WITHOUT_CLASSIFICATION	3.515127346578067E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9962319152595243	WITHOUT_CLASSIFICATION	0.003768084740475843	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9997422460849985	WITHOUT_CLASSIFICATION	2.5775391500143654E-4	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9996940929586628	WITHOUT_CLASSIFICATION	3.059070413371691E-4	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.8807222181684098	IMPLEMENTATION	0.11927778183159018	WITHOUT_CLASSIFICATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999825661860676	WITHOUT_CLASSIFICATION	1.7433813932345463E-5	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9997627864140868	WITHOUT_CLASSIFICATION	2.372135859132565E-4	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999770573418097	WITHOUT_CLASSIFICATION	2.294265819021453E-5	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9996690155566917	WITHOUT_CLASSIFICATION	3.309844433083031E-4	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9984909764020781	WITHOUT_CLASSIFICATION	0.0015090235979219229	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9998196693442417	WITHOUT_CLASSIFICATION	1.8033065575828004E-4	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9996912850518641	WITHOUT_CLASSIFICATION	3.0871494813587415E-4	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9998630807731658	WITHOUT_CLASSIFICATION	1.3691922683430725E-4	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998352469716406	WITHOUT_CLASSIFICATION	1.6475302835934318E-4	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9996712065486335	WITHOUT_CLASSIFICATION	3.287934513664691E-4	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9994129069713564	WITHOUT_CLASSIFICATION	5.870930286435672E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9997751387782877	WITHOUT_CLASSIFICATION	2.248612217123176E-4	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9994129069713564	WITHOUT_CLASSIFICATION	5.870930286435672E-4	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.996388652372818	IMPLEMENTATION	0.003611347627181952	WITHOUT_CLASSIFICATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9996161454257757	WITHOUT_CLASSIFICATION	3.8385457422428237E-4	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.995227413605424	WITHOUT_CLASSIFICATION	0.004772586394576045	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.999893694585981	WITHOUT_CLASSIFICATION	1.0630541401902573E-4	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999438370142392	WITHOUT_CLASSIFICATION	5.616298576078544E-5	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.7615945212320623	WITHOUT_CLASSIFICATION	0.23840547876793766	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9991484702070726	WITHOUT_CLASSIFICATION	8.515297929273964E-4	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.987190517194431	WITHOUT_CLASSIFICATION	0.01280948280556907	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9989997842069868	WITHOUT_CLASSIFICATION	0.001000215793013268	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9993238031161192	WITHOUT_CLASSIFICATION	6.761968838808952E-4	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999433732178563	WITHOUT_CLASSIFICATION	5.662678214357261E-5	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9987280762060436	WITHOUT_CLASSIFICATION	0.0012719237939563216	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999821229231214	WITHOUT_CLASSIFICATION	1.7877076878577707E-5	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999835966376525	WITHOUT_CLASSIFICATION	1.6403362347527395E-5	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.999886600204066	WITHOUT_CLASSIFICATION	1.133997959340075E-4	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.999980164134232	WITHOUT_CLASSIFICATION	1.9835865768108323E-5	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999972926148356	WITHOUT_CLASSIFICATION	2.7073851644082136E-5	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999791889532885	WITHOUT_CLASSIFICATION	2.0811046711506575E-5	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9996546026512937	WITHOUT_CLASSIFICATION	3.4539734870625425E-4	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999089906656494	WITHOUT_CLASSIFICATION	9.100933435059549E-5	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9992857912677707	WITHOUT_CLASSIFICATION	7.142087322293248E-4	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9996891836540296	WITHOUT_CLASSIFICATION	3.108163459704552E-4	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.6029908651753038	WITHOUT_CLASSIFICATION	0.3970091348246964	IMPLEMENTATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.999063750451138	WITHOUT_CLASSIFICATION	9.362495488620114E-4	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9998392026202786	WITHOUT_CLASSIFICATION	1.6079737972128785E-4	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9745876739036832	WITHOUT_CLASSIFICATION	0.025412326096316804	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9995672939966099	WITHOUT_CLASSIFICATION	4.3270600339012356E-4	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999987018828583	WITHOUT_CLASSIFICATION	1.29811714159872E-6	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9992355894352228	WITHOUT_CLASSIFICATION	7.64410564777186E-4	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9998416189482009	WITHOUT_CLASSIFICATION	1.583810517991891E-4	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999239087205021	WITHOUT_CLASSIFICATION	7.60912794979119E-5	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995419635938727	WITHOUT_CLASSIFICATION	4.5803640612727606E-4	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999280236522574	WITHOUT_CLASSIFICATION	7.19763477425472E-5	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999985767870393	WITHOUT_CLASSIFICATION	1.4232129607143924E-6	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995419635938727	WITHOUT_CLASSIFICATION	4.5803640612727606E-4	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9524919596843832	WITHOUT_CLASSIFICATION	0.047508040315616853	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9996400494306104	WITHOUT_CLASSIFICATION	3.5995056938959547E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9993229573948605	WITHOUT_CLASSIFICATION	6.77042605139366E-4	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.9997032844583239	WITHOUT_CLASSIFICATION	2.967155416760694E-4	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9996955829447397	WITHOUT_CLASSIFICATION	3.0441705526031365E-4	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9996955829447397	WITHOUT_CLASSIFICATION	3.0441705526031365E-4	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999996071839513	WITHOUT_CLASSIFICATION	3.9281604872810397E-7	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9993397828104217	WITHOUT_CLASSIFICATION	6.602171895783821E-4	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999687687100353	WITHOUT_CLASSIFICATION	3.1231289964817083E-5	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9982997106828261	WITHOUT_CLASSIFICATION	0.0017002893171738818	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999683853549061	WITHOUT_CLASSIFICATION	3.161464509400195E-5	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999894584746871	WITHOUT_CLASSIFICATION	1.0541525312905073E-4	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.9935407946471729	WITHOUT_CLASSIFICATION	0.006459205352827092	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9998495276096869	WITHOUT_CLASSIFICATION	1.504723903130446E-4	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999024001988026	WITHOUT_CLASSIFICATION	9.759980119745488E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9996659617719345	WITHOUT_CLASSIFICATION	3.340382280656271E-4	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9996659617719345	WITHOUT_CLASSIFICATION	3.340382280656271E-4	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9993598843484554	WITHOUT_CLASSIFICATION	6.401156515446137E-4	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9987223056976121	WITHOUT_CLASSIFICATION	0.0012776943023879528	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9998571558034909	WITHOUT_CLASSIFICATION	1.4284419650913187E-4	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9996659617719345	WITHOUT_CLASSIFICATION	3.340382280656271E-4	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9993598843484554	WITHOUT_CLASSIFICATION	6.401156515446137E-4	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9993598843484554	WITHOUT_CLASSIFICATION	6.401156515446137E-4	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9998578724377433	WITHOUT_CLASSIFICATION	1.4212756225676312E-4	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9994453183229235	WITHOUT_CLASSIFICATION	5.546816770765101E-4	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999936128417547	WITHOUT_CLASSIFICATION	6.387158245287368E-6	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999907433526978	WITHOUT_CLASSIFICATION	9.256647302226391E-6	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.99579506213983	WITHOUT_CLASSIFICATION	0.004204937860169933	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.99579506213983	WITHOUT_CLASSIFICATION	0.004204937860169933	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9995618055432944	WITHOUT_CLASSIFICATION	4.3819445670547155E-4	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998070578663736	WITHOUT_CLASSIFICATION	1.9294213362640355E-4	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.9999536635142862	WITHOUT_CLASSIFICATION	4.633648571382841E-5	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998789542018758	WITHOUT_CLASSIFICATION	1.2104579812426739E-4	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998789542018758	WITHOUT_CLASSIFICATION	1.2104579812426739E-4	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9997162068664536	WITHOUT_CLASSIFICATION	2.8379313354641537E-4	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9979030061245957	WITHOUT_CLASSIFICATION	0.002096993875404352	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996056858248521	WITHOUT_CLASSIFICATION	3.943141751478579E-4	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999947610593869	WITHOUT_CLASSIFICATION	5.238940613141792E-6	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9998969018341257	WITHOUT_CLASSIFICATION	1.0309816587440103E-4	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9995995122119251	WITHOUT_CLASSIFICATION	4.004877880747972E-4	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9975562033660025	WITHOUT_CLASSIFICATION	0.002443796633997535	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.9993600292806263	WITHOUT_CLASSIFICATION	6.399707193737353E-4	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996056858248521	WITHOUT_CLASSIFICATION	3.943141751478579E-4	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.9996335710156938	WITHOUT_CLASSIFICATION	3.6642898430620704E-4	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9997840374983912	WITHOUT_CLASSIFICATION	2.159625016088891E-4	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9997840374983912	WITHOUT_CLASSIFICATION	2.159625016088891E-4	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999674056185669	WITHOUT_CLASSIFICATION	3.259438143305717E-5	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9978266774810493	WITHOUT_CLASSIFICATION	0.0021733225189508646	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9993074308782185	WITHOUT_CLASSIFICATION	6.925691217815347E-4	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9912832373482869	WITHOUT_CLASSIFICATION	0.008716762651713094	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.997572051083142	WITHOUT_CLASSIFICATION	0.0024279489168581372	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.9993555124076796	WITHOUT_CLASSIFICATION	6.444875923203286E-4	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9996538934373086	WITHOUT_CLASSIFICATION	3.461065626913502E-4	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.9995061759250599	WITHOUT_CLASSIFICATION	4.938240749402076E-4	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9950191305343912	WITHOUT_CLASSIFICATION	0.004980869465608785	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999972226685819	WITHOUT_CLASSIFICATION	2.777331418096434E-5	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999972226685819	WITHOUT_CLASSIFICATION	2.777331418096434E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9998576703963319	WITHOUT_CLASSIFICATION	1.4232960366813212E-4	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999810039312883	WITHOUT_CLASSIFICATION	1.8996068711685392E-5	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9997862446193422	WITHOUT_CLASSIFICATION	2.1375538065794886E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9996994040076421	WITHOUT_CLASSIFICATION	3.0059599235796936E-4	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9997493917066718	WITHOUT_CLASSIFICATION	2.5060829332819196E-4	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9997007990370403	WITHOUT_CLASSIFICATION	2.992009629596127E-4	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9997810250976142	WITHOUT_CLASSIFICATION	2.189749023857826E-4	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.999706551561264	WITHOUT_CLASSIFICATION	2.9344843873601966E-4	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.999346497858243	WITHOUT_CLASSIFICATION	6.535021417570663E-4	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.9995970087101199	WITHOUT_CLASSIFICATION	4.0299128988014604E-4	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9997873109951477	WITHOUT_CLASSIFICATION	2.126890048523201E-4	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.999706551561264	WITHOUT_CLASSIFICATION	2.9344843873601966E-4	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9982902892140112	WITHOUT_CLASSIFICATION	0.0017097107859888134	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9960680761903633	WITHOUT_CLASSIFICATION	0.003931923809636731	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.9997812062766245	WITHOUT_CLASSIFICATION	2.187937233754276E-4	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9997873109951477	WITHOUT_CLASSIFICATION	2.126890048523201E-4	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9996920711675346	WITHOUT_CLASSIFICATION	3.079288324653989E-4	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9990869697346056	WITHOUT_CLASSIFICATION	9.130302653944522E-4	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9876820871045076	WITHOUT_CLASSIFICATION	0.012317912895492516	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9990951877031891	WITHOUT_CLASSIFICATION	9.048122968110259E-4	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.999813855297622	WITHOUT_CLASSIFICATION	1.861447023779842E-4	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9997922249839858	WITHOUT_CLASSIFICATION	2.0777501601414457E-4	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998593974888373	WITHOUT_CLASSIFICATION	1.4060251116266765E-4	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9998934158383864	WITHOUT_CLASSIFICATION	1.0658416161357076E-4	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.9995596686005225	WITHOUT_CLASSIFICATION	4.4033139947752937E-4	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9818969363558318	WITHOUT_CLASSIFICATION	0.018103063644168263	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.999944705731707	WITHOUT_CLASSIFICATION	5.529426829299186E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9996994040076421	WITHOUT_CLASSIFICATION	3.0059599235796936E-4	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9996994040076421	WITHOUT_CLASSIFICATION	3.0059599235796936E-4	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9997816019519257	WITHOUT_CLASSIFICATION	2.183980480744209E-4	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9997259887224301	WITHOUT_CLASSIFICATION	2.7401127756991763E-4	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9997781656694961	WITHOUT_CLASSIFICATION	2.2183433050381753E-4	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9996864072010276	WITHOUT_CLASSIFICATION	3.1359279897235726E-4	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9993978327933303	WITHOUT_CLASSIFICATION	6.021672066697048E-4	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9996811761880778	WITHOUT_CLASSIFICATION	3.188238119221982E-4	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.9993899816799288	WITHOUT_CLASSIFICATION	6.100183200713716E-4	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9995533140910539	WITHOUT_CLASSIFICATION	4.4668590894620834E-4	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9995533140910539	WITHOUT_CLASSIFICATION	4.4668590894620834E-4	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999376903323512	WITHOUT_CLASSIFICATION	6.230966764876835E-5	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999679404216901	WITHOUT_CLASSIFICATION	3.205957830989008E-5	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9993605884258944	WITHOUT_CLASSIFICATION	6.394115741055635E-4	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9997232015821407	WITHOUT_CLASSIFICATION	2.7679841785935695E-4	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9997757003099782	WITHOUT_CLASSIFICATION	2.2429969002177292E-4	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.9998919694118409	WITHOUT_CLASSIFICATION	1.0803058815910182E-4	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.9999035508739162	WITHOUT_CLASSIFICATION	9.644912608371359E-5	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999617056177627	WITHOUT_CLASSIFICATION	3.8294382237293327E-4	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999638168687184	WITHOUT_CLASSIFICATION	3.618313128171723E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999638168687184	WITHOUT_CLASSIFICATION	3.618313128171723E-5	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.9999274370629382	WITHOUT_CLASSIFICATION	7.256293706185728E-5	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9998414107664009	WITHOUT_CLASSIFICATION	1.5858923359908403E-4	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.9999274370629382	WITHOUT_CLASSIFICATION	7.256293706185728E-5	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999074887637447	WITHOUT_CLASSIFICATION	9.251123625534916E-5	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.9994837964972731	WITHOUT_CLASSIFICATION	5.162035027268089E-4	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9996994040076421	WITHOUT_CLASSIFICATION	3.0059599235796936E-4	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.9996994040076421	WITHOUT_CLASSIFICATION	3.0059599235796936E-4	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.9996281301311031	WITHOUT_CLASSIFICATION	3.718698688968907E-4	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999568748444307	WITHOUT_CLASSIFICATION	4.3125155569247105E-5	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999448829026701	WITHOUT_CLASSIFICATION	5.511709732976862E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999448829026701	WITHOUT_CLASSIFICATION	5.511709732976862E-5	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.9921833421306367	WITHOUT_CLASSIFICATION	0.007816657869363187	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.9999755049295765	WITHOUT_CLASSIFICATION	2.4495070423441403E-5	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.9995669171300694	WITHOUT_CLASSIFICATION	4.330828699306558E-4	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9997062714848186	WITHOUT_CLASSIFICATION	2.937285151813229E-4	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.9993993624552735	WITHOUT_CLASSIFICATION	6.006375447264727E-4	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999939196871482	WITHOUT_CLASSIFICATION	6.080312851794471E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9994674796400503	WITHOUT_CLASSIFICATION	5.325203599496302E-4	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9994674796400503	WITHOUT_CLASSIFICATION	5.325203599496302E-4	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9996374736088035	WITHOUT_CLASSIFICATION	3.625263911964975E-4	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9996374736088035	WITHOUT_CLASSIFICATION	3.625263911964975E-4	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9996706097455628	WITHOUT_CLASSIFICATION	3.293902544373128E-4	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9996706097455628	WITHOUT_CLASSIFICATION	3.293902544373128E-4	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999448829026701	WITHOUT_CLASSIFICATION	5.511709732976862E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999939196871482	WITHOUT_CLASSIFICATION	6.080312851794471E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9994674796400503	WITHOUT_CLASSIFICATION	5.325203599496302E-4	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9996374736088035	WITHOUT_CLASSIFICATION	3.625263911964975E-4	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9996374736088035	WITHOUT_CLASSIFICATION	3.625263911964975E-4	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9996706097455628	WITHOUT_CLASSIFICATION	3.293902544373128E-4	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9991515451332472	WITHOUT_CLASSIFICATION	8.484548667526307E-4	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9998466908732949	WITHOUT_CLASSIFICATION	1.5330912670516846E-4	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.9997796372280824	WITHOUT_CLASSIFICATION	2.2036277191757954E-4	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998976317226473	WITHOUT_CLASSIFICATION	1.0236827735272205E-4	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.9995799393079446	WITHOUT_CLASSIFICATION	4.200606920553093E-4	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9994022010101048	WITHOUT_CLASSIFICATION	5.977989898951408E-4	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999650378214616	WITHOUT_CLASSIFICATION	3.496217853838146E-5	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999846988018589	WITHOUT_CLASSIFICATION	1.5301198141148272E-5	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999974917059872	WITHOUT_CLASSIFICATION	2.5082940128070144E-5	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9957641676618602	WITHOUT_CLASSIFICATION	0.004235832338139921	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9996814946762261	WITHOUT_CLASSIFICATION	3.185053237738927E-4	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9998998838352637	WITHOUT_CLASSIFICATION	1.0011616473621753E-4	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9994022010101048	WITHOUT_CLASSIFICATION	5.977989898951408E-4	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9994022010101048	WITHOUT_CLASSIFICATION	5.977989898951408E-4	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9994022010101048	WITHOUT_CLASSIFICATION	5.977989898951408E-4	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9998106201929869	WITHOUT_CLASSIFICATION	1.893798070131433E-4	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9996042947675248	WITHOUT_CLASSIFICATION	3.957052324752382E-4	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9996042947675248	WITHOUT_CLASSIFICATION	3.957052324752382E-4	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9994627022494497	WITHOUT_CLASSIFICATION	5.372977505503842E-4	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999883224550936	WITHOUT_CLASSIFICATION	1.1677544906349897E-5	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999635858955532	WITHOUT_CLASSIFICATION	3.6414104446805114E-5	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9957867157941449	WITHOUT_CLASSIFICATION	0.004213284205855107	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9957867157941449	WITHOUT_CLASSIFICATION	0.004213284205855107	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9997452618969823	WITHOUT_CLASSIFICATION	2.5473810301764786E-4	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9987161988799614	WITHOUT_CLASSIFICATION	0.0012838011200386056	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9987161988799614	WITHOUT_CLASSIFICATION	0.0012838011200386056	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9997601868847852	WITHOUT_CLASSIFICATION	2.3981311521474724E-4	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999591083027183	WITHOUT_CLASSIFICATION	4.08916972816792E-5	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999648487265341	WITHOUT_CLASSIFICATION	3.515127346578067E-5	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.5237026929286298	WITHOUT_CLASSIFICATION	0.47629730707137025	IMPLEMENTATION
ID	WITHOUT_CLASSIFICATION	0.9985873028566036	WITHOUT_CLASSIFICATION	0.001412697143396425	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9998767102802006	WITHOUT_CLASSIFICATION	1.2328971979931578E-4	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9996881237830111	WITHOUT_CLASSIFICATION	3.1187621698882865E-4	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.999833680398046	WITHOUT_CLASSIFICATION	1.6631960195402648E-4	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999806862502505	WITHOUT_CLASSIFICATION	1.931374974952385E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9996940929586628	WITHOUT_CLASSIFICATION	3.059070413371691E-4	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999539244578135	WITHOUT_CLASSIFICATION	4.607554218658224E-5	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9994006133743646	WITHOUT_CLASSIFICATION	5.993866256355282E-4	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999648487265341	WITHOUT_CLASSIFICATION	3.515127346578067E-5	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9995248855039846	WITHOUT_CLASSIFICATION	4.7511449601544487E-4	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.9998395074013228	WITHOUT_CLASSIFICATION	1.6049259867723385E-4	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9994006133743646	WITHOUT_CLASSIFICATION	5.993866256355282E-4	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9995248855039846	WITHOUT_CLASSIFICATION	4.7511449601544487E-4	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9995710625976041	WITHOUT_CLASSIFICATION	4.289374023959012E-4	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9995710625976041	WITHOUT_CLASSIFICATION	4.289374023959012E-4	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9996297740208073	WITHOUT_CLASSIFICATION	3.702259791926764E-4	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.999728011291822	WITHOUT_CLASSIFICATION	2.7198870817809643E-4	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999905085649459	WITHOUT_CLASSIFICATION	9.491435054122826E-6	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999048832581994	WITHOUT_CLASSIFICATION	9.51167418006607E-5	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9982435093607238	WITHOUT_CLASSIFICATION	0.0017564906392761785	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999507953778161	WITHOUT_CLASSIFICATION	4.920462218387207E-5	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.996057762038063	WITHOUT_CLASSIFICATION	0.00394223796193702	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9993351367864728	WITHOUT_CLASSIFICATION	6.648632135273063E-4	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999507953778161	WITHOUT_CLASSIFICATION	4.920462218387207E-5	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9996087250742318	WITHOUT_CLASSIFICATION	3.912749257681449E-4	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9994006133743646	WITHOUT_CLASSIFICATION	5.993866256355282E-4	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9993998546623233	WITHOUT_CLASSIFICATION	6.00145337676729E-4	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.9997110753120364	WITHOUT_CLASSIFICATION	2.8892468796364046E-4	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.983915083418212	WITHOUT_CLASSIFICATION	0.016084916581788015	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.9994461407441676	WITHOUT_CLASSIFICATION	5.538592558323249E-4	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9993900059184231	WITHOUT_CLASSIFICATION	6.099940815769083E-4	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999809107169803	WITHOUT_CLASSIFICATION	1.908928301970519E-5	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999951491946504	WITHOUT_CLASSIFICATION	4.850805349596956E-5	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.9994489436668639	WITHOUT_CLASSIFICATION	5.510563331361537E-4	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999295579721638	WITHOUT_CLASSIFICATION	7.04420278361994E-4	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9996682212684046	WITHOUT_CLASSIFICATION	3.3177873159549596E-4	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9965093617453216	WITHOUT_CLASSIFICATION	0.003490638254678473	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9996940929586628	WITHOUT_CLASSIFICATION	3.059070413371691E-4	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.9997827334483259	WITHOUT_CLASSIFICATION	2.1726655167402507E-4	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9997319285993415	WITHOUT_CLASSIFICATION	2.680714006585168E-4	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.9995185199026461	WITHOUT_CLASSIFICATION	4.81480097353888E-4	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.9997691837147868	WITHOUT_CLASSIFICATION	2.3081628521309368E-4	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.9997691837147868	WITHOUT_CLASSIFICATION	2.3081628521309368E-4	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9997358972165148	WITHOUT_CLASSIFICATION	2.6410278348525237E-4	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999958789466035	WITHOUT_CLASSIFICATION	4.121053396496728E-6	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9998458562153036	WITHOUT_CLASSIFICATION	1.5414378469628896E-4	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9920883059418905	WITHOUT_CLASSIFICATION	0.007911694058109472	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9997048264580419	WITHOUT_CLASSIFICATION	2.951735419580901E-4	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9853526985054638	WITHOUT_CLASSIFICATION	0.014647301494536104	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9853526985054638	WITHOUT_CLASSIFICATION	0.014647301494536104	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9996682212684046	WITHOUT_CLASSIFICATION	3.3177873159549596E-4	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9998648306264103	WITHOUT_CLASSIFICATION	1.351693735896313E-4	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.9998788798193995	WITHOUT_CLASSIFICATION	1.2112018060058443E-4	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9996687554144776	WITHOUT_CLASSIFICATION	3.312445855223057E-4	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9996707479848538	WITHOUT_CLASSIFICATION	3.292520151462203E-4	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9996705465261454	WITHOUT_CLASSIFICATION	3.2945347385459814E-4	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998722415543668	WITHOUT_CLASSIFICATION	1.2775844563318647E-4	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.6773590323764542	IMPLEMENTATION	0.3226409676235457	WITHOUT_CLASSIFICATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.999955323557562	WITHOUT_CLASSIFICATION	4.467644243805412E-5	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9997088828456666	WITHOUT_CLASSIFICATION	2.9111715433340627E-4	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9958310295007828	WITHOUT_CLASSIFICATION	0.004168970499217127	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9997421885210548	WITHOUT_CLASSIFICATION	2.578114789452201E-4	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999308888944807	WITHOUT_CLASSIFICATION	6.91111055192946E-4	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9994411108522081	WITHOUT_CLASSIFICATION	5.588891477918516E-4	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9992708211956145	WITHOUT_CLASSIFICATION	7.291788043854095E-4	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998211177086223	WITHOUT_CLASSIFICATION	1.788822913777663E-4	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999680685267066	WITHOUT_CLASSIFICATION	3.193147329339355E-5	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999362594329772	WITHOUT_CLASSIFICATION	6.374056702279336E-4	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9996854728419334	WITHOUT_CLASSIFICATION	3.145271580665527E-4	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999550274477417	WITHOUT_CLASSIFICATION	4.497255225835235E-5	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999645269511838	WITHOUT_CLASSIFICATION	3.547304881620277E-4	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9992708211956145	WITHOUT_CLASSIFICATION	7.291788043854095E-4	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9994207652789975	WITHOUT_CLASSIFICATION	5.792347210025748E-4	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.999558516651221	WITHOUT_CLASSIFICATION	4.414833487791335E-4	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.999558516651221	WITHOUT_CLASSIFICATION	4.414833487791335E-4	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999997220482018	WITHOUT_CLASSIFICATION	2.779517981913698E-6	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9998830233212915	WITHOUT_CLASSIFICATION	1.1697667870842036E-4	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999680685267066	WITHOUT_CLASSIFICATION	3.193147329339355E-5	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9980401369733727	WITHOUT_CLASSIFICATION	0.0019598630266273055	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9989186359034439	WITHOUT_CLASSIFICATION	0.001081364096556113	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9993397828104217	WITHOUT_CLASSIFICATION	6.602171895783821E-4	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9990179676915005	WITHOUT_CLASSIFICATION	9.820323084994299E-4	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9990179676915005	WITHOUT_CLASSIFICATION	9.820323084994299E-4	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9984984895448396	WITHOUT_CLASSIFICATION	0.0015015104551604232	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9997002188289995	WITHOUT_CLASSIFICATION	2.9978117100058733E-4	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9997002188289995	WITHOUT_CLASSIFICATION	2.9978117100058733E-4	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9920883059418905	WITHOUT_CLASSIFICATION	0.007911694058109472	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999783901055676	WITHOUT_CLASSIFICATION	2.1609894432400795E-4	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9994919180853679	WITHOUT_CLASSIFICATION	5.080819146321046E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9996667092121482	WITHOUT_CLASSIFICATION	3.3329078785187345E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9998576703963319	WITHOUT_CLASSIFICATION	1.4232960366813212E-4	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9994919180853679	WITHOUT_CLASSIFICATION	5.080819146321046E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9996667092121482	WITHOUT_CLASSIFICATION	3.3329078785187345E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.6081748693342584	WITHOUT_CLASSIFICATION	0.39182513066574165	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999960543886214	WITHOUT_CLASSIFICATION	3.945611378658932E-6	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9995399055833148	WITHOUT_CLASSIFICATION	4.600944166850756E-4	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.999983287586746	WITHOUT_CLASSIFICATION	1.6712413253958457E-5	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9943190149949429	WITHOUT_CLASSIFICATION	0.005680985005057112	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.5326819655449463	WITHOUT_CLASSIFICATION	0.46731803445505365	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9990995907361914	WITHOUT_CLASSIFICATION	9.004092638087099E-4	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9990995907361914	WITHOUT_CLASSIFICATION	9.004092638087099E-4	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9994030424966226	WITHOUT_CLASSIFICATION	5.96957503377483E-4	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999727129824575	WITHOUT_CLASSIFICATION	2.728701754250206E-5	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9998169732147769	WITHOUT_CLASSIFICATION	1.8302678522300392E-4	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999255366072883	WITHOUT_CLASSIFICATION	7.446339271174882E-5	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.999923397138373	WITHOUT_CLASSIFICATION	7.660286162712388E-5	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9977882235483951	WITHOUT_CLASSIFICATION	0.0022117764516048984	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9998576703963319	WITHOUT_CLASSIFICATION	1.4232960366813212E-4	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9977882235483951	WITHOUT_CLASSIFICATION	0.0022117764516048984	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999193592465285	WITHOUT_CLASSIFICATION	8.064075347150028E-5	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999193592465285	WITHOUT_CLASSIFICATION	8.064075347150028E-5	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9995516011509034	WITHOUT_CLASSIFICATION	4.483988490965775E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.6081748693342584	WITHOUT_CLASSIFICATION	0.39182513066574165	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9818478741608841	WITHOUT_CLASSIFICATION	0.018152125839115928	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999712883979981	WITHOUT_CLASSIFICATION	2.8711602001936768E-5	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.8905410211313876	WITHOUT_CLASSIFICATION	0.10945897886861251	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999447548460659	WITHOUT_CLASSIFICATION	5.524515393404555E-5	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9966159008527051	WITHOUT_CLASSIFICATION	0.0033840991472947903	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.6081748693342584	WITHOUT_CLASSIFICATION	0.39182513066574165	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999447548460659	WITHOUT_CLASSIFICATION	5.524515393404555E-5	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9966159008527051	WITHOUT_CLASSIFICATION	0.0033840991472947903	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999318941760456	WITHOUT_CLASSIFICATION	6.810582395437395E-5	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9994727053321854	WITHOUT_CLASSIFICATION	5.272946678147459E-4	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999152096713565	WITHOUT_CLASSIFICATION	8.479032864351852E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.6081748693342584	WITHOUT_CLASSIFICATION	0.39182513066574165	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.6081748693342584	WITHOUT_CLASSIFICATION	0.39182513066574165	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9997957301975783	WITHOUT_CLASSIFICATION	2.0426980242168656E-4	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.9999215276201855	WITHOUT_CLASSIFICATION	7.84723798145025E-5	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.9996770268292953	WITHOUT_CLASSIFICATION	3.2297317070468005E-4	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998352469716406	WITHOUT_CLASSIFICATION	1.6475302835934318E-4	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.9999612232740157	WITHOUT_CLASSIFICATION	3.8776725984302544E-5	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9993368235993749	WITHOUT_CLASSIFICATION	6.631764006249607E-4	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9993434168267884	WITHOUT_CLASSIFICATION	6.565831732116468E-4	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9991573976266973	WITHOUT_CLASSIFICATION	8.426023733025956E-4	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999786341729274	WITHOUT_CLASSIFICATION	2.1365827072541662E-5	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.9997984214938478	WITHOUT_CLASSIFICATION	2.0157850615229147E-4	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9984974984262424	WITHOUT_CLASSIFICATION	0.0015025015737576528	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.997981194268235	WITHOUT_CLASSIFICATION	0.0020188057317650637	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999964614812005	WITHOUT_CLASSIFICATION	3.538518799489231E-5	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9991886247877256	WITHOUT_CLASSIFICATION	8.113752122744793E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999951169533997	WITHOUT_CLASSIFICATION	4.883046600277459E-6	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998352469716406	WITHOUT_CLASSIFICATION	1.6475302835934318E-4	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.9997128438039601	WITHOUT_CLASSIFICATION	2.871561960398782E-4	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9998893279489681	WITHOUT_CLASSIFICATION	1.106720510318658E-4	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9993571513424824	WITHOUT_CLASSIFICATION	6.428486575175878E-4	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9992548646157912	WITHOUT_CLASSIFICATION	7.451353842088721E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998352469716406	WITHOUT_CLASSIFICATION	1.6475302835934318E-4	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9532235632305811	WITHOUT_CLASSIFICATION	0.046776436769418894	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999378444770697	WITHOUT_CLASSIFICATION	6.215552293032127E-5	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9897840974193987	WITHOUT_CLASSIFICATION	0.010215902580601285	IMPLEMENTATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9998561364169322	WITHOUT_CLASSIFICATION	1.4386358306788584E-4	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999898108524485	WITHOUT_CLASSIFICATION	1.0189147551494515E-4	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9971459902239737	WITHOUT_CLASSIFICATION	0.002854009776026436	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9794266967475265	WITHOUT_CLASSIFICATION	0.020573303252473616	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996813185346212	WITHOUT_CLASSIFICATION	3.186814653787372E-4	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9997738329089118	WITHOUT_CLASSIFICATION	2.26167091088186E-4	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9997038767163805	WITHOUT_CLASSIFICATION	2.9612328361951017E-4	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999625766706176	WITHOUT_CLASSIFICATION	3.7423329382417694E-5	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9994841305842987	WITHOUT_CLASSIFICATION	5.158694157012872E-4	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.99985605598087	WITHOUT_CLASSIFICATION	1.4394401912997616E-4	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999339020798792	WITHOUT_CLASSIFICATION	6.609792012070097E-5	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9957764280968497	WITHOUT_CLASSIFICATION	0.004223571903150286	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9984938124810193	WITHOUT_CLASSIFICATION	0.0015061875189806813	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990872966365617	WITHOUT_CLASSIFICATION	9.127033634382638E-4	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9996448826340201	WITHOUT_CLASSIFICATION	3.551173659798618E-4	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9989831627426594	WITHOUT_CLASSIFICATION	0.0010168372573405068	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999939098876074	WITHOUT_CLASSIFICATION	6.09011239264058E-6	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980139166722822	WITHOUT_CLASSIFICATION	0.0019860833277178564	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980139166722822	WITHOUT_CLASSIFICATION	0.0019860833277178564	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9950392873268871	WITHOUT_CLASSIFICATION	0.004960712673112953	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996154281685663	WITHOUT_CLASSIFICATION	3.845718314336609E-4	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9940738157044018	WITHOUT_CLASSIFICATION	0.0059261842955982205	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9940738157044018	WITHOUT_CLASSIFICATION	0.0059261842955982205	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9940738157044018	WITHOUT_CLASSIFICATION	0.0059261842955982205	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9940738157044018	WITHOUT_CLASSIFICATION	0.0059261842955982205	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.9877927208312137	WITHOUT_CLASSIFICATION	0.01220727916878619	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.993992038311142	WITHOUT_CLASSIFICATION	0.006007961688857961	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9952429938502402	WITHOUT_CLASSIFICATION	0.00475700614975981	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9953445488255631	WITHOUT_CLASSIFICATION	0.0046554511744369125	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9942438837870481	WITHOUT_CLASSIFICATION	0.0057561162129518275	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9877954560253189	WITHOUT_CLASSIFICATION	0.012204543974680987	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9940738157044018	WITHOUT_CLASSIFICATION	0.0059261842955982205	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9940738157044018	WITHOUT_CLASSIFICATION	0.0059261842955982205	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9940738157044018	WITHOUT_CLASSIFICATION	0.0059261842955982205	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9940738157044018	WITHOUT_CLASSIFICATION	0.0059261842955982205	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999324032751874	WITHOUT_CLASSIFICATION	6.759672481252518E-5	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9195164333397352	WITHOUT_CLASSIFICATION	0.08048356666026474	IMPLEMENTATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999324939038564	WITHOUT_CLASSIFICATION	6.750609614356261E-5	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999358642729933	WITHOUT_CLASSIFICATION	6.413572700674106E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996401374076467	WITHOUT_CLASSIFICATION	3.5986259235335746E-4	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.9995965409976694	WITHOUT_CLASSIFICATION	4.034590023306382E-4	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998245291975456	WITHOUT_CLASSIFICATION	1.754708024543453E-4	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999501777734575	WITHOUT_CLASSIFICATION	4.982222654237499E-5	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9996682212684046	WITHOUT_CLASSIFICATION	3.3177873159549596E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996813185346212	WITHOUT_CLASSIFICATION	3.186814653787372E-4	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999707692111426	WITHOUT_CLASSIFICATION	2.923078885740168E-4	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999239301729389	WITHOUT_CLASSIFICATION	7.606982706108464E-5	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9997799854592732	WITHOUT_CLASSIFICATION	2.2001454072684737E-4	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9996844205966201	WITHOUT_CLASSIFICATION	3.1557940337990654E-4	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9996438959983497	WITHOUT_CLASSIFICATION	3.561040016502623E-4	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996094853232419	WITHOUT_CLASSIFICATION	3.9051467675807716E-4	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999661355741357	WITHOUT_CLASSIFICATION	3.386442586430696E-4	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996150143794894	WITHOUT_CLASSIFICATION	3.8498562051059675E-4	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9947249291638841	WITHOUT_CLASSIFICATION	0.005275070836115938	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9991906543503878	WITHOUT_CLASSIFICATION	8.09345649612289E-4	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9997460812167323	WITHOUT_CLASSIFICATION	2.539187832677341E-4	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999119147158626	WITHOUT_CLASSIFICATION	8.80852841373829E-5	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9948994320611436	WITHOUT_CLASSIFICATION	0.005100567938856373	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9997284625357539	WITHOUT_CLASSIFICATION	2.715374642462072E-4	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9998392292160221	WITHOUT_CLASSIFICATION	1.6077078397793123E-4	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9996906496774031	WITHOUT_CLASSIFICATION	3.0935032259698E-4	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9992179309008873	WITHOUT_CLASSIFICATION	7.820690991127896E-4	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9983610863499005	WITHOUT_CLASSIFICATION	0.0016389136500995355	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9964106666344303	WITHOUT_CLASSIFICATION	0.003589333365569705	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999823240648668	WITHOUT_CLASSIFICATION	1.767593513335553E-5	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9994020514898918	WITHOUT_CLASSIFICATION	5.979485101083082E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996813185346212	WITHOUT_CLASSIFICATION	3.186814653787372E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996401374076467	WITHOUT_CLASSIFICATION	3.5986259235335746E-4	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9982002059022055	WITHOUT_CLASSIFICATION	0.001799794097794514	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999856493671766	WITHOUT_CLASSIFICATION	1.4350632823303552E-5	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9997622842107449	WITHOUT_CLASSIFICATION	2.3771578925502963E-4	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999324939038564	WITHOUT_CLASSIFICATION	6.750609614356261E-5	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.9995665160669515	WITHOUT_CLASSIFICATION	4.3348393304858915E-4	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9947249291638841	WITHOUT_CLASSIFICATION	0.005275070836115938	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999713102966459	WITHOUT_CLASSIFICATION	2.8689703354172386E-5	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9997161075885032	WITHOUT_CLASSIFICATION	2.838924114968323E-4	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999631486122866	WITHOUT_CLASSIFICATION	3.685138771326253E-5	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9996575824376839	WITHOUT_CLASSIFICATION	3.424175623161833E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996813185346212	WITHOUT_CLASSIFICATION	3.186814653787372E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996813185346212	WITHOUT_CLASSIFICATION	3.186814653787372E-4	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9969446985874568	WITHOUT_CLASSIFICATION	0.003055301412543187	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999692375421425	WITHOUT_CLASSIFICATION	3.0762457857431264E-5	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999753193075144	WITHOUT_CLASSIFICATION	2.4680692485557968E-5	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999743798876719	WITHOUT_CLASSIFICATION	2.562011232799043E-5	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999204807338827	WITHOUT_CLASSIFICATION	7.951926611730194E-5	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999324939038564	WITHOUT_CLASSIFICATION	6.750609614356261E-5	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9982274693438191	WITHOUT_CLASSIFICATION	0.0017725306561809215	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.9998501660239559	WITHOUT_CLASSIFICATION	1.4983397604409756E-4	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996813185346212	WITHOUT_CLASSIFICATION	3.186814653787372E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999786438641284	WITHOUT_CLASSIFICATION	2.1356135871686803E-5	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9998616045144535	WITHOUT_CLASSIFICATION	1.3839548554643369E-4	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999497216899175	WITHOUT_CLASSIFICATION	5.0278310082555257E-5	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9990091822103537	WITHOUT_CLASSIFICATION	9.908177896462479E-4	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9996644870626265	WITHOUT_CLASSIFICATION	3.355129373735215E-4	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9998271627982733	WITHOUT_CLASSIFICATION	1.7283720172664807E-4	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9988289805812961	WITHOUT_CLASSIFICATION	0.0011710194187038523	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.9998991850647049	WITHOUT_CLASSIFICATION	1.0081493529509356E-4	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9948804323221673	WITHOUT_CLASSIFICATION	0.00511956767783281	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9996768054836247	WITHOUT_CLASSIFICATION	3.2319451637523154E-4	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9996768054836247	WITHOUT_CLASSIFICATION	3.2319451637523154E-4	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999324939038564	WITHOUT_CLASSIFICATION	6.750609614356261E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996401374076467	WITHOUT_CLASSIFICATION	3.5986259235335746E-4	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9948423137680201	WITHOUT_CLASSIFICATION	0.005157686231979918	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.989805300484754	WITHOUT_CLASSIFICATION	0.010194699515245936	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9892039082714854	WITHOUT_CLASSIFICATION	0.01079609172851453	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996401374076467	WITHOUT_CLASSIFICATION	3.5986259235335746E-4	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9998616045144535	WITHOUT_CLASSIFICATION	1.3839548554643369E-4	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9968399007438888	WITHOUT_CLASSIFICATION	0.0031600992561111084	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999786438641284	WITHOUT_CLASSIFICATION	2.1356135871686803E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996813185346212	WITHOUT_CLASSIFICATION	3.186814653787372E-4	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9995933687050262	WITHOUT_CLASSIFICATION	4.06631294973656E-4	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9965353405761959	WITHOUT_CLASSIFICATION	0.0034646594238041954	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996813185346212	WITHOUT_CLASSIFICATION	3.186814653787372E-4	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999544235385447	WITHOUT_CLASSIFICATION	4.557646145533496E-5	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999631486122866	WITHOUT_CLASSIFICATION	3.685138771326253E-5	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.999736174824904	WITHOUT_CLASSIFICATION	2.638251750960172E-4	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9998221519415856	WITHOUT_CLASSIFICATION	1.778480584144686E-4	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9995220671974838	WITHOUT_CLASSIFICATION	4.779328025161016E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999786438641284	WITHOUT_CLASSIFICATION	2.1356135871686803E-5	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9995933687050262	WITHOUT_CLASSIFICATION	4.06631294973656E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996813185346212	WITHOUT_CLASSIFICATION	3.186814653787372E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996401374076467	WITHOUT_CLASSIFICATION	3.5986259235335746E-4	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9996575824376839	WITHOUT_CLASSIFICATION	3.424175623161833E-4	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9969446985874568	WITHOUT_CLASSIFICATION	0.003055301412543187	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999692375421425	WITHOUT_CLASSIFICATION	3.0762457857431264E-5	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999703448526713	WITHOUT_CLASSIFICATION	2.965514732869459E-4	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994991435725238	WITHOUT_CLASSIFICATION	5.008564274761352E-4	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9996136249824688	WITHOUT_CLASSIFICATION	3.863750175312963E-4	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999562939734113	WITHOUT_CLASSIFICATION	4.370602658866666E-5	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9982437937216799	WITHOUT_CLASSIFICATION	0.00175620627832007	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9940738157044018	WITHOUT_CLASSIFICATION	0.0059261842955982205	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999967369938304	WITHOUT_CLASSIFICATION	3.263006169485968E-6	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9992358783446281	WITHOUT_CLASSIFICATION	7.641216553718656E-4	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9997332115851828	WITHOUT_CLASSIFICATION	2.6678841481723396E-4	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9994205793813989	WITHOUT_CLASSIFICATION	5.79420618600949E-4	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9940738157044018	WITHOUT_CLASSIFICATION	0.0059261842955982205	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9940738157044018	WITHOUT_CLASSIFICATION	0.0059261842955982205	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9953445488255631	WITHOUT_CLASSIFICATION	0.0046554511744369125	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9993906165837049	WITHOUT_CLASSIFICATION	6.093834162951131E-4	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9998145624302611	WITHOUT_CLASSIFICATION	1.8543756973884683E-4	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9943186464726153	WITHOUT_CLASSIFICATION	0.005681353527384691	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9940738157044018	WITHOUT_CLASSIFICATION	0.0059261842955982205	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.994249814626644	WITHOUT_CLASSIFICATION	0.0057501853733560315	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996813185346212	WITHOUT_CLASSIFICATION	3.186814653787372E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996813185346212	WITHOUT_CLASSIFICATION	3.186814653787372E-4	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9942438837870481	WITHOUT_CLASSIFICATION	0.0057561162129518275	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9940738157044018	WITHOUT_CLASSIFICATION	0.0059261842955982205	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9992179309008873	WITHOUT_CLASSIFICATION	7.820690991127896E-4	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999849878608597	WITHOUT_CLASSIFICATION	1.5012139140359354E-5	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999591147293689	WITHOUT_CLASSIFICATION	4.088527063111949E-5	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.999915985079172	WITHOUT_CLASSIFICATION	8.40149208280357E-5	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999554113400798	WITHOUT_CLASSIFICATION	4.458865992023559E-5	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999444206687725	WITHOUT_CLASSIFICATION	5.557933122761475E-5	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9995710625976041	WITHOUT_CLASSIFICATION	4.289374023959012E-4	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999310122217314	WITHOUT_CLASSIFICATION	6.898777826850073E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9989993945644015	WITHOUT_CLASSIFICATION	0.001000605435598518	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9794266967475265	WITHOUT_CLASSIFICATION	0.020573303252473616	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.998683568840203	WITHOUT_CLASSIFICATION	0.0013164311597969377	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.999947030607818	WITHOUT_CLASSIFICATION	5.296939218198176E-5	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9998024892525995	WITHOUT_CLASSIFICATION	1.9751074740048576E-4	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9996412793623702	WITHOUT_CLASSIFICATION	3.5872063762973784E-4	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999445500385813	WITHOUT_CLASSIFICATION	5.544996141869623E-5	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9996540958081787	WITHOUT_CLASSIFICATION	3.459041918213158E-4	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994656259277683	WITHOUT_CLASSIFICATION	5.343740722316609E-4	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992425273836394	WITHOUT_CLASSIFICATION	7.574726163606229E-4	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998601346719491	WITHOUT_CLASSIFICATION	1.3986532805092375E-4	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9984967866646868	WITHOUT_CLASSIFICATION	0.0015032133353132823	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9986463871666632	WITHOUT_CLASSIFICATION	0.0013536128333367402	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997871712378328	WITHOUT_CLASSIFICATION	2.128287621671846E-4	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996797249483074	WITHOUT_CLASSIFICATION	3.202750516925944E-4	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9993632346939987	WITHOUT_CLASSIFICATION	6.367653060012869E-4	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999748878326346	WITHOUT_CLASSIFICATION	2.511216736540726E-4	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9971009477515609	WITHOUT_CLASSIFICATION	0.0028990522484391495	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9997446808977187	WITHOUT_CLASSIFICATION	2.553191022812887E-4	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9993632346939987	WITHOUT_CLASSIFICATION	6.367653060012869E-4	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998150795970661	WITHOUT_CLASSIFICATION	1.8492040293395995E-4	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997299174848573	WITHOUT_CLASSIFICATION	2.7008251514264457E-4	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994816625013692	WITHOUT_CLASSIFICATION	5.183374986309165E-4	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9998009172899476	WITHOUT_CLASSIFICATION	1.9908271005235757E-4	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9996526722243195	WITHOUT_CLASSIFICATION	3.473277756805085E-4	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.999308326416588	WITHOUT_CLASSIFICATION	6.916735834120592E-4	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.9996400067138955	WITHOUT_CLASSIFICATION	3.599932861044407E-4	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9996291153117022	WITHOUT_CLASSIFICATION	3.70884688297778E-4	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9996291153117022	WITHOUT_CLASSIFICATION	3.70884688297778E-4	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999882489220095	WITHOUT_CLASSIFICATION	1.1751077990503257E-4	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9998410890938326	WITHOUT_CLASSIFICATION	1.5891090616740634E-4	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9994613760717435	WITHOUT_CLASSIFICATION	5.386239282566335E-4	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9997539300147024	WITHOUT_CLASSIFICATION	2.4606998529766775E-4	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999975035442185	WITHOUT_CLASSIFICATION	2.4964557814739528E-6	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9995025223442272	WITHOUT_CLASSIFICATION	4.974776557726772E-4	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999976798840996	WITHOUT_CLASSIFICATION	2.320115900370119E-6	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999938932222634	WITHOUT_CLASSIFICATION	6.10677773667141E-6	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9996472941435323	WITHOUT_CLASSIFICATION	3.527058564676946E-4	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9995842264426682	WITHOUT_CLASSIFICATION	4.1577355733173044E-4	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9998243804010104	WITHOUT_CLASSIFICATION	1.756195989896401E-4	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999712435624316	WITHOUT_CLASSIFICATION	2.8756437568391606E-5	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9982248566190756	WITHOUT_CLASSIFICATION	0.001775143380924535	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.8852696577258017	WITHOUT_CLASSIFICATION	0.11473034227419839	IMPLEMENTATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9990953674284455	WITHOUT_CLASSIFICATION	9.046325715544424E-4	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9996759853187777	WITHOUT_CLASSIFICATION	3.24014681222297E-4	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.99951064223745	WITHOUT_CLASSIFICATION	4.893577625500981E-4	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9984033311016588	WITHOUT_CLASSIFICATION	0.001596668898341224	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9975838799834426	WITHOUT_CLASSIFICATION	0.002416120016557384	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9994128095719063	WITHOUT_CLASSIFICATION	5.871904280936946E-4	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999027555991726	WITHOUT_CLASSIFICATION	9.72444008273394E-5	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9994960991956554	WITHOUT_CLASSIFICATION	5.039008043445446E-4	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9919762435039926	WITHOUT_CLASSIFICATION	0.008023756496007374	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999647727035397	WITHOUT_CLASSIFICATION	3.5227296460222236E-5	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9998012294996923	WITHOUT_CLASSIFICATION	1.9877050030772423E-4	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9988570907160418	WITHOUT_CLASSIFICATION	0.0011429092839582097	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9949383870333187	WITHOUT_CLASSIFICATION	0.005061612966681309	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9971094278989969	WITHOUT_CLASSIFICATION	0.002890572101003013	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9864678080568302	WITHOUT_CLASSIFICATION	0.013532191943169935	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9997965546350019	WITHOUT_CLASSIFICATION	2.0344536499811096E-4	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.9997575123934266	WITHOUT_CLASSIFICATION	2.4248760657355248E-4	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998100353995364	WITHOUT_CLASSIFICATION	1.8996460046355918E-4	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.9998664352373516	WITHOUT_CLASSIFICATION	1.335647626482833E-4	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999188688547186	WITHOUT_CLASSIFICATION	8.113114528144458E-5	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.9998433665844505	WITHOUT_CLASSIFICATION	1.5663341554950975E-4	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9991677885110596	WITHOUT_CLASSIFICATION	8.322114889404394E-4	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9756049802972878	WITHOUT_CLASSIFICATION	0.024395019702712163	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9951772373884259	WITHOUT_CLASSIFICATION	0.0048227626115741225	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999567480951855	WITHOUT_CLASSIFICATION	4.3251904814490086E-5	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9982234515233694	WITHOUT_CLASSIFICATION	0.0017765484766305388	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999204807338827	WITHOUT_CLASSIFICATION	7.951926611730194E-5	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999204807338827	WITHOUT_CLASSIFICATION	7.951926611730194E-5	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9997876533185815	WITHOUT_CLASSIFICATION	2.1234668141852645E-4	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999445751566662	WITHOUT_CLASSIFICATION	5.542484333384603E-5	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9998873755373074	WITHOUT_CLASSIFICATION	1.1262446269255308E-4	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999598421699148	WITHOUT_CLASSIFICATION	4.015783008523596E-5	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998207677908332	WITHOUT_CLASSIFICATION	1.7923220916684027E-4	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.9989190567801699	WITHOUT_CLASSIFICATION	0.0010809432198300415	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9998075219911415	WITHOUT_CLASSIFICATION	1.924780088583814E-4	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9982619350919831	WITHOUT_CLASSIFICATION	0.0017380649080168014	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999889468888896	WITHOUT_CLASSIFICATION	1.1053111110293222E-5	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.9974388259258935	WITHOUT_CLASSIFICATION	0.0025611740741064187	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9992810682553024	WITHOUT_CLASSIFICATION	7.18931744697622E-4	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.997803393795355	WITHOUT_CLASSIFICATION	0.0021966062046449874	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9993397828104217	WITHOUT_CLASSIFICATION	6.602171895783821E-4	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9996154413921097	WITHOUT_CLASSIFICATION	3.845586078902144E-4	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9998137665016517	WITHOUT_CLASSIFICATION	1.8623349834839456E-4	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9995525608560974	WITHOUT_CLASSIFICATION	4.4743914390248064E-4	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9996378653784701	WITHOUT_CLASSIFICATION	3.621346215298703E-4	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9974402438795962	WITHOUT_CLASSIFICATION	0.002559756120403753	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9992601467903383	WITHOUT_CLASSIFICATION	7.398532096616678E-4	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9993042599960571	WITHOUT_CLASSIFICATION	6.95740003942899E-4	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.9986556349253297	WITHOUT_CLASSIFICATION	0.001344365074670353	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9998636116048626	WITHOUT_CLASSIFICATION	1.3638839513738777E-4	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9993042599960571	WITHOUT_CLASSIFICATION	6.95740003942899E-4	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999526764056971	WITHOUT_CLASSIFICATION	4.732359430286967E-5	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.9999112483231617	WITHOUT_CLASSIFICATION	8.875167683832026E-5	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.999159737143991	WITHOUT_CLASSIFICATION	8.402628560089051E-4	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9975360599186706	WITHOUT_CLASSIFICATION	0.002463940081329416	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.9994791723436584	WITHOUT_CLASSIFICATION	5.208276563416185E-4	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999916583531562	WITHOUT_CLASSIFICATION	8.341646843863762E-6	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9997623349568141	WITHOUT_CLASSIFICATION	2.376650431859696E-4	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9997487854586546	WITHOUT_CLASSIFICATION	2.5121454134544496E-4	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9996160883282771	WITHOUT_CLASSIFICATION	3.839116717229576E-4	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999417828670433	WITHOUT_CLASSIFICATION	5.821713295674637E-5	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9997071702636796	WITHOUT_CLASSIFICATION	2.9282973632041896E-4	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9896655269257436	WITHOUT_CLASSIFICATION	0.010334473074256407	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9998535437337677	WITHOUT_CLASSIFICATION	1.4645626623221658E-4	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9959299629017364	WITHOUT_CLASSIFICATION	0.0040700370982635825	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9975740532120496	WITHOUT_CLASSIFICATION	0.002425946787950299	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9996682212684046	WITHOUT_CLASSIFICATION	3.3177873159549596E-4	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9996682212684046	WITHOUT_CLASSIFICATION	3.3177873159549596E-4	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9938374082249909	WITHOUT_CLASSIFICATION	0.0061625917750090815	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.9996682212684046	WITHOUT_CLASSIFICATION	3.3177873159549596E-4	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9993530918615809	WITHOUT_CLASSIFICATION	6.469081384189928E-4	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9942656842152281	WITHOUT_CLASSIFICATION	0.00573431578477183	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9995116553145421	WITHOUT_CLASSIFICATION	4.883446854578939E-4	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999022889331528	WITHOUT_CLASSIFICATION	9.771106684722085E-5	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.9999318275732862	WITHOUT_CLASSIFICATION	6.817242671374459E-5	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9557536717595285	WITHOUT_CLASSIFICATION	0.044246328240471554	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.8804476410038129	WITHOUT_CLASSIFICATION	0.11955235899618703	IMPLEMENTATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9971246705223201	WITHOUT_CLASSIFICATION	0.0028753294776798248	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9981728203887568	WITHOUT_CLASSIFICATION	0.001827179611243147	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9972874379983303	WITHOUT_CLASSIFICATION	0.0027125620016697294	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9996694931763803	WITHOUT_CLASSIFICATION	3.30506823619677E-4	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9996540958081787	WITHOUT_CLASSIFICATION	3.459041918213158E-4	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9997372129906839	WITHOUT_CLASSIFICATION	2.6278700931622537E-4	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999754016965422	WITHOUT_CLASSIFICATION	2.459830345775756E-5	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9958444263428706	WITHOUT_CLASSIFICATION	0.004155573657129316	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999531879773178	WITHOUT_CLASSIFICATION	4.681202268216188E-5	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999755916145305	WITHOUT_CLASSIFICATION	2.4408385469413144E-5	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.9989550225350381	WITHOUT_CLASSIFICATION	0.0010449774649618686	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9902299779035403	WITHOUT_CLASSIFICATION	0.009770022096459708	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999140182416284	WITHOUT_CLASSIFICATION	8.598175837161373E-5	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9997106508320236	WITHOUT_CLASSIFICATION	2.893491679764299E-4	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9995677772426417	WITHOUT_CLASSIFICATION	4.322227573582657E-4	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999273018038916	WITHOUT_CLASSIFICATION	7.269819610848083E-5	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9997163007819087	WITHOUT_CLASSIFICATION	2.83699218091321E-4	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.999385567615144	WITHOUT_CLASSIFICATION	6.144323848561201E-4	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9996075365347353	WITHOUT_CLASSIFICATION	3.9246346526467744E-4	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9991321377174002	WITHOUT_CLASSIFICATION	8.678622825998735E-4	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9996248300045429	WITHOUT_CLASSIFICATION	3.7516999545698904E-4	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999683327350005	WITHOUT_CLASSIFICATION	3.166726499953746E-5	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9995493995829772	WITHOUT_CLASSIFICATION	4.50600417022843E-4	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999917099464251	WITHOUT_CLASSIFICATION	8.290053574948545E-6	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9991427481982603	WITHOUT_CLASSIFICATION	8.57251801739675E-4	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9995459867060102	WITHOUT_CLASSIFICATION	4.5401329398971204E-4	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9995256396410975	WITHOUT_CLASSIFICATION	4.743603589024794E-4	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999101505960756	WITHOUT_CLASSIFICATION	8.98494039243638E-5	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.9990922494987424	WITHOUT_CLASSIFICATION	9.077505012576631E-4	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.9997837983309826	WITHOUT_CLASSIFICATION	2.162016690173407E-4	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9990858187733874	WITHOUT_CLASSIFICATION	9.141812266126001E-4	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999821683872322	WITHOUT_CLASSIFICATION	1.7831612767820757E-5	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9905988828183152	WITHOUT_CLASSIFICATION	0.00940111718168485	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.984842964991185	WITHOUT_CLASSIFICATION	0.015157035008815064	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982472484798545	WITHOUT_CLASSIFICATION	0.001752751520145523	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99894505530345	WITHOUT_CLASSIFICATION	0.001054944696549983	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998677032179464	WITHOUT_CLASSIFICATION	1.322967820535739E-4	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9993583353866625	WITHOUT_CLASSIFICATION	6.416646133375123E-4	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9998152051545368	WITHOUT_CLASSIFICATION	1.8479484546313243E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9989993945644015	WITHOUT_CLASSIFICATION	0.001000605435598518	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9989993945644015	WITHOUT_CLASSIFICATION	0.001000605435598518	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9998321814199318	WITHOUT_CLASSIFICATION	1.6781858006828325E-4	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.962464552785555	WITHOUT_CLASSIFICATION	0.037535447214445114	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9997683696563411	WITHOUT_CLASSIFICATION	2.316303436589323E-4	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993965182788628	WITHOUT_CLASSIFICATION	6.034817211371797E-4	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9997683696563411	WITHOUT_CLASSIFICATION	2.316303436589323E-4	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9989394762582635	WITHOUT_CLASSIFICATION	0.0010605237417365624	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9997804122827721	WITHOUT_CLASSIFICATION	2.1958771722786243E-4	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999004173799351	WITHOUT_CLASSIFICATION	9.958262006497468E-5	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999331405650382	WITHOUT_CLASSIFICATION	6.685943496174523E-5	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998093571523509	WITHOUT_CLASSIFICATION	1.9064284764910548E-4	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9997756320679224	WITHOUT_CLASSIFICATION	2.243679320774507E-4	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9996100450963669	WITHOUT_CLASSIFICATION	3.89954903633155E-4	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.9995728863716946	WITHOUT_CLASSIFICATION	4.271136283052991E-4	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9976201893747104	WITHOUT_CLASSIFICATION	0.002379810625289591	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.7950805644667236	IMPLEMENTATION	0.2049194355332763	WITHOUT_CLASSIFICATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.9959129665031099	WITHOUT_CLASSIFICATION	0.0040870334968901335	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9936671436264211	WITHOUT_CLASSIFICATION	0.006332856373578926	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.999735539640015	WITHOUT_CLASSIFICATION	2.644603599849818E-4	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9997672260516576	WITHOUT_CLASSIFICATION	2.3277394834229153E-4	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.7763597559807639	WITHOUT_CLASSIFICATION	0.22364024401923607	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9975540541396385	WITHOUT_CLASSIFICATION	0.0024459458603615434	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9997992681047715	WITHOUT_CLASSIFICATION	2.0073189522858874E-4	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9997992681047715	WITHOUT_CLASSIFICATION	2.0073189522858874E-4	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.9996574409314328	WITHOUT_CLASSIFICATION	3.425590685671917E-4	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9994296585973732	WITHOUT_CLASSIFICATION	5.703414026268546E-4	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999922857702648	WITHOUT_CLASSIFICATION	7.714229735165756E-6	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999030416840343	WITHOUT_CLASSIFICATION	9.69583159655843E-5	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9991753262564589	WITHOUT_CLASSIFICATION	8.246737435409827E-4	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9990134615850911	WITHOUT_CLASSIFICATION	9.865384149088691E-4	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9971713788762674	WITHOUT_CLASSIFICATION	0.0028286211237326508	IMPLEMENTATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999861084609576	WITHOUT_CLASSIFICATION	1.3891539042363173E-5	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.9995271277296107	WITHOUT_CLASSIFICATION	4.728722703893567E-4	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999093907312514	WITHOUT_CLASSIFICATION	9.060926874861943E-5	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998907271910341	WITHOUT_CLASSIFICATION	1.0927280896589427E-4	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9971227798250186	WITHOUT_CLASSIFICATION	0.002877220174981304	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.999392854856665	WITHOUT_CLASSIFICATION	6.07145143335001E-4	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999378655553762	WITHOUT_CLASSIFICATION	6.21344446237142E-5	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9989216144910187	WITHOUT_CLASSIFICATION	0.0010783855089812591	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9982598884644848	WITHOUT_CLASSIFICATION	0.0017401115355152683	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999472618926822	WITHOUT_CLASSIFICATION	5.2738107317848905E-5	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9975981607594865	WITHOUT_CLASSIFICATION	0.0024018392405135342	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.9977056527515872	WITHOUT_CLASSIFICATION	0.0022943472484127877	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999959251764043	WITHOUT_CLASSIFICATION	4.074823595620048E-6	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9996426624517748	WITHOUT_CLASSIFICATION	3.5733754822527507E-4	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9984470891727025	WITHOUT_CLASSIFICATION	0.0015529108272974925	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9994463198598517	WITHOUT_CLASSIFICATION	5.536801401482731E-4	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9994828599470326	WITHOUT_CLASSIFICATION	5.171400529674696E-4	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.9995362293722841	WITHOUT_CLASSIFICATION	4.6377062771586796E-4	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.9999731998248045	WITHOUT_CLASSIFICATION	2.68001751954403E-5	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9994143770410029	WITHOUT_CLASSIFICATION	5.856229589971511E-4	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9881727557556654	WITHOUT_CLASSIFICATION	0.011827244244334576	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9997526009090022	WITHOUT_CLASSIFICATION	2.4739909099772165E-4	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999805025313296	WITHOUT_CLASSIFICATION	1.9497468670419927E-5	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999115544971655	WITHOUT_CLASSIFICATION	8.844550283450031E-5	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9998040939308976	WITHOUT_CLASSIFICATION	1.95906069102241E-4	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9992066734113404	WITHOUT_CLASSIFICATION	7.933265886597339E-4	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9897898207441377	WITHOUT_CLASSIFICATION	0.010210179255862404	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999749433560833	WITHOUT_CLASSIFICATION	2.50566439166498E-5	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9998674232605059	WITHOUT_CLASSIFICATION	1.3257673949404009E-4	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999272151134114	WITHOUT_CLASSIFICATION	7.278488658858742E-5	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999273278765832	WITHOUT_CLASSIFICATION	7.267212341680954E-5	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999862184944133	WITHOUT_CLASSIFICATION	1.3781505586707319E-5	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9989259523266767	WITHOUT_CLASSIFICATION	0.0010740476733233472	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9994816725570768	WITHOUT_CLASSIFICATION	5.183274429232122E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996196263472038	WITHOUT_CLASSIFICATION	3.803736527962629E-4	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9994397021403832	WITHOUT_CLASSIFICATION	5.602978596168135E-4	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.974536867548285	WITHOUT_CLASSIFICATION	0.025463132451714963	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9991804597300591	WITHOUT_CLASSIFICATION	8.195402699408644E-4	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9987584790043912	WITHOUT_CLASSIFICATION	0.0012415209956088743	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9977852618253388	WITHOUT_CLASSIFICATION	0.0022147381746611306	IMPLEMENTATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999984568758706	WITHOUT_CLASSIFICATION	1.5431241294757967E-6	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9991857286249641	WITHOUT_CLASSIFICATION	8.142713750358924E-4	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.99988311074527	WITHOUT_CLASSIFICATION	1.1688925472987834E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996196263472038	WITHOUT_CLASSIFICATION	3.803736527962629E-4	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999349194862074	WITHOUT_CLASSIFICATION	6.508051379267146E-5	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999187827704871	WITHOUT_CLASSIFICATION	8.121722951301498E-5	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9944575733278634	WITHOUT_CLASSIFICATION	0.005542426672136513	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.9998708285180714	WITHOUT_CLASSIFICATION	1.2917148192859805E-4	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999764536904976	WITHOUT_CLASSIFICATION	2.3546309502326743E-5	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999911942160276	WITHOUT_CLASSIFICATION	8.805783972361151E-6	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.999990002992036	WITHOUT_CLASSIFICATION	9.997007964002561E-6	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9990456063579549	WITHOUT_CLASSIFICATION	9.543936420450358E-4	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9996278397792213	WITHOUT_CLASSIFICATION	3.7216022077871125E-4	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9973362491312755	WITHOUT_CLASSIFICATION	0.0026637508687244503	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9993815273076503	WITHOUT_CLASSIFICATION	6.184726923496329E-4	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.999427556619236	WITHOUT_CLASSIFICATION	5.724433807640888E-4	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999144348243114	WITHOUT_CLASSIFICATION	8.556517568858899E-5	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.997999338971153	WITHOUT_CLASSIFICATION	0.0020006610288469708	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999026704014818	WITHOUT_CLASSIFICATION	9.732959851806253E-5	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999902395624944	WITHOUT_CLASSIFICATION	9.760437505504472E-6	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9995329305704848	WITHOUT_CLASSIFICATION	4.6706942951516277E-4	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9993802906110478	WITHOUT_CLASSIFICATION	6.197093889521885E-4	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9974161770496057	WITHOUT_CLASSIFICATION	0.002583822950394341	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9959761608273886	WITHOUT_CLASSIFICATION	0.00402383917261142	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9919341866824162	WITHOUT_CLASSIFICATION	0.008065813317583872	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999359841787103	WITHOUT_CLASSIFICATION	6.401582128967349E-5	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9996482584955497	WITHOUT_CLASSIFICATION	3.517415044503364E-4	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999678443077398	WITHOUT_CLASSIFICATION	3.2155692260204437E-4	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998096196278505	WITHOUT_CLASSIFICATION	1.9038037214952293E-4	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9998258582750058	WITHOUT_CLASSIFICATION	1.7414172499418204E-4	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.967791403278658	WITHOUT_CLASSIFICATION	0.03220859672134195	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9955015769894268	WITHOUT_CLASSIFICATION	0.004498423010573227	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997776484238251	WITHOUT_CLASSIFICATION	2.2235157617484704E-4	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9961750678369972	WITHOUT_CLASSIFICATION	0.0038249321630028986	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9990196981191054	WITHOUT_CLASSIFICATION	9.803018808945934E-4	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999997090816276	WITHOUT_CLASSIFICATION	2.909183723674661E-7	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9998820684426953	WITHOUT_CLASSIFICATION	1.1793155730466859E-4	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999909504079872	WITHOUT_CLASSIFICATION	9.049592012748947E-6	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999536702436477	WITHOUT_CLASSIFICATION	4.632975635225728E-5	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9989050261329222	WITHOUT_CLASSIFICATION	0.0010949738670778726	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999909504079872	WITHOUT_CLASSIFICATION	9.049592012748947E-6	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9962593529520791	WITHOUT_CLASSIFICATION	0.0037406470479208653	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9998820684426953	WITHOUT_CLASSIFICATION	1.1793155730466859E-4	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9998004745277794	WITHOUT_CLASSIFICATION	1.9952547222057017E-4	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999909504079872	WITHOUT_CLASSIFICATION	9.049592012748947E-6	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998618928357828	WITHOUT_CLASSIFICATION	1.381071642172343E-4	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9003244184750946	WITHOUT_CLASSIFICATION	0.0996755815249054	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998907271910341	WITHOUT_CLASSIFICATION	1.0927280896589427E-4	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999747611667406	WITHOUT_CLASSIFICATION	2.5238833259399608E-5	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9995710625976041	WITHOUT_CLASSIFICATION	4.289374023959012E-4	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999852089133971	WITHOUT_CLASSIFICATION	1.4791086602759844E-5	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9997035969460057	WITHOUT_CLASSIFICATION	2.964030539942553E-4	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999816940564655	WITHOUT_CLASSIFICATION	1.83059435345035E-5	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.9998263800642468	WITHOUT_CLASSIFICATION	1.7361993575317592E-4	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998697724069153	WITHOUT_CLASSIFICATION	1.3022759308457555E-4	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9998977109578746	WITHOUT_CLASSIFICATION	1.0228904212540119E-4	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9996682212684046	WITHOUT_CLASSIFICATION	3.3177873159549596E-4	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.999694941007751	WITHOUT_CLASSIFICATION	3.0505899224893024E-4	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997011184336193	WITHOUT_CLASSIFICATION	2.988815663808066E-4	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.999972043744021	WITHOUT_CLASSIFICATION	2.795625597895981E-5	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9985884497112905	WITHOUT_CLASSIFICATION	0.001411550288709594	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9990227565544334	WITHOUT_CLASSIFICATION	9.772434455666047E-4	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9991614869205852	WITHOUT_CLASSIFICATION	8.385130794149359E-4	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9997047504545216	WITHOUT_CLASSIFICATION	2.9524954547844825E-4	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9994267019088396	WITHOUT_CLASSIFICATION	5.732980911603377E-4	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.999908219618672	WITHOUT_CLASSIFICATION	9.178038132794556E-5	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999095283973242	WITHOUT_CLASSIFICATION	9.047160267585246E-5	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9996682212684046	WITHOUT_CLASSIFICATION	3.3177873159549596E-4	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999167018099715	WITHOUT_CLASSIFICATION	8.32981900285331E-5	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999475216438983	WITHOUT_CLASSIFICATION	5.247835610174363E-5	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9998351260196285	WITHOUT_CLASSIFICATION	1.648739803713357E-4	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9997022504973975	WITHOUT_CLASSIFICATION	2.977495026024839E-4	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.9996020970190221	WITHOUT_CLASSIFICATION	3.979029809778639E-4	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.9995110876357133	WITHOUT_CLASSIFICATION	4.889123642867746E-4	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9960888230736297	WITHOUT_CLASSIFICATION	0.003911176926370175	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99860602098724	WITHOUT_CLASSIFICATION	0.001393979012759961	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.997569917295338	WITHOUT_CLASSIFICATION	0.0024300827046621017	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9992721764463084	WITHOUT_CLASSIFICATION	7.278235536916928E-4	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9998819710927975	WITHOUT_CLASSIFICATION	1.1802890720252049E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9997142024696065	WITHOUT_CLASSIFICATION	2.857975303934347E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9997142024696065	WITHOUT_CLASSIFICATION	2.857975303934347E-4	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9998254280652192	WITHOUT_CLASSIFICATION	1.7457193478066728E-4	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.999086836311837	WITHOUT_CLASSIFICATION	9.131636881630571E-4	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9998709260011479	WITHOUT_CLASSIFICATION	1.2907399885205733E-4	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9998154881996713	WITHOUT_CLASSIFICATION	1.8451180032868144E-4	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9960484847749241	WITHOUT_CLASSIFICATION	0.003951515225075761	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9998523906458844	WITHOUT_CLASSIFICATION	1.4760935411564188E-4	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.999855348810269	WITHOUT_CLASSIFICATION	1.4465118973104558E-4	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999759560048345	WITHOUT_CLASSIFICATION	2.4043995165596986E-5	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9996609456761711	WITHOUT_CLASSIFICATION	3.390543238288442E-4	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.99987959143785	WITHOUT_CLASSIFICATION	1.2040856215001654E-4	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.997727856064693	WITHOUT_CLASSIFICATION	0.002272143935306965	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9995734736521935	WITHOUT_CLASSIFICATION	4.265263478064987E-4	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9997704406437623	WITHOUT_CLASSIFICATION	2.2955935623769112E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9997142024696065	WITHOUT_CLASSIFICATION	2.857975303934347E-4	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999074008081474	WITHOUT_CLASSIFICATION	9.259919185261282E-4	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9993714158003896	WITHOUT_CLASSIFICATION	6.285841996103472E-4	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9996890353684926	WITHOUT_CLASSIFICATION	3.1096463150742486E-4	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999359852849031	WITHOUT_CLASSIFICATION	6.40147150969221E-5	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9994180457692343	WITHOUT_CLASSIFICATION	5.819542307656596E-4	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9991109101370161	WITHOUT_CLASSIFICATION	8.890898629837549E-4	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999676213005262	WITHOUT_CLASSIFICATION	3.237869947378949E-5	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999825055866078	WITHOUT_CLASSIFICATION	1.7494413392202333E-4	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999731397564812	WITHOUT_CLASSIFICATION	2.6860243518799735E-4	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9992283316964777	WITHOUT_CLASSIFICATION	7.71668303522157E-4	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9987917340009218	WITHOUT_CLASSIFICATION	0.0012082659990782336	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9960888230736297	WITHOUT_CLASSIFICATION	0.003911176926370175	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9997142024696065	WITHOUT_CLASSIFICATION	2.857975303934347E-4	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9997248653674573	WITHOUT_CLASSIFICATION	2.751346325426675E-4	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9977268891427045	WITHOUT_CLASSIFICATION	0.002273110857295597	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.9994312533299503	WITHOUT_CLASSIFICATION	5.687466700497176E-4	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9996121375897996	WITHOUT_CLASSIFICATION	3.878624102003926E-4	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999261470204337	WITHOUT_CLASSIFICATION	7.385297956630211E-5	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9992625047804615	WITHOUT_CLASSIFICATION	7.374952195384612E-4	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995619995470986	WITHOUT_CLASSIFICATION	4.380004529013801E-4	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999961879462879	WITHOUT_CLASSIFICATION	3.8120537121255626E-6	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9998933195215012	WITHOUT_CLASSIFICATION	1.066804784988246E-4	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9997843886761822	WITHOUT_CLASSIFICATION	2.1561132381771753E-4	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9985776731142959	WITHOUT_CLASSIFICATION	0.001422326885704141	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9997526009090022	WITHOUT_CLASSIFICATION	2.4739909099772165E-4	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9994698292975329	WITHOUT_CLASSIFICATION	5.301707024671855E-4	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9995119394243335	WITHOUT_CLASSIFICATION	4.880605756665721E-4	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9989394762582635	WITHOUT_CLASSIFICATION	0.0010605237417365624	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999227376684633	WITHOUT_CLASSIFICATION	7.726233153664961E-5	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999808377421241	WITHOUT_CLASSIFICATION	1.916225787596702E-5	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.999858369994065	WITHOUT_CLASSIFICATION	1.416300059351585E-4	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.9990975954517908	WITHOUT_CLASSIFICATION	9.02404548209101E-4	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.998905127204119	WITHOUT_CLASSIFICATION	0.001094872795880991	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9989094038157379	WITHOUT_CLASSIFICATION	0.001090596184262087	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9989094038157379	WITHOUT_CLASSIFICATION	0.001090596184262087	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9997684358140095	WITHOUT_CLASSIFICATION	2.3156418599043412E-4	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.999986160341347	WITHOUT_CLASSIFICATION	1.383965865299741E-5	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9997051521930045	WITHOUT_CLASSIFICATION	2.9484780699554E-4	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998811549421722	WITHOUT_CLASSIFICATION	1.1884505782770834E-4	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999454371743586	WITHOUT_CLASSIFICATION	5.456282564139336E-4	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9998937995034991	WITHOUT_CLASSIFICATION	1.0620049650099575E-4	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9994920781455645	WITHOUT_CLASSIFICATION	5.079218544354555E-4	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9922942579595194	WITHOUT_CLASSIFICATION	0.0077057420404805605	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9922942579595194	WITHOUT_CLASSIFICATION	0.0077057420404805605	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.5767385853702964	IMPLEMENTATION	0.4232614146297036	WITHOUT_CLASSIFICATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.9997924797251064	WITHOUT_CLASSIFICATION	2.0752027489345806E-4	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999909671383603	WITHOUT_CLASSIFICATION	9.032861639617383E-6	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9994496982317146	WITHOUT_CLASSIFICATION	5.503017682855046E-4	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9994496982317146	WITHOUT_CLASSIFICATION	5.503017682855046E-4	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9994496982317146	WITHOUT_CLASSIFICATION	5.503017682855046E-4	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9985985040102398	WITHOUT_CLASSIFICATION	0.0014014959897602332	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999852045510554	WITHOUT_CLASSIFICATION	1.479544894460641E-4	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9361615884598083	WITHOUT_CLASSIFICATION	0.06383841154019161	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9995974145548345	WITHOUT_CLASSIFICATION	4.0258544516547415E-4	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999556876722009	WITHOUT_CLASSIFICATION	4.431232779905828E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9997142024696065	WITHOUT_CLASSIFICATION	2.857975303934347E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9997142024696065	WITHOUT_CLASSIFICATION	2.857975303934347E-4	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9941439638897656	WITHOUT_CLASSIFICATION	0.005856036110234536	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999613174530699	WITHOUT_CLASSIFICATION	3.868254693007014E-5	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9897060487224179	WITHOUT_CLASSIFICATION	0.01029395127758214	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.999558516651221	WITHOUT_CLASSIFICATION	4.414833487791335E-4	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9996773315185674	WITHOUT_CLASSIFICATION	3.2266848143261287E-4	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999093469208641	WITHOUT_CLASSIFICATION	9.065307913594934E-5	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999005928951543	WITHOUT_CLASSIFICATION	9.940710484561085E-5	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999421174691601	WITHOUT_CLASSIFICATION	5.788253083985763E-5	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999978465307929	WITHOUT_CLASSIFICATION	2.1534692070145097E-6	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999896460954955	WITHOUT_CLASSIFICATION	1.0353904504495138E-4	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9993291408673952	WITHOUT_CLASSIFICATION	6.708591326047393E-4	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9998563845006968	WITHOUT_CLASSIFICATION	1.4361549930312596E-4	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9998563845006968	WITHOUT_CLASSIFICATION	1.4361549930312596E-4	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9998563845006968	WITHOUT_CLASSIFICATION	1.4361549930312596E-4	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9998563845006968	WITHOUT_CLASSIFICATION	1.4361549930312596E-4	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9998563845006968	WITHOUT_CLASSIFICATION	1.4361549930312596E-4	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998329341466332	WITHOUT_CLASSIFICATION	1.670658533667128E-4	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998329341466332	WITHOUT_CLASSIFICATION	1.670658533667128E-4	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998329341466332	WITHOUT_CLASSIFICATION	1.670658533667128E-4	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998329341466332	WITHOUT_CLASSIFICATION	1.670658533667128E-4	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9978754328021163	WITHOUT_CLASSIFICATION	0.0021245671978836833	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9989094038157379	WITHOUT_CLASSIFICATION	0.001090596184262087	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9988206352843972	WITHOUT_CLASSIFICATION	0.0011793647156027954	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998329341466332	WITHOUT_CLASSIFICATION	1.670658533667128E-4	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9995814670567726	WITHOUT_CLASSIFICATION	4.185329432273361E-4	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9996452556343366	WITHOUT_CLASSIFICATION	3.5474436566340737E-4	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.99991851343994	WITHOUT_CLASSIFICATION	8.14865600599748E-5	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999136091789628	WITHOUT_CLASSIFICATION	8.639082103716109E-5	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999994212510415	WITHOUT_CLASSIFICATION	5.787489584988924E-7	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.99981173206402	WITHOUT_CLASSIFICATION	1.8826793598011345E-4	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9997837101800416	WITHOUT_CLASSIFICATION	2.1628981995832827E-4	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999045193986088	WITHOUT_CLASSIFICATION	9.548060139130847E-5	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999081100499875	WITHOUT_CLASSIFICATION	9.188995001246045E-5	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999997591519918	WITHOUT_CLASSIFICATION	2.408480082832192E-7	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999812499181117	WITHOUT_CLASSIFICATION	1.8750081888348938E-5	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.9997752582247927	WITHOUT_CLASSIFICATION	2.2474177520731263E-4	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9996095928005827	WITHOUT_CLASSIFICATION	3.9040719941731936E-4	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.9993663187851378	WITHOUT_CLASSIFICATION	6.336812148621815E-4	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.920420811664267	WITHOUT_CLASSIFICATION	0.07957918833573296	IMPLEMENTATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9993163234212646	WITHOUT_CLASSIFICATION	6.836765787353222E-4	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999770546747163	WITHOUT_CLASSIFICATION	2.2945325283641207E-5	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998222671795308	WITHOUT_CLASSIFICATION	1.77732820469148E-4	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998222671795308	WITHOUT_CLASSIFICATION	1.77732820469148E-4	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.9997559023368926	WITHOUT_CLASSIFICATION	2.4409766310746345E-4	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999853994147955	WITHOUT_CLASSIFICATION	1.4600585204550814E-5	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9997502984781299	WITHOUT_CLASSIFICATION	2.4970152187015697E-4	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999443515270691	WITHOUT_CLASSIFICATION	5.564847293089822E-4	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.99986750939679	WITHOUT_CLASSIFICATION	1.3249060320989165E-4	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9997940986837568	WITHOUT_CLASSIFICATION	2.0590131624330165E-4	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9995909526859764	WITHOUT_CLASSIFICATION	4.0904731402361305E-4	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.99994554329253	WITHOUT_CLASSIFICATION	5.445670747004449E-5	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9997478319704866	WITHOUT_CLASSIFICATION	2.521680295134249E-4	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999799246076265	WITHOUT_CLASSIFICATION	2.0075392373456412E-5	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9994874499169277	WITHOUT_CLASSIFICATION	5.125500830723273E-4	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9997526009090022	WITHOUT_CLASSIFICATION	2.4739909099772165E-4	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999279482370983	WITHOUT_CLASSIFICATION	7.20517629016927E-5	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999758553550553	WITHOUT_CLASSIFICATION	2.4144644944645664E-5	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999796879436077	WITHOUT_CLASSIFICATION	2.0312056392253912E-5	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9998245800724038	WITHOUT_CLASSIFICATION	1.754199275962474E-4	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999764792281729	WITHOUT_CLASSIFICATION	2.352077182711972E-5	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999764792281729	WITHOUT_CLASSIFICATION	2.352077182711972E-5	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9988028123040295	WITHOUT_CLASSIFICATION	0.0011971876959706125	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999998136454453	WITHOUT_CLASSIFICATION	1.863545547247164E-7	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.9998769116014687	WITHOUT_CLASSIFICATION	1.2308839853129597E-4	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.9998941896724063	WITHOUT_CLASSIFICATION	1.0581032759372732E-4	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.9998075409745205	WITHOUT_CLASSIFICATION	1.924590254794285E-4	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9996602763516691	WITHOUT_CLASSIFICATION	3.397236483308242E-4	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9975963339444096	WITHOUT_CLASSIFICATION	0.002403666055590346	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9998572107079127	WITHOUT_CLASSIFICATION	1.427892920873335E-4	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9996984089732638	WITHOUT_CLASSIFICATION	3.01591026736221E-4	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999823189296226	WITHOUT_CLASSIFICATION	1.768107037738457E-5	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9998745096455394	WITHOUT_CLASSIFICATION	1.254903544606099E-4	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9998572107079127	WITHOUT_CLASSIFICATION	1.427892920873335E-4	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9971626459039606	WITHOUT_CLASSIFICATION	0.0028373540960394857	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9971250844748732	WITHOUT_CLASSIFICATION	0.0028749155251266657	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9995577726177884	WITHOUT_CLASSIFICATION	4.422273822116368E-4	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9992046572460485	WITHOUT_CLASSIFICATION	7.953427539515618E-4	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999997590896458	WITHOUT_CLASSIFICATION	2.4091035427190236E-7	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9997795978319823	WITHOUT_CLASSIFICATION	2.2040216801773346E-4	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9940475775076643	WITHOUT_CLASSIFICATION	0.0059524224923357535	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9996845230599288	WITHOUT_CLASSIFICATION	3.154769400711379E-4	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9997223851934647	WITHOUT_CLASSIFICATION	2.7761480653533383E-4	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998090197494935	WITHOUT_CLASSIFICATION	1.9098025050640055E-4	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9995192338209804	WITHOUT_CLASSIFICATION	4.8076617901963276E-4	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9996979020095447	WITHOUT_CLASSIFICATION	3.020979904553491E-4	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9994835405129447	WITHOUT_CLASSIFICATION	5.164594870552721E-4	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9990883260204484	WITHOUT_CLASSIFICATION	9.116739795516624E-4	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9991423844505299	WITHOUT_CLASSIFICATION	8.576155494702032E-4	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9998799661350904	WITHOUT_CLASSIFICATION	1.2003386490960975E-4	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9995146480452692	WITHOUT_CLASSIFICATION	4.8535195473083575E-4	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9728669375171625	WITHOUT_CLASSIFICATION	0.02713306248283761	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9728669375171625	WITHOUT_CLASSIFICATION	0.02713306248283761	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9940475775076643	WITHOUT_CLASSIFICATION	0.0059524224923357535	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9713670919492206	WITHOUT_CLASSIFICATION	0.02863290805077944	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.988535747111418	WITHOUT_CLASSIFICATION	0.011464252888581926	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9994983365694593	WITHOUT_CLASSIFICATION	5.016634305406962E-4	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.9995037576173437	WITHOUT_CLASSIFICATION	4.962423826564018E-4	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9996189193268761	WITHOUT_CLASSIFICATION	3.810806731238283E-4	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9997840374983912	WITHOUT_CLASSIFICATION	2.159625016088891E-4	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999948978262018	WITHOUT_CLASSIFICATION	5.102173798195691E-5	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9980598602496132	WITHOUT_CLASSIFICATION	0.0019401397503867202	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9991101335558856	WITHOUT_CLASSIFICATION	8.898664441143946E-4	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9997451517862906	WITHOUT_CLASSIFICATION	2.54848213709454E-4	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999734424891839	WITHOUT_CLASSIFICATION	2.6557510816082775E-5	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9998054265002302	WITHOUT_CLASSIFICATION	1.9457349976977086E-4	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9991978362042803	WITHOUT_CLASSIFICATION	8.021637957198306E-4	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999711210410483	WITHOUT_CLASSIFICATION	2.8878958951666545E-5	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9986366992989737	WITHOUT_CLASSIFICATION	0.0013633007010263605	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999237025289653	WITHOUT_CLASSIFICATION	7.629747103469831E-5	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999984579774635	WITHOUT_CLASSIFICATION	1.5420225366564298E-6	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999131026290609	WITHOUT_CLASSIFICATION	8.689737093917673E-5	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9996069918019154	WITHOUT_CLASSIFICATION	3.930081980846626E-4	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9996069120375531	WITHOUT_CLASSIFICATION	3.930879624468802E-4	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9996969045297169	WITHOUT_CLASSIFICATION	3.030954702830697E-4	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999865424967621	WITHOUT_CLASSIFICATION	1.3457503237921498E-5	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9995612603235241	WITHOUT_CLASSIFICATION	4.387396764758515E-4	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999701488220408	WITHOUT_CLASSIFICATION	2.9851177959224064E-5	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999779069193051	WITHOUT_CLASSIFICATION	2.2093080694783727E-5	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9997237270434824	WITHOUT_CLASSIFICATION	2.7627295651753953E-4	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999542975926642	WITHOUT_CLASSIFICATION	4.570240733580106E-5	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999855887611858	WITHOUT_CLASSIFICATION	1.4411238814257374E-5	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999462196503808	WITHOUT_CLASSIFICATION	5.3780349619270976E-5	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9989011484336422	WITHOUT_CLASSIFICATION	0.0010988515663577795	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9986366992989737	WITHOUT_CLASSIFICATION	0.0013633007010263605	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9998954987755994	WITHOUT_CLASSIFICATION	1.0450122440068167E-4	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999995285754883	WITHOUT_CLASSIFICATION	4.714245117086386E-6	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999437221954751	WITHOUT_CLASSIFICATION	5.627780452486939E-5	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9995830039167573	WITHOUT_CLASSIFICATION	4.1699608324271696E-4	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9693836088518228	WITHOUT_CLASSIFICATION	0.030616391148177165	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999286021181706	WITHOUT_CLASSIFICATION	7.139788182937666E-5	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.9999317205558049	WITHOUT_CLASSIFICATION	6.827944419503826E-5	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9997252173701082	WITHOUT_CLASSIFICATION	2.7478262989185986E-4	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.997015953302807	WITHOUT_CLASSIFICATION	0.002984046697193012	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9986750784683027	WITHOUT_CLASSIFICATION	0.0013249215316973415	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.9997995138531235	WITHOUT_CLASSIFICATION	2.004861468765149E-4	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999985367667406	WITHOUT_CLASSIFICATION	1.4632332594260566E-6	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9992256986598279	WITHOUT_CLASSIFICATION	7.743013401720961E-4	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998901434030775	WITHOUT_CLASSIFICATION	1.0985659692256846E-4	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9990522351582526	WITHOUT_CLASSIFICATION	9.477648417474086E-4	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.8820326820097576	WITHOUT_CLASSIFICATION	0.1179673179902423	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999909912584063	WITHOUT_CLASSIFICATION	9.00874159371804E-6	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999943993437399	WITHOUT_CLASSIFICATION	5.600656260061698E-6	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9928766644499902	WITHOUT_CLASSIFICATION	0.007123335550009741	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998796310025025	WITHOUT_CLASSIFICATION	1.2036899749745395E-4	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9996984089732638	WITHOUT_CLASSIFICATION	3.01591026736221E-4	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999751989166014	WITHOUT_CLASSIFICATION	2.4801083398697025E-5	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9986366992989737	WITHOUT_CLASSIFICATION	0.0013633007010263605	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9996369752964699	WITHOUT_CLASSIFICATION	3.6302470353010303E-4	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9997745819440724	WITHOUT_CLASSIFICATION	2.2541805592742365E-4	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9997932856679965	WITHOUT_CLASSIFICATION	2.0671433200354725E-4	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9997932856679965	WITHOUT_CLASSIFICATION	2.0671433200354725E-4	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9994274719160811	WITHOUT_CLASSIFICATION	5.725280839190288E-4	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999894168268372	WITHOUT_CLASSIFICATION	1.0583173162742353E-5	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.979987226400691	WITHOUT_CLASSIFICATION	0.02001277359930895	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999710573548596	WITHOUT_CLASSIFICATION	2.8942645140451283E-5	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9995405099335375	WITHOUT_CLASSIFICATION	4.594900664626218E-4	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999401621286085	WITHOUT_CLASSIFICATION	5.98378713916498E-5	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9838907758811319	WITHOUT_CLASSIFICATION	0.016109224118868094	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9996049997046327	WITHOUT_CLASSIFICATION	3.9500029536739277E-4	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.8888182829332928	WITHOUT_CLASSIFICATION	0.11118171706670724	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.8888182829332928	WITHOUT_CLASSIFICATION	0.11118171706670724	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999844681693283	WITHOUT_CLASSIFICATION	1.5531830671785332E-5	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9606494932194198	WITHOUT_CLASSIFICATION	0.039350506780580184	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9788023280817418	WITHOUT_CLASSIFICATION	0.021197671918258162	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999595079963727	WITHOUT_CLASSIFICATION	4.049200362732345E-5	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999945511191921	WITHOUT_CLASSIFICATION	5.448880807886631E-6	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9993691527368043	WITHOUT_CLASSIFICATION	6.308472631957096E-4	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.999999291514881	WITHOUT_CLASSIFICATION	7.084851190110392E-7	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999760138795456	WITHOUT_CLASSIFICATION	2.3986120454407584E-5	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999726216885233	WITHOUT_CLASSIFICATION	2.737831147667013E-5	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.9995420689449409	WITHOUT_CLASSIFICATION	4.5793105505909966E-4	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.9995420689449409	WITHOUT_CLASSIFICATION	4.5793105505909966E-4	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9994673227051389	WITHOUT_CLASSIFICATION	5.326772948610801E-4	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999915459068311	WITHOUT_CLASSIFICATION	8.454093168912524E-6	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9991000682168977	WITHOUT_CLASSIFICATION	8.999317831022013E-4	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999965106545723	WITHOUT_CLASSIFICATION	3.4893454277509577E-6	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9996267157236746	WITHOUT_CLASSIFICATION	3.7328427632541506E-4	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9995488217104002	WITHOUT_CLASSIFICATION	4.511782895998687E-4	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999928800440373	WITHOUT_CLASSIFICATION	7.119955962800923E-6	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999061379555647	WITHOUT_CLASSIFICATION	9.386204443522205E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996813185346212	WITHOUT_CLASSIFICATION	3.186814653787372E-4	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999935007563128	WITHOUT_CLASSIFICATION	6.499243687165042E-6	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999545263386764	WITHOUT_CLASSIFICATION	4.547366132361982E-5	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999544235576348	WITHOUT_CLASSIFICATION	4.557644236531847E-5	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9996294550633682	WITHOUT_CLASSIFICATION	3.7054493663182445E-4	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9997486014549705	WITHOUT_CLASSIFICATION	2.5139854502960555E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996813185346212	WITHOUT_CLASSIFICATION	3.186814653787372E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996813185346212	WITHOUT_CLASSIFICATION	3.186814653787372E-4	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9997038767163805	WITHOUT_CLASSIFICATION	2.9612328361951017E-4	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9995347248300197	WITHOUT_CLASSIFICATION	4.6527516998036395E-4	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997162068664536	WITHOUT_CLASSIFICATION	2.8379313354641537E-4	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999324939038564	WITHOUT_CLASSIFICATION	6.750609614356261E-5	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999375051906123	WITHOUT_CLASSIFICATION	6.249480938768868E-5	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9998893279489681	WITHOUT_CLASSIFICATION	1.106720510318658E-4	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9998468257054679	WITHOUT_CLASSIFICATION	1.531742945320666E-4	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9998487373437193	WITHOUT_CLASSIFICATION	1.5126265628072227E-4	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999039679126195	WITHOUT_CLASSIFICATION	9.603208738053798E-5	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9998892231801835	WITHOUT_CLASSIFICATION	1.1077681981644391E-4	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999014492803676	WITHOUT_CLASSIFICATION	9.855071963240237E-5	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.9997176510968597	WITHOUT_CLASSIFICATION	2.8234890314020095E-4	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9994583053849349	WITHOUT_CLASSIFICATION	5.41694615065216E-4	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9914693134000058	WITHOUT_CLASSIFICATION	0.008530686599994178	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999858416837528	WITHOUT_CLASSIFICATION	1.4158316247130848E-5	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9996682212684046	WITHOUT_CLASSIFICATION	3.3177873159549596E-4	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9994183722431786	WITHOUT_CLASSIFICATION	5.816277568213883E-4	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9943186464726153	WITHOUT_CLASSIFICATION	0.005681353527384691	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.5237026929286298	WITHOUT_CLASSIFICATION	0.47629730707137025	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998809586546717	WITHOUT_CLASSIFICATION	1.1904134532822316E-4	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999982142852635	WITHOUT_CLASSIFICATION	1.7857147364973928E-6	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9997366972757329	WITHOUT_CLASSIFICATION	2.633027242670587E-4	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9947659255346356	WITHOUT_CLASSIFICATION	0.005234074465364436	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9998870945074089	WITHOUT_CLASSIFICATION	1.1290549259109121E-4	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999271307175993	WITHOUT_CLASSIFICATION	7.286928240067093E-5	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9998199904020493	WITHOUT_CLASSIFICATION	1.8000959795084104E-4	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.9993115545499719	WITHOUT_CLASSIFICATION	6.88445450028133E-4	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9998884699022439	WITHOUT_CLASSIFICATION	1.115300977560583E-4	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.999953721989925	WITHOUT_CLASSIFICATION	4.6278010074989935E-5	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.999680966409288	WITHOUT_CLASSIFICATION	3.1903359071195237E-4	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.9995665160669515	WITHOUT_CLASSIFICATION	4.3348393304858915E-4	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9998538563991143	WITHOUT_CLASSIFICATION	1.4614360088575215E-4	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9987171351888615	WITHOUT_CLASSIFICATION	0.0012828648111385796	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999863727688361	WITHOUT_CLASSIFICATION	1.3627231164014722E-5	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9997699735749023	WITHOUT_CLASSIFICATION	2.300264250978153E-4	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9990634257695318	WITHOUT_CLASSIFICATION	9.365742304682472E-4	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999686486013081	WITHOUT_CLASSIFICATION	3.135139869186221E-5	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999382329295182	WITHOUT_CLASSIFICATION	6.17670704817302E-5	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999859422308939	WITHOUT_CLASSIFICATION	1.405776910609527E-4	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9998974026192701	WITHOUT_CLASSIFICATION	1.025973807299274E-4	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9994942391584337	WITHOUT_CLASSIFICATION	5.057608415662287E-4	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999419247393004	WITHOUT_CLASSIFICATION	5.8075260699582624E-5	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9994942391584337	WITHOUT_CLASSIFICATION	5.057608415662287E-4	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9995511306990159	WITHOUT_CLASSIFICATION	4.4886930098409893E-4	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9998472670578024	WITHOUT_CLASSIFICATION	1.5273294219761242E-4	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.997518229891053	WITHOUT_CLASSIFICATION	0.0024817701089470292	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998733682714087	WITHOUT_CLASSIFICATION	1.2663172859138141E-4	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9998485279624018	WITHOUT_CLASSIFICATION	1.5147203759825992E-4	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.997518229891053	WITHOUT_CLASSIFICATION	0.0024817701089470292	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9997970057027467	WITHOUT_CLASSIFICATION	2.0299429725328846E-4	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.998668422590973	WITHOUT_CLASSIFICATION	0.0013315774090270163	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9998901235220119	WITHOUT_CLASSIFICATION	1.0987647798810903E-4	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.998880379431258	WITHOUT_CLASSIFICATION	0.0011196205687420682	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9984277279311101	WITHOUT_CLASSIFICATION	0.0015722720688898723	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999663025100736	WITHOUT_CLASSIFICATION	3.369748992655013E-5	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9997602715634017	WITHOUT_CLASSIFICATION	2.397284365981505E-4	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.5582201334810382	IMPLEMENTATION	0.4417798665189618	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9994978341302017	WITHOUT_CLASSIFICATION	5.021658697983091E-4	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9997467208496132	WITHOUT_CLASSIFICATION	2.532791503867844E-4	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999719036778716	WITHOUT_CLASSIFICATION	2.8096322128297174E-5	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9996824448813517	WITHOUT_CLASSIFICATION	3.175551186482196E-4	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999985421945087	WITHOUT_CLASSIFICATION	1.4578054912911952E-5	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9993786033112869	WITHOUT_CLASSIFICATION	6.213966887131501E-4	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999995849175308	WITHOUT_CLASSIFICATION	4.1508246917482314E-7	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9993786135522906	WITHOUT_CLASSIFICATION	6.213864477093497E-4	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.999929000642841	WITHOUT_CLASSIFICATION	7.099935715896225E-5	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997975904663434	WITHOUT_CLASSIFICATION	2.0240953365650093E-4	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9993752807028673	WITHOUT_CLASSIFICATION	6.247192971326472E-4	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999924769648103	WITHOUT_CLASSIFICATION	7.523035189662355E-6	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9998968078465433	WITHOUT_CLASSIFICATION	1.0319215345666846E-4	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.9999356510455879	WITHOUT_CLASSIFICATION	6.434895441213885E-5	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9993397828104217	WITHOUT_CLASSIFICATION	6.602171895783821E-4	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9889055202956237	WITHOUT_CLASSIFICATION	0.011094479704376168	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.9997663533817708	WITHOUT_CLASSIFICATION	2.3364661822921333E-4	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.999622473336296	WITHOUT_CLASSIFICATION	3.7752666370401914E-4	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999593006602	WITHOUT_CLASSIFICATION	4.0699339851472536E-8	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9983915949051796	WITHOUT_CLASSIFICATION	0.00160840509482048	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.9999431779352392	WITHOUT_CLASSIFICATION	5.682206476083217E-5	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9996619147504557	WITHOUT_CLASSIFICATION	3.3808524954428694E-4	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9993397828104217	WITHOUT_CLASSIFICATION	6.602171895783821E-4	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9993571513424824	WITHOUT_CLASSIFICATION	6.428486575175878E-4	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.9998947940717179	WITHOUT_CLASSIFICATION	1.0520592828219373E-4	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.9998290552267276	WITHOUT_CLASSIFICATION	1.709447732723107E-4	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9892039082714854	WITHOUT_CLASSIFICATION	0.01079609172851453	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999924769648103	WITHOUT_CLASSIFICATION	7.523035189662355E-6	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999684720223768	WITHOUT_CLASSIFICATION	3.152797762310776E-5	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.999983100414192	WITHOUT_CLASSIFICATION	1.6899585807876094E-5	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9998186882742223	WITHOUT_CLASSIFICATION	1.813117257777872E-4	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.999689501095793	WITHOUT_CLASSIFICATION	3.104989042070792E-4	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999186843929141	WITHOUT_CLASSIFICATION	8.13156070859741E-5	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999980203790421	WITHOUT_CLASSIFICATION	1.9796209578849175E-6	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999337529512458	WITHOUT_CLASSIFICATION	6.62470487541984E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9993751313451152	WITHOUT_CLASSIFICATION	6.248686548846878E-4	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9998909827229651	WITHOUT_CLASSIFICATION	1.0901727703494847E-4	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.999528732666173	WITHOUT_CLASSIFICATION	4.7126733382693125E-4	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999751353027118	WITHOUT_CLASSIFICATION	2.4864697288265337E-5	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9996682212684046	WITHOUT_CLASSIFICATION	3.3177873159549596E-4	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9996682212684046	WITHOUT_CLASSIFICATION	3.3177873159549596E-4	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999630905154373	WITHOUT_CLASSIFICATION	3.690948456261732E-5	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999317191155823	WITHOUT_CLASSIFICATION	6.828088441778876E-5	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.9997060621297328	WITHOUT_CLASSIFICATION	2.939378702671443E-4	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999378257471808	WITHOUT_CLASSIFICATION	6.217425281924729E-5	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.999964754466027	WITHOUT_CLASSIFICATION	3.524553397306262E-5	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9692041490306641	WITHOUT_CLASSIFICATION	0.03079585096933598	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9980626868535872	WITHOUT_CLASSIFICATION	0.001937313146412742	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.995070048511098	WITHOUT_CLASSIFICATION	0.004929951488902002	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999172393080656	WITHOUT_CLASSIFICATION	8.276069193436239E-5	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.990258292688258	WITHOUT_CLASSIFICATION	0.009741707311741996	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.990258292688258	WITHOUT_CLASSIFICATION	0.009741707311741996	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999898108524485	WITHOUT_CLASSIFICATION	1.0189147551494532E-4	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.990258292688258	WITHOUT_CLASSIFICATION	0.009741707311741996	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.990258292688258	WITHOUT_CLASSIFICATION	0.009741707311741996	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9970433507383012	WITHOUT_CLASSIFICATION	0.0029566492616989234	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9974173279724646	WITHOUT_CLASSIFICATION	0.002582672027535396	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9971459902239737	WITHOUT_CLASSIFICATION	0.002854009776026436	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.85079054852315	WITHOUT_CLASSIFICATION	0.14920945147685002	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9998232969110207	WITHOUT_CLASSIFICATION	1.7670308897921997E-4	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999893145613531	WITHOUT_CLASSIFICATION	1.068543864693872E-5	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999681537329417	WITHOUT_CLASSIFICATION	3.184626705829996E-4	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.9996518456277304	WITHOUT_CLASSIFICATION	3.4815437226959995E-4	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9997252554298215	WITHOUT_CLASSIFICATION	2.7474457017855937E-4	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999421868664484	WITHOUT_CLASSIFICATION	5.781313355153622E-5	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9995923295009185	WITHOUT_CLASSIFICATION	4.0767049908160244E-4	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999774233193693	WITHOUT_CLASSIFICATION	2.2576680630654704E-5	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9995398156561576	WITHOUT_CLASSIFICATION	4.6018434384243134E-4	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9996327291203195	WITHOUT_CLASSIFICATION	3.6727087968048866E-4	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9998321814199318	WITHOUT_CLASSIFICATION	1.6781858006828325E-4	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9993799071991196	WITHOUT_CLASSIFICATION	6.200928008803197E-4	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9996012073916107	WITHOUT_CLASSIFICATION	3.987926083891694E-4	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9998305494958976	WITHOUT_CLASSIFICATION	1.6945050410241858E-4	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9997120358838384	WITHOUT_CLASSIFICATION	2.87964116161507E-4	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.9996775417063215	WITHOUT_CLASSIFICATION	3.2245829367851816E-4	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9998321814199318	WITHOUT_CLASSIFICATION	1.6781858006828325E-4	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9998968078465433	WITHOUT_CLASSIFICATION	1.0319215345666846E-4	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.9998259784435476	WITHOUT_CLASSIFICATION	1.7402155645239814E-4	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999748878326346	WITHOUT_CLASSIFICATION	2.511216736540726E-4	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9993632346939987	WITHOUT_CLASSIFICATION	6.367653060012869E-4	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.9987538799163953	WITHOUT_CLASSIFICATION	0.0012461200836046697	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999859376184986	WITHOUT_CLASSIFICATION	1.406238150139258E-4	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.9993817292300523	WITHOUT_CLASSIFICATION	6.182707699475809E-4	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999519321497256	WITHOUT_CLASSIFICATION	4.806785027450138E-5	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9997721991737886	WITHOUT_CLASSIFICATION	2.2780082621143863E-4	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999308366523703	WITHOUT_CLASSIFICATION	6.916334762964679E-5	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.9998094211923779	WITHOUT_CLASSIFICATION	1.9057880762198722E-4	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.999768537748705	WITHOUT_CLASSIFICATION	2.3146225129503235E-4	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9989181915636267	WITHOUT_CLASSIFICATION	0.0010818084363732818	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9990275023687816	WITHOUT_CLASSIFICATION	9.724976312184759E-4	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9721130562530633	WITHOUT_CLASSIFICATION	0.02788694374693664	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9995444651099847	WITHOUT_CLASSIFICATION	4.555348900152495E-4	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.9967400151421306	WITHOUT_CLASSIFICATION	0.003259984857869405	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.99808885307083	WITHOUT_CLASSIFICATION	0.0019111469291700546	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9998788945929391	WITHOUT_CLASSIFICATION	1.2110540706089567E-4	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9997371746395547	WITHOUT_CLASSIFICATION	2.6282536044537283E-4	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999774298793238	WITHOUT_CLASSIFICATION	2.257012067617E-5	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.9957856698207334	WITHOUT_CLASSIFICATION	0.004214330179266719	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.999942334679447	WITHOUT_CLASSIFICATION	5.766532055307085E-5	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9997721991737886	WITHOUT_CLASSIFICATION	2.2780082621143863E-4	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.999814852162441	WITHOUT_CLASSIFICATION	1.8514783755907294E-4	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.9995531301345063	WITHOUT_CLASSIFICATION	4.4686986549371535E-4	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9962844884014587	WITHOUT_CLASSIFICATION	0.003715511598541326	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9997053310357615	WITHOUT_CLASSIFICATION	2.946689642384045E-4	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.9997081376015016	WITHOUT_CLASSIFICATION	2.9186239849849044E-4	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.999486105105287	WITHOUT_CLASSIFICATION	5.138948947129884E-4	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.9991930110814211	WITHOUT_CLASSIFICATION	8.069889185788596E-4	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.999486105105287	WITHOUT_CLASSIFICATION	5.138948947129884E-4	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.9995447287653456	WITHOUT_CLASSIFICATION	4.5527123465426643E-4	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9997247556340068	WITHOUT_CLASSIFICATION	2.7524436599323665E-4	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9998807299036295	WITHOUT_CLASSIFICATION	1.1927009637051788E-4	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9997194285675008	WITHOUT_CLASSIFICATION	2.805714324991036E-4	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9998543688174668	WITHOUT_CLASSIFICATION	1.4563118253324401E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9998576703963319	WITHOUT_CLASSIFICATION	1.4232960366813212E-4	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9995167048955946	WITHOUT_CLASSIFICATION	4.83295104405344E-4	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999156884604655	WITHOUT_CLASSIFICATION	8.431153953442621E-5	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9997247556340068	WITHOUT_CLASSIFICATION	2.7524436599323665E-4	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999845062968315	WITHOUT_CLASSIFICATION	1.549370316849908E-4	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9998387524488	WITHOUT_CLASSIFICATION	1.612475511998531E-4	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9994128095719063	WITHOUT_CLASSIFICATION	5.871904280936946E-4	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9995556680661905	WITHOUT_CLASSIFICATION	4.443319338096633E-4	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.9997691837147868	WITHOUT_CLASSIFICATION	2.3081628521309368E-4	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9953003407572848	WITHOUT_CLASSIFICATION	0.0046996592427152135	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9998576703963319	WITHOUT_CLASSIFICATION	1.4232960366813212E-4	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9996749152209335	WITHOUT_CLASSIFICATION	3.250847790664498E-4	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996888222608605	WITHOUT_CLASSIFICATION	3.1117773913947184E-4	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996814946762261	WITHOUT_CLASSIFICATION	3.185053237738927E-4	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984689077391637	WITHOUT_CLASSIFICATION	0.0015310922608363117	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984689077391637	WITHOUT_CLASSIFICATION	0.0015310922608363117	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984689077391637	WITHOUT_CLASSIFICATION	0.0015310922608363117	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9997764335866555	WITHOUT_CLASSIFICATION	2.2356641334445872E-4	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9997764335866555	WITHOUT_CLASSIFICATION	2.2356641334445872E-4	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999854899399523	WITHOUT_CLASSIFICATION	1.4510060047591552E-5	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999112008355483	WITHOUT_CLASSIFICATION	8.879916445163859E-5	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.9997047721974018	WITHOUT_CLASSIFICATION	2.952278025982017E-4	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.9996815019270137	WITHOUT_CLASSIFICATION	3.184980729863385E-4	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9239975327572434	WITHOUT_CLASSIFICATION	0.07600246724275661	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996150099210885	WITHOUT_CLASSIFICATION	3.8499007891154243E-4	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999754748616291	WITHOUT_CLASSIFICATION	2.452513837090833E-4	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999708746039147	WITHOUT_CLASSIFICATION	2.912539608532993E-5	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998376602151869	WITHOUT_CLASSIFICATION	1.623397848130233E-4	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996150099210885	WITHOUT_CLASSIFICATION	3.8499007891154243E-4	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999754748616291	WITHOUT_CLASSIFICATION	2.452513837090833E-4	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999387575704409	WITHOUT_CLASSIFICATION	6.124242955905061E-5	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9998869856196723	WITHOUT_CLASSIFICATION	1.13014380327717E-4	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999251980809881	WITHOUT_CLASSIFICATION	7.48019190119648E-5	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999089406405378	WITHOUT_CLASSIFICATION	9.105935946221477E-5	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9997340126153256	WITHOUT_CLASSIFICATION	2.6598738467446895E-4	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.9998949861911454	WITHOUT_CLASSIFICATION	1.0501380885467537E-4	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9994042582992673	WITHOUT_CLASSIFICATION	5.957417007327818E-4	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9996682212684046	WITHOUT_CLASSIFICATION	3.3177873159549596E-4	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9997322136284843	WITHOUT_CLASSIFICATION	2.677863715157228E-4	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998994466153251	WITHOUT_CLASSIFICATION	1.0055338467491304E-4	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9995534200836609	WITHOUT_CLASSIFICATION	4.4657991633914704E-4	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9998991715195402	WITHOUT_CLASSIFICATION	1.0082848045975402E-4	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999734498888912	WITHOUT_CLASSIFICATION	2.6550111108804443E-4	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998374646805162	WITHOUT_CLASSIFICATION	1.625353194839247E-4	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999287880577863	WITHOUT_CLASSIFICATION	7.121194221372571E-5	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997011184336193	WITHOUT_CLASSIFICATION	2.988815663808066E-4	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.9998306673942573	WITHOUT_CLASSIFICATION	1.6933260574268676E-4	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9995562689806585	WITHOUT_CLASSIFICATION	4.437310193415366E-4	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9997994023804592	WITHOUT_CLASSIFICATION	2.005976195407787E-4	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999837750982915	WITHOUT_CLASSIFICATION	1.6224901708457348E-5	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9937166986912918	WITHOUT_CLASSIFICATION	0.0062833013087081726	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999110768446097	WITHOUT_CLASSIFICATION	8.892315539033893E-5	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.999970116005259	WITHOUT_CLASSIFICATION	2.988399474108841E-5	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9633998362020197	WITHOUT_CLASSIFICATION	0.036600163797980215	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9996634077976285	WITHOUT_CLASSIFICATION	3.3659220237149806E-4	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999622718648719	WITHOUT_CLASSIFICATION	3.772813512809928E-4	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993919426508869	WITHOUT_CLASSIFICATION	6.080573491130701E-4	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9992810682553024	WITHOUT_CLASSIFICATION	7.18931744697622E-4	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9992810682553024	WITHOUT_CLASSIFICATION	7.18931744697622E-4	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9995164822221425	WITHOUT_CLASSIFICATION	4.8351777785750094E-4	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9993631389853419	WITHOUT_CLASSIFICATION	6.368610146582067E-4	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9919609738336431	WITHOUT_CLASSIFICATION	0.008039026166356954	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9997526009090022	WITHOUT_CLASSIFICATION	2.4739909099772165E-4	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9984844285029614	WITHOUT_CLASSIFICATION	0.0015155714970386692	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999558793979388	WITHOUT_CLASSIFICATION	4.4120602061012614E-5	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.9996923718183335	WITHOUT_CLASSIFICATION	3.076281816665151E-4	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.9999336011917699	WITHOUT_CLASSIFICATION	6.639880823006538E-5	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9974402438795962	WITHOUT_CLASSIFICATION	0.002559756120403753	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995839018931497	WITHOUT_CLASSIFICATION	4.160981068502438E-4	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995839018931497	WITHOUT_CLASSIFICATION	4.160981068502438E-4	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995839018931497	WITHOUT_CLASSIFICATION	4.160981068502438E-4	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995839018931497	WITHOUT_CLASSIFICATION	4.160981068502438E-4	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995839018931497	WITHOUT_CLASSIFICATION	4.160981068502438E-4	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995839018931497	WITHOUT_CLASSIFICATION	4.160981068502438E-4	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995839018931497	WITHOUT_CLASSIFICATION	4.160981068502438E-4	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995839018931497	WITHOUT_CLASSIFICATION	4.160981068502438E-4	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995839018931497	WITHOUT_CLASSIFICATION	4.160981068502438E-4	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995839018931497	WITHOUT_CLASSIFICATION	4.160981068502438E-4	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995839018931497	WITHOUT_CLASSIFICATION	4.160981068502438E-4	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9858067149190585	WITHOUT_CLASSIFICATION	0.014193285080941585	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9995963342573783	WITHOUT_CLASSIFICATION	4.036657426217427E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.99945685332025	WITHOUT_CLASSIFICATION	5.431466797500808E-4	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999183438906886	WITHOUT_CLASSIFICATION	8.165610931141054E-5	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999926443938078	WITHOUT_CLASSIFICATION	7.355606192172187E-6	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.9976522728435002	WITHOUT_CLASSIFICATION	0.0023477271564997216	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9997369097213464	WITHOUT_CLASSIFICATION	2.630902786535889E-4	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9994628628350652	WITHOUT_CLASSIFICATION	5.371371649348364E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.99945685332025	WITHOUT_CLASSIFICATION	5.431466797500808E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.99945685332025	WITHOUT_CLASSIFICATION	5.431466797500808E-4	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9998239853392314	WITHOUT_CLASSIFICATION	1.7601466076857763E-4	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999651046189278	WITHOUT_CLASSIFICATION	3.489538107211768E-5	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9738433463548547	WITHOUT_CLASSIFICATION	0.02615665364514534	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999677513427209	WITHOUT_CLASSIFICATION	3.224865727906761E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9996095928005827	WITHOUT_CLASSIFICATION	3.9040719941731936E-4	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9995562689806585	WITHOUT_CLASSIFICATION	4.437310193415366E-4	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9981168234874426	WITHOUT_CLASSIFICATION	0.0018831765125573632	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9997450614506946	WITHOUT_CLASSIFICATION	2.5493854930541866E-4	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.9997087133085186	WITHOUT_CLASSIFICATION	2.9128669148132297E-4	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998171676979412	WITHOUT_CLASSIFICATION	0.0018283230205879551	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999885990952564	WITHOUT_CLASSIFICATION	1.1400904743570431E-5	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996079019346271	WITHOUT_CLASSIFICATION	3.920980653728586E-4	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9995353914226697	WITHOUT_CLASSIFICATION	4.6460857733039745E-4	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9995353914226697	WITHOUT_CLASSIFICATION	4.6460857733039745E-4	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9995353914226697	WITHOUT_CLASSIFICATION	4.6460857733039745E-4	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9995353914226697	WITHOUT_CLASSIFICATION	4.6460857733039745E-4	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996741162487986	WITHOUT_CLASSIFICATION	3.258837512012819E-4	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999855987985112	WITHOUT_CLASSIFICATION	1.4401201488747885E-5	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9967243673122543	WITHOUT_CLASSIFICATION	0.0032756326877456483	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.999980408352285	WITHOUT_CLASSIFICATION	1.9591647715045155E-5	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996182784860234	WITHOUT_CLASSIFICATION	3.817215139766932E-4	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993639429615132	WITHOUT_CLASSIFICATION	6.360570384866923E-4	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9995872089750364	WITHOUT_CLASSIFICATION	4.1279102496360635E-4	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9998817972070021	WITHOUT_CLASSIFICATION	1.1820279299791754E-4	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999922744912665	WITHOUT_CLASSIFICATION	7.725508733514592E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9989993945644015	WITHOUT_CLASSIFICATION	0.001000605435598518	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9996818679219602	WITHOUT_CLASSIFICATION	3.181320780397966E-4	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9994789065889764	WITHOUT_CLASSIFICATION	5.210934110235437E-4	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9994338898634737	WITHOUT_CLASSIFICATION	5.66110136526324E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9994185061563722	WITHOUT_CLASSIFICATION	5.814938436278182E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9994185061563722	WITHOUT_CLASSIFICATION	5.814938436278182E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9994185061563722	WITHOUT_CLASSIFICATION	5.814938436278182E-4	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999176943068083	WITHOUT_CLASSIFICATION	8.230569319161307E-5	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.9998225511199677	WITHOUT_CLASSIFICATION	1.7744888003229337E-4	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999886781138139	WITHOUT_CLASSIFICATION	1.132188618620138E-5	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999075171313964	WITHOUT_CLASSIFICATION	9.248286860364862E-5	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984689077391637	WITHOUT_CLASSIFICATION	0.0015310922608363117	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9846126933852393	WITHOUT_CLASSIFICATION	0.01538730661476072	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9995855048093961	WITHOUT_CLASSIFICATION	4.144951906039599E-4	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9998336605958672	WITHOUT_CLASSIFICATION	1.6633940413279813E-4	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.999225328530827	WITHOUT_CLASSIFICATION	7.746714691730469E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999203785056408	WITHOUT_CLASSIFICATION	7.962149435923581E-5	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9954291926309893	WITHOUT_CLASSIFICATION	0.004570807369010702	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9977372469205368	WITHOUT_CLASSIFICATION	0.0022627530794633237	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999472451778487	WITHOUT_CLASSIFICATION	5.275482215131159E-4	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9994969103267244	WITHOUT_CLASSIFICATION	5.03089673275539E-4	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9995580233813445	WITHOUT_CLASSIFICATION	4.4197661865546823E-4	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.999673859810216	WITHOUT_CLASSIFICATION	3.261401897840097E-4	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.99999823898157	WITHOUT_CLASSIFICATION	1.7610184300011567E-6	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999987099567066	WITHOUT_CLASSIFICATION	1.290043293392255E-5	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999772172915675	WITHOUT_CLASSIFICATION	2.2782708432436303E-5	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999990822131473	WITHOUT_CLASSIFICATION	9.177868526053814E-7	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9994771242691943	WITHOUT_CLASSIFICATION	5.228757308057242E-4	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9976803136622859	WITHOUT_CLASSIFICATION	0.0023196863377140044	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999998623816758	WITHOUT_CLASSIFICATION	1.376183241973601E-6	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.9991297936684128	WITHOUT_CLASSIFICATION	8.702063315870881E-4	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999959890379317	WITHOUT_CLASSIFICATION	4.010962068176618E-6	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999683327350005	WITHOUT_CLASSIFICATION	3.166726499953746E-5	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999285676958902	WITHOUT_CLASSIFICATION	7.14323041097626E-5	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9996592393095811	WITHOUT_CLASSIFICATION	3.4076069041878867E-4	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999547233389825	WITHOUT_CLASSIFICATION	4.527666101738572E-5	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.5633413639960944	WITHOUT_CLASSIFICATION	0.43665863600390564	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9996682212684046	WITHOUT_CLASSIFICATION	3.3177873159549596E-4	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9980146118561485	WITHOUT_CLASSIFICATION	0.001985388143851559	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9919341866824162	WITHOUT_CLASSIFICATION	0.008065813317583872	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.9980124028938628	WITHOUT_CLASSIFICATION	0.001987597106137193	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999657375544232	WITHOUT_CLASSIFICATION	3.4262445576713884E-5	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.9988544141407966	WITHOUT_CLASSIFICATION	0.0011455858592034785	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9998242435442949	WITHOUT_CLASSIFICATION	1.757564557051675E-4	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9996803384010976	WITHOUT_CLASSIFICATION	3.1966159890234124E-4	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9962470382348979	WITHOUT_CLASSIFICATION	0.003752961765102024	IMPLEMENTATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999302703023949	WITHOUT_CLASSIFICATION	6.972969760503412E-5	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999981752832833	WITHOUT_CLASSIFICATION	1.824716716692942E-5	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998030186323424	WITHOUT_CLASSIFICATION	1.9698136765760826E-4	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.9999109444626668	WITHOUT_CLASSIFICATION	8.905553733316549E-5	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9997992681047715	WITHOUT_CLASSIFICATION	2.0073189522858874E-4	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9998060624437511	WITHOUT_CLASSIFICATION	1.9393755624888946E-4	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999874216590975	WITHOUT_CLASSIFICATION	1.2578340902636675E-5	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999653093412602	WITHOUT_CLASSIFICATION	3.4690658739917386E-5	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.999151866869121	WITHOUT_CLASSIFICATION	8.481331308789964E-4	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9983722597577617	WITHOUT_CLASSIFICATION	0.0016277402422382806	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9993496411091327	WITHOUT_CLASSIFICATION	6.5035889086732E-4	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9977026331023495	WITHOUT_CLASSIFICATION	0.0022973668976504517	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.9997194588236114	WITHOUT_CLASSIFICATION	2.805411763886518E-4	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.997353643199163	WITHOUT_CLASSIFICATION	0.0026463568008369513	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.9993483198700649	WITHOUT_CLASSIFICATION	6.516801299350776E-4	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9998830864448073	WITHOUT_CLASSIFICATION	1.1691355519266486E-4	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9966421099931863	WITHOUT_CLASSIFICATION	0.0033578900068136756	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9997835451498109	WITHOUT_CLASSIFICATION	2.1645485018916355E-4	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999218132772029	WITHOUT_CLASSIFICATION	7.818672279709305E-5	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999977807604403	WITHOUT_CLASSIFICATION	2.2192395596565576E-6	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9996069184965796	WITHOUT_CLASSIFICATION	3.930815034205115E-4	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9998580137778165	WITHOUT_CLASSIFICATION	1.4198622218352525E-4	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999761468843258	WITHOUT_CLASSIFICATION	2.3853115674250408E-5	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999858077373537	WITHOUT_CLASSIFICATION	1.419226264627966E-5	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9996524031842801	WITHOUT_CLASSIFICATION	3.475968157199814E-4	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9351712109416485	WITHOUT_CLASSIFICATION	0.06482878905835165	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9984375057542295	WITHOUT_CLASSIFICATION	0.0015624942457704899	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999720515171493	WITHOUT_CLASSIFICATION	2.7948482850778506E-5	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9989242728772286	WITHOUT_CLASSIFICATION	0.0010757271227714014	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9980846720140906	WITHOUT_CLASSIFICATION	0.001915327985909433	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.990772319593447	WITHOUT_CLASSIFICATION	0.009227680406552951	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9997034330523249	WITHOUT_CLASSIFICATION	2.965669476750367E-4	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.9996466381591599	WITHOUT_CLASSIFICATION	3.533618408401415E-4	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9997470845392166	WITHOUT_CLASSIFICATION	2.5291546078346926E-4	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999878487178751	WITHOUT_CLASSIFICATION	1.2151282124890141E-4	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999159419824284	WITHOUT_CLASSIFICATION	8.405801757153952E-5	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.9995407589614392	WITHOUT_CLASSIFICATION	4.592410385606834E-4	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9994939332729018	WITHOUT_CLASSIFICATION	5.060667270981339E-4	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9982269259772518	WITHOUT_CLASSIFICATION	0.0017730740227481323	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.942765206737871	IMPLEMENTATION	0.057234793262129005	WITHOUT_CLASSIFICATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9996261384835932	WITHOUT_CLASSIFICATION	3.7386151640677126E-4	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9281177233239939	WITHOUT_CLASSIFICATION	0.07188227667600604	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.6669231382106283	WITHOUT_CLASSIFICATION	0.33307686178937174	IMPLEMENTATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9987069694279698	WITHOUT_CLASSIFICATION	0.0012930305720302586	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9986124764070811	WITHOUT_CLASSIFICATION	0.0013875235929189705	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9996943954601833	WITHOUT_CLASSIFICATION	3.0560453981665623E-4	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9976778320971654	WITHOUT_CLASSIFICATION	0.0023221679028346447	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.997989380508194	WITHOUT_CLASSIFICATION	0.0020106194918060026	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9988290211233111	WITHOUT_CLASSIFICATION	0.0011709788766889185	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.9997603266498734	WITHOUT_CLASSIFICATION	2.3967335012663836E-4	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9998753306442583	WITHOUT_CLASSIFICATION	1.246693557417463E-4	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.999724521726876	WITHOUT_CLASSIFICATION	2.7547827312402053E-4	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999556616652293	WITHOUT_CLASSIFICATION	4.433833477062162E-5	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.997943903729639	WITHOUT_CLASSIFICATION	0.0020560962703610186	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999960722638818	WITHOUT_CLASSIFICATION	3.9277361182054605E-5	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.9998697777916167	WITHOUT_CLASSIFICATION	1.3022220838328533E-4	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.9997115383592011	WITHOUT_CLASSIFICATION	2.884616407989141E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9991403834592365	WITHOUT_CLASSIFICATION	8.596165407635732E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9991403834592365	WITHOUT_CLASSIFICATION	8.596165407635732E-4	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9997309695833164	WITHOUT_CLASSIFICATION	2.6903041668354175E-4	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9906513843893173	WITHOUT_CLASSIFICATION	0.009348615610682611	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9996683553976439	WITHOUT_CLASSIFICATION	3.3164460235615966E-4	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999452435761484	WITHOUT_CLASSIFICATION	5.475642385166846E-5	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9996347891971314	WITHOUT_CLASSIFICATION	3.6521080286856724E-4	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9986859314154991	WITHOUT_CLASSIFICATION	0.0013140685845008176	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998340770028452	WITHOUT_CLASSIFICATION	1.6592299715478053E-4	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9997986043354699	WITHOUT_CLASSIFICATION	2.013956645301181E-4	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9991667717806241	WITHOUT_CLASSIFICATION	8.332282193760353E-4	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.5148551299944304	WITHOUT_CLASSIFICATION	0.48514487000556966	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999899721690031	WITHOUT_CLASSIFICATION	1.002783099685314E-5	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999990823848316	WITHOUT_CLASSIFICATION	9.176151684080361E-7	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9980091432041724	WITHOUT_CLASSIFICATION	0.0019908567958276035	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999799931180777	WITHOUT_CLASSIFICATION	2.0006881922228475E-5	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998004536857082	WITHOUT_CLASSIFICATION	1.9954631429165205E-4	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9995906475165085	WITHOUT_CLASSIFICATION	4.093524834915216E-4	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9963913427898821	IMPLEMENTATION	0.003608657210117871	WITHOUT_CLASSIFICATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9963913427898821	IMPLEMENTATION	0.003608657210117871	WITHOUT_CLASSIFICATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9992306591920352	WITHOUT_CLASSIFICATION	7.693408079647223E-4	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9998172743532433	WITHOUT_CLASSIFICATION	1.8272564675671747E-4	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9989546430822503	WITHOUT_CLASSIFICATION	0.0010453569177496858	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998181429901621	WITHOUT_CLASSIFICATION	1.818570098378486E-4	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9982826794547	WITHOUT_CLASSIFICATION	0.0017173205453001157	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9989993945644015	WITHOUT_CLASSIFICATION	0.001000605435598518	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997776484238251	WITHOUT_CLASSIFICATION	2.2235157617484704E-4	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9982826794547	WITHOUT_CLASSIFICATION	0.0017173205453001157	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9996934202067295	WITHOUT_CLASSIFICATION	3.06579793270577E-4	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9993371428350164	WITHOUT_CLASSIFICATION	6.62857164983624E-4	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.999320489048671	WITHOUT_CLASSIFICATION	6.795109513290966E-4	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.999320489048671	WITHOUT_CLASSIFICATION	6.795109513290966E-4	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9997225962233307	WITHOUT_CLASSIFICATION	2.7740377666931313E-4	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9964516401104073	WITHOUT_CLASSIFICATION	0.0035483598895927953	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9991953337708586	WITHOUT_CLASSIFICATION	8.046662291414436E-4	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999997450370726	WITHOUT_CLASSIFICATION	2.549629274172844E-7	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9946682595784875	WITHOUT_CLASSIFICATION	0.005331740421512415	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.999898824881535	WITHOUT_CLASSIFICATION	1.0117511846493165E-4	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9978754328021163	WITHOUT_CLASSIFICATION	0.0021245671978836833	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9997142024696065	WITHOUT_CLASSIFICATION	2.857975303934347E-4	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9997975739687125	WITHOUT_CLASSIFICATION	2.0242603128760336E-4	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9996890353684926	WITHOUT_CLASSIFICATION	3.1096463150742486E-4	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9996121375897996	WITHOUT_CLASSIFICATION	3.878624102003926E-4	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999708754789771	WITHOUT_CLASSIFICATION	2.9124521022953244E-5	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9998563845006968	WITHOUT_CLASSIFICATION	1.4361549930312596E-4	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997162068664536	WITHOUT_CLASSIFICATION	2.8379313354641537E-4	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9997328877758943	WITHOUT_CLASSIFICATION	2.671122241056277E-4	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9993397828104217	WITHOUT_CLASSIFICATION	6.602171895783821E-4	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.9997934918155881	WITHOUT_CLASSIFICATION	2.0650818441187045E-4	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999901647976356	WITHOUT_CLASSIFICATION	9.835202364326449E-6	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9986853944367687	WITHOUT_CLASSIFICATION	0.0013146055632312316	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9996686818245558	WITHOUT_CLASSIFICATION	3.3131817544425536E-4	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998329341466332	WITHOUT_CLASSIFICATION	1.670658533667128E-4	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.998179484859178	WITHOUT_CLASSIFICATION	0.0018205151408220651	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9953045582259077	WITHOUT_CLASSIFICATION	0.0046954417740923075	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9996097807892753	WITHOUT_CLASSIFICATION	3.902192107245619E-4	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9996898639021808	WITHOUT_CLASSIFICATION	3.1013609781909964E-4	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.7971170636167673	WITHOUT_CLASSIFICATION	0.20288293638323276	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999808841632958	WITHOUT_CLASSIFICATION	1.911583670420935E-5	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.987431253667483	WITHOUT_CLASSIFICATION	0.012568746332516966	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999764792281729	WITHOUT_CLASSIFICATION	2.352077182711972E-5	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9998947900545402	WITHOUT_CLASSIFICATION	1.0520994545982445E-4	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9996716018672982	WITHOUT_CLASSIFICATION	3.283981327017224E-4	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9998588859609048	WITHOUT_CLASSIFICATION	1.4111403909518083E-4	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9666695794223453	WITHOUT_CLASSIFICATION	0.03333042057765463	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9991879527614518	WITHOUT_CLASSIFICATION	8.120472385482628E-4	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9994737558818442	WITHOUT_CLASSIFICATION	5.262441181557822E-4	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9995903982278375	WITHOUT_CLASSIFICATION	4.096017721624907E-4	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9995903982278375	WITHOUT_CLASSIFICATION	4.096017721624907E-4	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9994049497678764	WITHOUT_CLASSIFICATION	5.950502321234675E-4	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9996881237830111	WITHOUT_CLASSIFICATION	3.1187621698882865E-4	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999321671977117	WITHOUT_CLASSIFICATION	6.783280228824529E-5	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.9998054291620343	WITHOUT_CLASSIFICATION	1.9457083796567835E-4	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9994047790051355	WITHOUT_CLASSIFICATION	5.952209948644474E-4	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999906445146001	WITHOUT_CLASSIFICATION	9.35548540003178E-6	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999927716986421	WITHOUT_CLASSIFICATION	7.228301357889171E-6	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9989949669100244	WITHOUT_CLASSIFICATION	0.0010050330899756172	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9994049497678764	WITHOUT_CLASSIFICATION	5.950502321234675E-4	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9996881237830111	WITHOUT_CLASSIFICATION	3.1187621698882865E-4	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9989899890586017	WITHOUT_CLASSIFICATION	0.0010100109413982076	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.7448998907164676	IMPLEMENTATION	0.25510010928353244	WITHOUT_CLASSIFICATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.9998953349701054	WITHOUT_CLASSIFICATION	1.046650298946501E-4	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9993772675863885	WITHOUT_CLASSIFICATION	6.227324136114837E-4	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999921383007153	WITHOUT_CLASSIFICATION	7.861699284757151E-6	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9948181215997011	WITHOUT_CLASSIFICATION	0.005181878400298959	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.999582360410299	WITHOUT_CLASSIFICATION	4.1763958970104015E-4	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9995397724093439	WITHOUT_CLASSIFICATION	4.602275906560807E-4	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999455156708197	WITHOUT_CLASSIFICATION	5.4484329180410735E-5	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8592947274940785	WITHOUT_CLASSIFICATION	0.14070527250592138	IMPLEMENTATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.999990909757414	WITHOUT_CLASSIFICATION	9.090242585986239E-6	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8592947274940785	WITHOUT_CLASSIFICATION	0.14070527250592138	IMPLEMENTATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999036698358804	WITHOUT_CLASSIFICATION	9.6330164119611E-5	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9996524031842801	WITHOUT_CLASSIFICATION	3.475968157199814E-4	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999036698358804	WITHOUT_CLASSIFICATION	9.6330164119611E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987773841734232	WITHOUT_CLASSIFICATION	0.0012226158265768905	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999267429715119	WITHOUT_CLASSIFICATION	7.325702848817869E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9995397724093439	WITHOUT_CLASSIFICATION	4.602275906560807E-4	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9995397724093439	WITHOUT_CLASSIFICATION	4.602275906560807E-4	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9998075219911415	WITHOUT_CLASSIFICATION	1.924780088583814E-4	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9998098734818852	WITHOUT_CLASSIFICATION	1.9012651811482742E-4	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9998075219911415	WITHOUT_CLASSIFICATION	1.924780088583814E-4	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9997090149616644	WITHOUT_CLASSIFICATION	2.909850383355942E-4	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9998345387557731	WITHOUT_CLASSIFICATION	1.6546124422685436E-4	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9996757960519882	WITHOUT_CLASSIFICATION	3.242039480118123E-4	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.6554678656418477	IMPLEMENTATION	0.34453213435815233	WITHOUT_CLASSIFICATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9997073004073177	WITHOUT_CLASSIFICATION	2.9269959268232346E-4	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999204807338827	WITHOUT_CLASSIFICATION	7.951926611730194E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999876041482239	WITHOUT_CLASSIFICATION	1.2395851776104177E-5	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.9987139111210835	WITHOUT_CLASSIFICATION	0.0012860888789164367	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9994516792551766	WITHOUT_CLASSIFICATION	5.483207448233571E-4	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9991341290190732	WITHOUT_CLASSIFICATION	8.658709809268913E-4	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999766289162218	WITHOUT_CLASSIFICATION	2.3371083778204123E-4	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9997373184387283	WITHOUT_CLASSIFICATION	2.626815612716721E-4	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.99972295838606	WITHOUT_CLASSIFICATION	2.770416139400828E-4	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9993397828104217	WITHOUT_CLASSIFICATION	6.602171895783821E-4	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998537694698589	WITHOUT_CLASSIFICATION	1.462305301411983E-4	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9996056384838327	WITHOUT_CLASSIFICATION	3.94361516167255E-4	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9993397828104217	WITHOUT_CLASSIFICATION	6.602171895783821E-4	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9993642523567396	WITHOUT_CLASSIFICATION	6.357476432604122E-4	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9997025715875981	WITHOUT_CLASSIFICATION	2.974284124018995E-4	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9921904481379742	WITHOUT_CLASSIFICATION	0.007809551862025807	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.5715452116546197	WITHOUT_CLASSIFICATION	0.4284547883453804	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9989734044236716	WITHOUT_CLASSIFICATION	0.0010265955763285304	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9994758697113378	WITHOUT_CLASSIFICATION	5.241302886620803E-4	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9838985056505938	WITHOUT_CLASSIFICATION	0.016101494349406165	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.999663646541018	WITHOUT_CLASSIFICATION	3.363534589819536E-4	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9997073004073177	WITHOUT_CLASSIFICATION	2.9269959268232346E-4	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9996521314932028	WITHOUT_CLASSIFICATION	3.478685067971893E-4	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.6506396697461022	IMPLEMENTATION	0.3493603302538978	WITHOUT_CLASSIFICATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.6972709430561778	WITHOUT_CLASSIFICATION	0.30272905694382224	IMPLEMENTATION
an assertion	WITHOUT_CLASSIFICATION	0.9998943422947107	WITHOUT_CLASSIFICATION	1.0565770528916829E-4	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9997809087389108	WITHOUT_CLASSIFICATION	2.1909126108921452E-4	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.9999053440547732	WITHOUT_CLASSIFICATION	9.465594522691382E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9997090149616644	WITHOUT_CLASSIFICATION	2.909850383355942E-4	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9997090149616644	WITHOUT_CLASSIFICATION	2.909850383355942E-4	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9990573758776453	WITHOUT_CLASSIFICATION	9.42624122354589E-4	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.9997344952031637	WITHOUT_CLASSIFICATION	2.655047968362538E-4	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.9997099143819207	WITHOUT_CLASSIFICATION	2.9008561807931845E-4	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.9994299868590564	WITHOUT_CLASSIFICATION	5.700131409436428E-4	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9990196438670266	WITHOUT_CLASSIFICATION	9.803561329735002E-4	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9966932527708561	WITHOUT_CLASSIFICATION	0.0033067472291438776	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9925710368806239	WITHOUT_CLASSIFICATION	0.007428963119376108	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999880507843653	WITHOUT_CLASSIFICATION	1.1949215634701764E-5	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9996948573871737	WITHOUT_CLASSIFICATION	3.0514261282629405E-4	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9996897529487454	WITHOUT_CLASSIFICATION	3.1024705125457956E-4	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999286834317298	WITHOUT_CLASSIFICATION	7.131656827021475E-5	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9991341290190732	WITHOUT_CLASSIFICATION	8.658709809268913E-4	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9994049497678764	WITHOUT_CLASSIFICATION	5.950502321234675E-4	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999286834317298	WITHOUT_CLASSIFICATION	7.131656827021475E-5	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9997691837147868	WITHOUT_CLASSIFICATION	2.3081628521309368E-4	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999564833838868	WITHOUT_CLASSIFICATION	4.3516616113229304E-5	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998157721196064	WITHOUT_CLASSIFICATION	1.8422788039356474E-4	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.5499422239679218	IMPLEMENTATION	0.45005777603207814	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9995473060931054	WITHOUT_CLASSIFICATION	4.526939068945406E-4	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999891777025124	WITHOUT_CLASSIFICATION	1.0822297487595412E-5	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9997231661033873	WITHOUT_CLASSIFICATION	2.7683389661270523E-4	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999992654801512	WITHOUT_CLASSIFICATION	7.345198487952159E-7	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9994049497678764	WITHOUT_CLASSIFICATION	5.950502321234675E-4	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.9997691545714091	WITHOUT_CLASSIFICATION	2.3084542859089558E-4	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996940929586628	WITHOUT_CLASSIFICATION	3.059070413371691E-4	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996940929586628	WITHOUT_CLASSIFICATION	3.059070413371691E-4	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9998852460366879	WITHOUT_CLASSIFICATION	1.1475396331204728E-4	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9631074237597138	WITHOUT_CLASSIFICATION	0.03689257624028626	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999286834317298	WITHOUT_CLASSIFICATION	7.131656827021475E-5	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9995473060931054	WITHOUT_CLASSIFICATION	4.526939068945406E-4	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9997231661033873	WITHOUT_CLASSIFICATION	2.7683389661270523E-4	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9997524097471453	WITHOUT_CLASSIFICATION	2.4759025285474485E-4	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9879869417943223	WITHOUT_CLASSIFICATION	0.012013058205677636	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.9997281212561329	WITHOUT_CLASSIFICATION	2.718787438671225E-4	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9987306139907918	WITHOUT_CLASSIFICATION	0.001269386009208206	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9997591800674642	WITHOUT_CLASSIFICATION	2.4081993253580544E-4	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9997691837147868	WITHOUT_CLASSIFICATION	2.3081628521309368E-4	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.9997105928359357	WITHOUT_CLASSIFICATION	2.894071640643362E-4	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9969125942944254	WITHOUT_CLASSIFICATION	0.003087405705574582	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.5446387015877091	WITHOUT_CLASSIFICATION	0.4553612984122909	IMPLEMENTATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.5446387015877091	WITHOUT_CLASSIFICATION	0.4553612984122909	IMPLEMENTATION
render the SQL	WITHOUT_CLASSIFICATION	0.9997697017363898	WITHOUT_CLASSIFICATION	2.3029826361028023E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987773841734232	WITHOUT_CLASSIFICATION	0.0012226158265768905	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999384997326511	WITHOUT_CLASSIFICATION	6.150026734884917E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999983156064625	WITHOUT_CLASSIFICATION	1.684393537550819E-6	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999562326548471	WITHOUT_CLASSIFICATION	4.376734515288617E-5	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999953938634564	WITHOUT_CLASSIFICATION	4.606136543693293E-6	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999941565429112	WITHOUT_CLASSIFICATION	5.843457088772895E-6	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9994126794862724	WITHOUT_CLASSIFICATION	5.87320513727631E-4	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.9994752182177201	WITHOUT_CLASSIFICATION	5.247817822798612E-4	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9998518771100641	WITHOUT_CLASSIFICATION	1.4812288993594212E-4	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9996682212684046	WITHOUT_CLASSIFICATION	3.3177873159549596E-4	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.999869386812734	WITHOUT_CLASSIFICATION	1.3061318726601985E-4	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9997505300171702	WITHOUT_CLASSIFICATION	2.494699828298904E-4	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9997274843127951	WITHOUT_CLASSIFICATION	2.725156872048516E-4	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.9998340021760701	WITHOUT_CLASSIFICATION	1.6599782392989675E-4	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9992182347166483	WITHOUT_CLASSIFICATION	7.817652833518196E-4	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9930463549209506	WITHOUT_CLASSIFICATION	0.006953645079049402	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.9996134887065096	WITHOUT_CLASSIFICATION	3.865112934904816E-4	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999923011728479	WITHOUT_CLASSIFICATION	7.698827152208653E-6	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9927869503195355	WITHOUT_CLASSIFICATION	0.00721304968046461	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.9996373106849928	WITHOUT_CLASSIFICATION	3.6268931500704337E-4	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999940938578943	WITHOUT_CLASSIFICATION	5.906142105770785E-6	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999189775906291	WITHOUT_CLASSIFICATION	8.102240937093393E-5	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9889734612683811	WITHOUT_CLASSIFICATION	0.01102653873161881	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9979346877572526	WITHOUT_CLASSIFICATION	0.0020653122427474113	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9981437174094333	WITHOUT_CLASSIFICATION	0.0018562825905666526	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.999795460506787	WITHOUT_CLASSIFICATION	2.0453949321305284E-4	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9998140529208809	WITHOUT_CLASSIFICATION	1.8594707911919855E-4	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9998306673942573	WITHOUT_CLASSIFICATION	1.6933260574268676E-4	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999654689038365	WITHOUT_CLASSIFICATION	3.453109616351136E-5	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9992332868331336	WITHOUT_CLASSIFICATION	7.667131668663581E-4	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.5329924203851159	IMPLEMENTATION	0.46700757961488426	WITHOUT_CLASSIFICATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9992013367004041	WITHOUT_CLASSIFICATION	7.98663299595808E-4	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9984776689749406	WITHOUT_CLASSIFICATION	0.0015223310250594504	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9997311920601579	WITHOUT_CLASSIFICATION	2.6880793984205225E-4	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.666422183356487	WITHOUT_CLASSIFICATION	0.333577816643513	IMPLEMENTATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9997621215403549	WITHOUT_CLASSIFICATION	2.378784596451939E-4	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998090197494935	WITHOUT_CLASSIFICATION	1.9098025050640055E-4	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9997400295650413	WITHOUT_CLASSIFICATION	2.599704349588314E-4	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999751989166014	WITHOUT_CLASSIFICATION	2.4801083398697025E-5	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9993368286927662	WITHOUT_CLASSIFICATION	6.631713072338417E-4	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9996978940254405	WITHOUT_CLASSIFICATION	3.021059745594897E-4	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9997177652485876	WITHOUT_CLASSIFICATION	2.822347514124613E-4	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9950109633302174	WITHOUT_CLASSIFICATION	0.004989036669782526	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9996978940254405	WITHOUT_CLASSIFICATION	3.021059745594897E-4	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9993368286927662	WITHOUT_CLASSIFICATION	6.631713072338417E-4	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9997177652485876	WITHOUT_CLASSIFICATION	2.822347514124613E-4	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.9998832504404979	WITHOUT_CLASSIFICATION	1.1674955950220279E-4	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.999885320725034	WITHOUT_CLASSIFICATION	1.1467927496598704E-4	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9948001505953489	WITHOUT_CLASSIFICATION	0.005199849404651184	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.999783450194785	WITHOUT_CLASSIFICATION	2.165498052150328E-4	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999920415736057	WITHOUT_CLASSIFICATION	7.95842639427262E-6	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8909636024926259	IMPLEMENTATION	0.10903639750737416	WITHOUT_CLASSIFICATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9662240138251741	WITHOUT_CLASSIFICATION	0.033775986174825905	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999017368500626	WITHOUT_CLASSIFICATION	9.826314993752772E-5	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999965446985076	WITHOUT_CLASSIFICATION	3.4553014922929625E-6	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9992623670937556	WITHOUT_CLASSIFICATION	7.376329062444533E-4	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.9996241776078838	WITHOUT_CLASSIFICATION	3.758223921161198E-4	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.999958126506251	WITHOUT_CLASSIFICATION	4.1873493748912047E-5	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9996740299977585	WITHOUT_CLASSIFICATION	3.259700022415609E-4	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.999783450194785	WITHOUT_CLASSIFICATION	2.165498052150328E-4	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9997491139584728	WITHOUT_CLASSIFICATION	2.508860415272306E-4	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.998882223014458	WITHOUT_CLASSIFICATION	0.0011177769855420603	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9958063342897076	WITHOUT_CLASSIFICATION	0.004193665710292403	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999507577069772	WITHOUT_CLASSIFICATION	4.924229302292703E-5	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9946202418883238	WITHOUT_CLASSIFICATION	0.005379758111676243	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9975807822396191	WITHOUT_CLASSIFICATION	0.0024192177603808485	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9907721992663264	WITHOUT_CLASSIFICATION	0.009227800733673682	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9984329160622313	WITHOUT_CLASSIFICATION	0.001567083937768798	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9994543550222563	WITHOUT_CLASSIFICATION	5.456449777436378E-4	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9990727649514765	WITHOUT_CLASSIFICATION	9.272350485235917E-4	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9975807822396191	WITHOUT_CLASSIFICATION	0.0024192177603808485	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9975807822396191	WITHOUT_CLASSIFICATION	0.0024192177603808485	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999426717710743	WITHOUT_CLASSIFICATION	5.732822892570757E-4	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999426717710743	WITHOUT_CLASSIFICATION	5.732822892570757E-4	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.9985049694923877	WITHOUT_CLASSIFICATION	0.001495030507612351	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9958063342897076	WITHOUT_CLASSIFICATION	0.004193665710292403	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9964407264525619	WITHOUT_CLASSIFICATION	0.0035592735474381295	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9997921756300296	WITHOUT_CLASSIFICATION	2.0782436997049343E-4	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9996773971436148	WITHOUT_CLASSIFICATION	3.22602856385192E-4	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9996773971436148	WITHOUT_CLASSIFICATION	3.22602856385192E-4	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.999566197341924	WITHOUT_CLASSIFICATION	4.3380265807594904E-4	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9966266852879528	WITHOUT_CLASSIFICATION	0.0033733147120472767	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9824305897479717	WITHOUT_CLASSIFICATION	0.01756941025202832	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.9994853645772742	WITHOUT_CLASSIFICATION	5.14635422725802E-4	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999510246652901	WITHOUT_CLASSIFICATION	4.8975334709969564E-5	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9997920110036531	WITHOUT_CLASSIFICATION	2.07988996347029E-4	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.9998770186694483	WITHOUT_CLASSIFICATION	1.2298133055163666E-4	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9998130525423831	WITHOUT_CLASSIFICATION	1.8694745761690826E-4	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.9998284593710004	WITHOUT_CLASSIFICATION	1.715406289995933E-4	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999713746727331	WITHOUT_CLASSIFICATION	2.862532726688252E-5	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.9998276842189209	WITHOUT_CLASSIFICATION	1.7231578107917316E-4	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.9992409489291897	WITHOUT_CLASSIFICATION	7.590510708103142E-4	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9996682212684046	WITHOUT_CLASSIFICATION	3.3177873159549596E-4	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9994500877073103	WITHOUT_CLASSIFICATION	5.499122926897037E-4	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9504059398554215	WITHOUT_CLASSIFICATION	0.04959406014457847	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998774411943191	WITHOUT_CLASSIFICATION	1.2255880568080534E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996223331001043	WITHOUT_CLASSIFICATION	3.7766689989576037E-4	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.997543847886847	WITHOUT_CLASSIFICATION	0.002456152113152959	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.8317754993017451	WITHOUT_CLASSIFICATION	0.16822450069825495	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9998471608585944	WITHOUT_CLASSIFICATION	1.5283914140560155E-4	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999632869968478	WITHOUT_CLASSIFICATION	3.671300315219935E-4	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999601116064646	WITHOUT_CLASSIFICATION	3.9888393535374435E-5	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9993509829680772	WITHOUT_CLASSIFICATION	6.490170319227265E-4	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999784185693325	WITHOUT_CLASSIFICATION	2.1581430667573156E-5	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9997526009090022	WITHOUT_CLASSIFICATION	2.4739909099772165E-4	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999442976961675	WITHOUT_CLASSIFICATION	5.57023038325014E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999923011728479	WITHOUT_CLASSIFICATION	7.698827152208653E-6	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9997641175549117	WITHOUT_CLASSIFICATION	2.3588244508838325E-4	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999943968133683	WITHOUT_CLASSIFICATION	5.603186631690721E-6	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996142250016721	WITHOUT_CLASSIFICATION	3.857749983279098E-4	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9998046624930672	WITHOUT_CLASSIFICATION	1.953375069327678E-4	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9998046624930672	WITHOUT_CLASSIFICATION	1.953375069327678E-4	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9990384853229439	WITHOUT_CLASSIFICATION	9.615146770561649E-4	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9991500872103681	WITHOUT_CLASSIFICATION	8.499127896319717E-4	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.999552876017923	WITHOUT_CLASSIFICATION	4.471239820770751E-4	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.999552876017923	WITHOUT_CLASSIFICATION	4.471239820770751E-4	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9693836088518228	WITHOUT_CLASSIFICATION	0.030616391148177165	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9995529461610851	WITHOUT_CLASSIFICATION	4.47053838914867E-4	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.9681305860882429	WITHOUT_CLASSIFICATION	0.031869413911757107	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9996095928005827	WITHOUT_CLASSIFICATION	3.9040719941731936E-4	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.9997078863690946	WITHOUT_CLASSIFICATION	2.921136309053955E-4	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999814273991532	WITHOUT_CLASSIFICATION	1.8572600846768526E-5	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9991515451332472	WITHOUT_CLASSIFICATION	8.484548667526307E-4	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.998524371294533	WITHOUT_CLASSIFICATION	0.0014756287054670711	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.998524371294533	WITHOUT_CLASSIFICATION	0.0014756287054670711	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9992193708789285	WITHOUT_CLASSIFICATION	7.806291210715807E-4	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999192983343898	WITHOUT_CLASSIFICATION	8.070166561024983E-5	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999192983343898	WITHOUT_CLASSIFICATION	8.070166561024983E-5	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9990803331560664	WITHOUT_CLASSIFICATION	9.196668439335478E-4	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.9997475169447022	WITHOUT_CLASSIFICATION	2.5248305529779414E-4	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.9998692789593842	WITHOUT_CLASSIFICATION	1.3072104061587873E-4	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.9998556159885916	WITHOUT_CLASSIFICATION	1.4438401140835807E-4	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9987039600858957	WITHOUT_CLASSIFICATION	0.001296039914104245	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999938251743872	WITHOUT_CLASSIFICATION	6.174825612783336E-6	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999745429551153	WITHOUT_CLASSIFICATION	2.5457044884678335E-5	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999321011635415	WITHOUT_CLASSIFICATION	6.789883645850059E-4	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.996560401971901	WITHOUT_CLASSIFICATION	0.003439598028098989	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.998659002643867	WITHOUT_CLASSIFICATION	0.0013409973561329584	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.980752511349713	WITHOUT_CLASSIFICATION	0.019247488650286984	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9998049634932749	WITHOUT_CLASSIFICATION	1.950365067251788E-4	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9995156380430289	WITHOUT_CLASSIFICATION	4.843619569711214E-4	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.9996923718183335	WITHOUT_CLASSIFICATION	3.076281816665151E-4	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9995642240825284	WITHOUT_CLASSIFICATION	4.357759174716574E-4	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9990607022788649	WITHOUT_CLASSIFICATION	9.392977211351938E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9989993945644015	WITHOUT_CLASSIFICATION	0.001000605435598518	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9985582465416892	WITHOUT_CLASSIFICATION	0.0014417534583108607	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.999425685926695	WITHOUT_CLASSIFICATION	5.743140733050293E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9989993945644015	WITHOUT_CLASSIFICATION	0.001000605435598518	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9989993945644015	WITHOUT_CLASSIFICATION	0.001000605435598518	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9997222595591085	WITHOUT_CLASSIFICATION	2.7774044089144196E-4	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.9801564803142991	WITHOUT_CLASSIFICATION	0.01984351968570081	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.9996106613707126	WITHOUT_CLASSIFICATION	3.893386292874314E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999455630829878	WITHOUT_CLASSIFICATION	5.443691701209413E-5	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.999998732453317	WITHOUT_CLASSIFICATION	1.2675466830040568E-6	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9615737443127543	IMPLEMENTATION	0.03842625568724562	WITHOUT_CLASSIFICATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999882067759179	WITHOUT_CLASSIFICATION	1.1793224082065625E-5	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999455630829878	WITHOUT_CLASSIFICATION	5.443691701209413E-5	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.5168916401791831	WITHOUT_CLASSIFICATION	0.48310835982081696	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9991712763379528	WITHOUT_CLASSIFICATION	8.287236620472526E-4	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999602882207173	WITHOUT_CLASSIFICATION	3.9711779282732195E-5	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9997710736524011	WITHOUT_CLASSIFICATION	2.2892634759883327E-4	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9985119624063479	WITHOUT_CLASSIFICATION	0.0014880375936521875	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9954456637630983	WITHOUT_CLASSIFICATION	0.0045543362369017135	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999219969406066	WITHOUT_CLASSIFICATION	7.800305939343916E-5	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.999946392812269	WITHOUT_CLASSIFICATION	5.360718773093799E-5	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996685462338726	WITHOUT_CLASSIFICATION	3.3145376612740614E-4	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999727262511997	WITHOUT_CLASSIFICATION	2.727374880027831E-5	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996685462338726	WITHOUT_CLASSIFICATION	3.3145376612740614E-4	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.999980869412379	WITHOUT_CLASSIFICATION	1.913058762101978E-5	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9995279833229966	WITHOUT_CLASSIFICATION	4.720166770034024E-4	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.5804681986726227	IMPLEMENTATION	0.41953180132737733	WITHOUT_CLASSIFICATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999907746162298	WITHOUT_CLASSIFICATION	9.22538377013437E-6	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9992624513614916	WITHOUT_CLASSIFICATION	7.375486385084349E-4	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999929406125022	WITHOUT_CLASSIFICATION	7.05938749777179E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999728033908326	WITHOUT_CLASSIFICATION	2.7196609167394757E-4	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999822688985428	WITHOUT_CLASSIFICATION	1.7731101457181097E-5	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999728033908326	WITHOUT_CLASSIFICATION	2.7196609167394757E-4	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996269298614207	WITHOUT_CLASSIFICATION	3.730701385793548E-4	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999599027712225	WITHOUT_CLASSIFICATION	4.0097228777503507E-4	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9991442639641038	WITHOUT_CLASSIFICATION	8.557360358962547E-4	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9998313660152767	WITHOUT_CLASSIFICATION	1.6863398472326998E-4	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999161607963764	WITHOUT_CLASSIFICATION	8.38392036236396E-5	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9993397828104217	WITHOUT_CLASSIFICATION	6.602171895783821E-4	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999915781294205	WITHOUT_CLASSIFICATION	8.42187057952989E-6	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999929406125022	WITHOUT_CLASSIFICATION	7.05938749777179E-6	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999822688985428	WITHOUT_CLASSIFICATION	1.7731101457181097E-5	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996269298614207	WITHOUT_CLASSIFICATION	3.730701385793548E-4	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9990122894070598	WITHOUT_CLASSIFICATION	9.877105929402264E-4	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.9998501959533996	WITHOUT_CLASSIFICATION	1.4980404660042804E-4	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.9993275750401653	WITHOUT_CLASSIFICATION	6.724249598346679E-4	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999987591617341	WITHOUT_CLASSIFICATION	1.2408382659320332E-6	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.9984954136188289	WITHOUT_CLASSIFICATION	0.0015045863811711504	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.998813736327239	WITHOUT_CLASSIFICATION	0.0011862636727608949	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999574043147808	WITHOUT_CLASSIFICATION	4.259568521930521E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996223331001043	WITHOUT_CLASSIFICATION	3.7766689989576037E-4	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999599027712225	WITHOUT_CLASSIFICATION	4.0097228777503507E-4	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.7783100053590588	WITHOUT_CLASSIFICATION	0.2216899946409413	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9998075219911415	WITHOUT_CLASSIFICATION	1.924780088583814E-4	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9890175919148346	WITHOUT_CLASSIFICATION	0.010982408085165466	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.9997005191335606	WITHOUT_CLASSIFICATION	2.9948086643946154E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996223331001043	WITHOUT_CLASSIFICATION	3.7766689989576037E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.99976955629422	WITHOUT_CLASSIFICATION	2.3044370577993077E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996223331001043	WITHOUT_CLASSIFICATION	3.7766689989576037E-4	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.99967151535155	WITHOUT_CLASSIFICATION	3.2848464844997084E-4	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9994583053849349	WITHOUT_CLASSIFICATION	5.41694615065216E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9996081479938768	WITHOUT_CLASSIFICATION	3.9185200612321407E-4	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9960827479397897	WITHOUT_CLASSIFICATION	0.0039172520602103016	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998809586546717	WITHOUT_CLASSIFICATION	1.1904134532822316E-4	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.9998676858567495	WITHOUT_CLASSIFICATION	1.323141432506564E-4	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9994905172482618	WITHOUT_CLASSIFICATION	5.0948275173819E-4	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998351535222006	WITHOUT_CLASSIFICATION	1.6484647779940262E-4	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9988291617330124	WITHOUT_CLASSIFICATION	0.001170838266987693	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.9999049085238974	WITHOUT_CLASSIFICATION	9.509147610259049E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999109158519939	WITHOUT_CLASSIFICATION	8.908414800613369E-5	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9997816846292635	WITHOUT_CLASSIFICATION	2.1831537073646322E-4	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9994481854488039	WITHOUT_CLASSIFICATION	5.518145511960008E-4	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9998563756894517	WITHOUT_CLASSIFICATION	1.43624310548249E-4	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9998692177435881	WITHOUT_CLASSIFICATION	1.307822564118966E-4	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9994627584802995	WITHOUT_CLASSIFICATION	5.372415197004566E-4	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999094357532591	WITHOUT_CLASSIFICATION	9.056424674095304E-5	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999959870524311	WITHOUT_CLASSIFICATION	4.012947568924156E-6	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9998529653289843	WITHOUT_CLASSIFICATION	1.4703467101575006E-4	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9997529934353298	WITHOUT_CLASSIFICATION	2.4700656467024397E-4	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9997529934353298	WITHOUT_CLASSIFICATION	2.4700656467024397E-4	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.9998585639867025	WITHOUT_CLASSIFICATION	1.4143601329746599E-4	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999478810852251	WITHOUT_CLASSIFICATION	5.2118914774875435E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9994022010101048	WITHOUT_CLASSIFICATION	5.977989898951408E-4	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999946158388948	WITHOUT_CLASSIFICATION	5.384161105203214E-6	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9988325227938798	WITHOUT_CLASSIFICATION	0.001167477206120242	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.998607326153321	WITHOUT_CLASSIFICATION	0.0013926738466789308	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9994841305842987	WITHOUT_CLASSIFICATION	5.158694157012872E-4	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.999998501415192	WITHOUT_CLASSIFICATION	1.4985848080091339E-6	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.7812614519116462	IMPLEMENTATION	0.21873854808835386	WITHOUT_CLASSIFICATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999859422308939	WITHOUT_CLASSIFICATION	1.405776910609527E-4	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9996380086399205	WITHOUT_CLASSIFICATION	3.6199136007953665E-4	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.9983913171687429	WITHOUT_CLASSIFICATION	0.0016086828312571611	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9993152297547792	WITHOUT_CLASSIFICATION	6.847702452208429E-4	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9996620970148362	WITHOUT_CLASSIFICATION	3.3790298516377977E-4	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998733682714087	WITHOUT_CLASSIFICATION	1.2663172859138141E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9997975374545695	WITHOUT_CLASSIFICATION	2.0246254543051224E-4	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9997840374983912	WITHOUT_CLASSIFICATION	2.159625016088891E-4	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9997840374983912	WITHOUT_CLASSIFICATION	2.159625016088891E-4	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9716230116031508	WITHOUT_CLASSIFICATION	0.028376988396849094	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998351535222006	WITHOUT_CLASSIFICATION	1.6484647779940262E-4	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9920226822362692	WITHOUT_CLASSIFICATION	0.007977317763730818	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9997154722996234	WITHOUT_CLASSIFICATION	2.8452770037664E-4	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9986549759572193	WITHOUT_CLASSIFICATION	0.0013450240427807475	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.99983522469261	WITHOUT_CLASSIFICATION	1.6477530739008835E-4	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.9998942562523394	WITHOUT_CLASSIFICATION	1.0574374766065479E-4	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9958958726532385	WITHOUT_CLASSIFICATION	0.0041041273467614684	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999265146551299	WITHOUT_CLASSIFICATION	7.34853448700818E-4	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.9998906460096831	WITHOUT_CLASSIFICATION	1.093539903168805E-4	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999976314985807	WITHOUT_CLASSIFICATION	2.3685014192631863E-6	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999937477220417	WITHOUT_CLASSIFICATION	6.2522779581371365E-6	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999989501928937	WITHOUT_CLASSIFICATION	1.0498071063041741E-5	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9758709100502988	WITHOUT_CLASSIFICATION	0.024129089949701192	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9998172387245707	WITHOUT_CLASSIFICATION	1.8276127542917803E-4	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999450818334863	WITHOUT_CLASSIFICATION	5.491816651374505E-5	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9997916266468309	WITHOUT_CLASSIFICATION	2.0837335316915652E-4	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9937983712666014	WITHOUT_CLASSIFICATION	0.006201628733398592	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9931941965401067	WITHOUT_CLASSIFICATION	0.006805803459893328	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999000564682196	WITHOUT_CLASSIFICATION	9.994353178053104E-5	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999799461831986	WITHOUT_CLASSIFICATION	2.0053816801288504E-5	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999396478604845	WITHOUT_CLASSIFICATION	6.035213951549308E-4	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9996278526628312	WITHOUT_CLASSIFICATION	3.7214733716880587E-4	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999615054280561	WITHOUT_CLASSIFICATION	3.8494571943935864E-5	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999964742159666	WITHOUT_CLASSIFICATION	3.5257840334816545E-6	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9993372502278371	WITHOUT_CLASSIFICATION	6.627497721628818E-4	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.8495680825915652	WITHOUT_CLASSIFICATION	0.15043191740843487	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9993039533044558	WITHOUT_CLASSIFICATION	6.96046695544292E-4	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9988041162173159	WITHOUT_CLASSIFICATION	0.0011958837826840372	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9996150099210885	WITHOUT_CLASSIFICATION	3.8499007891154243E-4	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9996306828083015	WITHOUT_CLASSIFICATION	3.693171916985579E-4	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999948795885514	WITHOUT_CLASSIFICATION	5.120411448530441E-6	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9997730291651183	WITHOUT_CLASSIFICATION	2.2697083488169595E-4	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.999573741771969	WITHOUT_CLASSIFICATION	4.262582280309209E-4	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.997207432494653	WITHOUT_CLASSIFICATION	0.0027925675053468656	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9998609320488454	WITHOUT_CLASSIFICATION	1.3906795115461084E-4	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9954955708883695	WITHOUT_CLASSIFICATION	0.004504429111630539	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.997950322304871	WITHOUT_CLASSIFICATION	0.002049677695129001	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.997950322304871	WITHOUT_CLASSIFICATION	0.002049677695129001	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9982495343043141	WITHOUT_CLASSIFICATION	0.0017504656956859805	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.999803593007964	WITHOUT_CLASSIFICATION	1.9640699203608383E-4	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999560473912424	WITHOUT_CLASSIFICATION	4.395260875743948E-5	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999560473912424	WITHOUT_CLASSIFICATION	4.395260875743948E-5	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.9998611522806459	WITHOUT_CLASSIFICATION	1.3884771935413027E-4	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999421868664484	WITHOUT_CLASSIFICATION	5.781313355153622E-5	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9272829928723284	WITHOUT_CLASSIFICATION	0.07271700712767162	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999759063879885	WITHOUT_CLASSIFICATION	2.4093612011517692E-5	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9996812004118368	WITHOUT_CLASSIFICATION	3.187995881631106E-4	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999713310867436	WITHOUT_CLASSIFICATION	2.8668913256266947E-5	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999713310867436	WITHOUT_CLASSIFICATION	2.8668913256266947E-5	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9995741566049658	WITHOUT_CLASSIFICATION	4.25843395034151E-4	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9997090149616644	WITHOUT_CLASSIFICATION	2.909850383355942E-4	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.9997871960419048	WITHOUT_CLASSIFICATION	2.128039580951907E-4	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9993711698247906	WITHOUT_CLASSIFICATION	6.288301752094855E-4	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9997592654824909	WITHOUT_CLASSIFICATION	2.4073451750910102E-4	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9991116340085027	WITHOUT_CLASSIFICATION	8.883659914973128E-4	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999923963366013	WITHOUT_CLASSIFICATION	7.603663398765451E-6	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.9996052471726085	WITHOUT_CLASSIFICATION	3.947528273915473E-4	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999175849977513	WITHOUT_CLASSIFICATION	8.24150022486982E-5	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.9992165838364867	WITHOUT_CLASSIFICATION	7.834161635132294E-4	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.9995453949606049	WITHOUT_CLASSIFICATION	4.546050393950768E-4	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999174001455798	WITHOUT_CLASSIFICATION	8.259985442017866E-5	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9997854756803921	WITHOUT_CLASSIFICATION	2.1452431960798405E-4	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.7131024258876442	WITHOUT_CLASSIFICATION	0.2868975741123559	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.8202750260467878	WITHOUT_CLASSIFICATION	0.17972497395321205	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999672390155657	WITHOUT_CLASSIFICATION	3.276098443419485E-5	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.9993984579809535	WITHOUT_CLASSIFICATION	6.015420190463988E-4	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999892425331282	WITHOUT_CLASSIFICATION	1.075746687181142E-5	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.998270201439366	WITHOUT_CLASSIFICATION	0.0017297985606340347	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9925948984803834	WITHOUT_CLASSIFICATION	0.007405101519616544	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9788664483682944	WITHOUT_CLASSIFICATION	0.021133551631705633	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9949857726395229	WITHOUT_CLASSIFICATION	0.005014227360477122	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9886781415095472	WITHOUT_CLASSIFICATION	0.011321858490452821	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9988065223068583	WITHOUT_CLASSIFICATION	0.0011934776931416802	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9958278627167303	WITHOUT_CLASSIFICATION	0.004172137283269705	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9998880701911077	WITHOUT_CLASSIFICATION	1.1192980889232925E-4	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.9999144881295368	WITHOUT_CLASSIFICATION	8.551187046329305E-5	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.9997910611491975	WITHOUT_CLASSIFICATION	2.089388508026223E-4	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998290552267276	WITHOUT_CLASSIFICATION	1.709447732723107E-4	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999784203774718	WITHOUT_CLASSIFICATION	2.157962252816529E-5	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999734498888912	WITHOUT_CLASSIFICATION	2.6550111108804443E-4	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999837750982915	WITHOUT_CLASSIFICATION	1.6224901708457348E-5	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.999773157554494	WITHOUT_CLASSIFICATION	2.268424455060192E-4	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9998095991482241	WITHOUT_CLASSIFICATION	1.9040085177594987E-4	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9994560750074958	WITHOUT_CLASSIFICATION	5.439249925042629E-4	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9996682212684046	WITHOUT_CLASSIFICATION	3.3177873159549596E-4	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9996253329855498	WITHOUT_CLASSIFICATION	3.746670144502683E-4	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999720489359313	WITHOUT_CLASSIFICATION	2.795106406870991E-5	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998582946016044	WITHOUT_CLASSIFICATION	1.417053983956282E-4	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.9996955588889542	WITHOUT_CLASSIFICATION	3.0444111104578094E-4	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.9997181284251696	WITHOUT_CLASSIFICATION	2.81871574830371E-4	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.9997846047722649	WITHOUT_CLASSIFICATION	2.153952277351178E-4	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9993987546010479	WITHOUT_CLASSIFICATION	6.012453989520021E-4	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.9997114972770156	WITHOUT_CLASSIFICATION	2.885027229844253E-4	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.9997027880679131	WITHOUT_CLASSIFICATION	2.972119320868343E-4	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9991948068559043	WITHOUT_CLASSIFICATION	8.051931440957342E-4	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9989520253463092	WITHOUT_CLASSIFICATION	0.0010479746536907434	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9978952088688995	WITHOUT_CLASSIFICATION	0.0021047911311004508	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999319458042856	WITHOUT_CLASSIFICATION	6.805419571447492E-5	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9987584958488915	WITHOUT_CLASSIFICATION	0.00124150415110852	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.579368969224317	WITHOUT_CLASSIFICATION	0.42063103077568303	IMPLEMENTATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9980506947710481	WITHOUT_CLASSIFICATION	0.001949305228951793	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.999657100070173	WITHOUT_CLASSIFICATION	3.4289992982702367E-4	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9998465591261265	WITHOUT_CLASSIFICATION	1.5344087387350196E-4	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9996523296399169	WITHOUT_CLASSIFICATION	3.476703600830296E-4	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9998332840404739	WITHOUT_CLASSIFICATION	1.6671595952614837E-4	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9998838884136667	WITHOUT_CLASSIFICATION	1.161115863333241E-4	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999921958403749	WITHOUT_CLASSIFICATION	7.804159625148032E-6	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.995935355905684	WITHOUT_CLASSIFICATION	0.00406464409431601	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.995935355905684	WITHOUT_CLASSIFICATION	0.00406464409431601	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999711678831	WITHOUT_CLASSIFICATION	2.8832116966705478E-8	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.999959420077323	WITHOUT_CLASSIFICATION	4.057992267710503E-5	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999851687646059	WITHOUT_CLASSIFICATION	1.4831235394235314E-5	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9998164467639666	WITHOUT_CLASSIFICATION	1.8355323603337932E-4	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999146475560572	WITHOUT_CLASSIFICATION	8.535244394276426E-5	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9997947325748078	WITHOUT_CLASSIFICATION	2.0526742519211334E-4	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9998002619367969	WITHOUT_CLASSIFICATION	1.9973806320306253E-4	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999708962751099	WITHOUT_CLASSIFICATION	2.9103724890042088E-5	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999321355916092	WITHOUT_CLASSIFICATION	6.786440839080571E-5	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999874841325892	WITHOUT_CLASSIFICATION	1.251586741079877E-5	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.99994160892324	WITHOUT_CLASSIFICATION	5.839107676000026E-5	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9981148411009223	WITHOUT_CLASSIFICATION	0.0018851588990777355	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999611385675401	WITHOUT_CLASSIFICATION	3.88614324598472E-5	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9996020136117931	WITHOUT_CLASSIFICATION	3.97986388206971E-4	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999156884604655	WITHOUT_CLASSIFICATION	8.431153953442621E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999156884604655	WITHOUT_CLASSIFICATION	8.431153953442621E-5	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999591083027183	WITHOUT_CLASSIFICATION	4.08916972816792E-5	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998760758017095	WITHOUT_CLASSIFICATION	1.2392419829051435E-4	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999131048864632	WITHOUT_CLASSIFICATION	8.689511353684636E-5	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.999967732729293	WITHOUT_CLASSIFICATION	3.226727070707279E-5	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9997247556340068	WITHOUT_CLASSIFICATION	2.7524436599323665E-4	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997487852902269	WITHOUT_CLASSIFICATION	2.512147097731355E-4	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9996854728419334	WITHOUT_CLASSIFICATION	3.145271580665527E-4	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.9999733356005243	WITHOUT_CLASSIFICATION	2.666439947579573E-5	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9991042866495309	WITHOUT_CLASSIFICATION	8.957133504691229E-4	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9981314793685838	WITHOUT_CLASSIFICATION	0.0018685206314162197	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999339212586	WITHOUT_CLASSIFICATION	6.607874139991664E-5	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9997769934775731	WITHOUT_CLASSIFICATION	2.2300652242686358E-4	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9995596753665507	WITHOUT_CLASSIFICATION	4.4032463344931554E-4	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999073432895069	WITHOUT_CLASSIFICATION	9.265671049312487E-5	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9968988722904691	WITHOUT_CLASSIFICATION	0.0031011277095308334	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9978975873973922	WITHOUT_CLASSIFICATION	0.002102412602607739	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9982002059022055	WITHOUT_CLASSIFICATION	0.001799794097794514	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999544235385447	WITHOUT_CLASSIFICATION	4.557646145533496E-5	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999947211352935	WITHOUT_CLASSIFICATION	5.278864706370052E-6	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9995933687050262	WITHOUT_CLASSIFICATION	4.06631294973656E-4	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9998503563521434	WITHOUT_CLASSIFICATION	1.4964364785664466E-4	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999863964301232	WITHOUT_CLASSIFICATION	1.3603569876798413E-5	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999660491671503	WITHOUT_CLASSIFICATION	3.3950832849785047E-5	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999785442582728	WITHOUT_CLASSIFICATION	2.1455741727243272E-5	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999463055704809	WITHOUT_CLASSIFICATION	5.3694429518952006E-5	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.9996996119595204	WITHOUT_CLASSIFICATION	3.003880404796296E-4	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998994466153251	WITHOUT_CLASSIFICATION	1.0055338467491304E-4	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9740119041075216	WITHOUT_CLASSIFICATION	0.025988095892478403	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9977598808096121	WITHOUT_CLASSIFICATION	0.00224011919038791	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9977360597412464	WITHOUT_CLASSIFICATION	0.002263940258753675	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9991649192780031	WITHOUT_CLASSIFICATION	8.350807219970179E-4	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999771833142641	WITHOUT_CLASSIFICATION	2.281668573583968E-5	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999279361469984	WITHOUT_CLASSIFICATION	7.20638530016482E-5	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9992705556241556	WITHOUT_CLASSIFICATION	7.29444375844372E-4	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9993901869722349	WITHOUT_CLASSIFICATION	6.098130277652108E-4	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.989347200435783	WITHOUT_CLASSIFICATION	0.010652799564217053	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9894257067067533	WITHOUT_CLASSIFICATION	0.01057429329324655	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9957197885743934	WITHOUT_CLASSIFICATION	0.004280211425606691	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9985801220604607	WITHOUT_CLASSIFICATION	0.001419877939539372	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999860552712203	WITHOUT_CLASSIFICATION	1.3944728779793494E-5	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9571574682229631	WITHOUT_CLASSIFICATION	0.04284253177703683	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9997550469495673	WITHOUT_CLASSIFICATION	2.449530504327827E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9990903938858601	WITHOUT_CLASSIFICATION	9.09606114140039E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9990903938858601	WITHOUT_CLASSIFICATION	9.09606114140039E-4	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9997214296316472	WITHOUT_CLASSIFICATION	2.7857036835268176E-4	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999854236157462	WITHOUT_CLASSIFICATION	1.4576384253930045E-5	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9998534174983291	WITHOUT_CLASSIFICATION	1.4658250167084243E-4	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999508300792646	WITHOUT_CLASSIFICATION	4.9169920735356986E-5	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9087919735151573	WITHOUT_CLASSIFICATION	0.09120802648484275	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999934928881854	WITHOUT_CLASSIFICATION	6.507111814509172E-6	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9997668086660068	WITHOUT_CLASSIFICATION	2.331913339931803E-4	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9992191667523281	WITHOUT_CLASSIFICATION	7.808332476717944E-4	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999995015346554	WITHOUT_CLASSIFICATION	4.984653444691277E-7	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995839018931497	WITHOUT_CLASSIFICATION	4.160981068502438E-4	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995839018931497	WITHOUT_CLASSIFICATION	4.160981068502438E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.99945685332025	WITHOUT_CLASSIFICATION	5.431466797500808E-4	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999972263765495	WITHOUT_CLASSIFICATION	2.7736234504885044E-6	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.999935302148981	WITHOUT_CLASSIFICATION	6.469785101900056E-5	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9884321511232387	WITHOUT_CLASSIFICATION	0.011567848876761315	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.999610846741884	WITHOUT_CLASSIFICATION	3.891532581159665E-4	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999591159668444	WITHOUT_CLASSIFICATION	4.088403315558629E-5	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999365301574091	WITHOUT_CLASSIFICATION	6.34698425908893E-5	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9990075270719962	WITHOUT_CLASSIFICATION	9.924729280036972E-4	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9993413229201067	WITHOUT_CLASSIFICATION	6.586770798933099E-4	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999876362666674	WITHOUT_CLASSIFICATION	1.2363733332578124E-5	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999887166568544	WITHOUT_CLASSIFICATION	1.1283343145552532E-5	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9877422664862893	WITHOUT_CLASSIFICATION	0.01225773351371072	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9815777518154819	WITHOUT_CLASSIFICATION	0.018422248184518066	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9994997541733452	WITHOUT_CLASSIFICATION	5.002458266548169E-4	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9995460710822606	WITHOUT_CLASSIFICATION	4.539289177394092E-4	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999672437449337	WITHOUT_CLASSIFICATION	3.275625506621083E-5	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9991553270381309	WITHOUT_CLASSIFICATION	8.446729618690416E-4	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.998087583740621	WITHOUT_CLASSIFICATION	0.001912416259379	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9332788394127196	WITHOUT_CLASSIFICATION	0.06672116058728042	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.999891238013752	WITHOUT_CLASSIFICATION	1.0876198624799944E-4	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9978427150557633	WITHOUT_CLASSIFICATION	0.0021572849442367177	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999781678469871	WITHOUT_CLASSIFICATION	2.1832153012906287E-5	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999922910921466	WITHOUT_CLASSIFICATION	7.708907853528302E-6	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999401621286085	WITHOUT_CLASSIFICATION	5.98378713916498E-5	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999346948016	WITHOUT_CLASSIFICATION	6.530519840889264E-8	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997975904663434	WITHOUT_CLASSIFICATION	2.0240953365650093E-4	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9998767223114394	WITHOUT_CLASSIFICATION	1.232776885605398E-4	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9996600199377143	WITHOUT_CLASSIFICATION	3.3998006228570007E-4	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999943060892858	WITHOUT_CLASSIFICATION	5.693910714201444E-5	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9993571824385669	WITHOUT_CLASSIFICATION	6.428175614330888E-4	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999311807969538	WITHOUT_CLASSIFICATION	6.881920304621217E-5	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999120904842275	WITHOUT_CLASSIFICATION	8.790951577256177E-5	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999810228175474	WITHOUT_CLASSIFICATION	1.897718245257188E-5	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9993555433584693	WITHOUT_CLASSIFICATION	6.444566415307037E-4	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.8301244084532688	WITHOUT_CLASSIFICATION	0.16987559154673124	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9965544614244857	WITHOUT_CLASSIFICATION	0.0034455385755143317	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9734210573480162	WITHOUT_CLASSIFICATION	0.026578942651983798	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999958983016484	WITHOUT_CLASSIFICATION	4.1016983517051E-6	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999611385675401	WITHOUT_CLASSIFICATION	3.88614324598472E-5	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9988819008499561	WITHOUT_CLASSIFICATION	0.0011180991500438838	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9998893019919165	WITHOUT_CLASSIFICATION	1.1069800808351905E-4	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9857019030991511	WITHOUT_CLASSIFICATION	0.014298096900848893	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999848947659941	WITHOUT_CLASSIFICATION	1.5105234006049176E-5	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999962314952273	WITHOUT_CLASSIFICATION	3.768504772838748E-6	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.995563600425208	WITHOUT_CLASSIFICATION	0.0044363995747920375	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9961424176203965	WITHOUT_CLASSIFICATION	0.0038575823796035595	IMPLEMENTATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.7169315640807675	IMPLEMENTATION	0.28306843591923253	WITHOUT_CLASSIFICATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999922744912665	WITHOUT_CLASSIFICATION	7.725508733514592E-6	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9884825283306508	WITHOUT_CLASSIFICATION	0.011517471669349117	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999065252962054	WITHOUT_CLASSIFICATION	9.347470379469205E-5	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9374960653210445	WITHOUT_CLASSIFICATION	0.06250393467895561	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.995070048511098	WITHOUT_CLASSIFICATION	0.004929951488902002	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999462672182896	WITHOUT_CLASSIFICATION	5.3732781710296625E-5	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9948181215997011	WITHOUT_CLASSIFICATION	0.005181878400298959	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987972551183578	WITHOUT_CLASSIFICATION	0.0012027448816421444	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9993397828104217	WITHOUT_CLASSIFICATION	6.602171895783821E-4	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999060760207461	WITHOUT_CLASSIFICATION	9.392397925385299E-5	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9994606289195069	WITHOUT_CLASSIFICATION	5.393710804931231E-4	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9995105179840468	WITHOUT_CLASSIFICATION	4.894820159531719E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987972551183578	WITHOUT_CLASSIFICATION	0.0012027448816421444	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.8434917871916321	WITHOUT_CLASSIFICATION	0.15650821280836796	IMPLEMENTATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9875120972071955	WITHOUT_CLASSIFICATION	0.012487902792804538	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999658975032866	WITHOUT_CLASSIFICATION	3.4102496713391364E-4	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9959031745267588	WITHOUT_CLASSIFICATION	0.004096825473241182	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9993136294549031	WITHOUT_CLASSIFICATION	6.863705450968765E-4	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9949930124569318	WITHOUT_CLASSIFICATION	0.005006987543068143	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999171200650582	WITHOUT_CLASSIFICATION	8.287993494190148E-5	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9837390053313965	WITHOUT_CLASSIFICATION	0.016260994668603593	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9998315088983155	WITHOUT_CLASSIFICATION	1.6849110168437722E-4	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9996803282496769	WITHOUT_CLASSIFICATION	3.196717503230342E-4	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9997937211615407	WITHOUT_CLASSIFICATION	2.0627883845924884E-4	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9881964191184732	WITHOUT_CLASSIFICATION	0.011803580881526736	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9995751362379816	WITHOUT_CLASSIFICATION	4.248637620184796E-4	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9684333247064422	WITHOUT_CLASSIFICATION	0.03156667529355785	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9985637552761835	WITHOUT_CLASSIFICATION	0.0014362447238165706	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9993397828104217	WITHOUT_CLASSIFICATION	6.602171895783821E-4	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999396478604845	WITHOUT_CLASSIFICATION	6.035213951549308E-4	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999861966106022	WITHOUT_CLASSIFICATION	1.3803389397943431E-5	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999826576931904	WITHOUT_CLASSIFICATION	1.7342306809625002E-5	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9985576057848478	WITHOUT_CLASSIFICATION	0.0014423942151522075	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9712818570690458	WITHOUT_CLASSIFICATION	0.028718142930954267	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9891932355410741	WITHOUT_CLASSIFICATION	0.010806764458925972	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9998669916042938	WITHOUT_CLASSIFICATION	1.3300839570613702E-4	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9996260334385687	WITHOUT_CLASSIFICATION	3.739665614313666E-4	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999996635082953	WITHOUT_CLASSIFICATION	3.3649170470298993E-6	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999695100379172	WITHOUT_CLASSIFICATION	3.0489962082776133E-5	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9996806550086675	WITHOUT_CLASSIFICATION	3.1934499133246056E-4	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9073550659314601	WITHOUT_CLASSIFICATION	0.09264493406853991	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999472451778487	WITHOUT_CLASSIFICATION	5.275482215131159E-4	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9713453173376212	WITHOUT_CLASSIFICATION	0.02865468266237891	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.8761451220614893	IMPLEMENTATION	0.12385487793851066	WITHOUT_CLASSIFICATION
and perform the load	WITHOUT_CLASSIFICATION	0.9998310864997564	WITHOUT_CLASSIFICATION	1.6891350024361652E-4	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998984732140571	WITHOUT_CLASSIFICATION	1.0152678594287413E-4	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9993184635297229	WITHOUT_CLASSIFICATION	6.815364702771064E-4	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999016415154858	WITHOUT_CLASSIFICATION	9.835848451425182E-5	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9998677850257667	WITHOUT_CLASSIFICATION	1.322149742332925E-4	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999896215010057	WITHOUT_CLASSIFICATION	1.0378498994333954E-5	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999510033351094	WITHOUT_CLASSIFICATION	4.899666489062315E-5	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9982101691260283	WITHOUT_CLASSIFICATION	0.0017898308739716406	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.999833838239731	WITHOUT_CLASSIFICATION	1.661617602689443E-4	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9988290211233111	WITHOUT_CLASSIFICATION	0.0011709788766889185	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9993211787177428	WITHOUT_CLASSIFICATION	6.788212822571109E-4	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9993211787177428	WITHOUT_CLASSIFICATION	6.788212822571109E-4	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9986859314154991	WITHOUT_CLASSIFICATION	0.0013140685845008176	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999899721690031	WITHOUT_CLASSIFICATION	1.002783099685314E-5	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998181429901621	WITHOUT_CLASSIFICATION	1.818570098378486E-4	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999877351660292	WITHOUT_CLASSIFICATION	1.2264833970650017E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9996095928005827	WITHOUT_CLASSIFICATION	3.9040719941731936E-4	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9996095928005827	WITHOUT_CLASSIFICATION	3.9040719941731936E-4	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9995397724093439	WITHOUT_CLASSIFICATION	4.602275906560807E-4	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.999947746284826	WITHOUT_CLASSIFICATION	5.225371517413952E-5	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9995587894979437	WITHOUT_CLASSIFICATION	4.412105020562013E-4	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9997328877758943	WITHOUT_CLASSIFICATION	2.671122241056277E-4	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9993397828104217	WITHOUT_CLASSIFICATION	6.602171895783821E-4	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.998179484859178	WITHOUT_CLASSIFICATION	0.0018205151408220651	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.5772550280530782	WITHOUT_CLASSIFICATION	0.4227449719469219	IMPLEMENTATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999053492805642	WITHOUT_CLASSIFICATION	9.46507194358409E-5	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.99979218974205	WITHOUT_CLASSIFICATION	2.0781025795004498E-4	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9996362083723856	WITHOUT_CLASSIFICATION	3.6379162761435396E-4	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9979789040113642	WITHOUT_CLASSIFICATION	0.0020210959886357424	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997933520631859	WITHOUT_CLASSIFICATION	2.066479368141476E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997933520631859	WITHOUT_CLASSIFICATION	2.066479368141476E-4	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9993397828104217	WITHOUT_CLASSIFICATION	6.602171895783821E-4	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9993973343412402	WITHOUT_CLASSIFICATION	6.026656587598182E-4	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9994049497678764	WITHOUT_CLASSIFICATION	5.950502321234675E-4	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9997237114302502	WITHOUT_CLASSIFICATION	2.7628856974984997E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9998202510689032	WITHOUT_CLASSIFICATION	1.7974893109693252E-4	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999384997326511	WITHOUT_CLASSIFICATION	6.150026734884917E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999856737624473	WITHOUT_CLASSIFICATION	1.432623755264159E-5	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999118772752136	WITHOUT_CLASSIFICATION	8.812272478646212E-5	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9995976047171689	WITHOUT_CLASSIFICATION	4.0239528283117525E-4	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9995127337379376	WITHOUT_CLASSIFICATION	4.87266262062413E-4	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9996803282496769	WITHOUT_CLASSIFICATION	3.196717503230342E-4	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999242312274014	WITHOUT_CLASSIFICATION	7.576877259860461E-5	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9995785603418746	WITHOUT_CLASSIFICATION	4.214396581253138E-4	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999326717033734	WITHOUT_CLASSIFICATION	6.732829662651852E-5	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.9995515802688819	WITHOUT_CLASSIFICATION	4.4841973111801506E-4	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9993371428350164	WITHOUT_CLASSIFICATION	6.62857164983624E-4	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9996140584130391	WITHOUT_CLASSIFICATION	3.8594158696083605E-4	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9988718263963987	WITHOUT_CLASSIFICATION	0.0011281736036013006	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9981662737718726	WITHOUT_CLASSIFICATION	0.0018337262281274025	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9992374952523552	WITHOUT_CLASSIFICATION	7.6250474764473E-4	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9662804046142366	WITHOUT_CLASSIFICATION	0.0337195953857634	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9662804046142366	WITHOUT_CLASSIFICATION	0.0337195953857634	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999455630829878	WITHOUT_CLASSIFICATION	5.443691701209413E-5	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9994284394871904	WITHOUT_CLASSIFICATION	5.715605128095422E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9989993945644015	WITHOUT_CLASSIFICATION	0.001000605435598518	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9980156797858063	WITHOUT_CLASSIFICATION	0.001984320214193705	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9993229573948605	WITHOUT_CLASSIFICATION	6.77042605139366E-4	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9971368676161562	WITHOUT_CLASSIFICATION	0.0028631323838439224	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999907746162298	WITHOUT_CLASSIFICATION	9.22538377013437E-6	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999998254383483	WITHOUT_CLASSIFICATION	1.745616517673684E-7	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9990122894070598	WITHOUT_CLASSIFICATION	9.877105929402264E-4	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.995227413605424	WITHOUT_CLASSIFICATION	0.004772586394576045	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996223331001043	WITHOUT_CLASSIFICATION	3.7766689989576037E-4	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9176610238369263	WITHOUT_CLASSIFICATION	0.08233897616307374	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.999263062786551	WITHOUT_CLASSIFICATION	7.369372134488952E-4	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999433732178563	WITHOUT_CLASSIFICATION	5.662678214357261E-5	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999459401371703	WITHOUT_CLASSIFICATION	5.405986282966945E-5	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9992857912677707	WITHOUT_CLASSIFICATION	7.142087322293248E-4	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999990578020105	WITHOUT_CLASSIFICATION	9.421979894245879E-7	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9996891836540296	WITHOUT_CLASSIFICATION	3.108163459704552E-4	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9944645575259413	WITHOUT_CLASSIFICATION	0.005535442474058652	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999794647464811	WITHOUT_CLASSIFICATION	2.0535253518910196E-5	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999948311379364	WITHOUT_CLASSIFICATION	5.168862063605344E-5	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999991463825428	WITHOUT_CLASSIFICATION	8.536174571798392E-7	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9997592654824909	WITHOUT_CLASSIFICATION	2.4073451750910102E-4	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9936069519033041	WITHOUT_CLASSIFICATION	0.006393048096695915	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9996955829447397	WITHOUT_CLASSIFICATION	3.0441705526031365E-4	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9996955829447397	WITHOUT_CLASSIFICATION	3.0441705526031365E-4	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9979030061245957	WITHOUT_CLASSIFICATION	0.002096993875404352	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9912832373482869	WITHOUT_CLASSIFICATION	0.008716762651713094	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.99982036698942	WITHOUT_CLASSIFICATION	1.796330105800257E-4	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9997798378600397	WITHOUT_CLASSIFICATION	2.2016213996041328E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9998576703963319	WITHOUT_CLASSIFICATION	1.4232960366813212E-4	IMPLEMENTATION
